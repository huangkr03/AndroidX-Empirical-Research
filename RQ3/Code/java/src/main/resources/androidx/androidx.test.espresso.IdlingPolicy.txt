androidx.test.espresso.IdlingPolicy
<androidx.test.espresso.IdlingPolicy: java.lang.String TAG>
<androidx.test.espresso.IdlingPolicy: long idleTimeout>
<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>
<androidx.test.espresso.IdlingPolicy: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler>
<androidx.test.espresso.IdlingPolicy: boolean timeoutIfDebuggerAttached>
<androidx.test.espresso.IdlingPolicy: boolean disableOnTimeout>
    static volatile long '-$$Nest$fgetidleTimeout'(androidx.test.espresso.IdlingPolicy)
    {
        androidx.test.espresso.IdlingPolicy r0;
        long $l0;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy;

        $l0 = r0.<androidx.test.espresso.IdlingPolicy: long idleTimeout>;

        return $l0;
    }

    public long getIdleTimeout()
    {
        androidx.test.espresso.IdlingPolicy r0;
        long $l0;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        $l0 = r0.<androidx.test.espresso.IdlingPolicy: long idleTimeout>;

        return $l0;
    }

    androidx.test.espresso.IdlingPolicy$Builder toBuilder()
    {
        androidx.test.espresso.IdlingPolicy r0;
        androidx.test.espresso.IdlingPolicy$Builder r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        r1 = new androidx.test.espresso.IdlingPolicy$Builder;

        specialinvoke r1.<androidx.test.espresso.IdlingPolicy$Builder: void <init>(androidx.test.espresso.IdlingPolicy,androidx.test.espresso.IdlingPolicy$Builder-IA)>(r0, null);

        return r1;
    }

    static volatile androidx.test.espresso.IdlingPolicy$ResponseAction '-$$Nest$fgeterrorHandler'(androidx.test.espresso.IdlingPolicy)
    {
        androidx.test.espresso.IdlingPolicy r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy;

        $r1 = r0.<androidx.test.espresso.IdlingPolicy: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        return $r1;
    }

    static volatile java.util.concurrent.TimeUnit '-$$Nest$fgetunit'(androidx.test.espresso.IdlingPolicy)
    {
        androidx.test.espresso.IdlingPolicy r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy;

        $r1 = r0.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    public java.util.concurrent.TimeUnit getIdleTimeoutUnit()
    {
        androidx.test.espresso.IdlingPolicy r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        $r1 = r0.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    private void <init>(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy r0;
        androidx.test.espresso.IdlingPolicy$Builder r1;
        long $l0, $l2;
        byte $b1;
        java.util.concurrent.TimeUnit $r2, $r4;
        java.lang.Object $r3, $r6;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r5, $r7;
        boolean $z0, $z1, z2;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        r1 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: long '-$$Nest$fgetidleTimeout'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        z2 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean)>(z2);

        $l2 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: long '-$$Nest$fgetidleTimeout'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy: long idleTimeout> = $l2;

        $r2 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit '-$$Nest$fgetunit'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        $r3 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.util.concurrent.TimeUnit) $r3;

        r0.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit> = $r4;

        $r5 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction '-$$Nest$fgeterrorHandler'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (androidx.test.espresso.IdlingPolicy$ResponseAction) $r6;

        r0.<androidx.test.espresso.IdlingPolicy: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r7;

        $z0 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: boolean '-$$Nest$fgettimeoutIfDebuggerAttached'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy: boolean timeoutIfDebuggerAttached> = $z0;

        $z1 = staticinvoke <androidx.test.espresso.IdlingPolicy$Builder: boolean '-$$Nest$fgetdisableOnTimeout'(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy: boolean disableOnTimeout> = $z1;

        return;

     label2:
        z2 = 0;

        goto label1;
    }

    void <init>(androidx.test.espresso.IdlingPolicy$Builder, androidx.test.espresso.IdlingPolicy-IA)
    {
        androidx.test.espresso.IdlingPolicy r0;
        androidx.test.espresso.IdlingPolicy$Builder r1;
        androidx.test.espresso.IdlingPolicy-IA r2;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        r1 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        r2 := @parameter1: androidx.test.espresso.IdlingPolicy-IA;

        specialinvoke r0.<androidx.test.espresso.IdlingPolicy: void <init>(androidx.test.espresso.IdlingPolicy$Builder)>(r1);

        return;
    }

    public void handleTimeout(java.util.List, java.lang.String)
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction $r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, r14, r17, r18, r21;
        java.lang.String $r4, $r8, r11, r13, r16;
        androidx.test.espresso.AppNotIdleException $r5;
        androidx.test.espresso.IdlingPolicy r9;
        java.util.List r10;
        java.lang.IllegalStateException r12, r19;
        androidx.test.espresso.IdlingResourceTimeoutException r15, r20;
        java.lang.Throwable r22, r23;

        r9 := @this: androidx.test.espresso.IdlingPolicy;

        r10 := @parameter0: java.util.List;

        r11 := @parameter1: java.lang.String;

        $r1 = <androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction>;

        $r0 = r9.<androidx.test.espresso.IdlingPolicy: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        $i0 = virtualinvoke $r0.<androidx.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        r19 = new java.lang.IllegalStateException;

        r12 = r19;

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        r18 = new java.lang.StringBuilder;

        r14 = r18;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("should never reach here.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw r12;

     label2:
        r20 = new androidx.test.espresso.IdlingResourceTimeoutException;

        r15 = r20;

        specialinvoke r20.<androidx.test.espresso.IdlingResourceTimeoutException: void <init>(java.util.List)>(r10);

        r22 = (java.lang.Throwable) r15;

        throw r22;

     label3:
        $r5 = staticinvoke <androidx.test.espresso.AppNotIdleException: androidx.test.espresso.AppNotIdleException create(java.util.List,java.lang.String)>(r10, r11);

        r23 = (java.lang.Throwable) $r5;

        throw r23;

     label4:
        r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        r21 = new java.lang.StringBuilder;

        r17 = r21;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("These resources are not idle: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("IdlingPolicy", $r4);

        return;
    }

    public boolean getDisableOnTimeout()
    {
        androidx.test.espresso.IdlingPolicy r0;
        boolean $z0;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        $z0 = r0.<androidx.test.espresso.IdlingPolicy: boolean disableOnTimeout>;

        return $z0;
    }

    public boolean getTimeoutIfDebuggerAttached()
    {
        androidx.test.espresso.IdlingPolicy r0;
        boolean $z0;

        r0 := @this: androidx.test.espresso.IdlingPolicy;

        $z0 = r0.<androidx.test.espresso.IdlingPolicy: boolean timeoutIfDebuggerAttached>;

        return $z0;
    }

androidx.test.espresso.IdlingPolicy$1
<androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction>
    static void <clinit>()
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r9;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r2, $r4, $r10;
        java.lang.Throwable $r6, $r7, $r8;

        $r0 = staticinvoke <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction> = $r1;

     label1:
        $r3 = <androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction>;

        $r2 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        $i1 = virtualinvoke $r2.<androidx.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        $r5 = <androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction>;

        $r4 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        $i2 = virtualinvoke $r4.<androidx.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r5[$i2] = 2;

     label3:
        $r9 = <androidx.test.espresso.IdlingPolicy$1: int[] $SwitchMap$androidx$test$espresso$IdlingPolicy$ResponseAction>;

        $r10 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        $i3 = virtualinvoke $r10.<androidx.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r9[$i3] = 3;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        goto label2;

     label6:
        $r8 := @caughtexception;

        goto label3;

     label7:
        $r6 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label5;
        catch java.lang.NoSuchFieldError from label2 to label3 with label6;
        catch java.lang.NoSuchFieldError from label3 to label4 with label7;
    }

androidx.test.espresso.IdlingPolicy$Builder-IA
androidx.test.espresso.IdlingPolicy$Builder
<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout>
<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit>
<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler>
<androidx.test.espresso.IdlingPolicy$Builder: boolean timeoutIfDebuggerAttached>
<androidx.test.espresso.IdlingPolicy$Builder: boolean disableOnTimeout>
    static volatile long '-$$Nest$fgetidleTimeout'(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        long $l0;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        $l0 = r0.<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout>;

        return $l0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder logWarning()
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        $r1 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder throwAppNotIdleException()
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        $r1 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder throwIdlingResourceTimeoutException()
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        $r1 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder withDisableOnTimeout(boolean)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean disableOnTimeout> = z0;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder withIdlingTimeout(long)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        long l0;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        l0 := @parameter0: long;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout> = l0;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder withIdlingTimeoutUnit(java.util.concurrent.TimeUnit)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        java.util.concurrent.TimeUnit r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = r1;

        return r0;
    }

    public androidx.test.espresso.IdlingPolicy$Builder withTimeoutIfDebuggerAttached(boolean)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean timeoutIfDebuggerAttached> = z0;

        return r0;
    }

    static volatile androidx.test.espresso.IdlingPolicy$ResponseAction '-$$Nest$fgeterrorHandler'(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        $r1 = r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        return $r1;
    }

    public androidx.test.espresso.IdlingPolicy build()
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy r1;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        r1 = new androidx.test.espresso.IdlingPolicy;

        specialinvoke r1.<androidx.test.espresso.IdlingPolicy: void <init>(androidx.test.espresso.IdlingPolicy$Builder,androidx.test.espresso.IdlingPolicy-IA)>(r0, null);

        return r1;
    }

    static volatile java.util.concurrent.TimeUnit '-$$Nest$fgetunit'(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        $r1 = r0.<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    public void <init>()
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout> = -1L;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = null;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = null;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean timeoutIfDebuggerAttached> = 0;

        return;
    }

    private void <init>(androidx.test.espresso.IdlingPolicy)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy r1;
        long $l0;
        java.util.concurrent.TimeUnit $r2;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r3;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: androidx.test.espresso.IdlingPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout> = -1L;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = null;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = null;

        r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean timeoutIfDebuggerAttached> = 0;

        $l0 = staticinvoke <androidx.test.espresso.IdlingPolicy: long '-$$Nest$fgetidleTimeout'(androidx.test.espresso.IdlingPolicy)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy$Builder: long idleTimeout> = $l0;

        $r2 = staticinvoke <androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit '-$$Nest$fgetunit'(androidx.test.espresso.IdlingPolicy)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = $r2;

        $r3 = staticinvoke <androidx.test.espresso.IdlingPolicy: androidx.test.espresso.IdlingPolicy$ResponseAction '-$$Nest$fgeterrorHandler'(androidx.test.espresso.IdlingPolicy)>(r1);

        r0.<androidx.test.espresso.IdlingPolicy$Builder: androidx.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r3;

        return;
    }

    void <init>(androidx.test.espresso.IdlingPolicy, androidx.test.espresso.IdlingPolicy$Builder-IA)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        androidx.test.espresso.IdlingPolicy r1;
        androidx.test.espresso.IdlingPolicy$Builder-IA r2;

        r0 := @this: androidx.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: androidx.test.espresso.IdlingPolicy;

        r2 := @parameter1: androidx.test.espresso.IdlingPolicy$Builder-IA;

        specialinvoke r0.<androidx.test.espresso.IdlingPolicy$Builder: void <init>(androidx.test.espresso.IdlingPolicy)>(r1);

        return;
    }

    static volatile boolean '-$$Nest$fgetdisableOnTimeout'(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        boolean $z0;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        $z0 = r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean disableOnTimeout>;

        return $z0;
    }

    static volatile boolean '-$$Nest$fgettimeoutIfDebuggerAttached'(androidx.test.espresso.IdlingPolicy$Builder)
    {
        androidx.test.espresso.IdlingPolicy$Builder r0;
        boolean $z0;

        r0 := @parameter0: androidx.test.espresso.IdlingPolicy$Builder;

        $z0 = r0.<androidx.test.espresso.IdlingPolicy$Builder: boolean timeoutIfDebuggerAttached>;

        return $z0;
    }

androidx.test.espresso.IdlingPolicy$ResponseAction
<androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>
<androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>
<androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>
<androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction[] $VALUES>
    public static androidx.test.espresso.IdlingPolicy$ResponseAction valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/espresso/IdlingPolicy$ResponseAction;", r0);

        $r2 = (androidx.test.espresso.IdlingPolicy$ResponseAction) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction[] $r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction r1, r2, r3;

        r1 = new androidx.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke r1.<androidx.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("THROW_APP_NOT_IDLE", 0);

        <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE> = r1;

        r2 = new androidx.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke r2.<androidx.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("THROW_IDLE_TIMEOUT", 1);

        <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT> = r2;

        r3 = new androidx.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke r3.<androidx.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("LOG_ERROR", 2);

        <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR> = r3;

        $r0 = staticinvoke <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction[] $values()>();

        <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.test.espresso.IdlingPolicy$ResponseAction;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static androidx.test.espresso.IdlingPolicy$ResponseAction[] $values()
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction[] r0;
        androidx.test.espresso.IdlingPolicy$ResponseAction $r1, $r2, $r3;

        r0 = newarray (androidx.test.espresso.IdlingPolicy$ResponseAction)[3];

        $r1 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        r0[0] = $r1;

        $r2 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        r0[1] = $r2;

        $r3 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        r0[2] = $r3;

        return r0;
    }

    public static androidx.test.espresso.IdlingPolicy$ResponseAction[] values()
    {
        androidx.test.espresso.IdlingPolicy$ResponseAction[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.espresso.IdlingPolicy$ResponseAction: androidx.test.espresso.IdlingPolicy$ResponseAction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.espresso.IdlingPolicy$ResponseAction[]) $r1;

        return $r2;
    }

