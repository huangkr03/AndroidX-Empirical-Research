androidx.paging.PagePresenter
<androidx.paging.PagePresenter: androidx.paging.PagePresenter$Companion Companion>
<androidx.paging.PagePresenter: java.util.List pages>
<androidx.paging.PagePresenter: int storageCount>
<androidx.paging.PagePresenter: int placeholdersBefore>
<androidx.paging.PagePresenter: int placeholdersAfter>
<androidx.paging.PagePresenter: androidx.paging.PagePresenter INITIAL>
    public void <init>(androidx.paging.PageEvent$Insert)
    {
        androidx.paging.PagePresenter r0;
        androidx.paging.PageEvent$Insert r1;
        java.util.List $r2, $r4, $r5;
        java.util.Collection $r3;
        int $i0, $i1, $i2;

        r0 := @this: androidx.paging.PagePresenter;

        r1 := @parameter0: androidx.paging.PageEvent$Insert;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "insertEvent");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: java.util.List getPages()>();

        $r3 = (java.util.Collection) $r2;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r3);

        r0.<androidx.paging.PagePresenter: java.util.List pages> = $r4;

        $r5 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: java.util.List getPages()>();

        $i0 = specialinvoke r0.<androidx.paging.PagePresenter: int fullCount(java.util.List)>($r5);

        r0.<androidx.paging.PagePresenter: int storageCount> = $i0;

        $i1 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: int getPlaceholdersBefore()>();

        r0.<androidx.paging.PagePresenter: int placeholdersBefore> = $i1;

        $i2 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: int getPlaceholdersAfter()>();

        r0.<androidx.paging.PagePresenter: int placeholdersAfter> = $i2;

        return;
    }

    public int getStorageCount()
    {
        androidx.paging.PagePresenter r0;
        int $i0;

        r0 := @this: androidx.paging.PagePresenter;

        $i0 = r0.<androidx.paging.PagePresenter: int storageCount>;

        return $i0;
    }

    private final int getOriginalPageOffsetFirst()
    {
        androidx.paging.PagePresenter r0;
        java.util.List $r1;
        java.lang.Object $r2;
        androidx.paging.TransformablePage $r3;
        int[] $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: androidx.paging.PagePresenter;

        $r1 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r1);

        $r3 = (androidx.paging.TransformablePage) $r2;

        $r4 = virtualinvoke $r3.<androidx.paging.TransformablePage: int[] getOriginalPageOffsets()>();

        $r5 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Integer minOrNull(int[])>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private final int getOriginalPageOffsetLast()
    {
        androidx.paging.PagePresenter r0;
        java.util.List $r1;
        java.lang.Object $r2;
        androidx.paging.TransformablePage $r3;
        int[] $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: androidx.paging.PagePresenter;

        $r1 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r1);

        $r3 = (androidx.paging.TransformablePage) $r2;

        $r4 = virtualinvoke $r3.<androidx.paging.TransformablePage: int[] getOriginalPageOffsets()>();

        $r5 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Integer maxOrNull(int[])>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public int getPlaceholdersBefore()
    {
        androidx.paging.PagePresenter r0;
        int $i0;

        r0 := @this: androidx.paging.PagePresenter;

        $i0 = r0.<androidx.paging.PagePresenter: int placeholdersBefore>;

        return $i0;
    }

    public int getPlaceholdersAfter()
    {
        androidx.paging.PagePresenter r0;
        int $i0;

        r0 := @this: androidx.paging.PagePresenter;

        $i0 = r0.<androidx.paging.PagePresenter: int placeholdersAfter>;

        return $i0;
    }

    private final void checkIndex(int)
    {
        androidx.paging.PagePresenter r0;
        int i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.paging.PagePresenter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        if i0 < $i2 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");

        $i1 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        androidx.paging.PagePresenter r0;
        java.lang.String r1, $r16;
        int i0, i1, i2, i3, $i4, $i5, i6;
        boolean z0, z1, z2, z3, z6;
        java.util.ArrayList r2, r3, $r5;
        java.lang.Object r4;
        java.util.List $r6;
        java.lang.Iterable $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: androidx.paging.PagePresenter;

        i0 = virtualinvoke r0.<androidx.paging.PagePresenter: int getStorageCount()>();

        z0 = 0;

        z1 = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i0);

        r2 = $r5;

        z2 = 0;

        z6 = 0;

        i6 = 0;

        i1 = i0;

     label1:
        if i6 >= i1 goto label2;

        i2 = i6;

        z3 = 0;

        i3 = i2;

        r3 = r2;

        r4 = virtualinvoke r0.<androidx.paging.PagePresenter: java.lang.Object getFromStorage(int)>(i3);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        i6 = i6 + 1;

        goto label1;

     label2:
        $r6 = (java.util.List) r2;

        $r7 = (java.lang.Iterable) $r6;

        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r7, null, null, null, 0, null, null, 63, null);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[(");

        $i4 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" placeholders), ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", (");

        $i5 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" placeholders)]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public final java.lang.Object get(int)
    {
        androidx.paging.PagePresenter r0;
        int i0, i1, $i2, $i3;
        java.lang.Object $r1;

        r0 := @this: androidx.paging.PagePresenter;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.paging.PagePresenter: void checkIndex(int)>(i0);

        $i2 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        i1 = i0 - $i2;

        if i1 < 0 goto label1;

        $i3 = virtualinvoke r0.<androidx.paging.PagePresenter: int getStorageCount()>();

        if i1 < $i3 goto label2;

     label1:
        return null;

     label2:
        $r1 = virtualinvoke r0.<androidx.paging.PagePresenter: java.lang.Object getFromStorage(int)>(i1);

        return $r1;
    }

    public final androidx.paging.ItemSnapshotList snapshot()
    {
        androidx.paging.PagePresenter r0;
        java.lang.Iterable $r1, r12;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        int i0, i1, i2, i3, $i4, $i5;
        java.util.List r5, r6, $r7, $r10;
        java.util.ArrayList $r8;
        boolean $z3;
        androidx.paging.ItemSnapshotList $r9;
        androidx.paging.TransformablePage r11;

        r0 := @this: androidx.paging.PagePresenter;

        $i4 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $i5 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        $r7 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        i1 = $i5;

        i0 = $i4;

        $r1 = (java.lang.Iterable) $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r8;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.paging.TransformablePage) r4;

        $r10 = virtualinvoke r11.<androidx.paging.TransformablePage: java.util.List getData()>();

        r12 = (java.lang.Iterable) $r10;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r2, r12);

        goto label1;

     label2:
        r5 = (java.util.List) r2;

        r6 = r5;

        i2 = i1;

        i3 = i0;

        $r9 = new androidx.paging.ItemSnapshotList;

        specialinvoke $r9.<androidx.paging.ItemSnapshotList: void <init>(int,int,java.util.List)>(i3, i2, r6);

        return $r9;
    }

    public java.lang.Object getFromStorage(int)
    {
        androidx.paging.PagePresenter r0;
        int i0, i1, i2, i3, i4, i5;
        java.util.List $r1, $r2, $r5, $r7, $r10;
        java.lang.Object $r3, $r6, $r8;
        androidx.paging.TransformablePage $r4, $r9;

        r0 := @this: androidx.paging.PagePresenter;

        i0 := @parameter0: int;

        i4 = 0;

        i5 = i0;

        $r1 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i4 >= i1 goto label3;

        $r7 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i4);

        $r9 = (androidx.paging.TransformablePage) $r8;

        $r10 = virtualinvoke $r9.<androidx.paging.TransformablePage: java.util.List getData()>();

        i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i2 <= i5 goto label2;

        goto label3;

     label2:
        i5 = i5 - i2;

        i3 = i4;

        i4 = i3 + 1;

        goto label1;

     label3:
        $r2 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (androidx.paging.TransformablePage) $r3;

        $r5 = virtualinvoke $r4.<androidx.paging.TransformablePage: java.util.List getData()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i5);

        return $r6;
    }

    public int getSize()
    {
        androidx.paging.PagePresenter r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.paging.PagePresenter;

        $i0 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $i1 = virtualinvoke r0.<androidx.paging.PagePresenter: int getStorageCount()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        $i4 = $i2 + $i3;

        return $i4;
    }

    private final int fullCount(java.util.List)
    {
        androidx.paging.PagePresenter r0;
        java.util.List $r1, $r6;
        java.lang.Iterable r2;
        boolean z0, $z2;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.paging.TransformablePage r5;
        int i0, i1, i2;

        r0 := @this: androidx.paging.PagePresenter;

        $r1 := @parameter0: java.util.List;

        r2 = (java.lang.Iterable) $r1;

        z0 = 0;

        i2 = 0;

        r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.paging.TransformablePage) r4;

        i0 = i2;

        $r6 = virtualinvoke r5.<androidx.paging.TransformablePage: java.util.List getData()>();

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        i2 = i0 + i1;

        goto label1;

     label2:
        return i2;
    }

    public final void processEvent(androidx.paging.PageEvent, androidx.paging.PagePresenter$ProcessPageEventCallback)
    {
        androidx.paging.PagePresenter r0;
        androidx.paging.PageEvent r1, r3;
        androidx.paging.PagePresenter$ProcessPageEventCallback r2;
        boolean $z0, $z1, $z2;
        androidx.paging.PageEvent$LoadStateUpdate $r4, $r6;
        androidx.paging.LoadStates $r5, $r7;
        androidx.paging.PageEvent$Drop $r8;
        androidx.paging.PageEvent$Insert $r9;

        r0 := @this: androidx.paging.PagePresenter;

        r1 := @parameter0: androidx.paging.PageEvent;

        r2 := @parameter1: androidx.paging.PagePresenter$ProcessPageEventCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pageEvent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "callback");

        r3 = r1;

        $z0 = r3 instanceof androidx.paging.PageEvent$Insert;

        if $z0 == 0 goto label1;

        $r9 = (androidx.paging.PageEvent$Insert) r1;

        specialinvoke r0.<androidx.paging.PagePresenter: void insertPage(androidx.paging.PageEvent$Insert,androidx.paging.PagePresenter$ProcessPageEventCallback)>($r9, r2);

        goto label3;

     label1:
        $z1 = r3 instanceof androidx.paging.PageEvent$Drop;

        if $z1 == 0 goto label2;

        $r8 = (androidx.paging.PageEvent$Drop) r1;

        specialinvoke r0.<androidx.paging.PagePresenter: void dropPages(androidx.paging.PageEvent$Drop,androidx.paging.PagePresenter$ProcessPageEventCallback)>($r8, r2);

        goto label3;

     label2:
        $z2 = r3 instanceof androidx.paging.PageEvent$LoadStateUpdate;

        if $z2 == 0 goto label3;

        $r4 = (androidx.paging.PageEvent$LoadStateUpdate) r1;

        $r5 = virtualinvoke $r4.<androidx.paging.PageEvent$LoadStateUpdate: androidx.paging.LoadStates getSource()>();

        $r6 = (androidx.paging.PageEvent$LoadStateUpdate) r1;

        $r7 = virtualinvoke $r6.<androidx.paging.PageEvent$LoadStateUpdate: androidx.paging.LoadStates getMediator()>();

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadStates,androidx.paging.LoadStates)>($r5, $r7);

     label3:
        return;
    }

    public final androidx.paging.ViewportHint$Initial initializeHint()
    {
        androidx.paging.PagePresenter r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.paging.ViewportHint$Initial $r1;

        r0 := @this: androidx.paging.PagePresenter;

        i0 = virtualinvoke r0.<androidx.paging.PagePresenter: int getStorageCount()>();

        $r1 = new androidx.paging.ViewportHint$Initial;

        $i1 = i0 / 2;

        $i2 = i0 / 2;

        $i3 = specialinvoke r0.<androidx.paging.PagePresenter: int getOriginalPageOffsetFirst()>();

        $i4 = specialinvoke r0.<androidx.paging.PagePresenter: int getOriginalPageOffsetLast()>();

        specialinvoke $r1.<androidx.paging.ViewportHint$Initial: void <init>(int,int,int,int)>($i1, $i2, $i3, $i4);

        return $r1;
    }

    public final androidx.paging.ViewportHint$Access accessHintForPresenterIndex(int)
    {
        androidx.paging.PagePresenter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        java.util.List $r1, $r4, $r5, $r9, $r10, $r13;
        java.lang.Object $r2, $r6, $r11;
        androidx.paging.TransformablePage $r3, $r7, $r12;
        androidx.paging.ViewportHint$Access $r8;

        r0 := @this: androidx.paging.PagePresenter;

        i0 := @parameter0: int;

        i15 = 0;

        $i2 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        i16 = i0 - $i2;

     label1:
        $r1 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i15);

        $r3 = (androidx.paging.TransformablePage) $r2;

        $r4 = virtualinvoke $r3.<androidx.paging.TransformablePage: java.util.List getData()>();

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i16 < $i3 goto label2;

        $r9 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $i13 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r9);

        if i15 >= $i13 goto label2;

        $r10 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i15);

        $r12 = (androidx.paging.TransformablePage) $r11;

        $r13 = virtualinvoke $r12.<androidx.paging.TransformablePage: java.util.List getData()>();

        $i14 = interfaceinvoke $r13.<java.util.List: int size()>();

        i16 = i16 - $i14;

        i1 = i15;

        i15 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i15);

        $r7 = (androidx.paging.TransformablePage) $r6;

        $i4 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $i5 = i0 - $i4;

        $i6 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i7 = $i6 - i0;

        $i8 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        $i9 = $i7 - $i8;

        $i10 = $i9 - 1;

        $i11 = specialinvoke r0.<androidx.paging.PagePresenter: int getOriginalPageOffsetFirst()>();

        $i12 = specialinvoke r0.<androidx.paging.PagePresenter: int getOriginalPageOffsetLast()>();

        $r8 = virtualinvoke $r7.<androidx.paging.TransformablePage: androidx.paging.ViewportHint$Access viewportHintFor(int,int,int,int,int)>(i16, $i5, $i10, $i11, $i12);

        return $r8;
    }

    private final void insertPage(androidx.paging.PageEvent$Insert, androidx.paging.PagePresenter$ProcessPageEventCallback)
    {
        androidx.paging.PagePresenter r0, r14, r15;
        androidx.paging.PageEvent$Insert r1;
        androidx.paging.PagePresenter$ProcessPageEventCallback r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i28, i29, i30, i31, i32, i33, i34;
        androidx.paging.LoadType r3;
        java.util.List $r4, $r6, $r7, $r8, $r10, $r11;
        int[] $r5;
        java.util.Collection $r9, $r12;
        java.lang.IllegalArgumentException $r13;
        boolean z2, z3;
        byte b27;
        androidx.paging.LoadStates $r16, $r17;

        r0 := @this: androidx.paging.PagePresenter;

        r1 := @parameter0: androidx.paging.PageEvent$Insert;

        r2 := @parameter1: androidx.paging.PagePresenter$ProcessPageEventCallback;

        $r4 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: java.util.List getPages()>();

        i0 = specialinvoke r0.<androidx.paging.PagePresenter: int fullCount(java.util.List)>($r4);

        i1 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        r3 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: androidx.paging.LoadType getLoadType()>();

        $r5 = <androidx.paging.PagePresenter$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i3 = virtualinvoke r3.<androidx.paging.LoadType: int ordinal()>();

        i2 = $r5[$i3];

        tableswitch(i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            default: goto label6;
        };

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label2:
        i23 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        z2 = 0;

        i24 = staticinvoke <java.lang.Math: int min(int,int)>(i23, i0);

        $i16 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        i25 = $i16 - i24;

        i26 = i0 - i24;

        b27 = 0;

        $r10 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r11 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: java.util.List getPages()>();

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke $r10.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $r12);

        r14 = r0;

        $i17 = virtualinvoke r14.<androidx.paging.PagePresenter: int getStorageCount()>();

        $i18 = $i17 + i0;

        r14.<androidx.paging.PagePresenter: int storageCount> = $i18;

        $i19 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: int getPlaceholdersBefore()>();

        r0.<androidx.paging.PagePresenter: int placeholdersBefore> = $i19;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onChanged(int,int)>(i25, i24);

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>(b27, i26);

        $i20 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i21 = $i20 - i1;

        i28 = $i21 - i26;

        if i28 <= 0 goto label3;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>(0, i28);

        goto label6;

     label3:
        if i28 >= 0 goto label6;

        $i22 = neg i28;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onRemoved(int,int)>(0, $i22);

        goto label6;

     label4:
        i29 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        z3 = 0;

        i30 = staticinvoke <java.lang.Math: int min(int,int)>(i29, i0);

        $i4 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $i5 = virtualinvoke r0.<androidx.paging.PagePresenter: int getStorageCount()>();

        i31 = $i4 + $i5;

        i32 = i0 - i30;

        i33 = i31 + i30;

        $r7 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $r6 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        $i6 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r8 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: java.util.List getPages()>();

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r7.<java.util.List: boolean addAll(int,java.util.Collection)>($i6, $r9);

        r15 = r0;

        $i7 = virtualinvoke r15.<androidx.paging.PagePresenter: int getStorageCount()>();

        $i8 = $i7 + i0;

        r15.<androidx.paging.PagePresenter: int storageCount> = $i8;

        $i9 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: int getPlaceholdersAfter()>();

        r0.<androidx.paging.PagePresenter: int placeholdersAfter> = $i9;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onChanged(int,int)>(i31, i30);

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>(i33, i32);

        $i10 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i11 = $i10 - i1;

        i34 = $i11 - i32;

        if i34 <= 0 goto label5;

        $i14 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i15 = $i14 - i34;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>($i15, i34);

        goto label6;

     label5:
        if i34 >= 0 goto label6;

        $i12 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i13 = neg i34;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onRemoved(int,int)>($i12, $i13);

     label6:
        $r16 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: androidx.paging.LoadStates getSourceLoadStates()>();

        $r17 = virtualinvoke r1.<androidx.paging.PageEvent$Insert: androidx.paging.LoadStates getMediatorLoadStates()>();

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadStates,androidx.paging.LoadStates)>($r16, $r17);

        return;
    }

    private final int dropPagesWithOffsets(kotlin.ranges.IntRange)
    {
        androidx.paging.PagePresenter r0;
        kotlin.ranges.IntRange r1;
        java.util.Iterator r2;
        androidx.paging.TransformablePage r3;
        int[] r4;
        int i0, i1, i2, $i3, i4, i5;
        java.util.List $r5, $r7;
        java.lang.Object $r6;
        boolean $z2, $z3, $z4;

        r0 := @this: androidx.paging.PagePresenter;

        r1 := @parameter0: kotlin.ranges.IntRange;

        i4 = 0;

        $r5 = r0.<androidx.paging.PagePresenter: java.util.List pages>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.paging.TransformablePage) $r6;

        r4 = virtualinvoke r3.<androidx.paging.TransformablePage: int[] getOriginalPageOffsets()>();

        i0 = lengthof r4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        i1 = r4[i5];

        i2 = i1;

        $z2 = virtualinvoke r1.<kotlin.ranges.IntRange: boolean contains(int)>(i2);

        if $z2 == 0 goto label3;

        $z4 = 1;

        goto label5;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        $z4 = 0;

     label5:
        if $z4 == 0 goto label1;

        $r7 = virtualinvoke r3.<androidx.paging.TransformablePage: java.util.List getData()>();

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        i4 = i4 + $i3;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label6:
        return i4;
    }

    private final void dropPages(androidx.paging.PageEvent$Drop, androidx.paging.PagePresenter$ProcessPageEventCallback)
    {
        androidx.paging.PagePresenter r0, r15, r16;
        androidx.paging.PageEvent$Drop r1;
        androidx.paging.PagePresenter$ProcessPageEventCallback r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i24, i25, $i26, i27, i28, i29, i30, i31, i32, $i33, i34, i35;
        boolean z0, z1;
        androidx.paging.LoadType $r3, $r4, $r7, $r12;
        kotlin.ranges.IntRange $r5, $r10;
        androidx.paging.LoadState$NotLoading$Companion $r6, $r11;
        androidx.paging.LoadState$NotLoading $r8, $r13;
        androidx.paging.LoadState $r9, $r14;
        byte b23;

        r0 := @this: androidx.paging.PagePresenter;

        r1 := @parameter0: androidx.paging.PageEvent$Drop;

        r2 := @parameter1: androidx.paging.PagePresenter$ProcessPageEventCallback;

        i0 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $r3 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: androidx.paging.LoadType getLoadType()>();

        $r4 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        if $r3 != $r4 goto label04;

        i19 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersBefore()>();

        $r10 = new kotlin.ranges.IntRange;

        $i13 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getMinPageOffset()>();

        $i14 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getMaxPageOffset()>();

        specialinvoke $r10.<kotlin.ranges.IntRange: void <init>(int,int)>($i13, $i14);

        i20 = specialinvoke r0.<androidx.paging.PagePresenter: int dropPagesWithOffsets(kotlin.ranges.IntRange)>($r10);

        r15 = r0;

        $i15 = virtualinvoke r15.<androidx.paging.PagePresenter: int getStorageCount()>();

        $i16 = $i15 - i20;

        r15.<androidx.paging.PagePresenter: int storageCount> = $i16;

        $i17 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        r0.<androidx.paging.PagePresenter: int placeholdersBefore> = $i17;

        i21 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        i22 = i21 - i0;

        if i22 <= 0 goto label01;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>(0, i22);

        goto label02;

     label01:
        if i22 >= 0 goto label02;

        $i18 = neg i22;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onRemoved(int,int)>(0, $i18);

     label02:
        b23 = 0;

        i24 = i19 + i22;

        z0 = 0;

        i25 = staticinvoke <java.lang.Math: int max(int,int)>(b23, i24);

        $i26 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        i27 = $i26 - i25;

        if i27 <= 0 goto label03;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onChanged(int,int)>(i25, i27);

     label03:
        $r12 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $r11 = <androidx.paging.LoadState$NotLoading: androidx.paging.LoadState$NotLoading$Companion Companion>;

        $r13 = virtualinvoke $r11.<androidx.paging.LoadState$NotLoading$Companion: androidx.paging.LoadState$NotLoading getIncomplete$paging_common()>();

        $r14 = (androidx.paging.LoadState) $r13;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadType,boolean,androidx.paging.LoadState)>($r12, 0, $r14);

        goto label10;

     label04:
        i28 = virtualinvoke r0.<androidx.paging.PagePresenter: int getPlaceholdersAfter()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getMinPageOffset()>();

        $i2 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getMaxPageOffset()>();

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>($i1, $i2);

        i29 = specialinvoke r0.<androidx.paging.PagePresenter: int dropPagesWithOffsets(kotlin.ranges.IntRange)>($r5);

        r16 = r0;

        $i3 = virtualinvoke r16.<androidx.paging.PagePresenter: int getStorageCount()>();

        $i4 = $i3 - i29;

        r16.<androidx.paging.PagePresenter: int storageCount> = $i4;

        $i5 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        r0.<androidx.paging.PagePresenter: int placeholdersAfter> = $i5;

        i30 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        i31 = i30 - i0;

        if i31 <= 0 goto label05;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>(i0, i31);

        goto label06;

     label05:
        if i31 >= 0 goto label06;

        $i12 = i0 + i31;

        $i11 = neg i31;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onRemoved(int,int)>($i12, $i11);

     label06:
        if i31 >= 0 goto label07;

        i32 = neg i31;

        z1 = 0;

        $i33 = staticinvoke <java.lang.Math: int min(int,int)>(i28, i32);

        goto label08;

     label07:
        $i33 = 0;

     label08:
        i34 = $i33;

        $i6 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        $i7 = i28 - i34;

        i35 = $i6 - $i7;

        if i35 <= 0 goto label09;

        $i8 = virtualinvoke r0.<androidx.paging.PagePresenter: int getSize()>();

        $i9 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        $i10 = $i8 - $i9;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onChanged(int,int)>($i10, i35);

     label09:
        $r7 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $r6 = <androidx.paging.LoadState$NotLoading: androidx.paging.LoadState$NotLoading$Companion Companion>;

        $r8 = virtualinvoke $r6.<androidx.paging.LoadState$NotLoading$Companion: androidx.paging.LoadState$NotLoading getIncomplete$paging_common()>();

        $r9 = (androidx.paging.LoadState) $r8;

        interfaceinvoke r2.<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadType,boolean,androidx.paging.LoadState)>($r7, 0, $r9);

     label10:
        return;
    }

    public static final androidx.paging.PagePresenter access$getINITIAL$cp()
    {
        androidx.paging.PagePresenter $r0;

        $r0 = <androidx.paging.PagePresenter: androidx.paging.PagePresenter INITIAL>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.paging.PagePresenter$Companion $r0;
        androidx.paging.PagePresenter $r1;
        androidx.paging.PageEvent$Insert$Companion $r2;
        androidx.paging.PageEvent$Insert $r3;

        $r0 = new androidx.paging.PagePresenter$Companion;

        specialinvoke $r0.<androidx.paging.PagePresenter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.paging.PagePresenter: androidx.paging.PagePresenter$Companion Companion> = $r0;

        $r1 = new androidx.paging.PagePresenter;

        $r2 = <androidx.paging.PageEvent$Insert: androidx.paging.PageEvent$Insert$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.paging.PageEvent$Insert$Companion: androidx.paging.PageEvent$Insert getEMPTY_REFRESH_LOCAL()>();

        specialinvoke $r1.<androidx.paging.PagePresenter: void <init>(androidx.paging.PageEvent$Insert)>($r3);

        <androidx.paging.PagePresenter: androidx.paging.PagePresenter INITIAL> = $r1;

        return;
    }

androidx.paging.PagePresenter$Companion
    private void <init>()
    {
        androidx.paging.PagePresenter$Companion r0;

        r0 := @this: androidx.paging.PagePresenter$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.paging.PagePresenter initial$paging_common()
    {
        androidx.paging.PagePresenter$Companion r0;
        androidx.paging.PagePresenter $r1;

        r0 := @this: androidx.paging.PagePresenter$Companion;

        $r1 = staticinvoke <androidx.paging.PagePresenter: androidx.paging.PagePresenter access$getINITIAL$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.paging.PagePresenter$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.paging.PagePresenter$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.paging.PagePresenter$Companion: void <init>()>();

        return;
    }

androidx.paging.PagePresenter$ProcessPageEventCallback
<androidx.paging.PagePresenter$ProcessPageEventCallback: void onChanged(int,int)>
<androidx.paging.PagePresenter$ProcessPageEventCallback: void onInserted(int,int)>
<androidx.paging.PagePresenter$ProcessPageEventCallback: void onRemoved(int,int)>
<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadType,boolean,androidx.paging.LoadState)>
<androidx.paging.PagePresenter$ProcessPageEventCallback: void onStateUpdate(androidx.paging.LoadStates,androidx.paging.LoadStates)>
androidx.paging.PagePresenter$WhenMappings
<androidx.paging.PagePresenter$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.LoadType[] $r1;
        int $i0, $i1, $i2, $i3;
        androidx.paging.LoadType $r2, $r3, $r4;

        $r1 = staticinvoke <androidx.paging.LoadType: androidx.paging.LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        $i1 = virtualinvoke $r2.<androidx.paging.LoadType: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.LoadType: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $i3 = virtualinvoke $r4.<androidx.paging.LoadType: int ordinal()>();

        r0[$i3] = 3;

        <androidx.paging.PagePresenter$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

