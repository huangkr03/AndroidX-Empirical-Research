androidx.room.AutoClosingRoomOpenHelper
<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>
<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser>
<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>
    public void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper, androidx.room.AutoCloser)
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper r1, $r4;
        androidx.room.AutoCloser r2, $r3, $r6;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper;

        r2 := @parameter1: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "autoCloser");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate> = r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser> = r2;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser>;

        $r4 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        virtualinvoke $r3.<androidx.room.AutoCloser: void init(androidx.sqlite.db.SupportSQLiteOpenHelper)>($r4);

        $r5 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r5.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: void <init>(androidx.room.AutoCloser)>($r6);

        r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb> = $r5;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        return $r1;
    }

    public java.lang.String getDatabaseName()
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: java.lang.String getDatabaseName()>();

        return $r2;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        boolean z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>(z0);

        return;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase $r1, $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>;

        virtualinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: void pokeOpen()>();

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>;

        $r3 = (androidx.sqlite.db.SupportSQLiteDatabase) $r2;

        return $r3;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase $r1, $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>;

        virtualinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: void pokeOpen()>();

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>;

        $r3 = (androidx.sqlite.db.SupportSQLiteDatabase) $r2;

        return $r3;
    }

    public void close()
    {
        androidx.room.AutoClosingRoomOpenHelper r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase autoClosingDb>;

        virtualinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: void close()>();

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.util.List invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.util.List $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.util.List getAttachedDbs()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1: java.util.List invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $table>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $whereClause>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.Object[] $whereArgs>
    void <init>(java.lang.String, java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1 r0;
        java.lang.String $r1, $r2;
        java.lang.Object[] $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $table> = $r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $whereClause> = $r2;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.Object[] $whereArgs> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $table>;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.String $whereClause>;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.Object[] $whereArgs>;

        $i0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.Object[])>($r4, $r3, $r2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1: java.lang.String $sql>
    void <init>(java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1 r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1;

        $r1 := @parameter0: java.lang.String;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1: java.lang.String $sql> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1: java.lang.String $sql>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.String $sql>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.Object[] $bindArgs>
    void <init>(java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.String $sql> = $r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.Object[] $bindArgs> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Object[] $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.String $sql>;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.Object[] $bindArgs>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>($r3, $r2);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: java.lang.String $table>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: int $conflictAlgorithm>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: android.content.ContentValues $values>
    void <init>(java.lang.String, int, android.content.ContentValues)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1 r0;
        java.lang.String $r1;
        int $i0;
        android.content.ContentValues $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.ContentValues;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: java.lang.String $table> = $r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: int $conflictAlgorithm> = $i0;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: android.content.ContentValues $values> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        android.content.ContentValues $r2;
        int $i0;
        java.lang.String $r3;
        long $l1;
        java.lang.Long $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: java.lang.String $table>;

        $i0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: int $conflictAlgorithm>;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: android.content.ContentValues $values>;

        $l1 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: long insert(java.lang.String,int,android.content.ContentValues)>($r3, $i0, $r2);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>(1, class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "inTransaction", "inTransaction()Z", 0);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean inTransaction()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDatabaseIntegrityOk()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1;

        specialinvoke r0.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>(class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "isDbLockedByCurrentThread", "isDbLockedByCurrentThread()Z", 0);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $z0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDbLockedByCurrentThread()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isReadOnly()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;
        java.lang.Boolean $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1;

        specialinvoke r0.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>(class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "maximumSize", "getMaximumSize()J", 0);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        long $l0;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $l0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: long getMaximumSize()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1: int $newVersion>
    void <init>(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1 r0;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1;

        $i0 := @parameter0: int;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1: int $newVersion> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1: int $newVersion>;

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean needUpgrade(int)>($i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1;

        specialinvoke r0.<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>(class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "pageSize", "getPageSize()J", 0);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        long $l0;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $l0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: long getPageSize()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = (java.lang.Number) r2;

        $l0 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: void setPageSize(long)>($l0);

        return;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2: long $numBytes>
    void <init>(long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2 r0;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2;

        $l0 := @parameter0: long;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2: long $numBytes> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $l0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2: long $numBytes>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setPageSize(long)>($l0);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.String invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1: java.lang.String invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1: boolean $enabled>
    void <init>(boolean)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1 r0;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1;

        $z0 := @parameter0: boolean;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1: boolean $enabled> = $z0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1: boolean $enabled>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>($z0);

     label1:
        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1: java.util.Locale $locale>
    void <init>(java.util.Locale)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1 r0;
        java.util.Locale $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1;

        $r1 := @parameter0: java.util.Locale;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1: java.util.Locale $locale> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.util.Locale $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1: java.util.Locale $locale>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setLocale(java.util.Locale)>($r2);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1: long $numBytes>
    void <init>(long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1 r0;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1;

        $l0 := @parameter0: long;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1: long $numBytes> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        long $l0, $l1;
        java.lang.Long $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $l0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1: long $numBytes>;

        $l1 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: long setMaximumSize(long)>($l0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1: java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1: int $cacheSize>
    void <init>(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1 r0;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1;

        $i0 := @parameter0: int;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1: int $cacheSize> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1: int $cacheSize>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setMaxSqlCacheSize(int)>($i0);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $table>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: int $conflictAlgorithm>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: android.content.ContentValues $values>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $whereClause>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.Object[] $whereArgs>
    void <init>(java.lang.String, int, android.content.ContentValues, java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1 r0;
        java.lang.String $r1, $r3;
        int $i0;
        android.content.ContentValues $r2;
        java.lang.Object[] $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.ContentValues;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.Object[];

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $table> = $r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: int $conflictAlgorithm> = $i0;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: android.content.ContentValues $values> = $r2;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $whereClause> = $r3;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.Object[] $whereArgs> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r5;
        android.content.ContentValues $r4;
        int $i0, $i1;
        java.lang.Integer $r6;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $table>;

        $i0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: int $conflictAlgorithm>;

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: android.content.ContentValues $values>;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.String $whereClause>;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.Object[] $whereArgs>;

        $i1 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: int update(java.lang.String,int,android.content.ContentValues,java.lang.String,java.lang.Object[])>($r5, $i0, $r4, $r3, $r2);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1;

        specialinvoke r0.<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>(class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "version", "getVersion()I", 0);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $i0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: int getVersion()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r3;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: void setVersion(int)>($i0);

        return;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2: int $version>
    void <init>(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2 r0;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2;

        $i0 := @parameter0: int;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2: int $version> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2: int $version>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setVersion(int)>($i0);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>(1, class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "yieldIfContendedSafely", "yieldIfContendedSafely()Z", 0);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>(1, class "Landroidx/sqlite/db/SupportSQLiteDatabase;", "yieldIfContendedSafely", "yieldIfContendedSafely()Z", 0);

        return;
    }

    public final java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2: java.lang.Boolean invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>
    public void <init>(androidx.room.AutoCloser)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoCloser r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoCloser");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser> = r1;

        return;
    }

    public final void pokeOpen()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pokeOpen$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        return;
    }

    public androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement $r2;
        androidx.room.AutoCloser $r3;
        androidx.sqlite.db.SupportSQLiteStatement $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r2 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r2.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void <init>(java.lang.String,androidx.room.AutoCloser)>(r1, $r3);

        $r4 = (androidx.sqlite.db.SupportSQLiteStatement) $r2;

        return $r4;
    }

    public void beginTransaction()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Throwable r2, $r4;
        androidx.room.AutoCloser $r3, $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        r1 = virtualinvoke $r3.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

     label1:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r5.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void beginTransactionNonExclusive()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Throwable r2, $r4;
        androidx.room.AutoCloser $r3, $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        r1 = virtualinvoke $r3.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

     label1:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r5.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        androidx.sqlite.db.SupportSQLiteDatabase r2;
        java.lang.Throwable r3, $r5;
        androidx.room.AutoCloser $r4, $r6;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        r2 = virtualinvoke $r4.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

     label1:
        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r6.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        androidx.sqlite.db.SupportSQLiteDatabase r2;
        java.lang.Throwable r3, $r5;
        androidx.room.AutoCloser $r4, $r6;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        r2 = virtualinvoke $r4.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

     label1:
        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r6.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void endTransaction()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.Throwable r1, $r9;
        androidx.room.AutoCloser $r2, $r4, $r6, $r10;
        androidx.sqlite.db.SupportSQLiteDatabase $r3, $r5;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8, $r11;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = virtualinvoke $r2.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        if $r3 != null goto label1;

        $r11 = "End transaction called but delegateDb is null";

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r5 = virtualinvoke $r4.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

     label2:
        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r6.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label5;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

     label4:
        $r10 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r10.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setTransactionSuccessful()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoCloser $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;
        kotlin.Unit $r6;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r2 = virtualinvoke $r1.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label2;

     label1:
        $r6 = null;

     label2:
        if $r6 != null goto label3;

        $r3 = new java.lang.IllegalStateException;

        $r4 = "setTransactionSuccessful called but delegateDb is null";

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        return;
    }

    public boolean inTransaction()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoCloser $r1, $r5;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r2 = virtualinvoke $r1.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        if $r2 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$inTransaction$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        $r6 = virtualinvoke $r5.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public boolean isDbLockedByCurrentThread()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoCloser $r1, $r5;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r2 = virtualinvoke $r1.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        if $r2 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDbLockedByCurrentThread$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        $r6 = virtualinvoke $r5.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public boolean yieldIfContendedSafely()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        long l0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        l0 := @parameter0: long;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$yieldIfContendedSafely$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public int getVersion()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Number $r5;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Number) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public void setVersion(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        int i0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$version$2: void <init>(int)>(i0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public long getMaximumSize()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Number $r5;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$maximumSize$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Number) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public long setMaximumSize(long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        long l0, $l1;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.Object $r4;
        java.lang.Number $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaximumSize$1: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        $r5 = (java.lang.Number) $r4;

        $l1 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        return $l1;
    }

    public long getPageSize()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Number $r5;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Number) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public void setPageSize(long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        long l0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$pageSize$2: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public android.database.Cursor query(java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        android.database.Cursor r2, r3, $r9;
        java.lang.Throwable r4, $r10;
        androidx.room.AutoCloser $r5, $r8, $r11;
        androidx.sqlite.db.SupportSQLiteDatabase $r6;
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor $r7;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

     label1:
        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r6 = virtualinvoke $r5.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        r3 = interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r11.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r4;

     label4:
        r2 = r3;

        $r7 = new androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r8 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r7.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: void <init>(android.database.Cursor,androidx.room.AutoCloser)>(r2, $r8);

        $r9 = (android.database.Cursor) $r7;

        return $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.Cursor query(java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.database.Cursor r3, r4, $r10;
        java.lang.Throwable r5, $r11;
        androidx.room.AutoCloser $r6, $r9, $r12;
        androidx.sqlite.db.SupportSQLiteDatabase $r7;
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor $r8;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

     label1:
        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r7 = virtualinvoke $r6.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        r4 = interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.Object[])>(r1, r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

        $r12 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r12.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r5;

     label4:
        r3 = r4;

        $r8 = new androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r9 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r8.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: void <init>(android.database.Cursor,androidx.room.AutoCloser)>(r3, $r9);

        $r10 = (android.database.Cursor) $r8;

        return $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.database.Cursor r2, r3, $r9;
        java.lang.Throwable r4, $r10;
        androidx.room.AutoCloser $r5, $r8, $r11;
        androidx.sqlite.db.SupportSQLiteDatabase $r6;
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor $r7;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

     label1:
        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r6 = virtualinvoke $r5.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        r3 = interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r11.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r4;

     label4:
        r2 = r3;

        $r7 = new androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r8 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r7.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: void <init>(android.database.Cursor,androidx.room.AutoCloser)>(r2, $r8);

        $r9 = (android.database.Cursor) $r7;

        return $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.os.CancellationSignal r2;
        android.database.Cursor r3, r4, $r10;
        java.lang.Throwable r5, $r11;
        androidx.room.AutoCloser $r6, $r9, $r12;
        androidx.sqlite.db.SupportSQLiteDatabase $r7;
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor $r8;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: android.os.CancellationSignal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

     label1:
        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r7 = virtualinvoke $r6.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        r4 = interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

        $r12 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r12.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r5;

     label4:
        r3 = r4;

        $r8 = new androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r9 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        specialinvoke $r8.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: void <init>(android.database.Cursor,androidx.room.AutoCloser)>(r3, $r9);

        $r10 = (android.database.Cursor) $r8;

        return $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long insert(java.lang.String, int, android.content.ContentValues) throws android.database.SQLException
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        int i0;
        android.content.ContentValues r2;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1 $r3;
        androidx.room.AutoCloser $r4;
        kotlin.jvm.functions.Function1 $r5;
        java.lang.Object $r6;
        java.lang.Number $r7;
        long $l1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1;

        specialinvoke $r3.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$insert$1: void <init>(java.lang.String,int,android.content.ContentValues)>(r1, i0, r2);

        $r5 = (kotlin.jvm.functions.Function1) $r3;

        $r6 = virtualinvoke $r4.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r5);

        $r7 = (java.lang.Number) $r6;

        $l1 = virtualinvoke $r7.<java.lang.Number: long longValue()>();

        return $l1;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1, r2;
        java.lang.Object[] r3;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1 $r4;
        androidx.room.AutoCloser $r5;
        kotlin.jvm.functions.Function1 $r6;
        java.lang.Object $r7;
        java.lang.Number $r8;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r4 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1;

        specialinvoke $r4.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$delete$1: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        $r6 = (kotlin.jvm.functions.Function1) $r4;

        $r7 = virtualinvoke $r5.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r6);

        $r8 = (java.lang.Number) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public int update(java.lang.String, int, android.content.ContentValues, java.lang.String, java.lang.Object[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1, r3;
        int i0, $i1;
        android.content.ContentValues r2;
        java.lang.Object[] r4;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1 $r5;
        androidx.room.AutoCloser $r6;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Object $r8;
        java.lang.Number $r9;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r5 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1;

        specialinvoke $r5.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$update$1: void <init>(java.lang.String,int,android.content.ContentValues,java.lang.String,java.lang.Object[])>(r1, i0, r2, r3, r4);

        $r7 = (kotlin.jvm.functions.Function1) $r5;

        $r8 = virtualinvoke $r6.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r7);

        $r9 = (java.lang.Number) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        return $i1;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1 $r2;
        androidx.room.AutoCloser $r3;
        kotlin.jvm.functions.Function1 $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r2 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1;

        specialinvoke $r2.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function1) $r2;

        virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r4);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2 $r3;
        androidx.room.AutoCloser $r4;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2;

        specialinvoke $r3.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$execSQL$2: void <init>(java.lang.String,java.lang.Object[])>(r1, r2);

        $r5 = (kotlin.jvm.functions.Function1) $r3;

        virtualinvoke $r4.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r5);

        return;
    }

    public boolean isReadOnly()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isReadOnly$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isOpen()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1, $r3;
        androidx.room.AutoCloser $r2;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r3 = virtualinvoke $r2.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()>();

        if $r3 != null goto label1;

        return 0;

     label1:
        r1 = $r3;

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        return $z0;
    }

    public boolean needUpgrade(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        int i0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$needUpgrade$1: void <init>(int)>(i0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public java.lang.String getPath()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$path$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public void setLocale(java.util.Locale)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.util.Locale r1;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1 $r2;
        androidx.room.AutoCloser $r3;
        kotlin.jvm.functions.Function1 $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        r1 := @parameter0: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "locale");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r2 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1;

        specialinvoke $r2.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setLocale$1: void <init>(java.util.Locale)>(r1);

        $r4 = (kotlin.jvm.functions.Function1) $r2;

        virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r4);

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        int i0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setMaxSqlCacheSize$1: void <init>(int)>(i0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        boolean z0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1 $r1;
        androidx.room.AutoCloser $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1;

        specialinvoke $r1.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$setForeignKeyConstraintsEnabled$1: void <init>(boolean)>(z0);

        $r3 = (kotlin.jvm.functions.Function1) $r1;

        virtualinvoke $r2.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public boolean enableWriteAheadLogging()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Enable/disable write ahead logging on the OpenHelper instead of on the database directly.");

        throw $r1;
    }

    public void disableWriteAheadLogging()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Enable/disable write ahead logging on the OpenHelper instead of on the database directly.");

        throw $r1;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isWriteAheadLoggingEnabled$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public java.util.List getAttachedDbs()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.util.List $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$attachedDbs$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    public boolean isDatabaseIntegrityOk()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase$isDatabaseIntegrityOk$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r4 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void close() throws java.io.IOException
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase r0;
        androidx.room.AutoCloser $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSQLiteDatabase: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r1.<androidx.room.AutoCloser: void closeDatabaseIfOpen()>();

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "statement");

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void execute()>();

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteStatement) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $l0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteStatement) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1: java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement this$0>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: kotlin.jvm.functions.Function1 $block>
    void <init>(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement, kotlin.jvm.functions.Function1)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1 r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1;

        $r1 := @parameter0: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement this$0> = $r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: kotlin.jvm.functions.Function1 $block> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement $r3, $r5;
        java.lang.String $r4;
        kotlin.jvm.functions.Function1 $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement this$0>;

        $r4 = staticinvoke <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.String access$getSql$p(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement)>($r3);

        r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>($r4);

        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement this$0>;

        staticinvoke <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void access$doBinds(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement,androidx.sqlite.db.SupportSQLiteStatement)>($r5, r2);

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: kotlin.jvm.functions.Function1 $block>;

        $r7 = interfaceinvoke $r6.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        return $r7;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $i0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteStatement) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1: java.lang.Integer invoke(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $l0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: long simpleQueryForLong()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;
        java.lang.Long $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteStatement) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1: java.lang.Long invoke(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 INSTANCE>
    void <init>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.String invoke(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "obj");

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: java.lang.String simpleQueryForString()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteStatement) r1;

        $r3 = virtualinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1: java.lang.String invoke(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 $r0;

        $r0 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1: void <init>()>();

        <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 INSTANCE> = $r0;

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.String sql>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: androidx.room.AutoCloser autoCloser>
<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>
    public void <init>(java.lang.String, androidx.room.AutoCloser)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        java.lang.String r1;
        androidx.room.AutoCloser r2;
        java.util.ArrayList $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "autoCloser");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.String sql> = r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: androidx.room.AutoCloser autoCloser> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds> = $r3;

        return;
    }

    private final java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        kotlin.jvm.functions.Function1 r1, $r4;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1 $r2;
        androidx.room.AutoCloser $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: androidx.room.AutoCloser autoCloser>;

        $r2 = new androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1;

        specialinvoke $r2.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeSqliteStatementWithRefCount$1: void <init>(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement,kotlin.jvm.functions.Function1)>(r0, r1);

        $r4 = (kotlin.jvm.functions.Function1) $r2;

        $r5 = virtualinvoke $r3.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r4);

        return $r5;
    }

    private final void doBinds(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        int i0, i1, i2, $i3, i5;
        java.lang.Object r5;
        java.util.ArrayList $r6, $r7;
        boolean $z2, $z3, $z4, $z5, $z6;
        byte[] $r8;
        java.lang.String $r9;
        java.lang.Number $r10, $r11;
        double $d0;
        long $l4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        $r2 = (java.lang.Iterable) $r6;

        i5 = 0;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i5;

        i5 = i5 + 1;

        i0 = $i3;

        if i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        i1 = i0;

        i2 = i1 + 1;

        $r7 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        r5 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        if r5 != null goto label3;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(i2);

        goto label7;

     label3:
        $z3 = r5 instanceof java.lang.Long;

        if $z3 == 0 goto label4;

        $r11 = (java.lang.Number) r5;

        $l4 = virtualinvoke $r11.<java.lang.Number: long longValue()>();

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void bindLong(int,long)>(i2, $l4);

        goto label7;

     label4:
        $z4 = r5 instanceof java.lang.Double;

        if $z4 == 0 goto label5;

        $r10 = (java.lang.Number) r5;

        $d0 = virtualinvoke $r10.<java.lang.Number: double doubleValue()>();

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void bindDouble(int,double)>(i2, $d0);

        goto label7;

     label5:
        $z5 = r5 instanceof java.lang.String;

        if $z5 == 0 goto label6;

        $r9 = (java.lang.String) r5;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(i2, $r9);

        goto label7;

     label6:
        $z6 = r5 instanceof byte[];

        if $z6 == 0 goto label7;

        $r8 = (byte[]) r5;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteStatement: void bindBlob(int,byte[])>(i2, $r8);

     label7:
        goto label1;

     label8:
        return;
    }

    private final void saveBinds(int, java.lang.Object)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0, i1, $i2, i3;
        java.lang.Object r1;
        java.util.ArrayList $r2, $r4, $r5, $r6;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 = i0 - 1;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 < $i2 goto label2;

        $r4 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i3 > i1 goto label2;

     label1:
        $r5 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        if i3 == i1 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        return;
    }

    public void execute()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$execute$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)>($r2);

        return;
    }

    public int executeUpdateDelete()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeUpdateDelete$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)>($r2);

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public long executeInsert()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$executeInsert$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public long simpleQueryForLong()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        long $l0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForLong$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public java.lang.String simpleQueryForString()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = <androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement$simpleQueryForString$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.Object executeSqliteStatementWithRefCount(kotlin.jvm.functions.Function1)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public void bindNull(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void saveBinds(int,java.lang.Object)>(i0, null);

        return;
    }

    public void bindLong(int, long)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0;
        long l1;
        java.lang.Long $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void saveBinds(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public void bindDouble(int, double)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0;
        double d0;
        java.lang.Double $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void saveBinds(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public void bindString(int, java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0;
        java.lang.String r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void saveBinds(int,java.lang.Object)>(i0, r1);

        return;
    }

    public void bindBlob(int, byte[])
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        int i0;
        byte[] r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        specialinvoke r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void saveBinds(int,java.lang.Object)>(i0, r1);

        return;
    }

    public void clearBindings()
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.util.ArrayList binds>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    public static final java.lang.String access$getSql$p(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        $r1 = $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: java.lang.String sql>;

        return $r1;
    }

    public static final void access$doBinds(androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement, androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement $r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;

        $r0 := @parameter0: androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement;

        r1 := @parameter1: androidx.sqlite.db.SupportSQLiteStatement;

        specialinvoke $r0.<androidx.room.AutoClosingRoomOpenHelper$AutoClosingSupportSqliteStatement: void doBinds(androidx.sqlite.db.SupportSQLiteStatement)>(r1);

        return;
    }

androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor
<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>
<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: androidx.room.AutoCloser autoCloser>
    public void <init>(android.database.Cursor, androidx.room.AutoCloser)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor r1;
        androidx.room.AutoCloser r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.database.Cursor;

        r2 := @parameter1: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "autoCloser");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate> = r1;

        r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: androidx.room.AutoCloser autoCloser> = r2;

        return;
    }

    public void copyStringToBuffer(int, android.database.CharArrayBuffer)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.CharArrayBuffer r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        r1 := @parameter1: android.database.CharArrayBuffer;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r2.<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>(i0, r1);

        return;
    }

    public void deactivate()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r1.<android.database.Cursor: void deactivate()>();

        return;
    }

    public byte[] getBlob(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        byte[] $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = interfaceinvoke $r1.<android.database.Cursor: byte[] getBlob(int)>(i0);

        return $r2;
    }

    public int getColumnCount()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnCount()>();

        return $i0;
    }

    public int getColumnIndex(java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        java.lang.String r1;
        android.database.Cursor $r2;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i0 = interfaceinvoke $r2.<android.database.Cursor: int getColumnIndex(java.lang.String)>(r1);

        return $i0;
    }

    public int getColumnIndexOrThrow(java.lang.String)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        java.lang.String r1;
        android.database.Cursor $r2;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i0 = interfaceinvoke $r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>(r1);

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getColumnName(int)>(i0);

        return $r2;
    }

    public java.lang.String[] getColumnNames()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        java.lang.String[] $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        return $r2;
    }

    public int getCount()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getCount()>();

        return $i0;
    }

    public double getDouble(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        double $d0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $d0 = interfaceinvoke $r1.<android.database.Cursor: double getDouble(int)>(i0);

        return $d0;
    }

    public android.os.Bundle getExtras()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        android.os.Bundle $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = interfaceinvoke $r1.<android.database.Cursor: android.os.Bundle getExtras()>();

        return $r2;
    }

    public float getFloat(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        float $f0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $f0 = interfaceinvoke $r1.<android.database.Cursor: float getFloat(int)>(i0);

        return $f0;
    }

    public int getInt(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0, $i1;
        android.database.Cursor $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i1 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>(i0);

        return $i1;
    }

    public long getLong(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        long $l1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>(i0);

        return $l1;
    }

    public int getPosition()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        int $i0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getPosition()>();

        return $i0;
    }

    public short getShort(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        short $s1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $s1 = interfaceinvoke $r1.<android.database.Cursor: short getShort(int)>(i0);

        return $s1;
    }

    public java.lang.String getString(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>(i0);

        return $r2;
    }

    public int getType(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0, $i1;
        android.database.Cursor $r1;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $i1 = interfaceinvoke $r1.<android.database.Cursor: int getType(int)>(i0);

        return $i1;
    }

    public boolean getWantsAllOnMoveCalls()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean getWantsAllOnMoveCalls()>();

        return $z0;
    }

    public boolean isAfterLast()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isAfterLast()>();

        return $z0;
    }

    public boolean isBeforeFirst()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isBeforeFirst()>();

        return $z0;
    }

    public boolean isClosed()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isClosed()>();

        return $z0;
    }

    public boolean isFirst()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isFirst()>();

        return $z0;
    }

    public boolean isLast()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isLast()>();

        return $z0;
    }

    public boolean isNull(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isNull(int)>(i0);

        return $z0;
    }

    public boolean move(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean move(int)>(i0);

        return $z0;
    }

    public boolean moveToFirst()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToFirst()>();

        return $z0;
    }

    public boolean moveToLast()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToLast()>();

        return $z0;
    }

    public boolean moveToNext()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToNext()>();

        return $z0;
    }

    public boolean moveToPosition(int)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        int i0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToPosition(int)>(i0);

        return $z0;
    }

    public boolean moveToPrevious()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToPrevious()>();

        return $z0;
    }

    public void registerContentObserver(android.database.ContentObserver)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.ContentObserver r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.database.ContentObserver;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r2.<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>(r1);

        return;
    }

    public void registerDataSetObserver(android.database.DataSetObserver)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.DataSetObserver r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r2.<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>(r1);

        return;
    }

    public boolean requery()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean requery()>();

        return $z0;
    }

    public android.os.Bundle respond(android.os.Bundle)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.os.Bundle r1, $r3;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r3 = interfaceinvoke $r2.<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>(r1);

        return $r3;
    }

    public void setNotificationUri(android.content.ContentResolver, android.net.Uri)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        android.database.Cursor $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r3.<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>(r1, r2);

        return;
    }

    public void unregisterContentObserver(android.database.ContentObserver)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.ContentObserver r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.database.ContentObserver;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r2.<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>(r1);

        return;
    }

    public void unregisterDataSetObserver(android.database.DataSetObserver)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.DataSetObserver r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r2.<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>(r1);

        return;
    }

    public void close()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        androidx.room.AutoCloser $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        interfaceinvoke $r1.<android.database.Cursor: void close()>();

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r2.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        return;
    }

    public void setNotificationUris(android.content.ContentResolver, java.util.List)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.content.ContentResolver r1;
        java.util.List r2;
        android.database.Cursor $r3;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "cr");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "uris");

        $r3 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api29Impl: void setNotificationUris(android.database.Cursor,android.content.ContentResolver,java.util.List)>($r3, r1, r2);

        return;
    }

    public android.net.Uri getNotificationUri()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        android.net.Uri $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api19Impl: android.net.Uri getNotificationUri(android.database.Cursor)>($r1);

        return $r2;
    }

    public java.util.List getNotificationUris()
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.database.Cursor $r1;
        java.util.List $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        $r1 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        $r2 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api29Impl: java.util.List getNotificationUris(android.database.Cursor)>($r1);

        return $r2;
    }

    public void setExtras(android.os.Bundle)
    {
        androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor r0;
        android.os.Bundle r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "extras");

        $r2 = r0.<androidx.room.AutoClosingRoomOpenHelper$KeepAliveCursor: android.database.Cursor delegate>;

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api23Impl: void setExtras(android.database.Cursor,android.os.Bundle)>($r2, r1);

        return;
    }

