androidx.credentials.provider.RemoteCredentialEntry
<androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR>
<androidx.credentials.provider.RemoteCredentialEntry: android.app.PendingIntent pendingIntent>
<androidx.credentials.provider.RemoteCredentialEntry: java.lang.String TAG>
<androidx.credentials.provider.RemoteCredentialEntry: java.lang.String SLICE_HINT_PENDING_INTENT>
<androidx.credentials.provider.RemoteCredentialEntry: java.lang.String SLICE_HINT_OPTION_ID>
<androidx.credentials.provider.RemoteCredentialEntry: android.os.Parcelable$Creator CREATOR>
    public void <init>(android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        androidx.credentials.provider.RemoteCredentialEntry r0;
        android.app.PendingIntent r1;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r2;
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR $r3;
        android.service.credentials.BeginGetCredentialOption $r4;
        android.app.slice.Slice $r5;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "beginGetPublicKeyCredentialOption");

        $r4 = (android.service.credentials.BeginGetCredentialOption) r2;

        $r3 = <androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR>;

        $r5 = virtualinvoke $r3.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: android.app.slice.Slice toSlice$credentials_release(java.lang.String,android.app.PendingIntent,androidx.credentials.provider.BeginGetPublicKeyCredentialOption)>("androidx.credentials.TYPE_PUBLIC_KEY_CREDENTIAL", r1, r2);

        specialinvoke r0.<android.service.credentials.CredentialEntry: void <init>(android.service.credentials.BeginGetCredentialOption,android.app.slice.Slice)>($r4, $r5);

        r0.<androidx.credentials.provider.RemoteCredentialEntry: android.app.PendingIntent pendingIntent> = r1;

        return;
    }

    public final android.app.PendingIntent getPendingIntent()
    {
        androidx.credentials.provider.RemoteCredentialEntry r0;
        android.app.PendingIntent $r1;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.RemoteCredentialEntry: android.app.PendingIntent pendingIntent>;

        return $r1;
    }

    public int describeContents()
    {
        androidx.credentials.provider.RemoteCredentialEntry r0;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.credentials.provider.RemoteCredentialEntry r0;
        android.os.Parcel r1;
        int i0;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "dest");

        specialinvoke r0.<android.service.credentials.CredentialEntry: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        return;
    }

    public static final android.app.slice.Slice toSlice$credentials_release(java.lang.String, android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        java.lang.String r0;
        android.app.PendingIntent r1;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r2;
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR $r3;
        android.app.slice.Slice $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.PendingIntent;

        r2 := @parameter2: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        $r3 = <androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR>;

        $r4 = virtualinvoke $r3.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: android.app.slice.Slice toSlice$credentials_release(java.lang.String,android.app.PendingIntent,androidx.credentials.provider.BeginGetPublicKeyCredentialOption)>(r0, r1, r2);

        return $r4;
    }

    public static final androidx.credentials.provider.RemoteCredentialEntry fromSlice(android.app.slice.Slice)
    {
        android.app.slice.Slice r0;
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR $r1;
        androidx.credentials.provider.RemoteCredentialEntry $r2;

        r0 := @parameter0: android.app.slice.Slice;

        $r1 = <androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR>;

        $r2 = virtualinvoke $r1.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: androidx.credentials.provider.RemoteCredentialEntry fromSlice(android.app.slice.Slice)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR $r0;
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 $r1;
        android.os.Parcelable$Creator $r2;

        $r0 = new androidx.credentials.provider.RemoteCredentialEntry$CREATOR;

        specialinvoke $r0.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR> = $r0;

        $r1 = new androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        specialinvoke $r1.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1: void <init>()>();

        $r2 = (android.os.Parcelable$Creator) $r1;

        <androidx.credentials.provider.RemoteCredentialEntry: android.os.Parcelable$Creator CREATOR> = $r2;

        return;
    }

androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1
    void <init>()
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 r0;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.credentials.provider.RemoteCredentialEntry createFromParcel(android.os.Parcel)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 r0;
        android.os.Parcel r1;
        android.service.credentials.CredentialEntry r2;
        android.os.Parcelable$Creator $r3;
        java.lang.Object $r4;
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR $r5;
        android.app.slice.Slice $r6;
        androidx.credentials.provider.RemoteCredentialEntry $r7;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        r1 := @parameter0: android.os.Parcel;

        $r3 = <android.service.credentials.CredentialEntry: android.os.Parcelable$Creator CREATOR>;

        $r4 = interfaceinvoke $r3.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r2 = (android.service.credentials.CredentialEntry) $r4;

        $r5 = <androidx.credentials.provider.RemoteCredentialEntry: androidx.credentials.provider.RemoteCredentialEntry$CREATOR CREATOR>;

        $r6 = virtualinvoke r2.<android.service.credentials.CredentialEntry: android.app.slice.Slice getSlice()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "baseEntry.slice");

        $r7 = virtualinvoke $r5.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: androidx.credentials.provider.RemoteCredentialEntry fromSlice(android.app.slice.Slice)>($r6);

        return $r7;
    }

    public androidx.credentials.provider.RemoteCredentialEntry[] newArray(int)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 r0;
        int i0;
        androidx.credentials.provider.RemoteCredentialEntry[] $r1;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.credentials.provider.RemoteCredentialEntry)[i0];

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 r0;
        android.os.Parcel r1;
        androidx.credentials.provider.RemoteCredentialEntry $r2;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1: androidx.credentials.provider.RemoteCredentialEntry createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1 r0;
        int i0;
        androidx.credentials.provider.RemoteCredentialEntry[] $r1;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR$CREATOR$1: androidx.credentials.provider.RemoteCredentialEntry[] newArray(int)>(i0);

        return $r1;
    }

androidx.credentials.provider.RemoteCredentialEntry$CREATOR
    private void <init>()
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR r0;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getSLICE_HINT_PENDING_INTENT$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_OPTION_ID$credentials_release$annotations()
    {
        return;
    }

    public final android.app.slice.Slice toSlice$credentials_release(java.lang.String, android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR r0;
        java.lang.String r1, $r13;
        android.app.PendingIntent r2;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r3;
        android.app.slice.Slice$Builder r4, $r5, $r8, $r10, $r12;
        android.app.slice.SliceSpec $r6;
        android.net.Uri $r7;
        java.util.List $r9, $r15;
        android.app.slice.Slice $r11, $r17;
        java.lang.CharSequence $r14;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "beginGetPublicKeyCredentialOption");

        $r5 = new android.app.slice.Slice$Builder;

        $r7 = <android.net.Uri: android.net.Uri EMPTY>;

        $r6 = new android.app.slice.SliceSpec;

        specialinvoke $r6.<android.app.slice.SliceSpec: void <init>(java.lang.String,int)>(r1, 1);

        specialinvoke $r5.<android.app.slice.Slice$Builder: void <init>(android.net.Uri,android.app.slice.SliceSpec)>($r7, $r6);

        r4 = $r5;

        $r8 = new android.app.slice.Slice$Builder;

        specialinvoke $r8.<android.app.slice.Slice$Builder: void <init>(android.app.slice.Slice$Builder)>(r4);

        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("androidx.credentials.provider.remoteEntry.SLICE_HINT_PENDING_INTENT");

        $r10 = virtualinvoke $r8.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addHints(java.util.List)>($r9);

        $r11 = virtualinvoke $r10.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        $r12 = virtualinvoke r4.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>(r2, $r11, null);

        $r13 = virtualinvoke r3.<androidx.credentials.provider.BeginGetPublicKeyCredentialOption: java.lang.String getId()>();

        $r14 = (java.lang.CharSequence) $r13;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.remoteEntry.SLICE_HINT_OPTION_ID");

        virtualinvoke $r12.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>($r14, null, $r15);

        $r17 = virtualinvoke r4.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "sliceBuilder.build()");

        return $r17;
    }

    public final androidx.credentials.provider.RemoteCredentialEntry fromSlice(android.app.slice.Slice)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR r0;
        android.app.slice.Slice r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        android.app.slice.SliceItem r4;
        java.util.List $r5;
        boolean $z1, $z2, $z3;
        androidx.credentials.provider.RemoteCredentialEntry $r6, $r20;
        android.os.Bundle $r7;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion $r8;
        java.lang.String $r9, $r14, $r16;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption $r10;
        java.lang.Throwable $r11;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.CharSequence r17;
        android.app.PendingIntent r18;
        java.lang.Iterable $r19;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR;

        r1 := @parameter0: android.app.slice.Slice;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slice");

        r17 = null;

        r18 = null;

        $r5 = virtualinvoke r1.<android.app.slice.Slice: java.util.List getItems()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "slice.items");

        $r19 = (java.lang.Iterable) $r5;

        r2 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.app.slice.SliceItem) r3;

        $z2 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.remoteEntry.SLICE_HINT_PENDING_INTENT");

        if $z2 == 0 goto label2;

        r18 = virtualinvoke r4.<android.app.slice.SliceItem: android.app.PendingIntent getAction()>();

        goto label3;

     label2:
        $z3 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.remoteEntry.SLICE_HINT_OPTION_ID");

        if $z3 == 0 goto label3;

        r17 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

     label3:
        goto label1;

     label4:
        $r6 = new androidx.credentials.provider.RemoteCredentialEntry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r18);

        $r8 = <androidx.credentials.provider.BeginGetPublicKeyCredentialOption: androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion Companion>;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r17);

        $r9 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion: androidx.credentials.provider.BeginGetPublicKeyCredentialOption createFromEntrySlice$credentials_release(android.os.Bundle,java.lang.String)>($r7, $r9);

        specialinvoke $r6.<androidx.credentials.provider.RemoteCredentialEntry: void <init>(android.app.PendingIntent,androidx.credentials.provider.BeginGetPublicKeyCredentialOption)>(r18, $r10);

        $r20 = $r6;

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromSlice failed with: ");

        $r14 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RemoteEntry", $r16);

        $r20 = null;

     label7:
        return $r20;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.credentials.provider.RemoteCredentialEntry$CREATOR r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.credentials.provider.RemoteCredentialEntry$CREATOR;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.credentials.provider.RemoteCredentialEntry$CREATOR: void <init>()>();

        return;
    }

