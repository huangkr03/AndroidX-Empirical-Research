androidx.benchmark.macro.perfetto.StartupTimingQuery
<androidx.benchmark.macro.perfetto.StartupTimingQuery: androidx.benchmark.macro.perfetto.StartupTimingQuery INSTANCE>
    private void <init>()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery r0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.lang.String getFullQuery(java.lang.String, java.lang.String)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery r0;
        java.lang.String r1, r2, $r6, $r10, $r13, $r14;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r11, $r12;
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor $r5, $r9;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n        ------ Select all startup-relevant slices from slice table\n        SELECT\n            slice.name as name,\n            slice.ts as ts,\n            slice.dur as dur\n        FROM slice\n            INNER JOIN thread_track on slice.track_id = thread_track.id\n            INNER JOIN thread USING(utid)\n            INNER JOIN process USING(upid)\n        WHERE (\n            (");

        $r5 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String processNameLikePkg$benchmark_macro_release(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND slice.name LIKE \"startActivityAndWait\") OR\n            (\n                ");

        $r9 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor INSTANCE>;

        $r10 = virtualinvoke $r9.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String processNameLikePkg$benchmark_macro_release(java.lang.String)>(r2);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND (\n                    (slice.name LIKE \"activityResume\" AND process.pid LIKE thread.tid) OR\n                    (slice.name LIKE \"Choreographer#doFrame%\" AND process.pid LIKE thread.tid) OR\n                    (slice.name LIKE \"reportFullyDrawn() for %\" AND process.pid LIKE thread.tid) OR\n                    (slice.name LIKE \"DrawFrame%\" AND thread.name LIKE \"RenderThread\")\n                )\n            ) OR\n            (\n                -- Signals beginning of launch event, only present in API 29+\n                process.name LIKE \"system_server\" AND\n                slice.name LIKE \"MetricsLogger:launchObserverNotifyIntentStarted\"\n            )\n        )\n        ------ Add in async slices\n        UNION\n        SELECT\n            slice.name as name,\n            slice.ts as ts,\n            slice.dur as dur\n        FROM slice\n            INNER JOIN process_track on slice.track_id = process_track.id\n            INNER JOIN process USING(upid)\n        WHERE (\n            -- API 23+:   \"launching: <target>\"\n            -- API 19-22: \"launching\"\n            slice.name LIKE \"launching%\" AND process.name LIKE \"system_server\"\n        )\n        ORDER BY ts ASC\n    ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r13);

        return $r14;
    }

    private final long findEndRenderTimeForUiFrame(java.util.List, java.util.List, kotlin.jvm.functions.Function1)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery r0;
        java.util.List r1, r2;
        kotlin.jvm.functions.Function1 r3;
        androidx.benchmark.macro.perfetto.Slice r4, r6, $r16;
        java.lang.Object r5, $r8, r13;
        boolean $z1, $z2, $z3, $z6;
        java.util.NoSuchElementException $r7, $r10;
        java.lang.Boolean $r9;
        long $l0, $l1, $l3;
        byte $b2;
        java.lang.Iterable $r11, $r14;
        java.util.Iterator $r12, r15;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r11 = (java.lang.Iterable) r1;

        $r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r13);

        $r9 = (java.lang.Boolean) $r8;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        goto label3;

     label2:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        throw $r7;

     label3:
        r4 = (androidx.benchmark.macro.perfetto.Slice) r13;

        $r14 = (java.lang.Iterable) r2;

        r15 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.benchmark.macro.perfetto.Slice) r5;

        $l0 = virtualinvoke r6.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $l1 = virtualinvoke r4.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        if $z6 == 0 goto label4;

        goto label8;

     label7:
        $r10 = new java.util.NoSuchElementException;

        specialinvoke $r10.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        throw $r10;

     label8:
        $r16 = (androidx.benchmark.macro.perfetto.Slice) r5;

        $l3 = virtualinvoke $r16.<androidx.benchmark.macro.perfetto.Slice: long getEndTs()>();

        return $l3;
    }

    public final androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics getFrameSubMetrics(java.lang.String, int, java.lang.String, java.lang.String, androidx.benchmark.macro.StartupMode)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery r0, $r28;
        java.lang.String r1, r2, r3, r5, $r9, $r35, $r36, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r54;
        int i0, $i3;
        androidx.benchmark.macro.StartupMode r4, $r37;
        java.util.List r6, $r12, $r16, $r20, $r25, $r34, $r40, $r71, r73, $r79, $r82;
        java.util.Map r7, r63, r80;
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor $r8;
        androidx.benchmark.macro.perfetto.Slice$Companion $r10;
        java.util.ArrayList $r11, $r55;
        java.util.LinkedHashMap $r13;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z19, $z21, z28, $z31, z32, $z33, z34;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType $r14, $r18, $r23, $r32, $r38, $r45, $r67, r68, r77;
        java.lang.Object $r15, $r17, $r19, $r24, $r26, $r33, $r39, $r41, r60, r65, r70, $r72, $r78, $r81, $r86, $r88, r94, $r96;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1 $r21;
        kotlin.jvm.functions.Function1 $r22, $r29, $r44;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1 $r27;
        long $l2, $l4, $l5, $l7, $l8, $l9, l11, $l13, l14, $l15;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics $r30;
        byte $b6, $b10;
        androidx.benchmark.macro.perfetto.Slice $r42, r61, r66, $r74, $r76, $r83, r87, r90, $r91, $r95, r97, $r100, r101;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2 $r43;
        java.lang.IllegalStateException $r53;
        java.lang.Iterable $r57, $r62, $r84;
        java.util.Collection r58;
        java.util.Iterator $r59, $r64, r85;
        java.util.ListIterator $r93;
        java.lang.Long $r98, r99, $r102;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: androidx.benchmark.macro.StartupMode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteTracePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetPackageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "testPackageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "startupMode");

        $r8 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor INSTANCE>;

        $r9 = specialinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery: java.lang.String getFullQuery(java.lang.String,java.lang.String)>(r3, r2);

        r5 = virtualinvoke $r8.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String rawQuery$benchmark_macro_release(java.lang.String,java.lang.String)>(r1, $r9);

        $r10 = <androidx.benchmark.macro.perfetto.Slice: androidx.benchmark.macro.perfetto.Slice$Companion Companion>;

        r6 = virtualinvoke $r10.<androidx.benchmark.macro.perfetto.Slice$Companion: java.util.List parseListFromQueryResult(java.lang.String)>(r5);

        $r57 = (java.lang.Iterable) r6;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r58 = (java.util.Collection) $r11;

        $r59 = interfaceinvoke $r57.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z19 = interfaceinvoke $r59.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label04;

        r60 = interfaceinvoke $r59.<java.util.Iterator: java.lang.Object next()>();

        r61 = (androidx.benchmark.macro.perfetto.Slice) r60;

        $l9 = virtualinvoke r61.<androidx.benchmark.macro.perfetto.Slice: long getDur()>();

        $b10 = $l9 cmp 0L;

        if $b10 <= 0 goto label02;

        $z21 = 1;

        goto label03;

     label02:
        $z21 = 0;

     label03:
        if $z21 == 0 goto label01;

        interfaceinvoke r58.<java.util.Collection: boolean add(java.lang.Object)>(r60);

        goto label01;

     label04:
        $r12 = (java.util.List) r58;

        $r62 = (java.lang.Iterable) $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        r63 = (java.util.Map) $r13;

        $r64 = interfaceinvoke $r62.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r64.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        r65 = interfaceinvoke $r64.<java.util.Iterator: java.lang.Object next()>();

        r66 = (androidx.benchmark.macro.perfetto.Slice) r65;

        $r46 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z8 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r46, "Choreographer#doFrame", 0, 2, null);

        if $z8 == 0 goto label06;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameUiThread>;

        goto label13;

     label06:
        $r47 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z9 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r47, "DrawFrame", 0, 2, null);

        if $z9 == 0 goto label07;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameRenderThread>;

        goto label13;

     label07:
        $r48 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z10 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r48, "launching", 0, 2, null);

        if $z10 == 0 goto label08;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType Launching>;

        goto label13;

     label08:
        $r49 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z11 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r49, "reportFullyDrawn", 0, 2, null);

        if $z11 == 0 goto label09;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ReportFullyDrawn>;

        goto label13;

     label09:
        $r50 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z12 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r50, "MetricsLogger:launchObserverNotifyIntentStarted");

        if $z12 == 0 goto label10;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType NotifyStarted>;

        goto label13;

     label10:
        $r51 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z13 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r51, "activityResume");

        if $z13 == 0 goto label11;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ActivityResume>;

        goto label13;

     label11:
        $r52 = virtualinvoke r66.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $z14 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r52, "startActivityAndWait");

        if $z14 == 0 goto label12;

        $r67 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType StartActivityAndWait>;

        goto label13;

     label12:
        $r53 = new java.lang.IllegalStateException;

        $r54 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unexpected slice ", r66);

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r54);

        throw $r53;

     label13:
        r68 = $r67;

        r70 = interfaceinvoke r63.<java.util.Map: java.lang.Object get(java.lang.Object)>(r68);

        if r70 != null goto label14;

        $r55 = new java.util.ArrayList;

        specialinvoke $r55.<java.util.ArrayList: void <init>()>();

        $r71 = (java.util.List) $r55;

        interfaceinvoke r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r68, $r71);

        $r72 = $r71;

        goto label15;

     label14:
        $r72 = r70;

     label15:
        r73 = (java.util.List) $r72;

        interfaceinvoke r73.<java.util.List: boolean add(java.lang.Object)>(r65);

        goto label05;

     label16:
        r7 = r63;

        $r14 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType StartActivityAndWait>;

        $r15 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (java.util.List) $r15;

        if $r16 != null goto label17;

        $r74 = null;

        goto label18;

     label17:
        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r16);

        $r74 = (androidx.benchmark.macro.perfetto.Slice) $r17;

     label18:
        if $r74 != null goto label19;

        return null;

     label19:
        $r76 = $r74;

        r77 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameUiThread>;

        $r78 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r77);

        if $r78 != null goto label20;

        $r78 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label20:
        $r79 = (java.util.List) $r78;

        r80 = r7;

        $r45 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameRenderThread>;

        $r81 = interfaceinvoke r80.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45);

        if $r81 != null goto label21;

        z28 = 0;

        $r81 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label21:
        $r82 = (java.util.List) $r81;

        $z2 = interfaceinvoke $r79.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label22;

        $z3 = interfaceinvoke $r82.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label23;

     label22:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "No UI / RT slices seen, not reporting startup.");

        return null;

     label23:
        l11 = 0L;

        if i0 >= 29 goto label24;

        $r37 = <androidx.benchmark.macro.StartupMode: androidx.benchmark.macro.StartupMode HOT>;

        if r4 == $r37 goto label44;

     label24:
        $r18 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType Launching>;

        $r19 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r20 = (java.util.List) $r19;

        if $r20 != null goto label25;

        $r83 = null;

        goto label32;

     label25:
        $r84 = (java.lang.Iterable) $r20;

        r85 = interfaceinvoke $r84.<java.lang.Iterable: java.util.Iterator iterator()>();

     label26:
        $z4 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label30;

        $r86 = interfaceinvoke r85.<java.util.Iterator: java.lang.Object next()>();

        r87 = (androidx.benchmark.macro.perfetto.Slice) $r86;

        $l7 = virtualinvoke r87.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $z6 = virtualinvoke $r76.<androidx.benchmark.macro.perfetto.Slice: boolean contains(long)>($l7);

        if $z6 == 0 goto label28;

        if i0 < 23 goto label27;

        $r35 = virtualinvoke r87.<androidx.benchmark.macro.perfetto.Slice: java.lang.String getName()>();

        $r36 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("launching: ", r2);

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r35, $r36);

        if $z7 == 0 goto label28;

     label27:
        $z31 = 1;

        goto label29;

     label28:
        $z31 = 0;

     label29:
        if $z31 == 0 goto label26;

        $r88 = $r86;

        goto label31;

     label30:
        $r88 = null;

     label31:
        $r83 = (androidx.benchmark.macro.perfetto.Slice) $r88;

     label32:
        if $r83 != null goto label33;

        return null;

     label33:
        r90 = $r83;

        if i0 < 29 goto label42;

        $r32 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType NotifyStarted>;

        $r33 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r32);

        $r34 = (java.util.List) $r33;

        if $r34 != null goto label34;

        $r91 = null;

        goto label40;

     label34:
        z32 = 0;

        $i3 = interfaceinvoke $r34.<java.util.List: int size()>();

        $r93 = interfaceinvoke $r34.<java.util.List: java.util.ListIterator listIterator(int)>($i3);

     label35:
        $z5 = interfaceinvoke $r93.<java.util.ListIterator: boolean hasPrevious()>();

        if $z5 == 0 goto label38;

        r94 = interfaceinvoke $r93.<java.util.ListIterator: java.lang.Object previous()>();

        $r95 = (androidx.benchmark.macro.perfetto.Slice) r94;

        $l4 = virtualinvoke $r95.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $l5 = virtualinvoke r90.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label36;

        $z33 = 1;

        goto label37;

     label36:
        $z33 = 0;

     label37:
        if $z33 == 0 goto label35;

        $r96 = r94;

        goto label39;

     label38:
        $r96 = null;

     label39:
        $r91 = (androidx.benchmark.macro.perfetto.Slice) $r96;

     label40:
        r97 = $r91;

        if r97 != null goto label41;

        return null;

     label41:
        $l13 = virtualinvoke r97.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        goto label43;

     label42:
        $l13 = virtualinvoke r90.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

     label43:
        l14 = $l13;

        $r21 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1;

        specialinvoke $r21.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1: void <init>(androidx.benchmark.macro.perfetto.Slice)>(r90);

        $r22 = (kotlin.jvm.functions.Function1) $r21;

        $l15 = specialinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery: long findEndRenderTimeForUiFrame(java.util.List,java.util.List,kotlin.jvm.functions.Function1)>($r79, $r82, $r22);

        goto label49;

     label44:
        $r38 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ActivityResume>;

        $r39 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r38);

        $r40 = (java.util.List) $r39;

        if $r40 != null goto label45;

        $r98 = null;

        goto label47;

     label45:
        $r41 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r40);

        $r42 = (androidx.benchmark.macro.perfetto.Slice) $r41;

        if $r42 != null goto label46;

        $r98 = null;

        goto label47;

     label46:
        $l8 = virtualinvoke $r42.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $r98 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

     label47:
        r99 = $r98;

        if r99 != null goto label48;

        return null;

     label48:
        l14 = virtualinvoke r99.<java.lang.Long: long longValue()>();

        $r43 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2;

        specialinvoke $r43.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2: void <init>(long)>(l14);

        $r44 = (kotlin.jvm.functions.Function1) $r43;

        $l15 = specialinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery: long findEndRenderTimeForUiFrame(java.util.List,java.util.List,kotlin.jvm.functions.Function1)>($r79, $r82, $r44);

     label49:
        $r23 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ReportFullyDrawn>;

        $r24 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        $r25 = (java.util.List) $r24;

        if $r25 != null goto label50;

        $r100 = null;

        goto label51;

     label50:
        $r26 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r25);

        $r100 = (androidx.benchmark.macro.perfetto.Slice) $r26;

     label51:
        r101 = $r100;

        if r101 != null goto label52;

        $r102 = null;

        goto label53;

     label52:
        z34 = 0;

        $r28 = <androidx.benchmark.macro.perfetto.StartupTimingQuery: androidx.benchmark.macro.perfetto.StartupTimingQuery INSTANCE>;

        $r27 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1;

        specialinvoke $r27.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1: void <init>(androidx.benchmark.macro.perfetto.Slice)>(r101);

        $r29 = (kotlin.jvm.functions.Function1) $r27;

        $l2 = specialinvoke $r28.<androidx.benchmark.macro.perfetto.StartupTimingQuery: long findEndRenderTimeForUiFrame(java.util.List,java.util.List,kotlin.jvm.functions.Function1)>($r79, $r82, $r29);

        $r102 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label53:
        $r30 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        specialinvoke $r30.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: void <init>(long,long,java.lang.Long)>(l14, $l15, $r102);

        return $r30;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery $r0;

        $r0 = new androidx.benchmark.macro.perfetto.StartupTimingQuery;

        specialinvoke $r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery: void <init>()>();

        <androidx.benchmark.macro.perfetto.StartupTimingQuery: androidx.benchmark.macro.perfetto.StartupTimingQuery INSTANCE> = $r0;

        return;
    }

androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1
<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1: androidx.benchmark.macro.perfetto.Slice $launchingSlice>
    void <init>(androidx.benchmark.macro.perfetto.Slice)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1 r0;
        androidx.benchmark.macro.perfetto.Slice $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1;

        $r1 := @parameter0: androidx.benchmark.macro.perfetto.Slice;

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1: androidx.benchmark.macro.perfetto.Slice $launchingSlice> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1 r0;
        androidx.benchmark.macro.perfetto.Slice r1, $r2;
        long $l0, $l1;
        byte $b2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1;

        r1 := @parameter0: androidx.benchmark.macro.perfetto.Slice;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "uiSlice");

        $l0 = virtualinvoke r1.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $r2 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1: androidx.benchmark.macro.perfetto.Slice $launchingSlice>;

        $l1 = virtualinvoke $r2.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1 r0;
        java.lang.Object r1;
        androidx.benchmark.macro.perfetto.Slice $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.benchmark.macro.perfetto.Slice) r1;

        $r3 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$1: java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)>($r2);

        return $r3;
    }

androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2
<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2: long $startTs>
    void <init>(long)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2 r0;
        long $l0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2;

        $l0 := @parameter0: long;

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2: long $startTs> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2 r0;
        androidx.benchmark.macro.perfetto.Slice r1;
        long $l0, $l1;
        byte $b2;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2;

        r1 := @parameter0: androidx.benchmark.macro.perfetto.Slice;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "uiSlice");

        $l0 = virtualinvoke r1.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $l1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2: long $startTs>;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2 r0;
        java.lang.Object r1;
        androidx.benchmark.macro.perfetto.Slice $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.benchmark.macro.perfetto.Slice) r1;

        $r3 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$2: java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)>($r2);

        return $r3;
    }

androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1
<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1: androidx.benchmark.macro.perfetto.Slice $reportFullyDrawnSlice>
    void <init>(androidx.benchmark.macro.perfetto.Slice)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1 r0;
        androidx.benchmark.macro.perfetto.Slice $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1;

        $r1 := @parameter0: androidx.benchmark.macro.perfetto.Slice;

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1: androidx.benchmark.macro.perfetto.Slice $reportFullyDrawnSlice> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1 r0;
        androidx.benchmark.macro.perfetto.Slice r1, $r2;
        long $l0, $l1;
        byte $b2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1;

        r1 := @parameter0: androidx.benchmark.macro.perfetto.Slice;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "uiSlice");

        $l0 = virtualinvoke r1.<androidx.benchmark.macro.perfetto.Slice: long getEndTs()>();

        $r2 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1: androidx.benchmark.macro.perfetto.Slice $reportFullyDrawnSlice>;

        $l1 = virtualinvoke $r2.<androidx.benchmark.macro.perfetto.Slice: long getTs()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1 r0;
        java.lang.Object r1;
        androidx.benchmark.macro.perfetto.Slice $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.benchmark.macro.perfetto.Slice) r1;

        $r3 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$getFrameSubMetrics$reportFullyDrawnEndTs$1$1: java.lang.Boolean invoke(androidx.benchmark.macro.perfetto.Slice)>($r2);

        return $r3;
    }

androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType StartActivityAndWait>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType NotifyStarted>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType Launching>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ReportFullyDrawn>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameUiThread>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameRenderThread>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ActivityResume>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] values()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[]) $r1;

        return $r2;
    }

    public static androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/benchmark/macro/perfetto/StartupTimingQuery$StartupSliceType;", r0);

        $r2 = (androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType) $r1;

        return $r2;
    }

    private static final androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $values()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] r0;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 = newarray (androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType)[7];

        $r1 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType StartActivityAndWait>;

        r0[0] = $r1;

        $r2 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType NotifyStarted>;

        r0[1] = $r2;

        $r3 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType Launching>;

        r0[2] = $r3;

        $r4 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ReportFullyDrawn>;

        r0[3] = $r4;

        $r5 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameUiThread>;

        r0[4] = $r5;

        $r6 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameRenderThread>;

        r0[5] = $r6;

        $r7 = <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ActivityResume>;

        r0[6] = $r7;

        return r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $r7;

        $r0 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("StartActivityAndWait", 0);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType StartActivityAndWait> = $r0;

        $r1 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r1.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("NotifyStarted", 1);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType NotifyStarted> = $r1;

        $r2 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r2.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("Launching", 2);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType Launching> = $r2;

        $r3 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r3.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("ReportFullyDrawn", 3);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ReportFullyDrawn> = $r3;

        $r4 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r4.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("FrameUiThread", 4);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameUiThread> = $r4;

        $r5 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r5.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("FrameRenderThread", 5);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType FrameRenderThread> = $r5;

        $r6 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType;

        specialinvoke $r6.<androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: void <init>(java.lang.String,int)>("ActivityResume", 6);

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType ActivityResume> = $r6;

        $r7 = staticinvoke <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $values()>();

        <androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType: androidx.benchmark.macro.perfetto.StartupTimingQuery$StartupSliceType[] $VALUES> = $r7;

        return;
    }

androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics
<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>
<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>
    public void <init>(long, java.lang.Long, kotlin.ranges.LongRange)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        long l0;
        java.lang.Long r1;
        kotlin.ranges.LongRange r2;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Long;

        r2 := @parameter2: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "timelineRangeNs");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs> = l0;

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs> = r1;

        r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs> = r2;

        return;
    }

    public final long getTimeToInitialDisplayNs()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        long $l0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $l0 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        return $l0;
    }

    public final java.lang.Long getTimeToFullDisplayNs()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        java.lang.Long $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $r1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        return $r1;
    }

    public final kotlin.ranges.LongRange getTimelineRangeNs()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        kotlin.ranges.LongRange $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $r1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        return $r1;
    }

    public void <init>(long, long, java.lang.Long)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0, r2, $r6;
        long l0, l1, l2, l3, $l4, $l5, $l6, $l8;
        java.lang.Long r1, r3, $r7;
        java.lang.Number $r4;
        kotlin.ranges.LongRange $r8;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.Long;

        $r6 = r0;

        $l4 = l1 - l0;

        $l6 = $l4;

        if r1 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r4 = (java.lang.Number) r1;

        l2 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        l3 = $l4;

        r2 = r0;

        $l5 = l2 - l0;

        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r6 = r2;

        $l6 = l3;

        $r7 = r3;

     label2:
        $r8 = new kotlin.ranges.LongRange;

        if r1 != null goto label3;

        $l8 = l1;

        goto label4;

     label3:
        $l8 = virtualinvoke r1.<java.lang.Long: long longValue()>();

     label4:
        specialinvoke $r8.<kotlin.ranges.LongRange: void <init>(long,long)>(l0, $l8);

        specialinvoke $r6.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: void <init>(long,java.lang.Long,kotlin.ranges.LongRange)>($l6, $r7, $r8);

        return;
    }

    public final long component1()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        long $l0;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $l0 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        return $l0;
    }

    public final java.lang.Long component2()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        java.lang.Long $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $r1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        return $r1;
    }

    public final kotlin.ranges.LongRange component3()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        kotlin.ranges.LongRange $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $r1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        return $r1;
    }

    public final androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics copy(long, java.lang.Long, kotlin.ranges.LongRange)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0, $r3;
        long l0;
        java.lang.Long r1;
        kotlin.ranges.LongRange r2;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Long;

        r2 := @parameter2: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "timelineRangeNs");

        $r3 = new androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        specialinvoke $r3.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: void <init>(long,java.lang.Long,kotlin.ranges.LongRange)>(l0, r1, r2);

        return $r3;
    }

    public static androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics copy$default(androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics, long, java.lang.Long, kotlin.ranges.LongRange, int, java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0, $r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        long l4;
        java.lang.Long r3;
        kotlin.ranges.LongRange r4;

        r0 := @parameter0: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        l4 := @parameter1: long;

        r3 := @parameter2: java.lang.Long;

        r4 := @parameter3: kotlin.ranges.LongRange;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        l4 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r3 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r4 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

     label3:
        $r2 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics copy(long,java.lang.Long,kotlin.ranges.LongRange)>(l4, r3, r4);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r9, $r10;
        long $l0;
        java.lang.Long $r5;
        kotlin.ranges.LongRange $r8;
        java.lang.String $r11;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SubMetrics(timeToInitialDisplayNs=");

        $l0 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeToFullDisplayNs=");

        $r5 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timelineRangeNs=");

        $r8 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public int hashCode()
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0;
        long $l0;
        java.lang.Long $r1, $r2;
        int $i1, $i2, $i3, i4, $i5, i6, i7;
        kotlin.ranges.LongRange $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        $l0 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        i4 = staticinvoke <java.lang.Long: int hashCode(long)>($l0);

        $i1 = i4 * 31;

        $r1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        if $r1 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r2 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        $i5 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        i6 = $i1 + $i5;

        $i2 = i6 * 31;

        $r3 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        $i3 = virtualinvoke $r3.<kotlin.ranges.LongRange: int hashCode()>();

        i7 = $i2 + $i3;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r3, $r4;
        kotlin.ranges.LongRange $r5, $r6;

        r0 := @this: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics) r1;

        $l1 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        $l0 = r2.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long timeToInitialDisplayNs>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        $r3 = r2.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long timeToFullDisplayNs>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r6 = r0.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        $r5 = r2.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange timelineRangeNs>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

