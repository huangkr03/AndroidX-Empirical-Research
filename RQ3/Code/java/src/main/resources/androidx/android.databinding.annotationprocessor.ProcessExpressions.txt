android.databinding.annotationprocessor.ProcessExpressions
    public void <init>()
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessDataBinding$ProcessingStep: void <init>()>();

        return;
    }

    public boolean onHandleStep(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs) throws javax.xml.bind.JAXBException
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.DataBindingCompilerArgs r3;
        android.databinding.tool.store.ResourceBundle $r4, r24;
        java.lang.String $r5, $r6, $r9, $r17;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;
        java.io.File $r8;
        android.databinding.annotationprocessor.ProcessExpressionsFromV1Compat $r10;
        java.util.List $r11, r28;
        android.databinding.tool.writer.JavaFileWriter $r12;
        java.lang.Throwable $r13, $r18, $r20, $r22, $r23, r27, r31, r32, r34, r35;
        android.databinding.tool.store.GenClassInfoLog $r14, r25;
        android.databinding.tool.processing.ScopedException $r15;
        java.lang.Object[] $r16, $r19, $r21;
        android.databinding.tool.CompilerChef r26;
        java.util.Iterator r29;
        android.databinding.annotationprocessor.ProcessExpressions$Intermediate r30;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r33;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.DataBindingCompilerArgs;

     label01:
        $r4 = new android.databinding.tool.store.ResourceBundle;

        $r5 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        specialinvoke $r4.<android.databinding.tool.store.ResourceBundle: void <init>(java.lang.String)>($r5);

        r24 = $r4;

        r25 = null;

        r26 = null;

        $z0 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        if $z0 == 0 goto label06;

     label02:
        $r8 = new java.io.File;

        $r9 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getClassLogDir()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);

        r25 = staticinvoke <android.databinding.tool.store.ResourceBundle: android.databinding.tool.store.GenClassInfoLog loadClassInfoFromFolder(java.io.File)>($r8);

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        r27 = $r13;

        $r14 = new android.databinding.tool.store.GenClassInfoLog;

        specialinvoke $r14.<android.databinding.tool.store.GenClassInfoLog: void <init>()>();

        r25 = $r14;

        $r15 = new android.databinding.tool.processing.ScopedException;

        $r16 = newarray (java.lang.Object)[1];

        $r17 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getClassLogDir()>();

        $r16[0] = $r17;

        specialinvoke $r15.<android.databinding.tool.processing.ScopedException: void <init>(java.lang.String,java.lang.Object[])>("cannot load the info log from %s", $r16);

        staticinvoke <android.databinding.tool.processing.Scope: void defer(android.databinding.tool.processing.ScopedException)>($r15);

     label05:
        virtualinvoke r24.<android.databinding.tool.store.ResourceBundle: void addDependencyLayouts(android.databinding.tool.store.GenClassInfoLog)>(r25);

        r28 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r10 = new android.databinding.annotationprocessor.ProcessExpressionsFromV1Compat;

        $r11 = specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: java.util.List loadDependencyIntermediates()>();

        $r12 = virtualinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: android.databinding.tool.writer.JavaFileWriter getWriter()>();

        specialinvoke $r10.<android.databinding.annotationprocessor.ProcessExpressionsFromV1Compat: void <init>(javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.DataBindingCompilerArgs,java.util.List,android.databinding.tool.writer.JavaFileWriter)>(r2, r3, $r11, $r12);

        r26 = virtualinvoke $r10.<android.databinding.annotationprocessor.ProcessExpressionsFromV1Compat: android.databinding.tool.CompilerChef generate()>();

        goto label14;

     label06:
        r28 = specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: java.util.List loadDependencyIntermediates()>();

        r29 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r7 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (android.databinding.annotationprocessor.ProcessExpressions$Intermediate) $r7;

     label08:
        interfaceinvoke r30.<android.databinding.annotationprocessor.ProcessExpressions$Intermediate: void appendTo(android.databinding.tool.store.ResourceBundle,boolean)>(r24, 0);

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        r31 = $r20;

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r31, "unable to prepare resource bundle", $r21);

     label11:
        goto label13;

     label12:
        $r22 := @caughtexception;

        r32 = $r22;

     label13:
        goto label07;

     label14:
        $r6 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getXmlOutDir()>();

        r33 = specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 createIntermediateFromLayouts(java.lang.String,java.util.List)>($r6, r28);

        if r33 == null goto label16;

        $z2 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        if $z2 != 0 goto label15;

        virtualinvoke r33.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void updateOverridden(android.databinding.tool.store.ResourceBundle)>(r24);

        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>(r33);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: void saveIntermediate(javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.DataBindingCompilerArgs,android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2)>(r2, r3, r33);

     label15:
        virtualinvoke r33.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void appendTo(android.databinding.tool.store.ResourceBundle,boolean)>(r24, 1);

     label16:
        specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: void writeResourceBundle(android.databinding.tool.store.ResourceBundle,android.databinding.tool.DataBindingCompilerArgs,android.databinding.tool.store.GenClassInfoLog,android.databinding.tool.CompilerChef)>(r24, r3, r25, r26);

     label17:
        goto label19;

     label18:
        $r18 := @caughtexception;

        r34 = $r18;

        $r19 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r34, "cannot generate view binders", $r19);

     label19:
        goto label21;

     label20:
        $r23 := @caughtexception;

        r35 = $r23;

     label21:
        return 1;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch android.databinding.tool.util.LoggedErrorException from label08 to label11 with label12;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch android.databinding.tool.util.LoggedErrorException from label01 to label19 with label20;
    }

    private java.util.List loadDependencyIntermediates()
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        java.util.List r1;
        java.util.ArrayList r2, $r8;
        java.util.Iterator r3;
        android.databinding.annotationprocessor.ProcessExpressions$Intermediate r4, r5;
        android.databinding.tool.util.GenerationalClassUtil $r6;
        android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter $r7;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r9;
        java.lang.Object[] $r10;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 $r11;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        $r6 = staticinvoke <android.databinding.tool.util.GenerationalClassUtil: android.databinding.tool.util.GenerationalClassUtil get()>();

        $r7 = <android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter: android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter LAYOUT>;

        r1 = virtualinvoke $r6.<android.databinding.tool.util.GenerationalClassUtil: java.util.List loadObjects(android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter)>($r7);

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r8;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.databinding.annotationprocessor.ProcessExpressions$Intermediate) $r9;

        r5 = interfaceinvoke r4.<android.databinding.annotationprocessor.ProcessExpressions$Intermediate: android.databinding.annotationprocessor.ProcessExpressions$Intermediate upgrade()>();

        $z1 = r5 instanceof android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>($z1, "Incompatible data binding dependency. Please update your dependencies or recompile them with application module\'s data binding version.", $r10);

        $r11 = (android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2) r5;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return r2;
    }

    private void saveIntermediate(javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs, android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2)
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        android.databinding.tool.DataBindingCompilerArgs r2;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r3;
        android.databinding.tool.util.GenerationalClassUtil $r4;
        java.lang.String $r5, $r7, $r10, $r12;
        java.lang.StringBuilder $r6, $r8, $r11;
        android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter $r9;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter1: android.databinding.tool.DataBindingCompilerArgs;

        r3 := @parameter2: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        $r4 = staticinvoke <android.databinding.tool.util.GenerationalClassUtil: android.databinding.tool.util.GenerationalClassUtil get()>();

        $r5 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = <android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter: android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter LAYOUT>;

        $r10 = virtualinvoke $r9.<android.databinding.tool.util.GenerationalClassUtil$ExtensionFilter: java.lang.String getExtension()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<android.databinding.tool.util.GenerationalClassUtil: void writeIntermediateFile(java.lang.String,java.lang.String,java.io.Serializable)>($r5, $r12, r3);

        return;
    }

    public void onProcessingOver(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs)
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.DataBindingCompilerArgs r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.DataBindingCompilerArgs;

        return;
    }

    private android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 createIntermediateFromLayouts(java.lang.String, java.util.List)
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        java.lang.String r1, $r9, $r10;
        java.util.List r2;
        java.util.HashSet r3, $r4;
        boolean $z0, $z1;
        java.io.File $r5, r21, r24, r27;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 $r6, r20, r22;
        android.databinding.annotationprocessor.ProcessExpressions$1 $r7;
        android.databinding.annotationprocessor.ProcessExpressions$2 $r8;
        java.lang.Object[] $r11, $r16, $r18;
        java.lang.Object $r12;
        java.util.Map $r13;
        java.util.Set $r14;
        java.lang.Throwable $r15, $r17, r25, r28;
        java.util.Iterator r19;
        java.io.File[] r23, r26;
        int i0, i1, i2, i3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r3 = $r4;

        r19 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r12 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2) $r12;

        $r13 = r20.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: java.util.Map mLayoutInfoMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        goto label01;

     label02:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1);

        r21 = $r5;

        $z1 = virtualinvoke r21.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label03;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("layout info folder does not exist, skipping for %s", $r11);

        return null;

     label03:
        $r6 = new android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        specialinvoke $r6.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void <init>()>();

        r22 = $r6;

        $r7 = new android.databinding.annotationprocessor.ProcessExpressions$1;

        specialinvoke $r7.<android.databinding.annotationprocessor.ProcessExpressions$1: void <init>(android.databinding.annotationprocessor.ProcessExpressions,java.util.Set)>(r0, r3);

        r23 = virtualinvoke r21.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r7);

        i0 = lengthof r23;

        i1 = 0;

     label04:
        if i1 >= i0 goto label09;

        r24 = r23[i1];

     label05:
        $r9 = virtualinvoke r24.<java.io.File: java.lang.String getName()>();

        $r10 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r24);

        virtualinvoke r22.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void addEntry(java.lang.String,java.lang.String)>($r9, $r10);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        r25 = $r17;

        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r25, "cannot load layout file information. Try a clean build", $r18);

     label08:
        i1 = i1 + 1;

        goto label04;

     label09:
        $r8 = new android.databinding.annotationprocessor.ProcessExpressions$2;

        specialinvoke $r8.<android.databinding.annotationprocessor.ProcessExpressions$2: void <init>(android.databinding.annotationprocessor.ProcessExpressions)>(r0);

        r26 = virtualinvoke r21.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r8);

        i2 = lengthof r26;

        i3 = 0;

     label10:
        if i3 >= i2 goto label15;

        r27 = r26[i3];

     label11:
        specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: void loadLayoutInfoFromZipFile(java.io.File,android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2,java.util.Set)>(r27, r22, r3);

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        r28 = $r15;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r27;

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r28, "error while reading layout zip file %s", $r16);

     label14:
        i3 = i3 + 1;

        goto label10;

     label15:
        return r22;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private void loadLayoutInfoFromZipFile(java.io.File, android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2, java.util.Set) throws java.io.IOException
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        java.io.File r1;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r2;
        java.util.Set r3;
        java.util.zip.ZipFile r4, $r8;
        java.util.Enumeration r5;
        java.util.zip.ZipEntry r6;
        java.lang.Throwable r7, $r15;
        java.lang.Object $r9;
        java.lang.String $r10, $r11, $r14;
        boolean $z0, $z1;
        java.io.InputStream $r12;
        java.nio.charset.Charset $r13;
        java.lang.Object[] $r16;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        r3 := @parameter2: java.util.Set;

        $r8 = new java.util.zip.ZipFile;

        specialinvoke $r8.<java.util.zip.ZipFile: void <init>(java.io.File)>(r1);

        r4 = $r8;

        r5 = virtualinvoke r4.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.util.zip.ZipEntry) $r9;

        $r10 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r11 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r12 = virtualinvoke r4.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r6);

        $r13 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_16>;

        $r14 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>($r12, $r13);

        virtualinvoke r2.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void addEntry(java.lang.String,java.lang.String)>($r11, $r14);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        r7 = $r15;

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r7, "cannot load layout file information. Try a clean build", $r16);

     label5:
        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private void writeResourceBundle(android.databinding.tool.store.ResourceBundle, android.databinding.tool.DataBindingCompilerArgs, android.databinding.tool.store.GenClassInfoLog, android.databinding.tool.CompilerChef)
    {
        android.databinding.annotationprocessor.ProcessExpressions r0;
        android.databinding.tool.store.ResourceBundle r1;
        android.databinding.tool.DataBindingCompilerArgs r2;
        android.databinding.tool.store.GenClassInfoLog r3;
        android.databinding.tool.CompilerChef r4, r5;
        java.util.Set r6, $r16;
        java.lang.String r7, $r10, $r13, $r15, $r17;
        java.lang.Throwable r8, $r19;
        android.databinding.tool.writer.JavaFileWriter $r9;
        boolean $z0, $z1, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        com.google.common.base.Joiner $r11;
        java.lang.Object[] $r12, $r18, $r20;
        java.io.File $r14;
        int $i0;
        android.databinding.annotationprocessor.ProcessDataBinding$Callback $r22;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions;

        r1 := @parameter0: android.databinding.tool.store.ResourceBundle;

        r2 := @parameter1: android.databinding.tool.DataBindingCompilerArgs;

        r3 := @parameter2: android.databinding.tool.store.GenClassInfoLog;

        r4 := @parameter3: android.databinding.tool.CompilerChef;

        $r9 = virtualinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions: android.databinding.tool.writer.JavaFileWriter getWriter()>();

        r5 = staticinvoke <android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef createChef(android.databinding.tool.store.ResourceBundle,android.databinding.tool.writer.JavaFileWriter,android.databinding.tool.DataBindingCompilerArgs)>(r1, $r9, r2);

        virtualinvoke r5.<android.databinding.tool.CompilerChef: void setV1CompatChef(android.databinding.tool.CompilerChef)>(r4);

        virtualinvoke r5.<android.databinding.tool.CompilerChef: void sealModels()>();

        $z0 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isLibrary()>();

        if $z0 != 0 goto label01;

        $z11 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z11 != 0 goto label02;

        $z12 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isFeature()>();

        if $z12 != 0 goto label02;

     label01:
        virtualinvoke r5.<android.databinding.tool.CompilerChef: void writeComponent()>();

     label02:
        $z13 = virtualinvoke r5.<android.databinding.tool.CompilerChef: boolean hasAnythingToGenerate()>();

        if $z13 == 0 goto label08;

        $z5 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        if $z5 != 0 goto label05;

        $z9 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isLibrary()>();

        if $z9 == 0 goto label03;

        $z10 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z10 != 0 goto label03;

        $z14 = 1;

        goto label04;

     label03:
        $z14 = 0;

     label04:
        virtualinvoke r5.<android.databinding.tool.CompilerChef: void writeViewBinderInterfaces(boolean)>($z14);

     label05:
        $z15 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isApp()>();

        $z16 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z15 != $z16 goto label07;

        $z6 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnabledForTests()>();

        if $z6 == 0 goto label06;

        $z8 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isLibrary()>();

        if $z8 == 0 goto label07;

     label06:
        $z7 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        if $z7 == 0 goto label08;

     label07:
        $i0 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: int getMinApi()>();

        virtualinvoke r5.<android.databinding.tool.CompilerChef: void writeViewBinders(int)>($i0);

     label08:
        $z17 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isLibrary()>();

        if $z17 == 0 goto label09;

        $z4 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z4 != 0 goto label09;

        $r17 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getExportClassListTo()>();

        if $r17 != null goto label09;

        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.String,java.lang.Object[])>("When compiling a library module, build info must include exportClassListTo path", $r18);

     label09:
        $z18 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isLibrary()>();

        if $z18 == 0 goto label14;

        $z1 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z1 != 0 goto label14;

        r6 = virtualinvoke r5.<android.databinding.tool.CompilerChef: java.util.Set getClassesToBeStripped()>();

        if r4 == null goto label10;

        $r16 = virtualinvoke r4.<android.databinding.tool.CompilerChef: java.util.Set getClassesToBeStripped()>();

        interfaceinvoke r6.<java.util.Set: boolean addAll(java.util.Collection)>($r16);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>("android.databinding.V1CompatDataBinderMapperImpl");

     label10:
        $r10 = <android.databinding.tool.util.StringUtils: java.lang.String LINE_SEPARATOR>;

        $r11 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>($r10);

        r7 = virtualinvoke $r11.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>(r6);

        $r12 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getExportClassListTo()>();

        $r12[0] = $r13;

        $r12[1] = r7;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("Writing list of classes to %s . \nList:%s", $r12);

     label11:
        $r14 = new java.io.File;

        $r15 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getExportClassListTo()>();

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15);

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>($r14, r7);

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        r8 = $r19;

        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r8, "Cannot create list of written classes", $r20);

     label14:
        $r22 = r0.<android.databinding.annotationprocessor.ProcessExpressions: android.databinding.annotationprocessor.ProcessDataBinding$Callback mCallback>;

        interfaceinvoke $r22.<android.databinding.annotationprocessor.ProcessDataBinding$Callback: void onChefReady(android.databinding.tool.CompilerChef,android.databinding.tool.store.GenClassInfoLog)>(r5, r3);

        return;

        catch java.io.IOException from label11 to label12 with label13;
    }

android.databinding.annotationprocessor.ProcessExpressions$1
<android.databinding.annotationprocessor.ProcessExpressions$1: java.util.Set val$excludeList>
<android.databinding.annotationprocessor.ProcessExpressions$1: android.databinding.annotationprocessor.ProcessExpressions this$0>
    void <init>(android.databinding.annotationprocessor.ProcessExpressions, java.util.Set)
    {
        android.databinding.annotationprocessor.ProcessExpressions$1 r0;
        android.databinding.annotationprocessor.ProcessExpressions r1;
        java.util.Set r2;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$1;

        r1 := @parameter0: android.databinding.annotationprocessor.ProcessExpressions;

        r2 := @parameter1: java.util.Set;

        r0.<android.databinding.annotationprocessor.ProcessExpressions$1: android.databinding.annotationprocessor.ProcessExpressions this$0> = r1;

        r0.<android.databinding.annotationprocessor.ProcessExpressions$1: java.util.Set val$excludeList> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(java.io.File, java.lang.String)
    {
        android.databinding.annotationprocessor.ProcessExpressions$1 r0;
        java.io.File r1;
        java.lang.String r2;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label1;

        $r3 = r0.<android.databinding.annotationprocessor.ProcessExpressions$1: java.util.Set val$excludeList>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

android.databinding.annotationprocessor.ProcessExpressions$2
<android.databinding.annotationprocessor.ProcessExpressions$2: android.databinding.annotationprocessor.ProcessExpressions this$0>
    void <init>(android.databinding.annotationprocessor.ProcessExpressions)
    {
        android.databinding.annotationprocessor.ProcessExpressions$2 r0;
        android.databinding.annotationprocessor.ProcessExpressions r1;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$2;

        r1 := @parameter0: android.databinding.annotationprocessor.ProcessExpressions;

        r0.<android.databinding.annotationprocessor.ProcessExpressions$2: android.databinding.annotationprocessor.ProcessExpressions this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(java.io.File, java.lang.String)
    {
        android.databinding.annotationprocessor.ProcessExpressions$2 r0;
        java.io.File r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$2;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        return $z0;
    }

android.databinding.annotationprocessor.ProcessExpressions$Intermediate
<android.databinding.annotationprocessor.ProcessExpressions$Intermediate: android.databinding.annotationprocessor.ProcessExpressions$Intermediate upgrade()>
<android.databinding.annotationprocessor.ProcessExpressions$Intermediate: void appendTo(android.databinding.tool.store.ResourceBundle,boolean)>
android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1
<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.Map mLayoutInfoMap>
    public void <init>()
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        java.util.HashMap $r1;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.Map mLayoutInfoMap> = $r1;

        return;
    }

    public android.databinding.annotationprocessor.ProcessExpressions$Intermediate upgrade()
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r1, $r2;
        java.util.Map $r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        $r2 = new android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        specialinvoke $r2.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: void <init>()>();

        r1 = $r2;

        $r3 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.Map mLayoutInfoMap>;

        r1.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: java.util.Map mLayoutInfoMap> = $r3;

        return r1;
    }

    public void appendTo(android.databinding.tool.store.ResourceBundle, boolean) throws javax.xml.bind.JAXBException
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        android.databinding.tool.store.ResourceBundle r1;
        boolean z0;
        java.util.List $r2;
        java.util.function.Consumer $r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        r1 := @parameter0: android.databinding.tool.store.ResourceBundle;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.List extractBundles()>();

        $r3 = dynamicinvoke "accept" <java.util.function.Consumer (android.databinding.tool.store.ResourceBundle,boolean)>(r1, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: void lambda$appendTo$0(android.databinding.tool.store.ResourceBundle,boolean,android.databinding.tool.store.ResourceBundle$LayoutFileBundle)>, methodtype: void __METHODTYPE__(android.databinding.tool.store.ResourceBundle$LayoutFileBundle));

        interfaceinvoke $r2.<java.util.List: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    public java.util.List extractBundles() throws javax.xml.bind.JAXBException
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        java.util.ArrayList r1, $r7;
        java.util.Iterator r2;
        java.lang.String r3;
        java.io.InputStream r4;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r5;
        java.lang.Throwable r6, $r12;
        java.util.Map $r8;
        java.util.Collection $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Object[] $r11;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1 = $r7;

        $r8 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.Map mLayoutInfoMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r10;

        r4 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)>(r3);

     label2:
        r5 = staticinvoke <android.databinding.tool.store.ResourceBundle$LayoutFileBundle: android.databinding.tool.store.ResourceBundle$LayoutFileBundle fromXML(java.io.InputStream)>(r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r5;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("loaded layout info file %s", $r11);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        goto label6;

     label4:
        $r12 := @caughtexception;

        r6 = $r12;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        throw r6;

     label6:
        goto label1;

     label7:
        return r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addEntry(java.lang.String, java.lang.String)
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: java.util.Map mLayoutInfoMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeOverridden(java.util.List)
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1 r0;
        java.util.List r1;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1;

        r1 := @parameter0: java.util.List;

        return;
    }

    private static void lambda$appendTo$0(android.databinding.tool.store.ResourceBundle, boolean, android.databinding.tool.store.ResourceBundle$LayoutFileBundle)
    {
        android.databinding.tool.store.ResourceBundle r0;
        boolean z0;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r1;

        r0 := @parameter0: android.databinding.tool.store.ResourceBundle;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.databinding.tool.store.ResourceBundle$LayoutFileBundle;

        virtualinvoke r0.<android.databinding.tool.store.ResourceBundle: void addLayoutBundle(android.databinding.tool.store.ResourceBundle$LayoutFileBundle,boolean)>(r1, z0);

        return;
    }

android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2
<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: long serialVersionUID>
    public void <init>()
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r0;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV1: void <init>()>();

        return;
    }

    public void appendTo(android.databinding.tool.store.ResourceBundle, boolean) throws javax.xml.bind.JAXBException
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r0;
        android.databinding.tool.store.ResourceBundle r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.io.InputStream r4;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r5;
        java.lang.Throwable r6, $r13;
        java.util.Map $r7;
        java.util.Set $r8;
        java.lang.Object $r9, $r10;
        java.lang.String $r11;
        java.lang.Object[] $r12;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        r1 := @parameter0: android.databinding.tool.store.ResourceBundle;

        z0 := @parameter1: boolean;

        $r7 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: java.util.Map mLayoutInfoMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        r4 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)>($r11);

     label2:
        r5 = staticinvoke <android.databinding.tool.store.ResourceBundle$LayoutFileBundle: android.databinding.tool.store.ResourceBundle$LayoutFileBundle fromXML(java.io.InputStream)>(r4);

        virtualinvoke r1.<android.databinding.tool.store.ResourceBundle: void addLayoutBundle(android.databinding.tool.store.ResourceBundle$LayoutFileBundle,boolean)>(r5, z0);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r5;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("loaded layout info file %s", $r12);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        goto label6;

     label4:
        $r13 := @caughtexception;

        r6 = $r13;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        throw r6;

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void updateOverridden(android.databinding.tool.store.ResourceBundle) throws javax.xml.bind.JAXBException
    {
        android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2 r0;
        android.databinding.tool.store.ResourceBundle r1;
        java.util.HashMap r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.String r5, $r13, $r16, $r23;
        java.util.List r6;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r7, r8;
        java.util.Map $r9, $r21;
        java.util.Set $r10;
        boolean $z0, $z1;
        java.lang.Object $r11, $r12, $r14, $r15, $r18, $r20, $r22;
        java.io.InputStream $r17;
        java.lang.Object[] $r19;

        r0 := @this: android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2;

        r1 := @parameter0: android.databinding.tool.store.ResourceBundle;

        r2 = virtualinvoke r1.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $r9 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: java.util.Map mLayoutInfoMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        r5 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String exportLayoutNameFromInfoFileName(java.lang.String)>($r13);

        $r14 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.util.List) $r14;

        if r6 == null goto label2;

        $z1 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.lang.String) $r15;

        $r17 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)>($r16);

        r7 = staticinvoke <android.databinding.tool.store.ResourceBundle$LayoutFileBundle: android.databinding.tool.store.ResourceBundle$LayoutFileBundle fromXML(java.io.InputStream)>($r17);

        $r18 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (android.databinding.tool.store.ResourceBundle$LayoutFileBundle) $r18;

        virtualinvoke r7.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: void inheritConfigurationFrom(android.databinding.tool.store.ResourceBundle$LayoutFileBundle)>(r8);

        $r19 = newarray (java.lang.Object)[3];

        $r20 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19[0] = $r20;

        $r19[1] = r5;

        $r19[2] = r8;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("inheriting data for %s (%s) from %s", $r19);

        $r21 = r0.<android.databinding.annotationprocessor.ProcessExpressions$IntermediateV2: java.util.Map mLayoutInfoMap>;

        $r22 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = virtualinvoke r7.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String toXML()>();

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

     label2:
        goto label1;

     label3:
        return;
    }

