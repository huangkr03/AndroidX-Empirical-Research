kotlin.sequences.DropSequence
<kotlin.sequences.DropSequence: int count>
<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>
    public void <init>(kotlin.sequences.Sequence, int)
    {
        kotlin.sequences.DropSequence $r0;
        kotlin.sequences.Sequence $r1;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: kotlin.sequences.DropSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence> = $r1;

        $r0.<kotlin.sequences.DropSequence: int count> = $i0;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count must be non-negative, but was ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final int access$getCount$p(kotlin.sequences.DropSequence)
    {
        kotlin.sequences.DropSequence $r0;
        int i0;

        $r0 := @parameter0: kotlin.sequences.DropSequence;

        i0 = $r0.<kotlin.sequences.DropSequence: int count>;

        return i0;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence)
    {
        kotlin.sequences.DropSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.DropSequence;

        r1 = $r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public kotlin.sequences.Sequence drop(int)
    {
        kotlin.sequences.DropSequence $r0, $r2;
        kotlin.sequences.Sequence $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.sequences.DropSequence;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.sequences.DropSequence: int count>;

        $i1 = $i1 + $i0;

        if $i1 >= 0 goto label1;

        $r2 = new kotlin.sequences.DropSequence;

        specialinvoke $r2.<kotlin.sequences.DropSequence: void <init>(kotlin.sequences.Sequence,int)>($r0, $i0);

        return $r2;

     label1:
        $r2 = new kotlin.sequences.DropSequence;

        $r1 = $r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        specialinvoke $r2.<kotlin.sequences.DropSequence: void <init>(kotlin.sequences.Sequence,int)>($r1, $i1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.DropSequence $r0;
        kotlin.sequences.DropSequence$iterator$1 $r1;

        $r0 := @this: kotlin.sequences.DropSequence;

        $r1 = new kotlin.sequences.DropSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.DropSequence$iterator$1: void <init>(kotlin.sequences.DropSequence)>($r0);

        return $r1;
    }

    public kotlin.sequences.Sequence take(int)
    {
        kotlin.sequences.DropSequence $r0;
        kotlin.sequences.Sequence $r1;
        int $i0, $i1;
        kotlin.sequences.TakeSequence $r2;
        kotlin.sequences.SubSequence $r3;

        $r0 := @this: kotlin.sequences.DropSequence;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.sequences.DropSequence: int count>;

        $i1 = $i1 + $i0;

        if $i1 >= 0 goto label1;

        $r2 = new kotlin.sequences.TakeSequence;

        specialinvoke $r2.<kotlin.sequences.TakeSequence: void <init>(kotlin.sequences.Sequence,int)>($r0, $i0);

        return $r2;

     label1:
        $r3 = new kotlin.sequences.SubSequence;

        $r1 = $r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        $i0 = $r0.<kotlin.sequences.DropSequence: int count>;

        specialinvoke $r3.<kotlin.sequences.SubSequence: void <init>(kotlin.sequences.Sequence,int,int)>($r1, $i0, $i1);

        return $r3;
    }

kotlin.sequences.DropSequence$iterator$1
<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>
<kotlin.sequences.DropSequence$iterator$1: int left>
    void <init>(kotlin.sequences.DropSequence)
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        kotlin.sequences.DropSequence $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;
        int $i0;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.DropSequence;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.DropSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator> = $r3;

        $i0 = staticinvoke <kotlin.sequences.DropSequence: int access$getCount$p(kotlin.sequences.DropSequence)>($r1);

        $r0.<kotlin.sequences.DropSequence$iterator$1: int left> = $i0;

        return;
    }

    private final void drop()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        boolean $z0;
        int $i0;
        java.util.Iterator $r1;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

     label1:
        $i0 = $r0.<kotlin.sequences.DropSequence$iterator$1: int left>;

        if $i0 <= 0 goto label2;

        $r1 = $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $r0.<kotlin.sequences.DropSequence$iterator$1: int left>;

        $i0 = $i0 + -1;

        $r0.<kotlin.sequences.DropSequence$iterator$1: int left> = $i0;

        goto label1;

     label2:
        return;
    }

    public final java.util.Iterator getIterator()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        java.util.Iterator r1;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public final int getLeft()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        i0 = $r0.<kotlin.sequences.DropSequence$iterator$1: int left>;

        return i0;
    }

    public boolean hasNext()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        boolean $z0;
        java.util.Iterator $r1;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        specialinvoke $r0.<kotlin.sequences.DropSequence$iterator$1: void drop()>();

        $r1 = $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        java.lang.Object $r1;
        java.util.Iterator $r2;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        specialinvoke $r0.<kotlin.sequences.DropSequence$iterator$1: void drop()>();

        $r2 = $r0.<kotlin.sequences.DropSequence$iterator$1: java.util.Iterator iterator>;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r1;
    }

    public void remove()
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setLeft(int)
    {
        kotlin.sequences.DropSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.sequences.DropSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.sequences.DropSequence$iterator$1: int left> = $i0;

        return;
    }

