io.grpc.internal.JsonUtil
<io.grpc.internal.JsonUtil: boolean $assertionsDisabled>
<io.grpc.internal.JsonUtil: long NANOS_PER_SECOND>
    static void <clinit>()
    {
        long $l0;
        java.util.concurrent.TimeUnit $r0;

        <io.grpc.internal.JsonUtil: boolean $assertionsDisabled> = 1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(1L);

        <io.grpc.internal.JsonUtil: long NANOS_PER_SECOND> = $l0;

        return;
    }

    public void <init>()
    {
        io.grpc.internal.JsonUtil $r0;

        $r0 := @this: io.grpc.internal.JsonUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List checkObjectList(java.util.List)
    {
        java.util.Locale $r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.ClassCastException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;

        $r1 := @parameter0: java.util.List;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = $r2 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.ClassCastException;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r4 = newarray (java.lang.Object)[3];

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4[0] = $r2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        $r4[2] = $r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "value %s for idx %d in %s is not object", $r4);

        specialinvoke $r3.<java.lang.ClassCastException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label3:
        return $r1;
    }

    public static java.util.List checkStringList(java.util.List)
    {
        java.util.Locale $r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.ClassCastException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;

        $r1 := @parameter0: java.util.List;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.ClassCastException;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r4 = newarray (java.lang.Object)[3];

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4[0] = $r2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        $r4[2] = $r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "value \'%s\' for idx %d in \'%s\' is not string", $r4);

        specialinvoke $r3.<java.lang.ClassCastException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label3:
        return $r1;
    }

    private static boolean durationIsValid(long, int)
    {
        int $i0;
        long $l1, $l3, $l4;
        byte $b2;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        $b2 = $l1 cmp -315576000000L;

        if $b2 < 0 goto label5;

        $b2 = $l1 cmp 315576000000L;

        if $b2 <= 0 goto label1;

        return 0;

     label1:
        $l3 = (long) $i0;

        $b2 = $l3 cmp -999999999L;

        if $b2 < 0 goto label5;

        $l4 = <io.grpc.internal.JsonUtil: long NANOS_PER_SECOND>;

        $b2 = $l3 cmp $l4;

        if $b2 < 0 goto label2;

        return 0;

     label2:
        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label3;

        if $i0 >= 0 goto label4;

     label3:
        $b2 = $l1 cmp 0L;

        if $b2 > 0 goto label5;

        if $i0 <= 0 goto label4;

        return 0;

     label4:
        return 1;

     label5:
        return 0;
    }

    public static java.lang.Boolean getBoolean(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        java.lang.ClassCastException $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.Boolean;

        if $z0 == 0 goto label4;

        $r4 = (java.lang.Boolean) $r3;

        return $r4;

     label4:
        $r5 = new java.lang.ClassCastException;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = $r3;

        $r6[1] = $r1;

        $r6[2] = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' in \'%s\' is not Boolean", $r6);

        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        throw $r5;
    }

    public static java.util.List getList(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.util.List $r4;
        java.lang.ClassCastException $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r4 = (java.util.List) $r3;

        return $r4;

     label4:
        $r5 = new java.lang.ClassCastException;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = $r3;

        $r6[1] = $r1;

        $r6[2] = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' in \'%s\' is not List", $r6);

        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        throw $r5;
    }

    public static java.util.List getListOfObjects(java.util.Map, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.util.List $r2;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List getList(java.util.Map,java.lang.String)>($r1, $r0);

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List checkObjectList(java.util.List)>($r2);

        return $r2;
    }

    public static java.util.List getListOfStrings(java.util.Map, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.util.List $r2;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List getList(java.util.Map,java.lang.String)>($r1, $r0);

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List checkStringList(java.util.List)>($r2);

        return $r2;
    }

    public static java.lang.Double getNumberAsDouble(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.lang.Double $r4;
        double $d0;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.Double;

        if $z0 == 0 goto label4;

        $r4 = (java.lang.Double) $r3;

        return $r4;

     label4:
        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label5;

        $r1 = (java.lang.String) $r3;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r4;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = $r3;

        $r6[1] = $r1;

        $r6[2] = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' in \'%s\' is not a number", $r6);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;
    }

    public static java.lang.Integer getNumberAsInteger(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.lang.Double $r4;
        int $i0;
        double $d0, $d1;
        byte $b1;
        java.lang.Integer $r5;
        java.lang.ClassCastException $r6;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object[] $r9;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.Double;

        if $z0 == 0 goto label5;

        $r4 = (java.lang.Double) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Double: int intValue()>();

        $d0 = (double) $i0;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b1 = $d0 cmpl $d1;

        if $b1 != 0 goto label4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label4:
        $r6 = new java.lang.ClassCastException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number expected to be integer: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label5:
        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label6;

        $r1 = (java.lang.String) $r3;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r3;

        $r9[1] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' is not an integer", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r8;
    }

    public static java.util.Map getObject(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.lang.ClassCastException $r4;
        java.lang.Object[] $r5;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        $r0 = (java.util.Map) $r3;

        return $r0;

     label4:
        $r4 = new java.lang.ClassCastException;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r3;

        $r5[1] = $r1;

        $r5[2] = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' in \'%s\' is not object", $r5);

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    public static java.lang.String getString(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3;
        java.lang.ClassCastException $r4;
        java.lang.Object[] $r5;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $z0 = <io.grpc.internal.JsonUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        $r1 = (java.lang.String) $r3;

        return $r1;

     label4:
        $r4 = new java.lang.ClassCastException;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r3;

        $r5[1] = $r1;

        $r5[2] = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("value \'%s\' for key \'%s\' in \'%s\' is not String", $r5);

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    public static java.lang.Long getStringAsDuration(java.util.Map, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        long $l0;
        java.lang.Long $r2;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $r1 = staticinvoke <io.grpc.internal.JsonUtil: java.lang.String getString(java.util.Map,java.lang.String)>($r0, $r1);

        if $r1 != null goto label1;

        return null;

     label1:
        $l0 = staticinvoke <io.grpc.internal.JsonUtil: long parseDuration(java.lang.String)>($r1);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    private static long normalizedDuration(long, int)
    {
        long $l0, $l2, $l4, $l5;
        byte $b1;
        int $i3;
        boolean $z0;
        java.util.concurrent.TimeUnit $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;

        $l2 := @parameter0: long;

        $i3 := @parameter1: int;

        $l4 = (long) $i3;

        $l0 = <io.grpc.internal.JsonUtil: long NANOS_PER_SECOND>;

        $l5 = neg $l0;

        $b1 = $l4 cmp $l5;

        if $b1 <= 0 goto label2;

        $b1 = $l4 cmp $l0;

        if $b1 < 0 goto label1;

        goto label2;

     label1:
        goto label3;

     label2:
        $l5 = $l4 / $l0;

        $l2 = staticinvoke <com.google.common.math.LongMath: long checkedAdd(long,long)>($l2, $l5);

        $l4 = $l4 % $l0;

        $i3 = (int) $l4;

     label3:
        $b1 = $l2 cmp 0L;

        if $b1 <= 0 goto label4;

        if $i3 >= 0 goto label4;

        $l4 = (long) $i3;

        $l4 = $l4 + $l0;

        $i3 = (int) $l4;

        $l2 = $l2 + -1L;

        goto label4;

     label4:
        $b1 = $l2 cmp 0L;

        if $b1 >= 0 goto label5;

        if $i3 <= 0 goto label5;

        $l4 = (long) $i3;

        $l0 = $l4 - $l0;

        $i3 = (int) $l0;

        $l2 = $l2 + 1L;

     label5:
        $z0 = staticinvoke <io.grpc.internal.JsonUtil: boolean durationIsValid(long,int)>($l2, $i3);

        if $z0 == 0 goto label6;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>($l2);

        $l0 = (long) $i3;

        $l2 = staticinvoke <io.grpc.internal.JsonUtil: long saturatedAdd(long,long)>($l2, $l0);

        return $l2;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Duration is not valid. See proto definition for valid values. Seconds (%s) must be in range [-315,576,000,000, +315,576,000,000]. Nanos (%s) must be in range [-999,999,999, +999,999,999]. Nanos must have the same sign as seconds", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private static long parseDuration(java.lang.String) throws java.text.ParseException
    {
        byte $b0;
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i1, $i3;
        char $c2;
        long $l4, $l5;
        java.text.ParseException $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 115 goto label9;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 45 goto label1;

        $z0 = 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r2 = $r1;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        if $i1 == -1 goto label3;

        $i3 = $i1 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label4;

     label3:
        $r3 = "";

     label4:
        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $l5 = $l4;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        $i1 = 0;

        goto label6;

     label5:
        $i1 = staticinvoke <io.grpc.internal.JsonUtil: int parseNanos(java.lang.String)>($r3);

     label6:
        $b0 = $l4 cmp 0L;

        if $b0 < 0 goto label8;

        if $z0 == 0 goto label7;

        $l5 = neg $l4;

        $i1 = neg $i1;

     label7:
        $l4 = staticinvoke <io.grpc.internal.JsonUtil: long normalizedDuration(long,int)>($l5, $i1);

        return $l4;

     label8:
        $r4 = new java.text.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid duration string: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>($r0, 0);

        throw $r4;

     label9:
        $r4 = new java.text.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid duration string: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>($r0, 0);

        throw $r4;
    }

    private static int parseNanos(java.lang.String) throws java.text.ParseException
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        char $c3;
        java.text.ParseException $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

        $i1 = 0;

     label1:
        if $i0 >= 9 goto label4;

        $i1 = $i1 * 10;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label3;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 < 48 goto label2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 > 57 goto label2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = $c3 + -48;

        $i1 = $i1 + $i2;

        goto label3;

     label2:
        $r1 = new java.text.ParseException;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>("Invalid nanoseconds.", 0);

        throw $r1;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $i1;
    }

    private static long saturatedAdd(long, long)
    {
        byte $b0;
        long $l1, $l2, $l3;
        boolean $z0, $z1;

        $l2 := @parameter0: long;

        $l3 := @parameter1: long;

        $l1 = $l2 + $l3;

        $l3 = $l3 ^ $l2;

        $z0 = 1;

        $b0 = $l3 cmp 0L;

        if $b0 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l2 = $l2 ^ $l1;

        $b0 = $l2 cmp 0L;

        if $b0 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        if $z0 == 0 goto label5;

        return $l1;

     label5:
        $l2 = $l1 >>> 63;

        $l2 = $l2 ^ 1L;

        $l2 = $l2 + 9223372036854775807L;

        return $l2;
    }

