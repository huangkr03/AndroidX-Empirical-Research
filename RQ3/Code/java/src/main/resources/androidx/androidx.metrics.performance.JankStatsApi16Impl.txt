androidx.metrics.performance.JankStatsApi16Impl
<androidx.metrics.performance.JankStatsApi16Impl: java.lang.ref.WeakReference decorViewRef>
<androidx.metrics.performance.JankStatsApi16Impl: android.view.Choreographer choreographer>
<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.PerformanceMetricsState$Holder metricsStateHolder>
<androidx.metrics.performance.JankStatsApi16Impl: java.util.List stateInfo>
<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.FrameData frameData>
<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 onFrameListenerDelegate>
    public void <init>(androidx.metrics.performance.JankStats, android.view.View)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        androidx.metrics.performance.JankStats r1;
        android.view.View r2;
        java.lang.ref.WeakReference $r3;
        android.view.Choreographer $r4;
        androidx.metrics.performance.PerformanceMetricsState$Companion $r5;
        androidx.metrics.performance.PerformanceMetricsState$Holder $r6;
        java.util.ArrayList $r7;
        java.util.List $r8, $r10;
        androidx.metrics.performance.FrameData $r9;
        androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 $r11;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        r1 := @parameter0: androidx.metrics.performance.JankStats;

        r2 := @parameter1: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jankStats");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "view");

        specialinvoke r0.<androidx.metrics.performance.JankStatsBaseImpl: void <init>(androidx.metrics.performance.JankStats)>(r1);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        r0.<androidx.metrics.performance.JankStatsApi16Impl: java.lang.ref.WeakReference decorViewRef> = $r3;

        $r4 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "getInstance()");

        r0.<androidx.metrics.performance.JankStatsApi16Impl: android.view.Choreographer choreographer> = $r4;

        $r5 = <androidx.metrics.performance.PerformanceMetricsState: androidx.metrics.performance.PerformanceMetricsState$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.metrics.performance.PerformanceMetricsState$Companion: androidx.metrics.performance.PerformanceMetricsState$Holder getHolderForHierarchy(android.view.View)>(r2);

        r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.PerformanceMetricsState$Holder metricsStateHolder> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = (java.util.List) $r7;

        r0.<androidx.metrics.performance.JankStatsApi16Impl: java.util.List stateInfo> = $r8;

        $r9 = new androidx.metrics.performance.FrameData;

        $r10 = r0.<androidx.metrics.performance.JankStatsApi16Impl: java.util.List stateInfo>;

        specialinvoke $r9.<androidx.metrics.performance.FrameData: void <init>(long,long,boolean,java.util.List)>(0L, 0L, 0, $r10);

        r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.FrameData frameData> = $r9;

        $r11 = new androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1;

        specialinvoke $r11.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: void <init>(androidx.metrics.performance.JankStats,androidx.metrics.performance.JankStatsApi16Impl)>(r1, r0);

        r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 onFrameListenerDelegate> = $r11;

        return;
    }

    public final java.lang.ref.WeakReference getDecorViewRef$metrics_performance_release()
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        java.lang.ref.WeakReference $r1;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl: java.lang.ref.WeakReference decorViewRef>;

        return $r1;
    }

    public final android.view.Choreographer getChoreographer()
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        android.view.Choreographer $r1;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl: android.view.Choreographer choreographer>;

        return $r1;
    }

    public final androidx.metrics.performance.PerformanceMetricsState$Holder getMetricsStateHolder()
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        androidx.metrics.performance.PerformanceMetricsState$Holder $r1;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.PerformanceMetricsState$Holder metricsStateHolder>;

        return $r1;
    }

    public final java.util.List getStateInfo()
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        java.util.List $r1;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl: java.util.List stateInfo>;

        return $r1;
    }

    public void setupFrameTimer(boolean)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        boolean z0;
        android.view.View r1, r2;
        androidx.metrics.performance.DelegatingOnPreDrawListener r3;
        java.lang.ref.WeakReference $r4;
        java.lang.Object $r5;
        androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 $r6, $r8;
        androidx.metrics.performance.OnFrameListenerDelegate $r7, $r9;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        z0 := @parameter0: boolean;

        $r4 = r0.<androidx.metrics.performance.JankStatsApi16Impl: java.lang.ref.WeakReference decorViewRef>;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r1 = (android.view.View) $r5;

        if r1 == null goto label3;

        r2 = r1;

        if z0 == 0 goto label1;

        r3 = specialinvoke r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.DelegatingOnPreDrawListener getOrCreateOnPreDrawListenerDelegator(android.view.View)>(r1);

        $r8 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 onFrameListenerDelegate>;

        $r9 = (androidx.metrics.performance.OnFrameListenerDelegate) $r8;

        virtualinvoke r3.<androidx.metrics.performance.DelegatingOnPreDrawListener: void add(androidx.metrics.performance.OnFrameListenerDelegate)>($r9);

        goto label2;

     label1:
        $r6 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 onFrameListenerDelegate>;

        $r7 = (androidx.metrics.performance.OnFrameListenerDelegate) $r6;

        specialinvoke r0.<androidx.metrics.performance.JankStatsApi16Impl: void removeOnPreDrawListenerDelegate(android.view.View,androidx.metrics.performance.OnFrameListenerDelegate)>(r1, $r7);

     label2:
        goto label3;

     label3:
        return;
    }

    public androidx.metrics.performance.FrameData getFrameData$metrics_performance_release(long, long, long)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        long l0, l1, l2, $l4;
        boolean z0, $z1;
        androidx.metrics.performance.PerformanceMetricsState$Holder $r1;
        androidx.metrics.performance.PerformanceMetricsState $r2;
        byte $b3;
        androidx.metrics.performance.FrameData $r3, $r4;
        java.util.List $r5;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.PerformanceMetricsState$Holder metricsStateHolder>;

        $r2 = virtualinvoke $r1.<androidx.metrics.performance.PerformanceMetricsState$Holder: androidx.metrics.performance.PerformanceMetricsState getState()>();

        if $r2 == null goto label1;

        $l4 = l0 + l1;

        $r5 = r0.<androidx.metrics.performance.JankStatsApi16Impl: java.util.List stateInfo>;

        virtualinvoke $r2.<androidx.metrics.performance.PerformanceMetricsState: void getIntervalStates$metrics_performance_release(long,long,java.util.List)>(l0, $l4, $r5);

        goto label1;

     label1:
        $b3 = l1 cmp l2;

        if $b3 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $r3 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.FrameData frameData>;

        virtualinvoke $r3.<androidx.metrics.performance.FrameData: void update$metrics_performance_release(long,long,boolean)>(l0, l1, z0);

        $r4 = r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.FrameData frameData>;

        return $r4;
    }

    private final void removeOnPreDrawListenerDelegate(android.view.View, androidx.metrics.performance.OnFrameListenerDelegate)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        android.view.View $r1;
        androidx.metrics.performance.OnFrameListenerDelegate r2;
        androidx.metrics.performance.DelegatingOnPreDrawListener r3;
        int $i0;
        java.lang.Object $r4;
        android.view.ViewTreeObserver $r5;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 := @parameter0: android.view.View;

        r2 := @parameter1: androidx.metrics.performance.OnFrameListenerDelegate;

        $i0 = <androidx.metrics.performance.R$id: int metricsDelegator>;

        $r4 = virtualinvoke $r1.<android.view.View: java.lang.Object getTag(int)>($i0);

        r3 = (androidx.metrics.performance.DelegatingOnPreDrawListener) $r4;

        if r3 == null goto label1;

        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "viewTreeObserver");

        virtualinvoke r3.<androidx.metrics.performance.DelegatingOnPreDrawListener: void remove(androidx.metrics.performance.OnFrameListenerDelegate,android.view.ViewTreeObserver)>(r2, $r5);

        goto label1;

     label1:
        return;
    }

    private final androidx.metrics.performance.DelegatingOnPreDrawListener getOrCreateOnPreDrawListenerDelegator(android.view.View)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        android.view.View $r1;
        java.util.List r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.util.ArrayList $r4;
        android.view.Choreographer $r5;
        android.view.ViewTreeObserver $r6;
        android.view.ViewTreeObserver$OnPreDrawListener $r7;
        androidx.metrics.performance.DelegatingOnPreDrawListener r8;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 := @parameter0: android.view.View;

        $i0 = <androidx.metrics.performance.R$id: int metricsDelegator>;

        $r3 = virtualinvoke $r1.<android.view.View: java.lang.Object getTag(int)>($i0);

        r8 = (androidx.metrics.performance.DelegatingOnPreDrawListener) $r3;

        if r8 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r4;

        $r5 = r0.<androidx.metrics.performance.JankStatsApi16Impl: android.view.Choreographer choreographer>;

        r8 = virtualinvoke r0.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.DelegatingOnPreDrawListener createDelegatingOnDrawListener$metrics_performance_release(android.view.View,android.view.Choreographer,java.util.List)>($r1, $r5, r2);

        $r6 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r7 = (android.view.ViewTreeObserver$OnPreDrawListener) r8;

        virtualinvoke $r6.<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>($r7);

        $i1 = <androidx.metrics.performance.R$id: int metricsDelegator>;

        virtualinvoke $r1.<android.view.View: void setTag(int,java.lang.Object)>($i1, r8);

     label1:
        return r8;
    }

    public androidx.metrics.performance.DelegatingOnPreDrawListener createDelegatingOnDrawListener$metrics_performance_release(android.view.View, android.view.Choreographer, java.util.List)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        android.view.View r1;
        android.view.Choreographer r2;
        java.util.List r3;
        androidx.metrics.performance.DelegatingOnPreDrawListener $r4;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.Choreographer;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "choreographer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "delegates");

        $r4 = new androidx.metrics.performance.DelegatingOnPreDrawListener;

        specialinvoke $r4.<androidx.metrics.performance.DelegatingOnPreDrawListener: void <init>(android.view.View,android.view.Choreographer,java.util.List)>(r1, r2, r3);

        return $r4;
    }

    public final long getFrameStartTime$metrics_performance_release()
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        androidx.metrics.performance.DelegatingOnPreDrawListener$Companion $r1;
        java.lang.reflect.Field $r2;
        android.view.Choreographer $r3;
        java.lang.Object $r4;
        java.lang.Long $r5;
        long $l0;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        $r1 = <androidx.metrics.performance.DelegatingOnPreDrawListener: androidx.metrics.performance.DelegatingOnPreDrawListener$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.metrics.performance.DelegatingOnPreDrawListener$Companion: java.lang.reflect.Field getChoreographerLastFrameTimeField()>();

        $r3 = r0.<androidx.metrics.performance.JankStatsApi16Impl: android.view.Choreographer choreographer>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlin.Long");

        $r5 = (java.lang.Long) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public final long getExpectedFrameDuration(android.view.View)
    {
        androidx.metrics.performance.JankStatsApi16Impl r0;
        android.view.View r1;
        androidx.metrics.performance.DelegatingOnPreDrawListener$Companion $r2;
        long $l0;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl;

        r1 := @parameter0: android.view.View;

        $r2 = <androidx.metrics.performance.DelegatingOnPreDrawListener: androidx.metrics.performance.DelegatingOnPreDrawListener$Companion Companion>;

        $l0 = virtualinvoke $r2.<androidx.metrics.performance.DelegatingOnPreDrawListener$Companion: long getExpectedFrameDuration(android.view.View)>(r1);

        return $l0;
    }

androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1
<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStats $jankStats>
<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStatsApi16Impl this$0>
    void <init>(androidx.metrics.performance.JankStats, androidx.metrics.performance.JankStatsApi16Impl)
    {
        androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 r0;
        androidx.metrics.performance.JankStats $r1;
        androidx.metrics.performance.JankStatsApi16Impl $r2;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1;

        $r1 := @parameter0: androidx.metrics.performance.JankStats;

        $r2 := @parameter1: androidx.metrics.performance.JankStatsApi16Impl;

        r0.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStats $jankStats> = $r1;

        r0.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStatsApi16Impl this$0> = $r2;

        specialinvoke r0.<androidx.metrics.performance.OnFrameListenerDelegate: void <init>()>();

        return;
    }

    public void onFrame(long, long, long)
    {
        androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1 r0;
        long l0, l1, l2, $l3;
        androidx.metrics.performance.JankStats $r1, $r2;
        androidx.metrics.performance.JankStatsApi16Impl $r3;
        float $f0, $f1, $f2;
        androidx.metrics.performance.FrameData $r4;

        r0 := @this: androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r2 = r0.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStats $jankStats>;

        $r3 = r0.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStatsApi16Impl this$0>;

        $f0 = (float) l2;

        $r1 = r0.<androidx.metrics.performance.JankStatsApi16Impl$onFrameListenerDelegate$1: androidx.metrics.performance.JankStats $jankStats>;

        $f1 = virtualinvoke $r1.<androidx.metrics.performance.JankStats: float getJankHeuristicMultiplier()>();

        $f2 = $f0 * $f1;

        $l3 = (long) $f2;

        $r4 = virtualinvoke $r3.<androidx.metrics.performance.JankStatsApi16Impl: androidx.metrics.performance.FrameData getFrameData$metrics_performance_release(long,long,long)>(l0, l1, $l3);

        virtualinvoke $r2.<androidx.metrics.performance.JankStats: void logFrameData$metrics_performance_release(androidx.metrics.performance.FrameData)>($r4);

        return;
    }

