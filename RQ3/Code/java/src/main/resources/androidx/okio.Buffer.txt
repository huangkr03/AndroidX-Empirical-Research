okio.Buffer
<okio.Buffer: okio.Segment head>
<okio.Buffer: long size>
    public void <init>()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public okio.Buffer buffer()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        return $r0;
    }

    public final void clear()
    {
        okio.Buffer $r0;
        long $l0;

        $r0 := @this: okio.Buffer;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        virtualinvoke $r0.<okio.Buffer: void skip(long)>($l0);

        return;
    }

    public volatile java.lang.Object clone()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer clone()>();

        return $r0;
    }

    public okio.Buffer clone()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer copy()>();

        return $r0;
    }

    public void close()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        return;
    }

    public final long completeSegmentByteCount()
    {
        okio.Buffer $r0;
        long $l0, $l1, $l2;
        byte $b3;
        okio.Segment $r1;
        int $i4, $i5;
        boolean $z0;

        $r0 := @this: okio.Buffer;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l1 = $l0;

        $l2 = 0L;

        $b3 = $l0 cmp 0L;

        if $b3 != 0 goto label1;

        goto label3;

     label1:
        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r1 = $r1.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i4 = $r1.<okio.Segment: int limit>;

        if $i4 >= 8192 goto label2;

        $z0 = $r1.<okio.Segment: boolean owner>;

        if $z0 == 0 goto label2;

        $i4 = $r1.<okio.Segment: int limit>;

        $i5 = $r1.<okio.Segment: int pos>;

        $i4 = $i4 - $i5;

        $l1 = (long) $i4;

        $l1 = $l0 - $l1;

        goto label2;

     label2:
        $l2 = $l1;

     label3:
        return $l2;
    }

    public final okio.Buffer copy()
    {
        okio.Buffer $r0, $r1;
        okio.Segment $r2, $r3, $r4, $r5, $r6;
        long $l0;
        byte $b1;

        $r0 := @this: okio.Buffer;

        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return $r1;

     label1:
        $r3 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r3.<okio.Segment: okio.Segment sharedCopy()>();

        $r1.<okio.Buffer: okio.Segment head> = $r4;

        $r4.<okio.Segment: okio.Segment prev> = $r4;

        $r2 = $r4.<okio.Segment: okio.Segment prev>;

        $r4.<okio.Segment: okio.Segment next> = $r2;

        $r5 = $r3.<okio.Segment: okio.Segment next>;

     label2:
        if $r5 == $r3 goto label3;

        $r2 = $r4.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r5.<okio.Segment: okio.Segment sharedCopy()>();

        virtualinvoke $r2.<okio.Segment: okio.Segment push(okio.Segment)>($r6);

        $r5 = $r5.<okio.Segment: okio.Segment next>;

        goto label2;

     label3:
        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l0);

        return $r1;
    }

    public final okio.Buffer copyTo(okio.Buffer, long, long)
    {
        okio.Buffer $r0, $r1;
        long $l0, $l1, $l2;
        byte $b3;
        okio.Segment $r2, $r3, $r4;
        int $i4, $i5;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "out");

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l2, $l0, $l1);

        $b3 = $l1 cmp 0L;

        if $b3 != 0 goto label1;

        return $r0;

     label1:
        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l2 = $l2 + $l1;

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l2);

        $r2 = $r0.<okio.Buffer: okio.Segment head>;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i4 = $r2.<okio.Segment: int limit>;

        $i5 = $r2.<okio.Segment: int pos>;

        $i4 = $i4 - $i5;

        $l2 = (long) $i4;

        $b3 = $l0 cmp $l2;

        if $b3 < 0 goto label3;

        $i4 = $r2.<okio.Segment: int limit>;

        $i5 = $r2.<okio.Segment: int pos>;

        $i4 = $i4 - $i5;

        $l2 = (long) $i4;

        $l0 = $l0 - $l2;

        $r2 = $r2.<okio.Segment: okio.Segment next>;

        goto label2;

     label3:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label6;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r2.<okio.Segment: okio.Segment sharedCopy()>();

        $i4 = $r3.<okio.Segment: int pos>;

        $i5 = (int) $l0;

        $i4 = $i4 + $i5;

        $r3.<okio.Segment: int pos> = $i4;

        $i4 = $r3.<okio.Segment: int pos>;

        $i5 = (int) $l1;

        $i4 = $i4 + $i5;

        $i5 = $r3.<okio.Segment: int limit>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        $r3.<okio.Segment: int limit> = $i4;

        $r4 = $r1.<okio.Buffer: okio.Segment head>;

        if $r4 != null goto label4;

        $r3.<okio.Segment: okio.Segment prev> = $r3;

        $r4 = $r3.<okio.Segment: okio.Segment prev>;

        $r3.<okio.Segment: okio.Segment next> = $r4;

        $r4 = $r3.<okio.Segment: okio.Segment next>;

        $r1.<okio.Buffer: okio.Segment head> = $r4;

        goto label5;

     label4:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $r4 = $r4.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        virtualinvoke $r4.<okio.Segment: okio.Segment push(okio.Segment)>($r3);

     label5:
        $i4 = $r3.<okio.Segment: int limit>;

        $i5 = $r3.<okio.Segment: int pos>;

        $i4 = $i4 - $i5;

        $l0 = (long) $i4;

        $l1 = $l1 - $l0;

        $r2 = $r2.<okio.Segment: okio.Segment next>;

        $l0 = 0L;

        goto label3;

     label6:
        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        okio.Buffer $r0, $r2;
        java.lang.Object $r1;
        int $i0, $i4, $i5, $i6;
        boolean $z0;
        long $l1, $l2, $l7;
        byte $b3, $b8;
        okio.Segment $r3, $r4;
        byte[] $r5;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label02;

     label01:
        $z0 = 1;

        goto label12;

     label02:
        $z0 = $r1 instanceof okio.Buffer;

        if $z0 != 0 goto label03;

        $z0 = 0;

        goto label12;

     label03:
        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $r2 = (okio.Buffer) $r1;

        $l2 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label04;

        $z0 = 0;

        goto label12;

     label04:
        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b3 = $l1 cmp 0L;

        if $b3 != 0 goto label05;

        $z0 = 1;

        goto label12;

     label05:
        $r3 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = $r2.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $i4 = $r3.<okio.Segment: int pos>;

        $i5 = $r4.<okio.Segment: int pos>;

        $l1 = 0L;

     label06:
        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label01;

        $i0 = $r3.<okio.Segment: int limit>;

        $i0 = $i0 - $i4;

        $i6 = $r4.<okio.Segment: int limit>;

        $i6 = $i6 - $i5;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i6);

        $l2 = (long) $i0;

        $l7 = 0L;

     label07:
        $b3 = $l7 cmp $l2;

        if $b3 >= 0 goto label09;

        $r5 = $r3.<okio.Segment: byte[] data>;

        $b3 = $r5[$i4];

        $r5 = $r4.<okio.Segment: byte[] data>;

        $b8 = $r5[$i5];

        if $b3 == $b8 goto label08;

        $z0 = 0;

        goto label12;

     label08:
        $l7 = $l7 + 1L;

        $i4 = $i4 + 1;

        $i5 = $i5 + 1;

        goto label07;

     label09:
        $i0 = $r3.<okio.Segment: int limit>;

        if $i4 != $i0 goto label10;

        $r3 = $r3.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i4 = $r3.<okio.Segment: int pos>;

        goto label10;

     label10:
        $i0 = $r4.<okio.Segment: int limit>;

        if $i5 != $i0 goto label11;

        $r4 = $r4.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $i5 = $r4.<okio.Segment: int pos>;

        goto label11;

     label11:
        $l1 = $l1 + $l2;

        goto label06;

     label12:
        return $z0;
    }

    public boolean exhausted()
    {
        okio.Buffer $r0;
        byte $b0;
        long $l1;

        $r0 := @this: okio.Buffer;

        $l1 = $r0.<okio.Buffer: long size>;

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void flush()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        return;
    }

    public okio.Buffer getBuffer()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        return $r0;
    }

    public final byte getByte(long)
    {
        okio.Buffer $r0;
        byte $b0;
        long $l1, $l2, $l5;
        okio.Segment $r1;
        int $i3, $i4;
        byte[] $r2;
        java.lang.NullPointerException r3;

        $r0 := @this: okio.Buffer;

        $l1 := @parameter0: long;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l2, $l1, 1L);

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 == null goto label6;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l2 = $l2 - $l1;

        $b0 = $l2 cmp $l1;

        if $b0 >= 0 goto label3;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

     label1:
        $b0 = $l2 cmp $l1;

        if $b0 <= 0 goto label2;

        $r1 = $r1.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i3 = $r1.<okio.Segment: int limit>;

        $i4 = $r1.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l5 = (long) $i3;

        $l2 = $l2 - $l5;

        goto label1;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i3 = $r1.<okio.Segment: int pos>;

        $l5 = (long) $i3;

        $l1 = $l5 + $l1;

        $l1 = $l1 - $l2;

        $i3 = (int) $l1;

        $b0 = $r2[$i3];

        return $b0;

     label3:
        $l2 = 0L;

     label4:
        $i3 = $r1.<okio.Segment: int limit>;

        $i4 = $r1.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l5 = (long) $i3;

        $l5 = $l5 + $l2;

        $b0 = $l5 cmp $l1;

        if $b0 > 0 goto label5;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $l2 = $l5;

        goto label4;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i3 = $r1.<okio.Segment: int pos>;

        $l5 = (long) $i3;

        $l1 = $l5 + $l1;

        $l1 = $l1 - $l2;

        $i3 = (int) $l1;

        $b0 = $r2[$i3];

        return $b0;

     label6:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(null);

        goto label7;

     label7:
        r3 = new java.lang.NullPointerException;

        specialinvoke r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r3;
    }

    public int hashCode()
    {
        okio.Buffer $r0;
        int $i0, $i1, $i2;
        okio.Segment $r1, $r3;
        byte[] $r2;
        byte $b3;

        $r0 := @this: okio.Buffer;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label5;

     label1:
        $i1 = 1;

     label2:
        $i2 = $r1.<okio.Segment: int pos>;

        $i0 = $r1.<okio.Segment: int limit>;

     label3:
        if $i2 >= $i0 goto label4;

        $i1 = $i1 * 31;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $b3 = $r2[$i2];

        $i1 = $i1 + $b3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r1 = $r1.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r3 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 != $r3 goto label2;

        $i0 = $i1;

     label5:
        return $i0;
    }

    public long indexOf(byte, long, long)
    {
        okio.Buffer $r0;
        byte $b0, $b4;
        long $l1, $l2, $l3, $l5, $l6, $l9;
        boolean $z0;
        okio.Segment $r1;
        int $i7, $i8;
        byte[] $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: okio.Buffer;

        $b0 := @parameter0: byte;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $z0 = 0;

        $l3 = 0L;

        $b4 = $l1 cmp 0L;

        if $b4 < 0 goto label01;

        $b4 = $l1 cmp $l2;

        if $b4 > 0 goto label01;

        $z0 = 1;

        goto label01;

     label01:
        if $z0 == 0 goto label22;

        $l5 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b4 = $l2 cmp $l5;

        if $b4 <= 0 goto label02;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        goto label02;

     label02:
        $l5 = -1L;

        $b4 = $l1 cmp $l2;

        if $b4 != 0 goto label04;

     label03:
        goto label21;

     label04:
        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 != null goto label06;

     label05:
        goto label21;

     label06:
        $l6 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l6 = $l6 - $l1;

        $b4 = $l6 cmp $l1;

        if $b4 >= 0 goto label14;

        $l3 = virtualinvoke $r0.<okio.Buffer: long size()>();

     label07:
        $b4 = $l3 cmp $l1;

        if $b4 <= 0 goto label08;

        $r1 = $r1.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i7 = $r1.<okio.Segment: int limit>;

        $i8 = $r1.<okio.Segment: int pos>;

        $i7 = $i7 - $i8;

        $l6 = (long) $i7;

        $l3 = $l3 - $l6;

        goto label07;

     label08:
        if $r1 != null goto label09;

        goto label05;

     label09:
        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label13;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i7 = $r1.<okio.Segment: int limit>;

        $l6 = (long) $i7;

        $i7 = $r1.<okio.Segment: int pos>;

        $l9 = (long) $i7;

        $l9 = $l9 + $l2;

        $l9 = $l9 - $l3;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>($l6, $l9);

        $i8 = (int) $l6;

        $i7 = $r1.<okio.Segment: int pos>;

        $l6 = (long) $i7;

        $l1 = $l6 + $l1;

        $l1 = $l1 - $l3;

        $i7 = (int) $l1;

     label10:
        if $i7 >= $i8 goto label12;

        $b4 = $r2[$i7];

        if $b4 != $b0 goto label11;

        goto label18;

     label11:
        $i7 = $i7 + 1;

        goto label10;

     label12:
        $i7 = $r1.<okio.Segment: int limit>;

        $i8 = $r1.<okio.Segment: int pos>;

        $i7 = $i7 - $i8;

        $l1 = (long) $i7;

        $l3 = $l3 + $l1;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $l1 = $l3;

        goto label09;

     label13:
        goto label21;

     label14:
        $i7 = $r1.<okio.Segment: int limit>;

        $i8 = $r1.<okio.Segment: int pos>;

        $i7 = $i7 - $i8;

        $l6 = (long) $i7;

        $l6 = $l6 + $l3;

        $b4 = $l6 cmp $l1;

        if $b4 > 0 goto label15;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $l3 = $l6;

        goto label14;

     label15:
        if $r1 != null goto label16;

        goto label05;

     label16:
        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label03;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i7 = $r1.<okio.Segment: int limit>;

        $l6 = (long) $i7;

        $i7 = $r1.<okio.Segment: int pos>;

        $l9 = (long) $i7;

        $l9 = $l9 + $l2;

        $l9 = $l9 - $l3;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>($l6, $l9);

        $i8 = (int) $l6;

        $i7 = $r1.<okio.Segment: int pos>;

        $l6 = (long) $i7;

        $l1 = $l6 + $l1;

        $l1 = $l1 - $l3;

        $i7 = (int) $l1;

     label17:
        if $i7 >= $i8 goto label20;

        $b4 = $r2[$i7];

        if $b4 != $b0 goto label19;

     label18:
        $i8 = $r1.<okio.Segment: int pos>;

        $i7 = $i7 - $i8;

        $l1 = (long) $i7;

        $l5 = $l1 + $l3;

        goto label21;

     label19:
        $i7 = $i7 + 1;

        goto label17;

     label20:
        $i7 = $r1.<okio.Segment: int limit>;

        $i8 = $r1.<okio.Segment: int pos>;

        $i7 = $i7 - $i8;

        $l1 = (long) $i7;

        $l3 = $l3 + $l1;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $l1 = $l3;

        goto label16;

     label21:
        return $l5;

     label22:
        $l3 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fromIndex=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" toIndex=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        goto label23;

     label23:
        throw $r5;
    }

    public boolean isOpen()
    {
        okio.Buffer $r0;

        $r0 := @this: okio.Buffer;

        return 1;
    }

    public java.io.OutputStream outputStream()
    {
        okio.Buffer $r0;
        okio.Buffer$outputStream$1 $r1;

        $r0 := @this: okio.Buffer;

        $r1 = new okio.Buffer$outputStream$1;

        specialinvoke $r1.<okio.Buffer$outputStream$1: void <init>(okio.Buffer)>($r0);

        return $r1;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        okio.Buffer $r0;
        long $l0, $l4;
        java.nio.ByteBuffer $r1;
        okio.Segment $r2, $r4;
        int $i1, $i2, $i3;
        byte[] $r3;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $r2 = $r0.<okio.Buffer: okio.Segment head>;

        if $r2 != null goto label1;

        return -1;

     label1:
        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $i2 = $r2.<okio.Segment: int limit>;

        $i3 = $r2.<okio.Segment: int pos>;

        $i2 = $i2 - $i3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int pos>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r3, $i2, $i1);

        $i2 = $r2.<okio.Segment: int pos>;

        $i2 = $i2 + $i1;

        $r2.<okio.Segment: int pos> = $i2;

        $l4 = $r0.<okio.Buffer: long size>;

        $l0 = (long) $i1;

        $l0 = $l4 - $l0;

        $r0.<okio.Buffer: long size> = $l0;

        $i2 = $r2.<okio.Segment: int pos>;

        $i3 = $r2.<okio.Segment: int limit>;

        if $i2 != $i3 goto label2;

        $r4 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r4;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2);

     label2:
        return $i1;
    }

    public int read(byte[], int, int)
    {
        okio.Buffer $r0;
        long $l0, $l4, $l5;
        byte[] $r1, $r3;
        int $i1, $i2, $i3, $i6;
        okio.Segment $r2, $r4;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $i3 = lengthof $r1;

        $l4 = (long) $i3;

        $l5 = (long) $i1;

        $l0 = (long) $i2;

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l4, $l5, $l0);

        $r2 = $r0.<okio.Buffer: okio.Segment head>;

        if $r2 != null goto label1;

        $i1 = -1;

        goto label2;

     label1:
        $i3 = $r2.<okio.Segment: int limit>;

        $i6 = $r2.<okio.Segment: int pos>;

        $i3 = $i3 - $i6;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i3 = $r2.<okio.Segment: int pos>;

        $i6 = $r2.<okio.Segment: int pos>;

        $i6 = $i6 + $i2;

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r3, $r1, $i1, $i3, $i6);

        $i1 = $r2.<okio.Segment: int pos>;

        $i1 = $i1 + $i2;

        $r2.<okio.Segment: int pos> = $i1;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l4 = (long) $i2;

        $l0 = $l0 - $l4;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l0);

        $i1 = $r2.<okio.Segment: int pos>;

        $i3 = $r2.<okio.Segment: int limit>;

        if $i1 == $i3 goto label3;

        $i1 = $i2;

     label2:
        return $i1;

     label3:
        $r4 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r4;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2);

        return $i2;
    }

    public long read(okio.Buffer, long)
    {
        okio.Buffer $r0, $r1;
        byte $b0;
        long $l1, $l2;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: okio.Buffer;

        $l1 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $b0 = $l1 cmp 0L;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b0 = $l2 cmp 0L;

        if $b0 != 0 goto label3;

        $l1 = -1L;

        goto label5;

     label3:
        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b0 = $l1 cmp $l2;

        if $b0 <= 0 goto label4;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        goto label4;

     label4:
        virtualinvoke $r1.<okio.Buffer: void write(okio.Buffer,long)>($r0, $l1);

     label5:
        return $l1;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public byte readByte() throws java.io.EOFException
    {
        okio.Buffer $r0;
        int $i0, $i3, $i4;
        long $l1;
        byte $b2;
        okio.Segment $r1, $r3;
        byte[] $r2;
        java.io.EOFException $r4;

        $r0 := @this: okio.Buffer;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i3 = $r1.<okio.Segment: int pos>;

        $i4 = $r1.<okio.Segment: int limit>;

        $i0 = $i3 + 1;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $b2 = $r2[$i3];

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l1 = $l1 + -1L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l1);

        if $i0 != $i4 goto label1;

        $r3 = virtualinvoke $r1.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r3;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1);

        return $b2;

     label1:
        $r1.<okio.Segment: int pos> = $i0;

        return $b2;

     label2:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;
    }

    public byte[] readByteArray()
    {
        okio.Buffer $r0;
        long $l0;
        byte[] $r1;

        $r0 := @this: okio.Buffer;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $r1 = virtualinvoke $r0.<okio.Buffer: byte[] readByteArray(long)>($l0);

        return $r1;
    }

    public byte[] readByteArray(long) throws java.io.EOFException
    {
        okio.Buffer $r0;
        long $l0, $l2;
        byte $b1;
        boolean $z0;
        int $i3;
        byte[] $r1;
        java.io.EOFException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b1 = $l2 cmp $l0;

        if $b1 < 0 goto label3;

        $i3 = (int) $l0;

        $r1 = newarray (byte)[$i3];

        virtualinvoke $r0.<okio.Buffer: void readFully(byte[])>($r1);

        return $r1;

     label3:
        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r5;
    }

    public okio.ByteString readByteString()
    {
        okio.Buffer $r0;
        long $l0;
        okio.ByteString $r1;

        $r0 := @this: okio.Buffer;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.ByteString readByteString(long)>($l0);

        return $r1;
    }

    public okio.ByteString readByteString(long) throws java.io.EOFException
    {
        okio.Buffer $r0;
        java.lang.IllegalArgumentException $r1;
        long $l0, $l2;
        byte $b1;
        boolean $z0;
        int $i3;
        okio.ByteString $r2;
        byte[] $r3;
        java.io.EOFException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b1 = $l2 cmp $l0;

        if $b1 < 0 goto label5;

        $b1 = $l0 cmp 4096L;

        if $b1 < 0 goto label3;

        $i3 = (int) $l0;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.ByteString snapshot(int)>($i3);

        virtualinvoke $r0.<okio.Buffer: void skip(long)>($l0);

        goto label4;

     label3:
        $r2 = new okio.ByteString;

        $r3 = virtualinvoke $r0.<okio.Buffer: byte[] readByteArray(long)>($l0);

        specialinvoke $r2.<okio.ByteString: void <init>(byte[])>($r3);

     label4:
        return $r2;

     label5:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public void readFully(byte[]) throws java.io.EOFException
    {
        okio.Buffer $r0;
        int $i0, $i1;
        byte[] $r1;
        java.io.EOFException $r2;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label3;

        $i0 = lengthof $r1;

        $i0 = $i0 - $i1;

        $i0 = virtualinvoke $r0.<okio.Buffer: int read(byte[],int,int)>($r1, $i1, $i0);

        if $i0 == -1 goto label2;

        $i1 = $i1 + $i0;

        goto label1;

     label2:
        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    public int readInt() throws java.io.EOFException
    {
        okio.Buffer $r0;
        int $i0, $i3, $i4, $i5, $i7, $i8;
        long $l1;
        byte $b2;
        okio.Segment $r1, $r3;
        short $s6;
        byte[] $r2;
        java.io.EOFException $r4;

        $r0 := @this: okio.Buffer;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b2 = $l1 cmp 4L;

        if $b2 < 0 goto label5;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i3 = $r1.<okio.Segment: int pos>;

        $i4 = $r1.<okio.Segment: int limit>;

        $i5 = $i4 - $i3;

        $l1 = (long) $i5;

        $b2 = $l1 cmp 4L;

        if $b2 >= 0 goto label1;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s6 = $b2 & 255;

        $i4 = $s6 << 24;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s6 = $b2 & 255;

        $i5 = $s6 << 16;

        $i4 = $i4 | $i5;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s6 = $b2 & 255;

        $i5 = $s6 << 8;

        $i4 = $i4 | $i5;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s6 = $b2 & 255;

        $i4 = $i4 | $s6;

        goto label4;

     label1:
        $r2 = $r1.<okio.Segment: byte[] data>;

        $i7 = $i3 + 1;

        $i8 = $i7 + 1;

        $i0 = $i8 + 1;

        $i5 = $i0 + 1;

        $b2 = $r2[$i3];

        $s6 = $b2 & 255;

        $i3 = $s6 << 24;

        $b2 = $r2[$i7];

        $s6 = $b2 & 255;

        $i7 = $s6 << 16;

        $i3 = $i3 | $i7;

        $b2 = $r2[$i8];

        $s6 = $b2 & 255;

        $i8 = $s6 << 8;

        $i8 = $i3 | $i8;

        $b2 = $r2[$i0];

        $s6 = $b2 & 255;

        $i0 = $i8 | $s6;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l1 = $l1 + -4L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l1);

        if $i5 != $i4 goto label2;

        $r3 = virtualinvoke $r1.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r3;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1);

        goto label3;

     label2:
        $r1.<okio.Segment: int pos> = $i5;

     label3:
        $i4 = $i0;

     label4:
        return $i4;

     label5:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;
    }

    public short readShort() throws java.io.EOFException
    {
        okio.Buffer $r0;
        int $i0, $i3, $i4, $i6;
        long $l1;
        byte $b2;
        okio.Segment $r1, $r3;
        short $s5;
        byte[] $r2;
        java.io.EOFException $r4;

        $r0 := @this: okio.Buffer;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b2 = $l1 cmp 2L;

        if $b2 < 0 goto label4;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i3 = $r1.<okio.Segment: int pos>;

        $i4 = $r1.<okio.Segment: int limit>;

        $i0 = $i4 - $i3;

        if $i0 >= 2 goto label1;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s5 = $b2 & 255;

        $i4 = $s5 << 8;

        $b2 = virtualinvoke $r0.<okio.Buffer: byte readByte()>();

        $s5 = $b2 & 255;

        $i4 = $i4 | $s5;

        $s5 = (short) $i4;

        return $s5;

     label1:
        $r2 = $r1.<okio.Segment: byte[] data>;

        $i6 = $i3 + 1;

        $i0 = $i6 + 1;

        $b2 = $r2[$i3];

        $s5 = $b2 & 255;

        $i3 = $s5 << 8;

        $b2 = $r2[$i6];

        $s5 = $b2 & 255;

        $i3 = $i3 | $s5;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l1 = $l1 + -2L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l1);

        if $i0 != $i4 goto label2;

        $r3 = virtualinvoke $r1.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r3;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1);

        goto label3;

     label2:
        $r1.<okio.Segment: int pos> = $i0;

     label3:
        $s5 = (short) $i3;

        return $s5;

     label4:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;
    }

    public java.lang.String readString(long, java.nio.charset.Charset) throws java.io.EOFException
    {
        okio.Buffer $r0;
        byte $b0;
        long $l1, $l2, $l4;
        java.nio.charset.Charset $r1;
        boolean $z0;
        okio.Segment $r2, $r5;
        int $i3, $i5;
        java.lang.String $r3;
        byte[] $r4;
        java.io.EOFException $r6;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r8;

        $r0 := @this: okio.Buffer;

        $l1 := @parameter0: long;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $b0 = $l1 cmp 0L;

        if $b0 < 0 goto label1;

        $b0 = $l1 cmp 2147483647L;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

        $l2 = $r0.<okio.Buffer: long size>;

        $b0 = $l2 cmp $l1;

        if $b0 < 0 goto label5;

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label3;

        return "";

     label3:
        $r2 = $r0.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i3 = $r2.<okio.Segment: int pos>;

        $l2 = (long) $i3;

        $l2 = $l2 + $l1;

        $i3 = $r2.<okio.Segment: int limit>;

        $l4 = (long) $i3;

        $b0 = $l2 cmp $l4;

        if $b0 <= 0 goto label4;

        $r3 = new java.lang.String;

        $r4 = virtualinvoke $r0.<okio.Buffer: byte[] readByteArray(long)>($l1);

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r4, $r1);

        return $r3;

     label4:
        $r3 = new java.lang.String;

        $r4 = $r2.<okio.Segment: byte[] data>;

        $i5 = $r2.<okio.Segment: int pos>;

        $i3 = (int) $l1;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r4, $i5, $i3, $r1);

        $i5 = $r2.<okio.Segment: int pos>;

        $i3 = $i5 + $i3;

        $r2.<okio.Segment: int pos> = $i3;

        $l2 = $r0.<okio.Buffer: long size>;

        $l1 = $l2 - $l1;

        $r0.<okio.Buffer: long size> = $l1;

        $i3 = $r2.<okio.Segment: int pos>;

        $i5 = $r2.<okio.Segment: int limit>;

        if $i3 != $i5 goto label7;

        $r5 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r5;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2);

        return $r3;

     label5:
        $r6 = new java.io.EOFException;

        specialinvoke $r6.<java.io.EOFException: void <init>()>();

        throw $r6;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r8;

     label7:
        return $r3;
    }

    public java.lang.String readUtf8()
    {
        okio.Buffer $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        long $l0;

        $r0 := @this: okio.Buffer;

        $l0 = $r0.<okio.Buffer: long size>;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r0.<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>($l0, $r1);

        return $r2;
    }

    public java.lang.String readUtf8(long) throws java.io.EOFException
    {
        okio.Buffer $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        long $l0;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r0.<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>($l0, $r1);

        return $r2;
    }

    public java.lang.String readUtf8LineStrict() throws java.io.EOFException
    {
        okio.Buffer $r0;
        java.lang.String $r1;

        $r0 := @this: okio.Buffer;

        $r1 = virtualinvoke $r0.<okio.Buffer: java.lang.String readUtf8LineStrict(long)>(9223372036854775807L);

        return $r1;
    }

    public java.lang.String readUtf8LineStrict(long) throws java.io.EOFException
    {
        okio.Buffer $r0, $r2;
        long $l0, $l2, $l3;
        byte $b1;
        boolean $z0;
        java.lang.String $r1;
        java.io.EOFException $r3;
        okio.ByteString $r4;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label7;

        $l2 = 9223372036854775807L;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        $l2 = 1L + $l0;

     label4:
        $l3 = virtualinvoke $r0.<okio.Buffer: long indexOf(byte,long,long)>(10, 0L, $l2);

        $b1 = $l3 cmp -1L;

        if $b1 == 0 goto label5;

        $r1 = staticinvoke <okio.internal._BufferKt: java.lang.String readUtf8Line(okio.Buffer,long)>($r0, $l3);

        return $r1;

     label5:
        $l3 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b1 = $l2 cmp $l3;

        if $b1 >= 0 goto label6;

        $l3 = -1L + $l2;

        $b1 = virtualinvoke $r0.<okio.Buffer: byte getByte(long)>($l3);

        if $b1 != 13 goto label6;

        $b1 = virtualinvoke $r0.<okio.Buffer: byte getByte(long)>($l2);

        if $b1 != 10 goto label6;

        $r1 = staticinvoke <okio.internal._BufferKt: java.lang.String readUtf8Line(okio.Buffer,long)>($r0, $l2);

        return $r1;

     label6:
        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>(32L, $l2);

        virtualinvoke $r0.<okio.Buffer: okio.Buffer copyTo(okio.Buffer,long,long)>($r2, 0L, $l2);

        $r3 = new java.io.EOFException;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l0);

        $r4 = virtualinvoke $r2.<okio.Buffer: okio.ByteString readByteString()>();

        $r1 = virtualinvoke $r4.<okio.ByteString: java.lang.String hex()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n not found: limit=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" content=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u2026");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.EOFException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label7:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("limit < 0: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;
    }

    public void require(long) throws java.io.EOFException
    {
        okio.Buffer $r0;
        long $l0, $l2;
        byte $b1;
        java.io.EOFException $r1;

        $r0 := @this: okio.Buffer;

        $l2 := @parameter0: long;

        $l0 = $r0.<okio.Buffer: long size>;

        $b1 = $l0 cmp $l2;

        if $b1 < 0 goto label1;

        return;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public final void setSize$third_party_java_src_okio_okio(long)
    {
        okio.Buffer $r0;
        long $l0;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $r0.<okio.Buffer: long size> = $l0;

        return;
    }

    public final long size()
    {
        okio.Buffer $r0;
        long l0;

        $r0 := @this: okio.Buffer;

        l0 = $r0.<okio.Buffer: long size>;

        return l0;
    }

    public void skip(long) throws java.io.EOFException
    {
        okio.Buffer $r0;
        long $l0, $l1, $l5;
        byte $b2;
        okio.Segment $r1, $r2;
        int $i3, $i4;
        java.io.EOFException $r3;

        $r0 := @this: okio.Buffer;

        $l1 := @parameter0: long;

     label1:
        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 == null goto label2;

        $i3 = $r1.<okio.Segment: int limit>;

        $i4 = $r1.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l0 = (long) $i3;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        $i3 = (int) $l0;

        $l5 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l0 = (long) $i3;

        $l5 = $l5 - $l0;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l5);

        $l1 = $l1 - $l0;

        $i4 = $r1.<okio.Segment: int pos>;

        $i3 = $i4 + $i3;

        $r1.<okio.Segment: int pos> = $i3;

        $i3 = $r1.<okio.Segment: int pos>;

        $i4 = $r1.<okio.Segment: int limit>;

        if $i3 != $i4 goto label1;

        $r2 = virtualinvoke $r1.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r2;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1);

        goto label1;

     label2:
        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public final okio.ByteString snapshot()
    {
        okio.Buffer $r0;
        byte $b0;
        long $l1;
        boolean $z0;
        int $i2;
        okio.ByteString $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @this: okio.Buffer;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b0 = $l1 cmp 2147483647L;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $i2 = (int) $l1;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.ByteString snapshot(int)>($i2);

        return $r1;

     label3:
        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size > Int.MAX_VALUE: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public final okio.ByteString snapshot(int)
    {
        okio.Buffer $r0;
        int $i0, $i3, $i4, $i5, $i6, $i7;
        long $l1, $l2;
        okio.Segment $r1;
        java.lang.AssertionError $r2;
        byte[][] $r3;
        int[] $r4;
        byte[] $r5;
        java.lang.Object[] $r6;
        okio.SegmentedByteString $r7;
        okio.ByteString r8;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        r8 = <okio.ByteString: okio.ByteString EMPTY>;

        return r8;

     label1:
        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l2 = (long) $i0;

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l2);

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

     label2:
        if $i4 >= $i0 goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i6 = $r1.<okio.Segment: int limit>;

        $i7 = $r1.<okio.Segment: int pos>;

        if $i6 == $i7 goto label3;

        $i6 = $r1.<okio.Segment: int limit>;

        $i7 = $r1.<okio.Segment: int pos>;

        $i6 = $i6 - $i7;

        $i4 = $i4 + $i6;

        $i5 = $i5 + 1;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        goto label2;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("s.limit == s.pos");

        throw $r2;

     label4:
        $r3 = newarray (byte[])[$i5];

        $i4 = $i5 + $i5;

        $r4 = newarray (int)[$i4];

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        $i4 = 0;

     label5:
        if $i3 >= $i0 goto label6;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r5 = $r1.<okio.Segment: byte[] data>;

        $r3[$i4] = $r5;

        $i5 = $r1.<okio.Segment: int limit>;

        $i6 = $r1.<okio.Segment: int pos>;

        $i5 = $i5 - $i6;

        $i3 = $i3 + $i5;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i0);

        $r4[$i4] = $i5;

        $r6 = (java.lang.Object[]) $r3;

        $i5 = lengthof $r6;

        $i5 = $i5 + $i4;

        $i6 = $r1.<okio.Segment: int pos>;

        $r4[$i5] = $i6;

        $r1.<okio.Segment: boolean shared> = 1;

        $i4 = $i4 + 1;

        $r1 = $r1.<okio.Segment: okio.Segment next>;

        goto label5;

     label6:
        $r7 = new okio.SegmentedByteString;

        specialinvoke $r7.<okio.SegmentedByteString: void <init>(byte[][],int[])>($r3, $r4);

        return $r7;
    }

    public java.lang.String toString()
    {
        okio.Buffer $r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        $r0 := @this: okio.Buffer;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.ByteString snapshot()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String toString()>();

        return $r2;
    }

    public final okio.Segment writableSegment$third_party_java_src_okio_okio(int)
    {
        okio.Buffer $r0;
        int $i0, $i1;
        boolean $z0;
        okio.Segment $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        if $i0 > 8192 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label7;

        $r1 = $r0.<okio.Buffer: okio.Segment head>;

        if $r1 != null goto label3;

        $r1 = staticinvoke <okio.SegmentPool: okio.Segment take()>();

        $r2 = $r1;

        $r0.<okio.Buffer: okio.Segment head> = $r1;

        $r1.<okio.Segment: okio.Segment prev> = $r1;

        $r1.<okio.Segment: okio.Segment next> = $r1;

        goto label6;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r1 = $r1.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i1 = $r1.<okio.Segment: int limit>;

        $i0 = $i1 + $i0;

        if $i0 > 8192 goto label5;

        $z0 = $r1.<okio.Segment: boolean owner>;

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r2 = $r1;

        goto label6;

     label5:
        $r2 = staticinvoke <okio.SegmentPool: okio.Segment take()>();

        $r2 = virtualinvoke $r1.<okio.Segment: okio.Segment push(okio.Segment)>($r2);

     label6:
        return $r2;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = "unexpected capacity";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        okio.Buffer $r0;
        java.nio.ByteBuffer $r1;
        int $i0, $i1, $i2, $i3;
        okio.Segment $r2;
        byte[] $r3;
        long $l4, $l5;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $i2 = $i1;

     label1:
        if $i2 <= 0 goto label2;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(1);

        $i3 = $r2.<okio.Segment: int limit>;

        $i3 = 8192 - $i3;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i0 = $r2.<okio.Segment: int limit>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r3, $i0, $i3);

        $i2 = $i2 - $i3;

        $i0 = $r2.<okio.Segment: int limit>;

        $i3 = $i0 + $i3;

        $r2.<okio.Segment: int limit> = $i3;

        goto label1;

     label2:
        $l4 = $r0.<okio.Buffer: long size>;

        $l5 = (long) $i1;

        $l4 = $l4 + $l5;

        $r0.<okio.Buffer: long size> = $l4;

        return $i1;
    }

    public okio.Buffer write(okio.ByteString)
    {
        okio.Buffer $r0;
        okio.ByteString $r1;
        int $i0;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "byteString");

        $i0 = virtualinvoke $r1.<okio.ByteString: int size()>();

        virtualinvoke $r1.<okio.ByteString: void write$third_party_java_src_okio_okio(okio.Buffer,int,int)>($r0, 0, $i0);

        return $r0;
    }

    public okio.Buffer write(byte[])
    {
        okio.Buffer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $i0 = lengthof $r1;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r1, 0, $i0);

        return $r0;
    }

    public okio.Buffer write(byte[], int, int)
    {
        okio.Buffer $r0;
        int $i0, $i2, $i3, $i6, $i7;
        long $l1, $l4, $l5;
        byte[] $r1, $r3;
        okio.Segment $r2;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $i0 = lengthof $r1;

        $l4 = (long) $i0;

        $l5 = (long) $i2;

        $l1 = (long) $i3;

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l4, $l5, $l1);

        $i3 = $i3 + $i2;

     label1:
        if $i2 >= $i3 goto label2;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(1);

        $i0 = $i3 - $i2;

        $i6 = $r2.<okio.Segment: int limit>;

        $i6 = 8192 - $i6;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i6);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i7 = $r2.<okio.Segment: int limit>;

        $i0 = $i2 + $i6;

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r1, $r3, $i7, $i2, $i0);

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + $i6;

        $r2.<okio.Segment: int limit> = $i2;

        $i2 = $i0;

        goto label1;

     label2:
        $l4 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l1 = $l4 + $l1;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l1);

        return $r0;
    }

    public volatile okio.BufferedSink write(byte[])
    {
        okio.Buffer $r0;
        byte[] $r1;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: byte[];

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer write(byte[])>($r1);

        return $r0;
    }

    public void write(okio.Buffer, long)
    {
        okio.Buffer $r0, $r1;
        long $l0, $l1, $l5;
        boolean $z0;
        byte $b2;
        okio.Segment $r2, $r3;
        int $i3, $i4;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        if $r1 == $r0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label13;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l0);

     label03:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label12;

        $r2 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i3 = $r2.<okio.Segment: int limit>;

        $r2 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i4 = $r2.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l1 = (long) $i3;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label09;

        $r2 = $r0.<okio.Buffer: okio.Segment head>;

        if $r2 == null goto label04;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r2 = $r2.<okio.Segment: okio.Segment prev>;

        goto label05;

     label04:
        $r2 = null;

     label05:
        if $r2 == null goto label08;

        $z0 = $r2.<okio.Segment: boolean owner>;

        if $z0 == 0 goto label08;

        $i3 = $r2.<okio.Segment: int limit>;

        $l1 = (long) $i3;

        $l1 = $l1 + $l0;

        $z0 = $r2.<okio.Segment: boolean shared>;

        if $z0 == 0 goto label06;

        $i3 = 0;

        goto label07;

     label06:
        $i3 = $r2.<okio.Segment: int pos>;

     label07:
        $l5 = (long) $i3;

        $l1 = $l1 - $l5;

        $b2 = $l1 cmp 8192L;

        if $b2 > 0 goto label08;

        $r3 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i3 = (int) $l0;

        virtualinvoke $r3.<okio.Segment: void writeTo(okio.Segment,int)>($r2, $i3);

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l1 = $l1 - $l0;

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l1);

        $l1 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l0 = $l1 + $l0;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l0);

        return;

     label08:
        $r2 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i3 = (int) $l0;

        $r2 = virtualinvoke $r2.<okio.Segment: okio.Segment split(int)>($i3);

        $r1.<okio.Buffer: okio.Segment head> = $r2;

     label09:
        $r2 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i3 = $r2.<okio.Segment: int limit>;

        $i4 = $r2.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l1 = (long) $i3;

        $r3 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>();

        $r1.<okio.Buffer: okio.Segment head> = $r3;

        $r3 = $r0.<okio.Buffer: okio.Segment head>;

        if $r3 != null goto label10;

        $r0.<okio.Buffer: okio.Segment head> = $r2;

        $r2.<okio.Segment: okio.Segment prev> = $r2;

        $r3 = $r2.<okio.Segment: okio.Segment prev>;

        $r2.<okio.Segment: okio.Segment next> = $r3;

        goto label11;

     label10:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r3 = $r3.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r3.<okio.Segment: okio.Segment push(okio.Segment)>($r2);

        virtualinvoke $r2.<okio.Segment: void compact()>();

     label11:
        $l5 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l5 = $l5 - $l1;

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l5);

        $l5 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l5 = $l5 + $l1;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l5);

        $l0 = $l0 - $l1;

        goto label03;

     label12:
        return;

     label13:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = "source == this";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        goto label14;

     label14:
        throw $r4;
    }

    public okio.Buffer writeByte(int)
    {
        okio.Buffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        okio.Segment $r2;
        byte $b3;
        long $l4;

        $r0 := @this: okio.Buffer;

        $i1 := @parameter0: int;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(1);

        $r1 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $i0 = $i2 + 1;

        $r2.<okio.Segment: int limit> = $i0;

        $b3 = (byte) $i1;

        $r1[$i2] = $b3;

        $l4 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l4 = $l4 + 1L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l4);

        return $r0;
    }

    public volatile okio.BufferedSink writeByte(int)
    {
        okio.Buffer $r0;
        int $i0;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        return $r0;
    }

    public okio.Buffer writeHexadecimalUnsignedLong(long)
    {
        okio.Buffer $r0;
        long $l0, $l2, $l3;
        byte $b1;
        int $i4, $i5, $i6, $i7;
        okio.Segment $r1;
        byte[] $r2, $r3;

        $r0 := @this: okio.Buffer;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(48);

        return $r0;

     label1:
        $l2 = $l0 >>> 1;

        $l2 = $l2 | $l0;

        $l3 = $l2 >>> 2;

        $l2 = $l2 | $l3;

        $l3 = $l2 >>> 4;

        $l2 = $l2 | $l3;

        $l3 = $l2 >>> 8;

        $l2 = $l2 | $l3;

        $l3 = $l2 >>> 16;

        $l2 = $l2 | $l3;

        $l3 = $l2 >>> 32;

        $l2 = $l2 | $l3;

        $l3 = $l2 >>> 1;

        $l3 = $l3 & 6148914691236517205L;

        $l2 = $l2 - $l3;

        $l3 = $l2 >>> 2;

        $l3 = $l3 & 3689348814741910323L;

        $l2 = $l2 & 3689348814741910323L;

        $l2 = $l3 + $l2;

        $l3 = $l2 >>> 4;

        $l2 = $l3 + $l2;

        $l2 = $l2 & 1085102592571150095L;

        $l3 = $l2 >>> 8;

        $l2 = $l2 + $l3;

        $l3 = $l2 >>> 16;

        $l3 = $l2 + $l3;

        $l2 = $l3 & 63L;

        $l3 = $l3 >>> 32;

        $l3 = $l3 & 63L;

        $l2 = $l2 + $l3;

        $l2 = $l2 + 3L;

        $l2 = $l2 >> 2;

        $i4 = (int) $l2;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>($i4);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i5 = $r1.<okio.Segment: int limit>;

        $i5 = $i5 + $i4;

        $i5 = $i5 + -1;

        $i6 = $r1.<okio.Segment: int limit>;

     label2:
        if $i5 < $i6 goto label3;

        $r3 = staticinvoke <okio.internal._BufferKt: byte[] getHEX_DIGIT_BYTES()>();

        $l2 = 15L & $l0;

        $i7 = (int) $l2;

        $b1 = $r3[$i7];

        $r2[$i5] = $b1;

        $l0 = $l0 >>> 4;

        $i5 = $i5 + -1;

        goto label2;

     label3:
        $i5 = $r1.<okio.Segment: int limit>;

        $i5 = $i5 + $i4;

        $r1.<okio.Segment: int limit> = $i5;

        $l0 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l2 = (long) $i4;

        $l0 = $l0 + $l2;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l0);

        return $r0;
    }

    public okio.Buffer writeInt(int)
    {
        okio.Buffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        okio.Segment $r2;
        byte $b4;
        long $l5;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(4);

        $r1 = $r2.<okio.Segment: byte[] data>;

        $i1 = $r2.<okio.Segment: int limit>;

        $i2 = $i1 + 1;

        $i3 = $i0 >>> 24;

        $b4 = (byte) $i3;

        $r1[$i1] = $b4;

        $i1 = $i2 + 1;

        $i3 = $i0 >>> 16;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $i2 = $i1 + 1;

        $i3 = $i0 >>> 8;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r1[$i1] = $b4;

        $i0 = $i0 & 255;

        $b4 = (byte) $i0;

        $r1[$i2] = $b4;

        $i0 = $i2 + 1;

        $r2.<okio.Segment: int limit> = $i0;

        $l5 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l5 = $l5 + 4L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l5);

        return $r0;
    }

    public volatile okio.BufferedSink writeInt(int)
    {
        okio.Buffer $r0;
        int $i0;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeInt(int)>($i0);

        return $r0;
    }

    public okio.Buffer writeShort(int)
    {
        okio.Buffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        okio.Segment $r2;
        byte $b4;
        long $l5;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(2);

        $r1 = $r2.<okio.Segment: byte[] data>;

        $i1 = $r2.<okio.Segment: int limit>;

        $i2 = $i1 + 1;

        $i3 = $i0 >>> 8;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r1[$i1] = $b4;

        $i0 = $i0 & 255;

        $b4 = (byte) $i0;

        $r1[$i2] = $b4;

        $i0 = $i2 + 1;

        $r2.<okio.Segment: int limit> = $i0;

        $l5 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l5 = $l5 + 2L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l5);

        return $r0;
    }

    public volatile okio.BufferedSink writeShort(int)
    {
        okio.Buffer $r0;
        int $i0;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeShort(int)>($i0);

        return $r0;
    }

    public final okio.Buffer writeTo(java.io.OutputStream, long) throws java.io.IOException
    {
        okio.Buffer $r0;
        java.io.OutputStream $r1;
        long $l0, $l1, $l5;
        okio.Segment $r2, $r4;
        byte $b2;
        int $i3, $i4;
        byte[] $r3;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.io.OutputStream;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "out");

        $l1 = $r0.<okio.Buffer: long size>;

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l0);

        $r2 = $r0.<okio.Buffer: okio.Segment head>;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i3 = $r2.<okio.Segment: int limit>;

        $i4 = $r2.<okio.Segment: int pos>;

        $i3 = $i3 - $i4;

        $l1 = (long) $i3;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $i3 = (int) $l1;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i4 = $r2.<okio.Segment: int pos>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i4, $i3);

        $i4 = $r2.<okio.Segment: int pos>;

        $i4 = $i4 + $i3;

        $r2.<okio.Segment: int pos> = $i4;

        $l5 = $r0.<okio.Buffer: long size>;

        $l1 = (long) $i3;

        $l5 = $l5 - $l1;

        $r0.<okio.Buffer: long size> = $l5;

        $l0 = $l0 - $l1;

        $i3 = $r2.<okio.Segment: int pos>;

        $i4 = $r2.<okio.Segment: int limit>;

        if $i3 != $i4 goto label1;

        $r4 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>();

        $r0.<okio.Buffer: okio.Segment head> = $r4;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2);

        $r2 = $r4;

        goto label1;

     label2:
        return $r0;
    }

    public okio.Buffer writeUtf8(java.lang.String)
    {
        okio.Buffer $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r1, 0, $i0);

        return $r0;
    }

    public okio.Buffer writeUtf8(java.lang.String, int, int)
    {
        okio.Buffer $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i4, $i5;
        boolean $z0;
        char $c3, $c9;
        okio.Segment $r2;
        byte[] $r3;
        byte $b6;
        long $l7, $l8;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string");

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label23;

        if $i1 < $i0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        if $z0 == 0 goto label22;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 > $i2 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label21;

     label07:
        if $i0 >= $i1 goto label20;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c3 >= 128 goto label10;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(1);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 - $i0;

        $i4 = 8192 - $i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i4);

        $i5 = $i0 + 1;

        $i0 = $i0 + $i2;

        $b6 = (byte) $c3;

        $r3[$i0] = $b6;

        $i0 = $i5;

     label08:
        if $i0 >= $i4 goto label09;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c3 >= 128 goto label09;

        $i5 = $i0 + 1;

        $i0 = $i0 + $i2;

        $b6 = (byte) $c3;

        $r3[$i0] = $b6;

        $i0 = $i5;

        goto label08;

     label09:
        $i2 = $i2 + $i0;

        $i4 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 - $i4;

        $i4 = $r2.<okio.Segment: int limit>;

        $i4 = $i4 + $i2;

        $r2.<okio.Segment: int limit> = $i4;

        $l7 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l8 = (long) $i2;

        $l7 = $l7 + $l8;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l7);

        goto label07;

     label10:
        if $c3 >= 2048 goto label11;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(2);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $c9 = $c3 >> 6;

        $c9 = $c9 | 192;

        $b6 = (byte) $c9;

        $r3[$i2] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 1;

        $c3 = $c3 & 63;

        $c3 = $c3 | 128;

        $b6 = (byte) $c3;

        $r3[$i2] = $b6;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 2;

        $r2.<okio.Segment: int limit> = $i2;

        $l7 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l7 = $l7 + 2L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l7);

        $i0 = $i0 + 1;

        goto label07;

     label11:
        if $c3 < 55296 goto label19;

        if $c3 <= 57343 goto label12;

        goto label19;

     label12:
        $i2 = $i0 + 1;

        if $i2 >= $i1 goto label13;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        goto label14;

     label13:
        $c9 = 0;

     label14:
        if $c3 > 56319 goto label18;

        if $c9 < 56320 goto label15;

        if $c9 >= 57344 goto label15;

        $z0 = 1;

        goto label16;

     label15:
        $z0 = 0;

     label16:
        if $z0 != 0 goto label17;

        goto label18;

     label17:
        $c3 = $c3 & 1023;

        $i2 = $c3 << 10;

        $c3 = $c9 & 1023;

        $i2 = $i2 | $c3;

        $i2 = $i2 + 65536;

        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(4);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i4 = $r2.<okio.Segment: int limit>;

        $i5 = $i2 >> 18;

        $i5 = $i5 | 240;

        $b6 = (byte) $i5;

        $r3[$i4] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i4 = $r2.<okio.Segment: int limit>;

        $i4 = $i4 + 1;

        $i5 = $i2 >> 12;

        $i5 = $i5 & 63;

        $i5 = $i5 | 128;

        $b6 = (byte) $i5;

        $r3[$i4] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i4 = $r2.<okio.Segment: int limit>;

        $i4 = $i4 + 2;

        $i5 = $i2 >> 6;

        $i5 = $i5 & 63;

        $i5 = $i5 | 128;

        $b6 = (byte) $i5;

        $r3[$i4] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i4 = $r2.<okio.Segment: int limit>;

        $i4 = $i4 + 3;

        $i2 = $i2 & 63;

        $i2 = $i2 | 128;

        $b6 = (byte) $i2;

        $r3[$i4] = $b6;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 4;

        $r2.<okio.Segment: int limit> = $i2;

        $l7 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l7 = $l7 + 4L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l7);

        $i0 = $i0 + 2;

        goto label07;

     label18:
        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(63);

        $i0 = $i2;

        goto label07;

     label19:
        $r2 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(3);

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $c9 = $c3 >> 12;

        $c9 = $c9 | 224;

        $b6 = (byte) $c9;

        $r3[$i2] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 1;

        $c9 = $c3 >> 6;

        $c9 = 63 & $c9;

        $c9 = $c9 | 128;

        $b6 = (byte) $c9;

        $r3[$i2] = $b6;

        $r3 = $r2.<okio.Segment: byte[] data>;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 2;

        $c3 = $c3 & 63;

        $c3 = $c3 | 128;

        $b6 = (byte) $c3;

        $r3[$i2] = $b6;

        $i2 = $r2.<okio.Segment: int limit>;

        $i2 = $i2 + 3;

        $r2.<okio.Segment: int limit> = $i2;

        $l7 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l7 = $l7 + 3L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l7);

        $i0 = $i0 + 1;

        goto label07;

     label20:
        return $r0;

     label21:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex > string.length: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label22:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex < beginIndex: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label23:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beginIndex < 0: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        goto label24;

     label24:
        throw $r5;
    }

    public volatile okio.BufferedSink writeUtf8(java.lang.String)
    {
        okio.Buffer $r0;
        java.lang.String $r1;

        $r0 := @this: okio.Buffer;

        $r1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r1);

        return $r0;
    }

    public okio.Buffer writeUtf8CodePoint(int)
    {
        okio.Buffer $r0;
        int $i0, $i1, $i2;
        okio.Segment $r1;
        byte[] $r2;
        byte $b3;
        long $l4;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: okio.Buffer;

        $i0 := @parameter0: int;

        if $i0 >= 128 goto label1;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        return $r0;

     label1:
        if $i0 >= 2048 goto label2;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(2);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i2 = $i0 >> 6;

        $i2 = $i2 | 192;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 1;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i0 = $r1.<okio.Segment: int limit>;

        $i0 = $i0 + 2;

        $r1.<okio.Segment: int limit> = $i0;

        $l4 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l4 = $l4 + 2L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l4);

        return $r0;

     label2:
        $z0 = 0;

        if $i0 < 55296 goto label4;

        if $i0 >= 57344 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        goto label4;

     label4:
        if $z0 == 0 goto label5;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(63);

        return $r0;

     label5:
        if $i0 >= 65536 goto label6;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(3);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i2 = $i0 >> 12;

        $i2 = $i2 | 224;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 1;

        $i2 = $i0 >> 6;

        $i2 = $i2 & 63;

        $i2 = $i2 | 128;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 2;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i0 = $r1.<okio.Segment: int limit>;

        $i0 = $i0 + 3;

        $r1.<okio.Segment: int limit> = $i0;

        $l4 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l4 = $l4 + 3L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l4);

        return $r0;

     label6:
        if $i0 > 1114111 goto label7;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.Segment writableSegment$third_party_java_src_okio_okio(int)>(4);

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i2 = $i0 >> 18;

        $i2 = $i2 | 240;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 1;

        $i2 = $i0 >> 12;

        $i2 = $i2 & 63;

        $i2 = $i2 | 128;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 2;

        $i2 = $i0 >> 6;

        $i2 = $i2 & 63;

        $i2 = $i2 | 128;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        $i1 = $i1 + 3;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i0 = $r1.<okio.Segment: int limit>;

        $i0 = $i0 + 4;

        $r1.<okio.Segment: int limit> = $i0;

        $l4 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l4 = $l4 + 4L;

        virtualinvoke $r0.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l4);

        return $r0;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <okio._UtilKt: java.lang.String toHexString(int)>($i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected code point: 0x");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

okio.Buffer$outputStream$1
<okio.Buffer$outputStream$1: okio.Buffer this$0>
    void <init>(okio.Buffer)
    {
        okio.Buffer$outputStream$1 $r0;
        okio.Buffer $r1;

        $r0 := @this: okio.Buffer$outputStream$1;

        $r1 := @parameter0: okio.Buffer;

        $r0.<okio.Buffer$outputStream$1: okio.Buffer this$0> = $r1;

        specialinvoke $r0.<java.io.OutputStream: void <init>()>();

        return;
    }

    public void close()
    {
        okio.Buffer$outputStream$1 $r0;

        $r0 := @this: okio.Buffer$outputStream$1;

        return;
    }

    public void flush()
    {
        okio.Buffer$outputStream$1 $r0;

        $r0 := @this: okio.Buffer$outputStream$1;

        return;
    }

    public java.lang.String toString()
    {
        okio.Buffer$outputStream$1 $r0;
        okio.Buffer $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: okio.Buffer$outputStream$1;

        $r1 = $r0.<okio.Buffer$outputStream$1: okio.Buffer this$0>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".outputStream()");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void write(int)
    {
        okio.Buffer$outputStream$1 $r0;
        int $i0;
        okio.Buffer $r1;

        $r0 := @this: okio.Buffer$outputStream$1;

        $i0 := @parameter0: int;

        $r1 = $r0.<okio.Buffer$outputStream$1: okio.Buffer this$0>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        return;
    }

    public void write(byte[], int, int)
    {
        okio.Buffer$outputStream$1 $r0;
        byte[] $r1;
        int $i0, $i1;
        okio.Buffer $r2;

        $r0 := @this: okio.Buffer$outputStream$1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "data");

        $r2 = $r0.<okio.Buffer$outputStream$1: okio.Buffer this$0>;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r1, $i0, $i1);

        return;
    }

okio.Buffer$UnsafeCursor
<okio.Buffer$UnsafeCursor: okio.Buffer buffer>
<okio.Buffer$UnsafeCursor: byte[] data>
<okio.Buffer$UnsafeCursor: int end>
<okio.Buffer$UnsafeCursor: long offset>
<okio.Buffer$UnsafeCursor: okio.Segment segment>
<okio.Buffer$UnsafeCursor: int start>
    public void <init>()
    {
        okio.Buffer$UnsafeCursor $r0;

        $r0 := @this: okio.Buffer$UnsafeCursor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<okio.Buffer$UnsafeCursor: long offset> = -1L;

        $r0.<okio.Buffer$UnsafeCursor: int start> = -1;

        $r0.<okio.Buffer$UnsafeCursor: int end> = -1;

        return;
    }

    public void close()
    {
        okio.Buffer$UnsafeCursor $r0;
        java.lang.String $r1;
        okio.Buffer $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        $r0 := @this: okio.Buffer$UnsafeCursor;

        $r2 = $r0.<okio.Buffer$UnsafeCursor: okio.Buffer buffer>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r0.<okio.Buffer$UnsafeCursor: okio.Buffer buffer> = null;

        virtualinvoke $r0.<okio.Buffer$UnsafeCursor: void setSegment$third_party_java_src_okio_okio(okio.Segment)>(null);

        $r0.<okio.Buffer$UnsafeCursor: long offset> = -1L;

        $r0.<okio.Buffer$UnsafeCursor: byte[] data> = null;

        $r0.<okio.Buffer$UnsafeCursor: int start> = -1;

        $r0.<okio.Buffer$UnsafeCursor: int end> = -1;

        return;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r1 = "not attached to a buffer";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public final void setSegment$third_party_java_src_okio_okio(okio.Segment)
    {
        okio.Buffer$UnsafeCursor $r0;
        okio.Segment $r1;

        $r0 := @this: okio.Buffer$UnsafeCursor;

        $r1 := @parameter0: okio.Segment;

        $r0.<okio.Buffer$UnsafeCursor: okio.Segment segment> = $r1;

        return;
    }

