androidx.compose.ui.layout.LayoutNodeSubcompositionsState
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.runtime.CompositionContext compositionContext>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope scope>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.lang.String NoIntrinsicsMessage>
    public void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.layout.SubcomposeSlotReusePolicy)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy r2;
        java.util.LinkedHashMap $r3, $r5, $r8;
        java.util.Map $r4, $r6, $r9;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope $r7;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet $r10;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.layout.SubcomposeSlotReusePolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "root");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slotReusePolicy");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root> = r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy> = r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = (java.util.Map) $r3;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState> = $r4;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        $r6 = (java.util.Map) $r5;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode> = $r6;

        $r7 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        specialinvoke $r7.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>(r0);

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope scope> = $r7;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        $r9 = (java.util.Map) $r8;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap> = $r9;

        $r10 = new androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        specialinvoke $r10.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: void <init>(java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet> = $r10;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.lang.String NoIntrinsicsMessage> = "Asking for intrinsic measurements of SubcomposeLayout layouts is not supported. This includes components that are built on top of SubcomposeLayout, such as lazy lists, BoxWithConstraints, TabRow, etc. To mitigate this:\n- if intrinsic measurements are used to achieve \'match parent\' sizing,, consider replacing the parent of the component with a custom layout which controls the order in which children are measured, making intrinsic measurement not needed\n- adding a size modifier to the component, in order to fast return the queried intrinsic measurement.";

        return;
    }

    public final androidx.compose.runtime.CompositionContext getCompositionContext()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.runtime.CompositionContext $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.runtime.CompositionContext compositionContext>;

        return $r1;
    }

    public final void setCompositionContext(androidx.compose.runtime.CompositionContext)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.runtime.CompositionContext r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.runtime.CompositionContext;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.runtime.CompositionContext compositionContext> = r1;

        return;
    }

    public final androidx.compose.ui.layout.SubcomposeSlotReusePolicy getSlotReusePolicy()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>;

        return $r1;
    }

    public final void setSlotReusePolicy(androidx.compose.ui.layout.SubcomposeSlotReusePolicy)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy r1, $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.ui.layout.SubcomposeSlotReusePolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>;

        if $r2 == r1 goto label1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy> = r1;

        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void disposeOrReuseStartingFromIndex(int)>(0);

     label1:
        return;
    }

    public final java.util.List subcompose(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        java.lang.Object r1, r5, $r21, $r31;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.node.LayoutNode$LayoutState r3, $r10, $r27;
        androidx.compose.ui.node.LayoutNode r4, r6, r8, $r9, $r11, $r30;
        java.lang.String r7, $r19, $r24, $r26, $r28;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List $r12, $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        java.util.Map $r20, $r29;
        java.lang.IllegalStateException $r23, $r25;
        boolean $z1, $z4;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        $r9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        r3 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r10 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if r3 == $r10 goto label01;

        $r27 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        if r3 != $r27 goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 != 0 goto label04;

        $r28 = "subcompose can only be used inside the measure or layout blocks";

        $r25 = new java.lang.IllegalStateException;

        $r26 = virtualinvoke $r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label04:
        $r29 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode>;

        r5 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r5 != null goto label10;

        $r20 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r6 = (androidx.compose.ui.node.LayoutNode) $r21;

        if r6 == null goto label08;

        $i7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        if $i7 <= 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        if $z4 != 0 goto label07;

        r7 = "Check failed.";

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label07:
        i0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $i8 = i0 + -1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount> = $i8;

        $r30 = r6;

        goto label09;

     label08:
        $r30 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode takeNodeFromReusables(java.lang.Object)>(r1);

        if $r30 != null goto label09;

        $i6 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        $r30 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode createNodeAt(int)>($i6);

     label09:
        r8 = $r30;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        $r31 = r8;

        goto label11;

     label10:
        $r31 = r5;

     label11:
        r4 = (androidx.compose.ui.node.LayoutNode) $r31;

        $r11 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r12 = virtualinvoke $r11.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i9 = interfaceinvoke $r12.<java.util.List: int indexOf(java.lang.Object)>(r4);

        $i1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        if $i9 >= $i1 goto label12;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already used. If you are using LazyColumn/Row please make sure you provide a unique key for each item.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label12:
        $i2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        if $i2 == $i9 goto label13;

        $i4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void move$default(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int,int,int,int,java.lang.Object)>(r0, $i9, $i4, 0, 4, null);

     label13:
        $i5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        $i3 = $i5 + 1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex> = $i3;

        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void subcompose(androidx.compose.ui.node.LayoutNode,java.lang.Object,kotlin.jvm.functions.Function2)>(r4, r1, r2);

        $r13 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: java.util.List getChildMeasurables$ui_release()>();

        return $r13;
    }

    private final void subcompose(androidx.compose.ui.node.LayoutNode, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.ui.node.LayoutNode r1;
        java.lang.Object r2, r5, $r14;
        kotlin.jvm.functions.Function2 r3, $r7, $r10;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r4, $r8;
        androidx.compose.runtime.Composition $r6;
        boolean $z1, $z3;
        androidx.compose.ui.layout.ComposableSingletons$SubcomposeLayoutKt $r9;
        java.util.Map $r12;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: kotlin.jvm.functions.Function2;

        $r12 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        r5 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r5 != null goto label1;

        $r8 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r9 = <androidx.compose.ui.layout.ComposableSingletons$SubcomposeLayoutKt: androidx.compose.ui.layout.ComposableSingletons$SubcomposeLayoutKt INSTANCE>;

        $r10 = virtualinvoke $r9.<androidx.compose.ui.layout.ComposableSingletons$SubcomposeLayoutKt: kotlin.jvm.functions.Function2 getLambda-1$ui_release()>();

        specialinvoke $r8.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void <init>(java.lang.Object,kotlin.jvm.functions.Function2,androidx.compose.runtime.Composition,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r2, $r10, null, 4, null);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        $r14 = $r8;

        goto label2;

     label1:
        $r14 = r5;

     label2:
        r4 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r14;

        $r6 = virtualinvoke r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition getComposition()>();

        if $r6 == null goto label3;

        $z3 = interfaceinvoke $r6.<androidx.compose.runtime.Composition: boolean getHasInvalidations()>();

        goto label4;

     label3:
        $z3 = 1;

     label4:
        $r7 = virtualinvoke r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 getContent()>();

        if $r7 != r3 goto label5;

        if $z3 != 0 goto label5;

        $z1 = virtualinvoke r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: boolean getForceRecompose()>();

        if $z1 == 0 goto label6;

     label5:
        virtualinvoke r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setContent(kotlin.jvm.functions.Function2)>(r3);

        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void subcompose(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState)>(r1, r4);

        virtualinvoke r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setForceRecompose(boolean)>(0);

     label6:
        return;
    }

    private final void subcompose(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0, r6;
        androidx.compose.ui.node.LayoutNode r1, r7;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r2;
        androidx.compose.runtime.snapshots.Snapshot$Companion r3;
        androidx.compose.runtime.snapshots.Snapshot r4, r5, r20;
        kotlin.jvm.functions.Function2 r8, $r13;
        androidx.compose.runtime.Composition $r9, $r14;
        androidx.compose.runtime.CompositionContext $r10;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1 $r11;
        androidx.compose.runtime.internal.ComposableLambda $r12;
        java.lang.IllegalStateException $r15;
        java.lang.String $r16, $r17;
        java.lang.Throwable $r18, $r19, r22, r24;
        kotlin.Unit r21, r23;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r3 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        r4 = virtualinvoke r3.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.Snapshot createNonObservableSnapshot()>();

     label01:
        r20 = r4;

        r5 = virtualinvoke r20.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label02:
        r6 = r0;

        r7 = r6.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r7, 1);

        r8 = virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 getContent()>();

        $r9 = virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition getComposition()>();

        $r10 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.runtime.CompositionContext compositionContext>;

        if $r10 != null goto label03;

        $r15 = new java.lang.IllegalStateException;

        $r16 = "parent composition reference not set";

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r15;

     label03:
        $r11 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1;

        specialinvoke $r11.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState,kotlin.jvm.functions.Function2)>(r2, r8);

        $r12 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: androidx.compose.runtime.internal.ComposableLambda composableLambdaInstance(int,boolean,java.lang.Object)>(-34810602, 1, $r11);

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        $r14 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.runtime.Composition subcomposeInto(androidx.compose.runtime.Composition,androidx.compose.ui.node.LayoutNode,androidx.compose.runtime.CompositionContext,kotlin.jvm.functions.Function2)>($r9, r1, $r10, $r13);

        virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setComposition(androidx.compose.runtime.Composition)>($r14);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r7, 0);

        r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        virtualinvoke r20.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        goto label07;

     label05:
        $r19 := @caughtexception;

        r22 = $r19;

     label06:
        virtualinvoke r20.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        throw r22;

     label07:
        r23 = r21;

     label08:
        virtualinvoke r4.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

        goto label11;

     label09:
        $r18 := @caughtexception;

        r24 = $r18;

     label10:
        virtualinvoke r4.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

        throw r24;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final androidx.compose.runtime.Composition subcomposeInto(androidx.compose.runtime.Composition, androidx.compose.ui.node.LayoutNode, androidx.compose.runtime.CompositionContext, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.runtime.Composition r1, r5, $r6;
        androidx.compose.ui.node.LayoutNode r2;
        androidx.compose.runtime.CompositionContext r3;
        kotlin.jvm.functions.Function2 r4;
        boolean $z1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: androidx.compose.runtime.Composition;

        r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        r3 := @parameter2: androidx.compose.runtime.CompositionContext;

        r4 := @parameter3: kotlin.jvm.functions.Function2;

        if r1 == null goto label1;

        $z1 = interfaceinvoke r1.<androidx.compose.runtime.Composition: boolean isDisposed()>();

        if $z1 == 0 goto label2;

     label1:
        $r6 = staticinvoke <androidx.compose.ui.platform.Wrapper_androidKt: androidx.compose.runtime.Composition createSubcomposition(androidx.compose.ui.node.LayoutNode,androidx.compose.runtime.CompositionContext)>(r2, r3);

        goto label3;

     label2:
        $r6 = r1;

     label3:
        r5 = $r6;

        interfaceinvoke r5.<androidx.compose.runtime.Composition: void setContent(kotlin.jvm.functions.Function2)>(r4);

        return r5;
    }

    private final java.lang.Object getSlotIdAtIndex(int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        int i0;
        androidx.compose.ui.node.LayoutNode r1, $r2;
        java.util.List $r3;
        java.lang.Object $r4, $r6, $r8;
        java.util.Map $r5;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $r7;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r1 = (androidx.compose.ui.node.LayoutNode) $r4;

        $r5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r7 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r6;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object getSlotId()>();

        return $r8;
    }

    public final void disposeOrReuseStartingFromIndex(int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0, r24;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        androidx.compose.ui.node.LayoutNode r1, r4, $r5, $r10, $r19;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r2;
        java.lang.Object r3, $r12, $r14, $r23;
        java.util.List $r6, $r11;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet $r7, $r8, $r15, $r22;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r9;
        java.util.Map $r13, $r16, $r25;
        boolean $z3, z5;
        androidx.compose.runtime.Composition $r18;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r21;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter0: int;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount> = 0;

        $r5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $i4 = $i2 - $i3;

        i1 = $i4 - 1;

        if i0 > i1 goto label7;

        $r7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet>;

        virtualinvoke $r7.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: void clear()>();

        i6 = i0;

        if i6 > i1 goto label2;

     label1:
        $r22 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet>;

        $r23 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.lang.Object getSlotIdAtIndex(int)>(i6);

        virtualinvoke $r22.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: boolean add$ui_release(java.lang.Object)>($r23);

        if i6 == i1 goto label2;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>;

        $r8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet>;

        interfaceinvoke $r9.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy: void getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet)>($r8);

        z5 = 0;

        i7 = i1;

     label3:
        if i7 < i0 goto label7;

        $r10 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i7);

        r1 = (androidx.compose.ui.node.LayoutNode) $r12;

        $r13 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        r2 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r14;

        r3 = virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object getSlotId()>();

        $r15 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet reusableSlotIdsSet>;

        $z3 = virtualinvoke $r15.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: boolean contains(java.lang.Object)>(r3);

        if $z3 == 0 goto label4;

        $r21 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r21);

        i8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        $i5 = i8 + 1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount> = $i5;

        virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setActive(boolean)>(0);

        goto label6;

     label4:
        r24 = r0;

        r4 = r24.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r4, 1);

        $r16 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r18 = virtualinvoke r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition getComposition()>();

        if $r18 == null goto label5;

        interfaceinvoke $r18.<androidx.compose.runtime.Composition: void dispose()>();

        goto label5;

     label5:
        $r19 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r19.<androidx.compose.ui.node.LayoutNode: void removeAt$ui_release(int,int)>(i7, 1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r4, 0);

     label6:
        $r25 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        i9 = i7;

        i7 = i9 + -1;

        goto label3;

     label7:
        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        return;
    }

    public final void makeSureStateIsConsistent()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        java.util.Map $r1, $r6, $r11, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        androidx.compose.ui.node.LayoutNode $r2, $r4, $r17, $r31;
        java.util.List $r3, $r5, $r18, $r32;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r15, $r16, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r29, $r30, $r33, $r34;
        java.lang.IllegalArgumentException $r13, $r24, $r35;
        java.lang.String $r14, $r25, $r36, $r37, $r38, $r39;
        boolean $z0, $z2, $z4;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistency between the count of nodes tracked by the state (");

        $r28 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $i14 = interfaceinvoke $r28.<java.util.Map: int size()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and the children count on the SubcomposeLayout (");

        $r31 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r32 = virtualinvoke $r31.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i15 = interfaceinvoke $r32.<java.util.List: int size()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). Are you trying to use the state of the disposed SubcomposeLayout?");

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = new java.lang.IllegalArgumentException;

        $r36 = virtualinvoke $r37.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label3:
        $r4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        $i5 = $i2 - $i3;

        $i4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $i6 = $i5 - $i4;

        if $i6 < 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        if $z2 != 0 goto label6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect state. Total children ");

        $r17 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r18 = virtualinvoke $r17.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i11 = interfaceinvoke $r18.<java.util.List: int size()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Reusable children ");

        $i12 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Precomposed children ");

        $i13 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r38 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label6:
        $r6 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        $i7 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $i8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        if $i7 != $i8 goto label7;

        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        if $z4 != 0 goto label9;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect state. Precomposed children ");

        $i9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Map size ");

        $r11 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        $i10 = interfaceinvoke $r11.<java.util.Map: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r39 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r39.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label9:
        return;
    }

    private final androidx.compose.ui.node.LayoutNode takeNodeFromReusables(java.lang.Object)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        java.lang.Object r1, $r6, $r8, $r12, $r14, $r16, $r17;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        androidx.compose.ui.node.LayoutNode $r2, $r4, $r10, r18, $r20, r21;
        java.util.List $r3, $r5, $r11;
        java.util.Map $r7, $r13;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r9;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r15;
        boolean $z0, $z1;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r19, r22;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: java.lang.Object;

        $i2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        if $i2 != 0 goto label01;

        return null;

     label01:
        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        i0 = $i3 - $i4;

        $i5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        i1 = i0 - $i5;

        i7 = i0 - 1;

        i8 = -1;

     label02:
        if i7 < i1 goto label04;

        $r17 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.lang.Object getSlotIdAtIndex(int)>(i7);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r17, r1);

        if $z1 == 0 goto label03;

        i8 = i7;

        goto label04;

     label03:
        i7 = i7 + -1;

        goto label02;

     label04:
        if i8 != -1 goto label07;

        i7 = i0 - 1;

     label05:
        if i7 < i1 goto label07;

        $r10 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i7);

        r18 = (androidx.compose.ui.node.LayoutNode) $r12;

        $r13 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        r19 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r14;

        $r15 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>;

        $r16 = virtualinvoke r19.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object getSlotId()>();

        $z0 = interfaceinvoke $r15.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy: boolean areCompatible(java.lang.Object,java.lang.Object)>(r1, $r16);

        if $z0 == 0 goto label06;

        virtualinvoke r19.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setSlotId(java.lang.Object)>(r1);

        i8 = i7;

        goto label07;

     label06:
        i7 = i7 + -1;

        goto label05;

     label07:
        if i8 != -1 goto label08;

        $r20 = (androidx.compose.ui.node.LayoutNode) null;

        goto label10;

     label08:
        if i7 == i1 goto label09;

        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void move(int,int,int)>(i7, i1, 1);

     label09:
        i9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        $i6 = i9 + -1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount> = $i6;

        $r4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r21 = (androidx.compose.ui.node.LayoutNode) $r6;

        $r7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        r22 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r8;

        virtualinvoke r22.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setActive(boolean)>(1);

        virtualinvoke r22.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setForceRecompose(boolean)>(1);

        $r9 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r9.<androidx.compose.runtime.snapshots.Snapshot$Companion: void sendApplyNotifications()>();

        $r20 = r21;

     label10:
        return $r20;
    }

    public final androidx.compose.ui.layout.MeasurePolicy createMeasurePolicy(kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        kotlin.jvm.functions.Function2 r1;
        java.lang.String r2;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1 $r3;
        androidx.compose.ui.layout.MeasurePolicy $r4;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.lang.String NoIntrinsicsMessage>;

        $r3 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1;

        specialinvoke $r3.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,kotlin.jvm.functions.Function2,java.lang.String)>(r0, r1, r2);

        $r4 = (androidx.compose.ui.layout.MeasurePolicy) $r3;

        return $r4;
    }

    public final androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle precompose(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        java.lang.Object r1, r5, $r19;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.node.LayoutNode r3, r6, r7, $r9, $r12, $r14, $r16, r17, r18;
        java.util.Map $r4, $r8;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z3;
        java.util.List $r10, $r13, $r15;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1 $r20;
        androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle $r21;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        $r8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode>;

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z3 != 0 goto label5;

        $r4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r5 != null goto label3;

        r6 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode takeNodeFromReusables(java.lang.Object)>(r1);

        if r6 == null goto label1;

        $r12 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r13 = virtualinvoke $r12.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        i5 = interfaceinvoke $r13.<java.util.List: int indexOf(java.lang.Object)>(r6);

        $r14 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i3 = interfaceinvoke $r15.<java.util.List: int size()>();

        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void move(int,int,int)>(i5, $i3, 1);

        i6 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $i4 = i6 + 1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount> = $i4;

        $r16 = r6;

        goto label2;

     label1:
        $r9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $r10 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        r17 = specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode createNodeAt(int)>($i1);

        r18 = r17;

        i0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        $i2 = i0 + 1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount> = $i2;

        $r16 = r17;

     label2:
        r7 = $r16;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

        $r19 = r7;

        goto label4;

     label3:
        $r19 = r5;

     label4:
        r3 = (androidx.compose.ui.node.LayoutNode) $r19;

        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void subcompose(androidx.compose.ui.node.LayoutNode,java.lang.Object,kotlin.jvm.functions.Function2)>(r3, r1, r2);

     label5:
        $r20 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1;

        specialinvoke $r20.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,java.lang.Object)>(r0, r1);

        $r21 = (androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle) $r20;

        return $r21;
    }

    public final void forceRecomposeChildren()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        java.util.Map $r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r4;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r5;
        java.util.Set $r6;
        boolean $z2, $z3;
        androidx.compose.ui.node.LayoutNode $r7, $r8;
        java.lang.Object $r9, $r10;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r6 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        r4 = r3;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) $r10;

        virtualinvoke r5.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void setForceRecompose(boolean)>(1);

        goto label1;

     label2:
        $r7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        $z3 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z3 != 0 goto label3;

        $r8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r8, 0, 1, null);

     label3:
        return;
    }

    private final androidx.compose.ui.node.LayoutNode createNodeAt(int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0, r3;
        int i0;
        androidx.compose.ui.node.LayoutNode r1, r2, r4, $r5, $r6;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter0: int;

        $r5 = new androidx.compose.ui.node.LayoutNode;

        specialinvoke $r5.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(1, 0, 2, null);

        r1 = $r5;

        r2 = r1;

        r3 = r0;

        r4 = r3.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r4, 1);

        $r6 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: void insertAt$ui_release(int,androidx.compose.ui.node.LayoutNode)>(i0, r2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r4, 0);

        return r1;
    }

    private final void move(int, int, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0, r1;
        int i0, i1, i2;
        androidx.compose.ui.node.LayoutNode r2, $r3;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0;

        r2 = r1.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 1);

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: void move$ui_release(int,int,int)>(i0, i1, i2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 0);

        return;
    }

    static void move$default(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int, int, int, int, java.lang.Object)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        int i0, i1, i2, $i3, i4;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i2 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i3 = i2 & 4;

        if $i3 == 0 goto label1;

        i4 = 1;

     label1:
        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void move(int,int,int)>(i0, i1, i4);

        return;
    }

    private final void ignoreRemeasureRequests(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.node.LayoutNode r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 1);

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 0);

        return;
    }

    public final void disposeCurrentNodes()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r0;
        androidx.compose.ui.node.LayoutNode r1, $r8;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r5;
        java.util.Map $r6, $r9, $r10, $r11;
        java.util.Collection $r7;
        boolean $z4;
        androidx.compose.runtime.Composition $r12;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r1, 1);

        $r6 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r2 = (java.lang.Iterable) $r7;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState) r4;

        $r12 = virtualinvoke r5.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition getComposition()>();

        if $r12 == null goto label2;

        interfaceinvoke $r12.<androidx.compose.runtime.Composition: void dispose()>();

        goto label2;

     label2:
        goto label1;

     label3:
        $r8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: void removeAll$ui_release()>();

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r1, 0);

        $r9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map nodeToNodeState>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        $r10 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map slotIdToNode>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount> = 0;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount> = 0;

        $r11 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        interfaceinvoke $r11.<java.util.Map: void clear()>();

        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        return;
    }

    public static final androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope access$getScope$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope $r1;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope scope>;

        return $r1;
    }

    public static final void access$setCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter1: int;

        $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex> = i0;

        return;
    }

    public static final int access$getCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $i0 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int currentIndex>;

        return $i0;
    }

    public static final java.util.Map access$getPrecomposeMap$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        java.util.Map $r1;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map precomposeMap>;

        return $r1;
    }

    public static final int access$getPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $i0 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount>;

        return $i0;
    }

    public static final androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        androidx.compose.ui.node.LayoutNode $r1;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r1 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode root>;

        return $r1;
    }

    public static final int access$getReusableCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $i0 = $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount>;

        return $i0;
    }

    public static final void access$setReusableCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter1: int;

        $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int reusableCount> = i0;

        return;
    }

    public static final void access$setPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter1: int;

        $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int precomposedCount> = i0;

        return;
    }

    public static final void access$move(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int, int, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r0;
        int i0, i1, i2;

        $r0 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke $r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void move(int,int,int)>(i0, i1, i2);

        return;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: int $indexAfterMeasure>
    void <init>(androidx.compose.ui.layout.MeasureResult, androidx.compose.ui.layout.LayoutNodeSubcompositionsState, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r2;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureResult;

        $r2 := @parameter1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $i0 := @parameter2: int;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result> = $r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0> = $r2;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: int $indexAfterMeasure> = $i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getWidth()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureResult: int getWidth()>();

        return $i0;
    }

    public int getHeight()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureResult: int getHeight()>();

        return $i0;
    }

    public java.util.Map getAlignmentLines()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        java.util.Map $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result>;

        $r2 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureResult: java.util.Map getAlignmentLines()>();

        return $r2;
    }

    public void placeChildren()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 r0;
        int $i0, $i1;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1, $r3, $r4;
        androidx.compose.ui.layout.MeasureResult $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: int $indexAfterMeasure>;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void access$setCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int)>($r1, $i0);

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.MeasureResult $result>;

        interfaceinvoke $r2.<androidx.compose.ui.layout.MeasureResult: void placeChildren()>();

        $r4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i1 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r3);

        virtualinvoke $r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void disposeOrReuseStartingFromIndex(int)>($i1);

        return;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: kotlin.jvm.functions.Function2 $block>
    void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, kotlin.jvm.functions.Function2, java.lang.String)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1 r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.String $r3;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 := @parameter2: java.lang.String;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0> = $r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: kotlin.jvm.functions.Function2 $block> = $r2;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: void <init>(java.lang.String)>($r3);

        return;
    }

    public androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope, java.util.List, long)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1 r0;
        androidx.compose.ui.layout.MeasureScope $r1;
        java.util.List r2;
        long l0;
        androidx.compose.ui.layout.MeasureResult r3, $r20;
        int i1;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r4, $r7, $r9, $r11, $r12, $r17, $r19;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope $r5, $r8, $r10, $r14;
        androidx.compose.ui.unit.LayoutDirection $r6;
        float $f0, $f1;
        kotlin.jvm.functions.Function2 $r13;
        androidx.compose.ui.unit.Constraints $r15;
        java.lang.Object $r16;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1 $r18;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureScope;

        r2 := @parameter1: java.util.List;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$measure");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r4 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r5 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope access$getScope$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r4);

        $r6 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureScope: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        virtualinvoke $r5.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)>($r6);

        $r7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r8 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope access$getScope$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r7);

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureScope: float getDensity()>();

        virtualinvoke $r8.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: void setDensity(float)>($f0);

        $r9 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r10 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope access$getScope$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r9);

        $f1 = interfaceinvoke $r1.<androidx.compose.ui.layout.MeasureScope: float getFontScale()>();

        virtualinvoke $r10.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: void setFontScale(float)>($f1);

        $r11 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void access$setCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int)>($r11, 0);

        $r13 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: kotlin.jvm.functions.Function2 $block>;

        $r12 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r14 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope access$getScope$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r12);

        $r15 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l0);

        $r16 = interfaceinvoke $r13.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r14, $r15);

        r3 = (androidx.compose.ui.layout.MeasureResult) $r16;

        $r17 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        i1 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getCurrentIndex$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r17);

        $r18 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1;

        $r19 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        specialinvoke $r18.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$createMeasurePolicy$1$measure$1: void <init>(androidx.compose.ui.layout.MeasureResult,androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int)>(r3, $r19, i1);

        $r20 = (androidx.compose.ui.layout.MeasureResult) $r18;

        return $r20;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object slotId>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 content>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition composition>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: boolean forceRecompose>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.MutableState active$delegate>
    public void <init>(java.lang.Object, kotlin.jvm.functions.Function2, androidx.compose.runtime.Composition)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.runtime.Composition r3;
        java.lang.Boolean $r4;
        androidx.compose.runtime.MutableState $r5;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        r3 := @parameter2: androidx.compose.runtime.Composition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object slotId> = r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 content> = r2;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition composition> = r3;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r4, null, 2, null);

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.MutableState active$delegate> = $r5;

        return;
    }

    public void <init>(java.lang.Object, kotlin.jvm.functions.Function2, androidx.compose.runtime.Composition, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        androidx.compose.runtime.Composition r4;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        r4 := @parameter2: androidx.compose.runtime.Composition;

        i0 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        specialinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: void <init>(java.lang.Object,kotlin.jvm.functions.Function2,androidx.compose.runtime.Composition)>(r1, r2, r4);

        return;
    }

    public final java.lang.Object getSlotId()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object slotId>;

        return $r1;
    }

    public final void setSlotId(java.lang.Object)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: java.lang.Object slotId> = r1;

        return;
    }

    public final kotlin.jvm.functions.Function2 getContent()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 content>;

        return $r1;
    }

    public final void setContent(kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        kotlin.jvm.functions.Function2 r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: kotlin.jvm.functions.Function2 content> = r1;

        return;
    }

    public final androidx.compose.runtime.Composition getComposition()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        androidx.compose.runtime.Composition $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition composition>;

        return $r1;
    }

    public final void setComposition(androidx.compose.runtime.Composition)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        androidx.compose.runtime.Composition r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        r1 := @parameter0: androidx.compose.runtime.Composition;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.Composition composition> = r1;

        return;
    }

    public final boolean getForceRecompose()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $z0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: boolean forceRecompose>;

        return $z0;
    }

    public final void setForceRecompose(boolean)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: boolean forceRecompose> = z0;

        return;
    }

    public final boolean getActive()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.MutableState active$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public final void setActive(boolean)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState r0;
        boolean z0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Boolean r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: androidx.compose.runtime.MutableState active$delegate>;

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: java.lang.Object $slotId>
    void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState, java.lang.Object)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1 r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1;

        $r1 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r2 := @parameter1: java.lang.Object;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0> = $r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: java.lang.Object $slotId> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void dispose()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1 r0;
        androidx.compose.ui.node.LayoutNode r1, $r9, $r12, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r2, $r3, $r7, $r8, $r11, $r14, $r15, $r18, $r19, $r20, $r21, r28, r29;
        java.util.Map $r4;
        java.lang.Object $r5, $r6;
        java.util.List $r10, $r13, $r17;
        java.lang.IllegalStateException $r22, $r24;
        java.lang.String $r23, $r25, r26, r27;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1;

        $r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        virtualinvoke $r2.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r4 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map access$getPrecomposeMap$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r3);

        $r5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: java.lang.Object $slotId>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        r1 = (androidx.compose.ui.node.LayoutNode) $r6;

        if r1 == null goto label7;

        $r7 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i1 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r7);

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r26 = "Check failed.";

        $r24 = new java.lang.IllegalStateException;

        $r25 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label3:
        $r8 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r9 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r8);

        $r10 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        i0 = interfaceinvoke $r10.<java.util.List: int indexOf(java.lang.Object)>(r1);

        $r11 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r12 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r11);

        $r13 = virtualinvoke $r12.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r14 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i3 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r14);

        $i4 = $i2 - $i3;

        if i0 < $i4 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 != 0 goto label6;

        r27 = "Check failed.";

        $r22 = new java.lang.IllegalStateException;

        $r23 = virtualinvoke r27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label6:
        r28 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        i11 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getReusableCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>(r28);

        $i5 = i11 + 1;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void access$setReusableCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int)>(r28, $i5);

        r29 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        i12 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>(r29);

        $i6 = i12 + -1;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void access$setPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int)>(r29, $i6);

        $r15 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r16 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r15);

        $r17 = virtualinvoke $r16.<androidx.compose.ui.node.LayoutNode: java.util.List getFoldedChildren$ui_release()>();

        $i7 = interfaceinvoke $r17.<java.util.List: int size()>();

        $r18 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i8 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getPrecomposedCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r18);

        $i9 = $i7 - $i8;

        $r19 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $i10 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: int access$getReusableCount$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r19);

        i13 = $i9 - $i10;

        $r20 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void access$move(androidx.compose.ui.layout.LayoutNodeSubcompositionsState,int,int,int)>($r20, i0, i13, 1);

        $r21 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        virtualinvoke $r21.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void disposeOrReuseStartingFromIndex(int)>(i13);

     label7:
        return;
    }

    public int getPlaceablesCount()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1 r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        androidx.compose.ui.node.LayoutNode $r5;
        java.util.List $r6;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r2 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map access$getPrecomposeMap$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r1);

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: java.lang.Object $slotId>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.compose.ui.node.LayoutNode) $r4;

        if $r5 == null goto label1;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        if $r6 == null goto label1;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void premeasure-0kLqBqw(int, long)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1 r0;
        int i0, i2;
        long l1;
        androidx.compose.ui.node.LayoutNode r1, r2, $r20;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r3, $r16;
        java.util.Map $r4;
        java.lang.Object $r5, $r6, $r19;
        boolean $z1, $z2, $z3;
        java.util.List $r7, $r18;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15, $r22, $r23;
        androidx.compose.ui.node.Owner $r17;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r4 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.Map access$getPrecomposeMap$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r3);

        $r5 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: java.lang.Object $slotId>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r1 = (androidx.compose.ui.node.LayoutNode) $r6;

        if r1 == null goto label6;

        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z1 == 0 goto label6;

        $r7 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 < 0 goto label1;

        if i0 < i2 goto label2;

     label1:
        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is out of bound of [0, ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label2:
        $z2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z2 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        if $z3 != 0 goto label5;

        $r23 = "Failed requirement.";

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label5:
        $r16 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$precompose$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        r2 = staticinvoke <androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r16);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 1);

        $r17 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>(r1);

        $r18 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i0);

        $r20 = (androidx.compose.ui.node.LayoutNode) $r19;

        interfaceinvoke $r17.<androidx.compose.ui.node.Owner: void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode,long)>($r20, l1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r2, 0);

     label6:
        return;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.unit.LayoutDirection layoutDirection>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float density>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float fontScale>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>
    public void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r1;
        androidx.compose.ui.unit.LayoutDirection $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Rtl>;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.unit.LayoutDirection layoutDirection> = $r2;

        return;
    }

    public androidx.compose.ui.unit.LayoutDirection getLayoutDirection()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        androidx.compose.ui.unit.LayoutDirection $r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        $r1 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.unit.LayoutDirection layoutDirection>;

        return $r1;
    }

    public void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        androidx.compose.ui.unit.LayoutDirection r1;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        r1 := @parameter0: androidx.compose.ui.unit.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.unit.LayoutDirection layoutDirection> = r1;

        return;
    }

    public float getDensity()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        float $f0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        $f0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float density>;

        return $f0;
    }

    public void setDensity(float)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        float f0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        f0 := @parameter0: float;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float density> = f0;

        return;
    }

    public float getFontScale()
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        float $f0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        $f0 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float fontScale>;

        return $f0;
    }

    public void setFontScale(float)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        float f0;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        f0 := @parameter0: float;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: float fontScale> = f0;

        return;
    }

    public java.util.List subcompose(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r3;
        java.util.List $r4;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$Scope: androidx.compose.ui.layout.LayoutNodeSubcompositionsState this$0>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: java.util.List subcompose(java.lang.Object,kotlin.jvm.functions.Function2)>(r1, r2);

        return $r4;
    }

androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $nodeState>
<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: kotlin.jvm.functions.Function2 $content>
    void <init>(androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1 r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $r1;
        kotlin.jvm.functions.Function2 $r2;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1;

        $r1 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $nodeState> = $r1;

        r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: kotlin.jvm.functions.Function2 $content> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.runtime.Composer, int)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1 r0;
        androidx.compose.runtime.Composer $r1;
        int $i0, $i1;
        boolean z0, z2, $z3, $z4, $z5;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $r3;
        java.lang.Boolean $r4;
        byte $b2, $b3;
        java.lang.Integer $r5;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1;

        $r1 := @parameter0: androidx.compose.runtime.Composer;

        $i0 := @parameter1: int;

        staticinvoke <androidx.compose.runtime.ComposerKt: void sourceInformation(androidx.compose.runtime.Composer,java.lang.String)>($r1, "C448@19119L46:SubcomposeLayout.kt#80mrfh");

        $i1 = $i0 & 11;

        if $i1 != 2 goto label1;

        $z5 = interfaceinvoke $r1.<androidx.compose.runtime.Composer: boolean getSkipping()>();

        if $z5 != 0 goto label5;

     label1:
        $z3 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z3 == 0 goto label2;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventStart(int,int,int,java.lang.String)>(-34810602, $i0, -1, "androidx.compose.ui.layout.LayoutNodeSubcompositionsState.subcompose.<anonymous>.<anonymous>.<anonymous> (SubcomposeLayout.kt:447)");

     label2:
        $r3 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState $nodeState>;

        z0 = virtualinvoke $r3.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$NodeState: boolean getActive()>();

        r2 = r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: kotlin.jvm.functions.Function2 $content>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void startReusableGroup(int,java.lang.Object)>(207, $r4);

        z2 = interfaceinvoke $r1.<androidx.compose.runtime.Composer: boolean changed(boolean)>(z0);

        if z0 == 0 goto label3;

        $b2 = 0 >> 3;

        $b3 = 14 & $b2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b3);

        interfaceinvoke r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r5);

        goto label4;

     label3:
        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void deactivateToEndGroup(boolean)>(z2);

     label4:
        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void endReusableGroup()>();

        $z4 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z4 == 0 goto label6;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventEnd()>();

        goto label6;

     label5:
        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void skipToGroupEnd()>();

     label6:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.compose.runtime.Composer $r4;
        int $i0;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Composer) r1;

        $r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState$subcompose$2$1$1: void invoke(androidx.compose.runtime.Composer,int)>($r4, $i0);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

