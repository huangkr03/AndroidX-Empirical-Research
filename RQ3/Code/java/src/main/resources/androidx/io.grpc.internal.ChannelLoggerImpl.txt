io.grpc.internal.ChannelLoggerImpl
<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.TimeProvider time>
<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.ChannelTracer tracer>
    void <init>(io.grpc.internal.ChannelTracer, io.grpc.internal.TimeProvider)
    {
        io.grpc.internal.ChannelLoggerImpl $r0;
        io.grpc.internal.TimeProvider $r1;
        io.grpc.internal.ChannelTracer $r2;
        java.lang.Object $r3;

        $r0 := @this: io.grpc.internal.ChannelLoggerImpl;

        $r2 := @parameter0: io.grpc.internal.ChannelTracer;

        $r1 := @parameter1: io.grpc.internal.TimeProvider;

        specialinvoke $r0.<io.grpc.ChannelLogger: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "tracer");

        $r2 = (io.grpc.internal.ChannelTracer) $r3;

        $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.ChannelTracer tracer> = $r2;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "time");

        $r1 = (io.grpc.internal.TimeProvider) $r3;

        $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.TimeProvider time> = $r1;

        return;
    }

    private boolean isTraceable(io.grpc.ChannelLogger$ChannelLogLevel)
    {
        io.grpc.internal.ChannelLoggerImpl $r0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1, $r2;
        boolean $z0;
        io.grpc.internal.ChannelTracer $r3;

        $r0 := @this: io.grpc.internal.ChannelLoggerImpl;

        $r2 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r1 = <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel DEBUG>;

        if $r2 == $r1 goto label1;

        $r3 = $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.ChannelTracer tracer>;

        $z0 = virtualinvoke $r3.<io.grpc.internal.ChannelTracer: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static void logOnly(io.grpc.InternalLogId, io.grpc.ChannelLogger$ChannelLogLevel, java.lang.String)
    {
        io.grpc.InternalLogId $r0;
        java.lang.String $r1;
        io.grpc.ChannelLogger$ChannelLogLevel $r2;
        java.util.logging.Level $r3;
        java.util.logging.Logger $r4;
        boolean $z0;

        $r0 := @parameter0: io.grpc.InternalLogId;

        $r2 := @parameter1: io.grpc.ChannelLogger$ChannelLogLevel;

        $r1 := @parameter2: java.lang.String;

        $r3 = staticinvoke <io.grpc.internal.ChannelLoggerImpl: java.util.logging.Level toJavaLogLevel(io.grpc.ChannelLogger$ChannelLogLevel)>($r2);

        $r4 = <io.grpc.internal.ChannelTracer: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <io.grpc.internal.ChannelTracer: void logOnly(io.grpc.InternalLogId,java.util.logging.Level,java.lang.String)>($r0, $r3, $r1);

     label1:
        return;
    }

    static transient void logOnly(io.grpc.InternalLogId, io.grpc.ChannelLogger$ChannelLogLevel, java.lang.String, java.lang.Object[])
    {
        io.grpc.InternalLogId $r0;
        java.lang.Object[] $r1;
        io.grpc.ChannelLogger$ChannelLogLevel $r2;
        java.lang.String $r3;
        java.util.logging.Level $r4;
        java.util.logging.Logger $r5;
        boolean $z0;

        $r0 := @parameter0: io.grpc.InternalLogId;

        $r2 := @parameter1: io.grpc.ChannelLogger$ChannelLogLevel;

        $r3 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.Object[];

        $r4 = staticinvoke <io.grpc.internal.ChannelLoggerImpl: java.util.logging.Level toJavaLogLevel(io.grpc.ChannelLogger$ChannelLogLevel)>($r2);

        $r5 = <io.grpc.internal.ChannelTracer: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        staticinvoke <io.grpc.internal.ChannelTracer: void logOnly(io.grpc.InternalLogId,java.util.logging.Level,java.lang.String)>($r0, $r4, $r3);

     label1:
        return;
    }

    private static java.util.logging.Level toJavaLogLevel(io.grpc.ChannelLogger$ChannelLogLevel)
    {
        int[] $r0;
        int $i0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1;
        java.util.logging.Level r2;

        $r1 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r0 = <io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel>;

        $i0 = virtualinvoke $r1.<io.grpc.ChannelLogger$ChannelLogLevel: int ordinal()>();

        $i0 = $r0[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        return r2;

     label2:
        r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        return r2;

     label3:
        r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        return r2;
    }

    private static io.grpc.InternalChannelz$ChannelTrace$Event$Severity toTracerSeverity(io.grpc.ChannelLogger$ChannelLogLevel)
    {
        int[] $r0;
        int $i0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1;
        io.grpc.InternalChannelz$ChannelTrace$Event$Severity r2;

        $r1 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r0 = <io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel>;

        $i0 = virtualinvoke $r1.<io.grpc.ChannelLogger$ChannelLogLevel: int ordinal()>();

        $i0 = $r0[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r2 = <io.grpc.InternalChannelz$ChannelTrace$Event$Severity: io.grpc.InternalChannelz$ChannelTrace$Event$Severity CT_INFO>;

        return r2;

     label2:
        r2 = <io.grpc.InternalChannelz$ChannelTrace$Event$Severity: io.grpc.InternalChannelz$ChannelTrace$Event$Severity CT_WARNING>;

        return r2;

     label3:
        r2 = <io.grpc.InternalChannelz$ChannelTrace$Event$Severity: io.grpc.InternalChannelz$ChannelTrace$Event$Severity CT_ERROR>;

        return r2;
    }

    private void trace(io.grpc.ChannelLogger$ChannelLogLevel, java.lang.String)
    {
        io.grpc.internal.ChannelLoggerImpl $r0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1, $r3;
        java.lang.String $r2;
        io.grpc.internal.ChannelTracer $r4;
        io.grpc.InternalChannelz$ChannelTrace$Event$Builder $r5;
        io.grpc.InternalChannelz$ChannelTrace$Event$Severity $r6;
        io.grpc.internal.TimeProvider $r7;
        long $l0;
        io.grpc.InternalChannelz$ChannelTrace$Event $r8;

        $r0 := @this: io.grpc.internal.ChannelLoggerImpl;

        $r1 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r2 := @parameter1: java.lang.String;

        $r3 = <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel DEBUG>;

        if $r1 != $r3 goto label1;

        return;

     label1:
        $r4 = $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.ChannelTracer tracer>;

        $r5 = new io.grpc.InternalChannelz$ChannelTrace$Event$Builder;

        specialinvoke $r5.<io.grpc.InternalChannelz$ChannelTrace$Event$Builder: void <init>()>();

        $r5 = virtualinvoke $r5.<io.grpc.InternalChannelz$ChannelTrace$Event$Builder: io.grpc.InternalChannelz$ChannelTrace$Event$Builder setDescription(java.lang.String)>($r2);

        $r6 = staticinvoke <io.grpc.internal.ChannelLoggerImpl: io.grpc.InternalChannelz$ChannelTrace$Event$Severity toTracerSeverity(io.grpc.ChannelLogger$ChannelLogLevel)>($r1);

        $r5 = virtualinvoke $r5.<io.grpc.InternalChannelz$ChannelTrace$Event$Builder: io.grpc.InternalChannelz$ChannelTrace$Event$Builder setSeverity(io.grpc.InternalChannelz$ChannelTrace$Event$Severity)>($r6);

        $r7 = $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.TimeProvider time>;

        $l0 = interfaceinvoke $r7.<io.grpc.internal.TimeProvider: long currentTimeNanos()>();

        $r5 = virtualinvoke $r5.<io.grpc.InternalChannelz$ChannelTrace$Event$Builder: io.grpc.InternalChannelz$ChannelTrace$Event$Builder setTimestampNanos(long)>($l0);

        $r8 = virtualinvoke $r5.<io.grpc.InternalChannelz$ChannelTrace$Event$Builder: io.grpc.InternalChannelz$ChannelTrace$Event build()>();

        virtualinvoke $r4.<io.grpc.internal.ChannelTracer: void traceOnly(io.grpc.InternalChannelz$ChannelTrace$Event)>($r8);

        return;
    }

    public void log(io.grpc.ChannelLogger$ChannelLogLevel, java.lang.String)
    {
        io.grpc.internal.ChannelLoggerImpl $r0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1;
        java.lang.String $r2;
        io.grpc.internal.ChannelTracer $r3;
        io.grpc.InternalLogId $r4;
        boolean $z0;

        $r0 := @this: io.grpc.internal.ChannelLoggerImpl;

        $r1 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<io.grpc.internal.ChannelLoggerImpl: io.grpc.internal.ChannelTracer tracer>;

        $r4 = virtualinvoke $r3.<io.grpc.internal.ChannelTracer: io.grpc.InternalLogId getLogId()>();

        staticinvoke <io.grpc.internal.ChannelLoggerImpl: void logOnly(io.grpc.InternalLogId,io.grpc.ChannelLogger$ChannelLogLevel,java.lang.String)>($r4, $r1, $r2);

        $z0 = specialinvoke $r0.<io.grpc.internal.ChannelLoggerImpl: boolean isTraceable(io.grpc.ChannelLogger$ChannelLogLevel)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<io.grpc.internal.ChannelLoggerImpl: void trace(io.grpc.ChannelLogger$ChannelLogLevel,java.lang.String)>($r1, $r2);

     label1:
        return;
    }

    public transient void log(io.grpc.ChannelLogger$ChannelLogLevel, java.lang.String, java.lang.Object[])
    {
        io.grpc.internal.ChannelLoggerImpl $r0;
        io.grpc.ChannelLogger$ChannelLogLevel $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3;
        java.util.logging.Level $r4;
        boolean $z0;
        java.util.logging.Logger $r5;

        $r0 := @this: io.grpc.internal.ChannelLoggerImpl;

        $r1 := @parameter0: io.grpc.ChannelLogger$ChannelLogLevel;

        $r3 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r4 = staticinvoke <io.grpc.internal.ChannelLoggerImpl: java.util.logging.Level toJavaLogLevel(io.grpc.ChannelLogger$ChannelLogLevel)>($r1);

        $z0 = specialinvoke $r0.<io.grpc.internal.ChannelLoggerImpl: boolean isTraceable(io.grpc.ChannelLogger$ChannelLogLevel)>($r1);

        if $z0 != 0 goto label2;

        $r5 = <io.grpc.internal.ChannelTracer: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r3 = null;

        goto label3;

     label2:
        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r2);

     label3:
        virtualinvoke $r0.<io.grpc.internal.ChannelLoggerImpl: void log(io.grpc.ChannelLogger$ChannelLogLevel,java.lang.String)>($r1, $r3);

        return;
    }

io.grpc.internal.ChannelLoggerImpl$1
<io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel>
    static void <clinit>()
    {
        io.grpc.ChannelLogger$ChannelLogLevel[] $r0;
        int $i0;
        int[] $r1;
        io.grpc.ChannelLogger$ChannelLogLevel $r2;
        java.lang.Throwable $r3, $r4, $r5;

        $r0 = staticinvoke <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel> = $r1;

        $r2 = <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel ERROR>;

     label01:
        $i0 = virtualinvoke $r2.<io.grpc.ChannelLogger$ChannelLogLevel: int ordinal()>();

     label02:
        $r1[$i0] = 1;

        goto label04;

     label03:
        $r3 := @caughtexception;

     label04:
        $r1 = <io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel>;

        $r2 = <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel WARNING>;

     label05:
        $i0 = virtualinvoke $r2.<io.grpc.ChannelLogger$ChannelLogLevel: int ordinal()>();

     label06:
        $r1[$i0] = 2;

        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        $r1 = <io.grpc.internal.ChannelLoggerImpl$1: int[] $SwitchMap$io$grpc$ChannelLogger$ChannelLogLevel>;

        $r2 = <io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel INFO>;

     label09:
        $i0 = virtualinvoke $r2.<io.grpc.ChannelLogger$ChannelLogLevel: int ordinal()>();

     label10:
        $r1[$i0] = 3;

        return;

     label11:
        $r5 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label09 to label10 with label11;
    }

