androidx.webkit.internal.TracingControllerImpl
<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl>
<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface>
    public void <init>()
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        androidx.webkit.internal.ApiFeature$P r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebViewProviderFactory $r3;
        org.chromium.support_lib_boundary.TracingControllerBoundaryInterface $r4;
        android.webkit.TracingController $r5;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        specialinvoke r0.<androidx.webkit.TracingController: void <init>()>();

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.ApiFeature$P TRACING_CONTROLLER_BASIC_USAGE>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <androidx.webkit.internal.ApiHelperForP: android.webkit.TracingController getTracingControllerInstance()>();

        r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl> = $r5;

        r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface> = null;

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl> = null;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r4 = interfaceinvoke $r3.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getTracingController()>();

        r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface> = $r4;

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    private android.webkit.TracingController getFrameworksImpl()
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        android.webkit.TracingController $r1, $r2, $r3;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        $r1 = r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <androidx.webkit.internal.ApiHelperForP: android.webkit.TracingController getTracingControllerInstance()>();

        r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl> = $r3;

     label1:
        $r2 = r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController mFrameworksImpl>;

        return $r2;
    }

    private org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getBoundaryInterface()
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        org.chromium.support_lib_boundary.TracingControllerBoundaryInterface $r1, $r2, $r4;
        androidx.webkit.internal.WebViewProviderFactory $r3;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        $r1 = r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r4 = interfaceinvoke $r3.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getTracingController()>();

        r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface> = $r4;

     label1:
        $r2 = r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface mBoundaryInterface>;

        return $r2;
    }

    public boolean isTracing()
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        androidx.webkit.internal.ApiFeature$P r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.TracingControllerBoundaryInterface $r3;
        android.webkit.TracingController $r4;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.ApiFeature$P TRACING_CONTROLLER_BASIC_USAGE>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController getFrameworksImpl()>();

        $z3 = staticinvoke <androidx.webkit.internal.ApiHelperForP: boolean isTracing(android.webkit.TracingController)>($r4);

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getBoundaryInterface()>();

        $z2 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean isTracing()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public void start(androidx.webkit.TracingConfig)
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        androidx.webkit.TracingConfig r1;
        androidx.webkit.internal.ApiFeature$P r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        org.chromium.support_lib_boundary.TracingControllerBoundaryInterface $r4;
        int $i0, $i1;
        java.util.List $r5;
        android.webkit.TracingController $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        r1 := @parameter0: androidx.webkit.TracingConfig;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Tracing config must be non null");

        throw $r7;

     label1:
        r2 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.ApiFeature$P TRACING_CONTROLLER_BASIC_USAGE>;

        $z0 = virtualinvoke r2.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label2;

        $r6 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController getFrameworksImpl()>();

        staticinvoke <androidx.webkit.internal.ApiHelperForP: void start(android.webkit.TracingController,androidx.webkit.TracingConfig)>($r6, r1);

        goto label4;

     label2:
        $z1 = virtualinvoke r2.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label3;

        $r4 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getBoundaryInterface()>();

        $i0 = virtualinvoke r1.<androidx.webkit.TracingConfig: int getPredefinedCategories()>();

        $r5 = virtualinvoke r1.<androidx.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>();

        $i1 = virtualinvoke r1.<androidx.webkit.TracingConfig: int getTracingMode()>();

        interfaceinvoke $r4.<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: void start(int,java.util.Collection,int)>($i0, $r5, $i1);

        goto label4;

     label3:
        $r3 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r3;

     label4:
        return;
    }

    public boolean stop(java.io.OutputStream, java.util.concurrent.Executor)
    {
        androidx.webkit.internal.TracingControllerImpl r0;
        java.io.OutputStream r1;
        java.util.concurrent.Executor r2;
        androidx.webkit.internal.ApiFeature$P r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r4;
        org.chromium.support_lib_boundary.TracingControllerBoundaryInterface $r5;
        android.webkit.TracingController $r6;

        r0 := @this: androidx.webkit.internal.TracingControllerImpl;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.ApiFeature$P TRACING_CONTROLLER_BASIC_USAGE>;

        $z0 = virtualinvoke r3.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: android.webkit.TracingController getFrameworksImpl()>();

        $z3 = staticinvoke <androidx.webkit.internal.ApiHelperForP: boolean stop(android.webkit.TracingController,java.io.OutputStream,java.util.concurrent.Executor)>($r6, r1, r2);

        return $z3;

     label1:
        $z1 = virtualinvoke r3.<androidx.webkit.internal.ApiFeature$P: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r5 = specialinvoke r0.<androidx.webkit.internal.TracingControllerImpl: org.chromium.support_lib_boundary.TracingControllerBoundaryInterface getBoundaryInterface()>();

        $z2 = interfaceinvoke $r5.<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>(r1, r2);

        return $z2;

     label2:
        $r4 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r4;
    }

