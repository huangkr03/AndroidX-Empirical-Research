androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet
<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList asList>
    static int chooseTableSize(int)
    {
        int i0, $i1, i3, i4, i5;
        double $d0, $d1, $d2;
        byte $b2;
        boolean z0;

        i3 := @parameter0: int;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i3, 2);

        if i0 >= 751619276 goto label3;

        $i1 = i0 + -1;

        i4 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1);

        i5 = i4 + i4;

     label1:
        $d0 = (double) i5;

        $d2 = $d0 * 0.7;

        $d1 = (double) i0;

        $b2 = $d2 cmpg $d1;

        if $b2 >= 0 goto label2;

        i5 = i5 + i5;

        goto label1;

     label2:
        return i5;

     label3:
        if i0 >= 1073741824 goto label5;

        z0 = 1;

     label4:
        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "collection too large");

        return 1073741824;

     label5:
        z0 = 0;

        goto label4;
    }

    public int hashCode()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;
        int $i0;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        $i0 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    public androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList asList()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList r1, r2;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        r1 = r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList asList>;

        if r1 != null goto label1;

        r2 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList createAsList()>();

        r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList asList> = r2;

        return r2;

     label1:
        return r1;
    }

    androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList createAsList()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;
        java.lang.Object[] $r1;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        $r1 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableList asImmutableList(java.lang.Object[])>($r1);

        return $r2;
    }

    public static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$Builder builder()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$Builder r0;

        r0 = new androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$Builder;

        specialinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$Builder: void <init>()>();

        return r0;
    }

    static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet access$100(int, java.lang.Object[])
    {
        int i0;
        java.lang.Object[] r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int,java.lang.Object[])>(i0, r0);

        return $r1;
    }

    private static transient androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int, java.lang.Object[])
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12;
        java.lang.Object[] r0, r9, r12;
        java.lang.Object r1, r2, $r8, r10, r14;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet $r4, $r5, $r6;
        boolean $z0, $z1;
        androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet r11;
        androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet r13;

        i7 := @parameter0: int;

        r9 := @parameter1: java.lang.Object[];

        tableswitch(i7)
        {
            case 0: goto label13;
            case 1: goto label12;
            default: goto label01;
        };

     label01:
        i0 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: int chooseTableSize(int)>(i7);

        r0 = newarray (java.lang.Object)[i0];

        i1 = i0 + -1;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label02:
        if i10 >= i7 goto label07;

        $r8 = r9[i10];

        r1 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ObjectArrays: java.lang.Object checkElementNotNull(java.lang.Object,int)>($r8, i10);

        i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i11 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.Hashing: int smear(int)>(i2);

     label03:
        i3 = i11 & i1;

        r2 = r0[i3];

        if r2 != null goto label05;

        i12 = i9 + 1;

        r9[i9] = r1;

        r0[i3] = r1;

        i8 = i8 + i2;

     label04:
        i10 = i10 + 1;

        i9 = i12;

        goto label02;

     label05:
        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        i12 = i9;

        goto label04;

     label06:
        i11 = i11 + 1;

        goto label03;

     label07:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>(r9, i9, i7, null);

        if i9 != 1 goto label08;

        r10 = r9[0];

        virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        r11 = new androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet;

        specialinvoke r11.<androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet: void <init>(java.lang.Object)>(r10);

        return r11;

     label08:
        $i4 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: int chooseTableSize(int)>(i9);

        $i5 = i0 / 2;

        if $i4 >= $i5 goto label09;

        $r6 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int,java.lang.Object[])>(i9, r9);

        return $r6;

     label09:
        $i6 = lengthof r9;

        $z0 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: boolean shouldTrim(int,int)>(i9, $i6);

        if $z0 == 0 goto label11;

        r12 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r9, i9);

     label10:
        r13 = new androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet;

        specialinvoke r13.<androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>(r12, i8, r0, i1, i9);

        return r13;

     label11:
        r12 = r9;

        goto label10;

     label12:
        r14 = r9[0];

        virtualinvoke r14.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of(java.lang.Object)>(r14);

        return $r4;

     label13:
        $r5 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of()>();

        return $r5;
    }

    public static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet copyOf(java.lang.Object[])
    {
        java.lang.Object[] r0, $r5;
        int $i0, $i1;
        java.lang.Object $r1, $r4;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet $r2, $r3, $r6;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $i1 = lengthof r0;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        $r6 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int,java.lang.Object[])>($i1, $r5);

        return $r6;

     label2:
        $r1 = r0[0];

        $r2 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r2;

     label3:
        $r3 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of()>();

        return $r3;
    }

    public static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet $r0;

        $r0 = <androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.RegularImmutableSet EMPTY>;

        return $r0;
    }

    public static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of(java.lang.Object)
    {
        java.lang.Object r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet r1;

        r0 := @parameter0: java.lang.Object;

        r1 = new androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet;

        specialinvoke r1.<androidx.test.espresso.remote.internal.deps.guava.collect.SingletonImmutableSet: void <init>(java.lang.Object)>(r0);

        return r1;
    }

    public static androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r2, r3, r4;
        java.lang.Object[] r5;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 = newarray (java.lang.Object)[5];

        r5[0] = r0;

        r5[1] = r1;

        r5[2] = r2;

        r5[3] = r3;

        r5[4] = r4;

        $r6 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int,java.lang.Object[])>(5, r5);

        return $r6;
    }

    public static transient androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0, r1, r2, r3, r4, r5;
        java.lang.Object[] r6, r8;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet $r7;
        boolean z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object[];

        $i0 = lengthof r6;

        if $i0 > 2147483641 goto label2;

        z0 = 1;

     label1:
        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "the total number of elements must fit in an int");

        $i1 = lengthof r6;

        $i2 = $i1 + 6;

        r8 = newarray (java.lang.Object)[$i2];

        r8[0] = r0;

        r8[1] = r1;

        r8[2] = r2;

        r8[3] = r3;

        r8[4] = r4;

        r8[5] = r5;

        $i3 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r8, 6, $i3);

        $i4 = lengthof r8;

        $r7 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet construct(int,java.lang.Object[])>($i4, r8);

        return $r7;

     label2:
        z0 = 0;

        goto label1;
    }

<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.UnmodifiableIterator iterator()>
    java.lang.Object writeReplace()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$SerializedForm r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        r1 = new androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$SerializedForm;

        $r2 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: java.lang.Object[] toArray()>();

        specialinvoke r1.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return r1;
    }

    public volatile java.util.Iterator iterator()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        $r1 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.remote.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    void <init>()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        specialinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableCollection: void <init>()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r0;
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r1;
        java.io.InvalidObjectException r2;

        r1 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        r0 := @parameter0: java.io.ObjectInputStream;

        r2 = new java.io.InvalidObjectException;

        specialinvoke r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw r2;
    }

    static boolean access$000(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: boolean shouldTrim(int,int)>(i0, i1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z1 == 0 goto label2;

        $r2 = (androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet) r1;

        $z2 = virtualinvoke $r2.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z2 == 0 goto label2;

        $i0 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet: int hashCode()>();

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z3 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>(r0, r1);

        return $z3;
    }

    boolean isHashCodeFast()
    {
        androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet r0;

        r0 := @this: androidx.test.espresso.remote.internal.deps.guava.collect.ImmutableSet;

        return 0;
    }

    private static boolean shouldTrim(int, int)
    {
        int i0, $i1, $i2, $i3, i4;
        boolean z0;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 >> 1;

        $i1 = i0 >> 2;

        $i3 = $i2 + $i1;

        if i4 >= $i3 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

