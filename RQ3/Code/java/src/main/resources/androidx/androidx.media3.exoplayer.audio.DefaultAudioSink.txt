androidx.media3.exoplayer.audio.DefaultAudioSink
<androidx.media3.exoplayer.audio.DefaultAudioSink: int AUDIO_TRACK_SMALLER_BUFFER_RETRY_SIZE>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float DEFAULT_PLAYBACK_SPEED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float MIN_PLAYBACK_SPEED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float MAX_PLAYBACK_SPEED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float MIN_PITCH>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float MAX_PITCH>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean DEFAULT_SKIP_SILENCE>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OFFLOAD_MODE_DISABLED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OFFLOAD_MODE_ENABLED_GAPLESS_REQUIRED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OFFLOAD_MODE_ENABLED_GAPLESS_NOT_REQUIRED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OFFLOAD_MODE_ENABLED_GAPLESS_DISABLED>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OUTPUT_MODE_PCM>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OUTPUT_MODE_OFFLOAD>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int OUTPUT_MODE_PASSTHROUGH>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int ERROR_NATIVE_DEAD_OBJECT>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int AUDIO_TRACK_RETRY_DURATION_MS>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.String TAG>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean failOnSpuriousAudioTimestamp>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.Object releaseExecutorLock>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableFloatOutput>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor channelMappingAudioProcessor>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toIntPcmAvailableAudioProcessors>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toFloatPcmAvailableAudioProcessors>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.util.ConditionVariable releasingConditionVariable>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 offloadStreamEventCallbackV29>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder initializationExceptionPendingExceptionHolder>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.analytics.PlayerId playerId>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>
<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters audioTrackPlaybackParameters>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedPcmBytes>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedEncodedFrames>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs>
<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int inputBufferAccessUnitCount>
<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>
<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int preV21OutputBufferOffset>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean handledEndOfStream>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean stoppedAudioTrack>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean externalAudioSessionIdProvided>
<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>
<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 preferredDevice>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>
<androidx.media3.exoplayer.audio.DefaultAudioSink: long lastFeedElapsedRealtimeMs>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean offloadDisabledUntilNextConfiguration>
<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isWaitingForOffloadEndOfStreamHandled>
    public void <init>(androidx.media3.exoplayer.audio.AudioCapabilities, androidx.media3.common.audio.AudioProcessor[])
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.AudioCapabilities r1, $r4, $r6;
        androidx.media3.common.audio.AudioProcessor[] r2;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder $r3, $r7, $r8;
        java.lang.Object $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioCapabilities;

        r2 := @parameter1: androidx.media3.common.audio.AudioProcessor[];

        $r3 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: void <init>()>();

        $r4 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        $r5 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r6 = (androidx.media3.exoplayer.audio.AudioCapabilities) $r5;

        $r7 = virtualinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)>($r6);

        $r8 = virtualinvoke $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessors(androidx.media3.common.audio.AudioProcessor[])>(r2);

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>($r8);

        return;
    }

    public void <init>(androidx.media3.exoplayer.audio.AudioCapabilities, androidx.media3.common.audio.AudioProcessor[], boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.AudioCapabilities r1, $r4, $r6;
        androidx.media3.common.audio.AudioProcessor[] r2;
        boolean z0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder $r3, $r7, $r8, $r9;
        java.lang.Object $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioCapabilities;

        r2 := @parameter1: androidx.media3.common.audio.AudioProcessor[];

        z0 := @parameter2: boolean;

        $r3 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: void <init>()>();

        $r4 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        $r5 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r6 = (androidx.media3.exoplayer.audio.AudioCapabilities) $r5;

        $r7 = virtualinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)>($r6);

        $r8 = virtualinvoke $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessors(androidx.media3.common.audio.AudioProcessor[])>(r2);

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setEnableFloatOutput(boolean)>(z0);

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>($r9);

        return;
    }

    public void <init>(androidx.media3.exoplayer.audio.AudioCapabilities, androidx.media3.exoplayer.audio.DefaultAudioSink$AudioProcessorChain, boolean, boolean, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.AudioCapabilities r1, $r4, $r6;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioProcessorChain r2;
        boolean z0, z1;
        int i0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder $r3, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioCapabilities;

        r2 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioProcessorChain;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        $r3 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: void <init>()>();

        $r4 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        $r5 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r6 = (androidx.media3.exoplayer.audio.AudioCapabilities) $r5;

        $r7 = virtualinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)>($r6);

        $r8 = virtualinvoke $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessorChain(androidx.media3.common.audio.AudioProcessorChain)>(r2);

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setEnableFloatOutput(boolean)>(z0);

        $r10 = virtualinvoke $r9.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setEnableAudioTrackPlaybackParams(boolean)>(z1);

        $r11 = virtualinvoke $r10.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setOffloadMode(int)>(i0);

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>($r11);

        return;
    }

    private void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r1;
        java.util.ArrayList r2, r44;
        androidx.media3.exoplayer.audio.AudioCapabilities $r3;
        androidx.media3.common.audio.AudioProcessorChain $r4, $r18;
        int $i0, $i1, $i2, $i3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider $r5;
        androidx.media3.common.util.Clock $r7;
        androidx.media3.common.util.ConditionVariable $r8, r39;
        androidx.media3.exoplayer.audio.BaseAudioProcessor[] $r14;
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor $r16, r42;
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor $r17, r43;
        androidx.media3.common.audio.AudioProcessor[] $r19, $r20, $r22, $r30, r52;
        java.lang.Object[] $r21, $r23;
        androidx.media3.common.AudioAttributes $r25;
        androidx.media3.common.PlaybackParameters $r28, $r29;
        java.nio.ByteBuffer[] $r31;
        androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener $r35;
        boolean $z3, $z4, $z5, $z6;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r40;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker r41;
        androidx.media3.exoplayer.audio.ResamplingAudioProcessor r45;
        androidx.media3.exoplayer.audio.FloatResamplingAudioProcessor r46;
        androidx.media3.common.AuxEffectInfo r47;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters r48;
        java.util.ArrayDeque r49;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder r50, r51;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.AudioCapabilities access$100(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities> = $r3;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain access$200(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain> = $r4;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $z4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean access$300(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        if $z4 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableFloatOutput> = $z5;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 23 goto label3;

        $z3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean access$400(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        if $z3 == 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams> = $z6;

        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 < 29 goto label5;

        $i3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: int access$500(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        goto label6;

     label5:
        $i3 = 0;

     label6:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode> = $i3;

        $r5 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider> = $r5;

        r39 = new androidx.media3.common.util.ConditionVariable;

        $r7 = <androidx.media3.common.util.Clock: androidx.media3.common.util.Clock DEFAULT>;

        specialinvoke r39.<androidx.media3.common.util.ConditionVariable: void <init>(androidx.media3.common.util.Clock)>($r7);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.util.ConditionVariable releasingConditionVariable> = r39;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.util.ConditionVariable releasingConditionVariable>;

        virtualinvoke $r8.<androidx.media3.common.util.ConditionVariable: boolean open()>();

        r41 = new androidx.media3.exoplayer.audio.AudioTrackPositionTracker;

        r40 = new androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        specialinvoke r40.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r0, null);

        specialinvoke r41.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void <init>(androidx.media3.exoplayer.audio.AudioTrackPositionTracker$Listener)>(r40);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker> = r41;

        r42 = new androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        specialinvoke r42.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor channelMappingAudioProcessor> = r42;

        r43 = new androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        specialinvoke r43.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor> = r43;

        r44 = new java.util.ArrayList;

        specialinvoke r44.<java.util.ArrayList: void <init>()>();

        r2 = r44;

        $r14 = newarray (androidx.media3.exoplayer.audio.BaseAudioProcessor)[3];

        r45 = new androidx.media3.exoplayer.audio.ResamplingAudioProcessor;

        specialinvoke r45.<androidx.media3.exoplayer.audio.ResamplingAudioProcessor: void <init>()>();

        $r14[0] = r45;

        $r16 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor channelMappingAudioProcessor>;

        $r14[1] = $r16;

        $r17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor>;

        $r14[2] = $r17;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r2, $r14);

        $r18 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        $r19 = interfaceinvoke $r18.<androidx.media3.common.audio.AudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] getAudioProcessors()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r2, $r19);

        $r20 = newarray (androidx.media3.common.audio.AudioProcessor)[0];

        $r21 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (androidx.media3.common.audio.AudioProcessor[]) $r21;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toIntPcmAvailableAudioProcessors> = $r22;

        $r23 = newarray (androidx.media3.common.audio.AudioProcessor)[1];

        r46 = new androidx.media3.exoplayer.audio.FloatResamplingAudioProcessor;

        specialinvoke r46.<androidx.media3.exoplayer.audio.FloatResamplingAudioProcessor: void <init>()>();

        $r23[0] = r46;

        r52 = (androidx.media3.common.audio.AudioProcessor[]) $r23;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toFloatPcmAvailableAudioProcessors> = r52;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume> = 1.0F;

        $r25 = <androidx.media3.common.AudioAttributes: androidx.media3.common.AudioAttributes DEFAULT>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes> = $r25;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId> = 0;

        r47 = new androidx.media3.common.AuxEffectInfo;

        specialinvoke r47.<androidx.media3.common.AuxEffectInfo: void <init>(int,float)>(0, 0.0F);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo> = r47;

        r48 = new androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        $r28 = <androidx.media3.common.PlaybackParameters: androidx.media3.common.PlaybackParameters DEFAULT>;

        specialinvoke r48.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: void <init>(androidx.media3.common.PlaybackParameters,boolean,long,long,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>($r28, 0, 0L, 0L, null);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters> = r48;

        $r29 = <androidx.media3.common.PlaybackParameters: androidx.media3.common.PlaybackParameters DEFAULT>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters audioTrackPlaybackParameters> = $r29;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex> = -1;

        $r30 = newarray (androidx.media3.common.audio.AudioProcessor)[0];

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors> = $r30;

        $r31 = newarray (java.nio.ByteBuffer)[0];

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers> = $r31;

        r49 = new java.util.ArrayDeque;

        specialinvoke r49.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints> = r49;

        r50 = new androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder;

        specialinvoke r50.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void <init>(long)>(100L);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder initializationExceptionPendingExceptionHolder> = r50;

        r51 = new androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder;

        specialinvoke r51.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void <init>(long)>(100L);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder> = r51;

        $r35 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener> = $r35;

        return;
    }

    public void setListener(androidx.media3.exoplayer.audio.AudioSink$Listener)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink$Listener r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioSink$Listener;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener> = r1;

        return;
    }

    public void setPlayerId(androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.analytics.PlayerId r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.analytics.PlayerId;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.analytics.PlayerId playerId> = r1;

        return;
    }

    public boolean supportsFormat(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.Format r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int getFormatSupport(androidx.media3.common.Format)>(r1);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getFormatSupport(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.Format r1;
        java.lang.String $r2, $r3, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.media3.exoplayer.audio.AudioCapabilities $r4;
        androidx.media3.common.AudioAttributes $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        $r3 = "audio/raw";

        $r2 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $i0 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $z4 = staticinvoke <androidx.media3.common.util.Util: boolean isEncodingLinearPcm(int)>($i0);

        if $z4 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid PCM encoding: ");

        $i3 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultAudioSink", $r9);

        return 0;

     label1:
        $i1 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        if $i1 == 2 goto label2;

        $z5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableFloatOutput>;

        if $z5 == 0 goto label3;

        $i2 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        if $i2 != 4 goto label3;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        $z1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean offloadDisabledUntilNextConfiguration>;

        if $z1 != 0 goto label5;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>;

        $z3 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean useOffloadedPlayback(androidx.media3.common.Format,androidx.media3.common.AudioAttributes)>(r1, $r5);

        if $z3 == 0 goto label5;

        return 2;

     label5:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities>;

        $z2 = virtualinvoke $r4.<androidx.media3.exoplayer.audio.AudioCapabilities: boolean isPassthroughPlaybackSupported(androidx.media3.common.Format)>(r1);

        if $z2 == 0 goto label6;

        return 2;

     label6:
        return 0;
    }

    public long getCurrentPositionUs(boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean z0, $z1, $z2;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r2;
        long $l0, $l1, $l2, $l3, l4, l5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit>;

        if $z2 == 0 goto label2;

     label1:
        return -9223372036854775808L;

     label2:
        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        l4 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: long getCurrentPositionUs(boolean)>(z0);

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        $l1 = virtualinvoke $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: long framesToDurationUs(long)>($l0);

        l5 = staticinvoke <java.lang.Math: long min(long,long)>(l4, $l1);

        $l2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long applyMediaPositionParameters(long)>(l5);

        $l3 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long applySkipping(long)>($l2);

        return $l3;
    }

    public void configure(androidx.media3.common.Format, int, int[]) throws androidx.media3.exoplayer.audio.AudioSink$ConfigurationException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.Format r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i16, $i17, $i18, i19, i21, i22, i23, i24, $i25, $i26, $i27, $i29, $i30, $i31, i32;
        androidx.media3.common.audio.AudioProcessor r2;
        java.lang.String $r3, $r4, $r17, $r24, $r29, $r30, $r32, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.media3.common.AudioAttributes $r5;
        androidx.media3.exoplayer.audio.AudioCapabilities $r6;
        java.lang.Object $r7, $r9, $r31;
        java.lang.Integer $r8, $r10;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r27, $r28, r52, r54, r56;
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor $r34;
        java.lang.Throwable $r35, r45, r59, r60, r61, r62;
        int[] r37;
        androidx.media3.common.audio.AudioProcessor[] $r38, r39, r43;
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor $r40;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r42, r44, r50;
        byte b20, $b28;
        android.util.Pair r46;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider $r47;
        double $d0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r49, r58;
        androidx.media3.exoplayer.audio.AudioSink$ConfigurationException r51, r53, r55, r57;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        i0 := @parameter1: int;

        r37 := @parameter2: int[];

        $r4 = "audio/raw";

        $r3 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label11;

        $i3 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $z3 = staticinvoke <androidx.media3.common.util.Util: boolean isEncodingLinearPcm(int)>($i3);

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z3);

        $i5 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $i4 = r1.<androidx.media3.common.Format: int channelCount>;

        i14 = staticinvoke <androidx.media3.common.util.Util: int getPcmFrameSize(int,int)>($i5, $i4);

        $i6 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $z4 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean shouldUseFloatOutput(int)>($i6);

        if $z4 == 0 goto label01;

        $r38 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toFloatPcmAvailableAudioProcessors>;

        goto label02;

     label01:
        $r38 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toIntPcmAvailableAudioProcessors>;

     label02:
        r39 = $r38;

        $r34 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor>;

        $i8 = r1.<androidx.media3.common.Format: int encoderDelay>;

        $i7 = r1.<androidx.media3.common.Format: int encoderPadding>;

        virtualinvoke $r34.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: void setTrimFrameCount(int,int)>($i8, $i7);

        $i9 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i9 >= 21 goto label04;

        $i12 = r1.<androidx.media3.common.Format: int channelCount>;

        if $i12 != 8 goto label04;

        if r37 != null goto label04;

        r37 = newarray (int)[6];

        i15 = 0;

     label03:
        $i13 = lengthof r37;

        if i15 >= $i13 goto label04;

        r37[i15] = i15;

        i15 = i15 + 1;

        goto label03;

     label04:
        $r40 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor channelMappingAudioProcessor>;

        virtualinvoke $r40.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: void setChannelMap(int[])>(r37);

        r50 = new androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i16 = r1.<androidx.media3.common.Format: int sampleRate>;

        $i17 = r1.<androidx.media3.common.Format: int channelCount>;

        $i18 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        specialinvoke r50.<androidx.media3.common.audio.AudioProcessor$AudioFormat: void <init>(int,int,int)>($i16, $i17, $i18);

        r42 = r50;

        r43 = r39;

        i1 = lengthof r43;

        i19 = 0;

     label05:
        if i19 >= i1 goto label10;

        r2 = r43[i19];

     label06:
        r44 = interfaceinvoke r2.<androidx.media3.common.audio.AudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat configure(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r42);

        $z5 = interfaceinvoke r2.<androidx.media3.common.audio.AudioProcessor: boolean isActive()>();

        if $z5 == 0 goto label07;

        r42 = r44;

     label07:
        goto label09;

     label08:
        $r35 := @caughtexception;

        r45 = $r35;

        r51 = new androidx.media3.exoplayer.audio.AudioSink$ConfigurationException;

        specialinvoke r51.<androidx.media3.exoplayer.audio.AudioSink$ConfigurationException: void <init>(java.lang.Throwable,androidx.media3.common.Format)>(r45, r1);

        r59 = (java.lang.Throwable) r51;

        throw r59;

     label09:
        i19 = i19 + 1;

        goto label05;

     label10:
        b20 = 0;

        i21 = r42.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int encoding>;

        i22 = r42.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $i10 = r42.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        i23 = staticinvoke <androidx.media3.common.util.Util: int getAudioTrackChannelConfig(int)>($i10);

        $i11 = r42.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        i24 = staticinvoke <androidx.media3.common.util.Util: int getPcmFrameSize(int,int)>(i21, $i11);

        goto label14;

     label11:
        i14 = -1;

        r39 = newarray (androidx.media3.common.audio.AudioProcessor)[0];

        i22 = r1.<androidx.media3.common.Format: int sampleRate>;

        i24 = -1;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean useOffloadedPlayback(androidx.media3.common.Format,androidx.media3.common.AudioAttributes)>(r1, $r5);

        if $z1 == 0 goto label12;

        b20 = 1;

        $r30 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r31 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r30);

        $r33 = (java.lang.String) $r31;

        $r32 = r1.<androidx.media3.common.Format: java.lang.String codecs>;

        i21 = staticinvoke <androidx.media3.common.MimeTypes: int getEncoding(java.lang.String,java.lang.String)>($r33, $r32);

        $i2 = r1.<androidx.media3.common.Format: int channelCount>;

        i23 = staticinvoke <androidx.media3.common.util.Util: int getAudioTrackChannelConfig(int)>($i2);

        goto label14;

     label12:
        b20 = 2;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities>;

        r46 = virtualinvoke $r6.<androidx.media3.exoplayer.audio.AudioCapabilities: android.util.Pair getEncodingAndChannelConfigForPassthrough(androidx.media3.common.Format)>(r1);

        if r46 != null goto label13;

        r53 = new androidx.media3.exoplayer.audio.AudioSink$ConfigurationException;

        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to configure passthrough for: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r53.<androidx.media3.exoplayer.audio.AudioSink$ConfigurationException: void <init>(java.lang.String,androidx.media3.common.Format)>($r29, r1);

        r60 = (java.lang.Throwable) r53;

        throw r60;

     label13:
        $r7 = r46.<android.util.Pair: java.lang.Object first>;

        $r8 = (java.lang.Integer) $r7;

        i21 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r46.<android.util.Pair: java.lang.Object second>;

        $r10 = (java.lang.Integer) $r9;

        i23 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label14:
        if i21 != 0 goto label15;

        r55 = new androidx.media3.exoplayer.audio.AudioSink$ConfigurationException;

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid output encoding (mode=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r55.<androidx.media3.exoplayer.audio.AudioSink$ConfigurationException: void <init>(java.lang.String,androidx.media3.common.Format)>($r24, r1);

        r61 = (java.lang.Throwable) r55;

        throw r61;

     label15:
        if i23 != 0 goto label16;

        r57 = new androidx.media3.exoplayer.audio.AudioSink$ConfigurationException;

        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid output channel config (mode=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b20);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r57.<androidx.media3.exoplayer.audio.AudioSink$ConfigurationException: void <init>(java.lang.String,androidx.media3.common.Format)>($r17, r1);

        r62 = (java.lang.Throwable) r57;

        throw r62;

     label16:
        if i0 == 0 goto label17;

        $i25 = i0;

        goto label22;

     label17:
        $r47 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider>;

        $i26 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: int getAudioTrackMinBufferSize(int,int,int)>(i22, i23, i21);

        $i27 = i21;

        $b28 = b20;

        if i24 == -1 goto label18;

        $i29 = i24;

        goto label19;

     label18:
        $i29 = 1;

     label19:
        $i30 = i22;

        $i31 = r1.<androidx.media3.common.Format: int bitrate>;

        $z2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams>;

        if $z2 == 0 goto label20;

        $d0 = 8.0;

        goto label21;

     label20:
        $d0 = 1.0;

     label21:
        $i25 = interfaceinvoke $r47.<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider: int getBufferSizeInBytes(int,int,int,int,int,int,double)>($i26, $i27, $b28, $i29, $i30, $i31, $d0);

     label22:
        i32 = $i25;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean offloadDisabledUntilNextConfiguration> = 0;

        r58 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        specialinvoke r58.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: void <init>(androidx.media3.common.Format,int,int,int,int,int,int,int,androidx.media3.common.audio.AudioProcessor[])>(r1, i14, b20, i24, i22, i23, i21, i32, r39);

        r49 = r58;

        $z6 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z6 == 0 goto label23;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration> = r49;

        goto label24;

     label23:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration> = r49;

     label24:
        return;

        catch androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException from label06 to label07 with label08;
    }

    private void setupAudioProcessors()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.audio.AudioProcessor[] r1, $r6, $r8, r10;
        java.util.ArrayList r2, $r5;
        int i0, i1, i2;
        androidx.media3.common.audio.AudioProcessor r3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r4;
        java.lang.Object[] $r7;
        java.nio.ByteBuffer[] $r9;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        r1 = $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.audio.AudioProcessor[] availableAudioProcessors>;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r10 = r1;

        i0 = lengthof r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r10[i1];

        $z0 = interfaceinvoke r3.<androidx.media3.common.audio.AudioProcessor: boolean isActive()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label3;

     label2:
        interfaceinvoke r3.<androidx.media3.common.audio.AudioProcessor: void flush()>();

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r6 = newarray (androidx.media3.common.audio.AudioProcessor)[i2];

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (androidx.media3.common.audio.AudioProcessor[]) $r7;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors> = $r8;

        $r9 = newarray (java.nio.ByteBuffer)[i2];

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers> = $r9;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flushAudioProcessors()>();

        return;
    }

    private void flushAudioProcessors()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.audio.AudioProcessor r1;
        androidx.media3.common.audio.AudioProcessor[] $r2, $r3;
        int $i0, i1;
        java.nio.ByteBuffer[] $r4;
        java.nio.ByteBuffer $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        i1 = 0;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        r1 = $r3[i1];

        interfaceinvoke r1.<androidx.media3.common.audio.AudioProcessor: void flush()>();

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers>;

        $r5 = interfaceinvoke r1.<androidx.media3.common.audio.AudioProcessor: java.nio.ByteBuffer getOutput()>();

        $r4[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean initializeAudioTrack() throws androidx.media3.exoplayer.audio.AudioSink$InitializationException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.util.ConditionVariable $r1;
        boolean $z0, $z1, $z2;
        android.media.AudioTrack $r2, $r3, $r7, $r12, $r14, $r16, $r19, $r20, $r25, $r26;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r4, $r5, $r6, $r21, $r23, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r8;
        androidx.media3.common.AuxEffectInfo $r9, $r13, $r15;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 $r10, $r11;
        float $f0;
        androidx.media3.exoplayer.analytics.PlayerId $r17, $r18;
        androidx.media3.common.Format $r22, $r24;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.util.ConditionVariable releasingConditionVariable>;

        $z0 = virtualinvoke $r1.<androidx.media3.common.util.ConditionVariable: boolean isOpen()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack buildAudioTrackWithRetry()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack> = $r2;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isOffloadedPlayback(android.media.AudioTrack)>($r3);

        if $z1 == 0 goto label2;

        $r20 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void registerStreamEventCallbackV29(android.media.AudioTrack)>($r20);

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode>;

        if $i8 == 3 goto label2;

        $r25 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r21 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r22 = $r21.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i10 = $r22.<androidx.media3.common.Format: int encoderDelay>;

        $r23 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r24 = $r23.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i9 = $r24.<androidx.media3.common.Format: int encoderPadding>;

        virtualinvoke $r25.<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>($i10, $i9);

     label2:
        $i11 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i11 < 31 goto label3;

        $r17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.analytics.PlayerId playerId>;

        if $r17 == null goto label3;

        $r19 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r18 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.analytics.PlayerId playerId>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Api31: void setLogSessionIdOnAudioTrack(android.media.AudioTrack,androidx.media3.exoplayer.analytics.PlayerId)>($r19, $r18);

     label3:
        $r26 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $i12 = virtualinvoke $r26.<android.media.AudioTrack: int getAudioSessionId()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId> = $i12;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r27 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i13 = $r27.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i13 != 2 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i2 = $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i1 = $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i0 = $r6.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        virtualinvoke $r8.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void setAudioTrack(android.media.AudioTrack,boolean,int,int,int)>($r7, $z2, $i2, $i1, $i0);

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setVolumeInternal()>();

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>;

        $i3 = $r9.<androidx.media3.common.AuxEffectInfo: int effectId>;

        if $i3 == 0 goto label6;

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>;

        $i5 = $r13.<androidx.media3.common.AuxEffectInfo: int effectId>;

        virtualinvoke $r14.<android.media.AudioTrack: int attachAuxEffect(int)>($i5);

        $r16 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>;

        $f0 = $r15.<androidx.media3.common.AuxEffectInfo: float sendLevel>;

        virtualinvoke $r16.<android.media.AudioTrack: int setAuxEffectSendLevel(float)>($f0);

     label6:
        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 preferredDevice>;

        if $r10 == null goto label7;

        $i4 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i4 < 23 goto label7;

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 preferredDevice>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Api23: void setPreferredDeviceOnAudioTrack(android.media.AudioTrack,androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23)>($r12, $r11);

     label7:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit> = 1;

        return 1;
    }

    public void play()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1;
        android.media.AudioTrack $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing> = 1;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void start()>();

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r2.<android.media.AudioTrack: void play()>();

     label1:
        return;
    }

    public void handleDiscontinuity()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync> = 1;

        return;
    }

    public boolean handleBuffer(java.nio.ByteBuffer, long, int) throws androidx.media3.exoplayer.audio.AudioSink$InitializationException, androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        java.nio.ByteBuffer r1, $r2, $r5, $r30, $r34;
        long l0, l2, l3, $l4, $l6, $l7, $l8, $l9, $l10, $l12, $l13, $l14, $l15, $l16, $l17, $l19, $l20, $l21, $l22, $l24, $l25, $l31, $l37;
        int i1, $i5, $i11, $i18, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i38;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r3, $r9, $r10, $r17, $r19, $r20, $r21, $r24, $r26, $r33;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r6, $r31;
        java.nio.ByteOrder $r7, $r8;
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor $r11;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r12, $r13, $r14, $r16;
        byte $b23, $b26;
        androidx.media3.exoplayer.audio.AudioSink$UnexpectedDiscontinuityException $r15;
        androidx.media3.common.PlaybackParameters $r18;
        android.media.AudioTrack $r22, $r23, $r28, $r29;
        androidx.media3.common.Format $r25, $r27;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r32;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        if $r2 == null goto label01;

        $r30 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        if r1 != $r30 goto label02;

     label01:
        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z12);

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>;

        if $r3 == null goto label09;

        $z8 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean drainToEndOfStream()>();

        if $z8 != 0 goto label04;

        return 0;

     label04:
        $r20 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>;

        $r19 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $z9 = virtualinvoke $r20.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: boolean canReuseAudioTrack(androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration)>($r19);

        if $z9 != 0 goto label06;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void playPendingData()>();

        $z11 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean hasPendingData()>();

        if $z11 == 0 goto label05;

        return 0;

     label05:
        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

        goto label08;

     label06:
        $r21 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration> = $r21;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration> = null;

        $r22 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $z10 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isOffloadedPlayback(android.media.AudioTrack)>($r22);

        if $z10 == 0 goto label08;

        $i33 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode>;

        if $i33 == 3 goto label08;

        $r23 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $i34 = virtualinvoke $r23.<android.media.AudioTrack: int getPlayState()>();

        if $i34 != 3 goto label07;

        $r29 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r29.<android.media.AudioTrack: void setOffloadEndOfStream()>();

     label07:
        $r28 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r24 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r25 = $r24.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i36 = $r25.<androidx.media3.common.Format: int encoderDelay>;

        $r26 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r27 = $r26.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i35 = $r27.<androidx.media3.common.Format: int encoderPadding>;

        virtualinvoke $r28.<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>($i36, $i35);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isWaitingForOffloadEndOfStreamHandled> = 1;

     label08:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void applyAudioProcessorPlaybackParametersAndSkipSilence(long)>(l0);

     label09:
        $z13 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z13 != 0 goto label11;

        $z7 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean initializeAudioTrack()>();

        if $z7 != 0 goto label10;

        return 0;

     label10:
        goto label11;

     label11:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder initializationExceptionPendingExceptionHolder>;

        virtualinvoke $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit>;

        if $z0 == 0 goto label13;

        $l31 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l0);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs> = $l31;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit> = 0;

        $z6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams>;

        if $z6 == 0 goto label12;

        $i32 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i32 < 23 goto label12;

        $r18 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters audioTrackPlaybackParameters>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setAudioTrackPlaybackParametersV23(androidx.media3.common.PlaybackParameters)>($r18);

     label12:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void applyAudioProcessorPlaybackParametersAndSkipSilence(long)>(l0);

        $z14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing>;

        if $z14 == 0 goto label13;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void play()>();

     label13:
        $r31 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $l37 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        $z15 = virtualinvoke $r31.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean mayHandleBuffer(long)>($l37);

        if $z15 != 0 goto label14;

        return 0;

     label14:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        if $r5 != null goto label27;

        $r7 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r7 != $r8 goto label15;

        $z16 = 1;

        goto label16;

     label15:
        $z16 = 0;

     label16:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z16);

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label17;

        return 1;

     label17:
        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i5 = $r9.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i5 == 0 goto label18;

        $i27 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample>;

        if $i27 != 0 goto label18;

        $r17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i28 = $r17.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $i29 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: int getFramesPerEncodedSample(int,java.nio.ByteBuffer)>($i28, r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample> = $i29;

        $i30 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample>;

        if $i30 != 0 goto label18;

        return 1;

     label18:
        $r32 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters>;

        if $r32 == null goto label20;

        $z5 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean drainToEndOfStream()>();

        if $z5 != 0 goto label19;

        return 0;

     label19:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void applyAudioProcessorPlaybackParametersAndSkipSilence(long)>(l0);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters> = null;

     label20:
        $l6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs>;

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $l7 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getSubmittedFrames()>();

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor>;

        $l8 = virtualinvoke $r11.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long getTrimmedFrameCount()>();

        $l9 = $l7 - $l8;

        $l10 = virtualinvoke $r10.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: long inputFramesToDurationUs(long)>($l9);

        l2 = $l6 + $l10;

        $z3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync>;

        if $z3 != 0 goto label22;

        $l24 = l2 - l0;

        $l25 = staticinvoke <java.lang.Math: long abs(long)>($l24);

        $b26 = $l25 cmp 200000L;

        if $b26 <= 0 goto label22;

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        if $r14 == null goto label21;

        $r16 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        $r15 = new androidx.media3.exoplayer.audio.AudioSink$UnexpectedDiscontinuityException;

        specialinvoke $r15.<androidx.media3.exoplayer.audio.AudioSink$UnexpectedDiscontinuityException: void <init>(long,long)>(l0, l2);

        interfaceinvoke $r16.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onAudioSinkError(java.lang.Exception)>($r15);

     label21:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync> = 1;

     label22:
        $z17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync>;

        if $z17 == 0 goto label24;

        $z4 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean drainToEndOfStream()>();

        if $z4 != 0 goto label23;

        return 0;

     label23:
        l3 = l0 - l2;

        $l21 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs>;

        $l22 = $l21 + l3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs> = $l22;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsSync> = 0;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void applyAudioProcessorPlaybackParametersAndSkipSilence(long)>(l0);

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        if $r12 == null goto label24;

        $b23 = l3 cmp 0L;

        if $b23 == 0 goto label24;

        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        interfaceinvoke $r13.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onPositionDiscontinuity()>();

     label24:
        $r33 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i38 = $r33.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i38 != 0 goto label25;

        $l17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedPcmBytes>;

        $i18 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $l19 = (long) $i18;

        $l20 = $l17 + $l19;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedPcmBytes> = $l20;

        goto label26;

     label25:
        $l15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedEncodedFrames>;

        $i11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample>;

        $l13 = (long) $i11;

        $l12 = (long) i1;

        $l14 = $l13 * $l12;

        $l16 = $l15 + $l14;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedEncodedFrames> = $l16;

     label26:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer> = r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int inputBufferAccessUnitCount> = i1;

     label27:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void processBuffers(long)>(l0);

        $r34 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        $z18 = virtualinvoke $r34.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z18 != 0 goto label28;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer> = null;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int inputBufferAccessUnitCount> = 0;

        return 1;

     label28:
        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $l4 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        $z1 = virtualinvoke $r6.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean isStalled(long)>($l4);

        if $z1 == 0 goto label29;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultAudioSink", "Resetting stalled audio track");

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

        return 1;

     label29:
        return 0;
    }

    private android.media.AudioTrack buildAudioTrackWithRetry() throws androidx.media3.exoplayer.audio.AudioSink$InitializationException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r1, $r3;
        java.lang.Object $r2;
        android.media.AudioTrack $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration) $r2;

        $r4 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack buildAudioTrack(androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration)>($r3);

        return $r4;
    }

    private android.media.AudioTrack buildAudioTrack(androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration) throws androidx.media3.exoplayer.audio.AudioSink$InitializationException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r1;
        android.media.AudioTrack r2;
        int $i0;
        androidx.media3.common.AudioAttributes $r3;
        boolean $z0, $z1;
        androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId>;

        r2 = virtualinvoke r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioTrack buildAudioTrack(boolean,androidx.media3.common.AudioAttributes,int)>($z0, $r3, $i0);

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener>;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isOffloadedPlayback(android.media.AudioTrack)>(r2);

        interfaceinvoke $r5.<androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener: void onExperimentalOffloadedPlayback(boolean)>($z1);

     label1:
        return r2;
    }

    private void registerStreamEventCallbackV29(android.media.AudioTrack)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioTrack r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 $r2, $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: android.media.AudioTrack;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 offloadStreamEventCallbackV29>;

        if $r2 != null goto label1;

        $r4 = new androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29;

        specialinvoke $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink)>(r0);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 offloadStreamEventCallbackV29> = $r4;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 offloadStreamEventCallbackV29>;

        virtualinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: void register(android.media.AudioTrack)>(r1);

        return;
    }

    private void processBuffers(long) throws androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long l0;
        int i1, $i2, $i3, i4;
        java.nio.ByteBuffer r1, r3, $r5, $r9;
        androidx.media3.common.audio.AudioProcessor r2;
        androidx.media3.common.audio.AudioProcessor[] $r4, $r6;
        java.nio.ByteBuffer[] $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        l0 := @parameter0: long;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        i1 = lengthof $r4;

        i4 = i1;

     label1:
        if i4 < 0 goto label9;

        if i4 <= 0 goto label2;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers>;

        $i3 = i4 - 1;

        $r9 = $r8[$i3];

        goto label4;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        if $r5 == null goto label3;

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        goto label4;

     label3:
        $r9 = <androidx.media3.common.audio.AudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

     label4:
        r1 = $r9;

        if i4 != i1 goto label5;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void writeBuffer(java.nio.ByteBuffer,long)>(r1, l0);

        goto label7;

     label5:
        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        r2 = $r6[i4];

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>;

        if i4 <= $i2 goto label6;

        interfaceinvoke r2.<androidx.media3.common.audio.AudioProcessor: void queueInput(java.nio.ByteBuffer)>(r1);

     label6:
        r3 = interfaceinvoke r2.<androidx.media3.common.audio.AudioProcessor: java.nio.ByteBuffer getOutput()>();

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer[] outputBuffers>;

        $r7[i4] = r3;

        $z0 = virtualinvoke r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label7;

        i4 = i4 + 1;

        goto label1;

     label7:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label8;

        return;

     label8:
        i4 = i4 + -1;

        goto label1;

     label9:
        return;
    }

    private void writeBuffer(java.nio.ByteBuffer, long) throws androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        java.nio.ByteBuffer r1, $r3, $r8, $r24;
        long l0, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l15, $l18, $l32;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        androidx.media3.exoplayer.audio.AudioSink$WriteException r2, r31;
        int $i1, $i2, $i3, $i4, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, $i29, i30, i31, i33, i34, $i35;
        android.media.AudioTrack $r4, $r6, $r14, $r17;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder $r5, $r12;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r7, $r27, $r30;
        byte $b14, $b16, $b17;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r10, $r11, $r13, $r29;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r15;
        byte[] $r16, $r19, $r20, $r23, $r25;
        androidx.media3.common.Format $r28;
        java.lang.Throwable r32;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label01;

        return;

     label01:
        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>;

        if $r3 == null goto label04;

        $r24 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>;

        if $r24 != r1 goto label02;

        $z8 = 1;

        goto label03;

     label02:
        $z8 = 0;

     label03:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z8);

        goto label07;

     label04:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer> = r1;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 >= 21 goto label07;

        i25 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r19 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer>;

        if $r19 == null goto label05;

        $r23 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer>;

        $i24 = lengthof $r23;

        if $i24 >= i25 goto label06;

     label05:
        $r20 = newarray (byte)[i25];

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer> = $r20;

     label06:
        i26 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r25 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r25, 0, i25);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i26);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int preV21OutputBufferOffset> = 0;

     label07:
        i27 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        i28 = 0;

        $i29 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i29 >= 21 goto label09;

        $r15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $l18 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes>;

        i30 = virtualinvoke $r15.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: int getAvailableBufferSize(long)>($l18);

        if i30 <= 0 goto label08;

        i31 = staticinvoke <java.lang.Math: int min(int,int)>(i27, i30);

        $r17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r16 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: byte[] preV21OutputBuffer>;

        $i19 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int preV21OutputBufferOffset>;

        i28 = virtualinvoke $r17.<android.media.AudioTrack: int write(byte[],int,int)>($r16, $i19, i31);

        if i28 <= 0 goto label08;

        $i20 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int preV21OutputBufferOffset>;

        $i21 = $i20 + i28;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int preV21OutputBufferOffset> = $i21;

        $i22 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i23 = $i22 + i28;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i23);

     label08:
        goto label13;

     label09:
        $z2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        if $z2 == 0 goto label12;

        $b17 = l0 cmp -9223372036854775807L;

        if $b17 == 0 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z9);

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        i28 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int writeNonBlockingWithAvSyncV21(android.media.AudioTrack,java.nio.ByteBuffer,int,long)>($r14, r1, i27, l0);

        goto label13;

     label12:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        i28 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: int writeNonBlockingV21(android.media.AudioTrack,java.nio.ByteBuffer,int)>($r4, r1, i27);

     label13:
        $l32 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long lastFeedElapsedRealtimeMs> = $l32;

        if i28 >= 0 goto label18;

        i33 = i28;

        $z6 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackDeadObject(int)>(i33);

        if $z6 == 0 goto label14;

        $l15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames>;

        $b16 = $l15 cmp 0L;

        if $b16 <= 0 goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        z0 = $z10;

        r31 = new androidx.media3.exoplayer.audio.AudioSink$WriteException;

        $r27 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r28 = $r27.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        specialinvoke r31.<androidx.media3.exoplayer.audio.AudioSink$WriteException: void <init>(int,androidx.media3.common.Format,boolean)>(i33, $r28, z0);

        r2 = r31;

        $r29 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        if $r29 == null goto label16;

        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        interfaceinvoke $r13.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onAudioSinkError(java.lang.Exception)>(r2);

     label16:
        $z7 = r2.<androidx.media3.exoplayer.audio.AudioSink$WriteException: boolean isRecoverable>;

        if $z7 == 0 goto label17;

        r32 = (java.lang.Throwable) r2;

        throw r32;

     label17:
        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder>;

        virtualinvoke $r12.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void throwExceptionIfDeadlineIsReached(java.lang.Exception)>(r2);

        return;

     label18:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder>;

        virtualinvoke $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        i34 = i28;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $z3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isOffloadedPlayback(android.media.AudioTrack)>($r6);

        if $z3 == 0 goto label20;

        $l13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames>;

        $b14 = $l13 cmp 0L;

        if $b14 <= 0 goto label19;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isWaitingForOffloadEndOfStreamHandled> = 0;

     label19:
        $z4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing>;

        if $z4 == 0 goto label20;

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        if $r10 == null goto label20;

        if i34 >= i27 goto label20;

        $z5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isWaitingForOffloadEndOfStreamHandled>;

        if $z5 != 0 goto label20;

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        interfaceinvoke $r11.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onOffloadBufferFull()>();

     label20:
        $r30 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i35 = $r30.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i35 != 0 goto label21;

        $l11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes>;

        $l10 = (long) i34;

        $l12 = $l11 + $l10;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes> = $l12;

     label21:
        if i34 != i27 goto label25;

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i2 = $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i2 == 0 goto label24;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer>;

        if r1 != $r8 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z11);

        $l8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames>;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample>;

        $l6 = (long) $i3;

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int inputBufferAccessUnitCount>;

        $l5 = (long) $i4;

        $l7 = $l6 * $l5;

        $l9 = $l8 + $l7;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames> = $l9;

     label24:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer> = null;

     label25:
        return;
    }

    public void playToEndOfStream() throws androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean handledEndOfStream>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean drainToEndOfStream()>();

        if $z2 == 0 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void playPendingData()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean handledEndOfStream> = 1;

     label1:
        return;
    }

    private void maybeDisableOffload()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $z0 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: boolean outputModeIsOffload()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean offloadDisabledUntilNextConfiguration> = 1;

        return;
    }

    private static boolean isAudioTrackDeadObject(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 24 goto label1;

        if i0 == -6 goto label2;

     label1:
        if i0 != -32 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private boolean drainToEndOfStream() throws androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.audio.AudioProcessor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.nio.ByteBuffer $r2, $r3, $r4;
        androidx.media3.common.audio.AudioProcessor[] $r5, $r6;
        boolean $z0, z1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        z1 = 0;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>;

        if $i0 != -1 goto label1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex> = 0;

        z1 = 1;

     label1:
        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        $i5 = lengthof $r6;

        if $i4 >= $i5 goto label4;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] activeAudioProcessors>;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>;

        r1 = $r5[$i1];

        if z1 == 0 goto label2;

        interfaceinvoke r1.<androidx.media3.common.audio.AudioProcessor: void queueEndOfStream()>();

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void processBuffers(long)>(-9223372036854775807L);

        $z0 = interfaceinvoke r1.<androidx.media3.common.audio.AudioProcessor: boolean isEnded()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        z1 = 1;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex>;

        $i3 = $i2 + 1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex> = $i3;

        goto label1;

     label4:
        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>;

        if $r2 == null goto label5;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void writeBuffer(java.nio.ByteBuffer,long)>($r3, -9223372036854775807L);

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer>;

        if $r4 == null goto label5;

        return 0;

     label5:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex> = -1;

        return 1;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean handledEndOfStream>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean hasPendingData()>();

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean hasPendingData()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        $z1 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean hasPendingData(long)>($l0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void setPlaybackParameters(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.PlaybackParameters $r1, r2, r3;
        float $f0, $f1, $f2, $f3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r2 := @parameter0: androidx.media3.common.PlaybackParameters;

        $r1 = new androidx.media3.common.PlaybackParameters;

        $f0 = r2.<androidx.media3.common.PlaybackParameters: float speed>;

        $f1 = staticinvoke <androidx.media3.common.util.Util: float constrainValue(float,float,float)>($f0, 0.1F, 8.0F);

        $f2 = r2.<androidx.media3.common.PlaybackParameters: float pitch>;

        $f3 = staticinvoke <androidx.media3.common.util.Util: float constrainValue(float,float,float)>($f2, 0.1F, 8.0F);

        specialinvoke $r1.<androidx.media3.common.PlaybackParameters: void <init>(float,float)>($f1, $f3);

        r3 = $r1;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams>;

        if $z0 == 0 goto label1;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 23 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setAudioTrackPlaybackParametersV23(androidx.media3.common.PlaybackParameters)>(r3);

        goto label2;

     label1:
        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean getSkipSilenceEnabled()>();

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setAudioProcessorPlaybackParametersAndSkipSilence(androidx.media3.common.PlaybackParameters,boolean)>(r3, $z1);

     label2:
        return;
    }

    public androidx.media3.common.PlaybackParameters getPlaybackParameters()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;
        androidx.media3.common.PlaybackParameters $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableAudioTrackPlaybackParams>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters audioTrackPlaybackParameters>;

        goto label2;

     label1:
        $r1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters getAudioProcessorPlaybackParameters()>();

     label2:
        return $r1;
    }

    public void setSkipSilenceEnabled(boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean z0;
        androidx.media3.common.PlaybackParameters $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters getAudioProcessorPlaybackParameters()>();

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setAudioProcessorPlaybackParametersAndSkipSilence(androidx.media3.common.PlaybackParameters,boolean)>($r1, z0);

        return;
    }

    public boolean getSkipSilenceEnabled()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters getMediaPositionParameters()>();

        $z0 = $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: boolean skipSilence>;

        return $z0;
    }

    public void setAudioAttributes(androidx.media3.common.AudioAttributes)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.AudioAttributes r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.AudioAttributes;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>;

        $z0 = virtualinvoke $r2.<androidx.media3.common.AudioAttributes: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes> = r1;

        $z1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        if $z1 == 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

        return;
    }

    public androidx.media3.common.AudioAttributes getAudioAttributes()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.AudioAttributes $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AudioAttributes audioAttributes>;

        return $r1;
    }

    public void setAudioSessionId(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId>;

        if $i1 == i0 goto label3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId> = i0;

        if i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean externalAudioSessionIdProvided> = $z0;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

     label3:
        return;
    }

    public void setAuxEffectInfo(androidx.media3.common.AuxEffectInfo)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.AuxEffectInfo r1, $r2, $r4;
        int i0, $i1;
        float f0;
        boolean $z0;
        android.media.AudioTrack $r3, $r5, $r6;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.AuxEffectInfo;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>;

        $z0 = virtualinvoke $r2.<androidx.media3.common.AuxEffectInfo: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        i0 = r1.<androidx.media3.common.AuxEffectInfo: int effectId>;

        f0 = r1.<androidx.media3.common.AuxEffectInfo: float sendLevel>;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        if $r3 == null goto label3;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo>;

        $i1 = $r4.<androidx.media3.common.AuxEffectInfo: int effectId>;

        if $i1 == i0 goto label2;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r6.<android.media.AudioTrack: int attachAuxEffect(int)>(i0);

     label2:
        if i0 == 0 goto label3;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r5.<android.media.AudioTrack: int setAuxEffectSendLevel(float)>(f0);

     label3:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.AuxEffectInfo auxEffectInfo> = r1;

        return;
    }

    public void setPreferredDevice(android.media.AudioDeviceInfo)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioDeviceInfo r1;
        android.media.AudioTrack $r2, $r4;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 $r3, $r6;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        if r1 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r6 = new androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23;

        specialinvoke $r6.<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23: void <init>(android.media.AudioDeviceInfo)>(r1);

     label2:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 preferredDevice> = $r6;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        if $r2 == null goto label3;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 preferredDevice>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Api23: void setPreferredDeviceOnAudioTrack(android.media.AudioTrack,androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23)>($r4, $r3);

     label3:
        return;
    }

    public void enableTunnelingV21()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean externalAudioSessionIdProvided>;

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $z1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        if $z1 != 0 goto label3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling> = 1;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

     label3:
        return;
    }

    public void disableTunneling()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        if $z0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling> = 0;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

     label1:
        return;
    }

    public void setVolume(float)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        f0 := @parameter0: float;

        $f1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume> = f0;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setVolumeInternal()>();

     label1:
        return;
    }

    private void setVolumeInternal()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;
        int $i0;
        float $f0, $f1;
        android.media.AudioTrack $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label2;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $f1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: void setVolumeInternalV21(android.media.AudioTrack,float)>($r2, $f1);

        goto label3;

     label2:
        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $f0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: float volume>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: void setVolumeInternalV3(android.media.AudioTrack,float)>($r1, $f0);

     label3:
        return;
    }

    public void pause()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1;
        android.media.AudioTrack $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing> = 0;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $z1 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean pause()>();

        if $z1 == 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r2.<android.media.AudioTrack: void pause()>();

     label1:
        return;
    }

    public void flush()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1, $r3;
        android.media.AudioTrack $r2, $r5, $r9, $r11;
        int $i0;
        androidx.media3.common.util.ConditionVariable $r4;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r6, $r12;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 $r7, $r10;
        java.lang.Object $r8;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder $r13, $r14;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label5;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void resetSinkStateForFlush()>();

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $z1 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean isPlaying()>();

        if $z1 == 0 goto label1;

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r11.<android.media.AudioTrack: void pause()>();

     label1:
        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $z2 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isOffloadedPlayback(android.media.AudioTrack)>($r2);

        if $z2 == 0 goto label2;

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 offloadStreamEventCallbackV29>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r10 = (androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29) $r8;

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r10.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: void unregister(android.media.AudioTrack)>($r9);

     label2:
        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 21 goto label3;

        $z3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean externalAudioSessionIdProvided>;

        if $z3 != 0 goto label3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int audioSessionId> = 0;

     label3:
        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>;

        if $r12 == null goto label4;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration> = $r6;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration pendingConfiguration> = null;

     label4:
        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        virtualinvoke $r3.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void reset()>();

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.util.ConditionVariable releasingConditionVariable>;

        staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: void releaseAudioTrackAsync(android.media.AudioTrack,androidx.media3.common.util.ConditionVariable)>($r5, $r4);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack> = null;

     label5:
        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder>;

        virtualinvoke $r13.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder initializationExceptionPendingExceptionHolder>;

        virtualinvoke $r14.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        return;
    }

    public void experimentalFlushWithoutAudioTrackRelease()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder $r1, $r2;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r3, $r5, $r11;
        android.media.AudioTrack $r4, $r10, $r12;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r6, $r7, $r8, $r9;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 25 goto label1;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

        return;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder writeExceptionPendingExceptionHolder>;

        virtualinvoke $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder initializationExceptionPendingExceptionHolder>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void resetSinkStateForFlush()>();

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $z1 = virtualinvoke $r3.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: boolean isPlaying()>();

        if $z1 == 0 goto label3;

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r12.<android.media.AudioTrack: void pause()>();

     label3:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r4.<android.media.AudioTrack: void flush()>();

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        virtualinvoke $r5.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void reset()>();

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i1 = $r6.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i1 != 2 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i4 = $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i3 = $r8.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i2 = $r9.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        virtualinvoke $r11.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void setAudioTrack(android.media.AudioTrack,boolean,int,int,int)>($r10, $z2, $i4, $i3, $i2);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean startMediaTimeUsNeedsInit> = 1;

        return;
    }

    public void reset()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.audio.AudioProcessor[] r1, r3;
        int i0, i1, i2, i3;
        androidx.media3.common.audio.AudioProcessor r2, r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flush()>();

        r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toIntPcmAvailableAudioProcessors>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        interfaceinvoke r2.<androidx.media3.common.audio.AudioProcessor: void reset()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessor[] toFloatPcmAvailableAudioProcessors>;

        i2 = lengthof r3;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r4 = r3[i3];

        interfaceinvoke r4.<androidx.media3.common.audio.AudioProcessor: void reset()>();

        i3 = i3 + 1;

        goto label3;

     label4:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean offloadDisabledUntilNextConfiguration> = 0;

        return;
    }

    private void resetSinkStateForFlush()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r1;
        androidx.media3.common.PlaybackParameters $r2;
        boolean $z0;
        java.util.ArrayDeque $r3;
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedPcmBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedEncodedFrames> = 0L;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames> = 0L;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isWaitingForOffloadEndOfStreamHandled> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int framesPerEncodedSample> = 0;

        $r1 = new androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters getAudioProcessorPlaybackParameters()>();

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean getSkipSilenceEnabled()>();

        specialinvoke $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: void <init>(androidx.media3.common.PlaybackParameters,boolean,long,long,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>($r2, $z0, 0L, 0L, null);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters> = $r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long startMediaTimeUs> = 0L;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters> = null;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer inputBuffer> = null;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int inputBufferAccessUnitCount> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer outputBuffer> = null;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean stoppedAudioTrack> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean handledEndOfStream> = 0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int drainingAudioProcessorIndex> = -1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader> = null;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = 0;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.TrimmingAudioProcessor trimmingAudioProcessor>;

        virtualinvoke $r4.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: void resetTrimmedFrameCount()>();

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void flushAudioProcessors()>();

        return;
    }

    private void setAudioTrackPlaybackParametersV23(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.PlaybackParams r1, $r3, $r4, $r5, $r6, $r10, $r12;
        java.lang.Throwable r2, $r14;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4;
        android.media.AudioTrack $r7, $r9, $r11;
        androidx.media3.common.PlaybackParameters $r8, r15;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r13;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r15 := @parameter0: androidx.media3.common.PlaybackParameters;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z0 == 0 goto label5;

        $r3 = new android.media.PlaybackParams;

        specialinvoke $r3.<android.media.PlaybackParams: void <init>()>();

        $r4 = virtualinvoke $r3.<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>();

        $f0 = r15.<androidx.media3.common.PlaybackParameters: float speed>;

        $r5 = virtualinvoke $r4.<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>($f0);

        $f1 = r15.<androidx.media3.common.PlaybackParameters: float pitch>;

        $r6 = virtualinvoke $r5.<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>($f1);

        r1 = virtualinvoke $r6.<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>(2);

     label1:
        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r7.<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>(r1);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r2 = $r14;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String,java.lang.Throwable)>("DefaultAudioSink", "Failed to set playback params", r2);

     label4:
        $r8 = new androidx.media3.common.PlaybackParameters;

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r10 = virtualinvoke $r9.<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>();

        $f2 = virtualinvoke $r10.<android.media.PlaybackParams: float getSpeed()>();

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        $r12 = virtualinvoke $r11.<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>();

        $f3 = virtualinvoke $r12.<android.media.PlaybackParams: float getPitch()>();

        specialinvoke $r8.<androidx.media3.common.PlaybackParameters: void <init>(float,float)>($f2, $f3);

        r15 = $r8;

        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $f4 = r15.<androidx.media3.common.PlaybackParameters: float speed>;

        virtualinvoke $r13.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void setAudioTrackPlaybackSpeed(float)>($f4);

     label5:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters audioTrackPlaybackParameters> = r15;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private void setAudioProcessorPlaybackParametersAndSkipSilence(androidx.media3.common.PlaybackParameters, boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.PlaybackParameters r1, $r4;
        boolean z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters r2, r3, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        z0 := @parameter1: boolean;

        r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters getMediaPositionParameters()>();

        $r4 = r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters>;

        $z1 = virtualinvoke r1.<androidx.media3.common.PlaybackParameters: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z3 = r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: boolean skipSilence>;

        if z0 == $z3 goto label3;

     label1:
        $r5 = new androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        specialinvoke $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: void <init>(androidx.media3.common.PlaybackParameters,boolean,long,long,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r1, z0, -9223372036854775807L, -9223372036854775807L, null);

        r3 = $r5;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean isAudioTrackInitialized()>();

        if $z2 == 0 goto label2;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters> = r3;

        goto label3;

     label2:
        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters> = r3;

     label3:
        return;
    }

    private androidx.media3.common.PlaybackParameters getAudioProcessorPlaybackParameters()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r1;
        androidx.media3.common.PlaybackParameters $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters getMediaPositionParameters()>();

        $r2 = $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters>;

        return $r2;
    }

    private androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters getMediaPositionParameters()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r1, $r5;
        java.util.ArrayDeque $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters>;

        if $r1 == null goto label1;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters afterDrainParameters>;

        goto label3;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $z0 = virtualinvoke $r2.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object getLast()>();

        $r5 = (androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters) $r4;

        goto label3;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

     label3:
        return $r5;
    }

    private void applyAudioProcessorPlaybackParametersAndSkipSilence(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long l0, $l1, $l2, $l3;
        androidx.media3.common.PlaybackParameters r1, $r9, $r10;
        boolean z0, $z1, $z2, $z4, $z5;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r2;
        java.util.ArrayDeque $r3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r4;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r5, $r6;
        androidx.media3.common.audio.AudioProcessorChain $r7, $r8;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        l0 := @parameter0: long;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean shouldApplyAudioProcessorPlaybackParameters()>();

        if $z1 == 0 goto label1;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        $r9 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.PlaybackParameters getAudioProcessorPlaybackParameters()>();

        $r10 = interfaceinvoke $r8.<androidx.media3.common.audio.AudioProcessorChain: androidx.media3.common.PlaybackParameters applyPlaybackParameters(androidx.media3.common.PlaybackParameters)>($r9);

        goto label2;

     label1:
        $r10 = <androidx.media3.common.PlaybackParameters: androidx.media3.common.PlaybackParameters DEFAULT>;

     label2:
        r1 = $r10;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean shouldApplyAudioProcessorPlaybackParameters()>();

        if $z2 == 0 goto label3;

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        $z4 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean getSkipSilenceEnabled()>();

        $z5 = interfaceinvoke $r7.<androidx.media3.common.audio.AudioProcessorChain: boolean applySkipSilenceEnabled(boolean)>($z4);

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z0 = $z5;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $r2 = new androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l0);

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $l2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        $l3 = virtualinvoke $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: long framesToDurationUs(long)>($l2);

        specialinvoke $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: void <init>(androidx.media3.common.PlaybackParameters,boolean,long,long,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r1, z0, $l1, $l3, null);

        virtualinvoke $r3.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void setupAudioProcessors()>();

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        if $r5 == null goto label5;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        interfaceinvoke $r6.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onSkipSilenceEnabledChanged(boolean)>(z0);

     label5:
        return;
    }

    private boolean shouldApplyAudioProcessorPlaybackParameters()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r1, $r5;
        androidx.media3.common.Format $r2, $r6;
        java.lang.String $r3, $r4;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean tunneling>;

        if $z0 != 0 goto label1;

        $r4 = "audio/raw";

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r2 = $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $r3 = $r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r6 = $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i0 = $r6.<androidx.media3.common.Format: int pcmEncoding>;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean shouldUseFloatOutput(int)>($i0);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private boolean shouldUseFloatOutput(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        i0 := @parameter0: int;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean enableFloatOutput>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <androidx.media3.common.util.Util: boolean isEncodingHighResolutionPcm(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private long applyMediaPositionParameters(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long l0, l1, l2, l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, l14;
        java.util.ArrayDeque $r1, $r6, $r7, $r14, $r17;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters $r2, $r3, $r9, $r12, $r13, $r16, $r19, r20;
        androidx.media3.common.PlaybackParameters $r4, $r5, $r10;
        java.lang.Object $r8, $r15, $r18;
        float $f0;
        androidx.media3.common.audio.AudioProcessorChain $r11;
        byte $b13;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        l0 := @parameter0: long;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $z0 = virtualinvoke $r1.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $r15 = virtualinvoke $r14.<java.util.ArrayDeque: java.lang.Object getFirst()>();

        $r16 = (androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters) $r15;

        $l12 = $r16.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long audioTrackPositionUs>;

        $b13 = l0 cmp $l12;

        if $b13 < 0 goto label2;

        $r17 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $r18 = virtualinvoke $r17.<java.util.ArrayDeque: java.lang.Object remove()>();

        $r19 = (androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters) $r18;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters> = $r19;

        goto label1;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

        $l4 = $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long audioTrackPositionUs>;

        l1 = l0 - $l4;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

        $r5 = $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters>;

        $r4 = <androidx.media3.common.PlaybackParameters: androidx.media3.common.PlaybackParameters DEFAULT>;

        $z1 = virtualinvoke $r5.<androidx.media3.common.PlaybackParameters: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r13 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

        $l10 = $r13.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long mediaTimeUs>;

        $l11 = $l10 + l1;

        return $l11;

     label3:
        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $z2 = virtualinvoke $r6.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r11 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        l14 = interfaceinvoke $r11.<androidx.media3.common.audio.AudioProcessorChain: long getMediaDuration(long)>(l1);

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

        $l8 = $r12.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long mediaTimeUs>;

        $l9 = $l8 + l14;

        return $l9;

     label4:
        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.ArrayDeque mediaPositionParametersCheckpoints>;

        $r8 = virtualinvoke $r7.<java.util.ArrayDeque: java.lang.Object getFirst()>();

        r20 = (androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters) $r8;

        $l5 = r20.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long audioTrackPositionUs>;

        l2 = $l5 - l0;

        $r9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters mediaPositionParameters>;

        $r10 = $r9.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters>;

        $f0 = $r10.<androidx.media3.common.PlaybackParameters: float speed>;

        l3 = staticinvoke <androidx.media3.common.util.Util: long getMediaDurationForPlayoutDuration(long,float)>(l2, $f0);

        $l6 = r20.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long mediaTimeUs>;

        $l7 = $l6 - l3;

        return $l7;
    }

    private long applySkipping(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long l0, $l1, $l2, $l3;
        androidx.media3.common.audio.AudioProcessorChain $r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        $l1 = interfaceinvoke $r1.<androidx.media3.common.audio.AudioProcessorChain: long getSkippedOutputFrameCount()>();

        $l2 = virtualinvoke $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: long framesToDurationUs(long)>($l1);

        $l3 = l0 + $l2;

        return $l3;
    }

    private boolean isAudioTrackInitialized()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioTrack $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long getSubmittedFrames()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r1, $r2;
        int $i0, $i1;
        long $l2, $l3, $l4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i0 = $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i0 != 0 goto label1;

        $l3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedPcmBytes>;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i1 = $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int inputPcmFrameSize>;

        $l2 = (long) $i1;

        $l4 = $l3 / $l2;

        goto label2;

     label1:
        $l4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long submittedEncodedFrames>;

     label2:
        return $l4;
    }

    private long getWrittenFrames()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration $r1, $r2;
        int $i0, $i1;
        long $l2, $l3, $l4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i0 = $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i0 != 0 goto label1;

        $l3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenPcmBytes>;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration configuration>;

        $i1 = $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        $l2 = (long) $i1;

        $l4 = $l3 / $l2;

        goto label2;

     label1:
        $l4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long writtenEncodedFrames>;

     label2:
        return $l4;
    }

    private boolean useOffloadedPlayback(androidx.media3.common.Format, androidx.media3.common.AudioAttributes)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.common.Format r1;
        androidx.media3.common.AudioAttributes r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.media.AudioFormat r3;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.String $r4, $r6, $r7;
        java.lang.Object $r5;
        androidx.media3.common.AudioAttributes$AudioAttributesV21 $r8;
        android.media.AudioAttributes $r9;
        java.lang.IllegalStateException $r10;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: androidx.media3.common.AudioAttributes;

        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 < 29 goto label01;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode>;

        if $i3 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r4 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r7 = (java.lang.String) $r5;

        $r6 = r1.<androidx.media3.common.Format: java.lang.String codecs>;

        i0 = staticinvoke <androidx.media3.common.MimeTypes: int getEncoding(java.lang.String,java.lang.String)>($r7, $r6);

        if i0 != 0 goto label03;

        return 0;

     label03:
        $i4 = r1.<androidx.media3.common.Format: int channelCount>;

        i1 = staticinvoke <androidx.media3.common.util.Util: int getAudioTrackChannelConfig(int)>($i4);

        if i1 != 0 goto label04;

        return 0;

     label04:
        $i5 = r1.<androidx.media3.common.Format: int sampleRate>;

        r3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioFormat getAudioFormat(int,int,int)>($i5, i1, i0);

        $r8 = virtualinvoke r2.<androidx.media3.common.AudioAttributes: androidx.media3.common.AudioAttributes$AudioAttributesV21 getAudioAttributesV21()>();

        $r9 = $r8.<androidx.media3.common.AudioAttributes$AudioAttributesV21: android.media.AudioAttributes audioAttributes>;

        $i6 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int getOffloadedPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)>(r3, $r9);

        tableswitch($i6)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label15;
            default: goto label16;
        };

     label05:
        return 0;

     label06:
        $i7 = r1.<androidx.media3.common.Format: int encoderDelay>;

        if $i7 != 0 goto label07;

        $i9 = r1.<androidx.media3.common.Format: int encoderPadding>;

        if $i9 == 0 goto label08;

     label07:
        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        z0 = $z2;

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int offloadMode>;

        if $i8 != 1 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        z1 = $z3;

        if z0 == 0 goto label12;

        if z1 != 0 goto label13;

     label12:
        $z4 = 1;

        goto label14;

     label13:
        $z4 = 0;

     label14:
        return $z4;

     label15:
        return 1;

     label16:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;
    }

    private int getOffloadedPlaybackSupport(android.media.AudioFormat, android.media.AudioAttributes)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioFormat r1;
        android.media.AudioAttributes r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.String $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: android.media.AudioFormat;

        r2 := @parameter1: android.media.AudioAttributes;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 31 goto label1;

        $i2 = staticinvoke <android.media.AudioManager: int getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)>(r1, r2);

        return $i2;

     label1:
        $z0 = staticinvoke <android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>(r1, r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 != 30 goto label3;

        $r3 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Pixel");

        if $z1 == 0 goto label3;

        return 2;

     label3:
        return 1;
    }

    private static boolean isOffloadedPlayback(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.media.AudioTrack;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 29 goto label1;

        $z0 = virtualinvoke r0.<android.media.AudioTrack: boolean isOffloadedPlayback()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static int getFramesPerEncodedSample(int, java.nio.ByteBuffer)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.nio.ByteBuffer r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: java.nio.ByteBuffer;

        lookupswitch(i0)
        {
            case -1: goto label14;
            case 0: goto label14;
            case 2: goto label14;
            case 3: goto label14;
            case 4: goto label14;
            case 5: goto label08;
            case 6: goto label08;
            case 7: goto label07;
            case 8: goto label07;
            case 9: goto label01;
            case 10: goto label03;
            case 11: goto label04;
            case 12: goto label04;
            case 14: goto label10;
            case 15: goto label06;
            case 16: goto label05;
            case 17: goto label09;
            case 18: goto label08;
            case 20: goto label13;
            case 268435456: goto label14;
            case 536870912: goto label14;
            case 805306368: goto label14;
            case 1073741824: goto label14;
            default: goto label14;
        };

     label01:
        $i7 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        i1 = staticinvoke <androidx.media3.common.util.Util: int getBigEndianInt(java.nio.ByteBuffer,int)>(r0, $i7);

        i2 = staticinvoke <androidx.media3.extractor.MpegAudioUtil: int parseMpegAudioFrameSampleCount(int)>(i1);

        if i2 != -1 goto label02;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label02:
        return i2;

     label03:
        return 1024;

     label04:
        return 2048;

     label05:
        return 1024;

     label06:
        return 512;

     label07:
        $i8 = staticinvoke <androidx.media3.extractor.DtsUtil: int parseDtsAudioSampleCount(java.nio.ByteBuffer)>(r0);

        return $i8;

     label08:
        $i9 = staticinvoke <androidx.media3.extractor.Ac3Util: int parseAc3SyncframeAudioSampleCount(java.nio.ByteBuffer)>(r0);

        return $i9;

     label09:
        $i5 = staticinvoke <androidx.media3.extractor.Ac4Util: int parseAc4SyncframeAudioSampleCount(java.nio.ByteBuffer)>(r0);

        return $i5;

     label10:
        i3 = staticinvoke <androidx.media3.extractor.Ac3Util: int findTrueHdSyncframeOffset(java.nio.ByteBuffer)>(r0);

        if i3 != -1 goto label11;

        $i10 = 0;

        goto label12;

     label11:
        $i6 = staticinvoke <androidx.media3.extractor.Ac3Util: int parseTrueHdSyncframeAudioSampleCount(java.nio.ByteBuffer,int)>(r0, i3);

        $i10 = $i6 * 16;

     label12:
        return $i10;

     label13:
        $i4 = staticinvoke <androidx.media3.extractor.OpusUtil: int parsePacketAudioSampleCount(java.nio.ByteBuffer)>(r0);

        return $i4;

     label14:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected audio encoding: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    private static int writeNonBlockingV21(android.media.AudioTrack, java.nio.ByteBuffer, int)
    {
        android.media.AudioTrack r0;
        java.nio.ByteBuffer r1;
        int i0, $i1;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>(r1, i0, 1);

        return $i1;
    }

    private int writeNonBlockingWithAvSyncV21(android.media.AudioTrack, java.nio.ByteBuffer, int, long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioTrack r1;
        java.nio.ByteBuffer r2, $r3, $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r16;
        int i0, i2, $i3, $i4, $i5, $i6, $i9, i10, i11;
        long l1, $l7, $l8;
        java.nio.ByteOrder $r13;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: android.media.AudioTrack;

        r2 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $i3 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i3 < 26 goto label1;

        $l8 = l1 * 1000L;

        $i9 = virtualinvoke r1.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)>(r2, i0, 1, $l8);

        return $i9;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        if $r3 != null goto label2;

        $r12 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader> = $r12;

        $r14 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        $r13 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r13);

        $r16 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        virtualinvoke $r16.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1431633921);

     label2:
        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync>;

        if $i4 != 0 goto label3;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, i0);

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        $l7 = l1 * 1000L;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(8, $l7);

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = i0;

     label3:
        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        i2 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        if i2 <= 0 goto label5;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: java.nio.ByteBuffer avSyncHeader>;

        i10 = virtualinvoke r1.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>($r5, i2, 1);

        if i10 >= 0 goto label4;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = 0;

        return i10;

     label4:
        if i10 >= i2 goto label5;

        return 0;

     label5:
        i11 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: int writeNonBlockingV21(android.media.AudioTrack,java.nio.ByteBuffer,int)>(r1, r2, i0);

        if i11 >= 0 goto label6;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = 0;

        return i11;

     label6:
        $i5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync>;

        $i6 = $i5 - i11;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = $i6;

        return i11;
    }

    private static void setVolumeInternalV21(android.media.AudioTrack, float)
    {
        android.media.AudioTrack r0;
        float f0;

        r0 := @parameter0: android.media.AudioTrack;

        f0 := @parameter1: float;

        virtualinvoke r0.<android.media.AudioTrack: int setVolume(float)>(f0);

        return;
    }

    private static void setVolumeInternalV3(android.media.AudioTrack, float)
    {
        android.media.AudioTrack r0;
        float f0;

        r0 := @parameter0: android.media.AudioTrack;

        f0 := @parameter1: float;

        virtualinvoke r0.<android.media.AudioTrack: int setStereoVolume(float,float)>(f0, f0);

        return;
    }

    private void playPendingData()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;
        androidx.media3.exoplayer.audio.AudioTrackPositionTracker $r1;
        long $l0;
        android.media.AudioTrack $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean stoppedAudioTrack>;

        if $z0 != 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean stoppedAudioTrack> = 1;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioTrackPositionTracker audioTrackPositionTracker>;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        virtualinvoke $r1.<androidx.media3.exoplayer.audio.AudioTrackPositionTracker: void handleEndOfStream(long)>($l0);

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        virtualinvoke $r2.<android.media.AudioTrack: void stop()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: int bytesUntilNextAvSync> = 0;

     label1:
        return;
    }

    private static void releaseAudioTrackAsync(android.media.AudioTrack, androidx.media3.common.util.ConditionVariable)
    {
        android.media.AudioTrack r0;
        androidx.media3.common.util.ConditionVariable r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.ExecutorService $r5, $r6, $r8;
        int $i0, $i1;
        java.lang.Runnable $r7;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: androidx.media3.common.util.ConditionVariable;

        virtualinvoke r1.<androidx.media3.common.util.ConditionVariable: boolean close()>();

        $r4 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.Object releaseExecutorLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor>;

        if $r5 != null goto label2;

        $r8 = staticinvoke <androidx.media3.common.util.Util: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.lang.String)>("ExoPlayer:AudioTrackReleaseThread");

        <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor> = $r8;

     label2:
        $i0 = <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>;

        $i1 = $i0 + 1;

        <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount> = $i1;

        $r6 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (android.media.AudioTrack,androidx.media3.common.util.ConditionVariable)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.audio.DefaultAudioSink: void lambda$releaseAudioTrackAsync$0(android.media.AudioTrack,androidx.media3.common.util.ConditionVariable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static android.media.AudioFormat getAudioFormat(int, int, int)
    {
        int i0, i1, i2;
        android.media.AudioFormat$Builder $r0, $r1, $r2, $r3;
        android.media.AudioFormat $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new android.media.AudioFormat$Builder;

        specialinvoke $r0.<android.media.AudioFormat$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i0);

        $r2 = virtualinvoke $r1.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i1);

        $r3 = virtualinvoke $r2.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i2);

        $r4 = virtualinvoke $r3.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        return $r4;
    }

    private static int getAudioTrackMinBufferSize(int, int, int)
    {
        int i0, i1, i2, i3;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = staticinvoke <android.media.AudioTrack: int getMinBufferSize(int,int,int)>(i0, i1, i2);

        if i3 == -2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return i3;
    }

    private static void lambda$releaseAudioTrackAsync$0(android.media.AudioTrack, androidx.media3.common.util.ConditionVariable)
    {
        android.media.AudioTrack r0;
        androidx.media3.common.util.ConditionVariable r1;
        java.lang.Object r2, r5, $r7, $r10;
        java.lang.Throwable r3, r4, r6, $r9, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ExecutorService $r8, $r11;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: androidx.media3.common.util.ConditionVariable;

     label01:
        virtualinvoke r0.<android.media.AudioTrack: void flush()>();

        virtualinvoke r0.<android.media.AudioTrack: void release()>();

     label02:
        virtualinvoke r1.<androidx.media3.common.util.ConditionVariable: boolean open()>();

        $r7 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.Object releaseExecutorLock>;

        r2 = $r7;

        entermonitor $r7;

     label03:
        $i0 = <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>;

        $i1 = $i0 - 1;

        <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount> = $i1;

        $i2 = <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>;

        if $i2 != 0 goto label04;

        $r8 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: void shutdown()>();

        <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor> = null;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r2;

     label07:
        throw r3;

     label08:
        goto label17;

     label09:
        $r9 := @caughtexception;

        r4 = $r9;

     label10:
        virtualinvoke r1.<androidx.media3.common.util.ConditionVariable: boolean open()>();

        $r10 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.Object releaseExecutorLock>;

        r5 = $r10;

        entermonitor $r10;

     label11:
        $i3 = <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>;

        $i4 = $i3 - 1;

        <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount> = $i4;

        $i5 = <androidx.media3.exoplayer.audio.DefaultAudioSink: int pendingReleaseCount>;

        if $i5 != 0 goto label12;

        $r11 = <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor>;

        interfaceinvoke $r11.<java.util.concurrent.ExecutorService: void shutdown()>();

        <androidx.media3.exoplayer.audio.DefaultAudioSink: java.util.concurrent.ExecutorService releaseExecutor> = null;

     label12:
        exitmonitor r5;

     label13:
        goto label16;

     label14:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r5;

     label15:
        throw r6;

     label16:
        throw r4;

     label17:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder, androidx.media3.exoplayer.audio.DefaultAudioSink$1)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$1 r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r2 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink$1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)>(r1);

        return;
    }

    static android.media.AudioTrack access$800(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        android.media.AudioTrack $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack audioTrack>;

        return $r1;
    }

    static androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener listener>;

        return $r1;
    }

    static boolean access$1000(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: boolean playing>;

        return $z0;
    }

    static long access$1100(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long $l0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getSubmittedFrames()>();

        return $l0;
    }

    static long access$1200(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long $l0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long getWrittenFrames()>();

        return $l0;
    }

    static long access$1400(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink r0;
        long $l0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        $l0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink: long lastFeedElapsedRealtimeMs>;

        return $l0;
    }

    static android.media.AudioFormat access$1500(int, int, int)
    {
        int i0, i1, i2;
        android.media.AudioFormat $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioFormat getAudioFormat(int,int,int)>(i0, i1, i2);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean failOnSpuriousAudioTimestamp> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.media3.exoplayer.audio.DefaultAudioSink: java.lang.Object releaseExecutorLock> = $r0;

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$1
androidx.media3.exoplayer.audio.DefaultAudioSink$Api23
    private void <init>()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Api23 r0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Api23;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setPreferredDeviceOnAudioTrack(android.media.AudioTrack, androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23)
    {
        android.media.AudioTrack r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 r1;
        android.media.AudioDeviceInfo $r3;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23: android.media.AudioDeviceInfo audioDeviceInfo>;

     label2:
        virtualinvoke r0.<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)>($r3);

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$Api31
    private void <init>()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Api31 r0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Api31;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setLogSessionIdOnAudioTrack(android.media.AudioTrack, androidx.media3.exoplayer.analytics.PlayerId)
    {
        android.media.AudioTrack r0;
        androidx.media3.exoplayer.analytics.PlayerId r1;
        android.media.metrics.LogSessionId r2, $r3;
        boolean $z0;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: androidx.media3.exoplayer.analytics.PlayerId;

        r2 = virtualinvoke r1.<androidx.media3.exoplayer.analytics.PlayerId: android.media.metrics.LogSessionId getLogSessionId()>();

        $r3 = <android.media.metrics.LogSessionId: android.media.metrics.LogSessionId LOG_SESSION_ID_NONE>;

        $z0 = virtualinvoke r2.<android.media.metrics.LogSessionId: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.media.AudioTrack: void setLogSessionId(android.media.metrics.LogSessionId)>(r2);

     label1:
        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23
<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23: android.media.AudioDeviceInfo audioDeviceInfo>
    public void <init>(android.media.AudioDeviceInfo)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23 r0;
        android.media.AudioDeviceInfo r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioDeviceInfoApi23: android.media.AudioDeviceInfo audioDeviceInfo> = r1;

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$AudioProcessorChain
androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider
<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider DEFAULT>
<androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider: int getBufferSizeInBytes(int,int,int,int,int,int,double)>
    static void <clinit>()
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder $r0;
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider $r1;

        $r0 = new androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        specialinvoke $r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider build()>();

        <androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider DEFAULT> = $r1;

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$Builder
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableFloatOutput>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableAudioTrackPlaybackParams>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: int offloadMode>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.exoplayer.audio.AudioCapabilities $r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider $r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities> = $r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: int offloadMode> = 0;

        $r2 = <androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider DEFAULT>;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider> = $r2;

        return;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.exoplayer.audio.AudioCapabilities r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioCapabilities;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessors(androidx.media3.common.audio.AudioProcessor[])
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0, $r4;
        androidx.media3.common.audio.AudioProcessor[] r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor[];

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = new androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        specialinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: void <init>(androidx.media3.common.audio.AudioProcessor[])>(r1);

        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessorChain(androidx.media3.common.audio.AudioProcessorChain)>($r3);

        return $r4;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessorChain(androidx.media3.common.audio.AudioProcessorChain)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.common.audio.AudioProcessorChain r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessorChain;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setEnableFloatOutput(boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableFloatOutput> = z0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setEnableAudioTrackPlaybackParams(boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableAudioTrackPlaybackParams> = z0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setOffloadMode(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: int offloadMode> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioTrackBufferSizeProvider(androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$AudioTrackBufferSizeProvider audioTrackBufferSizeProvider> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setExperimentalAudioOffloadListener(androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener audioOffloadListener> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink build()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.common.audio.AudioProcessorChain $r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r2;
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain $r3;
        androidx.media3.common.audio.AudioProcessor[] $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        if $r1 != null goto label1;

        $r3 = new androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        $r4 = newarray (androidx.media3.common.audio.AudioProcessor)[0];

        specialinvoke $r3.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: void <init>(androidx.media3.common.audio.AudioProcessor[])>($r4);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain> = $r3;

     label1:
        $r2 = new androidx.media3.exoplayer.audio.DefaultAudioSink;

        specialinvoke $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r0, null);

        return $r2;
    }

    static androidx.media3.exoplayer.audio.AudioCapabilities access$100(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.exoplayer.audio.AudioCapabilities $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.AudioCapabilities audioCapabilities>;

        return $r1;
    }

    static androidx.media3.common.audio.AudioProcessorChain access$200(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        androidx.media3.common.audio.AudioProcessorChain $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.common.audio.AudioProcessorChain audioProcessorChain>;

        return $r1;
    }

    static boolean access$300(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableFloatOutput>;

        return $z0;
    }

    static boolean access$400(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $z0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: boolean enableAudioTrackPlaybackParams>;

        return $z0;
    }

    static int access$500(androidx.media3.exoplayer.audio.DefaultAudioSink$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: int offloadMode>;

        return $i0;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int inputPcmFrameSize>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>
<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.audio.AudioProcessor[] availableAudioProcessors>
    public void <init>(androidx.media3.common.Format, int, int, int, int, int, int, int, androidx.media3.common.audio.AudioProcessor[])
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        androidx.media3.common.Format r1;
        int i0, i1, i2, i3, i4, i5, i6;
        androidx.media3.common.audio.AudioProcessor[] r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        r1 := @parameter0: androidx.media3.common.Format;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        r2 := @parameter8: androidx.media3.common.audio.AudioProcessor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat> = r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int inputPcmFrameSize> = i0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode> = i1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize> = i2;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate> = i3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig> = i4;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding> = i5;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize> = i6;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.audio.AudioProcessor[] availableAudioProcessors> = r2;

        return;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration copyWithBufferSize(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0, $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        androidx.media3.common.audio.AudioProcessor[] $r2;
        androidx.media3.common.Format $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int inputPcmFrameSize>;

        $i5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.audio.AudioProcessor[] availableAudioProcessors>;

        specialinvoke $r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: void <init>(androidx.media3.common.Format,int,int,int,int,int,int,int,androidx.media3.common.audio.AudioProcessor[])>($r3, $i6, $i5, $i4, $i3, $i2, $i1, i0, $r2);

        return $r1;
    }

    public boolean canReuseAudioTrack(androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        $i1 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i1 != $i0 goto label1;

        $i3 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        if $i3 != $i2 goto label1;

        $i5 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        if $i5 != $i4 goto label1;

        $i7 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        if $i7 != $i6 goto label1;

        $i9 = r1.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputPcmFrameSize>;

        if $i9 != $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long inputFramesToDurationUs(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        long l0, $l2, $l3, $l4;
        androidx.media3.common.Format $r1;
        int $i1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        l0 := @parameter0: long;

        $l3 = l0 * 1000000L;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $i1 = $r1.<androidx.media3.common.Format: int sampleRate>;

        $l2 = (long) $i1;

        $l4 = $l3 / $l2;

        return $l4;
    }

    public long framesToDurationUs(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        long l0, $l2, $l3, $l4;
        int $i1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        l0 := @parameter0: long;

        $l3 = l0 * 1000000L;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $l2 = (long) $i1;

        $l4 = $l3 / $l2;

        return $l4;
    }

    public android.media.AudioTrack buildAudioTrack(boolean, androidx.media3.common.AudioAttributes, int) throws androidx.media3.exoplayer.audio.AudioSink$InitializationException
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        boolean z0, $z1, $z2;
        androidx.media3.common.AudioAttributes r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.media.AudioTrack r2;
        java.lang.Throwable r3, $r6, $r9, r10, r13, r14;
        androidx.media3.common.Format $r5, $r8;
        androidx.media3.exoplayer.audio.AudioSink$InitializationException r11, r12;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.media3.common.AudioAttributes;

        i0 := @parameter2: int;

     label1:
        r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioTrack createAudioTrack(boolean,androidx.media3.common.AudioAttributes,int)>(z0, r1, i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r10 = $r6;

        r11 = new androidx.media3.exoplayer.audio.AudioSink$InitializationException;

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: boolean outputModeIsOffload()>();

        specialinvoke r11.<androidx.media3.exoplayer.audio.AudioSink$InitializationException: void <init>(int,int,int,int,androidx.media3.common.Format,boolean,java.lang.Exception)>(0, $i4, $i5, $i6, $r8, $z2, r10);

        r13 = (java.lang.Throwable) r11;

        throw r13;

     label4:
        i7 = virtualinvoke r2.<android.media.AudioTrack: int getState()>();

        if i7 == 1 goto label9;

     label5:
        virtualinvoke r2.<android.media.AudioTrack: void release()>();

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        r3 = $r9;

     label8:
        r12 = new androidx.media3.exoplayer.audio.AudioSink$InitializationException;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: androidx.media3.common.Format inputFormat>;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: boolean outputModeIsOffload()>();

        specialinvoke r12.<androidx.media3.exoplayer.audio.AudioSink$InitializationException: void <init>(int,int,int,int,androidx.media3.common.Format,boolean,java.lang.Exception)>(i7, $i1, $i2, $i3, $r5, $z1, null);

        r14 = (java.lang.Throwable) r12;

        throw r14;

     label9:
        return r2;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    private android.media.AudioTrack createAudioTrack(boolean, androidx.media3.common.AudioAttributes, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        boolean z0;
        androidx.media3.common.AudioAttributes r1;
        int i0, $i1, $i2;
        android.media.AudioTrack $r2, $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.media3.common.AudioAttributes;

        i0 := @parameter2: int;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 29 goto label1;

        $r4 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioTrack createAudioTrackV29(boolean,androidx.media3.common.AudioAttributes,int)>(z0, r1, i0);

        return $r4;

     label1:
        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 < 21 goto label2;

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioTrack createAudioTrackV21(boolean,androidx.media3.common.AudioAttributes,int)>(z0, r1, i0);

        return $r3;

     label2:
        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioTrack createAudioTrackV9(androidx.media3.common.AudioAttributes,int)>(r1, i0);

        return $r2;
    }

    private android.media.AudioTrack createAudioTrackV29(boolean, androidx.media3.common.AudioAttributes, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        boolean z0, $z1;
        androidx.media3.common.AudioAttributes r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.media.AudioFormat r2;
        android.media.AudioAttributes r3;
        android.media.AudioTrack$Builder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        android.media.AudioTrack $r11;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.media3.common.AudioAttributes;

        i0 := @parameter2: int;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        r2 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioFormat access$1500(int,int,int)>($i3, $i2, $i1);

        r3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioAttributes getAudioTrackAttributesV21(androidx.media3.common.AudioAttributes,boolean)>(r1, z0);

        $r4 = new android.media.AudioTrack$Builder;

        specialinvoke $r4.<android.media.AudioTrack$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioAttributes(android.media.AudioAttributes)>(r3);

        $r6 = virtualinvoke $r5.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioFormat(android.media.AudioFormat)>(r2);

        $r7 = virtualinvoke $r6.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setTransferMode(int)>(1);

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        $r8 = virtualinvoke $r7.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setBufferSizeInBytes(int)>($i4);

        $r9 = virtualinvoke $r8.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setSessionId(int)>(i0);

        $i5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i5 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r10 = virtualinvoke $r9.<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setOffloadedPlayback(boolean)>($z1);

        $r11 = virtualinvoke $r10.<android.media.AudioTrack$Builder: android.media.AudioTrack build()>();

        return $r11;
    }

    private android.media.AudioTrack createAudioTrackV21(boolean, androidx.media3.common.AudioAttributes, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        boolean z0;
        androidx.media3.common.AudioAttributes r1;
        int i0, $i1, $i2, $i3, $i4;
        android.media.AudioTrack $r2;
        android.media.AudioAttributes $r3;
        android.media.AudioFormat $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.media3.common.AudioAttributes;

        i0 := @parameter2: int;

        $r2 = new android.media.AudioTrack;

        $r3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioAttributes getAudioTrackAttributesV21(androidx.media3.common.AudioAttributes,boolean)>(r1, z0);

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioFormat access$1500(int,int,int)>($i3, $i2, $i1);

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        specialinvoke $r2.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>($r3, $r4, $i4, 1, i0);

        return $r2;
    }

    private android.media.AudioTrack createAudioTrackV9(androidx.media3.common.AudioAttributes, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        androidx.media3.common.AudioAttributes r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.media.AudioTrack $r2, $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        r1 := @parameter0: androidx.media3.common.AudioAttributes;

        i0 := @parameter1: int;

        $i2 = r1.<androidx.media3.common.AudioAttributes: int usage>;

        i1 = staticinvoke <androidx.media3.common.util.Util: int getStreamTypeForAudioUsage(int)>($i2);

        if i0 != 0 goto label1;

        $r3 = new android.media.AudioTrack;

        $i10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $i7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        specialinvoke $r3.<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>(i1, $i10, $i9, $i8, $i7, 1);

        return $r3;

     label1:
        $r2 = new android.media.AudioTrack;

        $i6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputSampleRate>;

        $i5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputChannelConfig>;

        $i4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputEncoding>;

        $i3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int bufferSize>;

        specialinvoke $r2.<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>(i1, $i6, $i5, $i4, $i3, 1, i0);

        return $r2;
    }

    private static android.media.AudioAttributes getAudioTrackAttributesV21(androidx.media3.common.AudioAttributes, boolean)
    {
        androidx.media3.common.AudioAttributes r0;
        boolean z0;
        androidx.media3.common.AudioAttributes$AudioAttributesV21 $r1;
        android.media.AudioAttributes $r2, $r3;

        r0 := @parameter0: androidx.media3.common.AudioAttributes;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: android.media.AudioAttributes getAudioTrackTunnelingAttributesV21()>();

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<androidx.media3.common.AudioAttributes: androidx.media3.common.AudioAttributes$AudioAttributesV21 getAudioAttributesV21()>();

        $r2 = $r1.<androidx.media3.common.AudioAttributes$AudioAttributesV21: android.media.AudioAttributes audioAttributes>;

        return $r2;
    }

    private static android.media.AudioAttributes getAudioTrackTunnelingAttributesV21()
    {
        android.media.AudioAttributes$Builder $r0, $r1, $r2, $r3;
        android.media.AudioAttributes $r4;

        $r0 = new android.media.AudioAttributes$Builder;

        specialinvoke $r0.<android.media.AudioAttributes$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>(3);

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>(16);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(1);

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        return $r4;
    }

    public boolean outputModeIsOffload()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$Configuration: int outputMode>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain
<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors>
<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor silenceSkippingAudioProcessor>
<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SonicAudioProcessor sonicAudioProcessor>
    public transient void <init>(androidx.media3.common.audio.AudioProcessor[])
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        androidx.media3.common.audio.AudioProcessor[] r1;
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor $r2;
        androidx.media3.exoplayer.audio.SonicAudioProcessor $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor[];

        $r2 = new androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        specialinvoke $r2.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void <init>()>();

        $r3 = new androidx.media3.exoplayer.audio.SonicAudioProcessor;

        specialinvoke $r3.<androidx.media3.exoplayer.audio.SonicAudioProcessor: void <init>()>();

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: void <init>(androidx.media3.common.audio.AudioProcessor[],androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor,androidx.media3.exoplayer.audio.SonicAudioProcessor)>(r1, $r2, $r3);

        return;
    }

    public void <init>(androidx.media3.common.audio.AudioProcessor[], androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor, androidx.media3.exoplayer.audio.SonicAudioProcessor)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        androidx.media3.common.audio.AudioProcessor[] r1, $r4, $r5;
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r2;
        androidx.media3.exoplayer.audio.SonicAudioProcessor r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r6, $r7;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor[];

        r2 := @parameter1: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r3 := @parameter2: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $i1 = $i0 + 2;

        $r4 = newarray (androidx.media3.common.audio.AudioProcessor)[$i1];

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors> = $r4;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i2);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor silenceSkippingAudioProcessor> = r2;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SonicAudioProcessor sonicAudioProcessor> = r3;

        $r6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors>;

        $i3 = lengthof r1;

        $r6[$i3] = r2;

        $r7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors>;

        $i4 = lengthof r1;

        $i5 = $i4 + 1;

        $r7[$i5] = r3;

        return;
    }

    public androidx.media3.common.audio.AudioProcessor[] getAudioProcessors()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        androidx.media3.common.audio.AudioProcessor[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.common.audio.AudioProcessor[] audioProcessors>;

        return $r1;
    }

    public androidx.media3.common.PlaybackParameters applyPlaybackParameters(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        androidx.media3.common.PlaybackParameters r1;
        float $f0, $f1;
        androidx.media3.exoplayer.audio.SonicAudioProcessor $r2, $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SonicAudioProcessor sonicAudioProcessor>;

        $f0 = r1.<androidx.media3.common.PlaybackParameters: float speed>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.SonicAudioProcessor: void setSpeed(float)>($f0);

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SonicAudioProcessor sonicAudioProcessor>;

        $f1 = r1.<androidx.media3.common.PlaybackParameters: float pitch>;

        virtualinvoke $r3.<androidx.media3.exoplayer.audio.SonicAudioProcessor: void setPitch(float)>($f1);

        return r1;
    }

    public boolean applySkipSilenceEnabled(boolean)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        boolean z0;
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor silenceSkippingAudioProcessor>;

        virtualinvoke $r1.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void setEnabled(boolean)>(z0);

        return z0;
    }

    public long getMediaDuration(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        long l0, $l1;
        androidx.media3.exoplayer.audio.SonicAudioProcessor $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SonicAudioProcessor sonicAudioProcessor>;

        $l1 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long getMediaDuration(long)>(l0);

        return $l1;
    }

    public long getSkippedOutputFrameCount()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain r0;
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$DefaultAudioProcessorChain: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor silenceSkippingAudioProcessor>;

        $l0 = virtualinvoke $r1.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long getSkippedFrames()>();

        return $l0;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException
    private void <init>(java.lang.String)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

    void <init>(java.lang.String, androidx.media3.exoplayer.audio.DefaultAudioSink$1)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException r0;
        java.lang.String r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$1 r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink$1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException: void <init>(java.lang.String)>(r1);

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters
<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters>
<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: boolean skipSilence>
<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long mediaTimeUs>
<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long audioTrackPositionUs>
    private void <init>(androidx.media3.common.PlaybackParameters, boolean, long, long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters r0;
        androidx.media3.common.PlaybackParameters r1;
        boolean z0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: androidx.media3.common.PlaybackParameters playbackParameters> = r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: boolean skipSilence> = z0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long mediaTimeUs> = l0;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: long audioTrackPositionUs> = l1;

        return;
    }

    void <init>(androidx.media3.common.PlaybackParameters, boolean, long, long, androidx.media3.exoplayer.audio.DefaultAudioSink$1)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters r0;
        androidx.media3.common.PlaybackParameters r1;
        boolean z0;
        long l0, l1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$1 r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r2 := @parameter4: androidx.media3.exoplayer.audio.DefaultAudioSink$1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$MediaPositionParameters: void <init>(androidx.media3.common.PlaybackParameters,boolean,long,long)>(r1, z0, l0, l1);

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$OffloadMode
androidx.media3.exoplayer.audio.DefaultAudioSink$OutputMode
androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder
<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDelayMs>
<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException>
<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDeadlineMs>
    public void <init>(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder r0;
        long l0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDelayMs> = l0;

        return;
    }

    public void throwExceptionIfDeadlineIsReached(java.lang.Exception) throws java.lang.Exception
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder r0;
        java.lang.Exception r1, r2, $r3, $r4, $r5;
        long l0, $l1, $l3, $l4;
        byte $b2;
        java.lang.Throwable r6, r7;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder;

        r1 := @parameter0: java.lang.Exception;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException>;

        if $r3 != null goto label1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException> = r1;

        $l3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDelayMs>;

        $l4 = l0 + $l3;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDeadlineMs> = $l4;

     label1:
        $l1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: long throwDeadlineMs>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label3;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException>;

        if $r4 == r1 goto label2;

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException>;

        r6 = (java.lang.Throwable) r1;

        virtualinvoke $r5.<java.lang.Exception: void addSuppressed(java.lang.Throwable)>(r6);

     label2:
        r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException>;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: void clear()>();

        r7 = (java.lang.Throwable) r2;

        throw r7;

     label3:
        return;
    }

    public void clear()
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder r0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PendingExceptionHolder: java.lang.Exception pendingException> = null;

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener
<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>
    private void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPositionFramesMismatch(long, long, long, long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        long l0, l1, l2, l3, $l4, $l5;
        java.lang.String r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r16, r18;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r12, $r15;
        boolean $z0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException r19;
        java.lang.Throwable r20;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Spurious audio timestamp (frame position mismatch): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $l4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: long access$1100(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $l5 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: long access$1200(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean failOnSpuriousAudioTimestamp>;

        if $z0 == 0 goto label1;

        r19 = new androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException;

        specialinvoke r19.<androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException: void <init>(java.lang.String,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r1, null);

        r20 = (java.lang.Throwable) r19;

        throw r20;

     label1:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultAudioSink", r1);

        return;
    }

    public void onSystemTimeUsMismatch(long, long, long, long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        long l0, l1, l2, l3, $l4, $l5;
        java.lang.String r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r16, r18;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r12, $r15;
        boolean $z0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException r19;
        java.lang.Throwable r20;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Spurious audio timestamp (system clock mismatch): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $l4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: long access$1100(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $l5 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: long access$1200(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean failOnSpuriousAudioTimestamp>;

        if $z0 == 0 goto label1;

        r19 = new androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException;

        specialinvoke r19.<androidx.media3.exoplayer.audio.DefaultAudioSink$InvalidAudioTrackTimestampException: void <init>(java.lang.String,androidx.media3.exoplayer.audio.DefaultAudioSink$1)>(r1, null);

        r20 = (java.lang.Throwable) r19;

        throw r20;

     label1:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultAudioSink", r1);

        return;
    }

    public void onInvalidLatency(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        long l0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring impossibly large audio latency: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultAudioSink", $r4);

        return;
    }

    public void onPositionAdvancing(long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        long l0;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r1, $r3;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r2, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r1);

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r3);

        interfaceinvoke $r4.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onPositionAdvancing(long)>(l0);

     label1:
        return;
    }

    public void onUnderrun(int, long)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        int i0;
        long l1, l2, $l3, $l4;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r1, $r3, $r4;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r2, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r1);

        if $r2 == null goto label1;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $l4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: long access$1400(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r3);

        l2 = $l3 - $l4;

        $r4 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r5 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r4);

        interfaceinvoke $r5.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onUnderrun(int,long,long)>(i0, l1, l2);

     label1:
        return;
    }

    void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink, androidx.media3.exoplayer.audio.DefaultAudioSink$1)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink$1 r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r2 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink$1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$PositionTrackerListener: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink)>(r1);

        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1
<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink val$this$0>
<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>
    void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29, androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1 r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 r1;
        androidx.media3.exoplayer.audio.DefaultAudioSink r2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29;

        r2 := @parameter1: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1> = r1;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink val$this$0> = r2;

        specialinvoke r0.<android.media.AudioTrack$StreamEventCallback: void <init>()>();

        return;
    }

    public void onDataRequest(android.media.AudioTrack, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1 r0;
        android.media.AudioTrack r1, $r4;
        int i0;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 $r2, $r5, $r8, $r10;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r3, $r6, $r9, $r11;
        boolean $z0, $z1;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r7, $r12;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1;

        r1 := @parameter0: android.media.AudioTrack;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r3 = $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack access$800(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r3);

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r6 = $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r7 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r6);

        if $r7 == null goto label2;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r9 = $r8.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean access$1000(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r9);

        if $z1 == 0 goto label2;

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r11 = $r10.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r12 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r11);

        interfaceinvoke $r12.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onOffloadBufferEmptying()>();

     label2:
        return;
    }

    public void onTearDown(android.media.AudioTrack)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1 r0;
        android.media.AudioTrack r1, $r4;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 $r2, $r5, $r8, $r10;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r3, $r6, $r9, $r11;
        boolean $z0, $z1;
        androidx.media3.exoplayer.audio.AudioSink$Listener $r7, $r12;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1;

        r1 := @parameter0: android.media.AudioTrack;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r3 = $r2.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: android.media.AudioTrack access$800(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r3);

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r6 = $r5.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r7 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r6);

        if $r7 == null goto label2;

        $r8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r9 = $r8.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean access$1000(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r9);

        if $z1 == 0 goto label2;

        $r10 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 this$1>;

        $r11 = $r10.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>;

        $r12 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioSink: androidx.media3.exoplayer.audio.AudioSink$Listener access$900(androidx.media3.exoplayer.audio.DefaultAudioSink)>($r11);

        interfaceinvoke $r12.<androidx.media3.exoplayer.audio.AudioSink$Listener: void onOffloadBufferEmptying()>();

     label2:
        return;
    }

androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29
<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.os.Handler handler>
<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.media.AudioTrack$StreamEventCallback callback>
<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0>
    public void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 r0;
        androidx.media3.exoplayer.audio.DefaultAudioSink r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1 $r4;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioSink;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: androidx.media3.exoplayer.audio.DefaultAudioSink this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.os.Handler handler> = $r2;

        $r4 = new androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1;

        specialinvoke $r4.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29$1: void <init>(androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29,androidx.media3.exoplayer.audio.DefaultAudioSink)>(r0, r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.media.AudioTrack$StreamEventCallback callback> = $r4;

        return;
    }

    public void register(android.media.AudioTrack)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 r0;
        android.media.AudioTrack r1;
        android.os.Handler $r2;
        java.util.concurrent.Executor $r4;
        android.media.AudioTrack$StreamEventCallback $r5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29;

        r1 := @parameter0: android.media.AudioTrack;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.os.Handler handler>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = dynamicinvoke "execute" <java.util.concurrent.Executor (android.os.Handler)>($r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_VIRTUAL" <android.os.Handler: boolean post(java.lang.Runnable)>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        $r5 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.media.AudioTrack$StreamEventCallback callback>;

        virtualinvoke r1.<android.media.AudioTrack: void registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack$StreamEventCallback)>($r4, $r5);

        return;
    }

    public void unregister(android.media.AudioTrack)
    {
        androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29 r0;
        android.media.AudioTrack r1;
        android.media.AudioTrack$StreamEventCallback $r2;
        android.os.Handler $r3;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29;

        r1 := @parameter0: android.media.AudioTrack;

        $r2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.media.AudioTrack$StreamEventCallback callback>;

        virtualinvoke r1.<android.media.AudioTrack: void unregisterStreamEventCallback(android.media.AudioTrack$StreamEventCallback)>($r2);

        $r3 = r0.<androidx.media3.exoplayer.audio.DefaultAudioSink$StreamEventCallbackV29: android.os.Handler handler>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

