androidx.sqlite.db.framework.FrameworkSQLiteDatabase
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion Companion>
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.util.List attachedDbs>
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] CONFLICT_VALUES>
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] EMPTY_STRING_ARRAY>
    public void <init>(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase r1, $r2;
        java.util.List $r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate> = r1;

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>();

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.util.List attachedDbs> = $r3;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        androidx.sqlite.db.framework.FrameworkSQLiteStatement $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.sqlite.SQLiteStatement $r4;
        androidx.sqlite.db.SupportSQLiteStatement $r5;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r2 = new androidx.sqlite.db.framework.FrameworkSQLiteStatement;

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "delegate.compileStatement(sql)");

        specialinvoke $r2.<androidx.sqlite.db.framework.FrameworkSQLiteStatement: void <init>(android.database.sqlite.SQLiteStatement)>($r4);

        $r5 = (androidx.sqlite.db.SupportSQLiteStatement) $r2;

        return $r5;
    }

    public void beginTransaction()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        return;
    }

    public void beginTransactionNonExclusive()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>();

        return;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>(r1);

        return;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>(r1);

        return;
    }

    public void endTransaction()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;
    }

    public void setTransactionSuccessful()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        return;
    }

    public boolean inTransaction()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>();

        return $z0;
    }

    public boolean isDbLockedByCurrentThread()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>();

        return $z0;
    }

    public boolean yieldIfContendedSafely()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>();

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        long l0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>(l0);

        return $z0;
    }

    public int getVersion()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        return $i0;
    }

    public void setVersion(int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int i0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>(i0);

        return;
    }

    public long getMaximumSize()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>();

        return $l0;
    }

    public void setMaximumSize(long)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        long l0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>(l0);

        return;
    }

    public long setMaximumSize(long)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        long l0, $l2;
        android.database.sqlite.SQLiteDatabase $r1, $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>(l0);

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $l2 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>();

        return $l2;
    }

    public boolean isExecPerConnectionSQLSupported()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void execPerConnectionSQL(java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1, $r7;
        java.lang.Object[] r2;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        android.database.sqlite.SQLiteDatabase $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl $r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label1;

        $r9 = <androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl INSTANCE>;

        $r8 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r9.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl: void execPerConnectionSQL(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>($r8, r1, r2);

        goto label2;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("execPerConnectionSQL is not supported on a SDK version lower than 30, current version is: ");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        return;
    }

    public long getPageSize()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        return $l0;
    }

    public void setPageSize(long)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        long l0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>(l0);

        return;
    }

    public android.database.Cursor query(java.lang.String)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        androidx.sqlite.db.SimpleSQLiteQuery $r2;
        androidx.sqlite.db.SupportSQLiteQuery $r3;
        android.database.Cursor $r4;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r2 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r2.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String)>(r1);

        $r3 = (androidx.sqlite.db.SupportSQLiteQuery) $r2;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>($r3);

        return $r4;
    }

    public android.database.Cursor query(java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.sqlite.db.SimpleSQLiteQuery $r3;
        androidx.sqlite.db.SupportSQLiteQuery $r4;
        android.database.Cursor $r5;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

        $r3 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r3.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String,java.lang.Object[])>(r1, r2);

        $r4 = (androidx.sqlite.db.SupportSQLiteQuery) $r3;

        $r5 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>($r4);

        return $r5;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        kotlin.jvm.functions.Function4 r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1 $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r5;
        java.lang.String $r6;
        java.lang.String[] $r7;
        android.database.Cursor $r8;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r3 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1;

        specialinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1: void <init>(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        r2 = (kotlin.jvm.functions.Function4) $r3;

        $r4 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $r5 = dynamicinvoke "newCursor" <android.database.sqlite.SQLiteDatabase$CursorFactory (kotlin.jvm.functions.Function4)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: android.database.Cursor __METHODTYPE__(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery), methodhandle: "REF_INVOKE_STATIC" <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.Cursor query$lambda$0(kotlin.jvm.functions.Function4,android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>, methodtype: android.database.Cursor __METHODTYPE__(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery));

        $r6 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: java.lang.String getSql()>();

        $r7 = <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] EMPTY_STRING_ARRAY>;

        $r8 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>($r5, $r6, $r7, null);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "delegate.rawQueryWithFac\u2026EMPTY_STRING_ARRAY, null)");

        return $r8;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.os.CancellationSignal r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String $r4;
        java.lang.String[] $r5;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r6;
        android.database.Cursor $r7;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: android.os.CancellationSignal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $r4 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: java.lang.String getSql()>();

        $r5 = <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] EMPTY_STRING_ARRAY>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        $r6 = dynamicinvoke "newCursor" <android.database.sqlite.SQLiteDatabase$CursorFactory (androidx.sqlite.db.SupportSQLiteQuery)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: android.database.Cursor __METHODTYPE__(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery), methodhandle: "REF_INVOKE_STATIC" <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.Cursor query$lambda$1(androidx.sqlite.db.SupportSQLiteQuery,android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>, methodtype: android.database.Cursor __METHODTYPE__(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery));

        $r7 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r3, $r4, $r5, null, r2, $r6);

        return $r7;
    }

    public long insert(java.lang.String, int, android.content.ContentValues) throws android.database.SQLException
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        int i0;
        android.content.ContentValues r2;
        android.database.sqlite.SQLiteDatabase $r3;
        long $l1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $l1 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, null, r2, i0);

        return $l1;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1, r2, r4, $r10;
        java.lang.Object[] r3;
        java.lang.CharSequence r6;
        java.lang.StringBuilder $r7, r15;
        androidx.sqlite.db.SupportSQLiteProgram $r11;
        androidx.sqlite.db.SimpleSQLiteQuery$Companion $r12;
        int $i0, $i1;
        boolean $z1;
        androidx.sqlite.db.SupportSQLiteStatement r16;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r15 = $r7;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r6 = (java.lang.CharSequence) r2;

        if r6 == null goto label1;

        $i1 = interfaceinvoke r6.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 != 0 goto label4;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label4:
        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "StringBuilder().apply(builderAction).toString()");

        r4 = $r10;

        r16 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>(r4);

        $r12 = <androidx.sqlite.db.SimpleSQLiteQuery: androidx.sqlite.db.SimpleSQLiteQuery$Companion Companion>;

        $r11 = (androidx.sqlite.db.SupportSQLiteProgram) r16;

        virtualinvoke $r12.<androidx.sqlite.db.SimpleSQLiteQuery$Companion: void bind(androidx.sqlite.db.SupportSQLiteProgram,java.lang.Object[])>($r11, r3);

        $i0 = interfaceinvoke r16.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        return $i0;
    }

    public int update(java.lang.String, int, android.content.ContentValues, java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1, r3, r6, r9, $r13, $r19, $r32, $r33, $r35;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        android.content.ContentValues r2;
        java.lang.Object[] r4, r5;
        java.util.Iterator r8;
        java.lang.StringBuilder $r10, r34;
        java.lang.String[] $r12;
        java.util.Set $r17;
        java.lang.CharSequence $r18;
        boolean $z1, $z2, $z4;
        androidx.sqlite.db.SupportSQLiteProgram $r20;
        androidx.sqlite.db.SimpleSQLiteQuery$Companion $r21;
        java.lang.Object $r24, $r25, $r28;
        java.lang.IllegalArgumentException $r31;
        androidx.sqlite.db.SupportSQLiteStatement r36;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $i2 = virtualinvoke r2.<android.content.ContentValues: int size()>();

        if $i2 == 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        if $z2 != 0 goto label03;

        $r33 = "Empty values";

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label03:
        i1 = virtualinvoke r2.<android.content.ContentValues: int size()>();

        if r4 != null goto label04;

        $i7 = i1;

        goto label05;

     label04:
        $i3 = lengthof r4;

        $i7 = i1 + $i3;

     label05:
        $i8 = $i7;

        r5 = newarray (java.lang.Object)[$i7];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r34 = $r10;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r12 = <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r13 = $r12[i0];

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        i9 = 0;

        $r17 = virtualinvoke r2.<android.content.ContentValues: java.util.Set keySet()>();

        r8 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r25;

        if i9 <= 0 goto label07;

        $r35 = ",";

        goto label08;

     label07:
        $r35 = "";

     label08:
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $i6 = i9;

        i9 = i9 + 1;

        $r28 = virtualinvoke r2.<android.content.ContentValues: java.lang.Object get(java.lang.String)>(r9);

        r5[$i6] = $r28;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        goto label06;

     label09:
        if r4 == null goto label11;

        i10 = i1;

     label10:
        if i10 >= $i8 goto label11;

        $i5 = i10 - i1;

        $r24 = r4[$i5];

        r5[i10] = $r24;

        i10 = i10 + 1;

        goto label10;

     label11:
        $r18 = (java.lang.CharSequence) r3;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r18);

        if $z1 != 0 goto label12;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label12:
        $r19 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "StringBuilder().apply(builderAction).toString()");

        r6 = $r19;

        r36 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>(r6);

        $r21 = <androidx.sqlite.db.SimpleSQLiteQuery: androidx.sqlite.db.SimpleSQLiteQuery$Companion Companion>;

        $r20 = (androidx.sqlite.db.SupportSQLiteProgram) r36;

        virtualinvoke $r21.<androidx.sqlite.db.SimpleSQLiteQuery$Companion: void bind(androidx.sqlite.db.SupportSQLiteProgram,java.lang.Object[])>($r20, r5);

        $i4 = interfaceinvoke r36.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        return $i4;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(r1);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>(r1, r2);

        return;
    }

    public boolean isReadOnly()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        return $z0;
    }

    public boolean isOpen()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        return $z0;
    }

    public boolean needUpgrade(int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int i0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>(i0);

        return $z0;
    }

    public java.lang.String getPath()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        return $r2;
    }

    public void setLocale(java.util.Locale)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.util.Locale r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "locale");

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int i0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>(i0);

        return;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean z0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: void setForeignKeyConstraintsEnabled(android.database.sqlite.SQLiteDatabase,boolean)>($r1, z0);

        return;
    }

    public boolean enableWriteAheadLogging()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>();

        return $z0;
    }

    public void disableWriteAheadLogging()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: void disableWriteAheadLogging(android.database.sqlite.SQLiteDatabase)>($r1);

        return;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: boolean isWriteAheadLoggingEnabled(android.database.sqlite.SQLiteDatabase)>($r1);

        return $z0;
    }

    public java.util.List getAttachedDbs()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.util.List $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.util.List attachedDbs>;

        return $r1;
    }

    public boolean isDatabaseIntegrityOk()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>();

        return $z0;
    }

    public void close() throws java.io.IOException
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void close()>();

        return;
    }

    public final boolean isDelegate(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase r1, $r2;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteDatabase");

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: android.database.sqlite.SQLiteDatabase delegate>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        return $z0;
    }

    private static final android.database.Cursor query$lambda$0(kotlin.jvm.functions.Function4, android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        kotlin.jvm.functions.Function4 $r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.database.sqlite.SQLiteCursorDriver r2;
        java.lang.String r3;
        android.database.sqlite.SQLiteQuery r4;
        java.lang.Object $r5;
        android.database.Cursor $r6;

        $r0 := @parameter0: kotlin.jvm.functions.Function4;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter2: android.database.sqlite.SQLiteCursorDriver;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.database.sqlite.SQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$tmp0");

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        $r6 = (android.database.Cursor) $r5;

        return $r6;
    }

    private static final android.database.Cursor query$lambda$1(androidx.sqlite.db.SupportSQLiteQuery, android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        androidx.sqlite.db.SupportSQLiteQuery $r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.database.sqlite.SQLiteCursorDriver r2;
        java.lang.String r3;
        android.database.sqlite.SQLiteQuery r4;
        androidx.sqlite.db.framework.FrameworkSQLiteProgram $r5;
        android.database.sqlite.SQLiteProgram $r6;
        androidx.sqlite.db.SupportSQLiteProgram $r7;
        android.database.sqlite.SQLiteCursor $r8;
        android.database.Cursor $r9;

        $r0 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter2: android.database.sqlite.SQLiteCursorDriver;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.database.sqlite.SQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$query");

        $r5 = new androidx.sqlite.db.framework.FrameworkSQLiteProgram;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r4);

        $r6 = (android.database.sqlite.SQLiteProgram) r4;

        specialinvoke $r5.<androidx.sqlite.db.framework.FrameworkSQLiteProgram: void <init>(android.database.sqlite.SQLiteProgram)>($r6);

        $r7 = (androidx.sqlite.db.SupportSQLiteProgram) $r5;

        interfaceinvoke $r0.<androidx.sqlite.db.SupportSQLiteQuery: void bindTo(androidx.sqlite.db.SupportSQLiteProgram)>($r7);

        $r8 = new android.database.sqlite.SQLiteCursor;

        specialinvoke $r8.<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>(r2, r3, r4);

        $r9 = (android.database.Cursor) $r8;

        return $r9;
    }

    static void <clinit>()
    {
        java.lang.String[] r0, $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion $r1;

        $r1 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion;

        specialinvoke $r1.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion Companion> = $r1;

        r0 = newarray (java.lang.String)[6];

        r0[0] = "";

        r0[1] = " OR ROLLBACK ";

        r0[2] = " OR ABORT ";

        r0[3] = " OR FAIL ";

        r0[4] = " OR IGNORE ";

        r0[5] = " OR REPLACE ";

        <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] CONFLICT_VALUES> = r0;

        $r2 = newarray (java.lang.String)[0];

        <androidx.sqlite.db.framework.FrameworkSQLiteDatabase: java.lang.String[] EMPTY_STRING_ARRAY> = $r2;

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl INSTANCE>
    private void <init>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl r0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void execPerConnectionSQL(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sQLiteDatabase");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sql");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>(r2, r3);

        return;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl $r0;

        $r0 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl;

        specialinvoke $r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl: void <init>()>();

        <androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Api30Impl INSTANCE> = $r0;

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion
    private void <init>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion r0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$Companion: void <init>()>();

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1
<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1: androidx.sqlite.db.SupportSQLiteQuery $query>
    void <init>(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1 r0;
        androidx.sqlite.db.SupportSQLiteQuery $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1;

        $r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1: androidx.sqlite.db.SupportSQLiteQuery $query> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(4);

        return;
    }

    public final android.database.sqlite.SQLiteCursor invoke(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1 r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.database.sqlite.SQLiteCursorDriver r2;
        java.lang.String r3;
        android.database.sqlite.SQLiteQuery r4;
        androidx.sqlite.db.framework.FrameworkSQLiteProgram $r5;
        androidx.sqlite.db.SupportSQLiteQuery $r6;
        android.database.sqlite.SQLiteProgram $r7;
        androidx.sqlite.db.SupportSQLiteProgram $r8;
        android.database.sqlite.SQLiteCursor $r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.database.sqlite.SQLiteCursorDriver;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.database.sqlite.SQLiteQuery;

        $r6 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1: androidx.sqlite.db.SupportSQLiteQuery $query>;

        $r5 = new androidx.sqlite.db.framework.FrameworkSQLiteProgram;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r4);

        $r7 = (android.database.sqlite.SQLiteProgram) r4;

        specialinvoke $r5.<androidx.sqlite.db.framework.FrameworkSQLiteProgram: void <init>(android.database.sqlite.SQLiteProgram)>($r7);

        $r8 = (androidx.sqlite.db.SupportSQLiteProgram) $r5;

        interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteQuery: void bindTo(androidx.sqlite.db.SupportSQLiteProgram)>($r8);

        $r9 = new android.database.sqlite.SQLiteCursor;

        specialinvoke $r9.<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>(r2, r3, r4);

        return $r9;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1 r0;
        java.lang.Object r1, r2, r3, r4;
        android.database.sqlite.SQLiteQuery $r5;
        java.lang.String $r6;
        android.database.sqlite.SQLiteCursorDriver $r7;
        android.database.sqlite.SQLiteDatabase $r8;
        android.database.sqlite.SQLiteCursor $r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (android.database.sqlite.SQLiteDatabase) r1;

        $r7 = (android.database.sqlite.SQLiteCursorDriver) r2;

        $r6 = (java.lang.String) r3;

        $r5 = (android.database.sqlite.SQLiteQuery) r4;

        $r9 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase$query$cursorFactory$1: android.database.sqlite.SQLiteCursor invoke(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>($r8, $r7, $r6, $r5);

        return $r9;
    }

