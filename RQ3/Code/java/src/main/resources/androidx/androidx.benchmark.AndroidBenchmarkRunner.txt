androidx.benchmark.AndroidBenchmarkRunner
<androidx.benchmark.AndroidBenchmarkRunner: boolean runnerInUse>
<androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse>
<androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion>
    public void onCreate(android.os.Bundle)
    {
        androidx.benchmark.AndroidBenchmarkRunner r0;
        android.os.Bundle r1;
        androidx.benchmark.CpuInfo $r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.benchmark.AndroidBenchmarkRunner$Companion $r6;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void onCreate(android.os.Bundle)>(r1);

        <androidx.benchmark.AndroidBenchmarkRunner: boolean runnerInUse> = 1;

        $r2 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z0 = virtualinvoke $r2.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        if $z0 != 0 goto label1;

        $r6 = <androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion>;

        $z1 = virtualinvoke $r6.<androidx.benchmark.AndroidBenchmarkRunner$Companion: boolean isSustainedPerformanceModeSupported()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse> = $z2;

        $z3 = <androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse>;

        if $z3 == 0 goto label3;

        $r3 = <androidx.benchmark.AndroidBenchmarkRunner$onCreate$1: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        staticinvoke <kotlin.concurrent.ThreadsKt: java.lang.Thread thread$default(boolean,boolean,java.lang.ClassLoader,java.lang.String,int,kotlin.jvm.functions.Function0,int,java.lang.Object)>(0, 0, null, "BenchSpinThread", 0, $r4, 23, null);

     label3:
        return;
    }

    public void callActivityOnStart(android.app.Activity)
    {
        androidx.benchmark.AndroidBenchmarkRunner r0;
        android.app.Activity r1;
        boolean $z0;
        android.view.Window $r2;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner;

        r1 := @parameter0: android.app.Activity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r1, "activity");

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void callActivityOnStart(android.app.Activity)>(r1);

        $z0 = <androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<android.app.Activity: android.view.Window getWindow()>();

        virtualinvoke $r2.<android.view.Window: void setSustainedPerformanceMode(boolean)>(1);

        goto label1;

     label1:
        return;
    }

    protected void waitForActivitiesToComplete()
    {
        androidx.benchmark.AndroidBenchmarkRunner r0;
        kotlin.jvm.internal.Ref$BooleanRef r1, $r2;
        androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1 $r3;
        java.lang.Runnable $r4;
        boolean $z0;
        androidx.benchmark.IsolationActivity$Companion $r5;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner;

        $r2 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r2.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r1 = $r2;

        r1.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 0;

        $r3 = new androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1;

        specialinvoke $r3.<androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1: void <init>(kotlin.jvm.internal.Ref$BooleanRef)>(r1);

        $r4 = (java.lang.Runnable) $r3;

        virtualinvoke r0.<androidx.benchmark.AndroidBenchmarkRunner: void runOnMainSync(java.lang.Runnable)>($r4);

        $z0 = r1.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z0 != 0 goto label1;

        $r5 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        virtualinvoke $r5.<androidx.benchmark.IsolationActivity$Companion: void launchSingleton()>();

     label1:
        return;
    }

    public void onDestroy()
    {
        androidx.benchmark.AndroidBenchmarkRunner r0;
        androidx.benchmark.IsolationActivity$Companion $r1;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner;

        $r1 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        virtualinvoke $r1.<androidx.benchmark.IsolationActivity$Companion: void finishSingleton()>();

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void waitForActivitiesToComplete()>();

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void onDestroy()>();

        return;
    }

    public void <init>()
    {
        androidx.benchmark.AndroidBenchmarkRunner r0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion $r0;

        $r0 = new androidx.benchmark.AndroidBenchmarkRunner$Companion;

        specialinvoke $r0.<androidx.benchmark.AndroidBenchmarkRunner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion> = $r0;

        return;
    }

    public static final boolean access$getRunnerInUse$cp()
    {
        boolean $z0;

        $z0 = <androidx.benchmark.AndroidBenchmarkRunner: boolean runnerInUse>;

        return $z0;
    }

    public static final void access$setRunnerInUse$cp(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.benchmark.AndroidBenchmarkRunner: boolean runnerInUse> = z0;

        return;
    }

    public static final boolean access$getSustainedPerformanceModeInUse$cp()
    {
        boolean $z0;

        $z0 = <androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse>;

        return $z0;
    }

    public static final void access$setSustainedPerformanceModeInUse$cp(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.benchmark.AndroidBenchmarkRunner: boolean sustainedPerformanceModeInUse> = z0;

        return;
    }

androidx.benchmark.AndroidBenchmarkRunner$Companion
    public final boolean getRunnerInUse()
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        $z0 = staticinvoke <androidx.benchmark.AndroidBenchmarkRunner: boolean access$getRunnerInUse$cp()>();

        return $z0;
    }

    public final void setRunnerInUse(boolean)
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        boolean z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.benchmark.AndroidBenchmarkRunner: void access$setRunnerInUse$cp(boolean)>(z0);

        return;
    }

    public final boolean getSustainedPerformanceModeInUse()
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        $z0 = staticinvoke <androidx.benchmark.AndroidBenchmarkRunner: boolean access$getSustainedPerformanceModeInUse$cp()>();

        return $z0;
    }

    public final void setSustainedPerformanceModeInUse(boolean)
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        boolean z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.benchmark.AndroidBenchmarkRunner: void access$setSustainedPerformanceModeInUse$cp(boolean)>(z0);

        return;
    }

    public final boolean isSustainedPerformanceModeSupported()
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        android.content.Context r1;
        android.os.PowerManager r2;
        int $i0;
        android.app.Instrumentation $r3;
        java.lang.Object $r4;
        kotlin.TypeCastException $r5;
        boolean $z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label2;

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r3, "InstrumentationRegistry.getInstrumentation()");

        r1 = virtualinvoke $r3.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        if $r4 != null goto label1;

        $r5 = new kotlin.TypeCastException;

        specialinvoke $r5.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type android.os.PowerManager");

        throw $r5;

     label1:
        r2 = (android.os.PowerManager) $r4;

        $z0 = virtualinvoke r2.<android.os.PowerManager: boolean isSustainedPerformanceModeSupported()>();

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void <init>()
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.AndroidBenchmarkRunner$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.benchmark.AndroidBenchmarkRunner$Companion: void <init>()>();

        return;
    }

androidx.benchmark.AndroidBenchmarkRunner$onCreate$1
<androidx.benchmark.AndroidBenchmarkRunner$onCreate$1: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 INSTANCE>
    public volatile java.lang.Object invoke()
    {
        androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1;

        virtualinvoke r0.<androidx.benchmark.AndroidBenchmarkRunner$onCreate$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    public final void invoke()
    {
        androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 r0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1;

        staticinvoke <android.os.Process: void setThreadPriority(int)>(19);

     label1:
        goto label1;
    }

    void <init>()
    {
        androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 r0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    static void <clinit>()
    {
        androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 $r0;

        $r0 = new androidx.benchmark.AndroidBenchmarkRunner$onCreate$1;

        specialinvoke $r0.<androidx.benchmark.AndroidBenchmarkRunner$onCreate$1: void <init>()>();

        <androidx.benchmark.AndroidBenchmarkRunner$onCreate$1: androidx.benchmark.AndroidBenchmarkRunner$onCreate$1 INSTANCE> = $r0;

        return;
    }

androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1
<androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1: kotlin.jvm.internal.Ref$BooleanRef $isResumed>
    public final void run()
    {
        androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1 r0;
        androidx.benchmark.IsolationActivity r1;
        androidx.benchmark.IsolationActivity$Companion $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        kotlin.jvm.internal.Ref$BooleanRef $r5;
        boolean $z0;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1;

        $r2 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.benchmark.IsolationActivity$Companion: java.util.concurrent.atomic.AtomicReference getSingleton$benchmark_release()>();

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (androidx.benchmark.IsolationActivity) $r4;

        if r1 == null goto label1;

        $r5 = r0.<androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1: kotlin.jvm.internal.Ref$BooleanRef $isResumed>;

        $z0 = virtualinvoke r1.<androidx.benchmark.IsolationActivity: boolean getResumed()>();

        $r5.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = $z0;

     label1:
        return;
    }

    void <init>(kotlin.jvm.internal.Ref$BooleanRef)
    {
        androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1 r0;
        kotlin.jvm.internal.Ref$BooleanRef r1;

        r0 := @this: androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1;

        r1 := @parameter0: kotlin.jvm.internal.Ref$BooleanRef;

        r0.<androidx.benchmark.AndroidBenchmarkRunner$waitForActivitiesToComplete$1: kotlin.jvm.internal.Ref$BooleanRef $isResumed> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

