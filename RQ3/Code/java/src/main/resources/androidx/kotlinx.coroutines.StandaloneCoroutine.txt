kotlinx.coroutines.StandaloneCoroutine
    public void <init>(kotlin.coroutines.CoroutineContext, boolean)
    {
        kotlinx.coroutines.StandaloneCoroutine $r0;
        kotlin.coroutines.CoroutineContext $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.StandaloneCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "parentContext");

        specialinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean,boolean)>($r1, 1, $z0);

        return;
    }

    protected boolean handleJobException(java.lang.Throwable)
    {
        kotlinx.coroutines.StandaloneCoroutine $r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Throwable $r2;

        $r0 := @this: kotlinx.coroutines.StandaloneCoroutine;

        $r2 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "exception");

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.StandaloneCoroutine: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r1, $r2);

        return 1;
    }

