android.databinding.tool.expr.ViewFieldExpr
<android.databinding.tool.expr.ViewFieldExpr: android.databinding.tool.BindingTarget mBindingTarget>
    void <init>(android.databinding.tool.BindingTarget)
    {
        android.databinding.tool.expr.ViewFieldExpr r0;
        android.databinding.tool.BindingTarget r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: android.databinding.tool.expr.ViewFieldExpr;

        r1 := @parameter0: android.databinding.tool.BindingTarget;

        $r2 = staticinvoke <android.databinding.tool.writer.LayoutBinderWriterKt: java.lang.String getFieldName(android.databinding.tool.BindingTarget)>(r1);

        $r3 = virtualinvoke r1.<android.databinding.tool.BindingTarget: java.lang.String getInterfaceType()>();

        $r4 = staticinvoke <android.databinding.tool.writer.LayoutBinderWriterKt: java.lang.String getFieldName(android.databinding.tool.BindingTarget)>(r1);

        specialinvoke r0.<android.databinding.tool.expr.BuiltInVariableExpr: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        r0.<android.databinding.tool.expr.ViewFieldExpr: android.databinding.tool.BindingTarget mBindingTarget> = r1;

        return;
    }

    public java.lang.String getInvertibleError()
    {
        android.databinding.tool.expr.ViewFieldExpr r0;

        r0 := @this: android.databinding.tool.expr.ViewFieldExpr;

        return "View fields may not be the target of two-way binding";
    }

    public android.databinding.tool.BindingTarget getBindingTarget()
    {
        android.databinding.tool.expr.ViewFieldExpr r0;
        android.databinding.tool.BindingTarget $r1;

        r0 := @this: android.databinding.tool.expr.ViewFieldExpr;

        $r1 = r0.<android.databinding.tool.expr.ViewFieldExpr: android.databinding.tool.BindingTarget mBindingTarget>;

        return $r1;
    }

    protected android.databinding.tool.reflection.ModelClass resolveType(android.databinding.tool.reflection.ModelAnalyzer)
    {
        android.databinding.tool.expr.ViewFieldExpr r0;
        android.databinding.tool.reflection.ModelAnalyzer r1;
        android.databinding.tool.reflection.ModelClass r2, $r7;
        android.databinding.tool.BindingTarget $r3;
        java.lang.String $r4, $r6;
        android.databinding.tool.LibTypes $r5;

        r0 := @this: android.databinding.tool.expr.ViewFieldExpr;

        r1 := @parameter0: android.databinding.tool.reflection.ModelAnalyzer;

        $r3 = r0.<android.databinding.tool.expr.ViewFieldExpr: android.databinding.tool.BindingTarget mBindingTarget>;

        $r4 = virtualinvoke $r3.<android.databinding.tool.BindingTarget: java.lang.String getInterfaceType()>();

        r2 = virtualinvoke r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelClass findClass(java.lang.String,java.util.Map)>($r4, null);

        if r2 != null goto label1;

        $r5 = r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r6 = virtualinvoke $r5.<android.databinding.tool.LibTypes: java.lang.String getViewDataBinding()>();

        $r7 = virtualinvoke r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelClass findClass(java.lang.String,java.util.Map)>($r6, null);

        return $r7;

     label1:
        return r2;
    }

    public android.databinding.tool.expr.Expr cloneToModel(android.databinding.tool.expr.ExprModel)
    {
        android.databinding.tool.expr.ViewFieldExpr r0, $r3;
        android.databinding.tool.expr.ExprModel r1;
        android.databinding.tool.BindingTarget $r2;

        r0 := @this: android.databinding.tool.expr.ViewFieldExpr;

        r1 := @parameter0: android.databinding.tool.expr.ExprModel;

        $r2 = r0.<android.databinding.tool.expr.ViewFieldExpr: android.databinding.tool.BindingTarget mBindingTarget>;

        $r3 = virtualinvoke r1.<android.databinding.tool.expr.ExprModel: android.databinding.tool.expr.ViewFieldExpr viewFieldExpr(android.databinding.tool.BindingTarget)>($r2);

        return $r3;
    }

