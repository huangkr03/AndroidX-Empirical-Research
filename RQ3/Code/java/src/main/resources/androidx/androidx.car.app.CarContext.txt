androidx.car.app.CarContext
<androidx.car.app.CarContext: java.lang.String APP_SERVICE>
<androidx.car.app.CarContext: java.lang.String NAVIGATION_SERVICE>
<androidx.car.app.CarContext: java.lang.String SCREEN_SERVICE>
<androidx.car.app.CarContext: java.lang.String CONSTRAINT_SERVICE>
<androidx.car.app.CarContext: java.lang.String CAR_SERVICE>
<androidx.car.app.CarContext: java.lang.String HARDWARE_SERVICE>
<androidx.car.app.CarContext: java.lang.String EXTRA_START_CAR_APP_BINDER_KEY>
<androidx.car.app.CarContext: java.lang.String ACTION_NAVIGATE>
<androidx.car.app.CarContext: java.lang.String REQUEST_PERMISSIONS_ACTION>
<androidx.car.app.CarContext: java.lang.String EXTRA_PERMISSIONS_KEY>
<androidx.car.app.CarContext: java.lang.String EXTRA_ON_REQUEST_PERMISSIONS_RESULT_LISTENER_KEY>
<androidx.car.app.CarContext: androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher>
<androidx.car.app.CarContext: androidx.car.app.HostDispatcher mHostDispatcher>
<androidx.car.app.CarContext: androidx.lifecycle.Lifecycle mLifecycle>
<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>
<androidx.car.app.CarContext: int mCarAppApiLevel>
<androidx.car.app.CarContext: androidx.car.app.HostInfo mHostInfo>
    public static androidx.car.app.CarContext create(androidx.lifecycle.Lifecycle)
    {
        androidx.lifecycle.Lifecycle r0;
        androidx.car.app.CarContext $r1;
        androidx.car.app.HostDispatcher $r2;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        $r1 = new androidx.car.app.CarContext;

        $r2 = new androidx.car.app.HostDispatcher;

        specialinvoke $r2.<androidx.car.app.HostDispatcher: void <init>()>();

        specialinvoke $r1.<androidx.car.app.CarContext: void <init>(androidx.lifecycle.Lifecycle,androidx.car.app.HostDispatcher)>(r0, $r2);

        return $r1;
    }

    public java.lang.Object getCarService(java.lang.String)
    {
        androidx.car.app.CarContext r0;
        java.lang.String r1;
        androidx.car.app.managers.ManagerCache $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r4 = virtualinvoke $r3.<androidx.car.app.managers.ManagerCache: java.lang.Object getOrCreate(java.lang.String)>(r1);

        return $r4;
    }

    public java.lang.Object getCarService(java.lang.Class)
    {
        androidx.car.app.CarContext r0;
        java.lang.Class r1;
        androidx.car.app.managers.ManagerCache $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r4 = virtualinvoke $r3.<androidx.car.app.managers.ManagerCache: java.lang.Object getOrCreate(java.lang.Class)>(r1);

        return $r4;
    }

    public java.lang.String getCarServiceName(java.lang.Class)
    {
        androidx.car.app.CarContext r0;
        java.lang.Class r1;
        androidx.car.app.managers.ManagerCache $r3;
        java.lang.String $r4;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r4 = virtualinvoke $r3.<androidx.car.app.managers.ManagerCache: java.lang.String getName(java.lang.Class)>(r1);

        return $r4;
    }

    public void startCarApp(android.content.Intent)
    {
        androidx.car.app.CarContext r0;
        android.content.Intent r1;
        androidx.car.app.HostDispatcher $r3;
        androidx.car.app.HostCall $r4;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: android.content.Intent;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.CarContext: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.HostCall (android.content.Intent)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarContext: java.lang.Object lambda$startCarApp$0(android.content.Intent,androidx.car.app.ICarHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.ICarHost));

        virtualinvoke $r3.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("car", "startCarApp", $r4);

        return;
    }

    public static void startCarApp(android.content.Intent, android.content.Intent)
    {
        android.content.Intent r0, r1;
        android.os.Bundle r2;
        androidx.car.app.IStartCarApp r3, $r6;
        java.lang.Object $r7;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r8;
        java.lang.IllegalArgumentException $r9;
        android.os.IBinder r10;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.content.Intent;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r10 = null;

        r2 = virtualinvoke r0.<android.content.Intent: android.os.Bundle getExtras()>();

        if r2 == null goto label1;

        r10 = virtualinvoke r2.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("androidx.car.app.extra.START_CAR_APP_BINDER_KEY");

     label1:
        if r10 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Notification intent missing expected extra");

        throw $r9;

     label2:
        $r6 = staticinvoke <androidx.car.app.IStartCarApp$Stub: androidx.car.app.IStartCarApp asInterface(android.os.IBinder)>(r10);

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        r3 = (androidx.car.app.IStartCarApp) $r7;

        $r8 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.IStartCarApp,android.content.Intent)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarContext: java.lang.Object lambda$startCarApp$1(androidx.car.app.IStartCarApp,android.content.Intent)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>("startCarApp from notification", $r8);

        return;
    }

    public void finishCarApp()
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher $r1;
        androidx.car.app.HostCall $r2;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = r0.<androidx.car.app.CarContext: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.HostCall ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarContext: java.lang.Object lambda$finishCarApp$2(androidx.car.app.ICarHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.ICarHost));

        virtualinvoke $r1.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("car", "finish", $r2);

        return;
    }

    public void setCarAppResult(int, android.content.Intent)
    {
        androidx.car.app.CarContext r0;
        int i0;
        android.content.Intent r1;
        java.lang.Object $r2;
        androidx.car.app.managers.ResultManager $r3;

        r0 := @this: androidx.car.app.CarContext;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Intent;

        $r2 = virtualinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/managers/ResultManager;");

        $r3 = (androidx.car.app.managers.ResultManager) $r2;

        interfaceinvoke $r3.<androidx.car.app.managers.ResultManager: void setCarAppResult(int,android.content.Intent)>(i0, r1);

        return;
    }

    public android.content.ComponentName getCallingComponent()
    {
        androidx.car.app.CarContext r0;
        java.lang.Throwable r1, $r5;
        java.lang.Object $r2;
        androidx.car.app.managers.ResultManager $r3;
        android.content.ComponentName $r4;

        r0 := @this: androidx.car.app.CarContext;

     label1:
        $r2 = virtualinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/managers/ResultManager;");

        $r3 = (androidx.car.app.managers.ResultManager) $r2;

        $r4 = interfaceinvoke $r3.<androidx.car.app.managers.ResultManager: android.content.ComponentName getCallingComponent()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        return null;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public boolean isDarkMode()
    {
        androidx.car.app.CarContext r0;
        android.content.res.Resources $r1;
        android.content.res.Configuration $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = virtualinvoke r0.<androidx.car.app.CarContext: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r2.<android.content.res.Configuration: int uiMode>;

        $i1 = $i0 & 48;

        if $i1 != 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()
    {
        androidx.car.app.CarContext r0;
        androidx.activity.OnBackPressedDispatcher $r1;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = r0.<androidx.car.app.CarContext: androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher>;

        return $r1;
    }

    public int getCarAppApiLevel()
    {
        androidx.car.app.CarContext r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.car.app.CarContext;

        $i0 = r0.<androidx.car.app.CarContext: int mCarAppApiLevel>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Car App API level hasn\'t been established yet");

        throw $r1;

     label1:
        $i1 = r0.<androidx.car.app.CarContext: int mCarAppApiLevel>;

        return $i1;
    }

    public androidx.car.app.HostInfo getHostInfo()
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostInfo $r1;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = r0.<androidx.car.app.CarContext: androidx.car.app.HostInfo mHostInfo>;

        return $r1;
    }

    public void requestPermissions(java.util.List, androidx.car.app.OnRequestPermissionsListener)
    {
        androidx.car.app.CarContext r0;
        java.util.List r1;
        androidx.car.app.OnRequestPermissionsListener r2;
        java.util.concurrent.Executor $r3;
        android.content.Context r4;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.car.app.OnRequestPermissionsListener;

        r4 = (android.content.Context) r0;

        $r3 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>(r4);

        virtualinvoke r0.<androidx.car.app.CarContext: void requestPermissions(java.util.List,java.util.concurrent.Executor,androidx.car.app.OnRequestPermissionsListener)>(r1, $r3, r2);

        return;
    }

    public void requestPermissions(java.util.List, java.util.concurrent.Executor, androidx.car.app.OnRequestPermissionsListener)
    {
        androidx.car.app.CarContext r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        androidx.car.app.OnRequestPermissionsListener r3;
        android.content.ComponentName r4, r21;
        androidx.lifecycle.Lifecycle r5;
        android.os.Bundle r6, r22;
        android.content.Intent r7, $r19, $r20, r24;
        android.os.IBinder $r14;
        java.lang.String[] $r15, $r17;
        java.lang.Object[] $r16;
        androidx.car.app.CarContext$1 r23;
        android.content.Context r25;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.car.app.OnRequestPermissionsListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        r21 = new android.content.ComponentName;

        r25 = (android.content.Context) r0;

        specialinvoke r21.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r25, class "Landroidx/car/app/CarAppPermissionActivity;");

        r4 = r21;

        r5 = r0.<androidx.car.app.CarContext: androidx.lifecycle.Lifecycle mLifecycle>;

        r22 = new android.os.Bundle;

        specialinvoke r22.<android.os.Bundle: void <init>(int)>(2);

        r6 = r22;

        r23 = new androidx.car.app.CarContext$1;

        specialinvoke r23.<androidx.car.app.CarContext$1: void <init>(androidx.car.app.CarContext,androidx.lifecycle.Lifecycle,java.util.concurrent.Executor,androidx.car.app.OnRequestPermissionsListener)>(r0, r5, r2, r3);

        $r14 = virtualinvoke r23.<androidx.car.app.CarContext$1: android.os.IBinder asBinder()>();

        virtualinvoke r6.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("androidx.car.app.action.EXTRA_ON_REQUEST_PERMISSIONS_RESULT_LISTENER_KEY", $r14);

        $r15 = newarray (java.lang.String)[0];

        $r16 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (java.lang.String[]) $r16;

        virtualinvoke r6.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("androidx.car.app.action.EXTRA_PERMISSIONS_KEY", $r17);

        r24 = new android.content.Intent;

        specialinvoke r24.<android.content.Intent: void <init>(java.lang.String)>("androidx.car.app.action.REQUEST_PERMISSIONS");

        $r19 = virtualinvoke r24.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r4);

        $r20 = virtualinvoke $r19.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r6);

        r7 = virtualinvoke $r20.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r0.<androidx.car.app.CarContext: void startActivity(android.content.Intent)>(r7);

        return;
    }

    public void setCarHost(androidx.car.app.ICarHost)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.ICarHost r1, $r4;
        androidx.car.app.HostDispatcher $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.ICarHost;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r2 = r0.<androidx.car.app.CarContext: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (androidx.car.app.ICarHost) $r3;

        virtualinvoke $r2.<androidx.car.app.HostDispatcher: void setCarHost(androidx.car.app.ICarHost)>($r4);

        return;
    }

    void onCarConfigurationChanged(android.content.res.Configuration)
    {
        androidx.car.app.CarContext r0;
        android.content.res.Configuration r1, $r4;
        boolean $z0;
        android.content.res.Resources $r2, $r5, $r11;
        java.lang.Object $r3;
        android.util.DisplayMetrics $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13;
        java.lang.String $r14;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: android.content.res.Configuration;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Car configuration changed, configuration: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", displayMetrics: ");

        $r11 = virtualinvoke r0.<androidx.car.app.CarContext: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke $r11.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r14);

     label1:
        $r2 = virtualinvoke r0.<androidx.car.app.CarContext: android.content.res.Resources getResources()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (android.content.res.Configuration) $r3;

        $r5 = virtualinvoke r0.<androidx.car.app.CarContext: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r2.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r4, $r6);

        return;
    }

    public void updateHandshakeInfo(androidx.car.app.HandshakeInfo)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HandshakeInfo r1;
        int $i0;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HandshakeInfo;

        $i0 = virtualinvoke r1.<androidx.car.app.HandshakeInfo: int getHostCarAppApiLevel()>();

        r0.<androidx.car.app.CarContext: int mCarAppApiLevel> = $i0;

        return;
    }

    void updateHostInfo(androidx.car.app.HostInfo)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostInfo r1;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HostInfo;

        r0.<androidx.car.app.CarContext: androidx.car.app.HostInfo mHostInfo> = r1;

        return;
    }

    void attachBaseContext(android.content.Context, android.content.res.Configuration)
    {
        androidx.car.app.CarContext r0;
        android.content.Context r1, $r4, $r9, $r10;
        android.content.res.Configuration r2;
        android.hardware.display.VirtualDisplay r3;
        java.lang.Object $r5, $r6;
        int $i0, $i1, $i2;
        android.hardware.display.DisplayManager $r7;
        android.view.Display $r8;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.res.Configuration;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r4 = virtualinvoke r0.<androidx.car.app.CarContext: android.content.Context getBaseContext()>();

        if $r4 != null goto label1;

        $r5 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = (android.hardware.display.DisplayManager) $r6;

        $i2 = r2.<android.content.res.Configuration: int screenWidthDp>;

        $i1 = r2.<android.content.res.Configuration: int screenHeightDp>;

        $i0 = r2.<android.content.res.Configuration: int densityDpi>;

        r3 = virtualinvoke $r7.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>("CarAppService", $i2, $i1, $i0, null, 8);

        $r8 = virtualinvoke r3.<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>();

        $r9 = virtualinvoke r1.<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>($r8);

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>(r2);

        virtualinvoke r0.<androidx.car.app.CarContext: void attachBaseContext(android.content.Context)>($r10);

     label1:
        virtualinvoke r0.<androidx.car.app.CarContext: void onCarConfigurationChanged(android.content.res.Configuration)>(r2);

        return;
    }

    androidx.car.app.managers.ManagerCache getManagers()
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.managers.ManagerCache $r1;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        return $r1;
    }

    protected void <init>(androidx.lifecycle.Lifecycle, androidx.car.app.HostDispatcher)
    {
        androidx.car.app.CarContext r0;
        androidx.lifecycle.Lifecycle r1;
        androidx.car.app.HostDispatcher r2;
        androidx.car.app.CarContext$2 r3, r22;
        androidx.car.app.managers.ManagerCache $r5, $r7, $r9, $r11, $r13, $r15, r20;
        androidx.car.app.managers.ManagerFactory $r6, $r8, $r10, $r12, $r14, $r16;
        java.lang.Runnable $r18;
        androidx.activity.OnBackPressedDispatcher r21;
        androidx.lifecycle.LifecycleObserver r23;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.lifecycle.Lifecycle;

        r2 := @parameter1: androidx.car.app.HostDispatcher;

        specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>(null);

        r20 = new androidx.car.app.managers.ManagerCache;

        specialinvoke r20.<androidx.car.app.managers.ManagerCache: void <init>()>();

        r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers> = r20;

        r0.<androidx.car.app.CarContext: int mCarAppApiLevel> = 0;

        r0.<androidx.car.app.CarContext: androidx.car.app.HostInfo mHostInfo> = null;

        r0.<androidx.car.app.CarContext: androidx.car.app.HostDispatcher mHostDispatcher> = r2;

        $r5 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r6 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext,androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.AppManager lambda$new$3(androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>, methodtype: androidx.car.app.AppManager __METHODTYPE__());

        virtualinvoke $r5.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/AppManager;", "app", $r6);

        $r7 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r8 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext,androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.navigation.NavigationManager lambda$new$4(androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>, methodtype: androidx.car.app.navigation.NavigationManager __METHODTYPE__());

        virtualinvoke $r7.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/navigation/NavigationManager;", "navigation", $r8);

        $r9 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r10 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext,androidx.lifecycle.Lifecycle)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.ScreenManager lambda$new$5(androidx.lifecycle.Lifecycle)>, methodtype: androidx.car.app.ScreenManager __METHODTYPE__());

        virtualinvoke $r9.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/ScreenManager;", "screen", $r10);

        $r11 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r12 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.constraints.ConstraintManager lambda$new$6(androidx.car.app.HostDispatcher)>, methodtype: androidx.car.app.constraints.ConstraintManager __METHODTYPE__());

        virtualinvoke $r11.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/constraints/ConstraintManager;", "constraints", $r12);

        $r13 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r14 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.hardware.CarHardwareManager lambda$new$7(androidx.car.app.HostDispatcher)>, methodtype: androidx.car.app.hardware.CarHardwareManager __METHODTYPE__());

        virtualinvoke $r13.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/hardware/CarHardwareManager;", "hardware", $r14);

        $r15 = r0.<androidx.car.app.CarContext: androidx.car.app.managers.ManagerCache mManagers>;

        $r16 = dynamicinvoke "create" <androidx.car.app.managers.ManagerFactory (androidx.car.app.CarContext)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.car.app.managers.Manager __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: androidx.car.app.managers.ResultManager lambda$new$8()>, methodtype: androidx.car.app.managers.ResultManager __METHODTYPE__());

        virtualinvoke $r15.<androidx.car.app.managers.ManagerCache: void addFactory(java.lang.Class,java.lang.String,androidx.car.app.managers.ManagerFactory)>(class "Landroidx/car/app/managers/ResultManager;", null, $r16);

        r21 = new androidx.activity.OnBackPressedDispatcher;

        $r18 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.CarContext)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarContext: void lambda$new$9()>, methodtype: void __METHODTYPE__());

        specialinvoke r21.<androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable)>($r18);

        r0.<androidx.car.app.CarContext: androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher> = r21;

        r0.<androidx.car.app.CarContext: androidx.lifecycle.Lifecycle mLifecycle> = r1;

        r22 = new androidx.car.app.CarContext$2;

        specialinvoke r22.<androidx.car.app.CarContext$2: void <init>(androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>(r0, r2);

        r3 = r22;

        r23 = (androidx.lifecycle.LifecycleObserver) r3;

        virtualinvoke r1.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>(r23);

        return;
    }

    private void lambda$new$9()
    {
        androidx.car.app.CarContext r0;
        java.lang.Object $r1;
        androidx.car.app.ScreenManager $r2;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = virtualinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/ScreenManager;");

        $r2 = (androidx.car.app.ScreenManager) $r1;

        virtualinvoke $r2.<androidx.car.app.ScreenManager: void pop()>();

        return;
    }

    private androidx.car.app.managers.ResultManager lambda$new$8()
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.managers.ResultManager $r1;

        r0 := @this: androidx.car.app.CarContext;

        $r1 = staticinvoke <androidx.car.app.managers.ResultManager: androidx.car.app.managers.ResultManager create(androidx.car.app.CarContext)>(r0);

        return $r1;
    }

    private androidx.car.app.hardware.CarHardwareManager lambda$new$7(androidx.car.app.HostDispatcher)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher r1;
        androidx.car.app.hardware.CarHardwareManager $r2;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HostDispatcher;

        $r2 = staticinvoke <androidx.car.app.hardware.CarHardwareManager: androidx.car.app.hardware.CarHardwareManager create(androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>(r0, r1);

        return $r2;
    }

    private androidx.car.app.constraints.ConstraintManager lambda$new$6(androidx.car.app.HostDispatcher)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher r1;
        androidx.car.app.constraints.ConstraintManager $r2;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HostDispatcher;

        $r2 = staticinvoke <androidx.car.app.constraints.ConstraintManager: androidx.car.app.constraints.ConstraintManager create(androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>(r0, r1);

        return $r2;
    }

    private androidx.car.app.ScreenManager lambda$new$5(androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.CarContext r0;
        androidx.lifecycle.Lifecycle r1;
        androidx.car.app.ScreenManager $r2;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.lifecycle.Lifecycle;

        $r2 = staticinvoke <androidx.car.app.ScreenManager: androidx.car.app.ScreenManager create(androidx.car.app.CarContext,androidx.lifecycle.Lifecycle)>(r0, r1);

        return $r2;
    }

    private androidx.car.app.navigation.NavigationManager lambda$new$4(androidx.car.app.HostDispatcher, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher r1;
        androidx.lifecycle.Lifecycle r2;
        androidx.car.app.navigation.NavigationManager $r3;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HostDispatcher;

        r2 := @parameter1: androidx.lifecycle.Lifecycle;

        $r3 = staticinvoke <androidx.car.app.navigation.NavigationManager: androidx.car.app.navigation.NavigationManager create(androidx.car.app.CarContext,androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>(r0, r1, r2);

        return $r3;
    }

    private androidx.car.app.AppManager lambda$new$3(androidx.car.app.HostDispatcher, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher r1;
        androidx.lifecycle.Lifecycle r2;
        androidx.car.app.AppManager $r3;

        r0 := @this: androidx.car.app.CarContext;

        r1 := @parameter0: androidx.car.app.HostDispatcher;

        r2 := @parameter1: androidx.lifecycle.Lifecycle;

        $r3 = staticinvoke <androidx.car.app.AppManager: androidx.car.app.AppManager create(androidx.car.app.CarContext,androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>(r0, r1, r2);

        return $r3;
    }

    private static java.lang.Object lambda$finishCarApp$2(androidx.car.app.ICarHost) throws android.os.RemoteException
    {
        androidx.car.app.ICarHost r0;

        r0 := @parameter0: androidx.car.app.ICarHost;

        interfaceinvoke r0.<androidx.car.app.ICarHost: void finish()>();

        return null;
    }

    private static java.lang.Object lambda$startCarApp$1(androidx.car.app.IStartCarApp, android.content.Intent) throws android.os.RemoteException
    {
        androidx.car.app.IStartCarApp r0;
        android.content.Intent r1;

        r0 := @parameter0: androidx.car.app.IStartCarApp;

        r1 := @parameter1: android.content.Intent;

        interfaceinvoke r0.<androidx.car.app.IStartCarApp: void startCarApp(android.content.Intent)>(r1);

        return null;
    }

    private static java.lang.Object lambda$startCarApp$0(android.content.Intent, androidx.car.app.ICarHost) throws android.os.RemoteException
    {
        android.content.Intent r0;
        androidx.car.app.ICarHost r1;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: androidx.car.app.ICarHost;

        interfaceinvoke r1.<androidx.car.app.ICarHost: void startCarApp(android.content.Intent)>(r0);

        return null;
    }

