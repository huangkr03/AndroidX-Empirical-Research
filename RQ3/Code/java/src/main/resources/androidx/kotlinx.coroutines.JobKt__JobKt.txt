kotlinx.coroutines.JobKt__JobKt
    public static final kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;
        kotlinx.coroutines.JobImpl $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 = new kotlinx.coroutines.JobImpl;

        specialinvoke $r1.<kotlinx.coroutines.JobImpl: void <init>(kotlinx.coroutines.Job)>($r0);

        return $r1;
    }

    public static kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job, int, java.lang.Object)
    {
        java.lang.Object $r0;
        kotlinx.coroutines.CompletableJob $r1;
        kotlinx.coroutines.Job $r2;
        int $i0;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r2);

        return $r1;
    }

    public static final java.lang.Object cancelAndJoin(kotlinx.coroutines.Job, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.Job $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2, $r3;
        kotlin.Unit r4;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r0, null, 1, null);

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.Job: java.lang.Object join(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r3 goto label1;

        return $r2;

     label1:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public static final kotlinx.coroutines.DisposableHandle disposeOnCompletion(kotlinx.coroutines.Job, kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r0;
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.DisposeOnCompletion $r2;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r0 := @parameter1: kotlinx.coroutines.DisposableHandle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "handle");

        $r2 = new kotlinx.coroutines.DisposeOnCompletion;

        specialinvoke $r2.<kotlinx.coroutines.DisposeOnCompletion: void <init>(kotlinx.coroutines.DisposableHandle)>($r0);

        $r0 = interfaceinvoke $r1.<kotlinx.coroutines.Job: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r2);

        return $r0;
    }

    public static final void ensureActive(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext$Element $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Job$Key $r2;
        kotlinx.coroutines.Job $r3;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r0 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r3 = (kotlinx.coroutines.Job) $r0;

        if $r3 == null goto label1;

        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>($r3);

     label1:
        return;
    }

    public static final void ensureActive(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;
        boolean $z0;
        java.util.concurrent.CancellationException $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = interfaceinvoke $r0.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = interfaceinvoke $r0.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        throw $r1;
    }

