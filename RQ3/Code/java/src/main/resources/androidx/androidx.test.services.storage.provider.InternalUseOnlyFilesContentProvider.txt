androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider
<androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider: java.io.File outputDirectory>
    public void <init>()
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.io.File $r1, $r2;
        androidx.test.services.storage.provider.AbstractFileContentProvider$Access $r3;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "googletest/internal_use/");

        $r3 = <androidx.test.services.storage.provider.AbstractFileContentProvider$Access: androidx.test.services.storage.provider.AbstractFileContentProvider$Access READ_WRITE>;

        specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: void <init>(java.io.File,androidx.test.services.storage.provider.AbstractFileContentProvider$Access)>($r1, $r3);

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "googletest/internal_use/");

        $r0.<androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider: java.io.File outputDirectory> = $r1;

        return;
    }

    public volatile int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        int $i0;
        android.net.Uri $r3;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r3 := @parameter0: android.net.Uri;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $i0 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r3, $r1, $r2);

        return $i0;
    }

    public volatile java.lang.String getType(android.net.Uri)
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.lang.String $r1;
        android.net.Uri $r2;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r2 := @parameter0: android.net.Uri;

        $r1 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: java.lang.String getType(android.net.Uri)>($r2);

        return $r1;
    }

    public volatile android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        android.content.ContentValues $r1;
        android.net.Uri $r2;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r2 := @parameter0: android.net.Uri;

        $r1 := @parameter1: android.content.ContentValues;

        $r2 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r2, $r1);

        return $r2;
    }

    public volatile boolean onCreate()
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        boolean $z0;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $z0 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: boolean onCreate()>();

        return $z0;
    }

    protected boolean onCreateHook()
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.io.File $r3;
        java.lang.Object[] $r4;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r1 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sdcard in bad state: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InternalUseOnlyFilesContentProvider", $r1);

        return 0;

     label1:
        $r3 = $r0.<androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider: java.io.File outputDirectory>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r3 = $r0.<androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider: java.io.File outputDirectory>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r4 = newarray (java.lang.Object)[1];

        $r3 = $r0.<androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider: java.io.File outputDirectory>;

        $r4[0] = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\': could not create output dir! ", $r4);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InternalUseOnlyFilesContentProvider", $r1);

        return 0;

     label2:
        return 1;
    }

    public volatile android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.lang.String $r1;
        android.os.ParcelFileDescriptor $r2;
        android.net.Uri $r3;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r3 := @parameter0: android.net.Uri;

        $r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>($r3, $r1);

        return $r2;
    }

    public volatile android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r4;
        android.database.Cursor $r5;
        android.net.Uri $r6;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r6 := @parameter0: android.net.Uri;

        $r1 := @parameter1: java.lang.String[];

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: java.lang.String;

        $r5 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r6, $r1, $r2, $r3, $r4);

        return $r5;
    }

    public volatile void shutdown()
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: void shutdown()>();

        return;
    }

    public volatile int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider $r0;
        android.content.ContentValues $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        int $i0;
        android.net.Uri $r4;

        $r0 := @this: androidx.test.services.storage.provider.InternalUseOnlyFilesContentProvider;

        $r4 := @parameter0: android.net.Uri;

        $r1 := @parameter1: android.content.ContentValues;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $i0 = specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r4, $r1, $r2, $r3);

        return $i0;
    }

