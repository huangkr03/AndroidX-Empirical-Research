androidx.test.services.storage.provider.TestArgsContentProvider
<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.reflect.Method getString>
<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.String systemPropertyClassName>
    public void <init>()
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        specialinvoke $r0.<android.content.ContentProvider: void <init>()>();

        return;
    }

    private java.util.Map buildArgMapFromFile()
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        java.util.HashMap $r1, $r2, r14;
        java.lang.String $r3, $r9, $r10, $r11, $r12;
        androidx.test.services.storage.TestStorageServiceProto$TestArguments $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        androidx.test.services.storage.TestStorageServiceProto$TestArgument $r8;
        java.lang.String[] $r13;
        java.util.Map r15;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r2 = new java.util.HashMap;

        $r1 = $r2;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r14 = new java.util.HashMap;

        $r2 = r14;

        specialinvoke r14.<java.util.HashMap: void <init>()>();

        $r3 = specialinvoke $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.String getQemuHost()>();

        $r4 = staticinvoke <androidx.test.services.storage.provider.TestArgsContentProvider: androidx.test.services.storage.TestStorageServiceProto$TestArguments readProtoFromFile()>();

        $r5 = virtualinvoke $r4.<androidx.test.services.storage.TestStorageServiceProto$TestArguments: java.util.List getArgList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (androidx.test.services.storage.TestStorageServiceProto$TestArgument) $r7;

        $r9 = virtualinvoke $r8.<androidx.test.services.storage.TestStorageServiceProto$TestArgument: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<androidx.test.services.storage.TestStorageServiceProto$TestArgument: java.lang.String getValue()>();

        $r11 = $r10;

        r15 = (java.util.Map) $r1;

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r12 = "";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("_server_address");

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke $r10.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r12 = $r13[0];

        $z0 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r12, "10.0.2.2");

     label2:
        r15 = (java.util.Map) $r2;

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

        goto label1;

     label3:
        r15 = (java.util.Map) $r1;

        $r7 = interfaceinvoke r15.<java.util.Map: java.lang.Object get(java.lang.Object)>("infra_use_qemu_ips");

        $r3 = (java.lang.String) $r7;

        $r9 = "true";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label4;

        r15 = (java.util.Map) $r2;

        return r15;

     label4:
        r15 = (java.util.Map) $r1;

        return r15;
    }

    private java.lang.String getQemuHost()
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        java.lang.Class[] $r1;
        java.lang.reflect.Method $r2;
        java.lang.String $r3;
        java.lang.Class $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r2 = $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.reflect.Method getString>;

        if $r2 != null goto label04;

        $r3 = $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.String systemPropertyClassName>;

        if $r3 != null goto label01;

        $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.String systemPropertyClassName> = "android.os.SystemProperties";

     label01:
        $r3 = $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.String systemPropertyClassName>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/lang/String;";

        $r1[1] = class "Ljava/lang/String;";

     label02:
        $r2 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("get", $r1);

     label03:
        $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.reflect.Method getString> = $r2;

     label04:
        $r2 = $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.lang.reflect.Method getString>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "qemu.host.hostname";

        $r5[1] = "";

     label05:
        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label06:
        $r3 = (java.lang.String) $r6;

        return $r3;

     label07:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r7);

        return "";

     label08:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r8);

        return "";

     label09:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r9);

        return "";

     label10:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r10);

        return "";

     label11:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r11);

        return "";

     label12:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestArgCP", "Couldn\'t access SysProps for qemu hostname.", $r12);

        return "";

        catch java.lang.ClassNotFoundException from label02 to label03 with label12;
        catch java.lang.ClassNotFoundException from label05 to label06 with label12;
        catch java.lang.SecurityException from label02 to label03 with label11;
        catch java.lang.SecurityException from label05 to label06 with label11;
        catch java.lang.NoSuchMethodException from label02 to label03 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label09;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label09;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.IllegalAccessException from label05 to label06 with label08;
        catch java.lang.IllegalArgumentException from label02 to label03 with label07;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }

    private static androidx.test.services.storage.TestStorageServiceProto$TestArguments readProtoFromFile()
    {
        java.io.File $r0, $r1, r6;
        boolean $z0;
        androidx.test.services.storage.TestStorageServiceProto$TestArguments $r2;
        java.lang.Throwable $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5, r8;
        java.io.FileInputStream r7;
        java.lang.RuntimeException r9;

        r6 = new java.io.File;

        $r0 = r6;

        $r1 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "googletest/internal_use/test_args.dat");

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <androidx.test.services.storage.TestStorageServiceProto$TestArguments: androidx.test.services.storage.TestStorageServiceProto$TestArguments getDefaultInstance()>();

        return $r2;

     label1:
        r7 = new java.io.FileInputStream;

     label2:
        specialinvoke r7.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label3:
        $r2 = staticinvoke <androidx.test.services.storage.TestStorageServiceProto$TestArguments: androidx.test.services.storage.TestStorageServiceProto$TestArguments parseFrom(java.io.InputStream)>(r7);

        return $r2;

     label4:
        $r3 := @caughtexception;

        r9 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not able to read from file: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r3);

        $r3 = (java.lang.Throwable) r9;

        throw $r3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.net.Uri $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r3 := @parameter0: android.net.Uri;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        return 0;
    }

    public java.lang.String getType(android.net.Uri)
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        android.net.Uri $r1;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r1 := @parameter0: android.net.Uri;

        return null;
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.ContentValues;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Insertion is not allowed.");

        throw $r3;
    }

    public boolean onCreate()
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        return 1;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        android.net.Uri $r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5;
        java.util.Map $r6;
        android.database.MatrixCursor $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.util.Map$Entry $r11;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r6 = specialinvoke $r0.<androidx.test.services.storage.provider.TestArgsContentProvider: java.util.Map buildArgMapFromFile()>();

        $r7 = new android.database.MatrixCursor;

        $r2 = staticinvoke <androidx.test.services.storage.file.PropertyFile$Column: java.lang.String[] getNames()>();

        specialinvoke $r7.<android.database.MatrixCursor: void <init>(java.lang.String[])>($r2);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getLastPathSegment()>();

        if $r3 == null goto label1;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = $r3;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r3 = (java.lang.String) $r8;

        $r2[1] = $r3;

        virtualinvoke $r7.<android.database.MatrixCursor: void addRow(java.lang.Object[])>($r2);

        goto label3;

     label1:
        $r9 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map$Entry) $r8;

        $r2 = newarray (java.lang.String)[2];

        $r8 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r8;

        $r2[0] = $r3;

        $r8 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r8;

        $r2[1] = $r3;

        virtualinvoke $r7.<android.database.MatrixCursor: void addRow(java.lang.Object[])>($r2);

        goto label2;

     label3:
        return $r7;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.TestArgsContentProvider $r0;
        android.content.ContentValues $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        android.net.Uri $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestArgsContentProvider;

        $r4 := @parameter0: android.net.Uri;

        $r1 := @parameter1: android.content.ContentValues;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        return 0;
    }

