kotlin.text.RegexKt
    public static final kotlin.text.MatchResult access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;
        kotlin.text.MatchResult $r1;
        java.util.regex.Matcher $r2;

        $r2 := @parameter0: java.util.regex.Matcher;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.CharSequence;

        $r1 = staticinvoke <kotlin.text.RegexKt: kotlin.text.MatchResult findNext(java.util.regex.Matcher,int,java.lang.CharSequence)>($r2, $i0, $r0);

        return $r1;
    }

    public static final kotlin.text.MatchResult access$matchEntire(java.util.regex.Matcher, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        kotlin.text.MatchResult $r1;
        java.util.regex.Matcher $r2;

        $r2 := @parameter0: java.util.regex.Matcher;

        $r0 := @parameter1: java.lang.CharSequence;

        $r1 = staticinvoke <kotlin.text.RegexKt: kotlin.text.MatchResult matchEntire(java.util.regex.Matcher,java.lang.CharSequence)>($r2, $r0);

        return $r1;
    }

    public static final kotlin.ranges.IntRange access$range(java.util.regex.MatchResult)
    {
        kotlin.ranges.IntRange $r0;
        java.util.regex.MatchResult $r1;

        $r1 := @parameter0: java.util.regex.MatchResult;

        $r0 = staticinvoke <kotlin.text.RegexKt: kotlin.ranges.IntRange range(java.util.regex.MatchResult)>($r1);

        return $r0;
    }

    public static final kotlin.ranges.IntRange access$range(java.util.regex.MatchResult, int)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        java.util.regex.MatchResult $r1;

        $r1 := @parameter0: java.util.regex.MatchResult;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <kotlin.text.RegexKt: kotlin.ranges.IntRange range(java.util.regex.MatchResult,int)>($r1, $i0);

        return $r0;
    }

    public static final int access$toInt(java.lang.Iterable)
    {
        int $i0;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 = staticinvoke <kotlin.text.RegexKt: int toInt(java.lang.Iterable)>($r0);

        return $i0;
    }

    private static final kotlin.text.MatchResult findNext(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        boolean $z0;
        java.util.regex.Matcher $r1;
        int $i0;
        kotlin.text.MatcherMatchResult $r2;

        $r1 := @parameter0: java.util.regex.Matcher;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.CharSequence;

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean find(int)>($i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new kotlin.text.MatcherMatchResult;

        specialinvoke $r2.<kotlin.text.MatcherMatchResult: void <init>(java.util.regex.Matcher,java.lang.CharSequence)>($r1, $r0);

        return $r2;
    }

    private static final java.util.Set fromInt(int)
    {
        int $i0;
        java.util.EnumSet $r0;
        java.util.Set $r1;
        kotlin.text.RegexKt$fromInt$1$1 r2;
        java.lang.Iterable r3;

        $i0 := @parameter0: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "T");

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Ljava/lang/Enum;");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void needClassReification()>();

        r2 = new kotlin.text.RegexKt$fromInt$1$1;

        specialinvoke r2.<kotlin.text.RegexKt$fromInt$1$1: void <init>(int)>($i0);

        r3 = (java.lang.Iterable) $r0;

        staticinvoke <kotlin.collections.CollectionsKt: boolean retainAll(java.lang.Iterable,kotlin.jvm.functions.Function1)>(r3, r2);

        $r1 = (java.util.Set) $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "unmodifiableSet(EnumSet.\u2026mask == it.value }\n    })");

        return $r1;
    }

    private static final kotlin.text.MatchResult matchEntire(java.util.regex.Matcher, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        boolean $z0;
        java.util.regex.Matcher $r1;
        kotlin.text.MatcherMatchResult $r2;

        $r1 := @parameter0: java.util.regex.Matcher;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new kotlin.text.MatcherMatchResult;

        specialinvoke $r2.<kotlin.text.MatcherMatchResult: void <init>(java.util.regex.Matcher,java.lang.CharSequence)>($r1, $r0);

        return $r2;
    }

    private static final kotlin.ranges.IntRange range(java.util.regex.MatchResult)
    {
        java.util.regex.MatchResult $r0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r1;

        $r0 := @parameter0: java.util.regex.MatchResult;

        $i0 = interfaceinvoke $r0.<java.util.regex.MatchResult: int start()>();

        $i1 = interfaceinvoke $r0.<java.util.regex.MatchResult: int end()>();

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i0, $i1);

        return $r1;
    }

    private static final kotlin.ranges.IntRange range(java.util.regex.MatchResult, int)
    {
        int $i0, $i1;
        java.util.regex.MatchResult $r0;
        kotlin.ranges.IntRange $r1;

        $r0 := @parameter0: java.util.regex.MatchResult;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r0.<java.util.regex.MatchResult: int start(int)>($i0);

        $i0 = interfaceinvoke $r0.<java.util.regex.MatchResult: int end(int)>($i0);

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i1, $i0);

        return $r1;
    }

    private static final int toInt(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Iterator $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.text.FlagEnum $r3;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlin.text.FlagEnum) $r2;

        $i1 = interfaceinvoke $r3.<kotlin.text.FlagEnum: int getValue()>();

        $i0 = $i0 | $i1;

        goto label1;

     label2:
        return $i0;
    }

