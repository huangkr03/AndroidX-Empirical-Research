androidx.car.app.constraints.ConstraintManager
<androidx.car.app.constraints.ConstraintManager: int CONTENT_LIMIT_TYPE_LIST>
<androidx.car.app.constraints.ConstraintManager: int CONTENT_LIMIT_TYPE_GRID>
<androidx.car.app.constraints.ConstraintManager: int CONTENT_LIMIT_TYPE_PLACE_LIST>
<androidx.car.app.constraints.ConstraintManager: int CONTENT_LIMIT_TYPE_ROUTE_LIST>
<androidx.car.app.constraints.ConstraintManager: int CONTENT_LIMIT_TYPE_PANE>
<androidx.car.app.constraints.ConstraintManager: androidx.car.app.CarContext mCarContext>
<androidx.car.app.constraints.ConstraintManager: androidx.car.app.HostDispatcher mHostDispatcher>
    public int getContentLimit(int)
    {
        androidx.car.app.constraints.ConstraintManager r0;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r1, $r7;
        androidx.car.app.HostDispatcher $r2;
        androidx.car.app.HostCall $r3;
        java.lang.Object $r4;
        androidx.car.app.CarContext $r5;
        android.content.res.Resources $r6;
        java.lang.Integer r8;

        r0 := @this: androidx.car.app.constraints.ConstraintManager;

        i0 := @parameter0: int;

        r8 = null;

     label1:
        $r2 = r0.<androidx.car.app.constraints.ConstraintManager: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r3 = dynamicinvoke "dispatch" <androidx.car.app.HostCall (int)>(i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.constraints.ConstraintManager: java.lang.Integer lambda$getContentLimit$0(int,androidx.car.app.constraints.IConstraintHost)>, methodtype: java.lang.Integer __METHODTYPE__(androidx.car.app.constraints.IConstraintHost));

        $r4 = virtualinvoke $r2.<androidx.car.app.HostDispatcher: java.lang.Object dispatchForResult(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("constraints", "getContentLimit", $r3);

        r8 = (java.lang.Integer) $r4;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CarApp", "Failed to retrieve list limit from the host, using defaults", r1);

     label4:
        if r8 == null goto label5;

        $i3 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        return $i3;

     label5:
        $r5 = r0.<androidx.car.app.constraints.ConstraintManager: androidx.car.app.CarContext mCarContext>;

        $r6 = virtualinvoke $r5.<androidx.car.app.CarContext: android.content.res.Resources getResources()>();

        $i1 = specialinvoke r0.<androidx.car.app.constraints.ConstraintManager: int getResourceIdForContentType(int)>(i0);

        $i2 = virtualinvoke $r6.<android.content.res.Resources: int getInteger(int)>($i1);

        return $i2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int getResourceIdForContentType(int)
    {
        androidx.car.app.constraints.ConstraintManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.car.app.constraints.ConstraintManager;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label5;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label2;
            default: goto label5;
        };

     label1:
        $i4 = <androidx.car.app.R$integer: int content_limit_grid>;

        return $i4;

     label2:
        $i1 = <androidx.car.app.R$integer: int content_limit_pane>;

        return $i1;

     label3:
        $i3 = <androidx.car.app.R$integer: int content_limit_place_list>;

        return $i3;

     label4:
        $i2 = <androidx.car.app.R$integer: int content_limit_route_list>;

        return $i2;

     label5:
        $i5 = <androidx.car.app.R$integer: int content_limit_list>;

        return $i5;
    }

    public static androidx.car.app.constraints.ConstraintManager create(androidx.car.app.CarContext, androidx.car.app.HostDispatcher)
    {
        androidx.car.app.CarContext r0, $r4;
        androidx.car.app.HostDispatcher r1, $r6;
        androidx.car.app.constraints.ConstraintManager $r2;
        java.lang.Object $r3, $r5;

        r0 := @parameter0: androidx.car.app.CarContext;

        r1 := @parameter1: androidx.car.app.HostDispatcher;

        $r2 = new androidx.car.app.constraints.ConstraintManager;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r4 = (androidx.car.app.CarContext) $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = (androidx.car.app.HostDispatcher) $r5;

        specialinvoke $r2.<androidx.car.app.constraints.ConstraintManager: void <init>(androidx.car.app.CarContext,androidx.car.app.HostDispatcher)>($r4, $r6);

        return $r2;
    }

    private void <init>(androidx.car.app.CarContext, androidx.car.app.HostDispatcher)
    {
        androidx.car.app.constraints.ConstraintManager r0;
        androidx.car.app.CarContext r1;
        androidx.car.app.HostDispatcher r2;

        r0 := @this: androidx.car.app.constraints.ConstraintManager;

        r1 := @parameter0: androidx.car.app.CarContext;

        r2 := @parameter1: androidx.car.app.HostDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.car.app.constraints.ConstraintManager: androidx.car.app.CarContext mCarContext> = r1;

        r0.<androidx.car.app.constraints.ConstraintManager: androidx.car.app.HostDispatcher mHostDispatcher> = r2;

        return;
    }

    private static java.lang.Integer lambda$getContentLimit$0(int, androidx.car.app.constraints.IConstraintHost) throws android.os.RemoteException
    {
        int i0, $i1;
        androidx.car.app.constraints.IConstraintHost r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.car.app.constraints.IConstraintHost;

        $i1 = interfaceinvoke r0.<androidx.car.app.constraints.IConstraintHost: int getContentLimit(int)>(i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r1;
    }

androidx.car.app.constraints.ConstraintManager$ContentLimitType
