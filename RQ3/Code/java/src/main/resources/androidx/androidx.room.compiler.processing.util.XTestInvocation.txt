androidx.room.compiler.processing.util.XTestInvocation
<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XProcessingEnv processingEnv>
<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XRoundEnv roundEnv>
<androidx.room.compiler.processing.util.XTestInvocation: boolean disposed>
<androidx.room.compiler.processing.util.XTestInvocation: java.util.Map userData>
<androidx.room.compiler.processing.util.XTestInvocation: java.util.List postCompilationAssertions>
<androidx.room.compiler.processing.util.XTestInvocation: boolean isKsp>
    public void <init>(androidx.room.compiler.processing.XProcessingEnv, androidx.room.compiler.processing.XRoundEnv)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        androidx.room.compiler.processing.XProcessingEnv r1;
        androidx.room.compiler.processing.XRoundEnv r2;
        java.util.LinkedHashMap $r3;
        java.util.Map $r4;
        java.util.ArrayList $r5;
        java.util.List $r6;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r7, $r8;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: androidx.room.compiler.processing.XProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.XRoundEnv;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processingEnv");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "roundEnv");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XProcessingEnv processingEnv> = r1;

        r0.<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XRoundEnv roundEnv> = r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = (java.util.Map) $r3;

        r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.Map userData> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = (java.util.List) $r5;

        r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.List postCompilationAssertions> = $r6;

        $r7 = interfaceinvoke r1.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend getBackend()>();

        $r8 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP>;

        if $r7 != $r8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.room.compiler.processing.util.XTestInvocation: boolean isKsp> = $z0;

        return;
    }

    public final androidx.room.compiler.processing.XProcessingEnv getProcessingEnv()
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        androidx.room.compiler.processing.XProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        specialinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void assertNotDisposed()>();

        $r1 = r0.<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XProcessingEnv processingEnv>;

        return $r1;
    }

    public final androidx.room.compiler.processing.XRoundEnv getRoundEnv()
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        androidx.room.compiler.processing.XRoundEnv $r1;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        specialinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void assertNotDisposed()>();

        $r1 = r0.<androidx.room.compiler.processing.util.XTestInvocation: androidx.room.compiler.processing.XRoundEnv roundEnv>;

        return $r1;
    }

    public final boolean isKsp()
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        $z0 = r0.<androidx.room.compiler.processing.util.XTestInvocation: boolean isKsp>;

        return $z0;
    }

    public final void assertCompilationResult(kotlin.jvm.functions.Function1)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.List $r2;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        specialinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void assertNotDisposed()>();

        $r2 = r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.List postCompilationAssertions>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void runPostCompilationChecks$room_compiler_processing_testing(androidx.room.compiler.processing.util.CompilationResultSubject)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        androidx.room.compiler.processing.util.CompilationResultSubject r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        kotlin.jvm.functions.Function1 r5;
        java.util.List $r6;
        boolean $z2;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: androidx.room.compiler.processing.util.CompilationResultSubject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "compilationResultSubject");

        $r6 = r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.List postCompilationAssertions>;

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kotlin.jvm.functions.Function1) r4;

        interfaceinvoke r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label1;

     label2:
        return;
    }

    public final java.lang.Object getUserData(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        kotlin.reflect.KClass r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        specialinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void assertNotDisposed()>();

        $r2 = r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.Map userData>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public final void putUserData(kotlin.reflect.KClass, java.lang.Object)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        kotlin.reflect.KClass r1;
        java.lang.Object r2;
        java.util.Map $r3;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: kotlin.reflect.KClass;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        specialinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void assertNotDisposed()>();

        $r3 = r0.<androidx.room.compiler.processing.util.XTestInvocation: java.util.Map userData>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public final java.lang.Object getOrPutUserData(kotlin.reflect.KClass, kotlin.jvm.functions.Function0)
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        kotlin.reflect.KClass r1;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Object r3, r4, $r5, r6;
        boolean z1;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r1 := @parameter0: kotlin.reflect.KClass;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "create");

        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: java.lang.Object getUserData(kotlin.reflect.KClass)>(r1);

        if $r5 == null goto label1;

        r6 = $r5;

        return r6;

     label1:
        r3 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r4 = r3;

        z1 = 0;

        virtualinvoke r0.<androidx.room.compiler.processing.util.XTestInvocation: void putUserData(kotlin.reflect.KClass,java.lang.Object)>(r1, r4);

        return r3;
    }

    public final void dispose()
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        r0.<androidx.room.compiler.processing.util.XTestInvocation: boolean disposed> = 1;

        return;
    }

    private final void assertNotDisposed()
    {
        androidx.room.compiler.processing.util.XTestInvocation r0;
        com.google.common.truth.StandardSubjectBuilder $r1;
        boolean $z0;
        java.lang.Boolean $r2;
        com.google.common.truth.BooleanSubject $r3;

        r0 := @this: androidx.room.compiler.processing.util.XTestInvocation;

        $r1 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String)>("Cannot use a test invocation after it is disposed.");

        $z0 = r0.<androidx.room.compiler.processing.util.XTestInvocation: boolean disposed>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r3 = virtualinvoke $r1.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r2);

        virtualinvoke $r3.<com.google.common.truth.BooleanSubject: void isFalse()>();

        return;
    }

