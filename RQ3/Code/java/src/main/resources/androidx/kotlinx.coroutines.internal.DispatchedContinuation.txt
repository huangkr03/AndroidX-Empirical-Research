kotlinx.coroutines.internal.DispatchedContinuation
<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>
<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state>
<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>
<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>
<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>
    public void <init>(kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        kotlin.coroutines.CoroutineContext $r4;
        java.lang.Object $r5;
        kotlinx.atomicfu.AtomicRef $r6;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "dispatcher");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        specialinvoke $r0.<kotlinx.coroutines.DispatchedTask: void <init>(int)>(-1);

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher> = $r2;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation> = $r1;

        $r3 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r3;

        $r4 = virtualinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>($r4);

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement> = $r5;

        $r6 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicRef atomic(java.lang.Object)>(null);

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation> = $r6;

        return;
    }

    private final kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.atomicfu.AtomicRef $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.CancellableContinuationImpl) $r1;

        return $r3;

     label1:
        return null;
    }

    public final void awaitReusability()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlinx.atomicfu.AtomicRef $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

     label1:
        $r3 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $r2 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r3 == $r2 goto label1;

        return;
    }

    public void cancelCompletedResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object, java.lang.Throwable)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        boolean $z0;
        kotlinx.coroutines.CompletedWithCancellation $r3;
        kotlin.jvm.functions.Function1 $r4;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        $z0 = $r2 instanceof kotlinx.coroutines.CompletedWithCancellation;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.CompletedWithCancellation) $r2;

        $r4 = $r3.<kotlinx.coroutines.CompletedWithCancellation: kotlin.jvm.functions.Function1 onCancellation>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

     label1:
        return;
    }

    public final kotlinx.coroutines.CancellableContinuationImpl claimReusableCancellableContinuation()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlinx.atomicfu.AtomicRef $r1, $r4;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        boolean $z0;
        kotlinx.coroutines.CancellableContinuationImpl $r5;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

     label1:
        $r2 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        if $r2 != null goto label2;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        virtualinvoke $r1.<kotlinx.atomicfu.AtomicRef: void setValue(java.lang.Object)>($r3);

        return null;

     label2:
        $z0 = $r2 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        if $z0 == 0 goto label3;

        $r4 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        $r5 = (kotlinx.coroutines.CancellableContinuationImpl) $r2;

        return $r5;

     label3:
        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r2 == $r3 goto label1;

        $z0 = $r2 instanceof java.lang.Throwable;

        if $z0 == 0 goto label4;

        goto label1;

     label4:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistent state ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        goto label5;

     label5:
        throw $r6;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public kotlin.coroutines.Continuation getDelegate$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        return $r0;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        return null;
    }

    public final boolean isReusable()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.Object $r1;
        kotlinx.atomicfu.AtomicRef $r2;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean postponeCancellation(java.lang.Throwable)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.Throwable $r1;
        kotlinx.atomicfu.AtomicRef $r2, $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

     label1:
        $r3 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label2;

        $r5 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        $z0 = $r3 instanceof java.lang.Throwable;

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r5 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $z0 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r3, null);

        if $z0 == 0 goto label1;

        return 0;
    }

    public final void release()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlinx.coroutines.CancellableContinuationImpl $r1;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        virtualinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: void awaitReusability()>();

        $r1 = specialinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()>();

        if $r1 == null goto label1;

        virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

     label1:
        return;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.Object $r1, $r4;
        kotlin.coroutines.Continuation $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CoroutineDispatcher $r5;
        boolean $z0;
        kotlinx.coroutines.ThreadLocalEventLoop $r6;
        kotlinx.coroutines.EventLoop $r7;
        kotlin.Unit $r8;
        java.lang.Throwable $r9, $r10, $r11;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r3 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState$default(java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, null, 1, null);

        $r5 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r3);

        if $z0 == 0 goto label01;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 0;

        $r5 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        virtualinvoke $r5.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r3, $r0);

        return;

     label01:
        staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $r6 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r7 = virtualinvoke $r6.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $z0 = virtualinvoke $r7.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label02;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 0;

        virtualinvoke $r7.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r0);

        return;

     label02:
        virtualinvoke $r7.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label03:
        $r3 = virtualinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

     label04:
        $r4 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r4 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

     label05:
        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

     label06:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

     label07:
        $z0 = virtualinvoke $r7.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label08:
        if $z0 != 0 goto label07;

     label09:
        virtualinvoke $r7.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        return;

     label10:
        $r9 := @caughtexception;

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

     label11:
        throw $r9;

     label12:
        $r10 := @caughtexception;

     label13:
        virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r10, null);

     label14:
        goto label09;

     label15:
        $r11 := @caughtexception;

        virtualinvoke $r7.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        goto label16;

     label16:
        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public java.lang.Object takeState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.AssertionError $r3;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r2 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        if $r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r2 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r2;

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r3 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DispatchedContinuation[");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public final java.lang.Throwable tryReleaseClaimedContinuation(kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.atomicfu.AtomicRef $r2, $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10;

        $r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

     label1:
        $r3 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r3 != $r4 goto label2;

        $r5 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z0 == 0 goto label1;

        return null;

     label2:
        $z0 = $r3 instanceof java.lang.Throwable;

        if $z0 == 0 goto label4;

        $r2 = $r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.atomicfu.AtomicRef _reusableCancellableContinuation>;

        $z0 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r3, null);

        if $z0 == 0 goto label3;

        $r6 = (java.lang.Throwable) $r3;

        return $r6;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = "Failed requirement.";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistent state ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        goto label5;

     label5:
        throw $r9;
    }

