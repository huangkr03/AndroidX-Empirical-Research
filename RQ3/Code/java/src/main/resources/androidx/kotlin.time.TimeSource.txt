kotlin.time.TimeSource
<kotlin.time.TimeSource: kotlin.time.TimeSource$Companion Companion>
    static void <clinit>()
    {
        kotlin.time.TimeSource$Companion $r0;

        $r0 = <kotlin.time.TimeSource$Companion: kotlin.time.TimeSource$Companion $$INSTANCE>;

        <kotlin.time.TimeSource: kotlin.time.TimeSource$Companion Companion> = $r0;

        return;
    }

<kotlin.time.TimeSource: kotlin.time.TimeMark markNow()>
kotlin.time.TimeSource$Companion
<kotlin.time.TimeSource$Companion: kotlin.time.TimeSource$Companion $$INSTANCE>
    static void <clinit>()
    {
        kotlin.time.TimeSource$Companion $r0;

        $r0 = new kotlin.time.TimeSource$Companion;

        specialinvoke $r0.<kotlin.time.TimeSource$Companion: void <init>()>();

        <kotlin.time.TimeSource$Companion: kotlin.time.TimeSource$Companion $$INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.time.TimeSource$Companion $r0;

        $r0 := @this: kotlin.time.TimeSource$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

kotlin.time.TimeSource$Monotonic$ValueTimeMark
<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>
    private void <init>(long)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 := @parameter0: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading> = $l0;

        return;
    }

    public static final kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)
    {
        long $l0;
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;

        $l0 := @parameter0: long;

        $r0 = new kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        specialinvoke $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: void <init>(long)>($l0);

        return $r0;
    }

    public static long constructor-impl(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return $l0;
    }

    public static long elapsedNow-UwyO8pc(long)
    {
        kotlin.time.MonotonicTimeSource $r0;
        long $l0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE>;

        $l0 = virtualinvoke $r0.<kotlin.time.MonotonicTimeSource: long elapsedFrom-6eNON_k(long)>($l0);

        return $l0;
    }

    public static boolean equals-impl(long, java.lang.Object)
    {
        boolean $z0;
        long $l0, $l1;
        java.lang.Object $r0;
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r1;
        byte $b2;

        $l1 := @parameter0: long;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r0 instanceof kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (kotlin.time.TimeSource$Monotonic$ValueTimeMark) $r0;

        $l0 = virtualinvoke $r1.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long unbox-impl()>();

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static final boolean equals-impl0(long, long)
    {
        long $l0, $l2;
        byte $b1;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean hasNotPassedNow-impl(long)
    {
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long elapsedNow-UwyO8pc(long)>($l0);

        $z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        return $z0;
    }

    public static boolean hasPassedNow-impl(long)
    {
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long elapsedNow-UwyO8pc(long)>($l0);

        $z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static int hashCode-impl(long)
    {
        int $i0;
        long $l1, $l2;

        $l1 := @parameter0: long;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i0 = (int) $l1;

        return $i0;
    }

    public static long minus-LRDsOJo(long, long)
    {
        kotlin.time.MonotonicTimeSource $r0;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE>;

        $l1 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l1);

        $l0 = virtualinvoke $r0.<kotlin.time.MonotonicTimeSource: long adjustReading-6QKq23U(long,long)>($l0, $l1);

        return $l0;
    }

    public static long plus-LRDsOJo(long, long)
    {
        long $l0, $l1;
        kotlin.time.MonotonicTimeSource $r0;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $r0 = <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE>;

        $l1 = virtualinvoke $r0.<kotlin.time.MonotonicTimeSource: long adjustReading-6QKq23U(long,long)>($l1, $l0);

        return $l1;
    }

    public static java.lang.String toString-impl(long)
    {
        long $l0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ValueTimeMark(reading=");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public long elapsedNow-UwyO8pc()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $l0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long elapsedNow-UwyO8pc(long)>($l0);

        return $l0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $r1 := @parameter0: java.lang.Object;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $z0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: boolean equals-impl(long,java.lang.Object)>($l0, $r1);

        return $z0;
    }

    public boolean hasNotPassedNow()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $z0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: boolean hasNotPassedNow-impl(long)>($l0);

        return $z0;
    }

    public boolean hasPassedNow()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $z0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: boolean hasPassedNow-impl(long)>($l0);

        return $z0;
    }

    public int hashCode()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        int $i0;
        long $l1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l1 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $i0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: int hashCode-impl(long)>($l1);

        return $i0;
    }

    public long minus-LRDsOJo(long)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0, $l1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l1 := @parameter0: long;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $l1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long minus-LRDsOJo(long,long)>($l0, $l1);

        return $l1;
    }

    public volatile kotlin.time.TimeMark minus-LRDsOJo(long)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 := @parameter0: long;

        $l0 = virtualinvoke $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long minus-LRDsOJo(long)>($l0);

        $r0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)>($l0);

        return $r0;
    }

    public long plus-LRDsOJo(long)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0, $l1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l1 := @parameter0: long;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $l1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long plus-LRDsOJo(long,long)>($l0, $l1);

        return $l1;
    }

    public volatile kotlin.time.TimeMark plus-LRDsOJo(long)
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 := @parameter0: long;

        $l0 = virtualinvoke $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long plus-LRDsOJo(long)>($l0);

        $r0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)>($l0);

        return $r0;
    }

    public java.lang.String toString()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        java.lang.String $r1;
        long $l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        $l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        $r1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: java.lang.String toString-impl(long)>($l0);

        return $r1;
    }

    public final long unbox-impl()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r0;
        long l0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic$ValueTimeMark;

        l0 = $r0.<kotlin.time.TimeSource$Monotonic$ValueTimeMark: long reading>;

        return l0;
    }

kotlin.time.TimeSource$Monotonic
<kotlin.time.TimeSource$Monotonic: kotlin.time.TimeSource$Monotonic INSTANCE>
    static void <clinit>()
    {
        kotlin.time.TimeSource$Monotonic $r0;

        $r0 = new kotlin.time.TimeSource$Monotonic;

        specialinvoke $r0.<kotlin.time.TimeSource$Monotonic: void <init>()>();

        <kotlin.time.TimeSource$Monotonic: kotlin.time.TimeSource$Monotonic INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.time.TimeSource$Monotonic $r0;

        $r0 := @this: kotlin.time.TimeSource$Monotonic;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile kotlin.time.TimeMark markNow()
    {
        kotlin.time.TimeSource$Monotonic $r0;
        long $l0;
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic;

        $l0 = virtualinvoke $r0.<kotlin.time.TimeSource$Monotonic: long markNow-z9LOYto()>();

        $r1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)>($l0);

        return $r1;
    }

    public long markNow-z9LOYto()
    {
        kotlin.time.TimeSource$Monotonic $r0;
        long $l0;
        kotlin.time.MonotonicTimeSource $r1;

        $r0 := @this: kotlin.time.TimeSource$Monotonic;

        $r1 = <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE>;

        $l0 = virtualinvoke $r1.<kotlin.time.MonotonicTimeSource: long markNow-z9LOYto()>();

        return $l0;
    }

    public java.lang.String toString()
    {
        kotlin.time.TimeSource$Monotonic $r0;
        java.lang.String $r1;
        kotlin.time.MonotonicTimeSource $r2;

        $r0 := @this: kotlin.time.TimeSource$Monotonic;

        $r2 = <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE>;

        $r1 = virtualinvoke $r2.<kotlin.time.MonotonicTimeSource: java.lang.String toString()>();

        return $r1;
    }

