androidx.camera.extensions.internal.BasicVendorExtender
<androidx.camera.extensions.internal.BasicVendorExtender: java.lang.String TAG>
<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator mExtensionDisabledValidator>
<androidx.camera.extensions.internal.BasicVendorExtender: int mMode>
<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>
<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>
<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>
    public void <init>(int)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        int i0;
        java.lang.Throwable r1, $r14;
        androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator $r2;
        androidx.camera.extensions.impl.AutoPreviewExtenderImpl $r3;
        androidx.camera.extensions.impl.AutoImageCaptureExtenderImpl $r4;
        androidx.camera.extensions.impl.BeautyPreviewExtenderImpl $r5;
        androidx.camera.extensions.impl.BeautyImageCaptureExtenderImpl $r6;
        androidx.camera.extensions.impl.NightPreviewExtenderImpl $r7;
        androidx.camera.extensions.impl.NightImageCaptureExtenderImpl $r8;
        androidx.camera.extensions.impl.HdrPreviewExtenderImpl $r9;
        androidx.camera.extensions.impl.HdrImageCaptureExtenderImpl $r10;
        androidx.camera.extensions.impl.BokehPreviewExtenderImpl $r11;
        androidx.camera.extensions.impl.BokehImageCaptureExtenderImpl $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        java.lang.String $r19;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator;

        specialinvoke $r2.<androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator mExtensionDisabledValidator> = $r2;

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = null;

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = null;

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: int mMode> = i0;

     label01:
        tableswitch(i0)
        {
            case 0: goto label07;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            default: goto label07;
        };

     label02:
        $r11 = new androidx.camera.extensions.impl.BokehPreviewExtenderImpl;

        specialinvoke $r11.<androidx.camera.extensions.impl.BokehPreviewExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = $r11;

        $r12 = new androidx.camera.extensions.impl.BokehImageCaptureExtenderImpl;

        specialinvoke $r12.<androidx.camera.extensions.impl.BokehImageCaptureExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = $r12;

        goto label08;

     label03:
        $r9 = new androidx.camera.extensions.impl.HdrPreviewExtenderImpl;

        specialinvoke $r9.<androidx.camera.extensions.impl.HdrPreviewExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = $r9;

        $r10 = new androidx.camera.extensions.impl.HdrImageCaptureExtenderImpl;

        specialinvoke $r10.<androidx.camera.extensions.impl.HdrImageCaptureExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = $r10;

        goto label08;

     label04:
        $r7 = new androidx.camera.extensions.impl.NightPreviewExtenderImpl;

        specialinvoke $r7.<androidx.camera.extensions.impl.NightPreviewExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = $r7;

        $r8 = new androidx.camera.extensions.impl.NightImageCaptureExtenderImpl;

        specialinvoke $r8.<androidx.camera.extensions.impl.NightImageCaptureExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = $r8;

        goto label08;

     label05:
        $r5 = new androidx.camera.extensions.impl.BeautyPreviewExtenderImpl;

        specialinvoke $r5.<androidx.camera.extensions.impl.BeautyPreviewExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = $r5;

        $r6 = new androidx.camera.extensions.impl.BeautyImageCaptureExtenderImpl;

        specialinvoke $r6.<androidx.camera.extensions.impl.BeautyImageCaptureExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = $r6;

        goto label08;

     label06:
        $r3 = new androidx.camera.extensions.impl.AutoPreviewExtenderImpl;

        specialinvoke $r3.<androidx.camera.extensions.impl.AutoPreviewExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl> = $r3;

        $r4 = new androidx.camera.extensions.impl.AutoImageCaptureExtenderImpl;

        specialinvoke $r4.<androidx.camera.extensions.impl.AutoImageCaptureExtenderImpl: void <init>()>();

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl> = $r4;

        goto label08;

     label07:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Should not activate ExtensionMode.NONE");

        throw $r13;

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        r1 = $r14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OEM implementation for extension mode ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("does not exist!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("BasicVendorExtender", $r19);

     label10:
        return;

        catch java.lang.NoClassDefFoundError from label01 to label08 with label09;
    }

    public androidx.camera.extensions.impl.PreviewExtenderImpl getPreviewExtenderImpl()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.extensions.impl.PreviewExtenderImpl $r1;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        return $r1;
    }

    public androidx.camera.extensions.impl.ImageCaptureExtenderImpl getImageCaptureExtenderImpl()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r1;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        return $r1;
    }

    public boolean isExtensionAvailable(java.lang.String, java.util.Map)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        java.lang.String r1;
        java.util.Map r2;
        android.hardware.camera2.CameraCharacteristics r3;
        int $i0;
        androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator $r4;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.extensions.impl.PreviewExtenderImpl $r5, $r8;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r6, $r9;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r4 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator mExtensionDisabledValidator>;

        $i0 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: int mMode>;

        $z0 = virtualinvoke $r4.<androidx.camera.extensions.internal.compat.workaround.ExtensionDisabledValidator: boolean shouldDisableExtension(java.lang.String,int)>(r1, $i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        if $r5 == null goto label2;

        $r6 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        if $r6 != null goto label3;

     label2:
        return 0;

     label3:
        $r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.hardware.camera2.CameraCharacteristics) $r7;

        $r8 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        $z1 = interfaceinvoke $r8.<androidx.camera.extensions.impl.PreviewExtenderImpl: boolean isExtensionAvailable(java.lang.String,android.hardware.camera2.CameraCharacteristics)>(r1, r3);

        if $z1 == 0 goto label4;

        $r9 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        $z2 = interfaceinvoke $r9.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: boolean isExtensionAvailable(java.lang.String,android.hardware.camera2.CameraCharacteristics)>(r1, r3);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public void init(androidx.camera.core.CameraInfo)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.core.CameraInfo r1;
        java.lang.String r2, $r12, $r18, $r24;
        android.hardware.camera2.CameraCharacteristics r3;
        androidx.camera.extensions.impl.PreviewExtenderImpl $r4, $r7, $r15;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r5, $r8, $r21;
        androidx.camera.camera2.interop.Camera2CameraInfo $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r17, $r19, $r20, $r23;
        int $i0;
        androidx.camera.extensions.impl.PreviewExtenderImpl$ProcessorType $r16;
        androidx.camera.extensions.impl.CaptureProcessorImpl $r22;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo> = r1;

        $r4 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        if $r5 != null goto label2;

     label1:
        return;

     label2:
        $r6 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: androidx.camera.camera2.interop.Camera2CameraInfo 'from'(androidx.camera.core.CameraInfo)>(r1);

        r2 = virtualinvoke $r6.<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.String getCameraId()>();

        r3 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: android.hardware.camera2.CameraCharacteristics extractCameraCharacteristics(androidx.camera.core.CameraInfo)>(r1);

        $r7 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        interfaceinvoke $r7.<androidx.camera.extensions.impl.PreviewExtenderImpl: void init(java.lang.String,android.hardware.camera2.CameraCharacteristics)>(r2, r3);

        $r8 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        interfaceinvoke $r8.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: void init(java.lang.String,android.hardware.camera2.CameraCharacteristics)>(r2, r3);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extension init Mode = ");

        $i0 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: int mMode>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("BasicVendorExtender", $r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PreviewExtender processorType= ");

        $r15 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        $r16 = interfaceinvoke $r15.<androidx.camera.extensions.impl.PreviewExtenderImpl: androidx.camera.extensions.impl.PreviewExtenderImpl$ProcessorType getProcessorType()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("BasicVendorExtender", $r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImageCaptureExtender processor= ");

        $r21 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        $r22 = interfaceinvoke $r21.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureProcessorImpl getCaptureProcessor()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("BasicVendorExtender", $r24);

        return;
    }

    public android.util.Range getEstimatedCaptureLatencyRange(android.util.Size)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        android.util.Size r1;
        java.lang.Throwable r2, $r10;
        androidx.camera.core.CameraInfo $r3;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r5, $r8;
        androidx.camera.extensions.internal.Version $r6, $r7;
        int $i0;
        android.util.Range $r9;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        r1 := @parameter0: android.util.Size;

        $r3 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "VendorExtender#init() must be called first");

        $r5 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        if $r5 == null goto label4;

        $r6 = staticinvoke <androidx.camera.extensions.internal.ExtensionVersion: androidx.camera.extensions.internal.Version getRuntimeVersion()>();

        $r7 = <androidx.camera.extensions.internal.Version: androidx.camera.extensions.internal.Version VERSION_1_2>;

        $i0 = virtualinvoke $r6.<androidx.camera.extensions.internal.Version: int compareTo(androidx.camera.extensions.internal.Version)>($r7);

        if $i0 < 0 goto label4;

     label1:
        $r8 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        $r9 = interfaceinvoke $r8.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: android.util.Range getEstimatedCaptureLatencyRange(android.util.Size)>(r1);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

     label4:
        return null;

        catch java.lang.NoSuchMethodError from label1 to label2 with label3;
    }

    private android.util.Size[] getOutputSizes(int)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        int i0;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        androidx.camera.core.CameraInfo $r2;
        androidx.camera.camera2.interop.Camera2CameraInfo $r3;
        android.hardware.camera2.CameraCharacteristics$Key $r4;
        java.lang.Object $r5;
        android.util.Size[] $r6;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        $r3 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: androidx.camera.camera2.interop.Camera2CameraInfo 'from'(androidx.camera.core.CameraInfo)>($r2);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r5 = virtualinvoke $r3.<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.Object getCameraCharacteristic(android.hardware.camera2.CameraCharacteristics$Key)>($r4);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r5;

        $r6 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i0);

        return $r6;
    }

    private int getPreviewOutputImageFormat()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        return 34;
    }

    private int getCaptureOutputImageFormat()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r1, $r2;
        androidx.camera.extensions.impl.CaptureProcessorImpl $r3;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        $r3 = interfaceinvoke $r2.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureProcessorImpl getCaptureProcessor()>();

        if $r3 == null goto label1;

        return 35;

     label1:
        return 256;
    }

    public java.util.List getSupportedPreviewOutputResolutions()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.core.CameraInfo $r1;
        androidx.camera.extensions.impl.PreviewExtenderImpl $r3, $r6;
        androidx.camera.extensions.internal.Version $r4, $r5;
        int $i0, i1;
        java.lang.Throwable $r7, r9;
        java.util.List r8, $r14;
        android.util.Pair[] $r10;
        android.util.Pair $r11;
        java.lang.Integer $r12;
        android.util.Size[] $r13;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "VendorExtender#init() must be called first");

        $r3 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        if $r3 == null goto label5;

        $r4 = staticinvoke <androidx.camera.extensions.internal.ExtensionVersion: androidx.camera.extensions.internal.Version getRuntimeVersion()>();

        $r5 = <androidx.camera.extensions.internal.Version: androidx.camera.extensions.internal.Version VERSION_1_1>;

        $i0 = virtualinvoke $r4.<androidx.camera.extensions.internal.Version: int compareTo(androidx.camera.extensions.internal.Version)>($r5);

        if $i0 < 0 goto label5;

     label1:
        $r6 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.PreviewExtenderImpl mPreviewExtenderImpl>;

        r8 = interfaceinvoke $r6.<androidx.camera.extensions.impl.PreviewExtenderImpl: java.util.List getSupportedResolutions()>();

        if r8 == null goto label3;

     label2:
        return r8;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

     label5:
        i1 = specialinvoke r0.<androidx.camera.extensions.internal.BasicVendorExtender: int getPreviewOutputImageFormat()>();

        $r10 = newarray (android.util.Pair)[1];

        $r11 = new android.util.Pair;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13 = specialinvoke r0.<androidx.camera.extensions.internal.BasicVendorExtender: android.util.Size[] getOutputSizes(int)>(i1);

        specialinvoke $r11.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r10[0] = $r11;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        return $r14;

        catch java.lang.NoSuchMethodError from label1 to label2 with label4;
    }

    public java.util.List getSupportedCaptureOutputResolutions()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.core.CameraInfo $r1;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r3, $r6;
        androidx.camera.extensions.internal.Version $r4, $r5;
        int $i0, i1;
        java.lang.Throwable $r7, r9;
        java.util.List r8, $r14;
        android.util.Pair[] $r10;
        android.util.Pair $r11;
        java.lang.Integer $r12;
        android.util.Size[] $r13;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "VendorExtender#init() must be called first");

        $r3 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        if $r3 == null goto label5;

        $r4 = staticinvoke <androidx.camera.extensions.internal.ExtensionVersion: androidx.camera.extensions.internal.Version getRuntimeVersion()>();

        $r5 = <androidx.camera.extensions.internal.Version: androidx.camera.extensions.internal.Version VERSION_1_1>;

        $i0 = virtualinvoke $r4.<androidx.camera.extensions.internal.Version: int compareTo(androidx.camera.extensions.internal.Version)>($r5);

        if $i0 < 0 goto label5;

     label1:
        $r6 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImageCaptureExtenderImpl>;

        r8 = interfaceinvoke $r6.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: java.util.List getSupportedResolutions()>();

        if r8 == null goto label3;

     label2:
        return r8;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

     label5:
        i1 = specialinvoke r0.<androidx.camera.extensions.internal.BasicVendorExtender: int getCaptureOutputImageFormat()>();

        $r10 = newarray (android.util.Pair)[1];

        $r11 = new android.util.Pair;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13 = specialinvoke r0.<androidx.camera.extensions.internal.BasicVendorExtender: android.util.Size[] getOutputSizes(int)>(i1);

        specialinvoke $r11.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r10[0] = $r11;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        return $r14;

        catch java.lang.NoSuchMethodError from label1 to label2 with label4;
    }

    public android.util.Size[] getSupportedYuvAnalysisResolutions()
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        androidx.camera.core.CameraInfo $r1;
        android.util.Size[] $r3;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        $r1 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "VendorExtender#init() must be called first");

        $r3 = specialinvoke r0.<androidx.camera.extensions.internal.BasicVendorExtender: android.util.Size[] getOutputSizes(int)>(35);

        return $r3;
    }

    public androidx.camera.core.impl.SessionProcessor createSessionProcessor(android.content.Context)
    {
        androidx.camera.extensions.internal.BasicVendorExtender r0;
        android.content.Context r1;
        androidx.camera.core.CameraInfo $r2;

        r0 := @this: androidx.camera.extensions.internal.BasicVendorExtender;

        r1 := @parameter0: android.content.Context;

        $r2 = r0.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "VendorExtender#init() must be called first");

        return null;
    }

