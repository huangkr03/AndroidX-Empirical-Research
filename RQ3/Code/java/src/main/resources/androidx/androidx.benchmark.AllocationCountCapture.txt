androidx.benchmark.AllocationCountCapture
<androidx.benchmark.AllocationCountCapture: java.lang.String name>
<androidx.benchmark.AllocationCountCapture: int currentPausedStarted>
<androidx.benchmark.AllocationCountCapture: int currentTotalPaused>
    public void <init>()
    {
        androidx.benchmark.AllocationCountCapture r0;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        specialinvoke r0.<androidx.benchmark.MetricCapture: void <init>()>();

        r0.<androidx.benchmark.AllocationCountCapture: java.lang.String name> = "allocationCount";

        return;
    }

    public java.lang.String getName()
    {
        androidx.benchmark.AllocationCountCapture r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        $r1 = r0.<androidx.benchmark.AllocationCountCapture: java.lang.String name>;

        return $r1;
    }

    public void captureStart(long)
    {
        androidx.benchmark.AllocationCountCapture r0;
        long l0;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        l0 := @parameter0: long;

        r0.<androidx.benchmark.AllocationCountCapture: int currentTotalPaused> = 0;

        staticinvoke <android.os.Debug: void startAllocCounting()>();

        return;
    }

    public long captureStop(long)
    {
        androidx.benchmark.AllocationCountCapture r0;
        long l0, $l4;
        int $i1, $i2, $i3;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        l0 := @parameter0: long;

        staticinvoke <android.os.Debug: void stopAllocCounting()>();

        $i1 = staticinvoke <android.os.Debug: int getGlobalAllocCount()>();

        $i2 = r0.<androidx.benchmark.AllocationCountCapture: int currentTotalPaused>;

        $i3 = $i1 - $i2;

        $l4 = (long) $i3;

        return $l4;
    }

    public void capturePaused()
    {
        androidx.benchmark.AllocationCountCapture r0;
        int $i0;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        $i0 = staticinvoke <android.os.Debug: int getGlobalAllocCount()>();

        r0.<androidx.benchmark.AllocationCountCapture: int currentPausedStarted> = $i0;

        return;
    }

    public void captureResumed()
    {
        androidx.benchmark.AllocationCountCapture r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.benchmark.AllocationCountCapture;

        $i0 = r0.<androidx.benchmark.AllocationCountCapture: int currentTotalPaused>;

        $i1 = staticinvoke <android.os.Debug: int getGlobalAllocCount()>();

        $i2 = r0.<androidx.benchmark.AllocationCountCapture: int currentPausedStarted>;

        $i3 = $i1 - $i2;

        $i4 = $i0 + $i3;

        r0.<androidx.benchmark.AllocationCountCapture: int currentTotalPaused> = $i4;

        return;
    }

