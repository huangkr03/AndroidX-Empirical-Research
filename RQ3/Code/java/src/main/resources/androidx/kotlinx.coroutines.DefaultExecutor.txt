kotlinx.coroutines.DefaultExecutor
<kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>
<kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS>
<kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>
<kotlinx.coroutines.DefaultExecutor: int debugStatus>
    static void <clinit>()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.util.concurrent.TimeUnit $r1;
        java.lang.Long $r2;
        long $l0;

        $r0 = new kotlinx.coroutines.DefaultExecutor;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void <init>()>();

        <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE> = $r0;

        staticinvoke <kotlinx.coroutines.EventLoop: void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>($r0, 0, 1, null);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("kotlinx.coroutines.DefaultExecutor.keepAlive", 1000L);

        goto label1;

     label1:
        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        <kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS> = $l0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.DefaultExecutor $r0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        specialinvoke $r0.<kotlinx.coroutines.EventLoopImplBase: void <init>()>();

        return;
    }

    private final void acknowledgeShutdownIfNeeded()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor $r0;

     label1:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label2:
        if $z0 != 0 goto label3;

        exitmonitor $r0;

        return;

     label3:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 3;

        virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void resetAll()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.Object");

        virtualinvoke $r0.<java.lang.Object: void notifyAll()>();

     label4:
        exitmonitor $r0;

        return;

     label5:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private final java.lang.Thread createThreadSync()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor $r0;

     label1:
        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label2;

        $r1 = new java.lang.Thread;

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r0, "kotlinx.coroutines.DefaultExecutor");

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = $r1;

        virtualinvoke $r1.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

     label2:
        exitmonitor $r0;

        return $r1;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private final boolean isShutDown()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        int $i0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 != 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean isShutdownRequested()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        int $i0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 == 2 goto label2;

        if $i0 != 3 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private final boolean notifyStartup()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor $r0;

     label1:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label2:
        if $z0 == 0 goto label3;

        exitmonitor $r0;

        return 0;

     label3:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.Object");

        virtualinvoke $r0.<java.lang.Object: void notifyAll()>();

     label4:
        exitmonitor $r0;

        return 1;

     label5:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private final void shutdownError()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.util.concurrent.RejectedExecutionException $r1;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r1.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("DefaultExecutor was shut down. This error indicates that Dispatchers.shutdown() was invoked prior to completion of exiting coroutines, leaving coroutines in incomplete state. Please refer to Dispatchers.shutdown documentation for more details");

        throw $r1;
    }

    public void enqueue(java.lang.Runnable)
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.lang.Runnable $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "task");

        $z0 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutDown()>();

        if $z0 == 0 goto label1;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void shutdownError()>();

     label1:
        specialinvoke $r0.<kotlinx.coroutines.EventLoopImplBase: void enqueue(java.lang.Runnable)>($r1);

        return;
    }

    protected java.lang.Thread getThread()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.lang.Thread $r1;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label1;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>();

     label1:
        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.DisposableHandle $r3;
        long $l0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "context");

        $r3 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DisposableHandle scheduleInvokeOnTimeout(long,java.lang.Runnable)>($l0, $r1);

        return $r3;
    }

    protected void reschedule(long, kotlinx.coroutines.EventLoopImplBase$DelayedTask)
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r1;
        long $l0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.EventLoopImplBase$DelayedTask;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delayedTask");

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void shutdownError()>();

        return;
    }

    public void run()
    {
        kotlinx.coroutines.DefaultExecutor $r0;
        kotlinx.coroutines.ThreadLocalEventLoop $r1;
        kotlinx.coroutines.AbstractTimeSource $r2;
        boolean $z0;
        long $l0, $l1, $l2;
        byte $b3;
        kotlin.Unit $r3;
        java.lang.Throwable $r4;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        virtualinvoke $r1.<kotlinx.coroutines.ThreadLocalEventLoop: void setEventLoop$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(kotlinx.coroutines.EventLoop)>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label01;

        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void registerTimeLoopThread()>();

     label01:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean notifyStartup()>();

     label02:
        if $z0 != 0 goto label04;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label03;

        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label03:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label30;

        virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label04:
        $l0 = 9223372036854775807L;

     label05:
        staticinvoke <java.lang.Thread: boolean interrupted()>();

     label06:
        $l1 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: long processNextEvent()>();

     label07:
        $l2 = $l1;

        $b3 = $l1 cmp 9223372036854775807L;

        if $b3 != 0 goto label15;

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label10;

     label08:
        $l2 = virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label09:
        goto label11;

     label10:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label11:
        $b3 = $l0 cmp 9223372036854775807L;

        if $b3 != 0 goto label12;

        $l0 = <kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS>;

        $l0 = $l0 + $l2;

        goto label12;

     label12:
        $l2 = $l0 - $l2;

        $b3 = $l2 cmp 0L;

        if $b3 > 0 goto label14;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label13;

        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label13:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label30;

        virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label14:
        $l2 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtMost(long,long)>($l1, $l2);

        goto label16;

     label15:
        $l0 = 9223372036854775807L;

     label16:
        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label05;

     label17:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label18:
        if $z0 == 0 goto label20;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label19;

        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label19:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label30;

        virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label20:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label23;

     label21:
        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void parkNanos(java.lang.Object,long)>($r0, $l2);

     label22:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label24;

     label23:
        $r3 = null;

     label24:
        if $r3 != null goto label05;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>($r0, $l2);

        goto label05;

     label25:
        $r4 := @caughtexception;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke $r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 == null goto label26;

        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label26:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 == 0 goto label27;

        goto label28;

     label27:
        virtualinvoke $r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

     label28:
        goto label29;

     label29:
        throw $r4;

     label30:
        return;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
    }

    public void shutdown()
    {
        kotlinx.coroutines.DefaultExecutor $r0;

        $r0 := @this: kotlinx.coroutines.DefaultExecutor;

        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 4;

        specialinvoke $r0.<kotlinx.coroutines.EventLoopImplBase: void shutdown()>();

        return;
    }

