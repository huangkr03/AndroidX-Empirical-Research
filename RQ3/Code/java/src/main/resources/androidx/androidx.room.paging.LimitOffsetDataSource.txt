androidx.room.paging.LimitOffsetDataSource
<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>
<androidx.room.paging.LimitOffsetDataSource: java.lang.String mCountQuery>
<androidx.room.paging.LimitOffsetDataSource: java.lang.String mLimitOffsetQuery>
<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>
<androidx.room.paging.LimitOffsetDataSource: androidx.room.InvalidationTracker$Observer mObserver>
<androidx.room.paging.LimitOffsetDataSource: boolean mInTransaction>
<androidx.room.paging.LimitOffsetDataSource: java.util.concurrent.atomic.AtomicBoolean mRegisteredObserver>
    protected transient void <init>(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, boolean, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomDatabase r1;
        androidx.sqlite.db.SupportSQLiteQuery r2;
        boolean z0;
        java.lang.String[] r3;
        androidx.room.RoomSQLiteQuery $r4;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String[];

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)>(r2);

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void <init>(androidx.room.RoomDatabase,androidx.room.RoomSQLiteQuery,boolean,java.lang.String[])>(r1, $r4, z0, r3);

        return;
    }

    protected transient void <init>(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, boolean, boolean, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomDatabase r1;
        androidx.sqlite.db.SupportSQLiteQuery r2;
        boolean z0, z1;
        java.lang.String[] r3;
        androidx.room.RoomSQLiteQuery $r4;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String[];

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)>(r2);

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void <init>(androidx.room.RoomDatabase,androidx.room.RoomSQLiteQuery,boolean,boolean,java.lang.String[])>(r1, $r4, z0, z1, r3);

        return;
    }

    protected transient void <init>(androidx.room.RoomDatabase, androidx.room.RoomSQLiteQuery, boolean, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomDatabase r1;
        androidx.room.RoomSQLiteQuery r2;
        boolean z0;
        java.lang.String[] r3;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: androidx.room.RoomSQLiteQuery;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String[];

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void <init>(androidx.room.RoomDatabase,androidx.room.RoomSQLiteQuery,boolean,boolean,java.lang.String[])>(r1, r2, z0, 1, r3);

        return;
    }

    protected transient void <init>(androidx.room.RoomDatabase, androidx.room.RoomSQLiteQuery, boolean, boolean, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomDatabase r1;
        androidx.room.RoomSQLiteQuery r2, $r7, $r14;
        boolean z0, z1;
        java.lang.String[] r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r12, $r13, $r16, $r17;
        java.lang.String $r8, $r11, $r15, $r18;
        androidx.room.paging.LimitOffsetDataSource$1 $r19;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: androidx.room.RoomSQLiteQuery;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String[];

        specialinvoke r0.<androidx.paging.PositionalDataSource: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.room.paging.LimitOffsetDataSource: java.util.concurrent.atomic.AtomicBoolean mRegisteredObserver> = $r4;

        r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb> = r1;

        r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery> = r2;

        r0.<androidx.room.paging.LimitOffsetDataSource: boolean mInTransaction> = z0;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT COUNT(*) FROM ( ");

        $r7 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        $r8 = virtualinvoke $r7.<androidx.room.RoomSQLiteQuery: java.lang.String getSql()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<androidx.room.paging.LimitOffsetDataSource: java.lang.String mCountQuery> = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * FROM ( ");

        $r14 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        $r15 = virtualinvoke $r14.<androidx.room.RoomSQLiteQuery: java.lang.String getSql()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) LIMIT ? OFFSET ?");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<androidx.room.paging.LimitOffsetDataSource: java.lang.String mLimitOffsetQuery> = $r18;

        $r19 = new androidx.room.paging.LimitOffsetDataSource$1;

        specialinvoke $r19.<androidx.room.paging.LimitOffsetDataSource$1: void <init>(androidx.room.paging.LimitOffsetDataSource,java.lang.String[])>(r0, r3);

        r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.InvalidationTracker$Observer mObserver> = $r19;

        if z1 == 0 goto label1;

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void registerObserverIfNecessary()>();

     label1:
        return;
    }

    private void registerObserverIfNecessary()
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.room.RoomDatabase $r2;
        androidx.room.InvalidationTracker $r3;
        androidx.room.InvalidationTracker$Observer $r4;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        $r1 = r0.<androidx.room.paging.LimitOffsetDataSource: java.util.concurrent.atomic.AtomicBoolean mRegisteredObserver>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r4 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.InvalidationTracker$Observer mObserver>;

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void addWeakObserver(androidx.room.InvalidationTracker$Observer)>($r4);

     label1:
        return;
    }

    public int countItems()
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomSQLiteQuery r1, $r4, $r6;
        android.database.Cursor r2;
        java.lang.Throwable r3, $r8;
        java.lang.String $r5;
        int $i0, i1;
        androidx.room.RoomDatabase $r7;
        boolean $z0;
        byte b2;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void registerObserverIfNecessary()>();

        $r5 = r0.<androidx.room.paging.LimitOffsetDataSource: java.lang.String mCountQuery>;

        $r4 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        $i0 = virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r5, $i0);

        $r6 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)>($r6);

        $r7 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        r2 = virtualinvoke $r7.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

     label1:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        i1 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(0);

     label2:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return i1;

     label3:
        b2 = 0;

     label4:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return b2;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

     label6:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isInvalid()
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.room.RoomDatabase $r1;
        androidx.room.InvalidationTracker $r2;
        boolean $z0;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void registerObserverIfNecessary()>();

        $r1 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        $r2 = virtualinvoke $r1.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r2.<androidx.room.InvalidationTracker: void refreshVersionsSync()>();

        $z0 = specialinvoke r0.<androidx.paging.PositionalDataSource: boolean isInvalid()>();

        return $z0;
    }

<androidx.room.paging.LimitOffsetDataSource: java.util.List convertRows(android.database.Cursor)>
    public void loadInitial(androidx.paging.PositionalDataSource$LoadInitialParams, androidx.paging.PositionalDataSource$LoadInitialCallback)
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.paging.PositionalDataSource$LoadInitialParams r1;
        androidx.paging.PositionalDataSource$LoadInitialCallback r2;
        int i0, i1, i2;
        java.util.List r3, r11;
        java.lang.Throwable r4, $r9;
        androidx.room.RoomDatabase $r5, $r6, $r7, $r8, $r10;
        androidx.room.RoomSQLiteQuery r12;
        android.database.Cursor r13;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.paging.PositionalDataSource$LoadInitialParams;

        r2 := @parameter1: androidx.paging.PositionalDataSource$LoadInitialCallback;

        specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: void registerObserverIfNecessary()>();

        r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        i2 = 0;

        r12 = null;

        r13 = null;

        $r5 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r5.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        i0 = virtualinvoke r0.<androidx.room.paging.LimitOffsetDataSource: int countItems()>();

        if i0 == 0 goto label2;

        i2 = staticinvoke <androidx.room.paging.LimitOffsetDataSource: int computeInitialLoadPosition(androidx.paging.PositionalDataSource$LoadInitialParams,int)>(r1, i0);

        i1 = staticinvoke <androidx.room.paging.LimitOffsetDataSource: int computeInitialLoadSize(androidx.paging.PositionalDataSource$LoadInitialParams,int,int)>(r1, i2, i0);

        r12 = specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery getSQLiteQuery(int,int)>(i2, i1);

        $r7 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        r13 = virtualinvoke $r7.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r12);

        r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetDataSource: java.util.List convertRows(android.database.Cursor)>(r13);

        $r8 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r8.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

        r11 = r3;

     label2:
        if r13 == null goto label3;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label3:
        $r6 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r6.<androidx.room.RoomDatabase: void endTransaction()>();

        if r12 == null goto label8;

        virtualinvoke r12.<androidx.room.RoomSQLiteQuery: void release()>();

        goto label8;

     label4:
        $r9 := @caughtexception;

        r4 = $r9;

     label5:
        if r13 == null goto label6;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label6:
        $r10 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r10.<androidx.room.RoomDatabase: void endTransaction()>();

        if r12 == null goto label7;

        virtualinvoke r12.<androidx.room.RoomSQLiteQuery: void release()>();

     label7:
        throw r4;

     label8:
        virtualinvoke r2.<androidx.paging.PositionalDataSource$LoadInitialCallback: void onResult(java.util.List,int,int)>(r11, i2, i0);

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void loadRange(androidx.paging.PositionalDataSource$LoadRangeParams, androidx.paging.PositionalDataSource$LoadRangeCallback)
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        androidx.paging.PositionalDataSource$LoadRangeParams r1;
        androidx.paging.PositionalDataSource$LoadRangeCallback r2;
        int $i0, $i1;
        java.util.List $r3;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        r1 := @parameter0: androidx.paging.PositionalDataSource$LoadRangeParams;

        r2 := @parameter1: androidx.paging.PositionalDataSource$LoadRangeCallback;

        $i1 = r1.<androidx.paging.PositionalDataSource$LoadRangeParams: int startPosition>;

        $i0 = r1.<androidx.paging.PositionalDataSource$LoadRangeParams: int loadSize>;

        $r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetDataSource: java.util.List loadRange(int,int)>($i1, $i0);

        virtualinvoke r2.<androidx.paging.PositionalDataSource$LoadRangeCallback: void onResult(java.util.List)>($r3);

        return;
    }

    public java.util.List loadRange(int, int)
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        int i0, i1;
        androidx.room.RoomSQLiteQuery r1;
        java.util.List r2, r14, r16;
        java.lang.Throwable r3, r4, $r10, $r11;
        boolean $z0;
        androidx.room.RoomDatabase $r5, $r6, $r7, $r8, $r9, $r12;
        android.database.Cursor r13, r15;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery getSQLiteQuery(int,int)>(i0, i1);

        $z0 = r0.<androidx.room.paging.LimitOffsetDataSource: boolean mInTransaction>;

        if $z0 == 0 goto label07;

        $r6 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r6.<androidx.room.RoomDatabase: void beginTransaction()>();

        r13 = null;

     label01:
        $r7 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        r13 = virtualinvoke $r7.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        r14 = virtualinvoke r0.<androidx.room.paging.LimitOffsetDataSource: java.util.List convertRows(android.database.Cursor)>(r13);

        $r8 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r8.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

        r2 = r14;

     label02:
        if r13 == null goto label03;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label03:
        $r9 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r9.<androidx.room.RoomDatabase: void endTransaction()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r2;

     label04:
        $r11 := @caughtexception;

        r3 = $r11;

     label05:
        if r13 == null goto label06;

        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label06:
        $r12 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        virtualinvoke $r12.<androidx.room.RoomDatabase: void endTransaction()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r3;

     label07:
        $r5 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomDatabase mDb>;

        r15 = virtualinvoke $r5.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

     label08:
        r16 = virtualinvoke r0.<androidx.room.paging.LimitOffsetDataSource: java.util.List convertRows(android.database.Cursor)>(r15);

     label09:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r16;

     label10:
        $r10 := @caughtexception;

        r4 = $r10;

     label11:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private androidx.room.RoomSQLiteQuery getSQLiteQuery(int, int)
    {
        androidx.room.paging.LimitOffsetDataSource r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7;
        androidx.room.RoomSQLiteQuery r1, $r2, $r4;
        java.lang.String $r3;
        long $l5, $l8;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<androidx.room.paging.LimitOffsetDataSource: java.lang.String mLimitOffsetQuery>;

        $r2 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        $i2 = virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        $i3 = $i2 + 2;

        r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r3, $i3);

        $r4 = r0.<androidx.room.paging.LimitOffsetDataSource: androidx.room.RoomSQLiteQuery mSourceQuery>;

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)>($r4);

        $i4 = virtualinvoke r1.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        $i6 = $i4 - 1;

        $l5 = (long) i1;

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>($i6, $l5);

        $i7 = virtualinvoke r1.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        $l8 = (long) i0;

        virtualinvoke r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>($i7, $l8);

        return r1;
    }

androidx.room.paging.LimitOffsetDataSource$1
<androidx.room.paging.LimitOffsetDataSource$1: androidx.room.paging.LimitOffsetDataSource this$0>
    void <init>(androidx.room.paging.LimitOffsetDataSource, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetDataSource$1 r0;
        androidx.room.paging.LimitOffsetDataSource r1;
        java.lang.String[] r2;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource$1;

        r1 := @parameter0: androidx.room.paging.LimitOffsetDataSource;

        r2 := @parameter1: java.lang.String[];

        r0.<androidx.room.paging.LimitOffsetDataSource$1: androidx.room.paging.LimitOffsetDataSource this$0> = r1;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>(r2);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.paging.LimitOffsetDataSource$1 r0;
        java.util.Set r1;
        androidx.room.paging.LimitOffsetDataSource $r2;

        r0 := @this: androidx.room.paging.LimitOffsetDataSource$1;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<androidx.room.paging.LimitOffsetDataSource$1: androidx.room.paging.LimitOffsetDataSource this$0>;

        virtualinvoke $r2.<androidx.room.paging.LimitOffsetDataSource: void invalidate()>();

        return;
    }

