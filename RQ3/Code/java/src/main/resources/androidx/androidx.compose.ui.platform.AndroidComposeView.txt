androidx.compose.ui.platform.AndroidComposeView
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$Companion Companion>
<androidx.compose.ui.platform.AndroidComposeView: long lastDownPointerPosition>
<androidx.compose.ui.platform.AndroidComposeView: boolean superclassInitComplete>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNodeDrawScope sharedDrawScope>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density density>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsModifierCore semanticsModifier>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.key.KeyInputModifier keyInputModifier>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.Modifier rotaryInputModifier>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.graphics.CanvasHolder canvasHolder>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode root>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.RootForTest rootForTest>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsOwner semanticsOwner>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AutofillTree autofillTree>
<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>
<androidx.compose.ui.platform.AndroidComposeView: java.util.List postponedDirtyLayers>
<androidx.compose.ui.platform.AndroidComposeView: boolean isDrawingContent>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.MotionEventAdapter motionEventAdapter>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor>
<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 configurationChangeObserver>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>
<androidx.compose.ui.platform.AndroidComposeView: boolean observationClearRequested>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidClipboardManager clipboardManager>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidAccessibilityManager accessibilityManager>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver snapshotObserver>
<androidx.compose.ui.platform.AndroidComposeView: boolean showLayoutBounds>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Constraints onMeasureConstraints>
<androidx.compose.ui.platform.AndroidComposeView: boolean wasMeasuredWithMultipleConstraints>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.ViewConfiguration viewConfiguration>
<androidx.compose.ui.platform.AndroidComposeView: long globalPosition>
<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>
<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>
<androidx.compose.ui.platform.AndroidComposeView: float[] windowToViewMatrix>
<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime>
<androidx.compose.ui.platform.AndroidComposeView: boolean forceUseMatrixCache>
<androidx.compose.ui.platform.AndroidComposeView: long windowPosition>
<androidx.compose.ui.platform.AndroidComposeView: boolean isRenderNodeCompatible>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState viewTreeOwners$delegate>
<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 onViewTreeOwnersAvailable>
<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnGlobalLayoutListener globalLayoutListener>
<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnScrollChangedListener scrollChangedListener>
<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnTouchModeChangeListener touchModeChangeListener>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputService textInputService>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.font.Font$ResourceLoader fontLoader>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState fontFamilyResolver$delegate>
<androidx.compose.ui.platform.AndroidComposeView: int currentFontWeightAdjustment>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState layoutDirection$delegate>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.InputModeManagerImpl _inputModeManager>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.modifier.ModifierLocalManager modifierLocalManager>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.TextToolbar textToolbar>
<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>
<androidx.compose.ui.platform.AndroidComposeView: long relayoutTime>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WeakCache layerCache>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 resendMotionEventRunnable>
<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>
<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived>
<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function0 resendMotionEventOnLayout>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.CalculateMatrixToWindow matrixToWindow>
<androidx.compose.ui.platform.AndroidComposeView: boolean keyboardModifiersRequireUpdate>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon desiredPointerIcon>
<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIconService pointerIconService>
<androidx.compose.ui.platform.AndroidComposeView: java.lang.String FocusTag>
<androidx.compose.ui.platform.AndroidComposeView: int MaximumLayerCacheSize>
<androidx.compose.ui.platform.AndroidComposeView: java.lang.Class systemPropertiesClass>
<androidx.compose.ui.platform.AndroidComposeView: java.lang.reflect.Method getBooleanMethod>
    public void <init>(android.content.Context)
    {
        androidx.compose.ui.platform.AndroidComposeView r0, r2;
        android.content.Context r1;
        androidx.compose.ui.geometry.Offset$Companion $r3, $r60;
        long $l0, $l1, $l2;
        androidx.compose.ui.node.LayoutNodeDrawScope $r4;
        androidx.compose.ui.unit.Density $r5, $r23;
        androidx.compose.ui.semantics.SemanticsModifierCore $r6, $r24;
        androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 $r7;
        kotlin.jvm.functions.Function1 $r8, $r13, $r16, $r47, $r52, $r67, $r88, $r106;
        androidx.compose.ui.focus.FocusManagerImpl $r9, $r30;
        androidx.compose.ui.platform.WindowInfoImpl $r10;
        androidx.compose.ui.input.key.KeyInputModifier $r11, $r33;
        androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1 $r12;
        androidx.compose.ui.Modifier$Companion $r14, $r26;
        androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 $r15;
        androidx.compose.ui.Modifier $r17, $r18, $r25, $r27, $r28, $r29, $r31, $r32, $r34, $r35;
        androidx.compose.ui.graphics.CanvasHolder $r19;
        androidx.compose.ui.node.LayoutNode $r20, $r38, $r45, $r54, $r107, r124;
        androidx.compose.ui.layout.RootMeasurePolicy $r21;
        androidx.compose.ui.layout.MeasurePolicy $r22;
        androidx.compose.ui.node.RootForTest $r36;
        androidx.compose.ui.semantics.SemanticsOwner $r37;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r39, $r102;
        androidx.compose.ui.autofill.AutofillTree $r40, $r121;
        java.util.ArrayList $r41;
        java.util.List $r42;
        androidx.compose.ui.input.pointer.MotionEventAdapter $r43;
        androidx.compose.ui.input.pointer.PointerInputEventProcessor $r44;
        androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 $r46;
        boolean $z0, $z1;
        androidx.compose.ui.platform.AndroidClipboardManager $r48;
        androidx.compose.ui.platform.AndroidAccessibilityManager $r49;
        androidx.compose.ui.node.OwnerSnapshotObserver $r50;
        androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1 $r51;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r53;
        androidx.compose.ui.platform.AndroidViewConfiguration $r55;
        android.view.ViewConfiguration $r56;
        androidx.compose.ui.platform.ViewConfiguration $r57;
        float[] $r58, $r59;
        androidx.compose.runtime.MutableState $r61, $r75, $r81;
        android.view.ViewTreeObserver$OnGlobalLayoutListener $r62;
        android.view.ViewTreeObserver$OnScrollChangedListener $r63;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r64;
        androidx.compose.ui.text.input.TextInputServiceAndroid $r65, $r68;
        android.view.View $r66, $r83, $r92, $r104, $r111, $r114, $r120;
        java.lang.Object $r69;
        androidx.compose.ui.text.input.TextInputService $r70;
        androidx.compose.ui.platform.AndroidFontResourceLoader $r71;
        androidx.compose.ui.text.font.Font$ResourceLoader $r72;
        androidx.compose.ui.text.font.FontFamily$Resolver $r73;
        androidx.compose.runtime.SnapshotMutationPolicy $r74;
        android.content.res.Resources $r76, $r78;
        android.content.res.Configuration $r77, $r79;
        int $i3, $i4, $i5, $i6, $i7;
        androidx.compose.ui.unit.LayoutDirection $r80;
        androidx.compose.ui.hapticfeedback.PlatformHapticFeedback $r82;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r84;
        androidx.compose.ui.input.InputModeManagerImpl $r85;
        androidx.compose.ui.input.InputMode$Companion $r86, $r118;
        androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1 $r87;
        androidx.compose.ui.modifier.ModifierLocalManager $r89;
        androidx.compose.ui.node.Owner $r90, $r108;
        androidx.compose.ui.platform.AndroidTextToolbar $r91;
        androidx.compose.ui.platform.TextToolbar $r93;
        androidx.compose.ui.platform.WeakCache $r94;
        androidx.compose.runtime.collection.MutableVector $r95;
        kotlin.jvm.functions.Function0[] $r96;
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 $r97;
        java.lang.Runnable $r98;
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1 $r99;
        kotlin.jvm.functions.Function0 $r100;
        androidx.compose.ui.platform.CalculateMatrixToWindowApi21 $r101;
        androidx.core.view.AccessibilityDelegateCompat $r103;
        androidx.compose.ui.platform.ViewRootForTest$Companion $r105;
        androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1 $r109;
        androidx.compose.ui.input.pointer.PointerIconService $r110;
        androidx.compose.ui.platform.AndroidComposeViewForceDarkModeQ $r112;
        androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsO $r115;
        androidx.compose.ui.platform.CalculateMatrixToWindowApi29 $r116;
        androidx.compose.ui.autofill.AndroidAutofill $r125;
        int[] $r126;
        byte b8;
        androidx.compose.ui.platform.CalculateMatrixToWindow $r127;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context)>(r1);

        $r3 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l0 = virtualinvoke $r3.<androidx.compose.ui.geometry.Offset$Companion: long getUnspecified-F1C5BW0()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastDownPointerPosition> = $l0;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean superclassInitComplete> = 1;

        $r4 = new androidx.compose.ui.node.LayoutNodeDrawScope;

        specialinvoke $r4.<androidx.compose.ui.node.LayoutNodeDrawScope: void <init>(androidx.compose.ui.graphics.drawscope.CanvasDrawScope,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNodeDrawScope sharedDrawScope> = $r4;

        $r5 = staticinvoke <androidx.compose.ui.unit.AndroidDensity_androidKt: androidx.compose.ui.unit.Density Density(android.content.Context)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density density> = $r5;

        $r6 = new androidx.compose.ui.semantics.SemanticsModifierCore;

        $r7 = <androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        specialinvoke $r6.<androidx.compose.ui.semantics.SemanticsModifierCore: void <init>(boolean,boolean,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, $r8, null, 8, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsModifierCore semanticsModifier> = $r6;

        $r9 = new androidx.compose.ui.focus.FocusManagerImpl;

        specialinvoke $r9.<androidx.compose.ui.focus.FocusManagerImpl: void <init>(androidx.compose.ui.focus.FocusModifier,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager> = $r9;

        $r10 = new androidx.compose.ui.platform.WindowInfoImpl;

        specialinvoke $r10.<androidx.compose.ui.platform.WindowInfoImpl: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo> = $r10;

        $r11 = new androidx.compose.ui.input.key.KeyInputModifier;

        $r12 = new androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1;

        specialinvoke $r12.<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        $r13 = (kotlin.jvm.functions.Function1) $r12;

        specialinvoke $r11.<androidx.compose.ui.input.key.KeyInputModifier: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r13, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.key.KeyInputModifier keyInputModifier> = $r11;

        $r14 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r17 = (androidx.compose.ui.Modifier) $r14;

        $r15 = <androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 INSTANCE>;

        $r16 = (kotlin.jvm.functions.Function1) $r15;

        $r18 = staticinvoke <androidx.compose.ui.input.rotary.RotaryInputModifierKt: androidx.compose.ui.Modifier onRotaryScrollEvent(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r17, $r16);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.Modifier rotaryInputModifier> = $r18;

        $r19 = new androidx.compose.ui.graphics.CanvasHolder;

        specialinvoke $r19.<androidx.compose.ui.graphics.CanvasHolder: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.graphics.CanvasHolder canvasHolder> = $r19;

        $r20 = new androidx.compose.ui.node.LayoutNode;

        specialinvoke $r20.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 3, null);

        r124 = $r20;

        r2 = r0;

        $r21 = <androidx.compose.ui.layout.RootMeasurePolicy: androidx.compose.ui.layout.RootMeasurePolicy INSTANCE>;

        $r22 = (androidx.compose.ui.layout.MeasurePolicy) $r21;

        virtualinvoke r124.<androidx.compose.ui.node.LayoutNode: void setMeasurePolicy(androidx.compose.ui.layout.MeasurePolicy)>($r22);

        $r23 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density getDensity()>();

        virtualinvoke r124.<androidx.compose.ui.node.LayoutNode: void setDensity(androidx.compose.ui.unit.Density)>($r23);

        $r26 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r24 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsModifierCore semanticsModifier>;

        $r25 = (androidx.compose.ui.Modifier) $r24;

        $r27 = virtualinvoke $r26.<androidx.compose.ui.Modifier$Companion: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r25);

        $r28 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.Modifier rotaryInputModifier>;

        $r29 = interfaceinvoke $r27.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r28);

        $r30 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        $r31 = virtualinvoke $r30.<androidx.compose.ui.focus.FocusManagerImpl: androidx.compose.ui.Modifier getModifier()>();

        $r32 = interfaceinvoke $r29.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r31);

        $r33 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.key.KeyInputModifier keyInputModifier>;

        $r34 = (androidx.compose.ui.Modifier) $r33;

        $r35 = interfaceinvoke $r32.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r34);

        virtualinvoke r124.<androidx.compose.ui.node.LayoutNode: void setModifier(androidx.compose.ui.Modifier)>($r35);

        r2.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode root> = $r20;

        $r36 = (androidx.compose.ui.node.RootForTest) r0;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.RootForTest rootForTest> = $r36;

        $r37 = new androidx.compose.ui.semantics.SemanticsOwner;

        $r38 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke $r37.<androidx.compose.ui.semantics.SemanticsOwner: void <init>(androidx.compose.ui.node.LayoutNode)>($r38);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsOwner semanticsOwner> = $r37;

        $r39 = new androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat;

        specialinvoke $r39.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate> = $r39;

        $r40 = new androidx.compose.ui.autofill.AutofillTree;

        specialinvoke $r40.<androidx.compose.ui.autofill.AutofillTree: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AutofillTree autofillTree> = $r40;

        $r41 = new java.util.ArrayList;

        specialinvoke $r41.<java.util.ArrayList: void <init>()>();

        $r42 = (java.util.List) $r41;

        r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers> = $r42;

        $r43 = new androidx.compose.ui.input.pointer.MotionEventAdapter;

        specialinvoke $r43.<androidx.compose.ui.input.pointer.MotionEventAdapter: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.MotionEventAdapter motionEventAdapter> = $r43;

        $r44 = new androidx.compose.ui.input.pointer.PointerInputEventProcessor;

        $r45 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke $r44.<androidx.compose.ui.input.pointer.PointerInputEventProcessor: void <init>(androidx.compose.ui.node.LayoutNode)>($r45);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor> = $r44;

        $r46 = <androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 INSTANCE>;

        $r47 = (kotlin.jvm.functions.Function1) $r46;

        r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 configurationChangeObserver> = $r47;

        $z0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean autofillSupported()>();

        if $z0 == 0 goto label1;

        $r125 = new androidx.compose.ui.autofill.AndroidAutofill;

        $r120 = (android.view.View) r0;

        $r121 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AutofillTree getAutofillTree()>();

        specialinvoke $r125.<androidx.compose.ui.autofill.AndroidAutofill: void <init>(android.view.View,androidx.compose.ui.autofill.AutofillTree)>($r120, $r121);

        goto label2;

     label1:
        $r125 = null;

     label2:
        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill> = $r125;

        $r48 = new androidx.compose.ui.platform.AndroidClipboardManager;

        specialinvoke $r48.<androidx.compose.ui.platform.AndroidClipboardManager: void <init>(android.content.Context)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidClipboardManager clipboardManager> = $r48;

        $r49 = new androidx.compose.ui.platform.AndroidAccessibilityManager;

        specialinvoke $r49.<androidx.compose.ui.platform.AndroidAccessibilityManager: void <init>(android.content.Context)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidAccessibilityManager accessibilityManager> = $r49;

        $r50 = new androidx.compose.ui.node.OwnerSnapshotObserver;

        $r51 = new androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1;

        specialinvoke $r51.<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        $r52 = (kotlin.jvm.functions.Function1) $r51;

        specialinvoke $r50.<androidx.compose.ui.node.OwnerSnapshotObserver: void <init>(kotlin.jvm.functions.Function1)>($r52);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver snapshotObserver> = $r50;

        $r53 = new androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $r54 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke $r53.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void <init>(androidx.compose.ui.node.LayoutNode)>($r54);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate> = $r53;

        $r55 = new androidx.compose.ui.platform.AndroidViewConfiguration;

        $r56 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r56, "get(context)");

        specialinvoke $r55.<androidx.compose.ui.platform.AndroidViewConfiguration: void <init>(android.view.ViewConfiguration)>($r56);

        $r57 = (androidx.compose.ui.platform.ViewConfiguration) $r55;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.ViewConfiguration viewConfiguration> = $r57;

        $l1 = staticinvoke <androidx.compose.ui.unit.IntOffsetKt: long IntOffset(int,int)>(2147483647, 2147483647);

        r0.<androidx.compose.ui.platform.AndroidComposeView: long globalPosition> = $l1;

        $r126 = newarray (int)[2];

        $r126[0] = 0;

        $r126[1] = 0;

        r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray> = $r126;

        $r58 = staticinvoke <androidx.compose.ui.graphics.Matrix: float[] constructor-impl$default(float[],int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix> = $r58;

        $r59 = staticinvoke <androidx.compose.ui.graphics.Matrix: float[] constructor-impl$default(float[],int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: float[] windowToViewMatrix> = $r59;

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime> = -1L;

        $r60 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l2 = virtualinvoke $r60.<androidx.compose.ui.geometry.Offset$Companion: long getInfinite-F1C5BW0()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition> = $l2;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isRenderNodeCompatible> = 1;

        $r61 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState viewTreeOwners$delegate> = $r61;

        $r62 = dynamicinvoke "onGlobalLayout" <android.view.ViewTreeObserver$OnGlobalLayoutListener (androidx.compose.ui.platform.AndroidComposeView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.platform.AndroidComposeView: void globalLayoutListener$lambda-1(androidx.compose.ui.platform.AndroidComposeView)>, methodtype: void __METHODTYPE__());

        r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnGlobalLayoutListener globalLayoutListener> = $r62;

        $r63 = dynamicinvoke "onScrollChanged" <android.view.ViewTreeObserver$OnScrollChangedListener (androidx.compose.ui.platform.AndroidComposeView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.platform.AndroidComposeView: void scrollChangedListener$lambda-2(androidx.compose.ui.platform.AndroidComposeView)>, methodtype: void __METHODTYPE__());

        r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnScrollChangedListener scrollChangedListener> = $r63;

        $r64 = dynamicinvoke "onTouchModeChanged" <android.view.ViewTreeObserver$OnTouchModeChangeListener (androidx.compose.ui.platform.AndroidComposeView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(boolean), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.platform.AndroidComposeView: void touchModeChangeListener$lambda-3(androidx.compose.ui.platform.AndroidComposeView,boolean)>, methodtype: void __METHODTYPE__(boolean));

        r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnTouchModeChangeListener touchModeChangeListener> = $r64;

        $r65 = new androidx.compose.ui.text.input.TextInputServiceAndroid;

        $r66 = (android.view.View) r0;

        specialinvoke $r65.<androidx.compose.ui.text.input.TextInputServiceAndroid: void <init>(android.view.View)>($r66);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid> = $r65;

        $r67 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView_androidKt: kotlin.jvm.functions.Function1 getTextInputServiceFactory()>();

        $r68 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid>;

        $r69 = interfaceinvoke $r67.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r68);

        $r70 = (androidx.compose.ui.text.input.TextInputService) $r69;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputService textInputService> = $r70;

        $r71 = new androidx.compose.ui.platform.AndroidFontResourceLoader;

        specialinvoke $r71.<androidx.compose.ui.platform.AndroidFontResourceLoader: void <init>(android.content.Context)>(r1);

        $r72 = (androidx.compose.ui.text.font.Font$ResourceLoader) $r71;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.font.Font$ResourceLoader fontLoader> = $r72;

        $r73 = staticinvoke <androidx.compose.ui.text.font.FontFamilyResolver_androidKt: androidx.compose.ui.text.font.FontFamily$Resolver createFontFamilyResolver(android.content.Context)>(r1);

        $r74 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.SnapshotMutationPolicy referentialEqualityPolicy()>();

        $r75 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy)>($r73, $r74);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState fontFamilyResolver$delegate> = $r75;

        $r76 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r77 = virtualinvoke $r76.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r77, "context.resources.configuration");

        $i3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getFontWeightAdjustmentCompat(android.content.res.Configuration)>($r77);

        r0.<androidx.compose.ui.platform.AndroidComposeView: int currentFontWeightAdjustment> = $i3;

        $r78 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r79 = virtualinvoke $r78.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r79, "context.resources.configuration");

        $r80 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView_androidKt: androidx.compose.ui.unit.LayoutDirection getLocaleLayoutDirection(android.content.res.Configuration)>($r79);

        $r81 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r80, null, 2, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState layoutDirection$delegate> = $r81;

        $r82 = new androidx.compose.ui.hapticfeedback.PlatformHapticFeedback;

        $r83 = (android.view.View) r0;

        specialinvoke $r82.<androidx.compose.ui.hapticfeedback.PlatformHapticFeedback: void <init>(android.view.View)>($r83);

        $r84 = (androidx.compose.ui.hapticfeedback.HapticFeedback) $r82;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack> = $r84;

        $r85 = new androidx.compose.ui.input.InputModeManagerImpl;

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isInTouchMode()>();

        if $z1 == 0 goto label3;

        $r118 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i7 = virtualinvoke $r118.<androidx.compose.ui.input.InputMode$Companion: int getTouch-aOaMEAU()>();

        goto label4;

     label3:
        $r86 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i7 = virtualinvoke $r86.<androidx.compose.ui.input.InputMode$Companion: int getKeyboard-aOaMEAU()>();

     label4:
        $r87 = new androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1;

        specialinvoke $r87.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        $r88 = (kotlin.jvm.functions.Function1) $r87;

        specialinvoke $r85.<androidx.compose.ui.input.InputModeManagerImpl: void <init>(int,kotlin.jvm.functions.Function1,kotlin.jvm.internal.DefaultConstructorMarker)>($i7, $r88, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.InputModeManagerImpl _inputModeManager> = $r85;

        $r89 = new androidx.compose.ui.modifier.ModifierLocalManager;

        $r90 = (androidx.compose.ui.node.Owner) r0;

        specialinvoke $r89.<androidx.compose.ui.modifier.ModifierLocalManager: void <init>(androidx.compose.ui.node.Owner)>($r90);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.modifier.ModifierLocalManager modifierLocalManager> = $r89;

        $r91 = new androidx.compose.ui.platform.AndroidTextToolbar;

        $r92 = (android.view.View) r0;

        specialinvoke $r91.<androidx.compose.ui.platform.AndroidTextToolbar: void <init>(android.view.View)>($r92);

        $r93 = (androidx.compose.ui.platform.TextToolbar) $r91;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.TextToolbar textToolbar> = $r93;

        $r94 = new androidx.compose.ui.platform.WeakCache;

        specialinvoke $r94.<androidx.compose.ui.platform.WeakCache: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WeakCache layerCache> = $r94;

        b8 = 16;

        $r95 = new androidx.compose.runtime.collection.MutableVector;

        $r96 = newarray (kotlin.jvm.functions.Function0)[b8];

        specialinvoke $r95.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r96, 0);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners> = $r95;

        $r97 = new androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1;

        specialinvoke $r97.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 resendMotionEventRunnable> = $r97;

        $r98 = dynamicinvoke "run" <java.lang.Runnable (androidx.compose.ui.platform.AndroidComposeView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.platform.AndroidComposeView: void sendHoverExitEvent$lambda-5(androidx.compose.ui.platform.AndroidComposeView)>, methodtype: void __METHODTYPE__());

        r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent> = $r98;

        $r99 = new androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1;

        specialinvoke $r99.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        $r100 = (kotlin.jvm.functions.Function0) $r99;

        r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function0 resendMotionEventOnLayout> = $r100;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 29 goto label5;

        $r116 = new androidx.compose.ui.platform.CalculateMatrixToWindowApi29;

        specialinvoke $r116.<androidx.compose.ui.platform.CalculateMatrixToWindowApi29: void <init>()>();

        $r127 = (androidx.compose.ui.platform.CalculateMatrixToWindow) $r116;

        goto label6;

     label5:
        $r101 = new androidx.compose.ui.platform.CalculateMatrixToWindowApi21;

        specialinvoke $r101.<androidx.compose.ui.platform.CalculateMatrixToWindowApi21: void <init>()>();

        $r127 = (androidx.compose.ui.platform.CalculateMatrixToWindow) $r101;

     label6:
        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.CalculateMatrixToWindow matrixToWindow> = $r127;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setWillNotDraw(boolean)>(0);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setFocusable(boolean)>(1);

        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        if $i5 < 26 goto label7;

        $r115 = <androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsO: androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsO INSTANCE>;

        $r114 = (android.view.View) r0;

        virtualinvoke $r115.<androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsO: void focusable(android.view.View,int,boolean)>($r114, 1, 0);

     label7:
        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setFocusableInTouchMode(boolean)>(1);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setClipChildren(boolean)>(0);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setTransitionGroup(boolean)>(1);

        $r104 = (android.view.View) r0;

        $r102 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        $r103 = (androidx.core.view.AccessibilityDelegateCompat) $r102;

        staticinvoke <androidx.core.view.ViewCompat: void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat)>($r104, $r103);

        $r105 = <androidx.compose.ui.platform.ViewRootForTest: androidx.compose.ui.platform.ViewRootForTest$Companion Companion>;

        $r106 = virtualinvoke $r105.<androidx.compose.ui.platform.ViewRootForTest$Companion: kotlin.jvm.functions.Function1 getOnViewCreatedCallback()>();

        if $r106 == null goto label8;

        interfaceinvoke $r106.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r0);

        goto label8;

     label8:
        $r107 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $r108 = (androidx.compose.ui.node.Owner) r0;

        virtualinvoke $r107.<androidx.compose.ui.node.LayoutNode: void attach$ui_release(androidx.compose.ui.node.Owner)>($r108);

        $i6 = <android.os.Build$VERSION: int SDK_INT>;

        if $i6 < 29 goto label9;

        $r112 = <androidx.compose.ui.platform.AndroidComposeViewForceDarkModeQ: androidx.compose.ui.platform.AndroidComposeViewForceDarkModeQ INSTANCE>;

        $r111 = (android.view.View) r0;

        virtualinvoke $r112.<androidx.compose.ui.platform.AndroidComposeViewForceDarkModeQ: void disallowForceDark(android.view.View)>($r111);

     label9:
        $r109 = new androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1;

        specialinvoke $r109.<androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1: void <init>(androidx.compose.ui.platform.AndroidComposeView)>(r0);

        $r110 = (androidx.compose.ui.input.pointer.PointerIconService) $r109;

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIconService pointerIconService> = $r110;

        return;
    }

    public androidx.compose.ui.node.LayoutNodeDrawScope getSharedDrawScope()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNodeDrawScope $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNodeDrawScope sharedDrawScope>;

        return $r1;
    }

    public android.view.View getView()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.View $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = (android.view.View) r0;

        return $r1;
    }

    public androidx.compose.ui.unit.Density getDensity()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density density>;

        return $r1;
    }

    public androidx.compose.ui.focus.FocusManager getFocusManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.focus.FocusManagerImpl $r1;
        androidx.compose.ui.focus.FocusManager $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        $r2 = (androidx.compose.ui.focus.FocusManager) $r1;

        return $r2;
    }

    public androidx.compose.ui.platform.WindowInfo getWindowInfo()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.WindowInfoImpl $r1;
        androidx.compose.ui.platform.WindowInfo $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo>;

        $r2 = (androidx.compose.ui.platform.WindowInfo) $r1;

        return $r2;
    }

    public androidx.compose.ui.node.LayoutNode getRoot()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode root>;

        return $r1;
    }

    public androidx.compose.ui.node.RootForTest getRootForTest()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.RootForTest $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.RootForTest rootForTest>;

        return $r1;
    }

    public androidx.compose.ui.semantics.SemanticsOwner getSemanticsOwner()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.semantics.SemanticsOwner $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsOwner semanticsOwner>;

        return $r1;
    }

    public androidx.compose.ui.autofill.AutofillTree getAutofillTree()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.autofill.AutofillTree $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AutofillTree autofillTree>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getConfigurationChangeObserver()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 configurationChangeObserver>;

        return $r1;
    }

    public final void setConfigurationChangeObserver(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 configurationChangeObserver> = r1;

        return;
    }

    public androidx.compose.ui.autofill.Autofill getAutofill()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.autofill.AndroidAutofill $r1;
        androidx.compose.ui.autofill.Autofill $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>;

        $r2 = (androidx.compose.ui.autofill.Autofill) $r1;

        return $r2;
    }

    public androidx.compose.ui.platform.AndroidClipboardManager getClipboardManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidClipboardManager $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidClipboardManager clipboardManager>;

        return $r1;
    }

    public androidx.compose.ui.platform.AndroidAccessibilityManager getAccessibilityManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidAccessibilityManager $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidAccessibilityManager accessibilityManager>;

        return $r1;
    }

    public androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.OwnerSnapshotObserver $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver snapshotObserver>;

        return $r1;
    }

    public boolean getShowLayoutBounds()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $z0 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean showLayoutBounds>;

        return $z0;
    }

    public void setShowLayoutBounds(boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean showLayoutBounds> = z0;

        return;
    }

    public static void getShowLayoutBounds$annotations()
    {
        return;
    }

    public final androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidViewsHandler $r1, $r2, $r3, $r5;
        android.content.Context $r4;
        android.view.View $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        if $r1 != null goto label1;

        $r3 = new androidx.compose.ui.platform.AndroidViewsHandler;

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "context");

        specialinvoke $r3.<androidx.compose.ui.platform.AndroidViewsHandler: void <init>(android.content.Context)>($r4);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler> = $r3;

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        $r6 = (android.view.View) $r5;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void addView(android.view.View)>($r6);

     label1:
        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        return $r2;
    }

    public long getMeasureIteration()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $l0 = virtualinvoke $r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: long getMeasureIteration()>();

        return $l0;
    }

    public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.ViewConfiguration $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.ViewConfiguration viewConfiguration>;

        return $r1;
    }

    public boolean getHasPendingMeasureOrLayout()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getHasPendingMeasureOrLayout()>();

        return $z0;
    }

    public final long getLastMatrixRecalculationAnimationTime$ui_release()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long $l0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $l0 = r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime>;

        return $l0;
    }

    public final void setLastMatrixRecalculationAnimationTime$ui_release(long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter0: long;

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime> = l0;

        return;
    }

    public static void getLastMatrixRecalculationAnimationTime$ui_release$annotations()
    {
        return;
    }

    public final androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState viewTreeOwners$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners) $r3;

        return $r4;
    }

    private final void setViewTreeOwners(androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState viewTreeOwners$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public androidx.compose.ui.text.input.TextInputService getTextInputService()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.text.input.TextInputService $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputService textInputService>;

        return $r1;
    }

    public static void getTextInputService$annotations()
    {
        return;
    }

    public androidx.compose.ui.text.font.Font$ResourceLoader getFontLoader()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.text.font.Font$ResourceLoader $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.font.Font$ResourceLoader fontLoader>;

        return $r1;
    }

    public static void getFontLoader$annotations()
    {
        return;
    }

    public androidx.compose.ui.text.font.FontFamily$Resolver getFontFamilyResolver()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.text.font.FontFamily$Resolver $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState fontFamilyResolver$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.text.font.FontFamily$Resolver) $r3;

        return $r4;
    }

    private void setFontFamilyResolver(androidx.compose.ui.text.font.FontFamily$Resolver)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.text.font.FontFamily$Resolver r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.text.font.FontFamily$Resolver;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState fontFamilyResolver$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    private final int getFontWeightAdjustmentCompat(android.content.res.Configuration)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.content.res.Configuration $r1;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 := @parameter0: android.content.res.Configuration;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        $i1 = $r1.<android.content.res.Configuration: int fontWeightAdjustment>;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public androidx.compose.ui.unit.LayoutDirection getLayoutDirection()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.unit.LayoutDirection $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState layoutDirection$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.unit.LayoutDirection) $r3;

        return $r4;
    }

    private void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.unit.LayoutDirection r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.unit.LayoutDirection;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.MutableState layoutDirection$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public androidx.compose.ui.hapticfeedback.HapticFeedback getHapticFeedBack()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>;

        return $r1;
    }

    public androidx.compose.ui.input.InputModeManager getInputModeManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.input.InputModeManagerImpl $r1;
        androidx.compose.ui.input.InputModeManager $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.InputModeManagerImpl _inputModeManager>;

        $r2 = (androidx.compose.ui.input.InputModeManager) $r1;

        return $r2;
    }

    public androidx.compose.ui.modifier.ModifierLocalManager getModifierLocalManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.modifier.ModifierLocalManager $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.modifier.ModifierLocalManager modifierLocalManager>;

        return $r1;
    }

    public androidx.compose.ui.platform.TextToolbar getTextToolbar()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.TextToolbar $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.TextToolbar textToolbar>;

        return $r1;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.graphics.Rect r1;
        androidx.compose.ui.geometry.Rect r2, $r5;
        androidx.compose.ui.focus.FocusManagerImpl $r3;
        androidx.compose.ui.focus.FocusModifier $r4;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3;
        kotlin.Unit $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.graphics.Rect;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rect");

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.focus.FocusManagerImpl: androidx.compose.ui.focus.FocusModifier getActiveFocusModifier$ui_release()>();

        if $r4 == null goto label1;

        $r5 = staticinvoke <androidx.compose.ui.focus.FocusTraversalKt: androidx.compose.ui.geometry.Rect focusRect(androidx.compose.ui.focus.FocusModifier)>($r4);

        if $r5 == null goto label1;

        r2 = $r5;

        $f0 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $i0 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f0);

        r1.<android.graphics.Rect: int left> = $i0;

        $f1 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        r1.<android.graphics.Rect: int top> = $i1;

        $f2 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

        r1.<android.graphics.Rect: int right> = $i2;

        $f3 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        r1.<android.graphics.Rect: int bottom> = $i3;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label2;

     label1:
        $r6 = null;

     label2:
        if $r6 != null goto label3;

        specialinvoke r0.<android.view.ViewGroup: void getFocusedRect(android.graphics.Rect)>(r1);

        goto label3;

     label3:
        return;
    }

    public void onResume(androidx.lifecycle.LifecycleOwner)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.compose.ui.platform.AndroidComposeView$Companion $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        $r2 = <androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$Companion Companion>;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView$Companion: boolean access$getIsShowingLayoutBounds(androidx.compose.ui.platform.AndroidComposeView$Companion)>($r2);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setShowLayoutBounds(boolean)>($z0);

        return;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0;
        int i0;
        android.graphics.Rect r1;
        androidx.compose.ui.focus.FocusManagerImpl $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<android.view.ViewGroup: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Owner FocusChanged(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Compose Focus", $r7);

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        if z0 == 0 goto label1;

        virtualinvoke $r2.<androidx.compose.ui.focus.FocusManagerImpl: void takeFocus()>();

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.compose.ui.focus.FocusManagerImpl: void releaseFocus()>();

     label2:
        return;
    }

    public void onWindowFocusChanged(boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0, z1, z2, $z4;
        androidx.compose.ui.platform.WindowInfoImpl $r1;
        androidx.compose.ui.platform.AndroidComposeView$Companion $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo>;

        virtualinvoke $r1.<androidx.compose.ui.platform.WindowInfoImpl: void setWindowFocused(boolean)>(z0);

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean keyboardModifiersRequireUpdate> = 1;

        specialinvoke r0.<android.view.ViewGroup: void onWindowFocusChanged(boolean)>(z0);

        if z0 == 0 goto label1;

        $r2 = <androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$Companion Companion>;

        z1 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView$Companion: boolean access$getIsShowingLayoutBounds(androidx.compose.ui.platform.AndroidComposeView$Companion)>($r2);

        z2 = z1;

        $z4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean getShowLayoutBounds()>();

        if $z4 == z2 goto label1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setShowLayoutBounds(boolean)>(z2);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateDescendants()>();

     label1:
        return;
    }

    public boolean sendKeyEvent-ZmokQxo(android.view.KeyEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.KeyEvent r1;
        androidx.compose.ui.input.key.KeyInputModifier $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.KeyEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyEvent");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.key.KeyInputModifier keyInputModifier>;

        $z0 = virtualinvoke $r2.<androidx.compose.ui.input.key.KeyInputModifier: boolean processKeyInput-ZmokQxo(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.KeyEvent r1, $r3;
        boolean $z0, $z1;
        androidx.compose.ui.platform.WindowInfoImpl $r2;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.KeyEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isFocused()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo>;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getMetaState()>();

        $i1 = staticinvoke <androidx.compose.ui.input.pointer.PointerKeyboardModifiers: int constructor-impl(int)>($i0);

        virtualinvoke $r2.<androidx.compose.ui.platform.WindowInfoImpl: void setKeyboardModifiers-5xRPYO0(int)>($i1);

        $r3 = staticinvoke <androidx.compose.ui.input.key.KeyEvent: android.view.KeyEvent constructor-impl(android.view.KeyEvent)>(r1);

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean sendKeyEvent-ZmokQxo(android.view.KeyEvent)>($r3);

        goto label2;

     label1:
        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

     label2:
        return $z1;
    }

    public void onAttach(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        return;
    }

    public void onDetach(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void onNodeDetached(androidx.compose.ui.node.LayoutNode)>(r1);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void requestClearInvalidObservations()>();

        return;
    }

    public final void requestClearInvalidObservations()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean observationClearRequested> = 1;

        return;
    }

    public void onEndApplyChanges()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidViewsHandler r1;
        int i0, i1;
        kotlin.jvm.functions.Function0 r2;
        androidx.compose.runtime.collection.MutableVector r3, $r4, $r5, $r8, $r13;
        boolean $z1, $z2;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        android.view.ViewGroup $r11;
        androidx.compose.ui.node.OwnerSnapshotObserver $r12;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $z1 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean observationClearRequested>;

        if $z1 == 0 goto label1;

        $r12 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        virtualinvoke $r12.<androidx.compose.ui.node.OwnerSnapshotObserver: void clearInvalidObservations$ui_release()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean observationClearRequested> = 0;

     label1:
        r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        if r1 == null goto label2;

        $r11 = (android.view.ViewGroup) r1;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void clearChildInvalidObservations(android.view.ViewGroup)>($r11);

     label2:
        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        $z2 = virtualinvoke $r13.<androidx.compose.runtime.collection.MutableVector: boolean isNotEmpty()>();

        if $z2 == 0 goto label6;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        i0 = virtualinvoke $r4.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r7 = $r6[i1];

        r2 = (kotlin.jvm.functions.Function0) $r7;

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        virtualinvoke $r8.<androidx.compose.runtime.collection.MutableVector: java.lang.Object set(int,java.lang.Object)>(i1, null);

        if r2 == null goto label4;

        interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label4;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        virtualinvoke $r5.<androidx.compose.runtime.collection.MutableVector: void removeRange(int,int)>(0, i0);

        goto label2;

     label6:
        return;
    }

    public void registerOnEndApplyChangesListener(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.runtime.collection.MutableVector r2, $r3;
        boolean $z1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "listener");

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        $z1 = virtualinvoke $r3.<androidx.compose.runtime.collection.MutableVector: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.runtime.collection.MutableVector endApplyChangesListeners>;

        virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private final void clearChildInvalidObservations(android.view.ViewGroup)
    {
        androidx.compose.ui.platform.AndroidComposeView r0, $r4;
        android.view.ViewGroup r1, $r3;
        int i0, i1;
        android.view.View r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.ViewGroup;

        i1 = 0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

     label1:
        if i1 >= i0 goto label4;

        r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = r2 instanceof androidx.compose.ui.platform.AndroidComposeView;

        if $z0 == 0 goto label2;

        $r4 = (androidx.compose.ui.platform.AndroidComposeView) r2;

        virtualinvoke $r4.<androidx.compose.ui.platform.AndroidComposeView: void onEndApplyChanges()>();

        goto label3;

     label2:
        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r3 = (android.view.ViewGroup) r2;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void clearChildInvalidObservations(android.view.ViewGroup)>($r3);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public final void addAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0, r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder r1;
        androidx.compose.ui.node.LayoutNode r2;
        androidx.compose.ui.platform.AndroidViewsHandler $r4, $r8, $r10;
        java.util.HashMap $r5, $r11;
        java.util.Map $r6, $r12;
        android.view.View $r9, $r14, $r16;
        androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1 $r15;
        androidx.core.view.AccessibilityDelegateCompat $r17;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "layoutNode");

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap getHolderToLayoutNode()>();

        $r6 = (java.util.Map) $r5;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r8 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r9 = (android.view.View) r1;

        virtualinvoke $r8.<androidx.compose.ui.platform.AndroidViewsHandler: void addView(android.view.View)>($r9);

        $r10 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r11 = virtualinvoke $r10.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap getLayoutNodeToHolder()>();

        $r12 = (java.util.Map) $r11;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        $r14 = (android.view.View) r1;

        staticinvoke <androidx.core.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r14, 1);

        r3 = r0;

        $r16 = (android.view.View) r1;

        $r15 = new androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1;

        specialinvoke $r15.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.platform.AndroidComposeView)>(r2, r0, r3);

        $r17 = (androidx.core.view.AccessibilityDelegateCompat) $r15;

        staticinvoke <androidx.core.view.ViewCompat: void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat)>($r16, $r17);

        return;
    }

    public final void removeAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder r1;
        androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1 $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $r2 = new androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1;

        specialinvoke $r2.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: void <init>(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.viewinterop.AndroidViewHolder)>(r0, r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void registerOnEndApplyChangesListener(kotlin.jvm.functions.Function0)>($r3);

        return;
    }

    public final void drawAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder, android.graphics.Canvas)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder r1;
        android.graphics.Canvas r2;
        androidx.compose.ui.platform.AndroidViewsHandler $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r2 := @parameter1: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "canvas");

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        virtualinvoke $r3.<androidx.compose.ui.platform.AndroidViewsHandler: void drawView(androidx.compose.ui.viewinterop.AndroidViewHolder,android.graphics.Canvas)>(r1, r2);

        return;
    }

    private final void scheduleMeasureAndLayout(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1, $r2, r5;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r3, $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isLayoutRequested()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label6;

        $z2 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean wasMeasuredWithMultipleConstraints>;

        if $z2 == 0 goto label3;

        if r1 == null goto label3;

        r5 = r1;

     label1:
        if r5 == null goto label2;

        $r3 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r4 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r3 != $r4 goto label2;

        r5 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        if r5 != $r2 goto label3;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void requestLayout()>();

        return;

     label3:
        $i1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getWidth()>();

        if $i1 == 0 goto label4;

        $i0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getHeight()>();

        if $i0 != 0 goto label5;

     label4:
        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void requestLayout()>();

        goto label6;

     label5:
        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidate()>();

     label6:
        return;
    }

    static void scheduleMeasureAndLayout$default(androidx.compose.ui.platform.AndroidComposeView, androidx.compose.ui.node.LayoutNode, int, java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode r2;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout(androidx.compose.ui.node.LayoutNode)>(r2);

        return;
    }

    public void measureAndLayout(boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0, z3;
        java.lang.String r1;
        kotlin.jvm.functions.Function0 r2, $r6;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r3, $r4;
        java.lang.Throwable $r5, r8;
        kotlin.Unit r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter0: boolean;

        r1 = "AndroidOwner:measureAndLayout";

        staticinvoke <android.os.Trace: void beginSection(java.lang.String)>(r1);

     label1:
        if z0 == 0 goto label2;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function0 resendMotionEventOnLayout>;

        goto label3;

     label2:
        $r6 = null;

     label3:
        r2 = $r6;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        z3 = virtualinvoke $r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean measureAndLayout(kotlin.jvm.functions.Function0)>(r2);

        if z3 == 0 goto label4;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void requestLayout()>();

     label4:
        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: void dispatchOnPositionedCallbacks$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,boolean,int,java.lang.Object)>($r4, 0, 1, null);

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        staticinvoke <android.os.Trace: void endSection()>();

        goto label8;

     label6:
        $r5 := @caughtexception;

        r8 = $r5;

     label7:
        staticinvoke <android.os.Trace: void endSection()>();

        throw r8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode, long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        long l0;
        java.lang.String r2;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r3, $r4;
        java.lang.Throwable $r5, r7;
        kotlin.Unit r6;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        r2 = "AndroidOwner:measureAndLayout";

        staticinvoke <android.os.Trace: void beginSection(java.lang.String)>(r2);

     label1:
        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode,long)>(r1, l0);

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: void dispatchOnPositionedCallbacks$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,boolean,int,java.lang.Object)>($r4, 0, 1, null);

        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        staticinvoke <android.os.Trace: void endSection()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        staticinvoke <android.os.Trace: void endSection()>();

        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)>(r1);

        return;
    }

    public void onRequestMeasure(androidx.compose.ui.node.LayoutNode, boolean, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        boolean z0, z1, $z2, $z3;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2, $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        if z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $z3 = virtualinvoke $r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        if $z3 == 0 goto label2;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout(androidx.compose.ui.node.LayoutNode)>(r1);

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $z2 = virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        if $z2 == 0 goto label2;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout(androidx.compose.ui.node.LayoutNode)>(r1);

     label2:
        return;
    }

    public void onRequestRelayout(androidx.compose.ui.node.LayoutNode, boolean, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        boolean z0, z1, $z2, $z3;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2, $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        if z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $z3 = virtualinvoke $r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRelayout(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        if $z3 == 0 goto label2;

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout$default(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.node.LayoutNode,int,java.lang.Object)>(r0, null, 1, null);

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $z2 = virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRelayout(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        if $z2 == 0 goto label2;

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout$default(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.node.LayoutNode,int,java.lang.Object)>(r0, null, 1, null);

     label2:
        return;
    }

    public void requestOnPositionedCallback(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void requestOnPositionedCallback(androidx.compose.ui.node.LayoutNode)>(r1);

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout$default(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.node.LayoutNode,int,java.lang.Object)>(r0, null, 1, null);

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0, i1, i2, i3, i4, i5, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String r1;
        kotlin.Pair r2, r3;
        long l6, $l7;
        boolean $z2, $z3;
        java.lang.Object $r4, $r6, $r8, $r10;
        java.lang.Number $r5, $r7, $r9, $r11;
        androidx.compose.ui.unit.Constraints $r12, $r13, $r17;
        androidx.compose.ui.platform.AndroidViewsHandler $r14, $r24;
        androidx.compose.ui.node.LayoutNode $r15, $r16, $r18, $r22, $r23;
        java.lang.Throwable $r19, r26;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r20, $r21;
        kotlin.Unit r25;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = "AndroidOwner:onMeasure";

        staticinvoke <android.os.Trace: void beginSection(java.lang.String)>(r1);

     label01:
        $z2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z2 != 0 goto label02;

        $r18 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayoutNodeMeasurement(androidx.compose.ui.node.LayoutNode)>($r18);

     label02:
        r2 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.Pair convertMeasureSpec(int)>(i0);

        $r4 = virtualinvoke r2.<kotlin.Pair: java.lang.Object component1()>();

        $r5 = (java.lang.Number) $r4;

        i2 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $r6 = virtualinvoke r2.<kotlin.Pair: java.lang.Object component2()>();

        $r7 = (java.lang.Number) $r6;

        i3 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

        r3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.Pair convertMeasureSpec(int)>(i1);

        $r8 = virtualinvoke r3.<kotlin.Pair: java.lang.Object component1()>();

        $r9 = (java.lang.Number) $r8;

        i4 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        $r10 = virtualinvoke r3.<kotlin.Pair: java.lang.Object component2()>();

        $r11 = (java.lang.Number) $r10;

        i5 = virtualinvoke $r11.<java.lang.Number: int intValue()>();

        l6 = staticinvoke <androidx.compose.ui.unit.ConstraintsKt: long Constraints(int,int,int,int)>(i2, i3, i4, i5);

        $r12 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Constraints onMeasureConstraints>;

        if $r12 != null goto label03;

        $r17 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l6);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Constraints onMeasureConstraints> = $r17;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean wasMeasuredWithMultipleConstraints> = 0;

        goto label06;

     label03:
        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Constraints onMeasureConstraints>;

        if $r13 != null goto label04;

        $z3 = 0;

        goto label05;

     label04:
        $l7 = virtualinvoke $r13.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z3 = staticinvoke <androidx.compose.ui.unit.Constraints: boolean equals-impl0(long,long)>($l7, l6);

     label05:
        if $z3 != 0 goto label06;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean wasMeasuredWithMultipleConstraints> = 1;

     label06:
        $r20 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r20.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void updateRootConstraints-BRTryo0(long)>(l6);

        $r21 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r21.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void measureOnly()>();

        $r22 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $i12 = virtualinvoke $r22.<androidx.compose.ui.node.LayoutNode: int getWidth()>();

        $r23 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $i13 = virtualinvoke $r23.<androidx.compose.ui.node.LayoutNode: int getHeight()>();

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setMeasuredDimension(int,int)>($i12, $i13);

        $r24 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        if $r24 == null goto label07;

        $r14 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r15 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $i8 = virtualinvoke $r15.<androidx.compose.ui.node.LayoutNode: int getWidth()>();

        $i9 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i8, 1073741824);

        $r16 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $i10 = virtualinvoke $r16.<androidx.compose.ui.node.LayoutNode: int getHeight()>();

        $i11 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i10, 1073741824);

        virtualinvoke $r14.<androidx.compose.ui.platform.AndroidViewsHandler: void measure(int,int)>($i9, $i11);

     label07:
        r25 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        staticinvoke <android.os.Trace: void endSection()>();

        goto label11;

     label09:
        $r19 := @caughtexception;

        r26 = $r19;

     label10:
        staticinvoke <android.os.Trace: void endSection()>();

        throw r26;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final kotlin.Pair convertMeasureSpec(int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0, i1, i2;
        java.lang.Integer $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalStateException $r7;
        kotlin.Pair $r8;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        lookupswitch(i1)
        {
            case -2147483648: goto label3;
            case 0: goto label2;
            case 1073741824: goto label1;
            default: goto label4;
        };

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r1, $r2);

        goto label5;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r8 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label5;

     label3:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label5;

     label4:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label5:
        return $r8;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2;
        androidx.compose.ui.platform.AndroidViewsHandler $r3, $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function0 resendMotionEventOnLayout>;

        virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean measureAndLayout(kotlin.jvm.functions.Function0)>($r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Constraints onMeasureConstraints> = null;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void updatePositionCacheAndDispatch()>();

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler _androidViewsHandler>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $i5 = i2 - i0;

        $i4 = i3 - i1;

        virtualinvoke $r4.<androidx.compose.ui.platform.AndroidViewsHandler: void layout(int,int,int,int)>(0, 0, $i5, $i4);

     label1:
        return;
    }

    private final void updatePositionCacheAndDispatch()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, $l6;
        int i1, i2, $i3, $i4, $i5, $i7;
        int[] $r1, $r2, $r3, $r4, $r8;
        androidx.compose.ui.node.LayoutNode $r5;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r7;
        boolean z0;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r9;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        z0 = 0;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void getLocationOnScreen(int[])>($r1);

        l0 = r0.<androidx.compose.ui.platform.AndroidComposeView: long globalPosition>;

        i1 = staticinvoke <androidx.compose.ui.unit.IntOffset: int component1-impl(long)>(l0);

        i2 = staticinvoke <androidx.compose.ui.unit.IntOffset: int component2-impl(long)>(l0);

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i3 = $r2[0];

        if i1 != $i3 goto label1;

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i7 = $r8[1];

        if i2 == $i7 goto label2;

     label1:
        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i5 = $r3[0];

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i4 = $r4[1];

        $l6 = staticinvoke <androidx.compose.ui.unit.IntOffsetKt: long IntOffset(int,int)>($i5, $i4);

        r0.<androidx.compose.ui.platform.AndroidComposeView: long globalPosition> = $l6;

        if i1 == 2147483647 goto label2;

        if i2 == 2147483647 goto label2;

        z0 = 1;

        $r5 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

     label2:
        $r9 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r9.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void dispatchOnPositionedCallbacks(boolean)>(z0);

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.graphics.Canvas r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        return;
    }

    public androidx.compose.ui.node.OwnedLayer createLayer(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.jvm.functions.Function0 r2;
        androidx.compose.ui.node.OwnedLayer r3, $r19, $r25;
        java.lang.Throwable r4, $r20;
        androidx.compose.ui.platform.WeakCache $r5;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.platform.ViewLayer$Companion $r7, $r8, $r16;
        androidx.compose.ui.platform.ViewLayerContainer $r9;
        android.content.Context $r10, $r13, $r17;
        androidx.compose.ui.platform.DrawChildContainer $r11, $r21, $r22, $r24;
        android.view.View $r12, $r15;
        int $i0;
        androidx.compose.ui.platform.RenderNodeLayer $r18;
        androidx.compose.ui.platform.ViewLayer $r23;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "drawBlock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invalidateParentLayer");

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WeakCache layerCache>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.WeakCache: java.lang.Object pop()>();

        r3 = (androidx.compose.ui.node.OwnedLayer) $r6;

        if r3 == null goto label1;

        interfaceinvoke r3.<androidx.compose.ui.node.OwnedLayer: void reuseLayer(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>(r1, r2);

        return r3;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label4;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label4;

        $z3 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isRenderNodeCompatible>;

        if $z3 == 0 goto label4;

     label2:
        $r18 = new androidx.compose.ui.platform.RenderNodeLayer;

        specialinvoke $r18.<androidx.compose.ui.platform.RenderNodeLayer: void <init>(androidx.compose.ui.platform.AndroidComposeView,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>(r0, r1, r2);

        $r19 = (androidx.compose.ui.node.OwnedLayer) $r18;

        return $r19;

     label3:
        $r20 := @caughtexception;

        r4 = $r20;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isRenderNodeCompatible> = 0;

     label4:
        $r21 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer>;

        if $r21 != null goto label8;

        $r7 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $z1 = virtualinvoke $r7.<androidx.compose.ui.platform.ViewLayer$Companion: boolean getHasRetrievedMethod()>();

        if $z1 != 0 goto label5;

        $r16 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $r15 = new android.view.View;

        $r17 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        specialinvoke $r15.<android.view.View: void <init>(android.content.Context)>($r17);

        virtualinvoke $r16.<androidx.compose.ui.platform.ViewLayer$Companion: void updateDisplayList(android.view.View)>($r15);

     label5:
        $r8 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $z2 = virtualinvoke $r8.<androidx.compose.ui.platform.ViewLayer$Companion: boolean getShouldUseDispatchDraw()>();

        if $z2 == 0 goto label6;

        $r22 = new androidx.compose.ui.platform.DrawChildContainer;

        $r13 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "context");

        specialinvoke $r22.<androidx.compose.ui.platform.DrawChildContainer: void <init>(android.content.Context)>($r13);

        goto label7;

     label6:
        $r9 = new androidx.compose.ui.platform.ViewLayerContainer;

        $r10 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "context");

        specialinvoke $r9.<androidx.compose.ui.platform.ViewLayerContainer: void <init>(android.content.Context)>($r10);

        $r22 = (androidx.compose.ui.platform.DrawChildContainer) $r9;

     label7:
        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer> = $r22;

        $r11 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer>;

        $r12 = (android.view.View) $r11;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void addView(android.view.View)>($r12);

     label8:
        $r23 = new androidx.compose.ui.platform.ViewLayer;

        $r24 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r24);

        specialinvoke $r23.<androidx.compose.ui.platform.ViewLayer: void <init>(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.platform.DrawChildContainer,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>(r0, $r24, r1, r2);

        $r25 = (androidx.compose.ui.node.OwnedLayer) $r23;

        return $r25;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public final boolean recycle$ui_release(androidx.compose.ui.node.OwnedLayer)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.OwnedLayer r1;
        boolean z0, $z1, $z2;
        androidx.compose.ui.platform.DrawChildContainer $r2;
        androidx.compose.ui.platform.WeakCache $r3, $r5;
        androidx.compose.ui.platform.ViewLayer$Companion $r4;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.OwnedLayer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layer");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.DrawChildContainer viewLayersContainer>;

        if $r2 == null goto label1;

        $r4 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $z1 = virtualinvoke $r4.<androidx.compose.ui.platform.ViewLayer$Companion: boolean getShouldUseDispatchDraw()>();

        if $z1 != 0 goto label1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 23 goto label1;

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WeakCache layerCache>;

        $i1 = virtualinvoke $r5.<androidx.compose.ui.platform.WeakCache: int getSize()>();

        if $i1 >= 10 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 == 0 goto label4;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WeakCache layerCache>;

        virtualinvoke $r3.<androidx.compose.ui.platform.WeakCache: void push(java.lang.Object)>(r1);

     label4:
        return z0;
    }

    public void onSemanticsChange()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: void onSemanticsChange$ui_release()>();

        return;
    }

    public void onLayoutChange(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: void onLayoutChange$ui_release(androidx.compose.ui.node.LayoutNode)>(r1);

        return;
    }

    public void registerOnLayoutCompletedListener(androidx.compose.ui.node.Owner$OnLayoutCompletedListener)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.Owner$OnLayoutCompletedListener r1;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.Owner$OnLayoutCompletedListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "listener");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void registerOnLayoutCompletedListener(androidx.compose.ui.node.Owner$OnLayoutCompletedListener)>(r1);

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void scheduleMeasureAndLayout$default(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.node.LayoutNode,int,java.lang.Object)>(r0, null, 1, null);

        return;
    }

    public androidx.compose.ui.focus.FocusDirection getFocusDirection-P8AzH3I(android.view.KeyEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.KeyEvent r1;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10;
        androidx.compose.ui.input.key.Key$Companion $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        androidx.compose.ui.focus.FocusDirection$Companion $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        androidx.compose.ui.focus.FocusDirection $r20;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.KeyEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyEvent");

        l0 = staticinvoke <androidx.compose.ui.input.key.KeyEvent_androidKt: long getKey-ZmokQxo(android.view.KeyEvent)>(r1);

        $r2 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l1 = virtualinvoke $r2.<androidx.compose.ui.input.key.Key$Companion: long getTab-EK5gGoQ()>();

        $z0 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l1);

        if $z0 == 0 goto label03;

        $z7 = staticinvoke <androidx.compose.ui.input.key.KeyEvent_androidKt: boolean isShiftPressed-ZmokQxo(android.view.KeyEvent)>(r1);

        if $z7 == 0 goto label01;

        $r19 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i17 = virtualinvoke $r19.<androidx.compose.ui.focus.FocusDirection$Companion: int getPrevious-dhqQ-8s()>();

        goto label02;

     label01:
        $r18 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i17 = virtualinvoke $r18.<androidx.compose.ui.focus.FocusDirection$Companion: int getNext-dhqQ-8s()>();

     label02:
        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i17);

        goto label16;

     label03:
        $r3 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l2 = virtualinvoke $r3.<androidx.compose.ui.input.key.Key$Companion: long getDirectionRight-EK5gGoQ()>();

        $z1 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l2);

        if $z1 == 0 goto label04;

        $r17 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i16 = virtualinvoke $r17.<androidx.compose.ui.focus.FocusDirection$Companion: int getRight-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i16);

        goto label16;

     label04:
        $r4 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l3 = virtualinvoke $r4.<androidx.compose.ui.input.key.Key$Companion: long getDirectionLeft-EK5gGoQ()>();

        $z2 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l3);

        if $z2 == 0 goto label05;

        $r16 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i15 = virtualinvoke $r16.<androidx.compose.ui.focus.FocusDirection$Companion: int getLeft-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i15);

        goto label16;

     label05:
        $r5 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l4 = virtualinvoke $r5.<androidx.compose.ui.input.key.Key$Companion: long getDirectionUp-EK5gGoQ()>();

        $z3 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l4);

        if $z3 == 0 goto label06;

        $r15 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i14 = virtualinvoke $r15.<androidx.compose.ui.focus.FocusDirection$Companion: int getUp-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i14);

        goto label16;

     label06:
        $r6 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l5 = virtualinvoke $r6.<androidx.compose.ui.input.key.Key$Companion: long getDirectionDown-EK5gGoQ()>();

        $z4 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l5);

        if $z4 == 0 goto label07;

        $r14 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i13 = virtualinvoke $r14.<androidx.compose.ui.focus.FocusDirection$Companion: int getDown-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i13);

        goto label16;

     label07:
        $r7 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l6 = virtualinvoke $r7.<androidx.compose.ui.input.key.Key$Companion: long getDirectionCenter-EK5gGoQ()>();

        $z5 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l6);

        if $z5 == 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $r8 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l7 = virtualinvoke $r8.<androidx.compose.ui.input.key.Key$Companion: long getEnter-EK5gGoQ()>();

        $z8 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l7);

     label09:
        if $z8 == 0 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $r9 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l8 = virtualinvoke $r9.<androidx.compose.ui.input.key.Key$Companion: long getNumPadEnter-EK5gGoQ()>();

        $z9 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l8);

     label11:
        if $z9 == 0 goto label12;

        $r13 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i12 = virtualinvoke $r13.<androidx.compose.ui.focus.FocusDirection$Companion: int getEnter-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i12);

        goto label16;

     label12:
        $r10 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l9 = virtualinvoke $r10.<androidx.compose.ui.input.key.Key$Companion: long getBack-EK5gGoQ()>();

        $z6 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l9);

        if $z6 == 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $r11 = <androidx.compose.ui.input.key.Key: androidx.compose.ui.input.key.Key$Companion Companion>;

        $l10 = virtualinvoke $r11.<androidx.compose.ui.input.key.Key$Companion: long getEscape-EK5gGoQ()>();

        $z10 = staticinvoke <androidx.compose.ui.input.key.Key: boolean equals-impl0(long,long)>(l0, $l10);

     label14:
        if $z10 == 0 goto label15;

        $r12 = <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection$Companion Companion>;

        $i11 = virtualinvoke $r12.<androidx.compose.ui.focus.FocusDirection$Companion: int getExit-dhqQ-8s()>();

        $r20 = staticinvoke <androidx.compose.ui.focus.FocusDirection: androidx.compose.ui.focus.FocusDirection box-impl(int)>($i11);

        goto label16;

     label15:
        $r20 = null;

     label16:
        return $r20;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.graphics.Canvas r1, r22;
        boolean $z1, $z2, $z3, $z7;
        androidx.compose.ui.node.Owner $r2;
        androidx.compose.ui.graphics.AndroidCanvas $r3, $r4, $r5, $r7;
        androidx.compose.ui.node.LayoutNode $r6, $r19;
        java.util.List $r8, $r11, $r12, $r13, $r15, $r16, $r17, r24;
        java.util.Collection $r9, $r14;
        androidx.compose.ui.platform.ViewLayer$Companion $r10;
        java.lang.Object $r18;
        androidx.compose.ui.graphics.Canvas $r20;
        androidx.compose.ui.graphics.CanvasHolder r21;
        int i0, $i1, i2;
        androidx.compose.ui.node.OwnedLayer r23;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z1 != 0 goto label1;

        $r19 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayers(androidx.compose.ui.node.LayoutNode)>($r19);

     label1:
        $r2 = (androidx.compose.ui.node.Owner) r0;

        staticinvoke <androidx.compose.ui.node.Owner: void measureAndLayout$default(androidx.compose.ui.node.Owner,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isDrawingContent> = 1;

        r21 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.graphics.CanvasHolder canvasHolder>;

        $r3 = virtualinvoke r21.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        r22 = virtualinvoke $r3.<androidx.compose.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r4 = virtualinvoke r21.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        virtualinvoke $r4.<androidx.compose.ui.graphics.AndroidCanvas: void setInternalCanvas(android.graphics.Canvas)>(r1);

        $r5 = virtualinvoke r21.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        $r6 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        $r20 = (androidx.compose.ui.graphics.Canvas) $r5;

        virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: void draw$ui_release(androidx.compose.ui.graphics.Canvas)>($r20);

        $r7 = virtualinvoke r21.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        virtualinvoke $r7.<androidx.compose.ui.graphics.AndroidCanvas: void setInternalCanvas(android.graphics.Canvas)>(r22);

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $r9 = (java.util.Collection) $r8;

        $z2 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $z7 = 1;

        goto label3;

     label2:
        $z7 = 0;

     label3:
        if $z7 == 0 goto label5;

        i0 = 0;

        $r16 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $i1 = interfaceinvoke $r16.<java.util.List: int size()>();

     label4:
        if i0 >= $i1 goto label5;

        $r17 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i0);

        r23 = (androidx.compose.ui.node.OwnedLayer) $r18;

        interfaceinvoke r23.<androidx.compose.ui.node.OwnedLayer: void updateDisplayList()>();

        i0 = i0 + 1;

        goto label4;

     label5:
        $r10 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $z3 = virtualinvoke $r10.<androidx.compose.ui.platform.ViewLayer$Companion: boolean getShouldUseDispatchDraw()>();

        if $z3 == 0 goto label6;

        i2 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        specialinvoke r0.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i2);

     label6:
        $r11 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isDrawingContent> = 0;

        $r12 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List postponedDirtyLayers>;

        if $r12 == null goto label7;

        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List postponedDirtyLayers>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        r24 = $r13;

        $r15 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $r14 = (java.util.Collection) r24;

        interfaceinvoke $r15.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        interfaceinvoke r24.<java.util.List: void clear()>();

     label7:
        return;
    }

    public final void notifyLayerIsDirty$ui_release(androidx.compose.ui.node.OwnedLayer, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.OwnedLayer r1;
        boolean z0, $z2, $z5, $z6;
        java.util.List r2, r4, r5, $r8, $r10, $r13;
        java.lang.String r3, $r12;
        java.util.Collection $r6, $r9;
        java.util.ArrayList $r7;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.OwnedLayer;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layer");

        if z0 != 0 goto label1;

        $z5 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isDrawingContent>;

        if $z5 != 0 goto label4;

        $r10 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $z6 = interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z6 != 0 goto label4;

        r3 = "Failed requirement.";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label1:
        $z2 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isDrawingContent>;

        if $z2 != 0 goto label2;

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List dirtyLayers>;

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        goto label4;

     label2:
        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List postponedDirtyLayers>;

        if $r13 != null goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) $r7;

        r5 = r4;

        r0.<androidx.compose.ui.platform.AndroidComposeView: java.util.List postponedDirtyLayers> = r5;

        $r13 = r4;

     label3:
        r2 = $r13;

        $r6 = (java.util.Collection) r2;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r1);

     label4:
        return;
    }

    public final void setOnViewTreeOwnersAvailable(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()>();

        if r2 == null goto label1;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z0 != 0 goto label2;

        r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 onViewTreeOwnersAvailable> = r1;

     label2:
        return;
    }

    public final java.lang.Object boundsUpdatesEventLoop(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.coroutines.Continuation $r1;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r2;
        java.lang.Object $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: java.lang.Object boundsUpdatesEventLoop(kotlin.coroutines.Continuation)>($r1);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label1;

        return $r3;

     label1:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    public final java.lang.Object keyboardVisibilityEventLoop(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        kotlin.coroutines.Continuation $r1;
        androidx.compose.ui.text.input.TextInputServiceAndroid $r2;
        java.lang.Object $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.text.input.TextInputServiceAndroid: java.lang.Object textInputCommandEventLoop(kotlin.coroutines.Continuation)>($r1);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label1;

        return $r3;

     label1:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    private final void invalidateLayoutNodeMeasurement(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1, r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r7;
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r6;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.MeasureAndLayoutDelegate measureAndLayoutDelegate>;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r6, r1, 0, 2, null);

        r2 = r1;

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r7 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r7;

     label1:
        $r8 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r8;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayoutNodeMeasurement(androidx.compose.ui.node.LayoutNode)>(r5);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    private final void invalidateLayers(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode r1, r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void invalidateLayers$ui_release()>();

        r2 = r1;

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r6;

     label1:
        $r7 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r7;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayers(androidx.compose.ui.node.LayoutNode)>(r5);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public void invalidateDescendants()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayers(androidx.compose.ui.node.LayoutNode)>($r1);

        return;
    }

    protected void onAttachedToWindow()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r1, r20, $r23, $r25;
        androidx.compose.ui.node.LayoutNode $r2, $r3;
        androidx.compose.ui.node.OwnerSnapshotObserver $r4;
        boolean $z0, $z4;
        androidx.lifecycle.LifecycleOwner $r6, $r11, $r12, $r17, $r26;
        androidx.lifecycle.Lifecycle $r7, $r21, $r27;
        androidx.lifecycle.LifecycleObserver $r8, $r22, $r28;
        java.lang.IllegalStateException $r9, $r10;
        androidx.compose.ui.autofill.AndroidAutofill $r13, r15;
        androidx.compose.ui.autofill.AutofillCallback $r14;
        android.view.View $r16, $r18;
        androidx.savedstate.SavedStateRegistryOwner $r19;
        kotlin.jvm.functions.Function1 $r24;
        android.view.ViewTreeObserver $r29, $r31, $r33;
        android.view.ViewTreeObserver$OnGlobalLayoutListener $r30;
        android.view.ViewTreeObserver$OnScrollChangedListener $r32;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r34;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        specialinvoke r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        $r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayoutNodeMeasurement(androidx.compose.ui.node.LayoutNode)>($r2);

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.LayoutNode getRoot()>();

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void invalidateLayers(androidx.compose.ui.node.LayoutNode)>($r3);

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        virtualinvoke $r4.<androidx.compose.ui.node.OwnerSnapshotObserver: void startObserving$ui_release()>();

        $z0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean autofillSupported()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>;

        if $r13 == null goto label1;

        r15 = $r13;

        $r14 = <androidx.compose.ui.autofill.AutofillCallback: androidx.compose.ui.autofill.AutofillCallback INSTANCE>;

        virtualinvoke $r14.<androidx.compose.ui.autofill.AutofillCallback: void register(androidx.compose.ui.autofill.AndroidAutofill)>(r15);

        goto label1;

     label1:
        $r16 = (android.view.View) r0;

        $r17 = staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: androidx.lifecycle.LifecycleOwner get(android.view.View)>($r16);

        $r18 = (android.view.View) r0;

        $r19 = staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: androidx.savedstate.SavedStateRegistryOwner get(android.view.View)>($r18);

        r20 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()>();

        if r20 == null goto label2;

        if $r17 == null goto label3;

        if $r19 == null goto label3;

        $r11 = virtualinvoke r20.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        if $r17 != $r11 goto label2;

        $r12 = virtualinvoke r20.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        if $r19 == $r12 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z4 == 0 goto label9;

        if $r17 != null goto label5;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Composed into the View which doesn\'t propagate ViewTreeLifecycleOwner!");

        throw $r10;

     label5:
        if $r19 != null goto label6;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Composed into the View which doesn\'t propagateViewTreeSavedStateRegistryOwner!");

        throw $r9;

     label6:
        if r20 == null goto label7;

        $r6 = virtualinvoke r20.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        if $r6 == null goto label7;

        $r7 = interfaceinvoke $r6.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        if $r7 == null goto label7;

        $r8 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r7.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>($r8);

        goto label7;

     label7:
        $r21 = interfaceinvoke $r17.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r22 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r21.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r22);

        $r23 = new androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners;

        specialinvoke $r23.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: void <init>(androidx.lifecycle.LifecycleOwner,androidx.savedstate.SavedStateRegistryOwner)>($r17, $r19);

        r1 = $r23;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setViewTreeOwners(androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners)>(r1);

        $r24 = r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 onViewTreeOwnersAvailable>;

        if $r24 == null goto label8;

        interfaceinvoke $r24.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label8;

     label8:
        r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 onViewTreeOwnersAvailable> = null;

     label9:
        $r25 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r25);

        $r26 = virtualinvoke $r25.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        $r27 = interfaceinvoke $r26.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r28 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r27.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r28);

        $r29 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r30 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnGlobalLayoutListener globalLayoutListener>;

        virtualinvoke $r29.<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>($r30);

        $r31 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r32 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnScrollChangedListener scrollChangedListener>;

        virtualinvoke $r31.<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>($r32);

        $r33 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r34 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnTouchModeChangeListener touchModeChangeListener>;

        virtualinvoke $r33.<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r34);

        return;
    }

    protected void onDetachedFromWindow()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.autofill.AndroidAutofill r1, $r4;
        androidx.compose.ui.node.OwnerSnapshotObserver $r2;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners $r3;
        androidx.compose.ui.autofill.AutofillCallback $r5;
        androidx.lifecycle.LifecycleOwner $r6;
        androidx.lifecycle.Lifecycle $r7;
        androidx.lifecycle.LifecycleObserver $r8;
        boolean $z3;
        android.view.ViewTreeObserver $r9, $r11, $r13;
        android.view.ViewTreeObserver$OnGlobalLayoutListener $r10;
        android.view.ViewTreeObserver$OnScrollChangedListener $r12;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r14;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        specialinvoke r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        $r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        virtualinvoke $r2.<androidx.compose.ui.node.OwnerSnapshotObserver: void stopObserving$ui_release()>();

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()>();

        if $r3 == null goto label1;

        $r6 = virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        if $r6 == null goto label1;

        $r7 = interfaceinvoke $r6.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        if $r7 == null goto label1;

        $r8 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r7.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>($r8);

        goto label1;

     label1:
        $z3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean autofillSupported()>();

        if $z3 == 0 goto label2;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>;

        if $r4 == null goto label2;

        r1 = $r4;

        $r5 = <androidx.compose.ui.autofill.AutofillCallback: androidx.compose.ui.autofill.AutofillCallback INSTANCE>;

        virtualinvoke $r5.<androidx.compose.ui.autofill.AutofillCallback: void unregister(androidx.compose.ui.autofill.AndroidAutofill)>(r1);

        goto label2;

     label2:
        $r9 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r10 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnGlobalLayoutListener globalLayoutListener>;

        virtualinvoke $r9.<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>($r10);

        $r11 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r12 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnScrollChangedListener scrollChangedListener>;

        virtualinvoke $r11.<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>($r12);

        $r13 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r14 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewTreeObserver$OnTouchModeChangeListener touchModeChangeListener>;

        virtualinvoke $r13.<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r14);

        return;
    }

    public void onProvideAutofillVirtualStructure(android.view.ViewStructure, int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.ViewStructure r1;
        int i0;
        boolean $z0;
        androidx.compose.ui.autofill.AndroidAutofill $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean autofillSupported()>();

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>;

        if $r2 == null goto label1;

        staticinvoke <androidx.compose.ui.autofill.AndroidAutofill_androidKt: void populateViewStructure(androidx.compose.ui.autofill.AndroidAutofill,android.view.ViewStructure)>($r2, r1);

        goto label1;

     label1:
        return;
    }

    public void autofill(android.util.SparseArray)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.util.SparseArray r1;
        boolean $z0;
        androidx.compose.ui.autofill.AndroidAutofill $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.util.SparseArray;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        $z0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean autofillSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.autofill.AndroidAutofill _autofill>;

        if $r2 == null goto label1;

        staticinvoke <androidx.compose.ui.autofill.AndroidAutofill_androidKt: void performAutofill(androidx.compose.ui.autofill.AndroidAutofill,android.util.SparseArray)>($r2, r1);

        goto label1;

     label1:
        return;
    }

    public boolean dispatchGenericMotionEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 != 8 goto label4;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(4194304);

        if $z0 == 0 goto label1;

        $z3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean handleRotaryEvent(android.view.MotionEvent)>(r1);

        goto label5;

     label1:
        $z1 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isBadMotionEvent(android.view.MotionEvent)>(r1);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z2 != 0 goto label3;

     label2:
        $z3 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        goto label5;

     label3:
        $i1 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int handleMotionEvent-8iAsVTc(android.view.MotionEvent)>(r1);

        $z3 = staticinvoke <androidx.compose.ui.input.pointer.ProcessResult: boolean getDispatchedToAPointerInputModifier-impl(int)>($i1);

        goto label5;

     label4:
        $z3 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

     label5:
        return $z3;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, $r4, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7;
        int $i0, $i1, i2;
        android.view.ViewParent $r2;
        java.lang.Runnable $r3, $r5;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "motionEvent");

        $z0 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived>;

        if $z0 == 0 goto label3;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean removeCallbacks(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        r6 = $r4;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i1 != 0 goto label1;

        $z6 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hasChangedDevices(android.view.MotionEvent,android.view.MotionEvent)>(r1, r6);

        if $z6 == 0 goto label2;

     label1:
        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>;

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

        goto label3;

     label2:
        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived> = 0;

     label3:
        $z7 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isBadMotionEvent(android.view.MotionEvent)>(r1);

        if $z7 != 0 goto label4;

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z1 != 0 goto label5;

     label4:
        return 0;

     label5:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 != 2 goto label6;

        $z4 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isPositionChanged(android.view.MotionEvent)>(r1);

        if $z4 != 0 goto label6;

        return 0;

     label6:
        i2 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int handleMotionEvent-8iAsVTc(android.view.MotionEvent)>(r1);

        $z2 = staticinvoke <androidx.compose.ui.input.pointer.ProcessResult: boolean getAnyMovementConsumed-impl(int)>(i2);

        if $z2 == 0 goto label7;

        $r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewParent getParent()>();

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(1);

     label7:
        $z3 = staticinvoke <androidx.compose.ui.input.pointer.ProcessResult: boolean getDispatchedToAPointerInputModifier-impl(int)>(i2);

        return $z3;
    }

    private final boolean handleRotaryEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        android.view.ViewConfiguration r2;
        float f0, $f1, $f2, $f3, $f4, $f5;
        androidx.compose.ui.input.rotary.RotaryScrollEvent r3, $r5;
        android.content.Context $r4, $r6, $r7;
        long $l0;
        androidx.compose.ui.focus.FocusManagerImpl $r8;
        androidx.compose.ui.focus.FocusModifier $r9;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        r2 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getAxisValue(int)>(26);

        f0 = neg $f1;

        $r5 = new androidx.compose.ui.input.rotary.RotaryScrollEvent;

        $r6 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        $f2 = staticinvoke <androidx.core.view.ViewConfigurationCompat: float getScaledVerticalScrollFactor(android.view.ViewConfiguration,android.content.Context)>(r2, $r6);

        $f3 = f0 * $f2;

        $r7 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        $f4 = staticinvoke <androidx.core.view.ViewConfigurationCompat: float getScaledHorizontalScrollFactor(android.view.ViewConfiguration,android.content.Context)>(r2, $r7);

        $f5 = f0 * $f4;

        $l0 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        specialinvoke $r5.<androidx.compose.ui.input.rotary.RotaryScrollEvent: void <init>(float,float,long)>($f3, $f5, $l0);

        r3 = $r5;

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        $r9 = virtualinvoke $r8.<androidx.compose.ui.focus.FocusManagerImpl: androidx.compose.ui.focus.FocusModifier getActiveFocusModifier$ui_release()>();

        if $r9 == null goto label1;

        $z0 = virtualinvoke $r9.<androidx.compose.ui.focus.FocusModifier: boolean propagateRotaryEvent(androidx.compose.ui.input.rotary.RotaryScrollEvent)>(r3);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private final int handleMotionEvent-8iAsVTc(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, r2, $r5;
        int i0, $i1, $i3, $i5, $i6, i7, i8, i9;
        boolean z2, z3, $z5, $z6, $z7, $z8, $z9;
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 $r3;
        java.lang.Runnable $r4;
        androidx.compose.ui.input.pointer.PointerIcon $r6;
        android.view.View $r7;
        androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsN $r8;
        long $l2, $l4;
        androidx.compose.ui.input.pointer.PointerInputEventProcessor $r9;
        java.lang.Throwable $r10, $r11, r14, r15;
        java.lang.String r12;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 resendMotionEventRunnable>;

        $r4 = (java.lang.Runnable) $r3;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean removeCallbacks(java.lang.Runnable)>($r4);

     label01:
        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowPosition(android.view.MotionEvent)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean forceUseMatrixCache> = 1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void measureAndLayout(boolean)>(0);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon desiredPointerIcon> = null;

        r12 = "AndroidOwner:onTouch";

        staticinvoke <android.os.Trace: void beginSection(java.lang.String)>(r12);

     label02:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        if r2 == null goto label04;

        $i5 = virtualinvoke r2.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i5 != 3 goto label03;

        $z8 = 1;

        goto label05;

     label03:
        $z8 = 0;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        z2 = $z8;

        if r2 == null goto label07;

        $z6 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hasChangedDevices(android.view.MotionEvent,android.view.MotionEvent)>(r1, r2);

        if $z6 == 0 goto label07;

        $z7 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isDevicePressEvent(android.view.MotionEvent)>(r2);

        if $z7 == 0 goto label06;

        $r9 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor>;

        virtualinvoke $r9.<androidx.compose.ui.input.pointer.PointerInputEventProcessor: void processCancel()>();

        goto label07;

     label06:
        $i3 = virtualinvoke r2.<android.view.MotionEvent: int getActionMasked()>();

        if $i3 == 10 goto label07;

        if z2 == 0 goto label07;

        $l4 = virtualinvoke r2.<android.view.MotionEvent: long getEventTime()>();

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void sendSimulatedEvent$default(androidx.compose.ui.platform.AndroidComposeView,android.view.MotionEvent,int,long,boolean,int,java.lang.Object)>(r0, r2, 10, $l4, 0, 8, null);

     label07:
        $i6 = virtualinvoke r1.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i6 != 3 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        z3 = $z9;

        if z2 != 0 goto label10;

        if z3 == 0 goto label10;

        if i0 == 3 goto label10;

        if i0 == 9 goto label10;

        $z5 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isInBounds(android.view.MotionEvent)>(r1);

        if $z5 == 0 goto label10;

        $l2 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void sendSimulatedEvent$default(androidx.compose.ui.platform.AndroidComposeView,android.view.MotionEvent,int,long,boolean,int,java.lang.Object)>(r0, r1, 9, $l2, 0, 8, null);

     label10:
        if r2 == null goto label11;

        virtualinvoke r2.<android.view.MotionEvent: void recycle()>();

        goto label11;

     label11:
        $r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent> = $r5;

        i7 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int sendMotionEvent-8iAsVTc(android.view.MotionEvent)>(r1);

     label12:
        staticinvoke <android.os.Trace: void endSection()>();

        goto label15;

     label13:
        $r11 := @caughtexception;

        r14 = $r11;

     label14:
        staticinvoke <android.os.Trace: void endSection()>();

        throw r14;

     label15:
        i8 = i7;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label16;

        $r8 = <androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsN: androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsN INSTANCE>;

        $r7 = (android.view.View) r0;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon desiredPointerIcon>;

        virtualinvoke $r8.<androidx.compose.ui.platform.AndroidComposeViewVerificationHelperMethodsN: void setPointerIcon(android.view.View,androidx.compose.ui.input.pointer.PointerIcon)>($r7, $r6);

     label16:
        i9 = i8;

     label17:
        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean forceUseMatrixCache> = 0;

        return i9;

     label18:
        $r10 := @caughtexception;

        r15 = $r10;

     label19:
        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean forceUseMatrixCache> = 0;

        throw r15;

        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private final boolean hasChangedDevices(android.view.MotionEvent, android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.MotionEvent;

        $i0 = virtualinvoke r2.<android.view.MotionEvent: int getSource()>();

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r2.<android.view.MotionEvent: int getToolType(int)>(0);

        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i2 == $i3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private final boolean isDevicePressEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getButtonState()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        lookupswitch($i1)
        {
            case 0: goto label2;
            case 2: goto label2;
            case 6: goto label2;
            default: goto label3;
        };

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private final int sendMotionEvent-8iAsVTc(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        androidx.compose.ui.input.pointer.PointerInputEvent r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        java.util.ListIterator r3;
        androidx.compose.ui.input.pointer.PointerInputEventData r4, $r8;
        boolean $z1, $z2, $z3, $z4, $z5;
        androidx.compose.ui.input.pointer.PositionCalculator $r5, $r10;
        androidx.compose.ui.input.pointer.MotionEventAdapter $r6, $r11;
        androidx.compose.ui.input.pointer.PointerInputEventProcessor $r7, $r9;
        androidx.compose.ui.platform.WindowInfoImpl $r12;
        java.util.List $r13;
        java.lang.Object r14, $r15;
        long l6;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $z1 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean keyboardModifiersRequireUpdate>;

        if $z1 == 0 goto label1;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean keyboardModifiersRequireUpdate> = 0;

        $r12 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.WindowInfoImpl _windowInfo>;

        $i4 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        $i5 = staticinvoke <androidx.compose.ui.input.pointer.PointerKeyboardModifiers: int constructor-impl(int)>($i4);

        virtualinvoke $r12.<androidx.compose.ui.platform.WindowInfoImpl: void setKeyboardModifiers-5xRPYO0(int)>($i5);

     label1:
        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.MotionEventAdapter motionEventAdapter>;

        $r5 = (androidx.compose.ui.input.pointer.PositionCalculator) r0;

        r2 = virtualinvoke $r6.<androidx.compose.ui.input.pointer.MotionEventAdapter: androidx.compose.ui.input.pointer.PointerInputEvent convertToPointerInputEvent$ui_release(android.view.MotionEvent,androidx.compose.ui.input.pointer.PositionCalculator)>(r1, $r5);

        if r2 == null goto label8;

        $r13 = virtualinvoke r2.<androidx.compose.ui.input.pointer.PointerInputEvent: java.util.List getPointers()>();

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        r3 = interfaceinvoke $r13.<java.util.List: java.util.ListIterator listIterator(int)>($i1);

     label2:
        $z2 = interfaceinvoke r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z2 == 0 goto label3;

        r14 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        r4 = (androidx.compose.ui.input.pointer.PointerInputEventData) r14;

        $z5 = virtualinvoke r4.<androidx.compose.ui.input.pointer.PointerInputEventData: boolean getDown()>();

        if $z5 == 0 goto label2;

        $r15 = r14;

        goto label4;

     label3:
        $r15 = null;

     label4:
        $r8 = (androidx.compose.ui.input.pointer.PointerInputEventData) $r15;

        if $r8 == null goto label5;

        l6 = virtualinvoke $r8.<androidx.compose.ui.input.pointer.PointerInputEventData: long getPosition-F1C5BW0()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastDownPointerPosition> = l6;

        goto label5;

     label5:
        $r9 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor>;

        $r10 = (androidx.compose.ui.input.pointer.PositionCalculator) r0;

        $z3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isInBounds(android.view.MotionEvent)>(r1);

        i0 = virtualinvoke $r9.<androidx.compose.ui.input.pointer.PointerInputEventProcessor: int process-BIzXfog(androidx.compose.ui.input.pointer.PointerInputEvent,androidx.compose.ui.input.pointer.PositionCalculator,boolean)>(r2, $r10, $z3);

        $i7 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i7 == 0 goto label6;

        if $i7 != 5 goto label7;

     label6:
        $z4 = staticinvoke <androidx.compose.ui.input.pointer.ProcessResult: boolean getDispatchedToAPointerInputModifier-impl(int)>(i0);

        if $z4 != 0 goto label7;

        $r11 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.MotionEventAdapter motionEventAdapter>;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>($i2);

        virtualinvoke $r11.<androidx.compose.ui.input.pointer.MotionEventAdapter: void endStream(int)>($i3);

     label7:
        $i8 = i0;

        goto label9;

     label8:
        $r7 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor>;

        virtualinvoke $r7.<androidx.compose.ui.input.pointer.PointerInputEventProcessor: void processCancel()>();

        $i8 = staticinvoke <androidx.compose.ui.input.pointer.PointerInputEventProcessorKt: int ProcessResult(boolean,boolean)>(0, 0);

     label9:
        return $i8;
    }

    private final void sendSimulatedEvent(android.view.MotionEvent, int, long, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, r16;
        int i0, i2, i3, i4, $i6, $i10, $i11, $i12, $i13, $i14, $i16, $i17, i19, i20, i21, i22, i23, i25, $i27, i28;
        long l1, l5, $l7, $l8, l26, $l29, l30;
        boolean z0;
        android.view.MotionEvent$PointerProperties[] r2, r12;
        androidx.compose.ui.input.pointer.PointerInputEvent r3, $r6;
        byte $b9, $b18, $b24;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        androidx.compose.ui.input.pointer.MotionEventAdapter $r4;
        androidx.compose.ui.input.pointer.PositionCalculator $r5, $r7;
        androidx.compose.ui.input.pointer.PointerInputEventProcessor $r8;
        android.view.MotionEvent$PointerProperties $r9, $r11;
        android.view.MotionEvent$PointerCoords $r10, r15;
        android.view.MotionEvent$PointerCoords[] r13, r14;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        lookupswitch(i2)
        {
            case 1: goto label01;
            case 6: goto label04;
            default: goto label05;
        };

     label01:
        tableswitch(i0)
        {
            case 9: goto label02;
            case 10: goto label02;
            default: goto label03;
        };

     label02:
        $i17 = -1;

        goto label06;

     label03:
        $i17 = 0;

        goto label06;

     label04:
        $i17 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        goto label06;

     label05:
        $i17 = -1;

     label06:
        i3 = $i17;

        $i6 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if i3 < 0 goto label07;

        $b18 = 1;

        goto label08;

     label07:
        $b18 = 0;

     label08:
        i4 = $i6 - $b18;

        if i4 != 0 goto label09;

        return;

     label09:
        i19 = 0;

        r12 = newarray (android.view.MotionEvent$PointerProperties)[i4];

     label10:
        if i19 >= i4 goto label11;

        i20 = i19;

        $r11 = new android.view.MotionEvent$PointerProperties;

        specialinvoke $r11.<android.view.MotionEvent$PointerProperties: void <init>()>();

        r12[i20] = $r11;

        i19 = i19 + 1;

        goto label10;

     label11:
        r2 = r12;

        i21 = 0;

        r13 = newarray (android.view.MotionEvent$PointerCoords)[i4];

     label12:
        if i21 >= i4 goto label13;

        i22 = i21;

        $r10 = new android.view.MotionEvent$PointerCoords;

        specialinvoke $r10.<android.view.MotionEvent$PointerCoords: void <init>()>();

        r13[i22] = $r10;

        i21 = i21 + 1;

        goto label12;

     label13:
        r14 = r13;

        i23 = 0;

     label14:
        if i23 >= i4 goto label18;

        $i16 = i23;

        if i3 < 0 goto label15;

        if i23 >= i3 goto label16;

     label15:
        $b24 = 0;

        goto label17;

     label16:
        $b24 = 1;

     label17:
        i25 = $i16 + $b24;

        $r9 = r2[i23];

        virtualinvoke r1.<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>(i25, $r9);

        r15 = r14[i23];

        virtualinvoke r1.<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>(i25, r15);

        $f3 = r15.<android.view.MotionEvent$PointerCoords: float x>;

        $f2 = r15.<android.view.MotionEvent$PointerCoords: float y>;

        l26 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f3, $f2);

        l5 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: long localToScreen-MK-Hz9U(long)>(l26);

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l5);

        r15.<android.view.MotionEvent$PointerCoords: float x> = $f4;

        $f5 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l5);

        r15.<android.view.MotionEvent$PointerCoords: float y> = $f5;

        i23 = i23 + 1;

        goto label14;

     label18:
        if z0 == 0 goto label19;

        $i27 = 0;

        goto label20;

     label19:
        $i27 = virtualinvoke r1.<android.view.MotionEvent: int getButtonState()>();

     label20:
        i28 = $i27;

        $l7 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

        $l8 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label21;

        $l29 = l1;

        goto label22;

     label21:
        $l29 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

     label22:
        l30 = $l29;

        $i10 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getXPrecision()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getYPrecision()>();

        $i11 = virtualinvoke r1.<android.view.MotionEvent: int getDeviceId()>();

        $i12 = virtualinvoke r1.<android.view.MotionEvent: int getEdgeFlags()>();

        $i13 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        $i14 = virtualinvoke r1.<android.view.MotionEvent: int getFlags()>();

        r16 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>(l30, l1, i0, i4, r2, r14, $i10, i28, $f0, $f1, $i11, $i12, $i13, $i14);

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.MotionEventAdapter motionEventAdapter>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r16, "event");

        $r5 = (androidx.compose.ui.input.pointer.PositionCalculator) r0;

        $r6 = virtualinvoke $r4.<androidx.compose.ui.input.pointer.MotionEventAdapter: androidx.compose.ui.input.pointer.PointerInputEvent convertToPointerInputEvent$ui_release(android.view.MotionEvent,androidx.compose.ui.input.pointer.PositionCalculator)>(r16, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        r3 = $r6;

        $r8 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerInputEventProcessor pointerInputEventProcessor>;

        $r7 = (androidx.compose.ui.input.pointer.PositionCalculator) r0;

        virtualinvoke $r8.<androidx.compose.ui.input.pointer.PointerInputEventProcessor: int process-BIzXfog(androidx.compose.ui.input.pointer.PointerInputEvent,androidx.compose.ui.input.pointer.PositionCalculator,boolean)>(r3, $r7, 1);

        virtualinvoke r16.<android.view.MotionEvent: void recycle()>();

        return;
    }

    static void sendSimulatedEvent$default(androidx.compose.ui.platform.AndroidComposeView, android.view.MotionEvent, int, long, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        int i0, i2, $i3;
        long l1;
        java.lang.Object r2;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        r2 := @parameter6: java.lang.Object;

        $i3 = i2 & 8;

        if $i3 == 0 goto label1;

        z0 = 1;

     label1:
        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void sendSimulatedEvent(android.view.MotionEvent,int,long,boolean)>(r1, i0, l1, z0);

        return;
    }

    public boolean canScrollHorizontally(int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0;
        long $l1;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        $l1 = r0.<androidx.compose.ui.platform.AndroidComposeView: long lastDownPointerPosition>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: boolean canScroll-0AR0LA0$ui_release(boolean,int,long)>(0, i0, $l1);

        return $z0;
    }

    public boolean canScrollVertically(int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0;
        long $l1;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        $l1 = r0.<androidx.compose.ui.platform.AndroidComposeView: long lastDownPointerPosition>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: boolean canScroll-0AR0LA0$ui_release(boolean,int,long)>(1, i0, $l1);

        return $z0;
    }

    private final boolean isInBounds(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        float f0, f1, $f2, $f3;
        byte $b0, $b1, $b3, $b5;
        int $i2, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $b0 = 0.0F cmpg f0;

        if $b0 > 0 goto label2;

        $i4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getWidth()>();

        $f3 = (float) $i4;

        $b5 = f0 cmpg $f3;

        if $b5 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label7;

        $b1 = 0.0F cmpg f1;

        if $b1 > 0 goto label5;

        $i2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getHeight()>();

        $f2 = (float) $i2;

        $b3 = f1 cmpg $f2;

        if $b3 > 0 goto label4;

        $z1 = 1;

        goto label6;

     label4:
        $z1 = 0;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    public long localToScreen-MK-Hz9U(long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, l1, $l2, $l3, $l4;
        float[] $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowPosition()>();

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>;

        l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r1, l0);

        $f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l1);

        $l2 = r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition>;

        $f1 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>($l2);

        $f2 = $f0 + $f1;

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l1);

        $l3 = r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition>;

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>($l3);

        $f5 = $f3 + $f4;

        $l4 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f2, $f5);

        return $l4;
    }

    public long screenToLocal-MK-Hz9U(long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, $l1, $l2, $l3, $l4;
        float f0, f1, $f2, $f3, $f4, $f5;
        float[] $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowPosition()>();

        $f2 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        $l1 = r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition>;

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>($l1);

        f0 = $f2 - $f3;

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $l2 = r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition>;

        $f5 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>($l2);

        f1 = $f4 - $f5;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] windowToViewMatrix>;

        $l3 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>(f0, f1);

        $l4 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r1, $l3);

        return $l4;
    }

    private final void recalculateWindowPosition()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, $l1, $l7;
        float f0, f1, f2, f3, $f4, $f5;
        boolean $z0, $z1;
        byte $b2;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        int $i3, $i4, $i5, $i6;
        android.view.ViewGroup $r7;
        android.view.ViewParent r8;
        android.view.View r9;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $z0 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean forceUseMatrixCache>;

        if $z0 != 0 goto label3;

        l0 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $l1 = r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime>;

        $b2 = l0 cmp $l1;

        if $b2 == 0 goto label3;

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime> = l0;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowViewTransforms()>();

        r8 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.ViewParent getParent()>();

        r9 = (android.view.View) r0;

     label1:
        $z1 = r8 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        r9 = (android.view.View) r8;

        $r7 = (android.view.ViewGroup) r9;

        r8 = virtualinvoke $r7.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label2:
        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        virtualinvoke r9.<android.view.View: void getLocationOnScreen(int[])>($r1);

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i3 = $r2[0];

        f0 = (float) $i3;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i4 = $r3[1];

        f1 = (float) $i4;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        virtualinvoke r9.<android.view.View: void getLocationInWindow(int[])>($r4);

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i5 = $r5[0];

        f2 = (float) $i5;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: int[] tmpPositionArray>;

        $i6 = $r6[1];

        f3 = (float) $i6;

        $f5 = f0 - f2;

        $f4 = f1 - f3;

        $l7 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f5, $f4);

        r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition> = $l7;

     label3:
        return;
    }

    private final void recalculateWindowPosition(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        long l0, $l1, $l2, $l3;
        float[] $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $l1 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView: long lastMatrixRecalculationAnimationTime> = $l1;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowViewTransforms()>();

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $l2 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f0, $f1);

        l0 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r2, $l2);

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        $f4 = $f2 - $f3;

        $f5 = virtualinvoke r1.<android.view.MotionEvent: float getRawY()>();

        $f6 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $f7 = $f5 - $f6;

        $l3 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f4, $f7);

        r0.<androidx.compose.ui.platform.AndroidComposeView: long windowPosition> = $l3;

        return;
    }

    private final void recalculateWindowViewTransforms()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        float[] $r1, $r4, $r5;
        android.view.View $r2;
        androidx.compose.ui.platform.CalculateMatrixToWindow $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.CalculateMatrixToWindow matrixToWindow>;

        $r2 = (android.view.View) r0;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>;

        interfaceinvoke $r3.<androidx.compose.ui.platform.CalculateMatrixToWindow: void calculateMatrixToWindow-EL8BTi8(android.view.View,float[])>($r2, $r1);

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] windowToViewMatrix>;

        staticinvoke <androidx.compose.ui.platform.InvertMatrixKt: boolean invertTo-JiSxe2E(float[],float[])>($r5, $r4);

        return;
    }

    public boolean onCheckIsTextEditor()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.text.input.TextInputServiceAndroid $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.text.input.TextInputServiceAndroid: boolean isEditorFocused()>();

        return $z0;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.inputmethod.EditorInfo r1;
        androidx.compose.ui.text.input.TextInputServiceAndroid $r2;
        android.view.inputmethod.InputConnection $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "outAttrs");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.text.input.TextInputServiceAndroid textInputServiceAndroid>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.text.input.TextInputServiceAndroid: android.view.inputmethod.InputConnection createInputConnection(android.view.inputmethod.EditorInfo)>(r1);

        return $r3;
    }

    public long calculateLocalPosition-MK-Hz9U(long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, $l1;
        float[] $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowPosition()>();

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] windowToViewMatrix>;

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r1, l0);

        return $l1;
    }

    public long calculatePositionInWindow-MK-Hz9U(long)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        long l0, $l1;
        float[] $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void recalculateWindowPosition()>();

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: float[] viewToWindowMatrix>;

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r1, l0);

        return $l1;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.content.res.Configuration r1;
        android.content.Context $r2, $r6;
        androidx.compose.ui.unit.Density $r3;
        int $i0, $i1, $i2;
        kotlin.jvm.functions.Function1 $r4;
        androidx.compose.ui.text.font.FontFamily$Resolver $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.content.res.Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "newConfig");

        specialinvoke r0.<android.view.ViewGroup: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        $r2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "context");

        $r3 = staticinvoke <androidx.compose.ui.unit.AndroidDensity_androidKt: androidx.compose.ui.unit.Density Density(android.content.Context)>($r2);

        r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density density> = $r3;

        $i0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getFontWeightAdjustmentCompat(android.content.res.Configuration)>(r1);

        $i1 = r0.<androidx.compose.ui.platform.AndroidComposeView: int currentFontWeightAdjustment>;

        if $i0 == $i1 goto label1;

        $i2 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int getFontWeightAdjustmentCompat(android.content.res.Configuration)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: int currentFontWeightAdjustment> = $i2;

        $r6 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "context");

        $r7 = staticinvoke <androidx.compose.ui.text.font.FontFamilyResolver_androidKt: androidx.compose.ui.text.font.FontFamily$Resolver createFontFamilyResolver(android.content.Context)>($r6);

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setFontFamilyResolver(androidx.compose.ui.text.font.FontFamily$Resolver)>($r7);

     label1:
        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: kotlin.jvm.functions.Function1 configurationChangeObserver>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        return;
    }

    public void onRtlPropertiesChanged(int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0;
        androidx.compose.ui.unit.LayoutDirection r1;
        boolean $z1;
        androidx.compose.ui.focus.FocusManagerImpl $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        $z1 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean superclassInitComplete>;

        if $z1 == 0 goto label1;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView_androidKt: androidx.compose.ui.unit.LayoutDirection access$layoutDirectionFromInt(int)>(i0);

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)>(r1);

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        virtualinvoke $r2.<androidx.compose.ui.focus.FocusManagerImpl: void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)>(r1);

     label1:
        return;
    }

    private final boolean autofillSupported()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z9;
        java.lang.Runnable $r4, $r6, $r7;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat $r5;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        $z0 = r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived>;

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean removeCallbacks(java.lang.Runnable)>($r6);

        $r7 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>;

        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

     label1:
        $z1 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isBadMotionEvent(android.view.MotionEvent)>(r1);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isAttachedToWindow()>();

        if $z2 != 0 goto label3;

     label2:
        return 0;

     label3:
        $z3 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(4098);

        if $z3 == 0 goto label4;

        $i4 = virtualinvoke r1.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i4 != 1 goto label4;

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat accessibilityDelegate>;

        $z7 = virtualinvoke $r5.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        return $z7;

     label4:
        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        tableswitch($i1)
        {
            case 7: goto label8;
            case 8: goto label9;
            case 9: goto label9;
            case 10: goto label5;
            default: goto label9;
        };

     label5:
        $z4 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isInBounds(android.view.MotionEvent)>(r1);

        if $z4 == 0 goto label9;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i2 == 3 goto label7;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        if $r2 == null goto label6;

        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        goto label6;

     label6:
        $r3 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r1);

        r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent> = $r3;

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived> = 1;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView: java.lang.Runnable sendHoverExitEvent>;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean post(java.lang.Runnable)>($r4);

        return 0;

     label7:
        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getButtonState()>();

        if $i3 == 0 goto label9;

        return 0;

     label8:
        $z6 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: boolean isPositionChanged(android.view.MotionEvent)>(r1);

        if $z6 != 0 goto label9;

        return 0;

     label9:
        i0 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int handleMotionEvent-8iAsVTc(android.view.MotionEvent)>(r1);

        $z9 = staticinvoke <androidx.compose.ui.input.pointer.ProcessResult: boolean getDispatchedToAPointerInputModifier-impl(int)>(i0);

        return $z9;
    }

    private final boolean isBadMotionEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        float f0, f1, f2, f3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z0 != 0 goto label01;

        $z7 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z7 != 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        if $z8 == 0 goto label09;

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f1);

        if $z1 != 0 goto label03;

        $z6 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z6 != 0 goto label03;

        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        if $z9 == 0 goto label09;

        f2 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();

        $z2 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f2);

        if $z2 != 0 goto label05;

        $z5 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f2);

        if $z5 != 0 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        if $z10 == 0 goto label09;

        f3 = virtualinvoke r1.<android.view.MotionEvent: float getRawY()>();

        $z3 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f3);

        if $z3 != 0 goto label07;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f3);

        if $z4 != 0 goto label07;

        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        if $z11 != 0 goto label10;

     label09:
        $z12 = 1;

        goto label11;

     label10:
        $z12 = 0;

     label11:
        return $z12;
    }

    private final boolean isPositionChanged(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        byte $b1, $b2;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if $i0 == 1 goto label1;

        return 1;

     label1:
        r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        if r2 == null goto label6;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();

        $f1 = virtualinvoke r2.<android.view.MotionEvent: float getRawX()>();

        $b1 = $f0 cmpg $f1;

        if $b1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label6;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getRawY()>();

        $f3 = virtualinvoke r2.<android.view.MotionEvent: float getRawY()>();

        $b2 = $f2 cmpg $f3;

        if $b2 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 != 0 goto label7;

     label6:
        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    private final android.view.View findViewByAccessibilityIdRootedAtCurrentView(int, android.view.View)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0, i1, $i2, i3;
        android.view.View r1, r3, $r11;
        java.lang.reflect.Method r2;
        java.lang.Class[] $r4;
        java.lang.Class $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        java.lang.Integer $r8;
        boolean $z0, $z1;
        android.view.ViewGroup $r9, $r10;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 29 goto label4;

        $r5 = class "Landroid/view/View;";

        $r4 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getAccessibilityViewId", $r4);

        virtualinvoke r2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r6);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        i3 = 0;

        $r9 = (android.view.ViewGroup) r1;

        i1 = virtualinvoke $r9.<android.view.ViewGroup: int getChildCount()>();

     label2:
        if i3 >= i1 goto label4;

        $r10 = (android.view.ViewGroup) r1;

        $r11 = virtualinvoke $r10.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "currentView.getChildAt(i)");

        r3 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.View findViewByAccessibilityIdRootedAtCurrentView(int,android.view.View)>(i0, $r11);

        if r3 == null goto label3;

        return r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public androidx.compose.ui.input.pointer.PointerIconService getPointerIconService()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.input.pointer.PointerIconService $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIconService pointerIconService>;

        return $r1;
    }

    public final android.view.View findViewByAccessibilityIdTraversal(int)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        int i0, $i1;
        java.lang.Object[] r1;
        android.view.View $r2, $r10;
        java.lang.Class $r3, $r4;
        java.lang.Integer $r5;
        boolean $z0;
        java.lang.Throwable $r6, r11;
        java.lang.Class[] r7;
        java.lang.reflect.Method r8;
        java.lang.Object r9;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        i0 := @parameter0: int;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label3;

        $r4 = class "Landroid/view/View;";

        r7 = newarray (java.lang.Class)[1];

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        r7[0] = $r3;

        r8 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("findViewByAccessibilityIdTraversal", r7);

        virtualinvoke r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        r1 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r5;

        r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r1);

        $z0 = r9 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r10 = (android.view.View) r9;

        goto label4;

     label2:
        $r10 = null;

        goto label4;

     label3:
        $r2 = (android.view.View) r0;

        $r10 = specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.View findViewByAccessibilityIdRootedAtCurrentView(int,android.view.View)>(i0, $r2);

     label4:
        return $r10;

     label5:
        $r6 := @caughtexception;

        r11 = $r6;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label5 with label5;
    }

    public boolean isLifecycleInResumedState()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r1;
        androidx.lifecycle.LifecycleOwner r2;
        androidx.lifecycle.Lifecycle r3;
        androidx.lifecycle.Lifecycle$State $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners getViewTreeOwners()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner getLifecycleOwner()>();

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        if $r4 != $r5 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public boolean shouldDelayChildPressedState()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        return 0;
    }

    private static final void globalLayoutListener$lambda-1(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void updatePositionCacheAndDispatch()>();

        return;
    }

    private static final void scrollChangedListener$lambda-2(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: void updatePositionCacheAndDispatch()>();

        return;
    }

    private static final void touchModeChangeListener$lambda-3(androidx.compose.ui.platform.AndroidComposeView, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        boolean z0;
        androidx.compose.ui.input.InputMode$Companion $r1, $r4;
        androidx.compose.ui.input.InputModeManagerImpl $r2;
        androidx.compose.ui.focus.FocusManagerImpl $r3;
        int $i0;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.InputModeManagerImpl _inputModeManager>;

        if z0 == 0 goto label1;

        $r4 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i0 = virtualinvoke $r4.<androidx.compose.ui.input.InputMode$Companion: int getTouch-aOaMEAU()>();

        goto label2;

     label1:
        $r1 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.input.InputMode$Companion: int getKeyboard-aOaMEAU()>();

     label2:
        virtualinvoke $r2.<androidx.compose.ui.input.InputModeManagerImpl: void setInputMode-iuPiT84(int)>($i0);

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManagerImpl _focusManager>;

        virtualinvoke $r3.<androidx.compose.ui.focus.FocusManagerImpl: void fetchUpdatedFocusProperties()>();

        return;
    }

    private static final void sendHoverExitEvent$lambda-5(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        android.view.MotionEvent r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        r0.<androidx.compose.ui.platform.AndroidComposeView: boolean hoverExitReceived> = 0;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        r1 = $r2;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 != 10 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r5 = "The ACTION_HOVER_EXIT event was not cleared.";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label3:
        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: int sendMotionEvent-8iAsVTc(android.view.MotionEvent)>(r1);

        return;
    }

    public volatile androidx.compose.ui.platform.ClipboardManager getClipboardManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidClipboardManager $r1;
        androidx.compose.ui.platform.ClipboardManager $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidClipboardManager getClipboardManager()>();

        $r2 = (androidx.compose.ui.platform.ClipboardManager) $r1;

        return $r2;
    }

    public volatile androidx.compose.ui.platform.AccessibilityManager getAccessibilityManager()
    {
        androidx.compose.ui.platform.AndroidComposeView r0;
        androidx.compose.ui.platform.AndroidAccessibilityManager $r1;
        androidx.compose.ui.platform.AccessibilityManager $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidAccessibilityManager getAccessibilityManager()>();

        $r2 = (androidx.compose.ui.platform.AccessibilityManager) $r1;

        return $r2;
    }

    public static final java.lang.Class access$getSystemPropertiesClass$cp()
    {
        java.lang.Class $r0;

        $r0 = <androidx.compose.ui.platform.AndroidComposeView: java.lang.Class systemPropertiesClass>;

        return $r0;
    }

    public static final void access$setSystemPropertiesClass$cp(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        <androidx.compose.ui.platform.AndroidComposeView: java.lang.Class systemPropertiesClass> = r0;

        return;
    }

    public static final void access$setGetBooleanMethod$cp(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        <androidx.compose.ui.platform.AndroidComposeView: java.lang.reflect.Method getBooleanMethod> = r0;

        return;
    }

    public static final java.lang.reflect.Method access$getGetBooleanMethod$cp()
    {
        java.lang.reflect.Method $r0;

        $r0 = <androidx.compose.ui.platform.AndroidComposeView: java.lang.reflect.Method getBooleanMethod>;

        return $r0;
    }

    public static final android.view.MotionEvent access$getPreviousMotionEvent$p(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        android.view.MotionEvent $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent previousMotionEvent>;

        return $r1;
    }

    public static final void access$sendSimulatedEvent(androidx.compose.ui.platform.AndroidComposeView, android.view.MotionEvent, int, long, boolean)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        android.view.MotionEvent r1;
        int i0;
        long l1;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter1: android.view.MotionEvent;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView: void sendSimulatedEvent(android.view.MotionEvent,int,long,boolean)>(r1, i0, l1, z0);

        return;
    }

    public static final long access$getRelayoutTime$p(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        $l0 = $r0.<androidx.compose.ui.platform.AndroidComposeView: long relayoutTime>;

        return $l0;
    }

    public static final void access$setRelayoutTime$p(androidx.compose.ui.platform.AndroidComposeView, long)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        l0 := @parameter1: long;

        $r0.<androidx.compose.ui.platform.AndroidComposeView: long relayoutTime> = l0;

        return;
    }

    public static final androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 access$getResendMotionEventRunnable$p(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 resendMotionEventRunnable>;

        return $r1;
    }

    public static final androidx.compose.ui.input.pointer.PointerIcon access$getDesiredPointerIcon$p(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        androidx.compose.ui.input.pointer.PointerIcon $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon desiredPointerIcon>;

        return $r1;
    }

    public static final void access$setDesiredPointerIcon$p(androidx.compose.ui.platform.AndroidComposeView, androidx.compose.ui.input.pointer.PointerIcon)
    {
        androidx.compose.ui.platform.AndroidComposeView $r0;
        androidx.compose.ui.input.pointer.PointerIcon r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r1 := @parameter1: androidx.compose.ui.input.pointer.PointerIcon;

        $r0.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon desiredPointerIcon> = r1;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidComposeView$Companion $r0;

        $r0 = new androidx.compose.ui.platform.AndroidComposeView$Companion;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$Companion Companion> = $r0;

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1
<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.node.LayoutNode $layoutNode>
<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>
<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView $thisView>
    void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.platform.AndroidComposeView, androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.platform.AndroidComposeView $r2, $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r2 := @parameter1: androidx.compose.ui.platform.AndroidComposeView;

        $r3 := @parameter2: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.node.LayoutNode $layoutNode> = $r1;

        r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r2;

        r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView $thisView> = $r3;

        specialinvoke r0.<androidx.core.view.AccessibilityDelegateCompat: void <init>()>();

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View, androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    {
        androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1 r0;
        android.view.View r1, $r11;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat r2;
        androidx.compose.ui.semantics.SemanticsNode $r3, $r6, $r9;
        androidx.compose.ui.node.LayoutNode $r4;
        androidx.compose.ui.node.SemanticsModifierNode $r5;
        androidx.compose.ui.platform.AndroidComposeView $r7, $r10;
        androidx.compose.ui.semantics.SemanticsOwner $r8;
        int $i0, i1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "host");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "info");

        specialinvoke r0.<androidx.core.view.AccessibilityDelegateCompat: void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)>(r1, r2);

        $r3 = new androidx.compose.ui.semantics.SemanticsNode;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.node.LayoutNode $layoutNode>;

        $r5 = staticinvoke <androidx.compose.ui.semantics.SemanticsNodeKt: androidx.compose.ui.node.SemanticsModifierNode getOuterSemantics(androidx.compose.ui.node.LayoutNode)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        specialinvoke $r3.<androidx.compose.ui.semantics.SemanticsNode: void <init>(androidx.compose.ui.node.SemanticsModifierNode,boolean,androidx.compose.ui.node.LayoutNode,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r5, 0, null, 4, null);

        $r6 = virtualinvoke $r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsNode getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        i1 = virtualinvoke $r6.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        $r7 = r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.semantics.SemanticsOwner getSemanticsOwner()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.semantics.SemanticsOwner: androidx.compose.ui.semantics.SemanticsNode getUnmergedRootSemanticsNode()>();

        $i0 = virtualinvoke $r9.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        if i1 != $i0 goto label1;

        i1 = -1;

     label1:
        $r10 = r0.<androidx.compose.ui.platform.AndroidComposeView$addAndroidView$1: androidx.compose.ui.platform.AndroidComposeView $thisView>;

        $r11 = (android.view.View) $r10;

        virtualinvoke r2.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void setParent(android.view.View,int)>($r11, i1);

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$Companion
    private void <init>()
    {
        androidx.compose.ui.platform.AndroidComposeView$Companion r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final boolean getIsShowingLayoutBounds()
    {
        androidx.compose.ui.platform.AndroidComposeView$Companion r0;
        java.lang.Object[] r1;
        java.lang.Class $r2, $r4, $r5, $r6;
        boolean $z0, $z1, z2;
        java.lang.Boolean $r3, $r13;
        java.lang.Throwable $r7, r14;
        java.lang.Class[] r8;
        java.lang.reflect.Method $r9, $r10;
        java.lang.Object $r11, r12;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$Companion;

     label01:
        $r2 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: java.lang.Class access$getSystemPropertiesClass$cp()>();

        if $r2 != null goto label04;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.os.SystemProperties");

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void access$setSystemPropertiesClass$cp(java.lang.Class)>($r4);

        $r5 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: java.lang.Class access$getSystemPropertiesClass$cp()>();

        if $r5 == null goto label02;

        r8 = newarray (java.lang.Class)[2];

        r8[0] = class "Ljava/lang/String;";

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        r8[1] = $r6;

        $r9 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getBoolean", r8);

        goto label03;

     label02:
        $r9 = null;

     label03:
        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void access$setGetBooleanMethod$cp(java.lang.reflect.Method)>($r9);

     label04:
        $r10 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: java.lang.reflect.Method access$getGetBooleanMethod$cp()>();

        if $r10 == null goto label05;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "debug.layout";

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r1[1] = $r3;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r1);

        goto label06;

     label05:
        $r11 = null;

     label06:
        r12 = $r11;

        $z0 = r12 instanceof java.lang.Boolean;

        if $z0 == 0 goto label07;

        $r13 = (java.lang.Boolean) r12;

        goto label08;

     label07:
        $r13 = null;

     label08:
        if $r13 == null goto label09;

        $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        goto label10;

     label09:
        $z1 = 0;

     label10:
        z2 = $z1;

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        r14 = $r7;

        z2 = 0;

     label13:
        return z2;

        catch java.lang.Exception from label01 to label11 with label12;
    }

    public static final boolean access$getIsShowingLayoutBounds(androidx.compose.ui.platform.AndroidComposeView$Companion)
    {
        androidx.compose.ui.platform.AndroidComposeView$Companion $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidComposeView$Companion;

        $z0 = specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView$Companion: boolean getIsShowingLayoutBounds()>();

        return $z0;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.platform.AndroidComposeView$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1
<androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(android.content.res.Configuration)
    {
        androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 r0;
        android.content.res.Configuration r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1;

        r1 := @parameter0: android.content.res.Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 r0;
        java.lang.Object r1;
        android.content.res.Configuration $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.content.res.Configuration) r1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1: void invoke(android.content.res.Configuration)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 $r0;

        $r0 = new androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1: void <init>()>();

        <androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1: androidx.compose.ui.platform.AndroidComposeView$configurationChangeObserver$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1
<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke-ZmokQxo(android.view.KeyEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1 r0;
        android.view.KeyEvent r1;
        androidx.compose.ui.focus.FocusDirection r2;
        androidx.compose.ui.platform.AndroidComposeView $r3, $r6;
        java.lang.Boolean $r4, $r8;
        int $i0, $i1, $i2;
        androidx.compose.ui.input.key.KeyEventType$Companion $r5;
        boolean $z0, $z1;
        androidx.compose.ui.focus.FocusManager $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1;

        r1 := @parameter0: android.view.KeyEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        r2 = virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusDirection getFocusDirection-P8AzH3I(android.view.KeyEvent)>(r1);

        if r2 == null goto label1;

        $i0 = staticinvoke <androidx.compose.ui.input.key.KeyEvent_androidKt: int getType-ZmokQxo(android.view.KeyEvent)>(r1);

        $r5 = <androidx.compose.ui.input.key.KeyEventType: androidx.compose.ui.input.key.KeyEventType$Companion Companion>;

        $i1 = virtualinvoke $r5.<androidx.compose.ui.input.key.KeyEventType$Companion: int getKeyDown-CS__XNY()>();

        $z0 = staticinvoke <androidx.compose.ui.input.key.KeyEventType: boolean equals-impl0(int,int)>($i0, $i1);

        if $z0 != 0 goto label2;

     label1:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r4;

     label2:
        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.focus.FocusManager getFocusManager()>();

        $i2 = virtualinvoke r2.<androidx.compose.ui.focus.FocusDirection: int unbox-impl()>();

        $z1 = interfaceinvoke $r7.<androidx.compose.ui.focus.FocusManager: boolean moveFocus-3ESFkO8(int)>($i2);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r8;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.input.key.KeyEvent $r2;
        android.view.KeyEvent $r3;
        java.lang.Boolean $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.input.key.KeyEvent) r1;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.input.key.KeyEvent: android.view.KeyEvent unbox-impl()>();

        $r4 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$keyInputModifier$1: java.lang.Boolean invoke-ZmokQxo(android.view.KeyEvent)>($r3);

        return $r4;
    }

androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1
<androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.compose.ui.input.pointer.PointerIcon getCurrent()
    {
        androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;
        androidx.compose.ui.input.pointer.PointerIconDefaults $r2;
        androidx.compose.ui.input.pointer.PointerIcon $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r3 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.input.pointer.PointerIcon access$getDesiredPointerIcon$p(androidx.compose.ui.platform.AndroidComposeView)>($r1);

        if $r3 != null goto label1;

        $r2 = <androidx.compose.ui.input.pointer.PointerIconDefaults: androidx.compose.ui.input.pointer.PointerIconDefaults INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.input.pointer.PointerIconDefaults: androidx.compose.ui.input.pointer.PointerIcon getDefault()>();

     label1:
        return $r3;
    }

    public void setCurrent(androidx.compose.ui.input.pointer.PointerIcon)
    {
        androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1 r0;
        androidx.compose.ui.input.pointer.PointerIcon r1;
        androidx.compose.ui.platform.AndroidComposeView $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1;

        r1 := @parameter0: androidx.compose.ui.input.pointer.PointerIcon;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView$pointerIconService$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void access$setDesiredPointerIcon$p(androidx.compose.ui.platform.AndroidComposeView,androidx.compose.ui.input.pointer.PointerIcon)>($r2, r1);

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1
<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>
<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.viewinterop.AndroidViewHolder $view>
    void <init>(androidx.compose.ui.platform.AndroidComposeView, androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        $r2 := @parameter1: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.viewinterop.AndroidViewHolder $view> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1 r0;
        java.util.Map r1, $r14;
        java.lang.Object r2;
        androidx.compose.ui.platform.AndroidComposeView $r3, $r7, $r10;
        androidx.compose.ui.platform.AndroidViewsHandler $r4, $r8, $r11;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r5, $r13, $r16;
        android.view.View $r6, $r17;
        java.util.HashMap $r9, $r12;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.viewinterop.AndroidViewHolder $view>;

        $r6 = (android.view.View) $r5;

        virtualinvoke $r4.<androidx.compose.ui.platform.AndroidViewsHandler: void removeViewInLayout(android.view.View)>($r6);

        $r7 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap getLayoutNodeToHolder()>();

        r1 = (java.util.Map) $r9;

        $r10 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidViewsHandler getAndroidViewsHandler$ui_release()>();

        $r12 = virtualinvoke $r11.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap getHolderToLayoutNode()>();

        $r13 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.viewinterop.AndroidViewHolder $view>;

        r2 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r13);

        $r14 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map asMutableMap(java.lang.Object)>(r1);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r16 = r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: androidx.compose.ui.viewinterop.AndroidViewHolder $view>;

        $r17 = (android.view.View) $r16;

        staticinvoke <androidx.core.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r17, 0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$removeAndroidView$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1
<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1 r0;
        android.view.MotionEvent r1;
        androidx.compose.ui.platform.AndroidComposeView $r2, $r3, $r4, $r5;
        int $i0;
        long $l1;
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1;

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent access$getPreviousMotionEvent$p(androidx.compose.ui.platform.AndroidComposeView)>($r2);

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        tableswitch($i0)
        {
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void access$setRelayoutTime$p(androidx.compose.ui.platform.AndroidComposeView,long)>($r3, $l1);

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r6 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 access$getResendMotionEventRunnable$p(androidx.compose.ui.platform.AndroidComposeView)>($r4);

        $r7 = (java.lang.Runnable) $r6;

        virtualinvoke $r5.<androidx.compose.ui.platform.AndroidComposeView: boolean post(java.lang.Runnable)>($r7);

     label2:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventOnLayout$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1
<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1 r0;
        android.view.MotionEvent r1;
        boolean z0, z1, $z3, $z4;
        int i0, $i2;
        byte b1, $b4;
        java.lang.Runnable $r2;
        androidx.compose.ui.platform.AndroidComposeView $r3, $r4, $r5, $r6;
        long $l3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r2 = (java.lang.Runnable) r0;

        virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView: boolean removeCallbacks(java.lang.Runnable)>($r2);

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: android.view.MotionEvent access$getPreviousMotionEvent$p(androidx.compose.ui.platform.AndroidComposeView)>($r4);

        if r1 == null goto label10;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getToolType(int)>(0);

        if $i2 != 3 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z0 = $z3;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if z0 == 0 goto label04;

        if i0 == 10 goto label03;

        if i0 == 1 goto label03;

        $z4 = 1;

        goto label06;

     label03:
        $z4 = 0;

        goto label06;

     label04:
        if i0 == 1 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z1 = $z4;

        if z1 == 0 goto label10;

        tableswitch(i0)
        {
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label07;
            default: goto label08;
        };

     label07:
        $b4 = 7;

        goto label09;

     label08:
        $b4 = 2;

     label09:
        b1 = $b4;

        $r6 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView$resendMotionEventRunnable$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $l3 = staticinvoke <androidx.compose.ui.platform.AndroidComposeView: long access$getRelayoutTime$p(androidx.compose.ui.platform.AndroidComposeView)>($r5);

        staticinvoke <androidx.compose.ui.platform.AndroidComposeView: void access$sendSimulatedEvent(androidx.compose.ui.platform.AndroidComposeView,android.view.MotionEvent,int,long,boolean)>($r6, r1, b1, $l3, 0);

     label10:
        return;
    }

androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1
<androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.compose.ui.input.rotary.RotaryScrollEvent)
    {
        androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 r0;
        androidx.compose.ui.input.rotary.RotaryScrollEvent r1;
        java.lang.Boolean $r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1;

        r1 := @parameter0: androidx.compose.ui.input.rotary.RotaryScrollEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.input.rotary.RotaryScrollEvent $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.input.rotary.RotaryScrollEvent) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1: java.lang.Boolean invoke(androidx.compose.ui.input.rotary.RotaryScrollEvent)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 $r0;

        $r0 = new androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1: void <init>()>();

        <androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1: androidx.compose.ui.platform.AndroidComposeView$rotaryInputModifier$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1
<androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 r0;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.semantics.SemanticsPropertyReceiver)
    {
        androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 r0;
        androidx.compose.ui.semantics.SemanticsPropertyReceiver $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1;

        $r1 := @parameter0: androidx.compose.ui.semantics.SemanticsPropertyReceiver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$$receiver");

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.semantics.SemanticsPropertyReceiver $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.semantics.SemanticsPropertyReceiver) r1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1: void invoke(androidx.compose.ui.semantics.SemanticsPropertyReceiver)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 $r0;

        $r0 = new androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1: void <init>()>();

        <androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1: androidx.compose.ui.platform.AndroidComposeView$semanticsModifier$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1
<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1 r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.platform.AndroidComposeView $r2, $r5;
        android.os.Handler $r3, $r6;
        android.os.Looper $r4, $r9;
        java.lang.Runnable $r7;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "command");

        $r2 = r0.<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeView: android.os.Handler getHandler()>();

        if $r3 == null goto label1;

        $r9 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r9 != $r4 goto label3;

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label4;

     label3:
        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.AndroidComposeView: android.os.Handler getHandler()>();

        if $r6 == null goto label4;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.functions.Function0)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: void invoke$lambda-0(kotlin.jvm.functions.Function0)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        goto label4;

     label4:
        return;
    }

    private static final void invoke$lambda-0(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$tmp0");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1 r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.jvm.functions.Function0) r1;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$snapshotObserver$1: void invoke(kotlin.jvm.functions.Function0)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners
<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner lifecycleOwner>
<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner>
<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: int $stable>
    public void <init>(androidx.lifecycle.LifecycleOwner, androidx.savedstate.SavedStateRegistryOwner)
    {
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.savedstate.SavedStateRegistryOwner r2;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.savedstate.SavedStateRegistryOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lifecycleOwner");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "savedStateRegistryOwner");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner lifecycleOwner> = r1;

        r0.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner> = r2;

        return;
    }

    public final androidx.lifecycle.LifecycleOwner getLifecycleOwner()
    {
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r0;
        androidx.lifecycle.LifecycleOwner $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.lifecycle.LifecycleOwner lifecycleOwner>;

        return $r1;
    }

    public final androidx.savedstate.SavedStateRegistryOwner getSavedStateRegistryOwner()
    {
        androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners r0;
        androidx.savedstate.SavedStateRegistryOwner $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners;

        $r1 = r0.<androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner>;

        return $r1;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.platform.AndroidComposeView$ViewTreeOwners: int $stable> = 8;

        return;
    }

androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1
<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: androidx.compose.ui.platform.AndroidComposeView this$0>
    void <init>(androidx.compose.ui.platform.AndroidComposeView)
    {
        androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1 r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r0.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: androidx.compose.ui.platform.AndroidComposeView this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke-iuPiT84(int)
    {
        androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1 r0;
        int i0, i1, $i2, $i3;
        androidx.compose.ui.input.InputMode$Companion $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.platform.AndroidComposeView $r3, $r4, $r5;
        java.lang.Boolean $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1;

        i0 := @parameter0: int;

        i1 = i0;

        $r1 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i2 = virtualinvoke $r1.<androidx.compose.ui.input.InputMode$Companion: int getTouch-aOaMEAU()>();

        $z0 = staticinvoke <androidx.compose.ui.input.InputMode: boolean equals-impl0(int,int)>(i1, $i2);

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $z3 = virtualinvoke $r5.<androidx.compose.ui.platform.AndroidComposeView: boolean isInTouchMode()>();

        goto label4;

     label1:
        $r2 = <androidx.compose.ui.input.InputMode: androidx.compose.ui.input.InputMode$Companion Companion>;

        $i3 = virtualinvoke $r2.<androidx.compose.ui.input.InputMode$Companion: int getKeyboard-aOaMEAU()>();

        $z1 = staticinvoke <androidx.compose.ui.input.InputMode: boolean equals-impl0(int,int)>(i1, $i3);

        if $z1 == 0 goto label3;

        $r3 = r0.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $z2 = virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView: boolean isInTouchMode()>();

        if $z2 == 0 goto label2;

        $r4 = r0.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: androidx.compose.ui.platform.AndroidComposeView this$0>;

        $z3 = virtualinvoke $r4.<androidx.compose.ui.platform.AndroidComposeView: boolean requestFocusFromTouch()>();

        goto label4;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.input.InputMode $r2;
        int $i0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.input.InputMode) r1;

        $i0 = virtualinvoke $r2.<androidx.compose.ui.input.InputMode: int unbox-impl()>();

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidComposeView$_inputModeManager$1: java.lang.Boolean invoke-iuPiT84(int)>($i0);

        return $r3;
    }

