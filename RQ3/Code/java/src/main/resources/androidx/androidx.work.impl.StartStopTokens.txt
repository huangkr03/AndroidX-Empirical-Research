androidx.work.impl.StartStopTokens
<androidx.work.impl.StartStopTokens: java.lang.Object lock>
<androidx.work.impl.StartStopTokens: java.util.Map runs>
    public void <init>()
    {
        androidx.work.impl.StartStopTokens r0;
        java.lang.Object $r1;
        java.util.LinkedHashMap $r2;
        java.util.Map $r3;

        r0 := @this: androidx.work.impl.StartStopTokens;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.StartStopTokens: java.lang.Object lock> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = (java.util.Map) $r2;

        r0.<androidx.work.impl.StartStopTokens: java.util.Map runs> = $r3;

        return;
    }

    public final androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.StartStopTokens r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        java.lang.Object r2, r4, $r9;
        java.util.Map $r3;
        androidx.work.impl.StartStopToken $r5, $r10;
        java.lang.Throwable $r7;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "id");

        r2 = r0.<androidx.work.impl.StartStopTokens: java.lang.Object lock>;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.work.impl.StartStopTokens: java.util.Map runs>;

        r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r4 != null goto label2;

        $r5 = new androidx.work.impl.StartStopToken;

        specialinvoke $r5.<androidx.work.impl.StartStopToken: void <init>(androidx.work.impl.model.WorkGenerationalId)>(r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r9 = $r5;

        goto label3;

     label2:
        $r9 = r4;

     label3:
        $r10 = (androidx.work.impl.StartStopToken) $r9;

     label4:
        exitmonitor r2;

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r2;

        throw $r7;

     label7:
        return $r10;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.StartStopTokens r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        java.lang.Object r2, $r4;
        java.util.Map $r3;
        java.lang.Throwable $r5;
        androidx.work.impl.StartStopToken $r6;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "id");

        r2 = r0.<androidx.work.impl.StartStopTokens: java.lang.Object lock>;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.work.impl.StartStopTokens: java.util.Map runs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = (androidx.work.impl.StartStopToken) $r4;

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r5;

     label5:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.util.List remove(java.lang.String)
    {
        androidx.work.impl.StartStopTokens r0;
        java.lang.String r1, $r13;
        java.lang.Object r2, $r11, $r12, $r14, $r15, r25;
        java.util.Map r3, $r9, $r18;
        java.util.LinkedHashMap $r4, r19;
        java.util.Set $r5, $r6;
        boolean $z1, $z2, $z5, z7;
        java.util.Collection $r7;
        java.lang.Iterable $r8, $r23;
        java.lang.Throwable $r17;
        java.util.Iterator r20, r24;
        java.util.Map$Entry r21;
        androidx.work.impl.model.WorkGenerationalId r22, r26;
        java.util.List $r27;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecId");

        r2 = r0.<androidx.work.impl.StartStopTokens: java.lang.Object lock>;

        entermonitor r2;

     label1:
        $r18 = r0.<androidx.work.impl.StartStopTokens: java.util.Map runs>;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r19 = $r4;

        $r5 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>();

        r20 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r11 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        r22 = (androidx.work.impl.model.WorkGenerationalId) $r12;

        $r13 = virtualinvoke r22.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, r1);

        if $z2 == 0 goto label2;

        $r14 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r19.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label2;

     label3:
        r3 = (java.util.Map) r19;

        $r6 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r23 = (java.lang.Iterable) $r6;

        r24 = interfaceinvoke $r23.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (androidx.work.impl.model.WorkGenerationalId) r25;

        z7 = 0;

        $r9 = r0.<androidx.work.impl.StartStopTokens: java.util.Map runs>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r26);

        goto label4;

     label5:
        $r7 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>();

        $r8 = (java.lang.Iterable) $r7;

        $r27 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r8);

     label6:
        exitmonitor r2;

        goto label9;

     label7:
        $r17 := @caughtexception;

     label8:
        exitmonitor r2;

        throw $r17;

     label9:
        return $r27;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public final boolean contains(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.StartStopTokens r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        java.lang.Object r2;
        java.util.Map $r3;
        java.lang.Throwable $r4;
        boolean $z1;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "id");

        r2 = r0.<androidx.work.impl.StartStopTokens: java.lang.Object lock>;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.work.impl.StartStopTokens: java.util.Map runs>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r4;

     label5:
        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkSpec)
    {
        androidx.work.impl.StartStopTokens r0;
        androidx.work.impl.model.WorkSpec r1;
        androidx.work.impl.model.WorkGenerationalId $r2;
        androidx.work.impl.StartStopToken $r3;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "spec");

        $r2 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r1);

        $r3 = virtualinvoke r0.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkGenerationalId)>($r2);

        return $r3;
    }

    public final androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkSpec)
    {
        androidx.work.impl.StartStopTokens r0;
        androidx.work.impl.model.WorkSpec r1;
        androidx.work.impl.model.WorkGenerationalId $r2;
        androidx.work.impl.StartStopToken $r3;

        r0 := @this: androidx.work.impl.StartStopTokens;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "spec");

        $r2 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r1);

        $r3 = virtualinvoke r0.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkGenerationalId)>($r2);

        return $r3;
    }

