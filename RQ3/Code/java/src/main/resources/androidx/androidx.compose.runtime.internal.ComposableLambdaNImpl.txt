androidx.compose.runtime.internal.ComposableLambdaNImpl
<androidx.compose.runtime.internal.ComposableLambdaNImpl: int key>
<androidx.compose.runtime.internal.ComposableLambdaNImpl: boolean tracked>
<androidx.compose.runtime.internal.ComposableLambdaNImpl: int arity>
<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object _block>
<androidx.compose.runtime.internal.ComposableLambdaNImpl: androidx.compose.runtime.RecomposeScope scope>
<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.util.List scopes>
    public void <init>(int, boolean, int)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        int i0, i1;
        boolean z0;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int key> = i0;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: boolean tracked> = z0;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int arity> = i1;

        return;
    }

    public final int getKey()
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        $i0 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int key>;

        return $i0;
    }

    public int getArity()
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        $i0 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int arity>;

        return $i0;
    }

    private final void trackWrite()
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        androidx.compose.runtime.RecomposeScope r1, r3;
        java.util.List r2;
        int i0, i1;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        $z0 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: boolean tracked>;

        if $z0 == 0 goto label4;

        r1 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: androidx.compose.runtime.RecomposeScope scope>;

        if r1 == null goto label1;

        interfaceinvoke r1.<androidx.compose.runtime.RecomposeScope: void invalidate()>();

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: androidx.compose.runtime.RecomposeScope scope> = null;

     label1:
        r2 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.util.List scopes>;

        if r2 == null goto label4;

        i1 = 0;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

     label2:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (androidx.compose.runtime.RecomposeScope) $r4;

        interfaceinvoke r3.<androidx.compose.runtime.RecomposeScope: void invalidate()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        interfaceinvoke r2.<java.util.List: void clear()>();

     label4:
        return;
    }

    private final void trackRead(androidx.compose.runtime.Composer)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        androidx.compose.runtime.Composer r1;
        androidx.compose.runtime.RecomposeScope r2, r3, r5;
        java.util.List r4, r9;
        int i0, i1;
        boolean $z0, $z1, $z3;
        java.lang.Object $r6;
        java.util.ArrayList $r8;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        $z0 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: boolean tracked>;

        if $z0 == 0 goto label6;

        r2 = interfaceinvoke r1.<androidx.compose.runtime.Composer: androidx.compose.runtime.RecomposeScope getRecomposeScope()>();

        if r2 == null goto label6;

        interfaceinvoke r1.<androidx.compose.runtime.Composer: void recordUsed(androidx.compose.runtime.RecomposeScope)>(r2);

        r3 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: androidx.compose.runtime.RecomposeScope scope>;

        $z1 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: boolean replacableWith(androidx.compose.runtime.RecomposeScope,androidx.compose.runtime.RecomposeScope)>(r3, r2);

        if $z1 == 0 goto label1;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: androidx.compose.runtime.RecomposeScope scope> = r2;

        goto label6;

     label1:
        r4 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.util.List scopes>;

        if r4 != null goto label2;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r9 = (java.util.List) $r8;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.util.List scopes> = r9;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label6;

     label2:
        i1 = 0;

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

     label3:
        if i1 >= i0 goto label5;

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (androidx.compose.runtime.RecomposeScope) $r6;

        $z3 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: boolean replacableWith(androidx.compose.runtime.RecomposeScope,androidx.compose.runtime.RecomposeScope)>(r5, r2);

        if $z3 == 0 goto label4;

        interfaceinvoke r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r2);

        return;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label6:
        return;
    }

    public final void update(java.lang.Object)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        java.lang.Object r1, $r2, $r3;
        boolean z0, $z1, $z2;
        kotlin.jvm.functions.FunctionN $r4;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object _block>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z1 != 0 goto label3;

        $r3 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object _block>;

        if $r3 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r4 = (kotlin.jvm.functions.FunctionN) r1;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object _block> = $r4;

        if z0 != 0 goto label3;

        specialinvoke r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: void trackWrite()>();

     label3:
        return;
    }

    private final int realParamCount(int)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        int i0, $i1, i2, i3, i4, i5;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        i0 := @parameter0: int;

        i2 = i0;

        i3 = i2 + -1;

        i4 = i3 + -1;

        i5 = 1;

     label1:
        $i1 = i5 * 10;

        if $i1 >= i4 goto label2;

        i4 = i4 + -1;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    public transient java.lang.Object invoke(java.lang.Object[])
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl r0;
        java.lang.Object[] r1, r2, $r7, $r8, $r15, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11;
        kotlin.jvm.internal.SpreadBuilder r3, $r12;
        java.lang.Object $r4, $r9, $r11, r23;
        kotlin.ranges.IntRange $r5;
        java.util.List $r6;
        java.lang.Integer $r10, $r14;
        boolean $z0;
        kotlin.jvm.functions.FunctionN $r13;
        androidx.compose.runtime.ScopeUpdateScope $r17;
        androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1 $r18;
        kotlin.jvm.functions.Function2 $r19;
        androidx.compose.runtime.Composer r20, r22;
        java.util.Collection r21;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "args");

        $i1 = lengthof r1;

        i0 = specialinvoke r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int realParamCount(int)>($i1);

        $r4 = r1[i0];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type androidx.compose.runtime.Composer");

        r20 = (androidx.compose.runtime.Composer) $r4;

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i3);

        $r6 = staticinvoke <kotlin.collections.ArraysKt: java.util.List slice(java.lang.Object[],kotlin.ranges.IntRange)>(r1, $r5);

        r21 = (java.util.Collection) $r6;

        $r7 = newarray (java.lang.Object)[0];

        $r8 = interfaceinvoke r21.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        r2 = $r8;

        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        $r9 = r1[$i5];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Int");

        $r10 = (java.lang.Integer) $r9;

        $i10 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i6 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: int key>;

        r22 = interfaceinvoke r20.<androidx.compose.runtime.Composer: androidx.compose.runtime.Composer startRestartGroup(int)>($i6);

        specialinvoke r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: void trackRead(androidx.compose.runtime.Composer)>(r22);

        $z0 = interfaceinvoke r22.<androidx.compose.runtime.Composer: boolean changed(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $i11 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: int differentBits(int)>(i0);

        goto label2;

     label1:
        $i11 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: int sameBits(int)>(i0);

     label2:
        $r11 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object _block>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r11, "null cannot be cast to non-null type kotlin.jvm.functions.FunctionN<*>");

        $r13 = (kotlin.jvm.functions.FunctionN) $r11;

        $r12 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r12.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(2);

        r3 = $r12;

        virtualinvoke r3.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>(r2);

        $i9 = $i10 | $i11;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke r3.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r14);

        $i7 = virtualinvoke r3.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r15 = newarray (java.lang.Object)[$i7];

        $r16 = virtualinvoke r3.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        r23 = interfaceinvoke $r13.<kotlin.jvm.functions.FunctionN: java.lang.Object invoke(java.lang.Object[])>($r16);

        $r17 = interfaceinvoke r22.<androidx.compose.runtime.Composer: androidx.compose.runtime.ScopeUpdateScope endRestartGroup()>();

        if $r17 == null goto label3;

        $r18 = new androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1;

        specialinvoke $r18.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: void <init>(java.lang.Object[],int,androidx.compose.runtime.internal.ComposableLambdaNImpl)>(r1, i0, r0);

        $r19 = (kotlin.jvm.functions.Function2) $r18;

        interfaceinvoke $r17.<androidx.compose.runtime.ScopeUpdateScope: void updateScope(kotlin.jvm.functions.Function2)>($r19);

        goto label3;

     label3:
        return r23;
    }

androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1
<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args>
<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: int $realParams>
<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: androidx.compose.runtime.internal.ComposableLambdaNImpl this$0>
    void <init>(java.lang.Object[], int, androidx.compose.runtime.internal.ComposableLambdaNImpl)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1 r0;
        java.lang.Object[] $r1;
        int $i0;
        androidx.compose.runtime.internal.ComposableLambdaNImpl $r2;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: androidx.compose.runtime.internal.ComposableLambdaNImpl;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args> = $r1;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: int $realParams> = $i0;

        r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: androidx.compose.runtime.internal.ComposableLambdaNImpl this$0> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.runtime.Composer, int)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1 r0;
        androidx.compose.runtime.Composer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object[] r2, $r4, $r7, $r8, $r9, $r12, $r13, $r16, $r17, $r21, $r22;
        java.util.Collection r3, r24, r25;
        kotlin.ranges.IntRange $r5, $r14;
        java.util.List $r6, $r15;
        java.lang.Object $r10;
        java.lang.Integer $r11, $r20;
        kotlin.jvm.internal.SpreadBuilder $r18, r26;
        androidx.compose.runtime.internal.ComposableLambdaNImpl $r19;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "nc");

        $r4 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args>;

        $i1 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: int $realParams>;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i1);

        $r6 = staticinvoke <kotlin.collections.ArraysKt: java.util.List slice(java.lang.Object[],kotlin.ranges.IntRange)>($r4, $r5);

        r24 = (java.util.Collection) $r6;

        $r7 = newarray (java.lang.Object)[0];

        $r8 = interfaceinvoke r24.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        r2 = $r8;

        $r9 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args>;

        $i2 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: int $realParams>;

        $i3 = $i2 + 1;

        $r10 = $r9[$i3];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r10, "null cannot be cast to non-null type kotlin.Int");

        $r11 = (java.lang.Integer) $r10;

        $i9 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args>;

        $i4 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: int $realParams>;

        $i6 = $i4 + 2;

        $r12 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: java.lang.Object[] $args>;

        $i5 = lengthof $r12;

        $r14 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i6, $i5);

        $r15 = staticinvoke <kotlin.collections.ArraysKt: java.util.List slice(java.lang.Object[],kotlin.ranges.IntRange)>($r13, $r14);

        r25 = (java.util.Collection) $r15;

        r3 = r25;

        $r16 = newarray (java.lang.Object)[0];

        $r17 = interfaceinvoke r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r17, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r19 = r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: androidx.compose.runtime.internal.ComposableLambdaNImpl this$0>;

        $r18 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r18.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(4);

        r26 = $r18;

        virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>(r2);

        virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>(r1);

        $i7 = $i9 | 1;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r20);

        virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r17);

        $i8 = virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r21 = newarray (java.lang.Object)[$i8];

        $r22 = virtualinvoke r26.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r21);

        virtualinvoke $r19.<androidx.compose.runtime.internal.ComposableLambdaNImpl: java.lang.Object invoke(java.lang.Object[])>($r22);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.compose.runtime.Composer $r4;
        int $i0;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Composer) r1;

        $r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<androidx.compose.runtime.internal.ComposableLambdaNImpl$invoke$1: void invoke(androidx.compose.runtime.Composer,int)>($r4, $i0);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

