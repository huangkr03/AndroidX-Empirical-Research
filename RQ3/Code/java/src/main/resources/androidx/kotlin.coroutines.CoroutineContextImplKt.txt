kotlin.coroutines.CoroutineContextImplKt
    public static final kotlin.coroutines.CoroutineContext$Element getPolymorphicElement(kotlin.coroutines.CoroutineContext$Element, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Element $r0;
        kotlin.coroutines.CoroutineContext$Key $r1, $r3;
        boolean $z0;
        kotlin.coroutines.AbstractCoroutineContextKey $r2;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $z0 = $r1 instanceof kotlin.coroutines.AbstractCoroutineContextKey;

        if $z0 == 0 goto label2;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)>($r3);

        if $z0 == 0 goto label3;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r0 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)>($r0);

        $z0 = $r0 instanceof kotlin.coroutines.CoroutineContext$Element;

        if $z0 != 0 goto label1;

        return null;

     label1:
        return $r0;

     label2:
        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        if $r3 != $r1 goto label3;

        return $r0;

     label3:
        return null;
    }

    public static final kotlin.coroutines.CoroutineContext minusPolymorphicKey(kotlin.coroutines.CoroutineContext$Element, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Element $r0, $r4;
        kotlin.coroutines.CoroutineContext$Key $r1, $r3;
        boolean $z0;
        kotlin.coroutines.AbstractCoroutineContextKey $r2;
        kotlin.coroutines.EmptyCoroutineContext r5;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $z0 = $r1 instanceof kotlin.coroutines.AbstractCoroutineContextKey;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)>($r3);

        if $z0 == 0 goto label2;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r4 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)>($r0);

        if $r4 == null goto label2;

        r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        return r5;

     label1:
        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        if $r3 != $r1 goto label2;

        r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        return r5;

     label2:
        return $r0;
    }

