androidx.media3.extractor.flv.AudioTagPayloadReader
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AUDIO_FORMAT_MP3>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AUDIO_FORMAT_ALAW>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AUDIO_FORMAT_ULAW>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AUDIO_FORMAT_AAC>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AAC_PACKET_TYPE_SEQUENCE_HEADER>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int AAC_PACKET_TYPE_AAC_RAW>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int[] AUDIO_SAMPLING_RATE_TABLE>
<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasParsedAudioDataHeader>
<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasOutputFormat>
<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>
    public void <init>(androidx.media3.extractor.TrackOutput)
    {
        androidx.media3.extractor.flv.AudioTagPayloadReader r0;
        androidx.media3.extractor.TrackOutput r1;

        r0 := @this: androidx.media3.extractor.flv.AudioTagPayloadReader;

        r1 := @parameter0: androidx.media3.extractor.TrackOutput;

        specialinvoke r0.<androidx.media3.extractor.flv.TagPayloadReader: void <init>(androidx.media3.extractor.TrackOutput)>(r1);

        return;
    }

    public void seek()
    {
        androidx.media3.extractor.flv.AudioTagPayloadReader r0;

        r0 := @this: androidx.media3.extractor.flv.AudioTagPayloadReader;

        return;
    }

    protected boolean parseHeader(androidx.media3.common.util.ParsableByteArray) throws androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException
    {
        androidx.media3.extractor.flv.AudioTagPayloadReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        androidx.media3.common.Format r2, r21;
        boolean $z0;
        androidx.media3.common.Format$Builder $r4, $r5, $r6, $r15, $r16, $r17, r22, r23;
        androidx.media3.extractor.TrackOutput $r7, $r18;
        java.lang.StringBuilder $r10, $r11, r24;
        java.lang.String $r12, $r19, r20;
        int[] $r13;
        androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException r25;
        java.lang.Throwable r26;

        r0 := @this: androidx.media3.extractor.flv.AudioTagPayloadReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $z0 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasParsedAudioDataHeader>;

        if $z0 != 0 goto label7;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i1 = i0 >> 4;

        $i2 = $i1 & 15;

        r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat> = $i2;

        $i3 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i3 != 2 goto label1;

        $i9 = i0 >> 2;

        i10 = $i9 & 3;

        $r13 = <androidx.media3.extractor.flv.AudioTagPayloadReader: int[] AUDIO_SAMPLING_RATE_TABLE>;

        i11 = $r13[i10];

        r22 = new androidx.media3.common.Format$Builder;

        specialinvoke r22.<androidx.media3.common.Format$Builder: void <init>()>();

        $r15 = virtualinvoke r22.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("audio/mpeg");

        $r16 = virtualinvoke $r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>(1);

        $r17 = virtualinvoke $r16.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>(i11);

        r2 = virtualinvoke $r17.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r18 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r18.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r2);

        r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasOutputFormat> = 1;

        goto label6;

     label1:
        $i4 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i4 == 7 goto label2;

        $i6 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i6 != 8 goto label5;

     label2:
        $i5 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i5 != 7 goto label3;

        $r19 = "audio/g711-alaw";

        goto label4;

     label3:
        $r19 = "audio/g711-mlaw";

     label4:
        r20 = $r19;

        r23 = new androidx.media3.common.Format$Builder;

        specialinvoke r23.<androidx.media3.common.Format$Builder: void <init>()>();

        $r4 = virtualinvoke r23.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r20);

        $r5 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>(1);

        $r6 = virtualinvoke $r5.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>(8000);

        r21 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r7 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r7.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r21);

        r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasOutputFormat> = 1;

        goto label6;

     label5:
        $i7 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i7 == 10 goto label6;

        r25 = new androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio format not supported: ");

        $i8 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException: void <init>(java.lang.String)>($r12);

        r26 = (java.lang.Throwable) r25;

        throw r26;

     label6:
        r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasParsedAudioDataHeader> = 1;

        goto label8;

     label7:
        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

     label8:
        return 1;
    }

    protected boolean parsePayload(androidx.media3.common.util.ParsableByteArray, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.flv.AudioTagPayloadReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0;
        androidx.media3.extractor.AacUtil$Config r2;
        androidx.media3.common.Format r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        androidx.media3.extractor.TrackOutput $r4, $r5, $r14, $r15, $r16;
        boolean $z0;
        androidx.media3.common.Format$Builder $r6, $r7, $r9, $r10, $r11, $r13;
        java.lang.String $r8;
        java.util.List $r12;
        byte[] r17;

        r0 := @this: androidx.media3.extractor.flv.AudioTagPayloadReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        $i1 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i1 != 2 goto label1;

        i7 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r15 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r15.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i7);

        $r16 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r16.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, 1, i7, 0, null);

        return 1;

     label1:
        i8 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        if i8 != 0 goto label2;

        $z0 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasOutputFormat>;

        if $z0 != 0 goto label2;

        $i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        r17 = newarray (byte)[$i3];

        $i4 = lengthof r17;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r17, 0, $i4);

        r2 = staticinvoke <androidx.media3.extractor.AacUtil: androidx.media3.extractor.AacUtil$Config parseAudioSpecificConfig(byte[])>(r17);

        $r6 = new androidx.media3.common.Format$Builder;

        specialinvoke $r6.<androidx.media3.common.Format$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("audio/mp4a-latm");

        $r8 = r2.<androidx.media3.extractor.AacUtil$Config: java.lang.String codecs>;

        $r9 = virtualinvoke $r7.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r8);

        $i5 = r2.<androidx.media3.extractor.AacUtil$Config: int channelCount>;

        $r10 = virtualinvoke $r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>($i5);

        $i6 = r2.<androidx.media3.extractor.AacUtil$Config: int sampleRateHz>;

        $r11 = virtualinvoke $r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>($i6);

        $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r17);

        $r13 = virtualinvoke $r11.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>($r12);

        r3 = virtualinvoke $r13.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r14 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r14.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r3);

        r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: boolean hasOutputFormat> = 1;

        return 0;

     label2:
        $i2 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: int audioFormat>;

        if $i2 != 10 goto label3;

        if i8 != 1 goto label4;

     label3:
        i9 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r4 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i9);

        $r5 = r0.<androidx.media3.extractor.flv.AudioTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, 1, i9, 0, null);

        return 1;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[4];

        $r0[0] = 5512;

        $r0[1] = 11025;

        $r0[2] = 22050;

        $r0[3] = 44100;

        <androidx.media3.extractor.flv.AudioTagPayloadReader: int[] AUDIO_SAMPLING_RATE_TABLE> = $r0;

        return;
    }

