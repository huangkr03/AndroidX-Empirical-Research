androidx.compose.runtime.snapshots.MutableSnapshot
<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 readObserver>
<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 writeObserver>
<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set modified>
<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>
<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>
<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots>
<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>
<androidx.compose.runtime.snapshots.MutableSnapshot: int $stable>
    public void <init>(int, androidx.compose.runtime.snapshots.SnapshotIdSet, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1, $r5;
        kotlin.jvm.functions.Function1 r2, r3;
        androidx.compose.runtime.snapshots.SnapshotIdSet$Companion $r4;
        int[] $r6;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.snapshots.SnapshotIdSet;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalid");

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, r1, null);

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 readObserver> = r2;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 writeObserver> = r3;

        $r4 = <androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.snapshots.SnapshotIdSet$Companion: androidx.compose.runtime.snapshots.SnapshotIdSet getEMPTY()>();

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds> = $r5;

        $r6 = newarray (int)[0];

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots> = $r6;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots> = 1;

        return;
    }

    public kotlin.jvm.functions.Function1 getReadObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 readObserver>;

        return $r1;
    }

    public kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 writeObserver>;

        return $r1;
    }

    public boolean hasPendingChanges()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        java.util.Set $r1;
        java.util.Collection $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        if $r1 == null goto label4;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 1 goto label3;

        $z2 = 1;

        goto label5;

     label3:
        $z2 = 0;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, r3, $r30;
        kotlin.jvm.functions.Function1 r1, r2, $r15, $r16, $r17, $r18;
        java.lang.Object r4, r5, r8, r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        androidx.compose.runtime.snapshots.NestedMutableSnapshot r6, r7, $r13, r26;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r10, $r11, $r12, $r14, $r19, $r20, $r21, $r22, r25;
        boolean $z8, $z9;
        java.lang.Throwable $r23, $r24, r27;
        kotlin.Unit $r28;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void validateNotDisposed$runtime_release()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void validateNotAppliedOrPinned$runtime_release()>();

        r3 = r0;

        $i3 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: void recordPrevious$runtime_release(int)>($i3);

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r5 = r4;

        entermonitor r5;

     label01:
        i11 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i4 = i11 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i4);

        i0 = i11;

        $r10 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $r11 = virtualinvoke $r10.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>(i0);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r11);

        r25 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $r12 = virtualinvoke r25.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>(i0);

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r12);

        $r13 = new androidx.compose.runtime.snapshots.NestedMutableSnapshot;

        $i5 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $i6 = $i5 + 1;

        $r14 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>(r25, $i6, i0);

        $r15 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

        $r16 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 mergedReadObserver$default(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,boolean,int,java.lang.Object)>(r1, $r15, 0, 4, null);

        $r17 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()>();

        $r18 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$mergedWriteObserver(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r2, $r17);

        specialinvoke $r13.<androidx.compose.runtime.snapshots.NestedMutableSnapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,androidx.compose.runtime.snapshots.MutableSnapshot)>(i0, $r14, $r16, $r18, r0);

        r26 = $r13;

     label02:
        exitmonitor r5;

        goto label05;

     label03:
        $r23 := @caughtexception;

        r27 = $r23;

     label04:
        exitmonitor r5;

        throw r27;

     label05:
        r6 = r26;

        r7 = r6;

        $z8 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getApplied$runtime_release()>();

        if $z8 != 0 goto label11;

        $z9 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z9 != 0 goto label11;

        i1 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r8 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r9 = r8;

        entermonitor r9;

     label06:
        i2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i7 = i2 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i7);

        virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: void setId$runtime_release(int)>(i2);

        $r19 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i8 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r20 = virtualinvoke $r19.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>($i8);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r20);

        $r28 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        exitmonitor r9;

        goto label10;

     label08:
        $r24 := @caughtexception;

     label09:
        exitmonitor r9;

        throw $r24;

     label10:
        $r21 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i9 = i1 + 1;

        $i10 = virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r22 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>($r21, $i9, $i10);

        virtualinvoke r3.<androidx.compose.runtime.snapshots.MutableSnapshot: void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r22);

     label11:
        $r30 = (androidx.compose.runtime.snapshots.MutableSnapshot) r6;

        return $r30;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot$default(androidx.compose.runtime.snapshots.MutableSnapshot, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, $r2;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r3;
        kotlin.jvm.functions.Function1 r4, r5;

        r0 := @parameter0: androidx.compose.runtime.snapshots.MutableSnapshot;

        r4 := @parameter1: kotlin.jvm.functions.Function1;

        r5 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        if r1 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: takeNestedMutableSnapshot");

        throw $r3;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        r4 = null;

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        r5 = null;

     label3:
        $r2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r4, r5);

        return $r2;
    }

    public androidx.compose.runtime.snapshots.SnapshotApplyResult apply()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, $r37;
        java.util.Set r1, r49, r53, r57;
        java.util.Map r2, $r45;
        kotlin.Pair r3, $r50;
        androidx.compose.runtime.snapshots.SnapshotApplyResult r4, $r15, r52;
        androidx.compose.runtime.snapshots.Snapshot $r5, $r8, $r29;
        java.util.concurrent.atomic.AtomicReference $r6, $r24, $r35, $r39;
        java.lang.Object $r7, $r12, $r13, $r25, $r36, $r40, r46, r59, r62, r64;
        kotlin.jvm.functions.Function1 $r9, $r30;
        java.util.List $r11, $r21, $r23, $r32, $r34, $r56;
        androidx.compose.runtime.snapshots.SnapshotApplyResult$Success $r14, $r28;
        java.util.Collection $r16, $r18, $r20, $r22, $r33;
        boolean $z0, $z1, $z2, $z3, $z7, $z8, $z11, z16;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r26, $r27, $r38, $r42;
        androidx.compose.runtime.snapshots.GlobalSnapshot $r41, r48, r51;
        java.lang.Throwable $r43, $r44, r66;
        kotlin.jvm.functions.Function2 r60, r63;
        kotlin.Unit r65;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        if r1 == null goto label01;

        $r35 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r36 = virtualinvoke $r35.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "currentGlobalSnapshot.get()");

        $r37 = (androidx.compose.runtime.snapshots.MutableSnapshot) $r36;

        $r38 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $r39 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r40 = virtualinvoke $r39.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r41 = (androidx.compose.runtime.snapshots.GlobalSnapshot) $r40;

        $i3 = virtualinvoke $r41.<androidx.compose.runtime.snapshots.GlobalSnapshot: int getId()>();

        $r42 = virtualinvoke $r38.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet clear(int)>($i3);

        $r45 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.Map access$optimisticMerges(androidx.compose.runtime.snapshots.MutableSnapshot,androidx.compose.runtime.snapshots.MutableSnapshot,androidx.compose.runtime.snapshots.SnapshotIdSet)>($r37, r0, $r42);

        goto label02;

     label01:
        $r45 = null;

     label02:
        r2 = $r45;

        r46 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        entermonitor r46;

     label03:
        $r5 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$validateOpen(androidx.compose.runtime.snapshots.Snapshot)>($r5);

        if r1 == null goto label04;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label08;

     label04:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void closeLocked$runtime_release()>();

        $r6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r48 = (androidx.compose.runtime.snapshots.GlobalSnapshot) $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r48, "previousGlobalSnapshot");

        $r8 = (androidx.compose.runtime.snapshots.Snapshot) r48;

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$getEmptyLambda$p()>();

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object access$takeNewGlobalSnapshot(androidx.compose.runtime.snapshots.Snapshot,kotlin.jvm.functions.Function1)>($r8, $r9);

        r49 = virtualinvoke r48.<androidx.compose.runtime.snapshots.GlobalSnapshot: java.util.Set getModified$runtime_release()>();

        if r49 == null goto label07;

        $r20 = (java.util.Collection) r49;

        $z2 = interfaceinvoke $r20.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        if $z7 == 0 goto label07;

        $r21 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.List access$getApplyObservers$p()>();

        $r22 = (java.util.Collection) $r21;

        $r23 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r22);

        $r50 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r23, r49);

        goto label11;

     label07:
        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r50 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r11, null);

        goto label11;

     label08:
        $r24 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r25 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r51 = (androidx.compose.runtime.snapshots.GlobalSnapshot) $r25;

        $i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $r26 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i2 = virtualinvoke r51.<androidx.compose.runtime.snapshots.GlobalSnapshot: int getId()>();

        $r27 = virtualinvoke $r26.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet clear(int)>($i2);

        r52 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotApplyResult innerApplyLocked$runtime_release(int,java.util.Map,androidx.compose.runtime.snapshots.SnapshotIdSet)>($i1, r2, $r27);

        $r28 = <androidx.compose.runtime.snapshots.SnapshotApplyResult$Success: androidx.compose.runtime.snapshots.SnapshotApplyResult$Success INSTANCE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r52, $r28);

        if $z3 != 0 goto label10;

        r4 = r52;

     label09:
        exitmonitor r46;

        return r4;

     label10:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void closeLocked$runtime_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r51, "previousGlobalSnapshot");

        $r29 = (androidx.compose.runtime.snapshots.Snapshot) r51;

        $r30 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$getEmptyLambda$p()>();

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object access$takeNewGlobalSnapshot(androidx.compose.runtime.snapshots.Snapshot,kotlin.jvm.functions.Function1)>($r29, $r30);

        r53 = virtualinvoke r51.<androidx.compose.runtime.snapshots.GlobalSnapshot: java.util.Set getModified$runtime_release()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setModified(java.util.Set)>(null);

        virtualinvoke r51.<androidx.compose.runtime.snapshots.GlobalSnapshot: void setModified(java.util.Set)>(null);

        $r32 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.List access$getApplyObservers$p()>();

        $r33 = (java.util.Collection) $r32;

        $r34 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r33);

        $r50 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r34, r53);

     label11:
        exitmonitor r46;

        goto label14;

     label12:
        $r44 := @caughtexception;

     label13:
        exitmonitor r46;

        throw $r44;

     label14:
        r3 = $r50;

        $r12 = virtualinvoke r3.<kotlin.Pair: java.lang.Object component1()>();

        $r56 = (java.util.List) $r12;

        $r13 = virtualinvoke r3.<kotlin.Pair: java.lang.Object component2()>();

        r57 = (java.util.Set) $r13;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied> = 1;

        if r57 == null goto label18;

        $r18 = (java.util.Collection) r57;

        $z1 = interfaceinvoke $r18.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label15;

        $z8 = 1;

        goto label16;

     label15:
        $z8 = 0;

     label16:
        if $z8 == 0 goto label18;

        $i4 = 0;

        i5 = interfaceinvoke $r56.<java.util.List: int size()>();

     label17:
        if $i4 >= i5 goto label18;

        r59 = interfaceinvoke $r56.<java.util.List: java.lang.Object get(int)>($i4);

        r60 = (kotlin.jvm.functions.Function2) r59;

        interfaceinvoke r60.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r57, r0);

        $i4 = $i4 + 1;

        goto label17;

     label18:
        if r1 == null goto label22;

        $r16 = (java.util.Collection) r1;

        $z0 = interfaceinvoke $r16.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label19;

        $z11 = 1;

        goto label20;

     label19:
        $z11 = 0;

     label20:
        if $z11 == 0 goto label22;

        $i6 = 0;

        i7 = interfaceinvoke $r56.<java.util.List: int size()>();

     label21:
        if $i6 >= i7 goto label22;

        r62 = interfaceinvoke $r56.<java.util.List: java.lang.Object get(int)>($i6);

        r63 = (kotlin.jvm.functions.Function2) r62;

        interfaceinvoke r63.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r1, r0);

        $i6 = $i6 + 1;

        goto label21;

     label22:
        r64 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        entermonitor r64;

     label23:
        z16 = 0;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void releasePinnedSnapshotsForCloseLocked$runtime_release()>();

        r65 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label24:
        exitmonitor r64;

        goto label27;

     label25:
        $r43 := @caughtexception;

        r66 = $r43;

     label26:
        exitmonitor r64;

        throw r66;

     label27:
        $r14 = <androidx.compose.runtime.snapshots.SnapshotApplyResult$Success: androidx.compose.runtime.snapshots.SnapshotApplyResult$Success INSTANCE>;

        $r15 = (androidx.compose.runtime.snapshots.SnapshotApplyResult) $r14;

        return $r15;

        catch java.lang.Throwable from label03 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    public boolean getReadOnly()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        return 0;
    }

    public androidx.compose.runtime.snapshots.Snapshot getRoot()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        return $r1;
    }

    public void dispose()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        boolean $z0;
        androidx.compose.runtime.snapshots.Snapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

        $r1 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>($r1);

     label1:
        return;
    }

    public androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, r2;
        kotlin.jvm.functions.Function1 r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object r3, r4, r7, r8;
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r5, r6, $r11, r21;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18;
        androidx.compose.runtime.snapshots.Snapshot $r14, $r25;
        boolean $z8, $z9;
        java.lang.Throwable $r19, $r20, r22;
        kotlin.Unit $r23;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void validateNotDisposed$runtime_release()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void validateNotAppliedOrPinned$runtime_release()>();

        i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r2 = r0;

        $i5 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: void recordPrevious$runtime_release(int)>($i5);

        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r4 = r3;

        entermonitor r4;

     label01:
        i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i6 = i1 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i6);

        i2 = i1;

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $r10 = virtualinvoke $r9.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>(i2);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r10);

        $r11 = new androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $r12 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i7 = i0 + 1;

        $r13 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>($r12, $i7, i2);

        $r14 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        specialinvoke $r11.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.functions.Function1,androidx.compose.runtime.snapshots.Snapshot)>(i2, $r13, r1, $r14);

        r21 = $r11;

     label02:
        exitmonitor r4;

        goto label05;

     label03:
        $r19 := @caughtexception;

        r22 = $r19;

     label04:
        exitmonitor r4;

        throw r22;

     label05:
        r5 = r21;

        r6 = r5;

        $z8 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getApplied$runtime_release()>();

        if $z8 != 0 goto label11;

        $z9 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z9 != 0 goto label11;

        i3 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r7 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r8 = r7;

        entermonitor r8;

     label06:
        i4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i8 = i4 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i8);

        virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: void setId$runtime_release(int)>(i4);

        $r15 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i9 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r16 = virtualinvoke $r15.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>($i9);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r16);

        $r23 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        exitmonitor r8;

        goto label10;

     label08:
        $r20 := @caughtexception;

     label09:
        exitmonitor r8;

        throw $r20;

     label10:
        $r17 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i10 = i3 + 1;

        $i11 = virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r18 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>($r17, $i10, $i11);

        virtualinvoke r2.<androidx.compose.runtime.snapshots.MutableSnapshot: void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r18);

     label11:
        $r25 = (androidx.compose.runtime.snapshots.Snapshot) r5;

        return $r25;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        i0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots> = $i1;

        return;
    }

    public void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        java.lang.String r2, $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        $i0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        r2 = "Failed requirement.";

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label3:
        $i1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots>;

        $i2 = $i1 + -1;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots> = $i2;

        $i3 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int snapshots>;

        if $i3 != 0 goto label4;

        $z0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>;

        if $z0 != 0 goto label4;

        specialinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void abandon()>();

     label4:
        return;
    }

    public void notifyObjectsInitialized$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void advance$runtime_release()>();

        return;
    }

    public void closeLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r1, $r2, $r3, $r4;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet clear(int)>($i0);

        $r3 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        $r4 = virtualinvoke $r2.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet andNot(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r3);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r4);

        return;
    }

    public void releasePinnedSnapshotsForCloseLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void releasePreviouslyPinnedSnapshotsLocked$runtime_release()>();

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void releasePinnedSnapshotsForCloseLocked$runtime_release()>();

        return;
    }

    public final void validateNotApplied$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;
        java.lang.IllegalStateException r4;
        java.lang.Throwable r5;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r3 = "Unsupported operation on a snapshot that has been applied";

        r4 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        r5 = (java.lang.Throwable) r4;

        throw r5;

     label3:
        return;
    }

    public final void validateNotAppliedOrPinned$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        boolean $z0, $z2, $z3;
        java.lang.String $r3, $r4;
        int $i0;
        java.lang.IllegalStateException r5;
        java.lang.Throwable r6;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>;

        if $z0 == 0 goto label3;

        r1 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        $i0 = staticinvoke <androidx.compose.runtime.snapshots.Snapshot: int access$getPinningTrackingHandle$p(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        if $i0 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        $r4 = "Unsupported operation on a disposed or applied snapshot";

        r5 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label6:
        return;
    }

    private final void abandon()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        java.util.Set r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        androidx.compose.runtime.snapshots.StateObject r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r5;
        java.lang.Iterable $r6;
        java.lang.Integer $r7;
        androidx.compose.runtime.snapshots.StateRecord r8;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        if r1 == null goto label5;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void validateNotApplied$runtime_release()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setModified(java.util.Set)>(null);

        i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.runtime.snapshots.StateObject) $r4;

        r8 = interfaceinvoke r3.<androidx.compose.runtime.snapshots.StateObject: androidx.compose.runtime.snapshots.StateRecord getFirstStateRecord()>();

     label2:
        if r8 == null goto label1;

        $i1 = virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: int getSnapshotId$runtime_release()>();

        if $i1 == i0 goto label3;

        $r5 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        $r6 = (java.lang.Iterable) $r5;

        $i2 = virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: int getSnapshotId$runtime_release()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z1 = staticinvoke <kotlin.collections.CollectionsKt: boolean contains(java.lang.Iterable,java.lang.Object)>($r6, $r7);

        if $z1 == 0 goto label4;

     label3:
        virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: void setSnapshotId$runtime_release(int)>(0);

     label4:
        r8 = virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: androidx.compose.runtime.snapshots.StateRecord getNext$runtime_release()>();

        goto label2;

     label5:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void closeAndReleasePinning$runtime_release()>();

        return;
    }

    public final androidx.compose.runtime.snapshots.SnapshotApplyResult innerApplyLocked$runtime_release(int, java.util.Map, androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, $r47;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.Map r1;
        androidx.compose.runtime.snapshots.SnapshotIdSet r2, r3, $r11, $r12, $r13, $r25;
        java.util.Set r4, $r14;
        java.util.Iterator r5;
        androidx.compose.runtime.snapshots.StateObject r6, $r60;
        java.lang.Object r7, r9, r10, $r19, $r20, $r22, $r36;
        androidx.compose.runtime.snapshots.StateRecord r8, $r21, $r23, $r24, $r26, $r27, $r29, r42, r43, r44, r45, $r46, r48, r49;
        androidx.compose.runtime.snapshots.SnapshotApplyResult$Success $r15;
        androidx.compose.runtime.snapshots.SnapshotApplyResult $r16, $r35;
        java.util.Collection $r17;
        boolean $z4, $z5, $z6, $z7, $z11, z16, z17, z19;
        java.util.ArrayList $r28, $r31, $r32;
        kotlin.Pair $r30, $r56, $r59;
        androidx.compose.runtime.snapshots.SnapshotApplyResult$Failure $r33;
        androidx.compose.runtime.snapshots.Snapshot $r34;
        kotlin.KotlinNothingValueException $r38;
        java.lang.Throwable $r39, r62;
        java.util.List r40, r41, $r50, $r51, $r52, $r53, $r54, $r55, r57, r58, r63;
        kotlin.Unit r61;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: androidx.compose.runtime.snapshots.SnapshotIdSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invalidSnapshots");

        r40 = null;

        $r11 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r12 = virtualinvoke $r11.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>($i1);

        $r13 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        r3 = virtualinvoke $r12.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet or(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r13);

        $r14 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        r4 = $r14;

        r41 = null;

        r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z11 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label14;

        $r22 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.compose.runtime.snapshots.StateObject) $r22;

        r42 = interfaceinvoke r6.<androidx.compose.runtime.snapshots.StateObject: androidx.compose.runtime.snapshots.StateRecord getFirstStateRecord()>();

        $r23 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.StateRecord access$readable(androidx.compose.runtime.snapshots.StateRecord,int,androidx.compose.runtime.snapshots.SnapshotIdSet)>(r42, i0, r2);

        if $r23 != null goto label02;

        goto label01;

     label02:
        r43 = $r23;

        $i3 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r24 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.StateRecord access$readable(androidx.compose.runtime.snapshots.StateRecord,int,androidx.compose.runtime.snapshots.SnapshotIdSet)>(r42, $i3, r3);

        if $r24 != null goto label03;

        goto label01;

     label03:
        r44 = $r24;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r43, r44);

        if $z4 != 0 goto label01;

        $i4 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r25 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $r26 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.StateRecord access$readable(androidx.compose.runtime.snapshots.StateRecord,int,androidx.compose.runtime.snapshots.SnapshotIdSet)>(r42, $i4, $r25);

        if $r26 != null goto label04;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Void access$readError()>();

        $r38 = new kotlin.KotlinNothingValueException;

        specialinvoke $r38.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r38;

     label04:
        r45 = $r26;

        if r1 == null goto label05;

        $r36 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r43);

        $r46 = (androidx.compose.runtime.snapshots.StateRecord) $r36;

        if $r46 != null goto label06;

     label05:
        $r47 = (androidx.compose.runtime.snapshots.MutableSnapshot) r0;

        $r46 = interfaceinvoke r6.<androidx.compose.runtime.snapshots.StateObject: androidx.compose.runtime.snapshots.StateRecord mergeRecords(androidx.compose.runtime.snapshots.StateRecord,androidx.compose.runtime.snapshots.StateRecord,androidx.compose.runtime.snapshots.StateRecord)>(r44, r43, r45);

     label06:
        r48 = $r46;

        r49 = r48;

        if r49 != null goto label07;

        $r33 = new androidx.compose.runtime.snapshots.SnapshotApplyResult$Failure;

        $r34 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        specialinvoke $r33.<androidx.compose.runtime.snapshots.SnapshotApplyResult$Failure: void <init>(androidx.compose.runtime.snapshots.Snapshot)>($r34);

        $r35 = (androidx.compose.runtime.snapshots.SnapshotApplyResult) $r33;

        return $r35;

     label07:
        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r49, r45);

        if $z5 != 0 goto label01;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r49, r43);

        if $z6 == 0 goto label10;

        $r50 = r40;

        if r40 != null goto label08;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        $r51 = (java.util.List) $r32;

        r40 = $r51;

        $r50 = $r51;

     label08:
        $r29 = virtualinvoke r43.<androidx.compose.runtime.snapshots.StateRecord: androidx.compose.runtime.snapshots.StateRecord create()>();

        $r30 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r6, $r29);

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r52 = r41;

        if r41 != null goto label09;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        $r53 = (java.util.List) $r31;

        r41 = $r53;

        $r52 = $r53;

     label09:
        interfaceinvoke $r52.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label01;

     label10:
        $r54 = r40;

        if r40 != null goto label11;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        $r55 = (java.util.List) $r28;

        r40 = $r55;

        $r54 = $r55;

     label11:
        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r48, r44);

        if $z7 != 0 goto label12;

        $r56 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r6, r48);

        goto label13;

     label12:
        $r27 = virtualinvoke r44.<androidx.compose.runtime.snapshots.StateRecord: androidx.compose.runtime.snapshots.StateRecord create()>();

        $r56 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r6, $r27);

     label13:
        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>($r56);

        goto label01;

     label14:
        if r40 == null goto label22;

        r57 = r40;

        z16 = 0;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void advance$runtime_release()>();

        r58 = r57;

        z17 = 0;

        i5 = 0;

        i6 = interfaceinvoke r58.<java.util.List: int size()>();

     label15:
        if i5 >= i6 goto label21;

        r7 = interfaceinvoke r58.<java.util.List: java.lang.Object get(int)>(i5);

        $r59 = (kotlin.Pair) r7;

        $r19 = virtualinvoke $r59.<kotlin.Pair: java.lang.Object component1()>();

        $r60 = (androidx.compose.runtime.snapshots.StateObject) $r19;

        $r20 = virtualinvoke $r59.<kotlin.Pair: java.lang.Object component2()>();

        r8 = (androidx.compose.runtime.snapshots.StateRecord) $r20;

        $i2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: void setSnapshotId$runtime_release(int)>($i2);

        r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r10 = r9;

        entermonitor r10;

     label16:
        $r21 = interfaceinvoke $r60.<androidx.compose.runtime.snapshots.StateObject: androidx.compose.runtime.snapshots.StateRecord getFirstStateRecord()>();

        virtualinvoke r8.<androidx.compose.runtime.snapshots.StateRecord: void setNext$runtime_release(androidx.compose.runtime.snapshots.StateRecord)>($r21);

        interfaceinvoke $r60.<androidx.compose.runtime.snapshots.StateObject: void prependStateRecord(androidx.compose.runtime.snapshots.StateRecord)>(r8);

        r61 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        exitmonitor r10;

        goto label20;

     label18:
        $r39 := @caughtexception;

        r62 = $r39;

     label19:
        exitmonitor r10;

        throw r62;

     label20:
        i5 = i5 + 1;

        goto label15;

     label21:
        goto label22;

     label22:
        if r41 == null goto label23;

        r63 = r41;

        z19 = 0;

        $r17 = (java.util.Collection) r63;

        interfaceinvoke r4.<java.util.Set: boolean removeAll(java.util.Collection)>($r17);

        goto label23;

     label23:
        $r15 = <androidx.compose.runtime.snapshots.SnapshotApplyResult$Success: androidx.compose.runtime.snapshots.SnapshotApplyResult$Success INSTANCE>;

        $r16 = (androidx.compose.runtime.snapshots.SnapshotApplyResult) $r15;

        return $r16;

        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public final java.lang.Object advance$runtime_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Object r2, r3, r4, r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z4, $z5;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r6, $r7, $r8, $r9;
        java.lang.Throwable $r10;
        kotlin.Unit $r11;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $i2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void recordPrevious$runtime_release(int)>($i2);

        r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r3 = r2;

        $z4 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getApplied$runtime_release()>();

        if $z4 != 0 goto label6;

        $z5 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z5 != 0 goto label6;

        i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r5 = r4;

        entermonitor r5;

     label1:
        i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i3 = i1 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i3);

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setId$runtime_release(int)>(i1);

        $r6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i4 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>($i4);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r7);

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        exitmonitor r5;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r10 := @caughtexception;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        exitmonitor r5;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r10;

     label5:
        $r8 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i5 = i0 + 1;

        $i6 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>($r8, $i5, $i6);

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r9);

     label6:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void advance$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0, r1;
        kotlin.Unit r2, r3, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r4, r5;
        boolean $z4, $z5;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r6, $r7, $r8, $r9;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 = r0;

        $i1 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void recordPrevious$runtime_release(int)>($i1);

        r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r3 = r2;

        $z4 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getApplied$runtime_release()>();

        if $z4 != 0 goto label6;

        $z5 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getDisposed$runtime_release()>();

        if $z5 != 0 goto label6;

        i0 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r5 = r4;

        entermonitor r5;

     label1:
        $i6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int access$getNextSnapshotId$p()>();

        $i2 = $i6 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setNextSnapshotId$p(int)>($i2);

        virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void setId$runtime_release(int)>($i6);

        $r6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i3 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>($i3);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r7);

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r5;

        goto label5;

     label3:
        $r10 := @caughtexception;

     label4:
        exitmonitor r5;

        throw $r10;

     label5:
        $r8 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i4 = i0 + 1;

        $i5 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet addRange(androidx.compose.runtime.snapshots.SnapshotIdSet,int,int)>($r8, $i4, $i5);

        virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r9);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void recordPrevious$runtime_release(int)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int i0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r3, $r4;
        java.lang.Throwable $r5, r7;
        kotlin.Unit r6;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        i0 := @parameter0: int;

        r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet set(int)>(i0);

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds> = $r4;

        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        exitmonitor r2;

        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void recordPreviousPinnedSnapshot$runtime_release(int)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int i0;
        int[] $r1, $r2;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>;

        $r2 = staticinvoke <kotlin.collections.ArraysKt: int[] plus(int[],int)>($r1, i0);

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots> = $r2;

     label1:
        return;
    }

    public final void recordPreviousPinnedSnapshots$runtime_release(int[])
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int[] r1, r2, $r3;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "handles");

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        r2 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>;

        $i1 = lengthof r2;

        if $i1 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 == 0 goto label6;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots> = r1;

        goto label7;

     label6:
        $r3 = staticinvoke <kotlin.collections.ArraysKt: int[] plus(int[],int[])>(r2, r1);

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots> = $r3;

     label7:
        return;
    }

    public final void releasePreviouslyPinnedSnapshotsLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int i0, $i1, i2;
        int[] $r1, $r2;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        i2 = 0;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>;

        i0 = lengthof $r1;

     label1:
        if i2 >= i0 goto label2;

        $r2 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>;

        $i1 = $r2[i2];

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void releasePinningLocked(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public final void recordPreviousList$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1, $r4, $r5;
        java.lang.Object r2, r3;
        java.lang.Throwable $r6, r8;
        kotlin.Unit r7;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotIdSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshots");

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet or(androidx.compose.runtime.snapshots.SnapshotIdSet)>(r1);

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds> = $r5;

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        exitmonitor r3;

        throw r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.StateObject r1;
        java.util.HashSet r2, r3, $r4;
        java.util.Set $r5, $r6;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.StateObject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r6 = virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        if $r6 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r2 = $r4;

        r3 = r2;

        $r5 = (java.util.Set) r3;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void setModified(java.util.Set)>($r5);

        $r6 = (java.util.Set) r2;

     label1:
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Set getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set modified>;

        return $r1;
    }

    public void setModified(java.util.Set)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: java.util.Set;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set modified> = r1;

        return;
    }

    public final androidx.compose.runtime.snapshots.SnapshotIdSet getPreviousIds$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds>;

        return $r1;
    }

    public final void setPreviousIds$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotIdSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet previousIds> = r1;

        return;
    }

    public final int[] getPreviousPinnedSnapshots$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots>;

        return $r1;
    }

    public final void setPreviousPinnedSnapshots$runtime_release(int[])
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        int[] r1;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: int[] previousPinnedSnapshots> = r1;

        return;
    }

    public final boolean getApplied$runtime_release()
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied>;

        return $z0;
    }

    public final void setApplied$runtime_release(boolean)
    {
        androidx.compose.runtime.snapshots.MutableSnapshot r0;
        boolean z0;

        r0 := @this: androidx.compose.runtime.snapshots.MutableSnapshot;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean applied> = z0;

        return;
    }

    static void <clinit>()
    {
        <androidx.compose.runtime.snapshots.MutableSnapshot: int $stable> = 8;

        return;
    }

