androidx.constraintlayout.solver.SolverVariable
<androidx.constraintlayout.solver.SolverVariable: boolean INTERNAL_DEBUG>
<androidx.constraintlayout.solver.SolverVariable: boolean VAR_USE_HASH>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_NONE>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_LOW>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_MEDIUM>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_HIGH>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_HIGHEST>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_EQUALITY>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_BARRIER>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_CENTERING>
<androidx.constraintlayout.solver.SolverVariable: int STRENGTH_FIXED>
<androidx.constraintlayout.solver.SolverVariable: int uniqueSlackId>
<androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId>
<androidx.constraintlayout.solver.SolverVariable: int uniqueUnrestrictedId>
<androidx.constraintlayout.solver.SolverVariable: int uniqueConstantId>
<androidx.constraintlayout.solver.SolverVariable: int uniqueId>
<androidx.constraintlayout.solver.SolverVariable: boolean inGoal>
<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName>
<androidx.constraintlayout.solver.SolverVariable: int id>
<androidx.constraintlayout.solver.SolverVariable: int definitionId>
<androidx.constraintlayout.solver.SolverVariable: int strength>
<androidx.constraintlayout.solver.SolverVariable: float computedValue>
<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue>
<androidx.constraintlayout.solver.SolverVariable: int MAX_STRENGTH>
<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>
<androidx.constraintlayout.solver.SolverVariable: float[] goalStrengthVector>
<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>
<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>
<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>
<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount>
<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym>
<androidx.constraintlayout.solver.SolverVariable: int synonym>
<androidx.constraintlayout.solver.SolverVariable: float synonymDelta>
<androidx.constraintlayout.solver.SolverVariable: java.util.HashSet inRows>
    static void increaseErrorId()
    {
        int $i0, $i1;

        $i0 = <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId>;

        $i1 = $i0 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId> = $i1;

        return;
    }

    private static java.lang.String getUniqueName(androidx.constraintlayout.solver.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.solver.SolverVariable$Type r0;
        java.lang.String r1, $r6, $r10, $r14, $r18, $r22, $r24, $r28;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r25, $r26, $r27;
        java.lang.AssertionError $r23;

        r0 := @parameter0: androidx.constraintlayout.solver.SolverVariable$Type;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i12 = <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r28;

     label1:
        $r2 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label2:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("U");

        $i10 = <androidx.constraintlayout.solver.SolverVariable: int uniqueUnrestrictedId>;

        $i11 = $i10 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueUnrestrictedId> = $i11;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label3:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("C");

        $i8 = <androidx.constraintlayout.solver.SolverVariable: int uniqueConstantId>;

        $i9 = $i8 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueConstantId> = $i9;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label4:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("S");

        $i6 = <androidx.constraintlayout.solver.SolverVariable: int uniqueSlackId>;

        $i7 = $i6 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueSlackId> = $i7;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("e");

        $i4 = <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId>;

        $i5 = $i4 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId> = $i5;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("V");

        $i2 = <androidx.constraintlayout.solver.SolverVariable: int uniqueId>;

        $i3 = $i2 + 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueId> = $i3;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label7:
        $r23 = new java.lang.AssertionError;

        $r24 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariable$Type: java.lang.String name()>();

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);

        throw $r23;
    }

    public void <init>(java.lang.String, androidx.constraintlayout.solver.SolverVariable$Type)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        java.lang.String r1;
        androidx.constraintlayout.solver.SolverVariable$Type r2;
        float[] $r3, $r4;
        androidx.constraintlayout.solver.ArrayRow[] $r5;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.constraintlayout.solver.SolverVariable: int id> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue> = 0;

        $r3 = newarray (float)[9];

        r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector> = $r3;

        $r4 = newarray (float)[9];

        r0.<androidx.constraintlayout.solver.SolverVariable: float[] goalStrengthVector> = $r4;

        $r5 = newarray (androidx.constraintlayout.solver.ArrayRow)[16];

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations> = $r5;

        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int synonym> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float synonymDelta> = 0.0F;

        r0.<androidx.constraintlayout.solver.SolverVariable: java.util.HashSet inRows> = null;

        r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName> = r1;

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = r2;

        return;
    }

    public void <init>(androidx.constraintlayout.solver.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.SolverVariable$Type r1;
        java.lang.String r2;
        float[] $r3, $r4;
        androidx.constraintlayout.solver.ArrayRow[] $r5;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable$Type;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.constraintlayout.solver.SolverVariable: int id> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue> = 0;

        $r3 = newarray (float)[9];

        r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector> = $r3;

        $r4 = newarray (float)[9];

        r0.<androidx.constraintlayout.solver.SolverVariable: float[] goalStrengthVector> = $r4;

        $r5 = newarray (androidx.constraintlayout.solver.ArrayRow)[16];

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations> = $r5;

        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int synonym> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float synonymDelta> = 0.0F;

        r0.<androidx.constraintlayout.solver.SolverVariable: java.util.HashSet inRows> = null;

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = r1;

        return;
    }

    void clearStrengths()
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        float[] $r1;
        int i0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        i0 = 0;

     label1:
        if i0 >= 9 goto label2;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $r1[i0] = 0.0F;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    java.lang.String strengthsToString()
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r18, $r19, $r20, $r21, $r22, $r23;
        float[] $r4, $r13, $r15, $r16, $r17, $r26;
        int $i0, $i3, $i4, i5;
        float $f0, $f1, $f2, $f3;
        byte $b1, $b2, $b6;
        java.lang.String r24, r25;
        boolean z0, z1;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        r24 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        z1 = 1;

        i5 = 0;

     label1:
        $r4 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $i0 = lengthof $r4;

        if i5 >= $i0 goto label7;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r13 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $f0 = $r13[i5];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        r25 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $f1 = $r15[i5];

        $b1 = $f1 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        $r16 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $f2 = $r16[i5];

        $b2 = $f2 cmpg 0.0F;

        if $b2 >= 0 goto label3;

        z0 = 1;

     label3:
        $r26 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $f3 = $r26[i5];

        $b6 = $f3 cmpl 0.0F;

        if $b6 == 0 goto label4;

        z1 = 0;

     label4:
        $r17 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $i3 = lengthof $r17;

        $i4 = $i3 - 1;

        if i5 >= $i4 goto label5;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        if z0 == 0 goto label8;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (-)");

        r24 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        if z1 == 0 goto label9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (*)");

        r24 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label9:
        return r24;
    }

    public final void addToRow(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.ArrayRow r1, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        androidx.constraintlayout.solver.ArrayRow[] $r2, $r3, $r4, $r5, $r7, $r9;
        java.lang.Object[] $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        i8 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        if i8 >= $i0 goto label3;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r10 = $r9[i8];

        if $r10 != r1 goto label2;

        return;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        $i2 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $i1 = lengthof $r2;

        if $i2 < $i1 goto label4;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $i6 = lengthof $r4;

        $i7 = $i6 * 2;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i7);

        $r7 = (androidx.constraintlayout.solver.ArrayRow[]) $r6;

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations> = $r7;

     label4:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $i3 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        $r3[$i3] = r1;

        $i4 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        $i5 = $i4 + 1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = $i5;

        return;
    }

    public final void removeFromRow(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.ArrayRow r1, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        androidx.constraintlayout.solver.ArrayRow[] $r2, $r4, $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r3 = $r2[i5];

        if $r3 != r1 goto label4;

        i6 = i5;

     label2:
        $i1 = i0 - 1;

        if i6 >= $i1 goto label3;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $i4 = i6 + 1;

        $r5 = $r4[$i4];

        $r6[i6] = $r5;

        i6 = i6 + 1;

        goto label2;

     label3:
        $i2 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        $i3 = $i2 - 1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = $i3;

        return;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    public final void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.LinearSystem r1;
        androidx.constraintlayout.solver.ArrayRow r2, $r4;
        int i0, i1;
        androidx.constraintlayout.solver.ArrayRow[] $r3;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        r2 := @parameter1: androidx.constraintlayout.solver.ArrayRow;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r4 = $r3[i1];

        virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: void updateFromRow(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.ArrayRow,boolean)>(r1, r2, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        return;
    }

    public void setFinalValue(androidx.constraintlayout.solver.LinearSystem, float)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.LinearSystem r1;
        float f0;
        int i0, i1;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        f0 := @parameter1: float;

        r0.<androidx.constraintlayout.solver.SolverVariable: float computedValue> = f0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue> = 1;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int synonym> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float synonymDelta> = 0.0F;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        r0.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r3 = $r2[i1];

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: void updateFromFinalVariable(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,boolean)>(r1, r0, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        return;
    }

    public void setSynonym(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariable r0, r2;
        androidx.constraintlayout.solver.LinearSystem r1;
        float f0;
        int i0, $i1, i2;
        androidx.constraintlayout.solver.ArrayRow[] $r3;
        androidx.constraintlayout.solver.ArrayRow $r4;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        f0 := @parameter2: float;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym> = 1;

        $i1 = r2.<androidx.constraintlayout.solver.SolverVariable: int id>;

        r0.<androidx.constraintlayout.solver.SolverVariable: int synonym> = $i1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float synonymDelta> = f0;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        r0.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r4 = $r3[i2];

        virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: void updateFromSynonymVariable(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,boolean)>(r1, r0, 0);

        i2 = i2 + 1;

        goto label1;

     label2:
        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        virtualinvoke r1.<androidx.constraintlayout.solver.LinearSystem: void displayReadableRows()>();

        return;
    }

    public void reset()
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        int i0, i1;
        androidx.constraintlayout.solver.SolverVariable$Type $r1;
        float[] $r2;
        androidx.constraintlayout.solver.ArrayRow[] $r3;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName> = null;

        $r1 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNKNOWN>;

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = $r1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int id> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float computedValue> = 0.0F;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean isSynonym> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int synonym> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariable: float synonymDelta> = 0.0F;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.ArrayRow[] mClientEquations>;

        $r3[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<androidx.constraintlayout.solver.SolverVariable: int mClientEquationsCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariable: boolean inGoal> = 0;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariable: float[] goalStrengthVector>;

        staticinvoke <java.util.Arrays: void fill(float[],float)>($r2, 0.0F);

        return;
    }

    public java.lang.String getName()
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        java.lang.String $r1;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        java.lang.String r1;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName> = r1;

        return;
    }

    public void setType(androidx.constraintlayout.solver.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        androidx.constraintlayout.solver.SolverVariable$Type r1;
        java.lang.String r2;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable$Type;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = r1;

        return;
    }

    public java.lang.String toString()
    {
        androidx.constraintlayout.solver.SolverVariable r0;
        java.lang.String $r1, $r7, r9, r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8;
        int $i0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable;

        r9 = "";

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName>;

        if $r1 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariable: java.lang.String mName>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $i0 = r0.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r10;
    }

    static void <clinit>()
    {
        <androidx.constraintlayout.solver.SolverVariable: int uniqueSlackId> = 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueErrorId> = 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueUnrestrictedId> = 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueConstantId> = 1;

        <androidx.constraintlayout.solver.SolverVariable: int uniqueId> = 1;

        return;
    }

androidx.constraintlayout.solver.SolverVariable$1
<androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>
    static void <clinit>()
    {
        androidx.constraintlayout.solver.SolverVariable$Type[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r3, $r5, $r7, $r9, $r11;
        androidx.constraintlayout.solver.SolverVariable$Type $r2, $r4, $r6, $r8, $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, r17, r18, r19, r20, r21;

        $r0 = staticinvoke <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type> = $r1;

     label01:
        $r3 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $r2 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        $i1 = virtualinvoke $r2.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        r17 = $r14;

     label04:
        $r5 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $r4 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type CONSTANT>;

        $i2 = virtualinvoke $r4.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

        r18 = $r12;

     label07:
        $r7 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $r6 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $i3 = virtualinvoke $r6.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        r19 = $r13;

     label10:
        $r9 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $r8 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR>;

        $i4 = virtualinvoke $r8.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r16 := @caughtexception;

        r20 = $r16;

     label13:
        $r11 = <androidx.constraintlayout.solver.SolverVariable$1: int[] $SwitchMap$androidx$constraintlayout$solver$SolverVariable$Type>;

        $r10 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNKNOWN>;

        $i5 = virtualinvoke $r10.<androidx.constraintlayout.solver.SolverVariable$Type: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r15 := @caughtexception;

        r21 = $r15;

     label16:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

androidx.constraintlayout.solver.SolverVariable$Type
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type CONSTANT>
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR>
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNKNOWN>
<androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] $VALUES>
    public static androidx.constraintlayout.solver.SolverVariable$Type[] values()
    {
        androidx.constraintlayout.solver.SolverVariable$Type[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.constraintlayout.solver.SolverVariable$Type[]) $r1;

        return $r2;
    }

    public static androidx.constraintlayout.solver.SolverVariable$Type valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.constraintlayout.solver.SolverVariable$Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/constraintlayout/solver/SolverVariable$Type;", r0);

        $r2 = (androidx.constraintlayout.solver.SolverVariable$Type) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.constraintlayout.solver.SolverVariable$Type r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariable$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.constraintlayout.solver.SolverVariable$Type $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        androidx.constraintlayout.solver.SolverVariable$Type[] $r5;

        $r0 = new androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke $r0.<androidx.constraintlayout.solver.SolverVariable$Type: void <init>(java.lang.String,int)>("UNRESTRICTED", 0);

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED> = $r0;

        $r1 = new androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke $r1.<androidx.constraintlayout.solver.SolverVariable$Type: void <init>(java.lang.String,int)>("CONSTANT", 1);

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type CONSTANT> = $r1;

        $r2 = new androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke $r2.<androidx.constraintlayout.solver.SolverVariable$Type: void <init>(java.lang.String,int)>("SLACK", 2);

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK> = $r2;

        $r3 = new androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke $r3.<androidx.constraintlayout.solver.SolverVariable$Type: void <init>(java.lang.String,int)>("ERROR", 3);

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR> = $r3;

        $r4 = new androidx.constraintlayout.solver.SolverVariable$Type;

        specialinvoke $r4.<androidx.constraintlayout.solver.SolverVariable$Type: void <init>(java.lang.String,int)>("UNKNOWN", 4);

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNKNOWN> = $r4;

        $r5 = newarray (androidx.constraintlayout.solver.SolverVariable$Type)[5];

        $r6 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        $r5[0] = $r6;

        $r7 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type CONSTANT>;

        $r5[1] = $r7;

        $r8 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $r5[2] = $r8;

        $r9 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR>;

        $r5[3] = $r9;

        $r10 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNKNOWN>;

        $r5[4] = $r10;

        <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] $VALUES> = $r5;

        return;
    }

