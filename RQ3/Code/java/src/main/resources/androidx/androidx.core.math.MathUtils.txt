androidx.core.math.MathUtils
    private void <init>()
    {
        androidx.core.math.MathUtils r0;

        r0 := @this: androidx.core.math.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int addExact(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        $i4 = i0 ^ i2;

        $i3 = i1 ^ i2;

        $i5 = $i4 & $i3;

        if $i5 >= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        return i2;
    }

    public static long addExact(long, long)
    {
        long l0, l1, l2, $l3, $l4, $l5;
        byte $b6;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 + l1;

        $l4 = l0 ^ l2;

        $l3 = l1 ^ l2;

        $l5 = $l4 & $l3;

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label1:
        return l2;
    }

    public static int subtractExact(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 - i1;

        $i4 = i0 ^ i1;

        $i3 = i0 ^ i2;

        $i5 = $i4 & $i3;

        if $i5 >= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        return i2;
    }

    public static long subtractExact(long, long)
    {
        long l0, l1, l2, $l3, $l4, $l5;
        byte $b6;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 - l1;

        $l4 = l0 ^ l1;

        $l3 = l0 ^ l2;

        $l5 = $l4 & $l3;

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label1:
        return l2;
    }

    public static int multiplyExact(int, int)
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = $l6 cmp l2;

        if $b7 == 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        $i8 = (int) l2;

        return $i8;
    }

    public static long multiplyExact(long, long)
    {
        long l0, l1, l2, l3, l4, $l5, $l6, $l11;
        byte $b7, $b8, $b9, $b10, $b12;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 * l1;

        l3 = staticinvoke <java.lang.Math: long abs(long)>(l0);

        l4 = staticinvoke <java.lang.Math: long abs(long)>(l1);

        $l5 = l3 | l4;

        $l6 = $l5 >>> 31;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label3;

        $b8 = l1 cmp 0L;

        if $b8 == 0 goto label1;

        $l11 = l2 / l1;

        $b12 = $l11 cmp l0;

        if $b12 != 0 goto label2;

     label1:
        $b9 = l0 cmp -9223372036854775808L;

        if $b9 != 0 goto label3;

        $b10 = l1 cmp -1L;

        if $b10 != 0 goto label3;

     label2:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label3:
        return l2;
    }

    public static int incrementExact(int)
    {
        int i0, $i1;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        if i0 != 2147483647 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        $i1 = i0 + 1;

        return $i1;
    }

    public static long incrementExact(long)
    {
        long l0, $l2;
        byte $b1;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label1:
        $l2 = l0 + 1L;

        return $l2;
    }

    public static int decrementExact(int)
    {
        int i0, $i1;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        if i0 != -2147483648 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        $i1 = i0 - 1;

        return $i1;
    }

    public static long decrementExact(long)
    {
        long l0, $l2;
        byte $b1;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label1:
        $l2 = l0 - 1L;

        return $l2;
    }

    public static int negateExact(int)
    {
        int i0, $i1;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        if i0 != -2147483648 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        $i1 = neg i0;

        return $i1;
    }

    public static long negateExact(long)
    {
        long l0, $l2;
        byte $b1;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label1:
        $l2 = neg l0;

        return $l2;
    }

    public static int toIntExact(long)
    {
        long l0, $l2;
        int $i1, $i4;
        byte $b3;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        $l2 = (long) $i1;

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;

     label1:
        $i4 = (int) l0;

        return $i4;
    }

    public static float clamp(float, float, float)
    {
        float f0, f1, f2;
        byte $b0, $b1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $b0 = f0 cmpg f1;

        if $b0 >= 0 goto label1;

        return f1;

     label1:
        $b1 = f0 cmpl f2;

        if $b1 <= 0 goto label2;

        return f2;

     label2:
        return f0;
    }

    public static double clamp(double, double, double)
    {
        double d0, d1, d2;
        byte $b0, $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label1;

        return d1;

     label1:
        $b1 = d0 cmpl d2;

        if $b1 <= 0 goto label2;

        return d2;

     label2:
        return d0;
    }

    public static int clamp(int, int, int)
    {
        int i0, i1, i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 >= i1 goto label1;

        return i1;

     label1:
        if i0 <= i2 goto label2;

        return i2;

     label2:
        return i0;
    }

    public static long clamp(long, long, long)
    {
        long l0, l1, l2;
        byte $b3, $b4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $b3 = l0 cmp l1;

        if $b3 >= 0 goto label1;

        return l1;

     label1:
        $b4 = l0 cmp l2;

        if $b4 <= 0 goto label2;

        return l2;

     label2:
        return l0;
    }

