io.grpc.internal.RetriableStream
<io.grpc.internal.RetriableStream: io.grpc.Status CANCELLED_BECAUSE_COMMITTED>
<io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_PREVIOUS_RPC_ATTEMPTS>
<io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_RETRY_PUSHBACK_MS>
<io.grpc.internal.RetriableStream: java.util.Random random>
<io.grpc.internal.RetriableStream: java.util.concurrent.Executor callExecutor>
<io.grpc.internal.RetriableStream: io.grpc.Status cancellationStatus>
<io.grpc.internal.RetriableStream: long channelBufferLimit>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$ChannelBufferMeter channelBufferUsed>
<io.grpc.internal.RetriableStream: io.grpc.internal.InsightBuilder closedSubstreamsInsight>
<io.grpc.internal.RetriableStream: io.grpc.Metadata headers>
<io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy hedgingPolicy>
<io.grpc.internal.RetriableStream: boolean isClosed>
<io.grpc.internal.RetriableStream: boolean isHedging>
<io.grpc.internal.RetriableStream: java.util.concurrent.Executor listenerSerializeExecutor>
<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicInteger localOnlyTransparentRetries>
<io.grpc.internal.RetriableStream: java.lang.Object lock>
<io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener masterListener>
<io.grpc.internal.RetriableStream: io.grpc.MethodDescriptor method>
<io.grpc.internal.RetriableStream: long nextBackoffIntervalNanos>
<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicBoolean noMoreTransparentRetry>
<io.grpc.internal.RetriableStream: long perRpcBufferLimit>
<io.grpc.internal.RetriableStream: long perRpcBufferUsed>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy retryPolicy>
<io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledRetry>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>
<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle throttle>
    static void <clinit>()
    {
        io.grpc.Metadata$AsciiMarshaller $r0;
        io.grpc.Metadata$Key $r1;
        io.grpc.Status $r2;
        java.util.Random $r3;

        $r0 = <io.grpc.Metadata: io.grpc.Metadata$AsciiMarshaller ASCII_STRING_MARSHALLER>;

        $r1 = staticinvoke <io.grpc.Metadata$Key: io.grpc.Metadata$Key of(java.lang.String,io.grpc.Metadata$AsciiMarshaller)>("grpc-previous-rpc-attempts", $r0);

        <io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_PREVIOUS_RPC_ATTEMPTS> = $r1;

        $r0 = <io.grpc.Metadata: io.grpc.Metadata$AsciiMarshaller ASCII_STRING_MARSHALLER>;

        $r1 = staticinvoke <io.grpc.Metadata$Key: io.grpc.Metadata$Key of(java.lang.String,io.grpc.Metadata$AsciiMarshaller)>("grpc-retry-pushback-ms", $r0);

        <io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_RETRY_PUSHBACK_MS> = $r1;

        $r2 = <io.grpc.Status: io.grpc.Status CANCELLED>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Stream thrown away because RetriableStream committed");

        <io.grpc.internal.RetriableStream: io.grpc.Status CANCELLED_BECAUSE_COMMITTED> = $r2;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        <io.grpc.internal.RetriableStream: java.util.Random random> = $r3;

        return;
    }

    void <init>(io.grpc.MethodDescriptor, io.grpc.Metadata, io.grpc.internal.RetriableStream$ChannelBufferMeter, long, long, java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService, io.grpc.internal.RetryPolicy, io.grpc.internal.HedgingPolicy, io.grpc.internal.RetriableStream$Throttle)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.MethodDescriptor $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.RetriableStream$ChannelBufferMeter $r3;
        long $l0, $l1;
        java.util.concurrent.Executor $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        io.grpc.internal.RetryPolicy $r6;
        io.grpc.internal.HedgingPolicy $r7;
        io.grpc.internal.RetriableStream$Throttle $r8;
        java.util.List $r9, r18;
        boolean $z0, $z1;
        io.grpc.internal.RetriableStream$1 r10;
        io.grpc.SynchronizationContext r11;
        java.lang.Object r12;
        io.grpc.internal.InsightBuilder r13;
        java.util.ArrayList r14;
        io.grpc.internal.RetriableStream$State r15;
        java.util.concurrent.atomic.AtomicBoolean r16;
        java.util.concurrent.atomic.AtomicInteger r17;
        java.util.Collection r19;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.MethodDescriptor;

        $r2 := @parameter1: io.grpc.Metadata;

        $r3 := @parameter2: io.grpc.internal.RetriableStream$ChannelBufferMeter;

        $l0 := @parameter3: long;

        $l1 := @parameter4: long;

        $r4 := @parameter5: java.util.concurrent.Executor;

        $r5 := @parameter6: java.util.concurrent.ScheduledExecutorService;

        $r6 := @parameter7: io.grpc.internal.RetryPolicy;

        $r7 := @parameter8: io.grpc.internal.HedgingPolicy;

        $r8 := @parameter9: io.grpc.internal.RetriableStream$Throttle;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r11 = new io.grpc.SynchronizationContext;

        r10 = new io.grpc.internal.RetriableStream$1;

        specialinvoke r10.<io.grpc.internal.RetriableStream$1: void <init>(io.grpc.internal.RetriableStream)>($r0);

        specialinvoke r11.<io.grpc.SynchronizationContext: void <init>(java.lang.Thread$UncaughtExceptionHandler)>(r10);

        $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor listenerSerializeExecutor> = r11;

        r12 = new java.lang.Object;

        specialinvoke r12.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock> = r12;

        r13 = new io.grpc.internal.InsightBuilder;

        specialinvoke r13.<io.grpc.internal.InsightBuilder: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.InsightBuilder closedSubstreamsInsight> = r13;

        r15 = new io.grpc.internal.RetriableStream$State;

        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>(int)>(8);

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r18 = (java.util.List) r14;

        r19 = (java.util.Collection) $r9;

        specialinvoke r15.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>(r18, r19, null, null, 0, 0, 0, 0);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = r15;

        r16 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r16.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicBoolean noMoreTransparentRetry> = r16;

        r17 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r17.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicInteger localOnlyTransparentRetries> = r17;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.MethodDescriptor method> = $r1;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$ChannelBufferMeter channelBufferUsed> = $r3;

        $r0.<io.grpc.internal.RetriableStream: long perRpcBufferLimit> = $l0;

        $r0.<io.grpc.internal.RetriableStream: long channelBufferLimit> = $l1;

        $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor callExecutor> = $r4;

        $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService scheduledExecutorService> = $r5;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.Metadata headers> = $r2;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy retryPolicy> = $r6;

        if $r6 == null goto label1;

        $l0 = $r6.<io.grpc.internal.RetryPolicy: long initialBackoffNanos>;

        $r0.<io.grpc.internal.RetriableStream: long nextBackoffIntervalNanos> = $l0;

     label1:
        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy hedgingPolicy> = $r7;

        $z0 = 0;

        if $r6 == null goto label3;

        if $r7 != null goto label2;

        goto label3;

     label2:
        $z1 = 0;

        goto label4;

     label3:
        $z1 = 1;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Should not provide both retryPolicy and hedgingPolicy");

        if $r7 == null goto label5;

        $z0 = 1;

        goto label5;

     label5:
        $r0.<io.grpc.internal.RetriableStream: boolean isHedging> = $z0;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle throttle> = $r8;

        return;
    }

    static io.grpc.Status access$000()
    {
        io.grpc.Status r0;

        r0 = <io.grpc.internal.RetriableStream: io.grpc.Status CANCELLED_BECAUSE_COMMITTED>;

        return r0;
    }

    static boolean access$100(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        z0 = $r0.<io.grpc.internal.RetriableStream: boolean isClosed>;

        return z0;
    }

    static java.util.concurrent.ScheduledExecutorService access$1000(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.ScheduledExecutorService r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        return r1;
    }

    static boolean access$102(io.grpc.internal.RetriableStream, boolean)
    {
        io.grpc.internal.RetriableStream $r0;
        boolean $z0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.internal.RetriableStream: boolean isClosed> = $z0;

        return $z0;
    }

    static void access$1100(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$Substream $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void drain(io.grpc.internal.RetriableStream$Substream)>($r1);

        return;
    }

    static java.util.concurrent.Executor access$1200(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.Executor r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor callExecutor>;

        return r1;
    }

    static io.grpc.MethodDescriptor access$1300(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.MethodDescriptor r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.MethodDescriptor method>;

        return r1;
    }

    static void access$1400(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$Substream $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void commitAndRun(io.grpc.internal.RetriableStream$Substream)>($r1);

        return;
    }

    static java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.Executor r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor listenerSerializeExecutor>;

        return r1;
    }

    static io.grpc.internal.InsightBuilder access$1600(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.InsightBuilder r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.InsightBuilder closedSubstreamsInsight>;

        return r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$1700(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.atomic.AtomicInteger r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicInteger localOnlyTransparentRetries>;

        return r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$1800(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicBoolean noMoreTransparentRetry>;

        return r1;
    }

    static boolean access$1900(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        z0 = $r0.<io.grpc.internal.RetriableStream: boolean isHedging>;

        return z0;
    }

    static io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.ClientStreamListener r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener masterListener>;

        return r1;
    }

    static io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetryPolicy r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy retryPolicy>;

        return r1;
    }

    static void access$2100(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void freezeHedging()>();

        return;
    }

    static void access$2200(io.grpc.internal.RetriableStream, java.lang.Integer)
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.Integer $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: java.lang.Integer;

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void pushbackHedging(java.lang.Integer)>($r1);

        return;
    }

    static io.grpc.internal.RetriableStream$FutureCanceller access$2302(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$FutureCanceller)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$FutureCanceller $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$FutureCanceller;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledRetry> = $r1;

        return $r1;
    }

    static long access$2400(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        long l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        l0 = $r0.<io.grpc.internal.RetriableStream: long nextBackoffIntervalNanos>;

        return l0;
    }

    static long access$2402(io.grpc.internal.RetriableStream, long)
    {
        io.grpc.internal.RetriableStream $r0;
        long $l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $l0 := @parameter1: long;

        $r0.<io.grpc.internal.RetriableStream: long nextBackoffIntervalNanos> = $l0;

        return $l0;
    }

    static java.util.Random access$2500()
    {
        java.util.Random r0;

        r0 = <io.grpc.internal.RetriableStream: java.util.Random random>;

        return r0;
    }

    static long access$2600(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        long l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        l0 = $r0.<io.grpc.internal.RetriableStream: long perRpcBufferUsed>;

        return l0;
    }

    static long access$2602(io.grpc.internal.RetriableStream, long)
    {
        io.grpc.internal.RetriableStream $r0;
        long $l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $l0 := @parameter1: long;

        $r0.<io.grpc.internal.RetriableStream: long perRpcBufferUsed> = $l0;

        return $l0;
    }

    static long access$2700(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        long l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        l0 = $r0.<io.grpc.internal.RetriableStream: long perRpcBufferLimit>;

        return l0;
    }

    static io.grpc.internal.RetriableStream$ChannelBufferMeter access$2800(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$ChannelBufferMeter r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$ChannelBufferMeter channelBufferUsed>;

        return r1;
    }

    static long access$2900(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        long l0;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        l0 = $r0.<io.grpc.internal.RetriableStream: long channelBufferLimit>;

        return l0;
    }

    static io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$State r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        return r1;
    }

    static java.lang.Runnable access$3000(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$Substream $r0;
        java.lang.Runnable $r1;
        io.grpc.internal.RetriableStream $r2;

        $r2 := @parameter0: io.grpc.internal.RetriableStream;

        $r0 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        $r1 = specialinvoke $r2.<io.grpc.internal.RetriableStream: java.lang.Runnable commit(io.grpc.internal.RetriableStream$Substream)>($r0);

        return $r1;
    }

    static io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$State)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$State $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$State;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r1;

        return $r1;
    }

    static io.grpc.internal.RetriableStream$Substream access$400(io.grpc.internal.RetriableStream, int, boolean)
    {
        int $i0;
        boolean $z0;
        io.grpc.internal.RetriableStream$Substream $r0;
        io.grpc.internal.RetriableStream $r1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r0 = specialinvoke $r1.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Substream createSubstream(int,boolean)>($i0, $z0);

        return $r0;
    }

    static java.lang.Object access$500(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.Object r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        return r1;
    }

    static boolean access$600(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$State)
    {
        io.grpc.internal.RetriableStream$State $r0;
        boolean $z0;
        io.grpc.internal.RetriableStream $r1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r0 := @parameter1: io.grpc.internal.RetriableStream$State;

        $z0 = specialinvoke $r1.<io.grpc.internal.RetriableStream: boolean hasPotentialHedging(io.grpc.internal.RetriableStream$State)>($r0);

        return $z0;
    }

    static io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$Throttle r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle throttle>;

        return r1;
    }

    static io.grpc.internal.RetriableStream$FutureCanceller access$802(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$FutureCanceller)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$FutureCanceller $r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$FutureCanceller;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging> = $r1;

        return $r1;
    }

    static io.grpc.internal.HedgingPolicy access$900(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.HedgingPolicy r1;

        $r0 := @parameter0: io.grpc.internal.RetriableStream;

        r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        return r1;
    }

    private java.lang.Runnable commit(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.Object $r1;
        java.util.Collection $r2;
        io.grpc.internal.RetriableStream$Substream $r3, $r5;
        io.grpc.internal.RetriableStream$State $r4;
        io.grpc.internal.RetriableStream$ChannelBufferMeter $r6;
        long $l0;
        io.grpc.internal.RetriableStream$FutureCanceller $r7;
        java.util.concurrent.Future $r8, $r9;
        io.grpc.internal.RetriableStream$1CommitTask $r10;
        java.lang.Throwable $r11;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r3 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r1 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r1;

     label01:
        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r5 == null goto label03;

     label02:
        exitmonitor $r1;

        return null;

     label03:
        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r2 = $r4.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r4 = virtualinvoke $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State committed(io.grpc.internal.RetriableStream$Substream)>($r3);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r4;

        $r6 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$ChannelBufferMeter channelBufferUsed>;

        $l0 = $r0.<io.grpc.internal.RetriableStream: long perRpcBufferUsed>;

        $l0 = neg $l0;

        virtualinvoke $r6.<io.grpc.internal.RetriableStream$ChannelBufferMeter: long addAndGet(long)>($l0);

        $r7 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledRetry>;

        if $r7 == null goto label04;

        $r8 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future markCancelled()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledRetry> = null;

        goto label05;

     label04:
        $r8 = null;

     label05:
        $r7 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging>;

        if $r7 == null goto label06;

        $r9 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future markCancelled()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging> = null;

        goto label07;

     label06:
        $r9 = null;

     label07:
        $r10 = new io.grpc.internal.RetriableStream$1CommitTask;

        specialinvoke $r10.<io.grpc.internal.RetriableStream$1CommitTask: void <init>(io.grpc.internal.RetriableStream,java.util.Collection,io.grpc.internal.RetriableStream$Substream,java.util.concurrent.Future,java.util.concurrent.Future)>($r0, $r2, $r3, $r8, $r9);

     label08:
        exitmonitor $r1;

        return $r10;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor $r1;

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void commitAndRun(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.Runnable $r1;
        io.grpc.internal.RetriableStream$Substream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r1 = specialinvoke $r0.<io.grpc.internal.RetriableStream: java.lang.Runnable commit(io.grpc.internal.RetriableStream$Substream)>($r2);

        if $r1 == null goto label1;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    private io.grpc.internal.RetriableStream$Substream createSubstream(int, boolean)
    {
        io.grpc.internal.RetriableStream $r0;
        boolean $z0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.RetriableStream$2 $r2;
        int $i0;
        io.grpc.internal.RetriableStream$BufferSizeTracer $r3;
        io.grpc.Metadata $r4;
        io.grpc.internal.ClientStream $r5;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = new io.grpc.internal.RetriableStream$Substream;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$Substream: void <init>(int)>($i0);

        $r3 = new io.grpc.internal.RetriableStream$BufferSizeTracer;

        specialinvoke $r3.<io.grpc.internal.RetriableStream$BufferSizeTracer: void <init>(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r0, $r1);

        $r2 = new io.grpc.internal.RetriableStream$2;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$2: void <init>(io.grpc.internal.RetriableStream,io.grpc.ClientStreamTracer)>($r0, $r3);

        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.Metadata headers>;

        $r4 = virtualinvoke $r0.<io.grpc.internal.RetriableStream: io.grpc.Metadata updateHeaders(io.grpc.Metadata,int)>($r4, $i0);

        $r5 = virtualinvoke $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.ClientStream newSubstream(io.grpc.Metadata,io.grpc.ClientStreamTracer$Factory,int,boolean)>($r4, $r2, $i0, $z0);

        $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream> = $r5;

        return $r1;
    }

    private void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$BufferEntry $r1;
        java.lang.Object $r2;
        io.grpc.internal.RetriableStream$State $r3;
        boolean $z0;
        java.util.List $r4;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        io.grpc.internal.RetriableStream$Substream $r7;
        java.lang.Throwable $r8;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$BufferEntry;

        $r2 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $z0 = $r3.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        if $z0 != 0 goto label2;

        $r3 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label2:
        $r3 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r5 = $r3.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

     label3:
        exitmonitor $r2;

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (io.grpc.internal.RetriableStream$Substream) $r2;

        interfaceinvoke $r1.<io.grpc.internal.RetriableStream$BufferEntry: void runWith(io.grpc.internal.RetriableStream$Substream)>($r7);

        goto label4;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r2;

        goto label7;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label6;
    }

    private void drain(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$Substream $r1, $r6;
        boolean $z0, $z1;
        io.grpc.internal.RetriableStream$3 $r2, r14;
        java.util.ArrayList $r3, r15;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        io.grpc.internal.RetriableStream$State $r5;
        java.util.List $r7, r17;
        java.util.concurrent.Executor $r8;
        io.grpc.internal.ClientStream $r9;
        io.grpc.Status $r10;
        java.util.Iterator $r11;
        io.grpc.internal.RetriableStream$BufferEntry $r12;
        java.lang.Throwable $r13;
        java.util.Collection r16;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $z0 = 0;

        $r2 = null;

        $r3 = null;

        $i0 = 0;

     label01:
        $r4 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r4;

     label02:
        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        if $z0 == 0 goto label06;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 == null goto label04;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 == $r1 goto label04;

     label03:
        exitmonitor $r4;

        goto label08;

     label04:
        $z1 = $r5.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        if $z1 == 0 goto label06;

     label05:
        exitmonitor $r4;

        goto label08;

     label06:
        $r7 = $r5.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != $i1 goto label13;

        $r5 = virtualinvoke $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State substreamDrained(io.grpc.internal.RetriableStream$Substream)>($r1);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r5;

        $z0 = virtualinvoke $r0.<io.grpc.internal.RetriableStream: boolean isReady()>();

        if $z0 == 0 goto label12;

        r14 = new io.grpc.internal.RetriableStream$3;

        $r2 = r14;

        specialinvoke r14.<io.grpc.internal.RetriableStream$3: void <init>(io.grpc.internal.RetriableStream)>($r0);

     label07:
        exitmonitor $r4;

     label08:
        if $r2 == null goto label09;

        $r8 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor listenerSerializeExecutor>;

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;

     label09:
        $r9 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 != $r1 goto label10;

        $r10 = $r0.<io.grpc.internal.RetriableStream: io.grpc.Status cancellationStatus>;

        goto label11;

     label10:
        $r10 = <io.grpc.internal.RetriableStream: io.grpc.Status CANCELLED_BECAUSE_COMMITTED>;

     label11:
        interfaceinvoke $r9.<io.grpc.internal.ClientStream: void cancel(io.grpc.Status)>($r10);

        return;

     label12:
        exitmonitor $r4;

        return;

     label13:
        $z1 = $r1.<io.grpc.internal.RetriableStream$Substream: boolean closed>;

        if $z1 == 0 goto label15;

     label14:
        exitmonitor $r4;

        return;

     label15:
        $i1 = $i0 + 128;

        $r7 = $r5.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        if $r3 != null goto label16;

        r15 = new java.util.ArrayList;

        $r3 = r15;

        $r7 = $r5.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r7 = interfaceinvoke $r7.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        r16 = (java.util.Collection) $r7;

        specialinvoke r15.<java.util.ArrayList: void <init>(java.util.Collection)>(r16);

        goto label17;

     label16:
        $r7 = (java.util.List) $r3;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r7 = $r5.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r7 = interfaceinvoke $r7.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        r17 = (java.util.List) $r3;

        r16 = (java.util.Collection) $r7;

        interfaceinvoke r17.<java.util.List: boolean addAll(java.util.Collection)>(r16);

     label17:
        exitmonitor $r4;

        $r7 = (java.util.List) $r3;

        $r11 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r4 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (io.grpc.internal.RetriableStream$BufferEntry) $r4;

        interfaceinvoke $r12.<io.grpc.internal.RetriableStream$BufferEntry: void runWith(io.grpc.internal.RetriableStream$Substream)>($r1);

        $z1 = $r12 instanceof io.grpc.internal.RetriableStream$StartEntry;

        if $z1 == 0 goto label19;

        $z0 = 1;

     label19:
        if $z0 == 0 goto label18;

        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 == null goto label20;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 == $r1 goto label20;

        goto label21;

     label20:
        $z1 = $r5.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        if $z1 == 0 goto label18;

     label21:
        $i0 = $i1;

        goto label01;

     label22:
        $r13 := @caughtexception;

        exitmonitor $r4;

        goto label23;

     label23:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label15 to label17 with label22;
    }

    private void freezeHedging()
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.Object $r1;
        io.grpc.internal.RetriableStream$FutureCanceller $r2;
        java.util.concurrent.Future $r3;
        io.grpc.internal.RetriableStream$State $r4;
        java.lang.Throwable $r5;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging>;

        $r3 = null;

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future markCancelled()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging> = null;

        goto label2;

     label2:
        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r4 = virtualinvoke $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State freezeHedging()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r4;

     label3:
        exitmonitor $r1;

        if $r3 == null goto label5;

        interfaceinvoke $r3.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private boolean hasPotentialHedging(io.grpc.internal.RetriableStream$State)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$State $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        int $i0, $i1;
        io.grpc.internal.HedgingPolicy $r3;
        boolean $z0;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$State;

        $r2 = $r1.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r2 != null goto label1;

        $i0 = $r1.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        $r3 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $i1 = $r3.<io.grpc.internal.HedgingPolicy: int maxAttempts>;

        if $i0 >= $i1 goto label1;

        $z0 = $r1.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void pushbackHedging(java.lang.Integer)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$FutureCanceller $r1, r10;
        java.lang.Integer $r2;
        int $i0;
        java.lang.Object $r3, $r5;
        java.util.concurrent.Future $r4;
        java.util.concurrent.ScheduledExecutorService $r6;
        long $l1;
        java.util.concurrent.TimeUnit $r7;
        java.util.concurrent.ScheduledFuture $r8;
        java.lang.Throwable $r9;
        io.grpc.internal.RetriableStream$HedgingRunnable r11;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r2 := @parameter0: java.lang.Integer;

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i0 >= 0 goto label2;

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void freezeHedging()>();

        return;

     label2:
        $r3 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r3;

     label3:
        $r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging>;

        if $r1 != null goto label5;

     label4:
        exitmonitor $r3;

        return;

     label5:
        $r4 = virtualinvoke $r1.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future markCancelled()>();

        r10 = new io.grpc.internal.RetriableStream$FutureCanceller;

        $r1 = r10;

        $r5 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        specialinvoke r10.<io.grpc.internal.RetriableStream$FutureCanceller: void <init>(java.lang.Object)>($r5);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging> = $r1;

     label6:
        exitmonitor $r3;

        if $r4 == null goto label7;

        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label7:
        $r6 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        r11 = new io.grpc.internal.RetriableStream$HedgingRunnable;

        specialinvoke r11.<io.grpc.internal.RetriableStream$HedgingRunnable: void <init>(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r0, $r1);

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r8 = interfaceinvoke $r6.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r11, $l1, $r7);

        $r4 = (java.util.concurrent.Future) $r8;

        virtualinvoke $r1.<io.grpc.internal.RetriableStream$FutureCanceller: void setFuture(java.util.concurrent.Future)>($r4);

        return;

     label8:
        $r9 := @caughtexception;

        exitmonitor $r3;

        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public void appendTimeoutInsight(io.grpc.internal.InsightBuilder)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.InsightBuilder $r1, $r2, $r7;
        java.lang.Object $r3;
        io.grpc.internal.RetriableStream$State $r4;
        io.grpc.internal.RetriableStream$Substream $r5;
        io.grpc.internal.ClientStream $r6;
        java.util.Collection $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Throwable $r10;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r2 := @parameter0: io.grpc.internal.InsightBuilder;

        $r3 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r3;

     label1:
        $r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.InsightBuilder closedSubstreamsInsight>;

        virtualinvoke $r2.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder appendKeyValue(java.lang.String,java.lang.Object)>("closed", $r1);

        $r4 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

     label2:
        exitmonitor $r3;

        $r5 = $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r5 == null goto label3;

        $r1 = new io.grpc.internal.InsightBuilder;

        specialinvoke $r1.<io.grpc.internal.InsightBuilder: void <init>()>();

        $r5 = $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r6 = $r5.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r6.<io.grpc.internal.ClientStream: void appendTimeoutInsight(io.grpc.internal.InsightBuilder)>($r1);

        virtualinvoke $r2.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder appendKeyValue(java.lang.String,java.lang.Object)>("committed", $r1);

        return;

     label3:
        $r7 = new io.grpc.internal.InsightBuilder;

        specialinvoke $r7.<io.grpc.internal.InsightBuilder: void <init>()>();

        $r8 = $r4.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (io.grpc.internal.RetriableStream$Substream) $r3;

        $r1 = new io.grpc.internal.InsightBuilder;

        specialinvoke $r1.<io.grpc.internal.InsightBuilder: void <init>()>();

        $r6 = $r5.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r6.<io.grpc.internal.ClientStream: void appendTimeoutInsight(io.grpc.internal.InsightBuilder)>($r1);

        virtualinvoke $r7.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder append(java.lang.Object)>($r1);

        goto label4;

     label5:
        virtualinvoke $r2.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder appendKeyValue(java.lang.String,java.lang.Object)>("open", $r7);

        return;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r3;

        goto label7;

     label7:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    public final void cancel(io.grpc.Status)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.Status $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.NoopClientStream $r3;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;
        io.grpc.internal.RetriableStream$4 $r6;
        java.lang.Object $r7;
        io.grpc.internal.RetriableStream$State $r8;
        java.util.Collection $r9;
        boolean $z0;
        io.grpc.internal.ClientStream $r10;
        java.lang.Throwable $r11;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.Status;

        $r2 = new io.grpc.internal.RetriableStream$Substream;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$Substream: void <init>(int)>(0);

        $r3 = new io.grpc.internal.NoopClientStream;

        specialinvoke $r3.<io.grpc.internal.NoopClientStream: void <init>()>();

        $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream> = $r3;

        $r4 = specialinvoke $r0.<io.grpc.internal.RetriableStream: java.lang.Runnable commit(io.grpc.internal.RetriableStream$Substream)>($r2);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        $r5 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.Executor listenerSerializeExecutor>;

        $r6 = new io.grpc.internal.RetriableStream$4;

        specialinvoke $r6.<io.grpc.internal.RetriableStream$4: void <init>(io.grpc.internal.RetriableStream,io.grpc.Status)>($r0, $r1);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

        return;

     label1:
        $r7 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r7;

     label2:
        $r8 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r9 = $r8.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r8 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r2 = $r8.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r8 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r2 = $r8.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        goto label4;

     label3:
        $r0.<io.grpc.internal.RetriableStream: io.grpc.Status cancellationStatus> = $r1;

        $r2 = null;

     label4:
        $r8 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r8 = virtualinvoke $r8.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State cancelled()>();

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r8;

     label5:
        exitmonitor $r7;

        if $r2 == null goto label7;

        $r10 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r10.<io.grpc.internal.ClientStream: void cancel(io.grpc.Status)>($r1);

        return;

     label6:
        $r11 := @caughtexception;

        exitmonitor $r7;

        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
    }

    public final void flush()
    {
        io.grpc.internal.RetriableStream $r0;
        boolean $z0;
        io.grpc.internal.RetriableStream$State $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;
        io.grpc.internal.RetriableStream$1FlushEntry $r4;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $z0 = $r1.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        if $z0 == 0 goto label1;

        $r2 = $r1.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void flush()>();

        return;

     label1:
        $r4 = new io.grpc.internal.RetriableStream$1FlushEntry;

        specialinvoke $r4.<io.grpc.internal.RetriableStream$1FlushEntry: void <init>(io.grpc.internal.RetriableStream)>($r0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r4);

        return;
    }

    public final io.grpc.Attributes getAttributes()
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public final void halfClose()
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$1HalfCloseEntry $r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 = new io.grpc.internal.RetriableStream$1HalfCloseEntry;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$1HalfCloseEntry: void <init>(io.grpc.internal.RetriableStream)>($r0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r1);

        return;
    }

    public final boolean isReady()
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$State $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        io.grpc.internal.RetriableStream$Substream $r5;
        io.grpc.internal.ClientStream $r6;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (io.grpc.internal.RetriableStream$Substream) $r4;

        $r6 = $r5.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $z0 = interfaceinvoke $r6.<io.grpc.internal.ClientStream: boolean isReady()>();

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

<io.grpc.internal.RetriableStream: io.grpc.internal.ClientStream newSubstream(io.grpc.Metadata,io.grpc.ClientStreamTracer$Factory,int,boolean)>
    public void optimizeForDirectExecutor()
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.internal.RetriableStream$1OptimizeDirectEntry $r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 = new io.grpc.internal.RetriableStream$1OptimizeDirectEntry;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$1OptimizeDirectEntry: void <init>(io.grpc.internal.RetriableStream)>($r0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r1);

        return;
    }

<io.grpc.internal.RetriableStream: void postCommit()>
<io.grpc.internal.RetriableStream: io.grpc.Status prestart()>
    public final void request(int)
    {
        io.grpc.internal.RetriableStream $r0;
        int $i0;
        boolean $z0;
        io.grpc.internal.RetriableStream$State $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;
        io.grpc.internal.RetriableStream$1RequestEntry $r4;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $i0 := @parameter0: int;

        $r1 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $z0 = $r1.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        if $z0 == 0 goto label1;

        $r2 = $r1.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void request(int)>($i0);

        return;

     label1:
        $r4 = new io.grpc.internal.RetriableStream$1RequestEntry;

        specialinvoke $r4.<io.grpc.internal.RetriableStream$1RequestEntry: void <init>(io.grpc.internal.RetriableStream,int)>($r0, $i0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r4);

        return;
    }

    final void sendMessage(java.lang.Object)
    {
        io.grpc.internal.RetriableStream $r0;
        java.io.InputStream $r1;
        java.lang.Object $r2;
        io.grpc.internal.RetriableStream$State $r3;
        boolean $z0;
        io.grpc.internal.RetriableStream$Substream $r4;
        io.grpc.internal.ClientStream $r5;
        io.grpc.MethodDescriptor $r6;
        io.grpc.internal.RetriableStream$1SendMessageEntry $r7;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r2 := @parameter0: java.lang.Object;

        $r3 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $z0 = $r3.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        if $z0 == 0 goto label1;

        $r4 = $r3.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r6 = $r0.<io.grpc.internal.RetriableStream: io.grpc.MethodDescriptor method>;

        $r1 = virtualinvoke $r6.<io.grpc.MethodDescriptor: java.io.InputStream streamRequest(java.lang.Object)>($r2);

        interfaceinvoke $r5.<io.grpc.internal.ClientStream: void writeMessage(java.io.InputStream)>($r1);

        return;

     label1:
        $r7 = new io.grpc.internal.RetriableStream$1SendMessageEntry;

        specialinvoke $r7.<io.grpc.internal.RetriableStream$1SendMessageEntry: void <init>(io.grpc.internal.RetriableStream,java.lang.Object)>($r0, $r2);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r7);

        return;
    }

    public final void setAuthority(java.lang.String)
    {
        io.grpc.internal.RetriableStream $r0;
        java.lang.String $r1;
        io.grpc.internal.RetriableStream$1AuthorityEntry $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: java.lang.String;

        $r2 = new io.grpc.internal.RetriableStream$1AuthorityEntry;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$1AuthorityEntry: void <init>(io.grpc.internal.RetriableStream,java.lang.String)>($r0, $r1);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r2);

        return;
    }

    public final void setCompressor(io.grpc.Compressor)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.Compressor $r1;
        io.grpc.internal.RetriableStream$1CompressorEntry $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.Compressor;

        $r2 = new io.grpc.internal.RetriableStream$1CompressorEntry;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$1CompressorEntry: void <init>(io.grpc.internal.RetriableStream,io.grpc.Compressor)>($r0, $r1);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r2);

        return;
    }

    public final void setDeadline(io.grpc.Deadline)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.Deadline $r1;
        io.grpc.internal.RetriableStream$1DeadlineEntry $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.Deadline;

        $r2 = new io.grpc.internal.RetriableStream$1DeadlineEntry;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$1DeadlineEntry: void <init>(io.grpc.internal.RetriableStream,io.grpc.Deadline)>($r0, $r1);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r2);

        return;
    }

    public final void setDecompressorRegistry(io.grpc.DecompressorRegistry)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.DecompressorRegistry $r1;
        io.grpc.internal.RetriableStream$1DecompressorRegistryEntry $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: io.grpc.DecompressorRegistry;

        $r2 = new io.grpc.internal.RetriableStream$1DecompressorRegistryEntry;

        specialinvoke $r2.<io.grpc.internal.RetriableStream$1DecompressorRegistryEntry: void <init>(io.grpc.internal.RetriableStream,io.grpc.DecompressorRegistry)>($r0, $r1);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r2);

        return;
    }

    public final void setFullStreamDecompression(boolean)
    {
        io.grpc.internal.RetriableStream $r0;
        boolean $z0;
        io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry $r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $z0 := @parameter0: boolean;

        $r1 = new io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry: void <init>(io.grpc.internal.RetriableStream,boolean)>($r0, $z0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r1);

        return;
    }

    public final void setMaxInboundMessageSize(int)
    {
        io.grpc.internal.RetriableStream $r0;
        int $i0;
        io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry $r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $i0 := @parameter0: int;

        $r1 = new io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry: void <init>(io.grpc.internal.RetriableStream,int)>($r0, $i0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r1);

        return;
    }

    public final void setMaxOutboundMessageSize(int)
    {
        io.grpc.internal.RetriableStream $r0;
        int $i0;
        io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry $r1;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $i0 := @parameter0: int;

        $r1 = new io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry: void <init>(io.grpc.internal.RetriableStream,int)>($r0, $i0);

        specialinvoke $r0.<io.grpc.internal.RetriableStream: void delayOrExecute(io.grpc.internal.RetriableStream$BufferEntry)>($r1);

        return;
    }

    public final void start(io.grpc.internal.ClientStreamListener)
    {
        io.grpc.internal.RetriableStream $r0;
        java.util.concurrent.TimeUnit $r1;
        io.grpc.internal.ClientStreamListener $r2;
        io.grpc.Status $r3;
        java.lang.Object $r4, $r10;
        io.grpc.internal.RetriableStream$State $r5;
        java.util.List $r6;
        io.grpc.internal.RetriableStream$Substream $r7;
        boolean $z0;
        io.grpc.internal.RetriableStream$FutureCanceller $r8, r17;
        io.grpc.internal.RetriableStream$Throttle $r9;
        java.util.concurrent.ScheduledExecutorService $r11;
        io.grpc.internal.HedgingPolicy $r12;
        long $l0;
        java.util.concurrent.ScheduledFuture $r13;
        java.lang.Throwable $r14, $r15;
        io.grpc.internal.RetriableStream$StartEntry r16;
        io.grpc.internal.RetriableStream$HedgingRunnable r18;
        java.util.concurrent.Future r19;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r2 := @parameter0: io.grpc.internal.ClientStreamListener;

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener masterListener> = $r2;

        $r3 = virtualinvoke $r0.<io.grpc.internal.RetriableStream: io.grpc.Status prestart()>();

        if $r3 == null goto label01;

        virtualinvoke $r0.<io.grpc.internal.RetriableStream: void cancel(io.grpc.Status)>($r3);

        return;

     label01:
        $r4 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r4;

     label02:
        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r6 = $r5.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        r16 = new io.grpc.internal.RetriableStream$StartEntry;

        specialinvoke r16.<io.grpc.internal.RetriableStream$StartEntry: void <init>(io.grpc.internal.RetriableStream)>($r0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r16);

     label03:
        exitmonitor $r4;

        $r7 = specialinvoke $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Substream createSubstream(int,boolean)>(0, 0);

        $z0 = $r0.<io.grpc.internal.RetriableStream: boolean isHedging>;

        if $z0 == 0 goto label09;

        $r4 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        entermonitor $r4;

     label04:
        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $r5 = virtualinvoke $r5.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State addActiveHedge(io.grpc.internal.RetriableStream$Substream)>($r7);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state> = $r5;

        $r5 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State state>;

        $z0 = specialinvoke $r0.<io.grpc.internal.RetriableStream: boolean hasPotentialHedging(io.grpc.internal.RetriableStream$State)>($r5);

        $r8 = null;

        if $z0 == 0 goto label07;

        $r9 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle throttle>;

        if $r9 == null goto label06;

        $z0 = virtualinvoke $r9.<io.grpc.internal.RetriableStream$Throttle: boolean isAboveThreshold()>();

        if $z0 == 0 goto label05;

        goto label06;

     label05:
        goto label07;

     label06:
        r17 = new io.grpc.internal.RetriableStream$FutureCanceller;

        $r8 = r17;

        $r10 = $r0.<io.grpc.internal.RetriableStream: java.lang.Object lock>;

        specialinvoke r17.<io.grpc.internal.RetriableStream$FutureCanceller: void <init>(java.lang.Object)>($r10);

        $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedging> = $r8;

        goto label07;

     label07:
        exitmonitor $r4;

        if $r8 == null goto label09;

        $r11 = $r0.<io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        r18 = new io.grpc.internal.RetriableStream$HedgingRunnable;

        specialinvoke r18.<io.grpc.internal.RetriableStream$HedgingRunnable: void <init>(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r0, $r8);

        $r12 = $r0.<io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $l0 = $r12.<io.grpc.internal.HedgingPolicy: long hedgingDelayNanos>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r13 = interfaceinvoke $r11.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r18, $l0, $r1);

        r19 = (java.util.concurrent.Future) $r13;

        virtualinvoke $r8.<io.grpc.internal.RetriableStream$FutureCanceller: void setFuture(java.util.concurrent.Future)>(r19);

        goto label09;

     label08:
        $r14 := @caughtexception;

        exitmonitor $r4;

        throw $r14;

     label09:
        specialinvoke $r0.<io.grpc.internal.RetriableStream: void drain(io.grpc.internal.RetriableStream$Substream)>($r7);

        return;

     label10:
        $r15 := @caughtexception;

        exitmonitor $r4;

        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label07 with label08;
    }

    final io.grpc.Metadata updateHeaders(io.grpc.Metadata, int)
    {
        io.grpc.internal.RetriableStream $r0;
        io.grpc.Metadata $r1, $r3;
        java.lang.String $r2;
        int $i0;
        io.grpc.Metadata$Key $r4;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r3 := @parameter0: io.grpc.Metadata;

        $i0 := @parameter1: int;

        $r1 = new io.grpc.Metadata;

        specialinvoke $r1.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r1.<io.grpc.Metadata: void merge(io.grpc.Metadata)>($r3);

        if $i0 <= 0 goto label1;

        $r4 = <io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_PREVIOUS_RPC_ATTEMPTS>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r1.<io.grpc.Metadata: void put(io.grpc.Metadata$Key,java.lang.Object)>($r4, $r2);

     label1:
        return $r1;
    }

    public final void writeMessage(java.io.InputStream)
    {
        io.grpc.internal.RetriableStream $r0;
        java.io.InputStream $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: io.grpc.internal.RetriableStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RetriableStream.writeMessage() should not be called directly");

        throw $r2;
    }

io.grpc.internal.RetriableStream$1
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$1 $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        io.grpc.internal.RetriableStream$1 $r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2;
        io.grpc.Status $r3;
        io.grpc.StatusRuntimeException $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$1;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = staticinvoke <io.grpc.Status: io.grpc.Status fromThrowable(java.lang.Throwable)>($r2);

        $r3 = virtualinvoke $r3.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Uncaught exception in the SynchronizationContext. Re-thrown.");

        $r4 = virtualinvoke $r3.<io.grpc.Status: io.grpc.StatusRuntimeException asRuntimeException()>();

        $r2 = (java.lang.Throwable) $r4;

        throw $r2;
    }

io.grpc.internal.RetriableStream$1AuthorityEntry
<io.grpc.internal.RetriableStream$1AuthorityEntry: java.lang.String val$authority>
    void <init>(io.grpc.internal.RetriableStream, java.lang.String)
    {
        io.grpc.internal.RetriableStream$1AuthorityEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1AuthorityEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: java.lang.String;

        $r0.<io.grpc.internal.RetriableStream$1AuthorityEntry: java.lang.String val$authority> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1AuthorityEntry $r0;
        java.lang.String $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$1AuthorityEntry;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$1AuthorityEntry: java.lang.String val$authority>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void setAuthority(java.lang.String)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$1CommitTask
<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream this$0>
<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$hedgingFuture>
<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$retryFuture>
<io.grpc.internal.RetriableStream$1CommitTask: java.util.Collection val$savedDrainedSubstreams>
<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream$Substream val$winningSubstream>
    void <init>(io.grpc.internal.RetriableStream, java.util.Collection, io.grpc.internal.RetriableStream$Substream, java.util.concurrent.Future, java.util.concurrent.Future)
    {
        io.grpc.internal.RetriableStream$1CommitTask $r0;
        io.grpc.internal.RetriableStream $r1;
        java.util.Collection $r2;
        io.grpc.internal.RetriableStream$Substream $r3;
        java.util.concurrent.Future $r4, $r5;

        $r0 := @this: io.grpc.internal.RetriableStream$1CommitTask;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: io.grpc.internal.RetriableStream$Substream;

        $r4 := @parameter3: java.util.concurrent.Future;

        $r5 := @parameter4: java.util.concurrent.Future;

        $r0.<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream this$0> = $r1;

        $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.Collection val$savedDrainedSubstreams> = $r2;

        $r0.<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream$Substream val$winningSubstream> = $r3;

        $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$retryFuture> = $r4;

        $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$hedgingFuture> = $r5;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$1CommitTask $r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        io.grpc.internal.RetriableStream$Substream $r4, $r5;
        io.grpc.internal.ClientStream $r6;
        io.grpc.Status $r7;
        java.util.concurrent.Future $r8;
        io.grpc.internal.RetriableStream $r9;

        $r0 := @this: io.grpc.internal.RetriableStream$1CommitTask;

        $r1 = $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.Collection val$savedDrainedSubstreams>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (io.grpc.internal.RetriableStream$Substream) $r3;

        $r5 = $r0.<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream$Substream val$winningSubstream>;

        if $r4 == $r5 goto label1;

        $r6 = $r4.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.Status access$000()>();

        interfaceinvoke $r6.<io.grpc.internal.ClientStream: void cancel(io.grpc.Status)>($r7);

        goto label1;

     label2:
        $r8 = $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$retryFuture>;

        if $r8 == null goto label3;

        interfaceinvoke $r8.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label3:
        $r8 = $r0.<io.grpc.internal.RetriableStream$1CommitTask: java.util.concurrent.Future val$hedgingFuture>;

        if $r8 == null goto label4;

        interfaceinvoke $r8.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label4:
        $r9 = $r0.<io.grpc.internal.RetriableStream$1CommitTask: io.grpc.internal.RetriableStream this$0>;

        virtualinvoke $r9.<io.grpc.internal.RetriableStream: void postCommit()>();

        return;
    }

io.grpc.internal.RetriableStream$1CompressorEntry
<io.grpc.internal.RetriableStream$1CompressorEntry: io.grpc.Compressor val$compressor>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.Compressor)
    {
        io.grpc.internal.RetriableStream$1CompressorEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.Compressor $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1CompressorEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.Compressor;

        $r0.<io.grpc.internal.RetriableStream$1CompressorEntry: io.grpc.Compressor val$compressor> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1CompressorEntry $r0;
        io.grpc.Compressor $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$1CompressorEntry;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$1CompressorEntry: io.grpc.Compressor val$compressor>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void setCompressor(io.grpc.Compressor)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$1DeadlineEntry
<io.grpc.internal.RetriableStream$1DeadlineEntry: io.grpc.Deadline val$deadline>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.Deadline)
    {
        io.grpc.internal.RetriableStream$1DeadlineEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.Deadline $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1DeadlineEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.Deadline;

        $r0.<io.grpc.internal.RetriableStream$1DeadlineEntry: io.grpc.Deadline val$deadline> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1DeadlineEntry $r0;
        io.grpc.Deadline $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$1DeadlineEntry;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$1DeadlineEntry: io.grpc.Deadline val$deadline>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void setDeadline(io.grpc.Deadline)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$1DecompressorRegistryEntry
<io.grpc.internal.RetriableStream$1DecompressorRegistryEntry: io.grpc.DecompressorRegistry val$decompressorRegistry>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.DecompressorRegistry)
    {
        io.grpc.internal.RetriableStream$1DecompressorRegistryEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.DecompressorRegistry $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1DecompressorRegistryEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.DecompressorRegistry;

        $r0.<io.grpc.internal.RetriableStream$1DecompressorRegistryEntry: io.grpc.DecompressorRegistry val$decompressorRegistry> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1DecompressorRegistryEntry $r0;
        io.grpc.DecompressorRegistry $r1;
        io.grpc.internal.RetriableStream$Substream $r2;
        io.grpc.internal.ClientStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$1DecompressorRegistryEntry;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$1DecompressorRegistryEntry: io.grpc.DecompressorRegistry val$decompressorRegistry>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStream: void setDecompressorRegistry(io.grpc.DecompressorRegistry)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$1FlushEntry
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$1FlushEntry $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$1FlushEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1FlushEntry $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1FlushEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void flush()>();

        return;
    }

io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry
<io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry: boolean val$fullStreamDecompression>
    void <init>(io.grpc.internal.RetriableStream, boolean)
    {
        io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry: boolean val$fullStreamDecompression> = $z0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry $r0;
        boolean $z0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$1FullStreamDecompressionEntry: boolean val$fullStreamDecompression>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void setFullStreamDecompression(boolean)>($z0);

        return;
    }

io.grpc.internal.RetriableStream$1HalfCloseEntry
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$1HalfCloseEntry $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$1HalfCloseEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1HalfCloseEntry $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1HalfCloseEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void halfClose()>();

        return;
    }

io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry
<io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry: int val$maxSize>
    void <init>(io.grpc.internal.RetriableStream, int)
    {
        io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $i0 := @parameter1: int;

        $r0.<io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry: int val$maxSize> = $i0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry $r0;
        int $i0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$1MaxInboundMessageSizeEntry: int val$maxSize>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void setMaxInboundMessageSize(int)>($i0);

        return;
    }

io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry
<io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry: int val$maxSize>
    void <init>(io.grpc.internal.RetriableStream, int)
    {
        io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $i0 := @parameter1: int;

        $r0.<io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry: int val$maxSize> = $i0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry $r0;
        int $i0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$1MaxOutboundMessageSizeEntry: int val$maxSize>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void setMaxOutboundMessageSize(int)>($i0);

        return;
    }

io.grpc.internal.RetriableStream$1OptimizeDirectEntry
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$1OptimizeDirectEntry $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$1OptimizeDirectEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1OptimizeDirectEntry $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1OptimizeDirectEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void optimizeForDirectExecutor()>();

        return;
    }

io.grpc.internal.RetriableStream$1RequestEntry
<io.grpc.internal.RetriableStream$1RequestEntry: int val$numMessages>
    void <init>(io.grpc.internal.RetriableStream, int)
    {
        io.grpc.internal.RetriableStream$1RequestEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$1RequestEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $i0 := @parameter1: int;

        $r0.<io.grpc.internal.RetriableStream$1RequestEntry: int val$numMessages> = $i0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1RequestEntry $r0;
        int $i0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1RequestEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$1RequestEntry: int val$numMessages>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void request(int)>($i0);

        return;
    }

io.grpc.internal.RetriableStream$1SendMessageEntry
<io.grpc.internal.RetriableStream$1SendMessageEntry: io.grpc.internal.RetriableStream this$0>
<io.grpc.internal.RetriableStream$1SendMessageEntry: java.lang.Object val$message>
    void <init>(io.grpc.internal.RetriableStream, java.lang.Object)
    {
        io.grpc.internal.RetriableStream$1SendMessageEntry $r0;
        io.grpc.internal.RetriableStream $r1;
        java.lang.Object $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$1SendMessageEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: java.lang.Object;

        $r0.<io.grpc.internal.RetriableStream$1SendMessageEntry: io.grpc.internal.RetriableStream this$0> = $r1;

        $r0.<io.grpc.internal.RetriableStream$1SendMessageEntry: java.lang.Object val$message> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$1SendMessageEntry $r0;
        io.grpc.internal.ClientStream $r1;
        java.lang.Object $r2;
        io.grpc.internal.RetriableStream$Substream $r3;
        io.grpc.internal.RetriableStream $r4;
        io.grpc.MethodDescriptor $r5;
        java.io.InputStream $r6;

        $r0 := @this: io.grpc.internal.RetriableStream$1SendMessageEntry;

        $r3 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r1 = $r3.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r4 = $r0.<io.grpc.internal.RetriableStream$1SendMessageEntry: io.grpc.internal.RetriableStream this$0>;

        $r5 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.MethodDescriptor access$1300(io.grpc.internal.RetriableStream)>($r4);

        $r2 = $r0.<io.grpc.internal.RetriableStream$1SendMessageEntry: java.lang.Object val$message>;

        $r6 = virtualinvoke $r5.<io.grpc.MethodDescriptor: java.io.InputStream streamRequest(java.lang.Object)>($r2);

        interfaceinvoke $r1.<io.grpc.internal.ClientStream: void writeMessage(java.io.InputStream)>($r6);

        $r1 = $r3.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        interfaceinvoke $r1.<io.grpc.internal.ClientStream: void flush()>();

        return;
    }

io.grpc.internal.RetriableStream$2
<io.grpc.internal.RetriableStream$2: io.grpc.ClientStreamTracer val$bufferSizeTracer>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.ClientStreamTracer)
    {
        io.grpc.internal.RetriableStream$2 $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.ClientStreamTracer $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$2;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.ClientStreamTracer;

        $r0.<io.grpc.internal.RetriableStream$2: io.grpc.ClientStreamTracer val$bufferSizeTracer> = $r2;

        specialinvoke $r0.<io.grpc.ClientStreamTracer$Factory: void <init>()>();

        return;
    }

    public io.grpc.ClientStreamTracer newClientStreamTracer(io.grpc.ClientStreamTracer$StreamInfo, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$2 $r0;
        io.grpc.Metadata $r1;
        io.grpc.ClientStreamTracer$StreamInfo $r2;
        io.grpc.ClientStreamTracer r3;

        $r0 := @this: io.grpc.internal.RetriableStream$2;

        $r2 := @parameter0: io.grpc.ClientStreamTracer$StreamInfo;

        $r1 := @parameter1: io.grpc.Metadata;

        r3 = $r0.<io.grpc.internal.RetriableStream$2: io.grpc.ClientStreamTracer val$bufferSizeTracer>;

        return r3;
    }

io.grpc.internal.RetriableStream$3
<io.grpc.internal.RetriableStream$3: io.grpc.internal.RetriableStream this$0>
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$3 $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$3;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r0.<io.grpc.internal.RetriableStream$3: io.grpc.internal.RetriableStream this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$3 $r0;
        io.grpc.internal.RetriableStream $r1;
        boolean $z0;
        io.grpc.internal.ClientStreamListener $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$3;

        $r1 = $r0.<io.grpc.internal.RetriableStream$3: io.grpc.internal.RetriableStream this$0>;

        $z0 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$100(io.grpc.internal.RetriableStream)>($r1);

        if $z0 != 0 goto label1;

        $r1 = $r0.<io.grpc.internal.RetriableStream$3: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r1);

        interfaceinvoke $r2.<io.grpc.internal.ClientStreamListener: void onReady()>();

     label1:
        return;
    }

io.grpc.internal.RetriableStream$4
<io.grpc.internal.RetriableStream$4: io.grpc.internal.RetriableStream this$0>
<io.grpc.internal.RetriableStream$4: io.grpc.Status val$reason>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.Status)
    {
        io.grpc.internal.RetriableStream$4 $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.Status $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$4;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.Status;

        $r0.<io.grpc.internal.RetriableStream$4: io.grpc.internal.RetriableStream this$0> = $r1;

        $r0.<io.grpc.internal.RetriableStream$4: io.grpc.Status val$reason> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$4 $r0;
        io.grpc.internal.ClientStreamListener$RpcProgress $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.ClientStreamListener $r3;
        io.grpc.internal.RetriableStream $r4;
        io.grpc.Status $r5;

        $r0 := @this: io.grpc.internal.RetriableStream$4;

        $r4 = $r0.<io.grpc.internal.RetriableStream$4: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: boolean access$102(io.grpc.internal.RetriableStream,boolean)>($r4, 1);

        $r4 = $r0.<io.grpc.internal.RetriableStream$4: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r4);

        $r5 = $r0.<io.grpc.internal.RetriableStream$4: io.grpc.Status val$reason>;

        $r1 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        $r2 = new io.grpc.Metadata;

        specialinvoke $r2.<io.grpc.Metadata: void <init>()>();

        interfaceinvoke $r3.<io.grpc.internal.ClientStreamListener: void closed(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r5, $r1, $r2);

        return;
    }

io.grpc.internal.RetriableStream$BufferEntry
<io.grpc.internal.RetriableStream$BufferEntry: void runWith(io.grpc.internal.RetriableStream$Substream)>
io.grpc.internal.RetriableStream$BufferSizeTracer
<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded>
<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>
<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$BufferSizeTracer $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.internal.RetriableStream$Substream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$BufferSizeTracer;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0> = $r1;

        specialinvoke $r0.<io.grpc.ClientStreamTracer: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream> = $r2;

        return;
    }

    public void outboundWireSize(long)
    {
        io.grpc.internal.RetriableStream$BufferSizeTracer $r0;
        long $l0, $l1;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.internal.RetriableStream$State $r2;
        io.grpc.internal.RetriableStream$Substream $r3;
        java.lang.Object $r4;
        boolean $z0;
        byte $b2;
        io.grpc.internal.RetriableStream$ChannelBufferMeter $r5;
        java.lang.Runnable $r6;
        java.lang.Throwable $r7;

        $r0 := @this: io.grpc.internal.RetriableStream$BufferSizeTracer;

        $l0 := @parameter0: long;

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r1);

        $r3 = $r2.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r3 == null goto label01;

        return;

     label01:
        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r1);

        entermonitor $r4;

     label02:
        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r1);

        $r3 = $r2.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r3 != null goto label10;

        $r3 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>;

        $z0 = $r3.<io.grpc.internal.RetriableStream$Substream: boolean closed>;

        if $z0 == 0 goto label03;

        goto label10;

     label03:
        $l1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded>;

        $l0 = $l1 + $l0;

        $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded> = $l0;

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $l1 = staticinvoke <io.grpc.internal.RetriableStream: long access$2600(io.grpc.internal.RetriableStream)>($r1);

        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label05;

     label04:
        exitmonitor $r4;

        return;

     label05:
        $l0 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $l1 = staticinvoke <io.grpc.internal.RetriableStream: long access$2700(io.grpc.internal.RetriableStream)>($r1);

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label06;

        $r3 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>;

        $r3.<io.grpc.internal.RetriableStream$Substream: boolean bufferLimitExceeded> = 1;

        goto label07;

     label06:
        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $r5 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$ChannelBufferMeter access$2800(io.grpc.internal.RetriableStream)>($r1);

        $l0 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $l1 = staticinvoke <io.grpc.internal.RetriableStream: long access$2600(io.grpc.internal.RetriableStream)>($r1);

        $l0 = $l0 - $l1;

        $l0 = virtualinvoke $r5.<io.grpc.internal.RetriableStream$ChannelBufferMeter: long addAndGet(long)>($l0);

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $l1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: long bufferNeeded>;

        staticinvoke <io.grpc.internal.RetriableStream: long access$2602(io.grpc.internal.RetriableStream,long)>($r1, $l1);

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $l1 = staticinvoke <io.grpc.internal.RetriableStream: long access$2900(io.grpc.internal.RetriableStream)>($r1);

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label07;

        $r3 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>;

        $r3.<io.grpc.internal.RetriableStream$Substream: boolean bufferLimitExceeded> = 1;

     label07:
        $r3 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>;

        $z0 = $r3.<io.grpc.internal.RetriableStream$Substream: boolean bufferLimitExceeded>;

        if $z0 == 0 goto label08;

        $r1 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream this$0>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$BufferSizeTracer: io.grpc.internal.RetriableStream$Substream substream>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Runnable access$3000(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r1, $r3);

        goto label09;

     label08:
        $r6 = null;

     label09:
        exitmonitor $r4;

        if $r6 == null goto label13;

        interfaceinvoke $r6.<java.lang.Runnable: void run()>();

        return;

     label10:
        exitmonitor $r4;

        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor $r4;

        throw $r7;

     label13:
        return;

        catch java.lang.Throwable from label02 to label04 with label11;
        catch java.lang.Throwable from label05 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

io.grpc.internal.RetriableStream$ChannelBufferMeter
<io.grpc.internal.RetriableStream$ChannelBufferMeter: java.util.concurrent.atomic.AtomicLong bufferUsed>
    void <init>()
    {
        io.grpc.internal.RetriableStream$ChannelBufferMeter $r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$ChannelBufferMeter;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$ChannelBufferMeter: java.util.concurrent.atomic.AtomicLong bufferUsed> = $r1;

        return;
    }

    long addAndGet(long)
    {
        io.grpc.internal.RetriableStream$ChannelBufferMeter $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        $r0 := @this: io.grpc.internal.RetriableStream$ChannelBufferMeter;

        $l0 := @parameter0: long;

        $r1 = $r0.<io.grpc.internal.RetriableStream$ChannelBufferMeter: java.util.concurrent.atomic.AtomicLong bufferUsed>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l0);

        return $l0;
    }

io.grpc.internal.RetriableStream$FutureCanceller
<io.grpc.internal.RetriableStream$FutureCanceller: boolean cancelled>
<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future future>
<io.grpc.internal.RetriableStream$FutureCanceller: java.lang.Object lock>
    void <init>(java.lang.Object)
    {
        io.grpc.internal.RetriableStream$FutureCanceller $r0;
        java.lang.Object $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$FutureCanceller;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$FutureCanceller: java.lang.Object lock> = $r1;

        return;
    }

    boolean isCancelled()
    {
        io.grpc.internal.RetriableStream$FutureCanceller $r0;
        boolean z0;

        $r0 := @this: io.grpc.internal.RetriableStream$FutureCanceller;

        z0 = $r0.<io.grpc.internal.RetriableStream$FutureCanceller: boolean cancelled>;

        return z0;
    }

    java.util.concurrent.Future markCancelled()
    {
        io.grpc.internal.RetriableStream$FutureCanceller $r0;
        java.util.concurrent.Future r1;

        $r0 := @this: io.grpc.internal.RetriableStream$FutureCanceller;

        $r0.<io.grpc.internal.RetriableStream$FutureCanceller: boolean cancelled> = 1;

        r1 = $r0.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future future>;

        return r1;
    }

    void setFuture(java.util.concurrent.Future)
    {
        io.grpc.internal.RetriableStream$FutureCanceller $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.concurrent.Future $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$FutureCanceller;

        $r2 := @parameter0: java.util.concurrent.Future;

        $r1 = $r0.<io.grpc.internal.RetriableStream$FutureCanceller: java.lang.Object lock>;

        entermonitor $r1;

        $z0 = $r0.<io.grpc.internal.RetriableStream$FutureCanceller: boolean cancelled>;

        if $z0 != 0 goto label1;

        $r0.<io.grpc.internal.RetriableStream$FutureCanceller: java.util.concurrent.Future future> = $r2;

     label1:
        exitmonitor $r1;

        return;
    }

io.grpc.internal.RetriableStream$HedgingPlan
<io.grpc.internal.RetriableStream$HedgingPlan: java.lang.Integer hedgingPushbackMillis>
<io.grpc.internal.RetriableStream$HedgingPlan: boolean isHedgeable>
    public void <init>(boolean, java.lang.Integer)
    {
        io.grpc.internal.RetriableStream$HedgingPlan $r0;
        boolean $z0;
        java.lang.Integer $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$HedgingPlan;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.Integer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$HedgingPlan: boolean isHedgeable> = $z0;

        $r0.<io.grpc.internal.RetriableStream$HedgingPlan: java.lang.Integer hedgingPushbackMillis> = $r1;

        return;
    }

io.grpc.internal.RetriableStream$HedgingRunnable$1
<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>
    void <init>(io.grpc.internal.RetriableStream$HedgingRunnable)
    {
        io.grpc.internal.RetriableStream$HedgingRunnable$1 $r0;
        io.grpc.internal.RetriableStream$HedgingRunnable $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$HedgingRunnable$1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$HedgingRunnable;

        $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$HedgingRunnable$1 $r0;
        io.grpc.internal.RetriableStream$HedgingRunnable $r1, $r13, r19;
        io.grpc.internal.RetriableStream $r2, $r3;
        io.grpc.internal.RetriableStream$State $r4;
        int $i0;
        boolean $z0, $z1;
        io.grpc.internal.RetriableStream$Substream $r5;
        java.lang.Object $r6, $r9;
        io.grpc.internal.RetriableStream$FutureCanceller $r7, r18;
        io.grpc.internal.RetriableStream$Throttle $r8;
        io.grpc.internal.ClientStream $r10;
        io.grpc.Status $r11;
        java.util.concurrent.ScheduledExecutorService $r12;
        io.grpc.internal.HedgingPolicy $r14;
        long $l1;
        java.util.concurrent.TimeUnit $r15;
        java.util.concurrent.ScheduledFuture $r16;
        java.lang.Throwable $r17;
        java.util.concurrent.Future r20;

        $r0 := @this: io.grpc.internal.RetriableStream$HedgingRunnable$1;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r3 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r3);

        $i0 = $r4.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        $z0 = 0;

        $r5 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Substream access$400(io.grpc.internal.RetriableStream,int,boolean)>($r2, $i0, 0);

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r2);

        entermonitor $r6;

     label1:
        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r7 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedgingRef>;

        $z1 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$FutureCanceller: boolean isCancelled()>();

        $r7 = null;

        if $z1 == 0 goto label2;

        $z0 = 1;

        goto label5;

     label2:
        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r3 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r3);

        $r4 = virtualinvoke $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State addActiveHedge(io.grpc.internal.RetriableStream$Substream)>($r5);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r2, $r4);

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r3 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r3);

        $z1 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$600(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r2, $r4);

        if $z1 == 0 goto label4;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r8 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r2);

        if $r8 == null goto label3;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r8 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r2);

        $z1 = virtualinvoke $r8.<io.grpc.internal.RetriableStream$Throttle: boolean isAboveThreshold()>();

        if $z1 == 0 goto label4;

     label3:
        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        r18 = new io.grpc.internal.RetriableStream$FutureCanceller;

        $r7 = r18;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r3 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r9 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r3);

        specialinvoke r18.<io.grpc.internal.RetriableStream$FutureCanceller: void <init>(java.lang.Object)>($r9);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller access$802(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r2, $r7);

        goto label5;

     label4:
        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r3 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r3);

        $r4 = virtualinvoke $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State freezeHedging()>();

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r2, $r4);

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller access$802(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r2, null);

     label5:
        exitmonitor $r6;

        if $z0 == 0 goto label6;

        $r10 = $r5.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r11 = <io.grpc.Status: io.grpc.Status CANCELLED>;

        $r11 = virtualinvoke $r11.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Unneeded hedging");

        interfaceinvoke $r10.<io.grpc.internal.ClientStream: void cancel(io.grpc.Status)>($r11);

        return;

     label6:
        if $r7 == null goto label7;

        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r12 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService access$1000(io.grpc.internal.RetriableStream)>($r2);

        r19 = new io.grpc.internal.RetriableStream$HedgingRunnable;

        $r13 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r13.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        specialinvoke r19.<io.grpc.internal.RetriableStream$HedgingRunnable: void <init>(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r2, $r7);

        $r13 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r13.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r14 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy access$900(io.grpc.internal.RetriableStream)>($r2);

        $l1 = $r14.<io.grpc.internal.HedgingPolicy: long hedgingDelayNanos>;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r16 = interfaceinvoke $r12.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r19, $l1, $r15);

        r20 = (java.util.concurrent.Future) $r16;

        virtualinvoke $r7.<io.grpc.internal.RetriableStream$FutureCanceller: void setFuture(java.util.concurrent.Future)>(r20);

     label7:
        $r1 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable$1: io.grpc.internal.RetriableStream$HedgingRunnable this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1100(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r2, $r5);

        return;

     label8:
        $r17 := @caughtexception;

        exitmonitor $r6;

        throw $r17;

        catch java.lang.Throwable from label1 to label5 with label8;
    }

io.grpc.internal.RetriableStream$HedgingRunnable
<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedgingRef>
<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$FutureCanceller)
    {
        io.grpc.internal.RetriableStream$HedgingRunnable $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.internal.RetriableStream$FutureCanceller $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$HedgingRunnable;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.internal.RetriableStream$FutureCanceller;

        $r0.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream$FutureCanceller scheduledHedgingRef> = $r2;

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$HedgingRunnable $r0;
        io.grpc.internal.RetriableStream$HedgingRunnable$1 $r1;
        java.util.concurrent.Executor $r2;
        io.grpc.internal.RetriableStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$HedgingRunnable;

        $r3 = $r0.<io.grpc.internal.RetriableStream$HedgingRunnable: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1200(io.grpc.internal.RetriableStream)>($r3);

        $r1 = new io.grpc.internal.RetriableStream$HedgingRunnable$1;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$HedgingRunnable$1: void <init>(io.grpc.internal.RetriableStream$HedgingRunnable)>($r0);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$RetryPlan
<io.grpc.internal.RetriableStream$RetryPlan: long backoffNanos>
<io.grpc.internal.RetriableStream$RetryPlan: boolean shouldRetry>
    void <init>(boolean, long)
    {
        io.grpc.internal.RetriableStream$RetryPlan $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: io.grpc.internal.RetriableStream$RetryPlan;

        $z0 := @parameter0: boolean;

        $l0 := @parameter1: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$RetryPlan: boolean shouldRetry> = $z0;

        $r0.<io.grpc.internal.RetriableStream$RetryPlan: long backoffNanos> = $l0;

        return;
    }

io.grpc.internal.RetriableStream$StartEntry
<io.grpc.internal.RetriableStream$StartEntry: io.grpc.internal.RetriableStream this$0>
    void <init>(io.grpc.internal.RetriableStream)
    {
        io.grpc.internal.RetriableStream$StartEntry $r0;
        io.grpc.internal.RetriableStream $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$StartEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r0.<io.grpc.internal.RetriableStream$StartEntry: io.grpc.internal.RetriableStream this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runWith(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$StartEntry $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.ClientStream $r2;
        io.grpc.internal.RetriableStream$Sublistener $r3;
        io.grpc.internal.RetriableStream $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$StartEntry;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>;

        $r3 = new io.grpc.internal.RetriableStream$Sublistener;

        $r4 = $r0.<io.grpc.internal.RetriableStream$StartEntry: io.grpc.internal.RetriableStream this$0>;

        specialinvoke $r3.<io.grpc.internal.RetriableStream$Sublistener: void <init>(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r4, $r1);

        interfaceinvoke $r2.<io.grpc.internal.ClientStream: void start(io.grpc.internal.ClientStreamListener)>($r3);

        return;
    }

io.grpc.internal.RetriableStream$State
<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>
<io.grpc.internal.RetriableStream$State: java.util.List buffer>
<io.grpc.internal.RetriableStream$State: boolean cancelled>
<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>
<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>
<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>
<io.grpc.internal.RetriableStream$State: boolean passThrough>
<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>
    void <init>(java.util.List, java.util.Collection, java.util.Collection, io.grpc.internal.RetriableStream$Substream, boolean, boolean, boolean, int)
    {
        io.grpc.internal.RetriableStream$State $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r2;
        java.util.Collection $r3, $r4, $r6;
        int $i0;
        java.lang.Object $r5;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r2 := @parameter0: java.util.List;

        $r3 := @parameter1: java.util.Collection;

        $r4 := @parameter2: java.util.Collection;

        $r1 := @parameter3: io.grpc.internal.RetriableStream$Substream;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        $z2 := @parameter6: boolean;

        $i0 := @parameter7: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer> = $r2;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "drainedSubstreams");

        $r6 = (java.util.Collection) $r5;

        $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams> = $r6;

        $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream> = $r1;

        $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges> = $r4;

        $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled> = $z0;

        $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough> = $z1;

        $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen> = $z2;

        $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount> = $i0;

        $z2 = 0;

        if $z1 == 0 goto label02;

        if $r2 != null goto label01;

        goto label02;

     label01:
        $z3 = 0;

        goto label03;

     label02:
        $z3 = 1;

     label03:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "passThrough should imply buffer is null");

        if $z1 == 0 goto label05;

        if $r1 == null goto label04;

        goto label05;

     label04:
        $z3 = 0;

        goto label06;

     label05:
        $z3 = 1;

     label06:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "passThrough should imply winningSubstream != null");

        if $z1 == 0 goto label09;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 != 1 goto label07;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z1 != 0 goto label09;

     label07:
        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 != 0 goto label08;

        $z1 = $r1.<io.grpc.internal.RetriableStream$Substream: boolean closed>;

        if $z1 == 0 goto label08;

        goto label09;

     label08:
        $z1 = 0;

        goto label10;

     label09:
        $z1 = 1;

     label10:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "passThrough should imply winningSubstream is drained");

        if $z0 == 0 goto label12;

        if $r1 == null goto label11;

        goto label12;

     label11:
        goto label13;

     label12:
        $z2 = 1;

     label13:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "cancelled should imply committed");

        return;
    }

    io.grpc.internal.RetriableStream$State addActiveHedge(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r8;
        java.util.List $r1;
        java.util.Collection $r2, r9;
        io.grpc.internal.RetriableStream$Substream $r3, $r4;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object $r5;
        java.util.ArrayList $r6, r7;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r3 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $z0 = 0;

        if $z1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "hedging frozen");

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r4 != null goto label3;

        $z0 = 1;

        goto label3;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "already committed");

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        if $r2 != null goto label4;

        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r3);

        goto label5;

     label4:
        r7 = new java.util.ArrayList;

        $r6 = r7;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        specialinvoke r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = (java.util.Collection) $r6;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        $r2 = (java.util.Collection) $r6;

        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

     label5:
        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        r8 = new io.grpc.internal.RetriableStream$State;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z2 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $i0 + 1;

        r9 = (java.util.Collection) $r5;

        specialinvoke r8.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r1, $r2, r9, $r3, $z0, $z1, $z2, $i0);

        return r8;
    }

    io.grpc.internal.RetriableStream$State cancelled()
    {
        io.grpc.internal.RetriableStream$State $r0, $r5;
        java.util.List $r1;
        java.util.Collection $r2, $r3;
        io.grpc.internal.RetriableStream$Substream $r4;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r5 = new io.grpc.internal.RetriableStream$State;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        specialinvoke $r5.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r1, $r2, $r3, $r4, 1, $z0, $z1, $i0);

        return $r5;
    }

    io.grpc.internal.RetriableStream$State committed(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r6;
        io.grpc.internal.RetriableStream$Substream $r1, $r3;
        java.util.Collection $r2, r7;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.List $r4;
        java.lang.Object $r5;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Already committed");

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1);

        $r4 = null;

        $z2 = 1;

        goto label4;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $z2 = 0;

     label4:
        r6 = new io.grpc.internal.RetriableStream$State;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        r7 = (java.util.Collection) $r5;

        specialinvoke r6.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r4, r7, $r2, $r1, $z0, $z2, $z1, $i0);

        return r6;
    }

    io.grpc.internal.RetriableStream$State freezeHedging()
    {
        io.grpc.internal.RetriableStream$State $r0, $r5;
        java.util.List $r1;
        java.util.Collection $r2, $r3;
        io.grpc.internal.RetriableStream$Substream $r4;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r5 = new io.grpc.internal.RetriableStream$State;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        specialinvoke $r5.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r1, $r2, $r3, $r4, $z0, $z1, 1, $i0);

        return $r5;
    }

    io.grpc.internal.RetriableStream$State removeActiveHedge(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r7;
        java.util.ArrayList $r1, r6;
        java.util.Collection $r2, $r5;
        java.util.List $r3;
        io.grpc.internal.RetriableStream$Substream $r4;
        boolean $z0, $z1, $z2;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r4 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        r6 = new java.util.ArrayList;

        $r1 = r6;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        specialinvoke r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = (java.util.Collection) $r1;

        interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>($r4);

        $r2 = (java.util.Collection) $r1;

        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        r7 = new io.grpc.internal.RetriableStream$State;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z2 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        specialinvoke r7.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r3, $r2, $r5, $r4, $z0, $z1, $z2, $i0);

        return r7;
    }

    io.grpc.internal.RetriableStream$State replaceActiveHedge(io.grpc.internal.RetriableStream$Substream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r8;
        io.grpc.internal.RetriableStream$Substream $r1, $r5;
        java.util.ArrayList $r2, r7;
        java.util.Collection $r3, $r6;
        java.util.List $r4;
        boolean $z0, $z1, $z2;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r5 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r1 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        r7 = new java.util.ArrayList;

        $r2 = r7;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        specialinvoke r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r3 = (java.util.Collection) $r2;

        interfaceinvoke $r3.<java.util.Collection: boolean remove(java.lang.Object)>($r5);

        $r3 = (java.util.Collection) $r2;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        $r3 = (java.util.Collection) $r2;

        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        r8 = new io.grpc.internal.RetriableStream$State;

        $r4 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $r5 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z2 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        specialinvoke r8.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r4, $r3, $r6, $r5, $z0, $z1, $z2, $i0);

        return r8;
    }

    io.grpc.internal.RetriableStream$State substreamClosed(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r7;
        java.util.Collection $r1, $r5;
        java.util.List $r2;
        io.grpc.internal.RetriableStream$Substream $r3;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.ArrayList $r4, r6;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r3 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $r3.<io.grpc.internal.RetriableStream$Substream: boolean closed> = 1;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        r6 = new java.util.ArrayList;

        $r4 = r6;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        specialinvoke r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        $r1 = (java.util.Collection) $r4;

        interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r3);

        $r1 = (java.util.Collection) $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        r7 = new io.grpc.internal.RetriableStream$State;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z2 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        specialinvoke r7.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r2, $r5, $r1, $r3, $z0, $z1, $z2, $i0);

        return r7;

     label1:
        return $r0;
    }

    io.grpc.internal.RetriableStream$State substreamDrained(io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$State $r0, r8;
        java.util.Collection $r1, r9;
        io.grpc.internal.RetriableStream$Substream $r2, $r6;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object $r3;
        java.util.List $r4;
        java.util.ArrayList $r5, r7;

        $r0 := @this: io.grpc.internal.RetriableStream$State;

        $r2 := @parameter0: io.grpc.internal.RetriableStream$Substream;

        $z2 = $r0.<io.grpc.internal.RetriableStream$State: boolean passThrough>;

        $z0 = 1;

        if $z2 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Already passThrough");

        $z2 = $r2.<io.grpc.internal.RetriableStream$Substream: boolean closed>;

        if $z2 == 0 goto label03;

        $r3 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        goto label05;

     label03:
        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label04;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        goto label05;

     label04:
        r7 = new java.util.ArrayList;

        $r5 = r7;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection drainedSubstreams>;

        specialinvoke r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        $r1 = (java.util.Collection) $r5;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        $r1 = (java.util.Collection) $r5;

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

     label05:
        $r6 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r6 == null goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        if $z2 == 0 goto label10;

        if $r6 != $r2 goto label08;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Another RPC attempt has already committed");

        $r4 = null;

        goto label11;

     label10:
        $r4 = $r0.<io.grpc.internal.RetriableStream$State: java.util.List buffer>;

     label11:
        r8 = new io.grpc.internal.RetriableStream$State;

        $r1 = $r0.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $z0 = $r0.<io.grpc.internal.RetriableStream$State: boolean cancelled>;

        $z1 = $r0.<io.grpc.internal.RetriableStream$State: boolean hedgingFrozen>;

        $i0 = $r0.<io.grpc.internal.RetriableStream$State: int hedgingAttemptCount>;

        r9 = (java.util.Collection) $r3;

        specialinvoke r8.<io.grpc.internal.RetriableStream$State: void <init>(java.util.List,java.util.Collection,java.util.Collection,io.grpc.internal.RetriableStream$Substream,boolean,boolean,boolean,int)>($r4, r9, $r1, $r2, $z0, $z2, $z1, $i0);

        return r8;
    }

io.grpc.internal.RetriableStream$Sublistener$1
<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.Metadata val$headers>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener$1 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.Metadata $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.Metadata;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.Metadata val$headers> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$1 $r0;
        io.grpc.Metadata $r1;
        io.grpc.internal.ClientStreamListener $r2;
        io.grpc.internal.RetriableStream$Sublistener $r3;
        io.grpc.internal.RetriableStream $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r4);

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1: io.grpc.Metadata val$headers>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStreamListener: void headersRead(io.grpc.Metadata)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1
<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable this$2>
    void <init>(io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable)
    {
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1 $r0;
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable this$2> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1 $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable $r2;
        io.grpc.internal.RetriableStream$Sublistener $r3;
        io.grpc.internal.RetriableStream $r4;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable this$2>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable this$2>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r1 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $i0 = $r1.<io.grpc.internal.RetriableStream$Substream: int previousAttemptCount>;

        $i0 = $i0 + 1;

        $r1 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Substream access$400(io.grpc.internal.RetriableStream,int,boolean)>($r4, $i0, 0);

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable this$2>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1100(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r4, $r1);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable
<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1>
    void <init>(io.grpc.internal.RetriableStream$Sublistener)
    {
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable $r0;
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1 $r1;
        java.util.concurrent.Executor $r2;
        io.grpc.internal.RetriableStream$Sublistener $r3;
        io.grpc.internal.RetriableStream $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1200(io.grpc.internal.RetriableStream)>($r4);

        $r1 = new io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable$1: void <init>(io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable)>($r0);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$2
<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>
<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Status val$status>
<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Metadata val$trailers>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener$2 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.Status $r2;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;
        io.grpc.Metadata $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$2;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.Status;

        $r3 := @parameter2: io.grpc.internal.ClientStreamListener$RpcProgress;

        $r4 := @parameter3: io.grpc.Metadata;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Status val$status> = $r2;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress> = $r3;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Metadata val$trailers> = $r4;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$2 $r0;
        io.grpc.internal.ClientStreamListener$RpcProgress $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.ClientStreamListener $r3;
        io.grpc.internal.RetriableStream$Sublistener $r4;
        io.grpc.internal.RetriableStream $r5;
        io.grpc.Status $r6;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$2;

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: boolean access$102(io.grpc.internal.RetriableStream,boolean)>($r5, 1);

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r5);

        $r6 = $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Status val$status>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$2: io.grpc.Metadata val$trailers>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStreamListener: void closed(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r6, $r1, $r2);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$3
<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>
<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Status val$tooManyTransparentRetries>
<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Metadata val$trailers>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener$3 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.Status $r2;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;
        io.grpc.Metadata $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$3;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.Status;

        $r3 := @parameter2: io.grpc.internal.ClientStreamListener$RpcProgress;

        $r4 := @parameter3: io.grpc.Metadata;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Status val$tooManyTransparentRetries> = $r2;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress> = $r3;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Metadata val$trailers> = $r4;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$3 $r0;
        io.grpc.internal.ClientStreamListener$RpcProgress $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.ClientStreamListener $r3;
        io.grpc.internal.RetriableStream$Sublistener $r4;
        io.grpc.internal.RetriableStream $r5;
        io.grpc.Status $r6;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$3;

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: boolean access$102(io.grpc.internal.RetriableStream,boolean)>($r5, 1);

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r5);

        $r6 = $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Status val$tooManyTransparentRetries>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$3: io.grpc.Metadata val$trailers>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStreamListener: void closed(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r6, $r1, $r2);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$4
<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Substream val$newSubstream>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$Sublistener$4 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.internal.RetriableStream$Substream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$4;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Substream val$newSubstream> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$4 $r0;
        io.grpc.internal.RetriableStream$Substream $r1;
        io.grpc.internal.RetriableStream$Sublistener $r2;
        io.grpc.internal.RetriableStream $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$4;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r3 = $r2.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$4: io.grpc.internal.RetriableStream$Substream val$newSubstream>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1100(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r3, $r1);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$5
<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>
<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Status val$status>
<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Metadata val$trailers>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener$5 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.Status $r2;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;
        io.grpc.Metadata $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$5;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.Status;

        $r3 := @parameter2: io.grpc.internal.ClientStreamListener$RpcProgress;

        $r4 := @parameter3: io.grpc.Metadata;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Status val$status> = $r2;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress> = $r3;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Metadata val$trailers> = $r4;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$5 $r0;
        io.grpc.internal.ClientStreamListener$RpcProgress $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.ClientStreamListener $r3;
        io.grpc.internal.RetriableStream$Sublistener $r4;
        io.grpc.internal.RetriableStream $r5;
        io.grpc.Status $r6;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$5;

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: boolean access$102(io.grpc.internal.RetriableStream,boolean)>($r5, 1);

        $r4 = $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r5 = $r4.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r5);

        $r6 = $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Status val$status>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.internal.ClientStreamListener$RpcProgress val$rpcProgress>;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener$5: io.grpc.Metadata val$trailers>;

        interfaceinvoke $r3.<io.grpc.internal.ClientStreamListener: void closed(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r6, $r1, $r2);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$6
<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.RetriableStream$Sublistener this$1>
<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.StreamListener$MessageProducer val$producer>
    void <init>(io.grpc.internal.RetriableStream$Sublistener, io.grpc.internal.StreamListener$MessageProducer)
    {
        io.grpc.internal.RetriableStream$Sublistener$6 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.internal.StreamListener$MessageProducer $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$6;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter1: io.grpc.internal.StreamListener$MessageProducer;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.StreamListener$MessageProducer val$producer> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$6 $r0;
        io.grpc.internal.StreamListener$MessageProducer $r1;
        io.grpc.internal.ClientStreamListener $r2;
        io.grpc.internal.RetriableStream$Sublistener $r3;
        io.grpc.internal.RetriableStream $r4;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$6;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r4 = $r3.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r2 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r4);

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$6: io.grpc.internal.StreamListener$MessageProducer val$producer>;

        interfaceinvoke $r2.<io.grpc.internal.ClientStreamListener: void messagesAvailable(io.grpc.internal.StreamListener$MessageProducer)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$Sublistener$7
<io.grpc.internal.RetriableStream$Sublistener$7: io.grpc.internal.RetriableStream$Sublistener this$1>
    void <init>(io.grpc.internal.RetriableStream$Sublistener)
    {
        io.grpc.internal.RetriableStream$Sublistener$7 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$7;

        $r1 := @parameter0: io.grpc.internal.RetriableStream$Sublistener;

        $r0.<io.grpc.internal.RetriableStream$Sublistener$7: io.grpc.internal.RetriableStream$Sublistener this$1> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.RetriableStream$Sublistener$7 $r0;
        io.grpc.internal.RetriableStream$Sublistener $r1;
        io.grpc.internal.RetriableStream $r2;
        boolean $z0;
        io.grpc.internal.ClientStreamListener $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener$7;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$7: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $z0 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$100(io.grpc.internal.RetriableStream)>($r2);

        if $z0 != 0 goto label1;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener$7: io.grpc.internal.RetriableStream$Sublistener this$1>;

        $r2 = $r1.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.ClientStreamListener access$200(io.grpc.internal.RetriableStream)>($r2);

        interfaceinvoke $r3.<io.grpc.internal.ClientStreamListener: void onReady()>();

     label1:
        return;
    }

io.grpc.internal.RetriableStream$Sublistener
<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>
<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>
    void <init>(io.grpc.internal.RetriableStream, io.grpc.internal.RetriableStream$Substream)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.internal.RetriableStream $r1;
        io.grpc.internal.RetriableStream$Substream $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r1 := @parameter0: io.grpc.internal.RetriableStream;

        $r2 := @parameter1: io.grpc.internal.RetriableStream$Substream;

        $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream> = $r2;

        return;
    }

    private java.lang.Integer getPushbackMills(io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.Metadata$Key $r1;
        io.grpc.Metadata $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Integer $r5;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter0: io.grpc.Metadata;

        $r1 = <io.grpc.internal.RetriableStream: io.grpc.Metadata$Key GRPC_RETRY_PUSHBACK_MS>;

        $r3 = virtualinvoke $r2.<io.grpc.Metadata: java.lang.Object get(io.grpc.Metadata$Key)>($r1);

        $r4 = (java.lang.String) $r3;

        if $r4 == null goto label1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r4);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    private io.grpc.internal.RetriableStream$HedgingPlan makeHedgingDecision(io.grpc.Status, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.internal.RetriableStream$HedgingPlan $r1;
        io.grpc.Status $r2;
        io.grpc.Metadata $r3;
        java.lang.Integer $r4;
        io.grpc.internal.RetriableStream $r5;
        io.grpc.internal.HedgingPolicy $r6;
        java.util.Set $r7;
        io.grpc.Status$Code $r8;
        boolean $z0, $z1, $z2;
        io.grpc.internal.RetriableStream$Throttle $r9;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter0: io.grpc.Status;

        $r3 := @parameter1: io.grpc.Metadata;

        $r4 = specialinvoke $r0.<io.grpc.internal.RetriableStream$Sublistener: java.lang.Integer getPushbackMills(io.grpc.Metadata)>($r3);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.HedgingPolicy access$900(io.grpc.internal.RetriableStream)>($r5);

        $r7 = $r6.<io.grpc.internal.HedgingPolicy: java.util.Set nonFatalStatusCodes>;

        $r8 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status$Code getCode()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        $z1 = 1;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r9 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r5);

        if $r9 == null goto label6;

        if $z0 == 0 goto label4;

        if $r4 == null goto label6;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        goto label6;

     label4:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r9 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r5);

        $z2 = virtualinvoke $r9.<io.grpc.internal.RetriableStream$Throttle: boolean onQualifiedFailureThenCheckIsAboveThreshold()>();

        if $z2 != 0 goto label5;

        $z2 = 1;

        goto label7;

     label5:
        $z2 = 0;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        $r1 = new io.grpc.internal.RetriableStream$HedgingPlan;

        if $z0 != 0 goto label8;

        if $z2 != 0 goto label8;

        goto label9;

     label8:
        $z1 = 0;

     label9:
        specialinvoke $r1.<io.grpc.internal.RetriableStream$HedgingPlan: void <init>(boolean,java.lang.Integer)>($z1, $r4);

        return $r1;
    }

    private io.grpc.internal.RetriableStream$RetryPlan makeRetryDecision(io.grpc.Status, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.Status $r1;
        io.grpc.Metadata $r2;
        io.grpc.internal.RetriableStream $r3, $r12;
        io.grpc.internal.RetryPolicy $r4;
        long $l0, $l3, $l4;
        boolean $z0, $z1, $z2;
        io.grpc.internal.RetriableStream$RetryPlan $r5;
        java.util.Set $r6;
        io.grpc.Status$Code $r7;
        java.lang.Integer $r8;
        io.grpc.internal.RetriableStream$Throttle $r9;
        int $i1, $i2;
        io.grpc.internal.RetriableStream$Substream $r10;
        double $d0, $d1;
        java.util.Random $r11;
        java.util.concurrent.TimeUnit $r13;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r1 := @parameter0: io.grpc.Status;

        $r2 := @parameter1: io.grpc.Metadata;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r3);

        $l0 = 0L;

        $z0 = 0;

        if $r4 != null goto label1;

        $r5 = new io.grpc.internal.RetriableStream$RetryPlan;

        specialinvoke $r5.<io.grpc.internal.RetriableStream$RetryPlan: void <init>(boolean,long)>(0, 0L);

        return $r5;

     label1:
        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r3);

        $r6 = $r4.<io.grpc.internal.RetryPolicy: java.util.Set retryableStatusCodes>;

        $r7 = virtualinvoke $r1.<io.grpc.Status: io.grpc.Status$Code getCode()>();

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        $r8 = specialinvoke $r0.<io.grpc.internal.RetriableStream$Sublistener: java.lang.Integer getPushbackMills(io.grpc.Metadata)>($r2);

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r9 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r3);

        if $r9 == null goto label5;

        if $z1 != 0 goto label3;

        if $r8 == null goto label5;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i1 >= 0 goto label2;

        goto label3;

     label2:
        goto label5;

     label3:
        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r9 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r3);

        $z2 = virtualinvoke $r9.<io.grpc.internal.RetriableStream$Throttle: boolean onQualifiedFailureThenCheckIsAboveThreshold()>();

        if $z2 != 0 goto label4;

        $z2 = 1;

        goto label6;

     label4:
        $z2 = 0;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r3);

        $i1 = $r4.<io.grpc.internal.RetryPolicy: int maxAttempts>;

        $r10 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $i2 = $r10.<io.grpc.internal.RetriableStream$Substream: int previousAttemptCount>;

        $i2 = $i2 + 1;

        if $i1 <= $i2 goto label9;

        if $z2 != 0 goto label9;

        if $r8 != null goto label7;

        if $z1 == 0 goto label9;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $l0 = staticinvoke <io.grpc.internal.RetriableStream: long access$2400(io.grpc.internal.RetriableStream)>($r3);

        $d0 = (double) $l0;

        $r11 = staticinvoke <io.grpc.internal.RetriableStream: java.util.Random access$2500()>();

        $d1 = virtualinvoke $r11.<java.util.Random: double nextDouble()>();

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $l0 = (long) $d0;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $l3 = staticinvoke <io.grpc.internal.RetriableStream: long access$2400(io.grpc.internal.RetriableStream)>($r3);

        $d0 = (double) $l3;

        $r12 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r12);

        $d1 = $r4.<io.grpc.internal.RetryPolicy: double backoffMultiplier>;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $l3 = (long) $d0;

        $r12 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r12);

        $l4 = $r4.<io.grpc.internal.RetryPolicy: long maxBackoffNanos>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l4);

        staticinvoke <io.grpc.internal.RetriableStream: long access$2402(io.grpc.internal.RetriableStream,long)>($r3, $l3);

        goto label8;

     label7:
        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i1 < 0 goto label9;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $l0 = (long) $i1;

        $l0 = virtualinvoke $r13.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r3);

        $l3 = $r4.<io.grpc.internal.RetryPolicy: long initialBackoffNanos>;

        staticinvoke <io.grpc.internal.RetriableStream: long access$2402(io.grpc.internal.RetriableStream,long)>($r3, $l3);

     label8:
        $z0 = 1;

        goto label9;

     label9:
        $r5 = new io.grpc.internal.RetriableStream$RetryPlan;

        specialinvoke $r5.<io.grpc.internal.RetriableStream$RetryPlan: void <init>(boolean,long)>($z0, $l0);

        return $r5;
    }

    public void closed(io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.internal.RetriableStream$Substream $r1, $r10;
        io.grpc.Status $r2, $r14;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3, $r12;
        io.grpc.Metadata $r4;
        io.grpc.internal.RetriableStream $r5, $r23;
        java.lang.Object $r6, $r24;
        io.grpc.internal.RetriableStream$State $r7;
        io.grpc.internal.InsightBuilder $r8;
        io.grpc.Status$Code $r9;
        boolean $z0, $z1;
        java.util.concurrent.Executor $r11;
        java.util.concurrent.atomic.AtomicInteger $r13;
        int $i0;
        io.grpc.StatusRuntimeException $r15;
        java.util.concurrent.atomic.AtomicBoolean $r16;
        io.grpc.internal.RetriableStream$HedgingPlan $r17;
        java.lang.Integer $r18;
        java.util.Collection $r19;
        java.lang.Throwable $r20, $r28, $r29, $r31;
        io.grpc.internal.RetriableStream$RetryPlan $r21;
        io.grpc.internal.RetriableStream$FutureCanceller $r22, r34;
        java.util.concurrent.ScheduledExecutorService $r25;
        long $l1;
        java.util.concurrent.TimeUnit $r26;
        java.util.concurrent.ScheduledFuture $r27;
        io.grpc.internal.RetryPolicy $r30;
        io.grpc.internal.RetriableStream$Sublistener$2 r32;
        io.grpc.internal.RetriableStream$Sublistener$3 r33;
        io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable r35;
        io.grpc.internal.RetriableStream$Sublistener$4 r36;
        io.grpc.internal.RetriableStream$Sublistener$5 r37;
        java.util.concurrent.Future r38;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r2 := @parameter0: io.grpc.Status;

        $r3 := @parameter1: io.grpc.internal.ClientStreamListener$RpcProgress;

        $r4 := @parameter2: io.grpc.Metadata;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r5);

        entermonitor $r6;

     label01:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $r7 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State substreamClosed(io.grpc.internal.RetriableStream$Substream)>($r1);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r5, $r7);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r8 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.InsightBuilder access$1600(io.grpc.internal.RetriableStream)>($r5);

        $r9 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status$Code getCode()>();

        virtualinvoke $r8.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder append(java.lang.Object)>($r9);

     label02:
        exitmonitor $r6;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $z0 = $r1.<io.grpc.internal.RetriableStream$Substream: boolean bufferLimitExceeded>;

        if $z0 == 0 goto label03;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r5, $r1);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r10 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        if $r1 != $r10 goto label26;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r11 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r5);

        r32 = new io.grpc.internal.RetriableStream$Sublistener$2;

        specialinvoke r32.<io.grpc.internal.RetriableStream$Sublistener$2: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r0, $r2, $r3, $r4);

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r32);

        return;

     label03:
        $r12 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress MISCARRIED>;

        if $r3 != $r12 goto label04;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r13 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicInteger access$1700(io.grpc.internal.RetriableStream)>($r5);

        $i0 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if $i0 <= 1000 goto label04;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r5, $r1);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r10 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        if $r1 != $r10 goto label26;

        $r14 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r14 = virtualinvoke $r14.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Too many transparent retries. Might be a bug in gRPC");

        $r15 = virtualinvoke $r2.<io.grpc.Status: io.grpc.StatusRuntimeException asRuntimeException()>();

        $r20 = (java.lang.Throwable) $r15;

        $r2 = virtualinvoke $r14.<io.grpc.Status: io.grpc.Status withCause(java.lang.Throwable)>($r20);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r11 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r5);

        r33 = new io.grpc.internal.RetriableStream$Sublistener$3;

        specialinvoke r33.<io.grpc.internal.RetriableStream$Sublistener$3: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r0, $r2, $r3, $r4);

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r33);

        return;

     label04:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r1 != null goto label24;

        $r12 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress MISCARRIED>;

        $z0 = 0;

        if $r3 == $r12 goto label17;

        $r12 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress REFUSED>;

        if $r3 != $r12 goto label05;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r16 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicBoolean access$1800(io.grpc.internal.RetriableStream)>($r5);

        $z1 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z1 == 0 goto label05;

        goto label17;

     label05:
        $r12 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress DROPPED>;

        if $r3 != $r12 goto label06;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $z0 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$1900(io.grpc.internal.RetriableStream)>($r5);

        if $z0 == 0 goto label24;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$2100(io.grpc.internal.RetriableStream)>($r5);

        goto label24;

     label06:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r16 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.atomic.AtomicBoolean access$1800(io.grpc.internal.RetriableStream)>($r5);

        virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $z0 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$1900(io.grpc.internal.RetriableStream)>($r5);

        if $z0 == 0 goto label13;

        $r17 = specialinvoke $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$HedgingPlan makeHedgingDecision(io.grpc.Status,io.grpc.Metadata)>($r2, $r4);

        $z0 = $r17.<io.grpc.internal.RetriableStream$HedgingPlan: boolean isHedgeable>;

        if $z0 == 0 goto label07;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r18 = $r17.<io.grpc.internal.RetriableStream$HedgingPlan: java.lang.Integer hedgingPushbackMillis>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$2200(io.grpc.internal.RetriableStream,java.lang.Integer)>($r5, $r18);

     label07:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r5);

        entermonitor $r6;

     label08:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $r7 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State removeActiveHedge(io.grpc.internal.RetriableStream$Substream)>($r1);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r5, $r7);

        $z0 = $r17.<io.grpc.internal.RetriableStream$HedgingPlan: boolean isHedgeable>;

        if $z0 == 0 goto label10;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $z0 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$600(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r5, $r7);

        if $z0 != 0 goto label09;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r19 = $r7.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $z0 = interfaceinvoke $r19.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label10;

     label09:
        exitmonitor $r6;

        return;

     label10:
        exitmonitor $r6;

        goto label24;

     label11:
        $r20 := @caughtexception;

     label12:
        exitmonitor $r6;

        throw $r20;

     label13:
        $r21 = specialinvoke $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$RetryPlan makeRetryDecision(io.grpc.Status,io.grpc.Metadata)>($r2, $r4);

        $z0 = $r21.<io.grpc.internal.RetriableStream$RetryPlan: boolean shouldRetry>;

        if $z0 == 0 goto label24;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r5);

        entermonitor $r6;

     label14:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        r34 = new io.grpc.internal.RetriableStream$FutureCanceller;

        $r22 = r34;

        $r23 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r24 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r23);

        specialinvoke r34.<io.grpc.internal.RetriableStream$FutureCanceller: void <init>(java.lang.Object)>($r24);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$FutureCanceller access$2302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$FutureCanceller)>($r5, $r22);

     label15:
        exitmonitor $r6;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r25 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.ScheduledExecutorService access$1000(io.grpc.internal.RetriableStream)>($r5);

        r35 = new io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable;

        specialinvoke r35.<io.grpc.internal.RetriableStream$Sublistener$1RetryBackoffRunnable: void <init>(io.grpc.internal.RetriableStream$Sublistener)>($r0);

        $l1 = $r21.<io.grpc.internal.RetriableStream$RetryPlan: long backoffNanos>;

        $r26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r27 = interfaceinvoke $r25.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r35, $l1, $r26);

        r38 = (java.util.concurrent.Future) $r27;

        virtualinvoke $r22.<io.grpc.internal.RetriableStream$FutureCanceller: void setFuture(java.util.concurrent.Future)>(r38);

        return;

     label16:
        $r28 := @caughtexception;

        exitmonitor $r6;

        throw $r28;

     label17:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $i0 = $r1.<io.grpc.internal.RetriableStream$Substream: int previousAttemptCount>;

        $r1 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Substream access$400(io.grpc.internal.RetriableStream,int,boolean)>($r5, $i0, 1);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $z1 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$1900(io.grpc.internal.RetriableStream)>($r5);

        if $z1 == 0 goto label21;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.lang.Object access$500(io.grpc.internal.RetriableStream)>($r5);

        entermonitor $r6;

     label18:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r10 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        $r7 = virtualinvoke $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$State replaceActiveHedge(io.grpc.internal.RetriableStream$Substream,io.grpc.internal.RetriableStream$Substream)>($r10, $r1);

        staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$302(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r5, $r7);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $z1 = staticinvoke <io.grpc.internal.RetriableStream: boolean access$600(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$State)>($r5, $r7);

        if $z1 != 0 goto label19;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r19 = $r7.<io.grpc.internal.RetriableStream$State: java.util.Collection activeHedges>;

        $i0 = interfaceinvoke $r19.<java.util.Collection: int size()>();

        if $i0 != 1 goto label19;

        $z0 = 1;

        goto label19;

     label19:
        exitmonitor $r6;

        if $z0 == 0 goto label23;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r5, $r1);

        goto label23;

     label20:
        $r29 := @caughtexception;

        exitmonitor $r6;

        throw $r29;

     label21:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r30 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r5);

        if $r30 == null goto label22;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r30 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetryPolicy access$2000(io.grpc.internal.RetriableStream)>($r5);

        $i0 = $r30.<io.grpc.internal.RetryPolicy: int maxAttempts>;

        if $i0 != 1 goto label23;

     label22:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r5, $r1);

     label23:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r11 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1200(io.grpc.internal.RetriableStream)>($r5);

        r36 = new io.grpc.internal.RetriableStream$Sublistener$4;

        specialinvoke r36.<io.grpc.internal.RetriableStream$Sublistener$4: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.internal.RetriableStream$Substream)>($r0, $r1);

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r36);

        return;

     label24:
        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r5, $r1);

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r5);

        $r1 = $r7.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r10 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        if $r1 != $r10 goto label26;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r11 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r5);

        r37 = new io.grpc.internal.RetriableStream$Sublistener$5;

        specialinvoke r37.<io.grpc.internal.RetriableStream$Sublistener$5: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r0, $r2, $r3, $r4);

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r37);

        return;

     label25:
        $r31 := @caughtexception;

        exitmonitor $r6;

        throw $r31;

     label26:
        return;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public void headersRead(io.grpc.Metadata)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.Metadata $r1;
        io.grpc.internal.RetriableStream $r2;
        io.grpc.internal.RetriableStream$Substream $r3, $r5;
        io.grpc.internal.RetriableStream$State $r4;
        io.grpc.internal.RetriableStream$Throttle $r6;
        java.util.concurrent.Executor $r7;
        io.grpc.internal.RetriableStream$Sublistener$1 $r8;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r1 := @parameter0: io.grpc.Metadata;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        staticinvoke <io.grpc.internal.RetriableStream: void access$1400(io.grpc.internal.RetriableStream,io.grpc.internal.RetriableStream$Substream)>($r2, $r3);

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r4 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r2);

        $r3 = $r4.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        if $r3 != $r5 goto label2;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r2);

        if $r6 == null goto label1;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$Throttle access$700(io.grpc.internal.RetriableStream)>($r2);

        virtualinvoke $r6.<io.grpc.internal.RetriableStream$Throttle: void onSuccess()>();

     label1:
        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r7 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r2);

        $r8 = new io.grpc.internal.RetriableStream$Sublistener$1;

        specialinvoke $r8.<io.grpc.internal.RetriableStream$Sublistener$1: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.Metadata)>($r0, $r1);

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

     label2:
        return;
    }

    public void messagesAvailable(io.grpc.internal.StreamListener$MessageProducer)
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.internal.StreamListener$MessageProducer $r1;
        io.grpc.internal.RetriableStream $r2;
        io.grpc.internal.RetriableStream$State $r3;
        io.grpc.internal.RetriableStream$Substream $r4, $r5;
        boolean $z0;
        java.util.concurrent.Executor $r6;
        io.grpc.internal.RetriableStream$Sublistener$6 $r7;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r1 := @parameter0: io.grpc.internal.StreamListener$MessageProducer;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: io.grpc.internal.RetriableStream$State access$300(io.grpc.internal.RetriableStream)>($r2);

        $r4 = $r3.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Headers should be received prior to messages.");

        $r4 = $r3.<io.grpc.internal.RetriableStream$State: io.grpc.internal.RetriableStream$Substream winningSubstream>;

        $r5 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream$Substream substream>;

        if $r4 == $r5 goto label3;

        return;

     label3:
        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r6 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r2);

        $r7 = new io.grpc.internal.RetriableStream$Sublistener$6;

        specialinvoke $r7.<io.grpc.internal.RetriableStream$Sublistener$6: void <init>(io.grpc.internal.RetriableStream$Sublistener,io.grpc.internal.StreamListener$MessageProducer)>($r0, $r1);

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    public void onReady()
    {
        io.grpc.internal.RetriableStream$Sublistener $r0;
        io.grpc.internal.RetriableStream$Sublistener$7 $r1;
        io.grpc.internal.RetriableStream $r2;
        boolean $z0;
        java.util.concurrent.Executor $r3;

        $r0 := @this: io.grpc.internal.RetriableStream$Sublistener;

        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $z0 = virtualinvoke $r2.<io.grpc.internal.RetriableStream: boolean isReady()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<io.grpc.internal.RetriableStream$Sublistener: io.grpc.internal.RetriableStream this$0>;

        $r3 = staticinvoke <io.grpc.internal.RetriableStream: java.util.concurrent.Executor access$1500(io.grpc.internal.RetriableStream)>($r2);

        $r1 = new io.grpc.internal.RetriableStream$Sublistener$7;

        specialinvoke $r1.<io.grpc.internal.RetriableStream$Sublistener$7: void <init>(io.grpc.internal.RetriableStream$Sublistener)>($r0);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

io.grpc.internal.RetriableStream$Substream
<io.grpc.internal.RetriableStream$Substream: boolean bufferLimitExceeded>
<io.grpc.internal.RetriableStream$Substream: boolean closed>
<io.grpc.internal.RetriableStream$Substream: int previousAttemptCount>
<io.grpc.internal.RetriableStream$Substream: io.grpc.internal.ClientStream stream>
    void <init>(int)
    {
        io.grpc.internal.RetriableStream$Substream $r0;
        int $i0;

        $r0 := @this: io.grpc.internal.RetriableStream$Substream;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$Substream: int previousAttemptCount> = $i0;

        return;
    }

io.grpc.internal.RetriableStream$Throttle
<io.grpc.internal.RetriableStream$Throttle: int maxTokens>
<io.grpc.internal.RetriableStream$Throttle: int threshold>
<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>
<io.grpc.internal.RetriableStream$Throttle: int tokenRatio>
    void <init>(float, float)
    {
        io.grpc.internal.RetriableStream$Throttle $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        float $f0, $f1;
        int $i0, $i1;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount> = $r1;

        $f1 = $f1 * 1000.0F;

        $i0 = (int) $f1;

        $r0.<io.grpc.internal.RetriableStream$Throttle: int tokenRatio> = $i0;

        $f0 = $f0 * 1000.0F;

        $i0 = (int) $f0;

        $r0.<io.grpc.internal.RetriableStream$Throttle: int maxTokens> = $i0;

        $i1 = $i0 / 2;

        $r0.<io.grpc.internal.RetriableStream$Throttle: int threshold> = $i1;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        io.grpc.internal.RetriableStream$Throttle $r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof io.grpc.internal.RetriableStream$Throttle;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (io.grpc.internal.RetriableStream$Throttle) $r1;

        $i1 = $r0.<io.grpc.internal.RetriableStream$Throttle: int maxTokens>;

        $i0 = $r2.<io.grpc.internal.RetriableStream$Throttle: int maxTokens>;

        if $i1 != $i0 goto label3;

        $i0 = $r0.<io.grpc.internal.RetriableStream$Throttle: int tokenRatio>;

        $i1 = $r2.<io.grpc.internal.RetriableStream$Throttle: int tokenRatio>;

        if $i0 != $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        io.grpc.internal.RetriableStream$Throttle $r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Integer $r2;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = $r0.<io.grpc.internal.RetriableStream$Throttle: int maxTokens>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i0 = $r0.<io.grpc.internal.RetriableStream$Throttle: int tokenRatio>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    boolean isAboveThreshold()
    {
        io.grpc.internal.RetriableStream$Throttle $r0;
        int $i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i0 = $r0.<io.grpc.internal.RetriableStream$Throttle: int threshold>;

        if $i1 <= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean onQualifiedFailureThenCheckIsAboveThreshold()
    {
        io.grpc.internal.RetriableStream$Throttle $r0;
        int $i0, $i1, $i2;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

     label1:
        $r1 = $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 != 0 goto label2;

        return 0;

     label2:
        $i0 = $i1 + -1000;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 0);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i1, $i2);

        if $z0 == 0 goto label1;

        $i1 = $r0.<io.grpc.internal.RetriableStream$Throttle: int threshold>;

        if $i0 <= $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    void onSuccess()
    {
        io.grpc.internal.RetriableStream$Throttle $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: io.grpc.internal.RetriableStream$Throttle;

     label1:
        $r1 = $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = $r0.<io.grpc.internal.RetriableStream$Throttle: int maxTokens>;

        if $i0 != $i1 goto label2;

        return;

     label2:
        $i2 = $r0.<io.grpc.internal.RetriableStream$Throttle: int tokenRatio>;

        $r1 = $r0.<io.grpc.internal.RetriableStream$Throttle: java.util.concurrent.atomic.AtomicInteger tokenCount>;

        $i2 = $i2 + $i0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        return;
    }

