androidx.car.app.testing.FakeHost
<androidx.car.app.testing.FakeHost: androidx.car.app.ICarHost$Stub mCarHost>
<androidx.car.app.testing.FakeHost: androidx.car.app.IAppHost mAppHost>
<androidx.car.app.testing.FakeHost: androidx.car.app.navigation.INavigationHost mNavigationHost>
<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext>
    public void performNotificationActionClick(android.app.PendingIntent)
    {
        androidx.car.app.testing.FakeHost r0;
        android.app.PendingIntent r1;
        android.os.Bundle r2, r25;
        android.content.Intent r3, r24, r26;
        androidx.car.app.testing.TestCarContext $r6, $r10, $r11, $r16;
        androidx.car.app.IStartCarApp $r7;
        android.os.IBinder $r8;
        org.robolectric.shadows.ShadowContextWrapper $r12;
        java.util.List $r13;
        java.lang.Object $r14;
        java.lang.Throwable $r17, r23;
        java.lang.StringBuilder $r20, $r21, r27;
        java.lang.String $r22;
        java.lang.IllegalStateException r28;
        androidx.car.app.notification.CarAppNotificationBroadcastReceiver r29;
        android.content.Context r30, r32;
        android.content.ContextWrapper r31;

        r0 := @this: androidx.car.app.testing.FakeHost;

        r1 := @parameter0: android.app.PendingIntent;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r25 = new android.os.Bundle;

        specialinvoke r25.<android.os.Bundle: void <init>(int)>(1);

        r2 = r25;

        $r6 = r0.<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext>;

        $r7 = virtualinvoke $r6.<androidx.car.app.testing.TestCarContext: androidx.car.app.IStartCarApp getStartCarAppStub()>();

        $r8 = interfaceinvoke $r7.<androidx.car.app.IStartCarApp: android.os.IBinder asBinder()>();

        virtualinvoke r2.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("androidx.car.app.extra.START_CAR_APP_BINDER_KEY", $r8);

        r26 = new android.content.Intent;

        specialinvoke r26.<android.content.Intent: void <init>()>();

        r3 = virtualinvoke r26.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r2);

     label1:
        $r10 = r0.<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext>;

        r30 = (android.content.Context) $r10;

        virtualinvoke r1.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>(r30, 0, r3);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        r23 = $r17;

        r28 = new java.lang.IllegalStateException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to broadcast intent ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r22, r23);

        throw r28;

     label4:
        $r11 = r0.<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext>;

        r31 = (android.content.ContextWrapper) $r11;

        $r12 = staticinvoke <org.robolectric.Shadows: org.robolectric.shadows.ShadowContextWrapper shadowOf(android.content.ContextWrapper)>(r31);

        $r13 = virtualinvoke $r12.<org.robolectric.shadows.ShadowContextWrapper: java.util.List getBroadcastIntents()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        r24 = (android.content.Intent) $r14;

        r29 = new androidx.car.app.notification.CarAppNotificationBroadcastReceiver;

        specialinvoke r29.<androidx.car.app.notification.CarAppNotificationBroadcastReceiver: void <init>()>();

        $r16 = r0.<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext>;

        r32 = (android.content.Context) $r16;

        virtualinvoke r29.<androidx.car.app.notification.CarAppNotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>(r32, r24);

        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    void <init>(androidx.car.app.testing.TestCarContext)
    {
        androidx.car.app.testing.FakeHost r0;
        androidx.car.app.testing.TestCarContext r1;
        androidx.car.app.testing.FakeHost$TestCarHost r5;
        androidx.car.app.testing.FakeHost$TestAppHost r6;
        androidx.car.app.testing.FakeHost$TestNavigationHost r7;
        androidx.car.app.IAppHost r8;
        androidx.car.app.navigation.INavigationHost r9;

        r0 := @this: androidx.car.app.testing.FakeHost;

        r1 := @parameter0: androidx.car.app.testing.TestCarContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = new androidx.car.app.testing.FakeHost$TestCarHost;

        specialinvoke r5.<androidx.car.app.testing.FakeHost$TestCarHost: void <init>(androidx.car.app.testing.FakeHost)>(r0);

        r0.<androidx.car.app.testing.FakeHost: androidx.car.app.ICarHost$Stub mCarHost> = r5;

        r6 = new androidx.car.app.testing.FakeHost$TestAppHost;

        specialinvoke r6.<androidx.car.app.testing.FakeHost$TestAppHost: void <init>(androidx.car.app.testing.FakeHost)>(r0);

        r8 = (androidx.car.app.IAppHost) r6;

        r0.<androidx.car.app.testing.FakeHost: androidx.car.app.IAppHost mAppHost> = r8;

        r7 = new androidx.car.app.testing.FakeHost$TestNavigationHost;

        specialinvoke r7.<androidx.car.app.testing.FakeHost$TestNavigationHost: void <init>()>();

        r9 = (androidx.car.app.navigation.INavigationHost) r7;

        r0.<androidx.car.app.testing.FakeHost: androidx.car.app.navigation.INavigationHost mNavigationHost> = r9;

        r0.<androidx.car.app.testing.FakeHost: androidx.car.app.testing.TestCarContext mTestCarContext> = r1;

        return;
    }

    androidx.car.app.ICarHost getCarHost()
    {
        androidx.car.app.testing.FakeHost r0;
        androidx.car.app.ICarHost$Stub $r1;
        androidx.car.app.ICarHost r2;

        r0 := @this: androidx.car.app.testing.FakeHost;

        $r1 = r0.<androidx.car.app.testing.FakeHost: androidx.car.app.ICarHost$Stub mCarHost>;

        r2 = (androidx.car.app.ICarHost) $r1;

        return r2;
    }

