kotlinx.atomicfu.AtomicFU
    public static final kotlinx.atomicfu.AtomicBoolean atomic(boolean)
    {
        kotlinx.atomicfu.TraceBase$None $r0;
        kotlinx.atomicfu.AtomicBoolean $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        $r1 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicBoolean atomic(boolean,kotlinx.atomicfu.TraceBase)>($z0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicBoolean atomic(boolean, kotlinx.atomicfu.TraceBase)
    {
        boolean $z0;
        kotlinx.atomicfu.TraceBase $r0;
        kotlinx.atomicfu.AtomicBoolean $r1;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "trace");

        $r1 = new kotlinx.atomicfu.AtomicBoolean;

        specialinvoke $r1.<kotlinx.atomicfu.AtomicBoolean: void <init>(boolean,kotlinx.atomicfu.TraceBase)>($z0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicInt atomic(int)
    {
        kotlinx.atomicfu.TraceBase$None $r0;
        kotlinx.atomicfu.AtomicInt $r1;
        int $i0;

        $i0 := @parameter0: int;

        $r0 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        $r1 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicInt atomic(int,kotlinx.atomicfu.TraceBase)>($i0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicInt atomic(int, kotlinx.atomicfu.TraceBase)
    {
        int $i0;
        kotlinx.atomicfu.TraceBase $r0;
        kotlinx.atomicfu.AtomicInt $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "trace");

        $r1 = new kotlinx.atomicfu.AtomicInt;

        specialinvoke $r1.<kotlinx.atomicfu.AtomicInt: void <init>(int,kotlinx.atomicfu.TraceBase)>($i0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicLong atomic(long)
    {
        kotlinx.atomicfu.TraceBase$None $r0;
        kotlinx.atomicfu.AtomicLong $r1;
        long $l0;

        $l0 := @parameter0: long;

        $r0 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        $r1 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicLong atomic(long,kotlinx.atomicfu.TraceBase)>($l0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicLong atomic(long, kotlinx.atomicfu.TraceBase)
    {
        long $l0;
        kotlinx.atomicfu.TraceBase $r0;
        kotlinx.atomicfu.AtomicLong $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "trace");

        $r1 = new kotlinx.atomicfu.AtomicLong;

        specialinvoke $r1.<kotlinx.atomicfu.AtomicLong: void <init>(long,kotlinx.atomicfu.TraceBase)>($l0, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicRef atomic(java.lang.Object)
    {
        kotlinx.atomicfu.TraceBase$None $r0;
        kotlinx.atomicfu.AtomicRef $r1;
        java.lang.Object $r2;

        $r2 := @parameter0: java.lang.Object;

        $r0 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        $r1 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicRef atomic(java.lang.Object,kotlinx.atomicfu.TraceBase)>($r2, $r0);

        return $r1;
    }

    public static final kotlinx.atomicfu.AtomicRef atomic(java.lang.Object, kotlinx.atomicfu.TraceBase)
    {
        java.lang.Object $r0;
        kotlinx.atomicfu.TraceBase $r1;
        kotlinx.atomicfu.AtomicRef $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trace");

        $r2 = new kotlinx.atomicfu.AtomicRef;

        specialinvoke $r2.<kotlinx.atomicfu.AtomicRef: void <init>(java.lang.Object,kotlinx.atomicfu.TraceBase)>($r0, $r1);

        return $r2;
    }

