androidx.leanback.widget.ShadowOverlayHelper
<androidx.leanback.widget.ShadowOverlayHelper: int SHADOW_NONE>
<androidx.leanback.widget.ShadowOverlayHelper: int SHADOW_STATIC>
<androidx.leanback.widget.ShadowOverlayHelper: int SHADOW_DYNAMIC>
<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType>
<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay>
<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner>
<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsShadow>
<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsWrapper>
<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius>
<androidx.leanback.widget.ShadowOverlayHelper: float mUnfocusedZ>
<androidx.leanback.widget.ShadowOverlayHelper: float mFocusedZ>
    public static boolean supportsShadow()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.leanback.widget.StaticShadowHelper: boolean supportsShadow()>();

        return $z0;
    }

    public static boolean supportsDynamicShadow()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.leanback.widget.ShadowHelper: boolean supportsDynamicShadow()>();

        return $z0;
    }

    public static boolean supportsRoundedCorner()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.leanback.widget.RoundedRectHelper: boolean supportsRoundedCorner()>();

        return $z0;
    }

    public static boolean supportsForeground()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.leanback.widget.ForegroundHelper: boolean supportsForeground()>();

        return $z0;
    }

    void <init>()
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType> = 1;

        return;
    }

    public void prepareParentForShadow(android.view.ViewGroup)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        android.view.ViewGroup r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: android.view.ViewGroup;

        $i0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType>;

        if $i0 != 2 goto label1;

        staticinvoke <androidx.leanback.widget.StaticShadowHelper: void prepareParent(android.view.ViewGroup)>(r1);

     label1:
        return;
    }

    public int getShadowType()
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        $i0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType>;

        return $i0;
    }

    public boolean needsOverlay()
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        $z0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay>;

        return $z0;
    }

    public boolean needsRoundedCorner()
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        $z0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner>;

        return $z0;
    }

    public boolean needsWrapper()
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        $z0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsWrapper>;

        return $z0;
    }

    public androidx.leanback.widget.ShadowOverlayContainer createShadowOverlayContainer(android.content.Context)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        android.content.Context r1;
        boolean $z0, $z1;
        androidx.leanback.widget.ShadowOverlayContainer $r2;
        int $i0, $i1;
        float $f0, $f1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: android.content.Context;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean needsWrapper()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new androidx.leanback.widget.ShadowOverlayContainer;

        $i1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType>;

        $z1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay>;

        $f1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: float mUnfocusedZ>;

        $f0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: float mFocusedZ>;

        $i0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius>;

        specialinvoke $r2.<androidx.leanback.widget.ShadowOverlayContainer: void <init>(android.content.Context,int,boolean,float,float,int)>(r1, $i1, $z1, $f1, $f0, $i0);

        return $r2;
    }

    public static void setNoneWrapperOverlayColor(android.view.View, int)
    {
        android.view.View r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;
        android.graphics.drawable.ColorDrawable $r2, $r3;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r1 = staticinvoke <androidx.leanback.widget.ForegroundHelper: android.graphics.drawable.Drawable getForeground(android.view.View)>(r0);

        $z0 = r1 instanceof android.graphics.drawable.ColorDrawable;

        if $z0 == 0 goto label1;

        $r3 = (android.graphics.drawable.ColorDrawable) r1;

        virtualinvoke $r3.<android.graphics.drawable.ColorDrawable: void setColor(int)>(i0);

        goto label2;

     label1:
        $r2 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r2.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0);

        staticinvoke <androidx.leanback.widget.ForegroundHelper: void setForeground(android.view.View,android.graphics.drawable.Drawable)>(r0, $r2);

     label2:
        return;
    }

    public void setOverlayColor(android.view.View, int)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        android.view.View r1;
        int i0;
        boolean $z0;
        androidx.leanback.widget.ShadowOverlayContainer $r2;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean needsWrapper()>();

        if $z0 == 0 goto label1;

        $r2 = (androidx.leanback.widget.ShadowOverlayContainer) r1;

        virtualinvoke $r2.<androidx.leanback.widget.ShadowOverlayContainer: void setOverlayColor(int)>(i0);

        goto label2;

     label1:
        staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: void setNoneWrapperOverlayColor(android.view.View,int)>(r1, i0);

     label2:
        return;
    }

    public void onViewCreated(android.view.View)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        android.view.View r1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean needsWrapper()>();

        if $z0 != 0 goto label3;

        $z1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsShadow>;

        if $z1 != 0 goto label1;

        $z3 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner>;

        if $z3 == 0 goto label3;

        $i4 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius>;

        staticinvoke <androidx.leanback.widget.RoundedRectHelper: void setClipToRoundedOutline(android.view.View,boolean,int)>(r1, 1, $i4);

        goto label3;

     label1:
        $i0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType>;

        if $i0 != 3 goto label2;

        $f1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: float mUnfocusedZ>;

        $f0 = r0.<androidx.leanback.widget.ShadowOverlayHelper: float mFocusedZ>;

        $i2 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius>;

        r2 = staticinvoke <androidx.leanback.widget.ShadowHelper: java.lang.Object addDynamicShadow(android.view.View,float,float,int)>(r1, $f1, $f0, $i2);

        $i3 = <androidx.leanback.R$id: int lb_shadow_impl>;

        virtualinvoke r1.<android.view.View: void setTag(int,java.lang.Object)>($i3, r2);

        goto label3;

     label2:
        $z2 = r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner>;

        if $z2 == 0 goto label3;

        $i1 = r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius>;

        staticinvoke <androidx.leanback.widget.RoundedRectHelper: void setClipToRoundedOutline(android.view.View,boolean,int)>(r1, 1, $i1);

     label3:
        return;
    }

    public static void setNoneWrapperShadowFocusLevel(android.view.View, float)
    {
        android.view.View r0;
        float f0;
        java.lang.Object $r1;

        r0 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        $r1 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: java.lang.Object getNoneWrapperDynamicShadowImpl(android.view.View)>(r0);

        staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: void setShadowFocusLevel(java.lang.Object,int,float)>($r1, 3, f0);

        return;
    }

    public void setShadowFocusLevel(android.view.View, float)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        android.view.View r1;
        float f0;
        boolean $z0;
        java.lang.Object $r2;
        androidx.leanback.widget.ShadowOverlayContainer $r3;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.ShadowOverlayHelper: boolean needsWrapper()>();

        if $z0 == 0 goto label1;

        $r3 = (androidx.leanback.widget.ShadowOverlayContainer) r1;

        virtualinvoke $r3.<androidx.leanback.widget.ShadowOverlayContainer: void setShadowFocusLevel(float)>(f0);

        goto label2;

     label1:
        $r2 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: java.lang.Object getNoneWrapperDynamicShadowImpl(android.view.View)>(r1);

        staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: void setShadowFocusLevel(java.lang.Object,int,float)>($r2, 3, f0);

     label2:
        return;
    }

    void setupDynamicShadowZ(androidx.leanback.widget.ShadowOverlayHelper$Options, android.content.Context)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        androidx.leanback.widget.ShadowOverlayHelper$Options r1;
        android.content.Context r2;
        android.content.res.Resources r3;
        float $f0, $f1, $f2, $f3, $f4;
        byte $b0;
        int $i1, $i2;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: androidx.leanback.widget.ShadowOverlayHelper$Options;

        r2 := @parameter1: android.content.Context;

        $f0 = virtualinvoke r1.<androidx.leanback.widget.ShadowOverlayHelper$Options: float getDynamicShadowUnfocusedZ()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        r3 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = <androidx.leanback.R$dimen: int lb_material_shadow_focused_z>;

        $f3 = virtualinvoke r3.<android.content.res.Resources: float getDimension(int)>($i1);

        r0.<androidx.leanback.widget.ShadowOverlayHelper: float mFocusedZ> = $f3;

        $i2 = <androidx.leanback.R$dimen: int lb_material_shadow_normal_z>;

        $f4 = virtualinvoke r3.<android.content.res.Resources: float getDimension(int)>($i2);

        r0.<androidx.leanback.widget.ShadowOverlayHelper: float mUnfocusedZ> = $f4;

        goto label2;

     label1:
        $f1 = virtualinvoke r1.<androidx.leanback.widget.ShadowOverlayHelper$Options: float getDynamicShadowFocusedZ()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper: float mFocusedZ> = $f1;

        $f2 = virtualinvoke r1.<androidx.leanback.widget.ShadowOverlayHelper$Options: float getDynamicShadowUnfocusedZ()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper: float mUnfocusedZ> = $f2;

     label2:
        return;
    }

    void setupRoundedCornerRadius(androidx.leanback.widget.ShadowOverlayHelper$Options, android.content.Context)
    {
        androidx.leanback.widget.ShadowOverlayHelper r0;
        androidx.leanback.widget.ShadowOverlayHelper$Options r1;
        android.content.Context r2;
        android.content.res.Resources r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper;

        r1 := @parameter0: androidx.leanback.widget.ShadowOverlayHelper$Options;

        r2 := @parameter1: android.content.Context;

        $i0 = virtualinvoke r1.<androidx.leanback.widget.ShadowOverlayHelper$Options: int getRoundedCornerRadius()>();

        if $i0 != 0 goto label1;

        r3 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = <androidx.leanback.R$dimen: int lb_rounded_rect_corner_radius>;

        $i3 = virtualinvoke r3.<android.content.res.Resources: int getDimensionPixelSize(int)>($i2);

        r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius> = $i3;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<androidx.leanback.widget.ShadowOverlayHelper$Options: int getRoundedCornerRadius()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper: int mRoundedCornerRadius> = $i1;

     label2:
        return;
    }

    static java.lang.Object getNoneWrapperDynamicShadowImpl(android.view.View)
    {
        android.view.View r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @parameter0: android.view.View;

        $i0 = <androidx.leanback.R$id: int lb_shadow_impl>;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0);

        return $r1;
    }

    static void setShadowFocusLevel(java.lang.Object, int, float)
    {
        java.lang.Object r0;
        int i0;
        byte $b1, $b2;
        float f0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        if r0 == null goto label5;

        $b1 = f0 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        $b2 = f0 cmpl 1.0F;

        if $b2 <= 0 goto label2;

        f0 = 1.0F;

     label2:
        lookupswitch(i0)
        {
            case 2: goto label4;
            case 3: goto label3;
            default: goto label5;
        };

     label3:
        staticinvoke <androidx.leanback.widget.ShadowHelper: void setShadowFocusLevel(java.lang.Object,float)>(r0, f0);

        goto label5;

     label4:
        staticinvoke <androidx.leanback.widget.StaticShadowHelper: void setShadowFocusLevel(java.lang.Object,float)>(r0, f0);

     label5:
        return;
    }

androidx.leanback.widget.ShadowOverlayHelper$Builder
<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsOverlay>
<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsRoundedCorner>
<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsShadow>
<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean preferZOrder>
<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean keepForegroundDrawable>
<androidx.leanback.widget.ShadowOverlayHelper$Builder: androidx.leanback.widget.ShadowOverlayHelper$Options options>
    public void <init>()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        androidx.leanback.widget.ShadowOverlayHelper$Options $r1;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean preferZOrder> = 1;

        $r1 = <androidx.leanback.widget.ShadowOverlayHelper$Options: androidx.leanback.widget.ShadowOverlayHelper$Options DEFAULT>;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: androidx.leanback.widget.ShadowOverlayHelper$Options options> = $r1;

        return;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder needsOverlay(boolean)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsOverlay> = z0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder needsShadow(boolean)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsShadow> = z0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder needsRoundedCorner(boolean)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsRoundedCorner> = z0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder preferZOrder(boolean)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean preferZOrder> = z0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder keepForegroundDrawable(boolean)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean keepForegroundDrawable> = z0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Builder options(androidx.leanback.widget.ShadowOverlayHelper$Options)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        androidx.leanback.widget.ShadowOverlayHelper$Options r1;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        r1 := @parameter0: androidx.leanback.widget.ShadowOverlayHelper$Options;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: androidx.leanback.widget.ShadowOverlayHelper$Options options> = r1;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper build(android.content.Context)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Builder r0;
        android.content.Context r1;
        androidx.leanback.widget.ShadowOverlayHelper r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        androidx.leanback.widget.ShadowOverlayHelper$Options $r4, $r5;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Builder;

        r1 := @parameter0: android.content.Context;

        $r3 = new androidx.leanback.widget.ShadowOverlayHelper;

        specialinvoke $r3.<androidx.leanback.widget.ShadowOverlayHelper: void <init>()>();

        r2 = $r3;

        $z0 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsOverlay>;

        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay> = $z0;

        $z1 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsRoundedCorner>;

        if $z1 == 0 goto label01;

        $z12 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: boolean supportsRoundedCorner()>();

        if $z12 == 0 goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner> = $z13;

        $z14 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean needsShadow>;

        if $z14 == 0 goto label03;

        $z11 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: boolean supportsShadow()>();

        if $z11 == 0 goto label03;

        $z15 = 1;

        goto label04;

     label03:
        $z15 = 0;

     label04:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsShadow> = $z15;

        $z16 = r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsRoundedCorner>;

        if $z16 == 0 goto label05;

        $r5 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: androidx.leanback.widget.ShadowOverlayHelper$Options options>;

        virtualinvoke r2.<androidx.leanback.widget.ShadowOverlayHelper: void setupRoundedCornerRadius(androidx.leanback.widget.ShadowOverlayHelper$Options,android.content.Context)>($r5, r1);

     label05:
        $z2 = r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsShadow>;

        if $z2 == 0 goto label11;

        $z6 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean preferZOrder>;

        if $z6 == 0 goto label06;

        $z7 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: boolean supportsDynamicShadow()>();

        if $z7 != 0 goto label07;

     label06:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType> = 2;

        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsWrapper> = 1;

        goto label15;

     label07:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType> = 3;

        $r4 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: androidx.leanback.widget.ShadowOverlayHelper$Options options>;

        virtualinvoke r2.<androidx.leanback.widget.ShadowOverlayHelper: void setupDynamicShadowZ(androidx.leanback.widget.ShadowOverlayHelper$Options,android.content.Context)>($r4, r1);

        $z8 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: boolean supportsForeground()>();

        if $z8 == 0 goto label08;

        $z10 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean keepForegroundDrawable>;

        if $z10 == 0 goto label09;

     label08:
        $z9 = r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay>;

        if $z9 == 0 goto label09;

        $z17 = 1;

        goto label10;

     label09:
        $z17 = 0;

     label10:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsWrapper> = $z17;

        goto label15;

     label11:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: int mShadowType> = 1;

        $z3 = staticinvoke <androidx.leanback.widget.ShadowOverlayHelper: boolean supportsForeground()>();

        if $z3 == 0 goto label12;

        $z5 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Builder: boolean keepForegroundDrawable>;

        if $z5 == 0 goto label13;

     label12:
        $z4 = r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsOverlay>;

        if $z4 == 0 goto label13;

        $z18 = 1;

        goto label14;

     label13:
        $z18 = 0;

     label14:
        r2.<androidx.leanback.widget.ShadowOverlayHelper: boolean mNeedsWrapper> = $z18;

     label15:
        return r2;
    }

androidx.leanback.widget.ShadowOverlayHelper$Options
<androidx.leanback.widget.ShadowOverlayHelper$Options: androidx.leanback.widget.ShadowOverlayHelper$Options DEFAULT>
<androidx.leanback.widget.ShadowOverlayHelper$Options: int roundedCornerRadius>
<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowUnfocusedZ>
<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowFocusedZ>
    public void <init>()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: int roundedCornerRadius> = 0;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowUnfocusedZ> = -1.0F;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowFocusedZ> = -1.0F;

        return;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Options roundedCornerRadius(int)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;
        int i0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        i0 := @parameter0: int;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: int roundedCornerRadius> = i0;

        return r0;
    }

    public androidx.leanback.widget.ShadowOverlayHelper$Options dynamicShadowZ(float, float)
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;
        float f0, f1;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowUnfocusedZ> = f0;

        r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowFocusedZ> = f1;

        return r0;
    }

    public final int getRoundedCornerRadius()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        $i0 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: int roundedCornerRadius>;

        return $i0;
    }

    public final float getDynamicShadowUnfocusedZ()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;
        float $f0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        $f0 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowUnfocusedZ>;

        return $f0;
    }

    public final float getDynamicShadowFocusedZ()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options r0;
        float $f0;

        r0 := @this: androidx.leanback.widget.ShadowOverlayHelper$Options;

        $f0 = r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: float dynamicShadowFocusedZ>;

        return $f0;
    }

    static void <clinit>()
    {
        androidx.leanback.widget.ShadowOverlayHelper$Options $r0;

        $r0 = new androidx.leanback.widget.ShadowOverlayHelper$Options;

        specialinvoke $r0.<androidx.leanback.widget.ShadowOverlayHelper$Options: void <init>()>();

        <androidx.leanback.widget.ShadowOverlayHelper$Options: androidx.leanback.widget.ShadowOverlayHelper$Options DEFAULT> = $r0;

        return;
    }

