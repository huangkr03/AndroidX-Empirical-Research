kotlin.reflect.TypeVariableImpl
<kotlin.reflect.TypeVariableImpl: kotlin.reflect.KTypeParameter typeParameter>
    public void <init>(kotlin.reflect.KTypeParameter)
    {
        kotlin.reflect.TypeVariableImpl $r0;
        kotlin.reflect.KTypeParameter $r1;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 := @parameter0: kotlin.reflect.KTypeParameter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "typeParameter");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.reflect.TypeVariableImpl: kotlin.reflect.KTypeParameter typeParameter> = $r1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2, $r4;
        java.lang.reflect.TypeVariable $r3;
        java.lang.reflect.GenericDeclaration $r5, $r6;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.String getName()>();

        $r3 = (java.lang.reflect.TypeVariable) $r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r3 = (java.lang.reflect.TypeVariable) $r1;

        $r6 = interfaceinvoke $r3.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.'annotation'.Annotation[] getAnnotatedBounds()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.'annotation'.Annotation[] $r1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        $r2 = (java.lang.Object[]) $r1;

        $r1 = (java.lang.'annotation'.Annotation[]) $r2;

        return $r1;
    }

    public final java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.Class $r1;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "annotationClass");

        return null;
    }

    public final java.lang.'annotation'.Annotation[] getAnnotations()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.'annotation'.Annotation[] $r1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        $r2 = (java.lang.Object[]) $r1;

        $r1 = (java.lang.'annotation'.Annotation[]) $r2;

        return $r1;
    }

    public java.lang.reflect.Type[] getBounds()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        kotlin.reflect.KTypeParameter $r1;
        java.util.List $r2;
        java.util.ArrayList $r3, r10;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        kotlin.reflect.KType $r6;
        java.lang.reflect.Type $r7;
        java.lang.reflect.Type[] $r8;
        java.lang.Object[] $r9;
        java.lang.Iterable r11;
        java.util.Collection r12;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = $r0.<kotlin.reflect.TypeVariableImpl: kotlin.reflect.KTypeParameter typeParameter>;

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KTypeParameter: java.util.List getUpperBounds()>();

        r10 = new java.util.ArrayList;

        $r3 = r10;

        r11 = (java.lang.Iterable) $r2;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r11, 10);

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>($i0);

        r11 = (java.lang.Iterable) $r2;

        $r4 = interfaceinvoke r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kotlin.reflect.KType) $r5;

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type access$computeJavaType(kotlin.reflect.KType,boolean)>($r6, 1);

        r12 = (java.util.Collection) $r3;

        interfaceinvoke r12.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r8 = newarray (java.lang.reflect.Type)[0];

        r12 = (java.util.Collection) $r3;

        $r9 = interfaceinvoke r12.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r8 = (java.lang.reflect.Type[]) $r9;

        return $r8;
    }

    public final java.lang.'annotation'.Annotation[] getDeclaredAnnotations()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.'annotation'.Annotation[] $r1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        $r2 = (java.lang.Object[]) $r1;

        $r1 = (java.lang.'annotation'.Annotation[]) $r2;

        return $r1;
    }

    public java.lang.reflect.GenericDeclaration getGenericDeclaration()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.StringBuilder $r1;
        kotlin.reflect.KTypeParameter $r2;
        java.lang.String $r3;
        kotlin.NotImplementedError $r4;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getGenericDeclaration() is not yet supported for type variables created from KType: ");

        $r2 = $r0.<kotlin.reflect.TypeVariableImpl: kotlin.reflect.KTypeParameter typeParameter>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new kotlin.NotImplementedError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An operation is not implemented: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<kotlin.NotImplementedError: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public java.lang.String getName()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.String $r1;
        kotlin.reflect.KTypeParameter $r2;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r2 = $r0.<kotlin.reflect.TypeVariableImpl: kotlin.reflect.KTypeParameter typeParameter>;

        $r1 = interfaceinvoke $r2.<kotlin.reflect.KTypeParameter: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getTypeName()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.String $r1;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.String getName()>();

        return $r1;
    }

    public int hashCode()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.reflect.GenericDeclaration $r2;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        kotlin.reflect.TypeVariableImpl $r0;
        java.lang.String $r1;

        $r0 := @this: kotlin.reflect.TypeVariableImpl;

        $r1 = virtualinvoke $r0.<kotlin.reflect.TypeVariableImpl: java.lang.String getTypeName()>();

        return $r1;
    }

