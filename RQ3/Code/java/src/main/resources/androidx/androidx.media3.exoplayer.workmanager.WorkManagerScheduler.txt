androidx.media3.exoplayer.workmanager.WorkManagerScheduler
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String TAG>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String KEY_SERVICE_ACTION>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String KEY_SERVICE_PACKAGE>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String KEY_REQUIREMENTS>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: int SUPPORTED_REQUIREMENTS>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.WorkManager workManager>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String workName>
    public void <init>(java.lang.String)
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler r0;
        java.lang.String r1;
        androidx.work.WorkManager $r2;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String workName> = r1;

        $r2 = staticinvoke <androidx.work.WorkManager: androidx.work.WorkManager getInstance()>();

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.WorkManager workManager> = $r2;

        return;
    }

    public void <init>(android.content.Context, java.lang.String)
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler r0;
        android.content.Context r1, $r3;
        java.lang.String r2;
        androidx.work.WorkManager $r4;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String workName> = r2;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r4 = staticinvoke <androidx.work.WorkManager: androidx.work.WorkManager getInstance(android.content.Context)>($r3);

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.WorkManager workManager> = $r4;

        return;
    }

    public boolean schedule(androidx.media3.exoplayer.scheduler.Requirements, java.lang.String, java.lang.String)
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler r0;
        androidx.media3.exoplayer.scheduler.Requirements r1;
        java.lang.String r2, r3, $r8;
        androidx.work.Constraints r4;
        androidx.work.Data r5;
        androidx.work.OneTimeWorkRequest r6;
        androidx.work.ExistingWorkPolicy $r7;
        androidx.work.WorkManager $r9;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler;

        r1 := @parameter0: androidx.media3.exoplayer.scheduler.Requirements;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = staticinvoke <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.Constraints buildConstraints(androidx.media3.exoplayer.scheduler.Requirements)>(r1);

        r5 = staticinvoke <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.Data buildInputData(androidx.media3.exoplayer.scheduler.Requirements,java.lang.String,java.lang.String)>(r1, r2, r3);

        r6 = staticinvoke <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.OneTimeWorkRequest buildWorkRequest(androidx.work.Constraints,androidx.work.Data)>(r4, r5);

        $r9 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.WorkManager workManager>;

        $r8 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String workName>;

        $r7 = <androidx.work.ExistingWorkPolicy: androidx.work.ExistingWorkPolicy REPLACE>;

        virtualinvoke $r9.<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,androidx.work.OneTimeWorkRequest)>($r8, $r7, r6);

        return 1;
    }

    public boolean cancel()
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler r0;
        java.lang.String $r1;
        androidx.work.WorkManager $r2;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler;

        $r2 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: androidx.work.WorkManager workManager>;

        $r1 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler: java.lang.String workName>;

        virtualinvoke $r2.<androidx.work.WorkManager: androidx.work.Operation cancelUniqueWork(java.lang.String)>($r1);

        return 1;
    }

    public androidx.media3.exoplayer.scheduler.Requirements getSupportedRequirements(androidx.media3.exoplayer.scheduler.Requirements)
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler r0;
        androidx.media3.exoplayer.scheduler.Requirements r1, $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler;

        r1 := @parameter0: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: int SUPPORTED_REQUIREMENTS>;

        $r2 = virtualinvoke r1.<androidx.media3.exoplayer.scheduler.Requirements: androidx.media3.exoplayer.scheduler.Requirements filterRequirements(int)>($i0);

        return $r2;
    }

    private static androidx.work.Constraints buildConstraints(androidx.media3.exoplayer.scheduler.Requirements)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0, r1;
        androidx.work.Constraints$Builder r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.work.NetworkType $r4, $r9, $r11;
        androidx.work.Constraints $r6;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;

        r0 := @parameter0: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: int SUPPORTED_REQUIREMENTS>;

        r1 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: androidx.media3.exoplayer.scheduler.Requirements filterRequirements(int)>($i0);

        $z0 = virtualinvoke r1.<androidx.media3.exoplayer.scheduler.Requirements: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring unsupported requirements: ");

        $i1 = virtualinvoke r1.<androidx.media3.exoplayer.scheduler.Requirements: int getRequirements()>();

        $i2 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: int getRequirements()>();

        $i3 = $i1 ^ $i2;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("WorkManagerScheduler", $r16);

     label1:
        $r3 = new androidx.work.Constraints$Builder;

        specialinvoke $r3.<androidx.work.Constraints$Builder: void <init>()>();

        r2 = $r3;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isUnmeteredNetworkRequired()>();

        if $z1 == 0 goto label2;

        $r11 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiredNetworkType(androidx.work.NetworkType)>($r11);

        goto label4;

     label2:
        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isNetworkRequired()>();

        if $z2 == 0 goto label3;

        $r9 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        goto label4;

     label3:
        $r4 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiredNetworkType(androidx.work.NetworkType)>($r4);

     label4:
        $i4 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i4 < 23 goto label5;

        $z4 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isIdleRequired()>();

        if $z4 == 0 goto label5;

        staticinvoke <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: void setRequiresDeviceIdle(androidx.work.Constraints$Builder)>(r2);

     label5:
        $z5 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isChargingRequired()>();

        if $z5 == 0 goto label6;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresCharging(boolean)>(1);

     label6:
        $z3 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isStorageNotLowRequired()>();

        if $z3 == 0 goto label7;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresStorageNotLow(boolean)>(1);

     label7:
        $r6 = virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints build()>();

        return $r6;
    }

    private static void setRequiresDeviceIdle(androidx.work.Constraints$Builder)
    {
        androidx.work.Constraints$Builder r0;

        r0 := @parameter0: androidx.work.Constraints$Builder;

        virtualinvoke r0.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresDeviceIdle(boolean)>(1);

        return;
    }

    private static androidx.work.Data buildInputData(androidx.media3.exoplayer.scheduler.Requirements, java.lang.String, java.lang.String)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        java.lang.String r1, r2;
        androidx.work.Data$Builder r3, $r4;
        int $i0;
        androidx.work.Data $r8;

        r0 := @parameter0: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = new androidx.work.Data$Builder;

        specialinvoke $r4.<androidx.work.Data$Builder: void <init>()>();

        r3 = $r4;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: int getRequirements()>();

        virtualinvoke r3.<androidx.work.Data$Builder: androidx.work.Data$Builder putInt(java.lang.String,int)>("requirements", $i0);

        virtualinvoke r3.<androidx.work.Data$Builder: androidx.work.Data$Builder putString(java.lang.String,java.lang.String)>("service_package", r1);

        virtualinvoke r3.<androidx.work.Data$Builder: androidx.work.Data$Builder putString(java.lang.String,java.lang.String)>("service_action", r2);

        $r8 = virtualinvoke r3.<androidx.work.Data$Builder: androidx.work.Data build()>();

        return $r8;
    }

    private static androidx.work.OneTimeWorkRequest buildWorkRequest(androidx.work.Constraints, androidx.work.Data)
    {
        androidx.work.Constraints r0;
        androidx.work.Data r1;
        androidx.work.OneTimeWorkRequest$Builder r2, $r3;
        androidx.work.WorkRequest $r6;
        androidx.work.OneTimeWorkRequest $r7;

        r0 := @parameter0: androidx.work.Constraints;

        r1 := @parameter1: androidx.work.Data;

        $r3 = new androidx.work.OneTimeWorkRequest$Builder;

        specialinvoke $r3.<androidx.work.OneTimeWorkRequest$Builder: void <init>(java.lang.Class)>(class "Landroidx/media3/exoplayer/workmanager/WorkManagerScheduler$SchedulerWorker;");

        r2 = $r3;

        virtualinvoke r2.<androidx.work.OneTimeWorkRequest$Builder: androidx.work.WorkRequest$Builder setConstraints(androidx.work.Constraints)>(r0);

        virtualinvoke r2.<androidx.work.OneTimeWorkRequest$Builder: androidx.work.WorkRequest$Builder setInputData(androidx.work.Data)>(r1);

        $r6 = virtualinvoke r2.<androidx.work.OneTimeWorkRequest$Builder: androidx.work.WorkRequest build()>();

        $r7 = (androidx.work.OneTimeWorkRequest) $r6;

        return $r7;
    }

    static void <clinit>()
    {
        int $i0;
        byte $b1, $b2, $b3, $b5;

        staticinvoke <androidx.media3.common.MediaLibraryInfo: void registerModule(java.lang.String)>("media3.exoplayer.workmanager");

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 23 goto label1;

        $b5 = 4;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        $b1 = 3 | $b5;

        $b2 = $b1 | 8;

        $b3 = $b2 | 16;

        <androidx.media3.exoplayer.workmanager.WorkManagerScheduler: int SUPPORTED_REQUIREMENTS> = $b3;

        return;
    }

androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: androidx.work.WorkerParameters workerParams>
<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: android.content.Context context>
    public void <init>(android.content.Context, androidx.work.WorkerParameters)
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker r0;
        android.content.Context r1;
        androidx.work.WorkerParameters r2;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.WorkerParameters;

        specialinvoke r0.<androidx.work.Worker: void <init>(android.content.Context,androidx.work.WorkerParameters)>(r1, r2);

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: androidx.work.WorkerParameters workerParams> = r2;

        r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: android.content.Context context> = r1;

        return;
    }

    public androidx.work.ListenableWorker$Result doWork()
    {
        androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker r0;
        androidx.work.Data r1, $r7;
        androidx.media3.exoplayer.scheduler.Requirements r2, $r9;
        int i0, $i1;
        java.lang.String r3, r4, $r14, $r16, $r18;
        android.content.Intent r5, $r20;
        androidx.work.WorkerParameters $r6;
        java.lang.Object $r8, $r17, $r19;
        android.content.Context $r10, $r21;
        java.lang.StringBuilder $r11, $r12, $r13;
        androidx.work.ListenableWorker$Result $r15, $r23;

        r0 := @this: androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker;

        $r6 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: androidx.work.WorkerParameters workerParams>;

        $r7 = virtualinvoke $r6.<androidx.work.WorkerParameters: androidx.work.Data getInputData()>();

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        r1 = (androidx.work.Data) $r8;

        $r9 = new androidx.media3.exoplayer.scheduler.Requirements;

        $i1 = virtualinvoke r1.<androidx.work.Data: int getInt(java.lang.String,int)>("requirements", 0);

        specialinvoke $r9.<androidx.media3.exoplayer.scheduler.Requirements: void <init>(int)>($i1);

        r2 = $r9;

        $r10 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: android.content.Context context>;

        i0 = virtualinvoke r2.<androidx.media3.exoplayer.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>($r10);

        if i0 != 0 goto label1;

        $r16 = virtualinvoke r1.<androidx.work.Data: java.lang.String getString(java.lang.String)>("service_action");

        $r17 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        r3 = (java.lang.String) $r17;

        $r18 = virtualinvoke r1.<androidx.work.Data: java.lang.String getString(java.lang.String)>("service_package");

        $r19 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r18);

        r4 = (java.lang.String) $r19;

        $r20 = new android.content.Intent;

        specialinvoke $r20.<android.content.Intent: void <init>(java.lang.String)>(r3);

        r5 = virtualinvoke $r20.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r4);

        $r21 = r0.<androidx.media3.exoplayer.workmanager.WorkManagerScheduler$SchedulerWorker: android.content.Context context>;

        staticinvoke <androidx.media3.common.util.Util: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)>($r21, r5);

        $r23 = staticinvoke <androidx.work.ListenableWorker$Result: androidx.work.ListenableWorker$Result success()>();

        return $r23;

     label1:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requirements not met: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("WorkManagerScheduler", $r14);

        $r15 = staticinvoke <androidx.work.ListenableWorker$Result: androidx.work.ListenableWorker$Result retry()>();

        return $r15;
    }

