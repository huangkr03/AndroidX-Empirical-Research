androidx.compose.ui.test.ApplyingContinuationInterceptor
<androidx.compose.ui.test.ApplyingContinuationInterceptor: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key Key>
<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate>
    public void <init>(kotlinx.coroutines.test.TestDispatcher)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        kotlinx.coroutines.test.TestDispatcher r1;
        kotlin.coroutines.ContinuationInterceptor$Key $r2;
        kotlin.coroutines.CoroutineContext$Key $r3;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        r1 := @parameter0: kotlinx.coroutines.test.TestDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        $r2 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        specialinvoke r0.<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>($r3);

        r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate> = r1;

        return;
    }

    public java.lang.Object delay(long, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        long l0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.test.TestDispatcher $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.test.TestDispatcher: java.lang.Object delay(long,kotlin.coroutines.Continuation)>(l0, $r1);

        return $r3;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        long l0;
        java.lang.Runnable r1;
        kotlin.coroutines.CoroutineContext r2;
        kotlinx.coroutines.test.TestDispatcher $r3;
        kotlinx.coroutines.DisposableHandle $r4;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Runnable;

        r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "context");

        $r3 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate>;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.test.TestDispatcher: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>(l0, r1, r2);

        return $r4;
    }

    public void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        long l0;
        kotlinx.coroutines.CancellableContinuation r1;
        kotlinx.coroutines.test.TestDispatcher $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        l0 := @parameter0: long;

        r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "continuation");

        $r2 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate>;

        virtualinvoke $r2.<kotlinx.coroutines.test.TestDispatcher: void scheduleResumeAfterDelay(long,kotlinx.coroutines.CancellableContinuation)>(l0, r1);

        return;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        $r1 = <androidx.compose.ui.test.ApplyingContinuationInterceptor: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        return $r2;
    }

    public kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        kotlin.coroutines.Continuation r1, $r4, $r5;
        androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation $r2;
        kotlinx.coroutines.test.TestDispatcher $r3;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "continuation");

        $r3 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor: kotlinx.coroutines.test.TestDispatcher delegate>;

        $r2 = new androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation;

        specialinvoke $r2.<androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation: void <init>(kotlin.coroutines.Continuation)>(r1);

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r5 = virtualinvoke $r3.<kotlinx.coroutines.test.TestDispatcher: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>($r4);

        return $r5;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext$Element $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public void releaseInterceptedContinuation(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor r0;
        kotlin.coroutines.Continuation r1;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: void releaseInterceptedContinuation(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.Continuation)>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key $r0;

        $r0 = new androidx.compose.ui.test.ApplyingContinuationInterceptor$Key;

        specialinvoke $r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.test.ApplyingContinuationInterceptor: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key Key> = $r0;

        return;
    }

androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1
<androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 r0;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.ui.test.ApplyingContinuationInterceptor invoke(kotlin.coroutines.CoroutineContext$Element)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 r0;
        kotlin.coroutines.CoroutineContext$Element r1;
        boolean $z0;
        androidx.compose.ui.test.ApplyingContinuationInterceptor $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $z0 = r1 instanceof androidx.compose.ui.test.ApplyingContinuationInterceptor;

        if $z0 == 0 goto label1;

        $r2 = (androidx.compose.ui.test.ApplyingContinuationInterceptor) r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 r0;
        java.lang.Object r1;
        kotlin.coroutines.CoroutineContext$Element $r2;
        androidx.compose.ui.test.ApplyingContinuationInterceptor $r3;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.CoroutineContext$Element) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1: androidx.compose.ui.test.ApplyingContinuationInterceptor invoke(kotlin.coroutines.CoroutineContext$Element)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 $r0;

        $r0 = new androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1;

        specialinvoke $r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1: void <init>()>();

        <androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.test.ApplyingContinuationInterceptor$Key
    private void <init>()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 $r2;
        kotlin.jvm.functions.Function1 $r3;
        kotlin.coroutines.CoroutineContext$Key $r4;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key;

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        $r2 = <androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        specialinvoke r0.<kotlin.coroutines.AbstractCoroutineContextKey: void <init>(kotlin.coroutines.CoroutineContext$Key,kotlin.jvm.functions.Function1)>($r4, $r3);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$Key r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$Key;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$Key: void <init>()>();

        return;
    }

androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation
<androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation: kotlin.coroutines.Continuation continuation>
    public void <init>(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation r0;
        kotlin.coroutines.Continuation r1;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "continuation");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation: kotlin.coroutines.Continuation continuation> = r1;

        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation;

        $r1 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation: kotlin.coroutines.Continuation continuation>;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r2;
    }

    public void resumeWith(java.lang.Object)
    {
        androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation r0;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r3;

        r0 := @this: androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r1);

        $r3 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r3.<androidx.compose.runtime.snapshots.Snapshot$Companion: void sendApplyNotifications()>();

        return;
    }

