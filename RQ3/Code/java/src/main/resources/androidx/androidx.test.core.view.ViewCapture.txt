androidx.test.core.view.ViewCapture
    private static final android.app.Activity getActivity(android.view.View)
    {
        android.view.View $r0;
        android.content.Context $r1;
        android.app.Activity $r2;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = staticinvoke <androidx.test.core.view.ViewCapture: android.app.Activity getActivity$getActivity(android.content.Context)>($r1);

        return $r2;
    }

    private static final android.app.Activity getActivity$getActivity(android.content.Context)
    {
        android.content.Context $r0, r1, $r3;
        boolean $z0, $z1;
        android.content.ContextWrapper $r2;
        android.app.Activity $r4;

        $r0 := @parameter0: android.content.Context;

        r1 = $r0;

        $z0 = r1 instanceof android.app.Activity;

        if $z0 == 0 goto label1;

        $r4 = (android.app.Activity) $r0;

        goto label3;

     label1:
        $z1 = r1 instanceof android.content.ContextWrapper;

        if $z1 == 0 goto label2;

        $r2 = (android.content.ContextWrapper) $r0;

        $r3 = virtualinvoke $r2.<android.content.ContextWrapper: android.content.Context getBaseContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this.baseContext");

        $r4 = staticinvoke <androidx.test.core.view.ViewCapture: android.app.Activity getActivity$getActivity(android.content.Context)>($r3);

        goto label3;

     label2:
        $r4 = null;

     label3:
        return $r4;
    }

    public static final com.google.common.util.concurrent.ListenableFuture captureToBitmap(android.view.View)
    {
        android.view.View $r0;
        androidx.concurrent.futures.ResolvableFuture r1, $r3;
        androidx.test.core.internal.os.HandlerExecutor r2, $r4;
        android.os.Handler $r5;
        android.os.Looper $r6;
        boolean $z0;
        androidx.test.core.view.ViewCapture$captureToBitmap$2 $r7;
        java.lang.Runnable $r8, $r12;
        com.google.common.util.concurrent.ListenableFuture $r9;
        androidx.test.core.view.ViewCapture$captureToBitmap$1 $r10;
        java.util.concurrent.Executor $r11;

        $r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r3 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "create()");

        r1 = $r3;

        $r4 = new androidx.test.core.internal.os.HandlerExecutor;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        specialinvoke $r4.<androidx.test.core.internal.os.HandlerExecutor: void <init>(android.os.Handler)>($r5);

        r2 = $r4;

        $z0 = staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: boolean isDrawingEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(1);

        $r10 = <androidx.test.core.view.ViewCapture$captureToBitmap$1: androidx.test.core.view.ViewCapture$captureToBitmap$1 INSTANCE>;

        $r12 = (java.lang.Runnable) $r10;

        $r11 = (java.util.concurrent.Executor) r2;

        virtualinvoke r1.<androidx.concurrent.futures.ResolvableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r12, $r11);

     label1:
        $r7 = new androidx.test.core.view.ViewCapture$captureToBitmap$2;

        specialinvoke $r7.<androidx.test.core.view.ViewCapture$captureToBitmap$2: void <init>(android.view.View,androidx.test.core.internal.os.HandlerExecutor,androidx.concurrent.futures.ResolvableFuture)>($r0, r2, r1);

        $r8 = (java.lang.Runnable) $r7;

        virtualinvoke r2.<androidx.test.core.internal.os.HandlerExecutor: void execute(java.lang.Runnable)>($r8);

        $r9 = (com.google.common.util.concurrent.ListenableFuture) r1;

        return $r9;
    }

    public static final com.google.common.util.concurrent.ListenableFuture forceRedraw(android.view.View)
    {
        android.view.View $r0;
        androidx.concurrent.futures.ResolvableFuture r1, $r2;
        int $i0;
        android.view.ViewTreeObserver $r3, $r6;
        androidx.test.core.view.ViewCapture$forceRedraw$2 $r4;
        android.view.ViewTreeObserver$OnDrawListener $r5;
        boolean $z0;
        androidx.test.core.view.ViewCapture$forceRedraw$1 $r7;
        java.lang.Runnable $r8;
        com.google.common.util.concurrent.ListenableFuture $r9;

        $r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "create()");

        r1 = $r2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label1;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r0.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r7 = new androidx.test.core.view.ViewCapture$forceRedraw$1;

        specialinvoke $r7.<androidx.test.core.view.ViewCapture$forceRedraw$1: void <init>(androidx.concurrent.futures.ResolvableFuture)>(r1);

        $r8 = (java.lang.Runnable) $r7;

        virtualinvoke $r6.<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>($r8);

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r4 = new androidx.test.core.view.ViewCapture$forceRedraw$2;

        specialinvoke $r4.<androidx.test.core.view.ViewCapture$forceRedraw$2: void <init>(androidx.concurrent.futures.ResolvableFuture,android.view.View)>(r1, $r0);

        $r5 = (android.view.ViewTreeObserver$OnDrawListener) $r4;

        virtualinvoke $r3.<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>($r5);

     label2:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $r9 = (com.google.common.util.concurrent.ListenableFuture) r1;

        return $r9;
    }

    public static final void access$generateBitmap(android.view.View, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.View $r0;
        androidx.concurrent.futures.ResolvableFuture r1;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.concurrent.futures.ResolvableFuture;

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmap(android.view.View,androidx.concurrent.futures.ResolvableFuture)>($r0, r1);

        return;
    }

    private static final void generateBitmap(android.view.View, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.View $r0;
        androidx.concurrent.futures.ResolvableFuture r1;
        android.graphics.Bitmap r2;
        android.view.Window r3, $r7;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        android.graphics.Bitmap$Config $r4;
        android.app.Activity $r5;
        android.view.SurfaceView $r6;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.concurrent.futures.ResolvableFuture;

        $z0 = virtualinvoke r1.<androidx.concurrent.futures.ResolvableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r4);

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 26 goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmapFromDraw(android.view.View,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r0, r2, r1);

        goto label7;

     label2:
        $z1 = $r0 instanceof android.view.SurfaceView;

        if $z1 == 0 goto label3;

        $r6 = (android.view.SurfaceView) $r0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmapFromSurfaceViewPixelCopy(android.view.SurfaceView,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r6, r2, r1);

        goto label7;

     label3:
        $r5 = staticinvoke <androidx.test.core.view.ViewCapture: android.app.Activity getActivity(android.view.View)>($r0);

        if $r5 == null goto label4;

        $r7 = virtualinvoke $r5.<android.app.Activity: android.view.Window getWindow()>();

        goto label5;

     label4:
        $r7 = null;

     label5:
        r3 = $r7;

        if r3 == null goto label6;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmapFromPixelCopy(android.view.View,android.view.Window,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r0, r3, r2, r1);

        goto label7;

     label6:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("View.captureToImage", "Could not find window for view. Falling back to View#draw instead of PixelCopy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmapFromDraw(android.view.View,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r0, r2, r1);

     label7:
        return;
    }

    public static final void generateBitmapFromDraw(android.view.View, android.graphics.Bitmap, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.View $r0;
        android.graphics.Bitmap r1;
        androidx.concurrent.futures.ResolvableFuture r2;
        android.graphics.Canvas r3, $r6;
        android.content.res.Resources $r4;
        android.util.DisplayMetrics $r5;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "destBitmap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bitmapFuture");

        $r4 = virtualinvoke $r0.<android.view.View: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r5.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r1.<android.graphics.Bitmap: void setDensity(int)>($i0);

        virtualinvoke $r0.<android.view.View: void computeScroll()>();

        $r6 = new android.graphics.Canvas;

        specialinvoke $r6.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        r3 = $r6;

        $i1 = virtualinvoke $r0.<android.view.View: int getScrollX()>();

        $i2 = neg $i1;

        $f0 = (float) $i2;

        $i3 = virtualinvoke $r0.<android.view.View: int getScrollY()>();

        $i4 = neg $i3;

        $f1 = (float) $i4;

        virtualinvoke r3.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        virtualinvoke $r0.<android.view.View: void draw(android.graphics.Canvas)>(r3);

        virtualinvoke r2.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>(r1);

        return;
    }

    private static final void generateBitmapFromPixelCopy(android.view.View, android.view.Window, android.graphics.Bitmap, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.View $r0;
        android.view.Window r1;
        android.graphics.Bitmap r2;
        androidx.concurrent.futures.ResolvableFuture r3;
        int[] r4, r7;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.graphics.Rect r5, $r6;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.Window;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: androidx.concurrent.futures.ResolvableFuture;

        r7 = newarray (int)[2];

        r7[0] = 0;

        r7[1] = 0;

        r4 = r7;

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>(r4);

        i5 = r4[0];

        i0 = r4[1];

        $r6 = new android.graphics.Rect;

        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i2 = i5 + $i1;

        $i3 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i4 = i0 + $i3;

        specialinvoke $r6.<android.graphics.Rect: void <init>(int,int,int,int)>(i5, i0, $i2, $i4);

        r5 = $r6;

        staticinvoke <androidx.test.core.view.WindowCapture: void generateBitmapFromPixelCopy(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>(r1, r5, r2, r3);

        return;
    }

    private static final void generateBitmapFromSurfaceViewPixelCopy(android.view.SurfaceView, android.graphics.Bitmap, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.SurfaceView $r0;
        android.graphics.Bitmap r1;
        androidx.concurrent.futures.ResolvableFuture r2;
        android.view.PixelCopy$OnPixelCopyFinishedListener r3;
        androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1 $r4;
        android.os.Handler $r5;

        $r0 := @parameter0: android.view.SurfaceView;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        $r4 = new androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1;

        specialinvoke $r4.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: void <init>(androidx.concurrent.futures.ResolvableFuture,android.graphics.Bitmap)>(r2, r1);

        r3 = (android.view.PixelCopy$OnPixelCopyFinishedListener) $r4;

        $r5 = virtualinvoke $r0.<android.view.SurfaceView: android.os.Handler getHandler()>();

        staticinvoke <android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r0, null, r1, r3, $r5);

        return;
    }

androidx.test.core.view.ViewCapture$captureToBitmap$1
<androidx.test.core.view.ViewCapture$captureToBitmap$1: androidx.test.core.view.ViewCapture$captureToBitmap$1 INSTANCE>
    static void <clinit>()
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$1 $r0;

        $r0 = new androidx.test.core.view.ViewCapture$captureToBitmap$1;

        specialinvoke $r0.<androidx.test.core.view.ViewCapture$captureToBitmap$1: void <init>()>();

        <androidx.test.core.view.ViewCapture$captureToBitmap$1: androidx.test.core.view.ViewCapture$captureToBitmap$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$1 r0;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$1 r0;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$1;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(0);

        return;
    }

androidx.test.core.view.ViewCapture$captureToBitmap$2$1
<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: android.view.View $this_captureToBitmap>
<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.view.View, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$2$1 r0;
        android.view.View $r1;
        androidx.concurrent.futures.ResolvableFuture $r2;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$2$1;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: android.view.View $this_captureToBitmap> = $r1;

        r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$2$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.view.View $r2;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$2$1;

        $r2 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: android.view.View $this_captureToBitmap>;

        $r1 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        staticinvoke <androidx.test.core.view.ViewCapture: void access$generateBitmap(android.view.View,androidx.concurrent.futures.ResolvableFuture)>($r2, $r1);

        return;
    }

androidx.test.core.view.ViewCapture$captureToBitmap$2
<androidx.test.core.view.ViewCapture$captureToBitmap$2: android.view.View $this_captureToBitmap>
<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor>
<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.view.View, androidx.test.core.internal.os.HandlerExecutor, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$2 r0;
        android.view.View $r1;
        androidx.test.core.internal.os.HandlerExecutor $r2;
        androidx.concurrent.futures.ResolvableFuture $r3;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$2;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: androidx.test.core.internal.os.HandlerExecutor;

        $r3 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: android.view.View $this_captureToBitmap> = $r1;

        r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor> = $r2;

        r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.ViewCapture$captureToBitmap$2 r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        android.view.View $r2, $r5;
        androidx.test.core.view.ViewCapture$captureToBitmap$2$1 $r3;
        androidx.concurrent.futures.ResolvableFuture $r4;
        androidx.test.core.internal.os.HandlerExecutor $r6;
        java.util.concurrent.Executor $r7;
        java.lang.Runnable $r8;

        r0 := @this: androidx.test.core.view.ViewCapture$captureToBitmap$2;

        $r2 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: android.view.View $this_captureToBitmap>;

        r1 = staticinvoke <androidx.test.core.view.ViewCapture: com.google.common.util.concurrent.ListenableFuture forceRedraw(android.view.View)>($r2);

        $r3 = new androidx.test.core.view.ViewCapture$captureToBitmap$2$1;

        $r5 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: android.view.View $this_captureToBitmap>;

        $r4 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        specialinvoke $r3.<androidx.test.core.view.ViewCapture$captureToBitmap$2$1: void <init>(android.view.View,androidx.concurrent.futures.ResolvableFuture)>($r5, $r4);

        $r8 = (java.lang.Runnable) $r3;

        $r6 = r0.<androidx.test.core.view.ViewCapture$captureToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor>;

        $r7 = (java.util.concurrent.Executor) $r6;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r8, $r7);

        return;
    }

androidx.test.core.view.ViewCapture$forceRedraw$1
<androidx.test.core.view.ViewCapture$forceRedraw$1: androidx.concurrent.futures.ResolvableFuture $future>
    void <init>(androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.view.ViewCapture$forceRedraw$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$1;

        $r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$1: androidx.concurrent.futures.ResolvableFuture $future> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.ViewCapture$forceRedraw$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$1;

        $r1 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$1: androidx.concurrent.futures.ResolvableFuture $future>;

        virtualinvoke $r1.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>(null);

        return;
    }

androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1
<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: android.view.View $this_forceRedraw>
<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: androidx.test.core.view.ViewCapture$forceRedraw$2 this$0>
    void <init>(android.view.View, androidx.test.core.view.ViewCapture$forceRedraw$2)
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1 r0;
        android.view.View $r1;
        androidx.test.core.view.ViewCapture$forceRedraw$2 $r2;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: androidx.test.core.view.ViewCapture$forceRedraw$2;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: android.view.View $this_forceRedraw> = $r1;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: androidx.test.core.view.ViewCapture$forceRedraw$2 this$0> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1 r0;
        android.view.View $r1;
        android.view.ViewTreeObserver $r2;
        androidx.test.core.view.ViewCapture$forceRedraw$2 $r3;
        android.view.ViewTreeObserver$OnDrawListener $r4;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1;

        $r1 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: android.view.View $this_forceRedraw>;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r3 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: androidx.test.core.view.ViewCapture$forceRedraw$2 this$0>;

        $r4 = (android.view.ViewTreeObserver$OnDrawListener) $r3;

        virtualinvoke $r2.<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>($r4);

        return;
    }

androidx.test.core.view.ViewCapture$forceRedraw$2
<androidx.test.core.view.ViewCapture$forceRedraw$2: boolean handled>
<androidx.test.core.view.ViewCapture$forceRedraw$2: androidx.concurrent.futures.ResolvableFuture $future>
<androidx.test.core.view.ViewCapture$forceRedraw$2: android.view.View $this_forceRedraw>
    void <init>(androidx.concurrent.futures.ResolvableFuture, android.view.View)
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.view.View $r2;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2;

        $r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        $r2 := @parameter1: android.view.View;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: androidx.concurrent.futures.ResolvableFuture $future> = $r1;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: android.view.View $this_forceRedraw> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDraw()
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2 r0;
        boolean $z0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1 $r4;
        android.view.View $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2;

        $z0 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: boolean handled>;

        if $z0 != 0 goto label1;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: boolean handled> = 1;

        $r1 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: androidx.concurrent.futures.ResolvableFuture $future>;

        virtualinvoke $r1.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>(null);

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        $r4 = new androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1;

        $r5 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: android.view.View $this_forceRedraw>;

        specialinvoke $r4.<androidx.test.core.view.ViewCapture$forceRedraw$2$onDraw$1: void <init>(android.view.View,androidx.test.core.view.ViewCapture$forceRedraw$2)>($r5, r0);

        $r6 = (java.lang.Runnable) $r4;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label1:
        return;
    }

    public final void setHandled(boolean)
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2 r0;
        boolean z0;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2;

        z0 := @parameter0: boolean;

        r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: boolean handled> = z0;

        return;
    }

    public final boolean getHandled()
    {
        androidx.test.core.view.ViewCapture$forceRedraw$2 r0;
        boolean $z0;

        r0 := @this: androidx.test.core.view.ViewCapture$forceRedraw$2;

        $z0 = r0.<androidx.test.core.view.ViewCapture$forceRedraw$2: boolean handled>;

        return $z0;
    }

androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1
<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap>
    void <init>(androidx.concurrent.futures.ResolvableFuture, android.graphics.Bitmap)
    {
        androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1;

        $r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        $r2 := @parameter1: android.graphics.Bitmap;

        r0.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r1;

        r0.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void onPixelCopyFinished(int)
    {
        androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1 r0;
        int i0, $i1;
        java.lang.String r1, $r7;
        java.lang.RuntimeException $r2;
        kotlin.jvm.internal.StringCompanionObject $r3;
        androidx.concurrent.futures.ResolvableFuture $r4, $r10;
        java.lang.Integer $r5;
        java.lang.Object[] $r6, r11, r12;
        java.lang.Throwable $r8;
        android.graphics.Bitmap $r9;

        r0 := @this: androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r10 = r0.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        $r9 = r0.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap>;

        virtualinvoke $r10.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r9);

        goto label2;

     label1:
        $r4 = r0.<androidx.test.core.view.ViewCapture$generateBitmapFromSurfaceViewPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        $r2 = new java.lang.RuntimeException;

        $r3 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE>;

        r1 = "PixelCopy failed: %d";

        r11 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r11[0] = $r5;

        r12 = r11;

        $i1 = lengthof r12;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r12, $i1);

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "format(format, *args)");

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r2;

        virtualinvoke $r4.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r8);

     label2:
        return;
    }

