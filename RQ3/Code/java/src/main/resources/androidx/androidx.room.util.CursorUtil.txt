androidx.room.util.CursorUtil
    public static final android.database.Cursor copyAndClose(android.database.Cursor)
    {
        android.database.Cursor r0, r20, r36, r37;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, i10, i11, i12;
        java.lang.String[] $r3, $r10;
        boolean $z0, $z1;
        byte[] $r4, $r11;
        java.lang.String $r5, $r12;
        double $d0, $d1;
        java.lang.Double $r6, $r13;
        long $l5, $l9;
        java.lang.Long $r7, $r14;
        java.lang.Throwable $r16, $r17, $r18, r24, r25, r26, r31;
        java.io.Closeable r19;
        android.database.MatrixCursor r21, r23, r28, r30, r32, r34;
        java.lang.Object[] r22, r29;
        java.lang.IllegalStateException r33, r35;

        r0 := @parameter0: android.database.Cursor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "c");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 <= 15 goto label18;

        r19 = (java.io.Closeable) r0;

     label01:
        r20 = (android.database.Cursor) r19;

        r32 = new android.database.MatrixCursor;

        $r10 = interfaceinvoke r20.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $i6 = interfaceinvoke r20.<android.database.Cursor: int getCount()>();

        specialinvoke r32.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r10, $i6);

        r21 = r32;

     label02:
        $z1 = interfaceinvoke r20.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label12;

        $i7 = interfaceinvoke r20.<android.database.Cursor: int getColumnCount()>();

        r22 = newarray (java.lang.Object)[$i7];

        i10 = 0;

        i11 = interfaceinvoke r0.<android.database.Cursor: int getColumnCount()>();

     label03:
        if i10 >= i11 goto label11;

        $i8 = interfaceinvoke r20.<android.database.Cursor: int getType(int)>(i10);

        tableswitch($i8)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label09;
        };

     label04:
        r22[i10] = null;

        goto label10;

     label05:
        $l9 = interfaceinvoke r20.<android.database.Cursor: long getLong(int)>(i10);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        r22[i10] = $r14;

        goto label10;

     label06:
        $d1 = interfaceinvoke r20.<android.database.Cursor: double getDouble(int)>(i10);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        r22[i10] = $r13;

        goto label10;

     label07:
        $r12 = interfaceinvoke r20.<android.database.Cursor: java.lang.String getString(int)>(i10);

        r22[i10] = $r12;

        goto label10;

     label08:
        $r11 = interfaceinvoke r20.<android.database.Cursor: byte[] getBlob(int)>(i10);

        r22[i10] = $r11;

        goto label10;

     label09:
        r33 = new java.lang.IllegalStateException;

        specialinvoke r33.<java.lang.IllegalStateException: void <init>()>();

        throw r33;

     label10:
        i10 = i10 + 1;

        goto label03;

     label11:
        virtualinvoke r21.<android.database.MatrixCursor: void addRow(java.lang.Object[])>(r22);

        goto label02;

     label12:
        r23 = r21;

     label13:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r19, null);

        goto label17;

     label14:
        $r17 := @caughtexception;

        r24 = $r17;

        r25 = r24;

        throw r24;

     label15:
        $r18 := @caughtexception;

        r26 = $r18;

     label16:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r19, r25);

        throw r26;

     label17:
        r36 = (android.database.Cursor) r23;

        return r36;

     label18:
        r34 = new android.database.MatrixCursor;

        $r3 = interfaceinvoke r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $i2 = interfaceinvoke r0.<android.database.Cursor: int getCount()>();

        specialinvoke r34.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r3, $i2);

        r28 = r34;

     label19:
        $z0 = interfaceinvoke r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label29;

        $i3 = interfaceinvoke r0.<android.database.Cursor: int getColumnCount()>();

        r29 = newarray (java.lang.Object)[$i3];

        i12 = 0;

        i0 = interfaceinvoke r0.<android.database.Cursor: int getColumnCount()>();

     label20:
        if i12 >= i0 goto label28;

        $i4 = interfaceinvoke r0.<android.database.Cursor: int getType(int)>(i12);

        tableswitch($i4)
        {
            case 0: goto label21;
            case 1: goto label22;
            case 2: goto label23;
            case 3: goto label24;
            case 4: goto label25;
            default: goto label26;
        };

     label21:
        r29[i12] = null;

        goto label27;

     label22:
        $l5 = interfaceinvoke r0.<android.database.Cursor: long getLong(int)>(i12);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        r29[i12] = $r7;

        goto label27;

     label23:
        $d0 = interfaceinvoke r0.<android.database.Cursor: double getDouble(int)>(i12);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r29[i12] = $r6;

        goto label27;

     label24:
        $r5 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>(i12);

        r29[i12] = $r5;

        goto label27;

     label25:
        $r4 = interfaceinvoke r0.<android.database.Cursor: byte[] getBlob(int)>(i12);

        r29[i12] = $r4;

        goto label27;

     label26:
        r35 = new java.lang.IllegalStateException;

        specialinvoke r35.<java.lang.IllegalStateException: void <init>()>();

        throw r35;

     label27:
        i12 = i12 + 1;

        goto label20;

     label28:
        virtualinvoke r28.<android.database.MatrixCursor: void addRow(java.lang.Object[])>(r29);

        goto label19;

     label29:
        r30 = r28;

     label30:
        interfaceinvoke r0.<android.database.Cursor: void close()>();

        r37 = (android.database.Cursor) r30;

        return r37;

     label31:
        $r16 := @caughtexception;

        r31 = $r16;

     label32:
        interfaceinvoke r0.<android.database.Cursor: void close()>();

        throw r31;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label18 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    public static final int getColumnIndex(android.database.Cursor, java.lang.String)
    {
        android.database.Cursor r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        int i0, i1, $i2;

        r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "c");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        i0 = interfaceinvoke r0.<android.database.Cursor: int getColumnIndex(java.lang.String)>(r1);

        if i0 < 0 goto label1;

        return i0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = interfaceinvoke r0.<android.database.Cursor: int getColumnIndex(java.lang.String)>($r6);

        if i1 < 0 goto label2;

        $i2 = i1;

        goto label3;

     label2:
        $i2 = staticinvoke <androidx.room.util.CursorUtil: int findColumnIndexBySuffix(android.database.Cursor,java.lang.String)>(r0, r1);

     label3:
        return $i2;
    }

    public static final int getColumnIndexOrThrow(android.database.Cursor, java.lang.String)
    {
        android.database.Cursor r0;
        java.lang.String r1, r2, $r12, r15;
        int i0;
        java.lang.Throwable r3, $r13, $r14;
        java.lang.String[] $r4;
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "c");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndex(android.database.Cursor,java.lang.String)>(r0, r1);

        if i0 < 0 goto label1;

        return i0;

     label1:
        $r4 = interfaceinvoke r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "c.columnNames");

        $r5 = (java.lang.Object[]) $r4;

        r15 = staticinvoke <kotlin.collections.ArraysKt: java.lang.String joinToString$default(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r5, null, null, null, 0, null, null, 63, null);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = (java.lang.Throwable) r3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("RoomCursorUtil", "Cannot collect column names for debug purposes", $r14);

        r15 = "unknown";

     label4:
        r2 = r15;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist. Available columns: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static final int findColumnIndexBySuffix(android.database.Cursor, java.lang.String)
    {
        android.database.Cursor r0;
        java.lang.String r1;
        java.lang.String[] r2;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r3;
        boolean $z0;

        r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: java.lang.String;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 25 goto label1;

        return -1;

     label1:
        $r3 = (java.lang.CharSequence) r1;

        $i1 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        return -1;

     label4:
        r2 = interfaceinvoke r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "columnNames");

        $i2 = staticinvoke <androidx.room.util.CursorUtil: int findColumnIndexBySuffix(java.lang.String[],java.lang.String)>(r2, r1);

        return $i2;
    }

    public static final int findColumnIndexBySuffix(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, r2, r3, r5, r6;
        int i0, i1, $i2, $i3, $i4, $i5, i7, i8;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z2, $z3;
        char $c6;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "columnNames");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        i7 = 0;

        i8 = 0;

        i0 = lengthof r0;

     label1:
        if i8 >= i0 goto label4;

        r5 = r0[i8];

        $i2 = i7;

        i7 = i7 + 1;

        r6 = r5;

        i1 = $i2;

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i4 + 2;

        if $i3 < $i5 goto label3;

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r6, r2, 0, 2, null);

        if $z2 == 0 goto label2;

        return i1;

     label2:
        $c6 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        if $c6 != 96 goto label3;

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r6, r3, 0, 2, null);

        if $z3 == 0 goto label3;

        return i1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return -1;
    }

    public static final java.lang.Object useCursor(android.database.Cursor, kotlin.jvm.functions.Function1)
    {
        android.database.Cursor $r0;
        kotlin.jvm.functions.Function1 r1;
        int $i0;
        java.lang.Throwable $r2, $r3, $r4, r7, r8, r9, r11;
        java.io.Closeable r5;
        java.lang.Object r6, r10;

        $r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label07;

        r5 = (java.io.Closeable) $r0;

     label01:
        r6 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r5);

     label02:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r5, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label06;

     label03:
        $r2 := @caughtexception;

        r7 = $r2;

        r8 = r7;

        throw r7;

     label04:
        $r3 := @caughtexception;

        r9 = $r3;

     label05:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r5, r8);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r9;

     label06:
        return r6;

     label07:
        r10 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

     label08:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<android.database.Cursor: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r10;

     label09:
        $r4 := @caughtexception;

        r11 = $r4;

     label10:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<android.database.Cursor: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r11;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static final android.database.Cursor wrapMappedColumns(android.database.Cursor, java.lang.String[], int[])
    {
        android.database.Cursor r0, $r4;
        java.lang.String[] r1;
        int[] r2;
        int $i0, $i1;
        androidx.room.util.CursorUtil$wrapMappedColumns$2 $r3;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "cursor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "columnNames");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mapping");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r7 = "Expected columnNames.length == mapping.length";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $r3 = new androidx.room.util.CursorUtil$wrapMappedColumns$2;

        specialinvoke $r3.<androidx.room.util.CursorUtil$wrapMappedColumns$2: void <init>(android.database.Cursor,java.lang.String[],int[])>(r0, r1, r2);

        $r4 = (android.database.Cursor) $r3;

        return $r4;
    }

androidx.room.util.CursorUtil$wrapMappedColumns$2
<androidx.room.util.CursorUtil$wrapMappedColumns$2: java.lang.String[] $columnNames>
<androidx.room.util.CursorUtil$wrapMappedColumns$2: int[] $mapping>
    void <init>(android.database.Cursor, java.lang.String[], int[])
    {
        androidx.room.util.CursorUtil$wrapMappedColumns$2 r0;
        android.database.Cursor $r1;
        java.lang.String[] $r2;
        int[] $r3;

        r0 := @this: androidx.room.util.CursorUtil$wrapMappedColumns$2;

        $r1 := @parameter0: android.database.Cursor;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: int[];

        r0.<androidx.room.util.CursorUtil$wrapMappedColumns$2: java.lang.String[] $columnNames> = $r2;

        r0.<androidx.room.util.CursorUtil$wrapMappedColumns$2: int[] $mapping> = $r3;

        specialinvoke r0.<android.database.CursorWrapper: void <init>(android.database.Cursor)>($r1);

        return;
    }

    public int getColumnIndex(java.lang.String)
    {
        androidx.room.util.CursorUtil$wrapMappedColumns$2 r0;
        java.lang.String r1, r4, r5;
        java.lang.String[] $r2;
        int[] r3;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        boolean $z2;

        r0 := @this: androidx.room.util.CursorUtil$wrapMappedColumns$2;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "columnName");

        $r2 = r0.<androidx.room.util.CursorUtil$wrapMappedColumns$2: java.lang.String[] $columnNames>;

        r3 = r0.<androidx.room.util.CursorUtil$wrapMappedColumns$2: int[] $mapping>;

        i5 = 0;

        i6 = 0;

        i0 = lengthof $r2;

     label1:
        if i6 >= i0 goto label3;

        r4 = $r2[i6];

        $i3 = i5;

        i5 = i5 + 1;

        r5 = r4;

        i1 = $i3;

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>(r5, r1, 1);

        if $z2 == 0 goto label2;

        $i4 = r3[i1];

        return $i4;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $i2 = specialinvoke r0.<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>(r1);

        return $i2;
    }

