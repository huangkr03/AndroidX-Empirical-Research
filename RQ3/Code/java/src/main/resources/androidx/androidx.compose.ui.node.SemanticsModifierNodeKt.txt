androidx.compose.ui.node.SemanticsModifierNodeKt
    public static final void invalidateSemantics(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.SemanticsModifierNode $r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.Owner $r2;

        $r0 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = (androidx.compose.ui.node.DelegatableNode) $r0;

        $r2 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.DelegatableNode)>($r1);

        interfaceinvoke $r2.<androidx.compose.ui.node.Owner: void onSemanticsChange()>();

        return;
    }

    public static final androidx.compose.ui.semantics.SemanticsConfiguration collapsedSemanticsConfiguration(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.SemanticsModifierNode $r0, r1;
        int i0;
        androidx.compose.ui.node.Nodes $r2;
        boolean $z1, $z2;
        androidx.compose.ui.semantics.SemanticsConfiguration $r3, $r4, $r5, $r6, $r9;
        androidx.compose.ui.node.DelegatableNode $r7;
        androidx.compose.ui.Modifier$Node $r8;

        $r0 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r7 = (androidx.compose.ui.node.DelegatableNode) $r0;

        $r2 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r2.<androidx.compose.ui.node.Nodes: int getSemantics-OLwlOKw()>();

        $r8 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.Modifier$Node localChild(androidx.compose.ui.node.DelegatableNode,int)>($r7, i0);

        $z1 = $r8 instanceof androidx.compose.ui.node.SemanticsModifierNode;

        if $z1 != 0 goto label1;

        $r8 = null;

     label1:
        r1 = (androidx.compose.ui.node.SemanticsModifierNode) $r8;

        if r1 == null goto label2;

        $r4 = interfaceinvoke $r0.<androidx.compose.ui.node.SemanticsModifierNode: androidx.compose.ui.semantics.SemanticsConfiguration getSemanticsConfiguration()>();

        $z2 = virtualinvoke $r4.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean isClearingSemantics()>();

        if $z2 == 0 goto label3;

     label2:
        $r3 = interfaceinvoke $r0.<androidx.compose.ui.node.SemanticsModifierNode: androidx.compose.ui.semantics.SemanticsConfiguration getSemanticsConfiguration()>();

        return $r3;

     label3:
        $r5 = interfaceinvoke $r0.<androidx.compose.ui.node.SemanticsModifierNode: androidx.compose.ui.semantics.SemanticsConfiguration getSemanticsConfiguration()>();

        $r9 = virtualinvoke $r5.<androidx.compose.ui.semantics.SemanticsConfiguration: androidx.compose.ui.semantics.SemanticsConfiguration copy()>();

        $r6 = staticinvoke <androidx.compose.ui.node.SemanticsModifierNodeKt: androidx.compose.ui.semantics.SemanticsConfiguration collapsedSemanticsConfiguration(androidx.compose.ui.node.SemanticsModifierNode)>(r1);

        virtualinvoke $r9.<androidx.compose.ui.semantics.SemanticsConfiguration: void collapsePeer$ui_release(androidx.compose.ui.semantics.SemanticsConfiguration)>($r6);

        return $r9;
    }

    public static final boolean getUseMinimumTouchTarget(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.SemanticsModifierNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsActions $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<androidx.compose.ui.node.SemanticsModifierNode: androidx.compose.ui.semantics.SemanticsConfiguration getSemanticsConfiguration()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getOnClick()>();

        $r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r1, $r3);

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void getUseMinimumTouchTarget$annotations(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.SemanticsModifierNode r0;

        r0 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        return;
    }

    public static final androidx.compose.ui.geometry.Rect touchBoundsInRoot(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.SemanticsModifierNode $r0;
        androidx.compose.ui.Modifier$Node $r1;
        boolean $z0, $z1;
        androidx.compose.ui.node.Nodes $r2, $r6;
        androidx.compose.ui.node.DelegatableNode $r3, $r7;
        int $i0, $i1;
        androidx.compose.ui.node.NodeCoordinator $r4, $r8;
        androidx.compose.ui.geometry.Rect $r5, $r10, $r12;
        androidx.compose.ui.layout.LayoutCoordinates $r9;
        androidx.compose.ui.geometry.Rect$Companion $r11;

        $r0 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<androidx.compose.ui.node.SemanticsModifierNode: androidx.compose.ui.Modifier$Node getNode()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r11 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r12 = virtualinvoke $r11.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r12;

     label1:
        $z1 = staticinvoke <androidx.compose.ui.node.SemanticsModifierNodeKt: boolean getUseMinimumTouchTarget(androidx.compose.ui.node.SemanticsModifierNode)>($r0);

        if $z1 != 0 goto label2;

        $r7 = (androidx.compose.ui.node.DelegatableNode) $r0;

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i1 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getSemantics-OLwlOKw()>();

        $r8 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.node.NodeCoordinator requireCoordinator-64DMado(androidx.compose.ui.node.DelegatableNode,int)>($r7, $i1);

        $r9 = (androidx.compose.ui.layout.LayoutCoordinates) $r8;

        $r10 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r9);

        return $r10;

     label2:
        $r3 = (androidx.compose.ui.node.DelegatableNode) $r0;

        $r2 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.Nodes: int getSemantics-OLwlOKw()>();

        $r4 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.node.NodeCoordinator requireCoordinator-64DMado(androidx.compose.ui.node.DelegatableNode,int)>($r3, $i0);

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.Rect touchBoundsInRoot()>();

        return $r5;
    }

