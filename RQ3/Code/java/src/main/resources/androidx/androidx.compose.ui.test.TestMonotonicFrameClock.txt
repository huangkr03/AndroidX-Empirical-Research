androidx.compose.ui.test.TestMonotonicFrameClock
<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.CoroutineScope coroutineScope>
<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.test.TestCoroutineScheduler delayController>
<androidx.compose.ui.test.TestMonotonicFrameClock: long frameDelayNanos>
<androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object lock>
<androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List awaiters>
<androidx.compose.ui.test.TestMonotonicFrameClock: boolean posted>
<androidx.compose.ui.test.TestMonotonicFrameClock: int $stable>
    public void <init>(kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.test.TestCoroutineScheduler, long)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlinx.coroutines.CoroutineScope r1;
        kotlinx.coroutines.test.TestCoroutineScheduler r2;
        long l0;
        java.lang.Object $r3;
        java.util.ArrayList $r4;
        java.util.List $r5;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlinx.coroutines.test.TestCoroutineScheduler;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coroutineScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delayController");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.CoroutineScope coroutineScope> = r1;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.test.TestCoroutineScheduler delayController> = r2;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: long frameDelayNanos> = l0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object lock> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List awaiters> = $r5;

        return;
    }

    public void <init>(kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.test.TestCoroutineScheduler, long, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlinx.coroutines.CoroutineScope r1;
        kotlinx.coroutines.test.TestCoroutineScheduler r2;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        long l2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlinx.coroutines.test.TestCoroutineScheduler;

        l2 := @parameter2: long;

        i0 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        l2 = 16000000L;

     label1:
        specialinvoke r0.<androidx.compose.ui.test.TestMonotonicFrameClock: void <init>(kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.test.TestCoroutineScheduler,long)>(r1, r2, l2);

        return;
    }

    public final long getFrameDelayNanos()
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        long $l0;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        $l0 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock: long frameDelayNanos>;

        return $l0;
    }

    public final boolean getHasAwaiters()
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        java.lang.Object r1;
        java.util.List $r2;
        java.util.Collection $r3;
        boolean $z0, $z2;
        java.lang.Throwable $r4;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $r2 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List awaiters>;

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor r1;

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

        throw $r4;

     label6:
        return $z2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object withFrameNanos(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.coroutines.Continuation $r2, r3, $r8;
        kotlinx.coroutines.CancellableContinuationImpl r4, $r7;
        kotlinx.coroutines.CancellableContinuation r5;
        java.lang.Object r6, $r11, $r12;
        java.util.List $r9;
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter $r10;
        java.lang.Throwable $r13;
        kotlin.Unit $r14;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = $r2;

        $r7 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>(r3);

        specialinvoke $r7.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r8, 1);

        r4 = $r7;

        virtualinvoke r4.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r5 = (kotlinx.coroutines.CancellableContinuation) r4;

        r6 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object access$getLock$p(androidx.compose.ui.test.TestMonotonicFrameClock)>(r0);

        entermonitor r6;

     label1:
        $r9 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List access$getAwaiters$p(androidx.compose.ui.test.TestMonotonicFrameClock)>(r0);

        $r10 = new androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter;

        specialinvoke $r10.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: void <init>(kotlin.jvm.functions.Function1,kotlinx.coroutines.CancellableContinuation)>(r1, r5);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: void access$maybeLaunchTickRunner(androidx.compose.ui.test.TestMonotonicFrameClock)>(r0);

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r6;

        goto label5;

     label3:
        $r13 := @caughtexception;

     label4:
        exitmonitor r6;

        throw $r13;

     label5:
        $r11 = virtualinvoke r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r11 != $r12 goto label6;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label6:
        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void maybeLaunchTickRunner()
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        boolean $z0;
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        $z0 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock: boolean posted>;

        if $z0 != 0 goto label1;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock: boolean posted> = 1;

        $r2 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r1 = new androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        specialinvoke $r1.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: void <init>(androidx.compose.ui.test.TestMonotonicFrameClock,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r1;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r3, 3, null);

     label1:
        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        java.lang.Object r1, $r3;
        kotlin.jvm.functions.Function2 r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = staticinvoke <androidx.compose.runtime.MonotonicFrameClock$DefaultImpls: java.lang.Object fold(androidx.compose.runtime.MonotonicFrameClock,java.lang.Object,kotlin.jvm.functions.Function2)>(r0, r1, r2);

        return $r3;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext$Element $r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <androidx.compose.runtime.MonotonicFrameClock$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <androidx.compose.runtime.MonotonicFrameClock$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;
        kotlin.coroutines.CoroutineContext r1, $r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 = staticinvoke <androidx.compose.runtime.MonotonicFrameClock$DefaultImpls: kotlin.coroutines.CoroutineContext plus(androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.CoroutineContext)>(r0, r1);

        return $r2;
    }

    public static final java.lang.Object access$getLock$p(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        $r1 = $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object lock>;

        return $r1;
    }

    public static final void access$setPosted$p(androidx.compose.ui.test.TestMonotonicFrameClock, boolean)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: boolean posted> = z0;

        return;
    }

    public static final java.util.List access$getAwaiters$p(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        $r1 = $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List awaiters>;

        return $r1;
    }

    public static final kotlinx.coroutines.test.TestCoroutineScheduler access$getDelayController$p(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;
        kotlinx.coroutines.test.TestCoroutineScheduler $r1;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        $r1 = $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.test.TestCoroutineScheduler delayController>;

        return $r1;
    }

    public static final void access$maybeLaunchTickRunner(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        specialinvoke $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: void maybeLaunchTickRunner()>();

        return;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.test.TestMonotonicFrameClock: int $stable> = 8;

        return;
    }

androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1
<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter this$0>
<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: java.lang.Object $result>
    void <init>(androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter, java.lang.Object)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1 r0;
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1;

        $r1 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter;

        $r2 := @parameter1: java.lang.Object;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter this$0> = $r1;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: java.lang.Object $result> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1 r0;
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter $r1;
        kotlinx.coroutines.CancellableContinuation $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1;

        $r1 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter this$0>;

        $r2 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlinx.coroutines.CancellableContinuation access$getContinuation$p(androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter)>($r1);

        $r3 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: java.lang.Object $result>;

        interfaceinvoke $r2.<kotlinx.coroutines.CancellableContinuation: void resumeWith(java.lang.Object)>($r3);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1;

        virtualinvoke r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter
<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlin.jvm.functions.Function1 onFrame>
<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlinx.coroutines.CancellableContinuation continuation>
    public void <init>(kotlin.jvm.functions.Function1, kotlinx.coroutines.CancellableContinuation)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter r0;
        kotlin.jvm.functions.Function1 r1;
        kotlinx.coroutines.CancellableContinuation r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onFrame");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "continuation");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlin.jvm.functions.Function1 onFrame> = r1;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlinx.coroutines.CancellableContinuation continuation> = r2;

        return;
    }

    public final kotlin.jvm.functions.Function0 runFrame(long)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter r0, r2, $r12;
        long l0;
        java.lang.Object r1, $r6, $r11, $r13;
        kotlin.Result$Companion $r3, $r10;
        kotlin.jvm.functions.Function1 $r4;
        java.lang.Long $r5;
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1 $r7;
        kotlin.jvm.functions.Function0 $r8;
        java.lang.Throwable $r9;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter;

        l0 := @parameter0: long;

        r2 = r0;

     label1:
        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r12 = (androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter) r2;

        $r4 = $r12.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlin.jvm.functions.Function1 onFrame>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r6 = interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r13 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r11 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r9);

        $r13 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r11);

     label4:
        r1 = $r13;

        $r7 = new androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1;

        specialinvoke $r7.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter$runFrame$1: void <init>(androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter,java.lang.Object)>(r0, r1);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static final kotlinx.coroutines.CancellableContinuation access$getContinuation$p(androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter $r0;
        kotlinx.coroutines.CancellableContinuation $r1;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter;

        $r1 = $r0.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlinx.coroutines.CancellableContinuation continuation>;

        return $r1;
    }

androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1
<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: int label>
<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0>
    void <init>(androidx.compose.ui.test.TestMonotonicFrameClock, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 r0;
        androidx.compose.ui.test.TestMonotonicFrameClock $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        $r1 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 r0;
        java.lang.Object $r1, r2, r4, r6, r9, $r22, r30;
        androidx.compose.ui.test.TestMonotonicFrameClock r3, $r10, $r20;
        java.util.List r5, $r11, $r13, $r16;
        long l0, $l2, $l3, $l5;
        androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter r7;
        java.util.Collection r8, r26;
        int $i1, $i4;
        java.lang.Iterable $r12, $r25, $r28;
        kotlinx.coroutines.test.TestCoroutineScheduler $r14;
        java.util.ArrayList $r15;
        boolean $z1, z5, $z6;
        kotlin.Unit $r17, $r32;
        kotlin.jvm.functions.Function0 $r19, r31;
        kotlin.coroutines.Continuation $r21;
        java.lang.IllegalStateException $r23;
        java.lang.Throwable $r24;
        java.util.Iterator $r27, $r29;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        $r1 := @parameter0: java.lang.Object;

        r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: int label>;

        tableswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label02;
            default: goto label13;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r20 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0>;

        $l5 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock_jvmKt: long getFrameDelayMillis(androidx.compose.ui.test.TestMonotonicFrameClock)>($r20);

        $r21 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: int label> = 1;

        $r22 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l5, $r21);

        if $r22 != r9 goto label03;

        return r9;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label03:
        $r10 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0>;

        r2 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: java.lang.Object access$getLock$p(androidx.compose.ui.test.TestMonotonicFrameClock)>($r10);

        r3 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0>;

        r4 = r2;

        entermonitor r4;

     label04:
        staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: void access$setPosted$p(androidx.compose.ui.test.TestMonotonicFrameClock,boolean)>(r3, 0);

        $r11 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List access$getAwaiters$p(androidx.compose.ui.test.TestMonotonicFrameClock)>(r3);

        $r12 = (java.lang.Iterable) $r11;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r12);

        $r13 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: java.util.List access$getAwaiters$p(androidx.compose.ui.test.TestMonotonicFrameClock)>(r3);

        interfaceinvoke $r13.<java.util.List: void clear()>();

        $r14 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock: kotlinx.coroutines.test.TestCoroutineScheduler access$getDelayController$p(androidx.compose.ui.test.TestMonotonicFrameClock)>(r3);

        $l2 = virtualinvoke $r14.<kotlinx.coroutines.test.TestCoroutineScheduler: long getCurrentTime()>();

        $l3 = (long) 1000000;

        l0 = $l2 * $l3;

        $r25 = (java.lang.Iterable) r5;

        $r15 = new java.util.ArrayList;

        $i4 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r25, 10);

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i4);

        r26 = (java.util.Collection) $r15;

        z5 = 0;

        $r27 = interfaceinvoke $r25.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        r6 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter) r6;

        r8 = r26;

        $r19 = virtualinvoke r7.<androidx.compose.ui.test.TestMonotonicFrameClock$Awaiter: kotlin.jvm.functions.Function0 runFrame(long)>(l0);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        goto label05;

     label06:
        $r16 = (java.util.List) r26;

        $r28 = (java.lang.Iterable) $r16;

        $r29 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        r30 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r31 = (kotlin.jvm.functions.Function0) r30;

        interfaceinvoke r31.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label07;

     label08:
        $r32 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor r4;

        goto label12;

     label10:
        $r24 := @caughtexception;

     label11:
        exitmonitor r4;

        throw $r24;

     label12:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r17;

     label13:
        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r23;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.compose.ui.test.TestMonotonicFrameClock $r4;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        $r4 = r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: androidx.compose.ui.test.TestMonotonicFrameClock this$0>;

        specialinvoke $r3.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: void <init>(androidx.compose.ui.test.TestMonotonicFrameClock,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.ui.test.TestMonotonicFrameClock$maybeLaunchTickRunner$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

