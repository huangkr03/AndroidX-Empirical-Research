androidx.test.espresso.base.PerformExceptionHandler
<androidx.test.espresso.base.PerformExceptionHandler: android.content.Context appContext>
    private static float getAnimatorDurationScale(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        boolean $z0;
        float $f0;

        r0 := @parameter0: android.content.ContentResolver;

        $z0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isJellyBeanMR1OrHigher()>();

        if $z0 == 0 goto label1;

        $f0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>(r0, "animator_duration_scale", "animator_duration_scale");

        return $f0;

     label1:
        return 0.0F;
    }

    private static float getGlobalSetting(android.content.ContentResolver, java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable $r1;
        android.content.ContentResolver r2;
        float f0;

        r2 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: java.lang.String;

     label1:
        f0 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>(r2, r0);

     label2:
        return f0;

     label3:
        $r1 := @caughtexception;

        return 0.0F;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    private static float getSetting(android.content.ContentResolver, java.lang.String, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        boolean $z0;
        float $f0, $f1;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isJellyBeanMR1OrHigher()>();

        if $z0 == 0 goto label1;

        $f1 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getGlobalSetting(android.content.ContentResolver,java.lang.String)>(r0, r1);

        return $f1;

     label1:
        $f0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getSystemSetting(android.content.ContentResolver,java.lang.String)>(r0, r2);

        return $f0;
    }

    private static float getSystemSetting(android.content.ContentResolver, java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable $r1;
        android.content.ContentResolver r2;
        float f0;

        r2 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: java.lang.String;

     label1:
        f0 = staticinvoke <android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>(r2, r0);

     label2:
        return f0;

     label3:
        $r1 := @caughtexception;

        return 0.0F;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    private static float getTransitionAnimationScale(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        float $f0;

        r0 := @parameter0: android.content.ContentResolver;

        $f0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>(r0, "transition_animation_scale", "transition_animation_scale");

        return $f0;
    }

    private static float getWindowAnimationScale(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        float $f0;

        r0 := @parameter0: android.content.ContentResolver;

        $f0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>(r0, "window_animation_scale", "window_animation_scale");

        return $f0;
    }

    public void <init>(android.content.Context, java.lang.Class)
    {
        androidx.test.espresso.base.PerformExceptionHandler r0;
        android.content.Context r1, $r5;
        java.lang.Class r2;
        java.lang.Class[] r3;
        java.lang.Object $r4;

        r0 := @this: androidx.test.espresso.base.PerformExceptionHandler;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Class;

        r3 = newarray (java.lang.Class)[1];

        r3[0] = r2;

        specialinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: void <init>(java.lang.Class[])>(r3);

        $r4 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (android.content.Context) $r4;

        r0.<androidx.test.espresso.base.PerformExceptionHandler: android.content.Context appContext> = $r5;

        return;
    }

    public void handleSafely(androidx.test.espresso.PerformException, org.hamcrest.Matcher)
    {
        androidx.test.espresso.PerformException r0, $r9;
        org.hamcrest.Matcher r1;
        java.lang.StringBuilder r2;
        android.content.Context $r3;
        boolean $z0;
        androidx.test.espresso.PerformException$Builder $r6, $r8, r11;
        java.lang.String $r7;
        androidx.test.espresso.base.PerformExceptionHandler r10;

        r10 := @this: androidx.test.espresso.base.PerformExceptionHandler;

        r0 := @parameter0: androidx.test.espresso.PerformException;

        r1 := @parameter1: org.hamcrest.Matcher;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r10.<androidx.test.espresso.base.PerformExceptionHandler: android.content.Context appContext>;

        $z0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isAnimationAndTransitionDisabled(android.content.Context)>($r3);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r11 = new androidx.test.espresso.PerformException$Builder;

        specialinvoke r11.<androidx.test.espresso.PerformException$Builder: void <init>()>();

        $r6 = virtualinvoke r11.<androidx.test.espresso.PerformException$Builder: androidx.test.espresso.PerformException$Builder 'from'(androidx.test.espresso.PerformException)>(r0);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<androidx.test.espresso.PerformException$Builder: androidx.test.espresso.PerformException$Builder withViewDescription(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<androidx.test.espresso.PerformException$Builder: androidx.test.espresso.PerformException build()>();

        throw $r9;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Animations or transitions are enabled on the target device.\nFor more info check: https://developer.android.com/training/testing/espresso/setup#set-up-environment\n\n");

        goto label1;
    }

    public volatile void handleSafely(java.lang.Object, org.hamcrest.Matcher)
    {
        androidx.test.espresso.base.PerformExceptionHandler r0;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;
        androidx.test.espresso.PerformException $r3;

        r0 := @this: androidx.test.espresso.base.PerformExceptionHandler;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Matcher;

        $r3 = (androidx.test.espresso.PerformException) r1;

        virtualinvoke r0.<androidx.test.espresso.base.PerformExceptionHandler: void handleSafely(androidx.test.espresso.PerformException,org.hamcrest.Matcher)>($r3, r2);

        return;
    }

    private static boolean isAnimationAndTransitionDisabled(android.content.Context)
    {
        boolean z0, z1, z2, z3;
        float $f0, $f1, f2;
        android.content.Context r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f2 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getTransitionAnimationScale(android.content.ContentResolver)>(r1);

        z1 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isEqualToZero(float)>(f2);

        $f0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getWindowAnimationScale(android.content.ContentResolver)>(r1);

        z0 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isEqualToZero(float)>($f0);

        $f1 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: float getAnimatorDurationScale(android.content.ContentResolver)>(r1);

        z2 = staticinvoke <androidx.test.espresso.base.PerformExceptionHandler: boolean isEqualToZero(float)>($f1);

        if z1 == 0 goto label2;

        if z0 == 0 goto label2;

        if z2 == 0 goto label2;

        z3 = 1;

     label1:
        return z3;

     label2:
        z3 = 0;

        goto label1;
    }

    private static boolean isEqualToZero(float)
    {
        float $f0, f1;
        int $i0;
        boolean z0;

        f1 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, 0.0F);

        if $i0 != 0 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    private static boolean isJellyBeanMR1OrHigher()
    {
        int $i0;
        boolean z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

