androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor
<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: java.lang.String LOG_TAG>
<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>
    public java.lang.String getName()
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        androidx.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        $r1 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r2 = virtualinvoke $r1.<androidx.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        return $r2;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        androidx.test.espresso.idling.CountingIdlingResource $r3;
        java.util.concurrent.ScheduledFuture $r4;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<androidx.test.espresso.idling.CountingIdlingResource: void increment()>();

        $r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

        return $r4;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.util.concurrent.Callable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        androidx.test.espresso.idling.CountingIdlingResource $r3;
        java.util.concurrent.ScheduledFuture $r4;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<androidx.test.espresso.idling.CountingIdlingResource: void increment()>();

        $r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

        return $r4;
    }

    public void <init>(java.lang.String, int, java.util.concurrent.ThreadFactory)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.String r1;
        int i0;
        java.util.concurrent.ThreadFactory r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: void <init>(java.lang.String,int,java.util.concurrent.ThreadFactory,boolean)>(r1, i0, r2, 0);

        return;
    }

    public void <init>(java.lang.String, int, java.util.concurrent.ThreadFactory, boolean)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.String r1, r3, $r8;
        int i0;
        java.util.concurrent.ThreadFactory r2;
        boolean z0;
        java.lang.StringBuilder $r6, $r7, r12;
        androidx.test.espresso.IdlingRegistry $r9;
        java.lang.Object[] $r10;
        androidx.test.espresso.idling.CountingIdlingResource r11;
        androidx.test.espresso.IdlingResource[] r13;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.ThreadFactory;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r2);

        r11 = new androidx.test.espresso.idling.CountingIdlingResource;

        specialinvoke r11.<androidx.test.espresso.idling.CountingIdlingResource: void <init>(java.lang.String,boolean)>(r1, z0);

        r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource> = r11;

        r3 = r1;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Register idling resource for scheduled thread pool ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r8);

        $r9 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r10 = newarray (androidx.test.espresso.IdlingResource)[1];

        $r10[0] = r0;

        r13 = (androidx.test.espresso.IdlingResource[]) $r10;

        virtualinvoke $r9.<androidx.test.espresso.IdlingRegistry: boolean register(androidx.test.espresso.IdlingResource[])>(r13);

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;
        androidx.test.espresso.idling.CountingIdlingResource $r3;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<androidx.test.espresso.idling.CountingIdlingResource: void decrement()>();

        return;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Thread r1;
        java.lang.Runnable r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Runnable;

        return;
    }

    public void registerIdleTransitionCallback(androidx.test.espresso.IdlingResource$ResourceCallback)
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        androidx.test.espresso.IdlingResource$ResourceCallback r1;
        androidx.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: androidx.test.espresso.IdlingResource$ResourceCallback;

        $r2 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<androidx.test.espresso.idling.CountingIdlingResource: void registerIdleTransitionCallback(androidx.test.espresso.IdlingResource$ResourceCallback)>(r1);

        return;
    }

    protected void terminated()
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.String r1, $r6;
        androidx.test.espresso.idling.CountingIdlingResource $r2;
        java.lang.StringBuilder $r4, $r5, r9;
        androidx.test.espresso.IdlingRegistry $r7;
        java.lang.Object[] $r8;
        androidx.test.espresso.IdlingResource[] r10;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void terminated()>();

        $r2 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        r1 = virtualinvoke $r2.<androidx.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread pool terminated, unregistering ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r6);

        $r7 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r8 = newarray (androidx.test.espresso.IdlingResource)[1];

        $r8[0] = r0;

        r10 = (androidx.test.espresso.IdlingResource[]) $r8;

        virtualinvoke $r7.<androidx.test.espresso.IdlingRegistry: boolean unregister(androidx.test.espresso.IdlingResource[])>(r10);

        return;
    }

    public boolean isIdleNow()
    {
        androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        androidx.test.espresso.idling.CountingIdlingResource $r1;
        boolean $z0;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        $r1 = r0.<androidx.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $z0 = virtualinvoke $r1.<androidx.test.espresso.idling.CountingIdlingResource: boolean isIdleNow()>();

        return $z0;
    }

