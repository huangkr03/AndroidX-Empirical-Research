com.google.testing.platform.lib.coroutines.scope.JobScopeImpl
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.coroutines.CoroutineContext context>
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.coroutines.CoroutineContext coroutineContext>
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>
    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CompletableJob)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CompletableJob $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.CompletableJob;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "job");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.coroutines.CoroutineContext context> = $r1;

        $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job> = $r2;

        $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.coroutines.CoroutineContext coroutineContext> = $r2;

        return;
    }

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CompletableJob, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        kotlinx.coroutines.CompletableJob $r3;
        int $i0;
        kotlinx.coroutines.Job$Key $r4;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlinx.coroutines.Job $r6;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter1: kotlinx.coroutines.CompletableJob;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r4 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r5 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        $r6 = (kotlinx.coroutines.Job) $r5;

        $r3 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r6);

     label1:
        specialinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CompletableJob)>($r1, $r3);

        return;
    }

    public final kotlinx.coroutines.Job attachAsChild(kotlin.coroutines.CoroutineContext)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r1;
        kotlinx.coroutines.Job $r2;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r3 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "parent");

        $r1 = new com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        specialinvoke $r1.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: void <init>(com.google.testing.platform.lib.coroutines.scope.JobScopeImpl,kotlin.coroutines.Continuation)>($r0, null);

        $r2 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r0, $r3, null, $r1, 2, null);

        return $r2;
    }

    public kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlinx.coroutines.ChildHandle $r1;
        kotlinx.coroutines.ChildJob $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 := @parameter0: kotlinx.coroutines.ChildJob;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "child");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>($r2);

        return $r1;
    }

    public void cancel(java.util.concurrent.CancellationException)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        java.util.concurrent.CancellationException $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        kotlinx.coroutines.Job $r5;
        kotlinx.coroutines.CompletableJob $r6;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $r2 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.sequences.Sequence getChildren()>();

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kotlinx.coroutines.Job) $r4;

        interfaceinvoke $r5.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r1);

        goto label1;

     label2:
        $r6 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        interfaceinvoke $r6.<kotlinx.coroutines.CompletableJob: void cancel(java.util.concurrent.CancellationException)>($r1);

        return;
    }

    public boolean complete()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.sequences.Sequence $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        kotlinx.coroutines.Job $r4;
        kotlinx.coroutines.CompletableJob $r5;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.sequences.Sequence getChildren()>();

        $r2 = interfaceinvoke $r1.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlinx.coroutines.Job) $r3;

        $z0 = $r4 instanceof kotlinx.coroutines.CompletableJob;

        if $z0 == 0 goto label2;

        $r5 = (kotlinx.coroutines.CompletableJob) $r4;

        interfaceinvoke $r5.<kotlinx.coroutines.CompletableJob: boolean complete()>();

        goto label1;

     label2:
        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r4, null, 1, null);

        goto label1;

     label3:
        $r5 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r5.<kotlinx.coroutines.CompletableJob: boolean complete()>();

        return $z0;
    }

    public boolean completeExceptionally(java.lang.Throwable)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        java.lang.Throwable $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        kotlinx.coroutines.Job $r5;
        kotlinx.coroutines.CompletableJob $r6;
        java.lang.String $r7;
        java.lang.StringBuilder $r8;
        java.util.concurrent.CancellationException $r9;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        $r2 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.sequences.Sequence getChildren()>();

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kotlinx.coroutines.Job) $r4;

        $z0 = $r5 instanceof kotlinx.coroutines.CompletableJob;

        if $z0 == 0 goto label2;

        $r6 = (kotlinx.coroutines.CompletableJob) $r5;

        interfaceinvoke $r6.<kotlinx.coroutines.CompletableJob: boolean completeExceptionally(java.lang.Throwable)>($r1);

        goto label1;

     label2:
        $r7 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parent completed exceptionally with: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>($r7, $r1);

        interfaceinvoke $r5.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r9);

        goto label1;

     label3:
        $r6 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r6.<kotlinx.coroutines.CompletableJob: boolean completeExceptionally(java.lang.Throwable)>($r1);

        return $z0;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r2, $r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return $r1;
    }

    public java.util.concurrent.CancellationException getCancellationException()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.CompletableJob $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.CompletableJob: java.util.concurrent.CancellationException getCancellationException()>();

        return $r1;
    }

    public kotlin.sequences.Sequence getChildren()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.sequences.Sequence $r1;
        kotlinx.coroutines.CompletableJob $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.CompletableJob: kotlin.sequences.Sequence getChildren()>();

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext getCoroutineContext()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext r1;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlin.coroutines.CoroutineContext coroutineContext>;

        return r1;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlinx.coroutines.CompletableJob $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.CompletableJob: kotlin.coroutines.CoroutineContext$Key getKey()>();

        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "handler");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r2);

        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean, boolean, kotlin.jvm.functions.Function1)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        boolean $z0, $z1;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.DisposableHandle $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $z1 := @parameter0: boolean;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "handler");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>($z1, $z0, $r1);

        return $r2;
    }

    public boolean isActive()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        boolean $z0;
        kotlinx.coroutines.CompletableJob $r1;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: boolean isActive()>();

        return $z0;
    }

    public boolean isCancelled()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        boolean $z0;
        kotlinx.coroutines.CompletableJob $r1;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: boolean isCancelled()>();

        return $z0;
    }

    public boolean isCompleted()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        boolean $z0;
        kotlinx.coroutines.CompletableJob $r1;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: boolean isCompleted()>();

        return $z0;
    }

    public java.lang.Object join(kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlinx.coroutines.CompletableJob $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r3 := @parameter0: kotlin.coroutines.Continuation;

        $r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: java.lang.Object join(kotlin.coroutines.Continuation)>($r3);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlinx.coroutines.CompletableJob $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r3 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CompletableJob $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.CompletableJob: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        return $r1;
    }

    public boolean start()
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r0;
        boolean $z0;
        kotlinx.coroutines.CompletableJob $r1;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: kotlinx.coroutines.CompletableJob job>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: boolean start()>();

        return $z0;
    }

com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: java.lang.Object L$0>
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: int label>
<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl this$0>
    void <init>(com.google.testing.platform.lib.coroutines.scope.JobScopeImpl, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r0;
        kotlin.coroutines.Continuation $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r2;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r2 := @parameter0: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl this$0> = $r2;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r0, $r4;
        kotlin.coroutines.Continuation $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r2;
        java.lang.Object $r3;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl this$0>;

        specialinvoke $r4.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: void <init>(com.google.testing.platform.lib.coroutines.scope.JobScopeImpl,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r0 = (com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1 $r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        com.google.testing.platform.lib.coroutines.scope.JobScopeImpl $r5;
        kotlin.Unit r6;

        $r0 := @this: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        $r2 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: java.lang.Object L$0>;

        $r4 = (java.lang.Throwable) $r2;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        throw $r4;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label5;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: com.google.testing.platform.lib.coroutines.scope.JobScopeImpl this$0>;

        $r0.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl$attachAsChild$1: int label> = 1;

        $r1 = virtualinvoke $r5.<com.google.testing.platform.lib.coroutines.scope.JobScopeImpl: java.lang.Object join(kotlin.coroutines.Continuation)>($r0);

        if $r1 != $r2 goto label5;

        return $r2;

     label5:
        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r6;
    }

