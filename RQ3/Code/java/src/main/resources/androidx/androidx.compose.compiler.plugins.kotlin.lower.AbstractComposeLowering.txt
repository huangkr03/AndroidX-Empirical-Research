androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns builtIns>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.descriptors.ClassDescriptor composerTypeDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.resolve.BindingTrace bindingTrace>
    protected final org.jetbrains.kotlin.ir.util.TypeTranslator getTypeTranslator()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.util.TypeTranslator $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator>;

        return $r1;
    }

    protected final org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getBuiltIns()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns builtIns>;

        return $r1;
    }

    protected final org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.descriptors.ClassDescriptor composerTypeDescriptor>;

        return $r1;
    }

    private final org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r1;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        return $r2;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol referenceFunction(org.jetbrains.kotlin.descriptors.CallableDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.CallableDescriptor r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r2;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r3;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r4, $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.CallableDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "descriptor");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r4 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol referenceFunction(org.jetbrains.kotlin.ir.util.ReferenceSymbolTable,org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r3, r1);

        $r5 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getReferencedFunction(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol)>($r4);

        return $r5;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol referenceSimpleFunction(org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r2;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r5, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "descriptor");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r4 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r1;

        $r5 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol referenceSimpleFunction(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r4);

        $r6 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getReferencedSimpleFunction(org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)>($r5);

        return $r6;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol referenceConstructor(org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r2;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r3;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol $r4, $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "descriptor");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol referenceConstructor(org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor)>(r1);

        $r5 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getReferencedConstructor(org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol)>($r4);

        return $r5;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrClassSymbol getTopLevelClass(org.jetbrains.kotlin.name.FqName)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.name.FqName r1, $r6;
        java.lang.String r2, $r18;
        boolean z0;
        org.jetbrains.kotlin.descriptors.ClassDescriptor r3, $r13;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r5;
        org.jetbrains.kotlin.descriptors.PackageViewDescriptor $r7;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r8;
        org.jetbrains.kotlin.name.Name $r9;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r10;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r11;
        org.jetbrains.kotlin.descriptors.ClassifierDescriptor $r12;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.Throwable $r19;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r20;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r21;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.name.FqName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fqName");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r6 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.FqName parent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "fqName.parent()");

        $r7 = interfaceinvoke $r5.<org.jetbrains.kotlin.descriptors.ModuleDescriptor: org.jetbrains.kotlin.descriptors.PackageViewDescriptor getPackage(org.jetbrains.kotlin.name.FqName)>($r6);

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.descriptors.PackageViewDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getMemberScope()>();

        $r9 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.Name shortName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "fqName.shortName()");

        $r10 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r11 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r10;

        $r12 = interfaceinvoke $r8.<org.jetbrains.kotlin.resolve.scopes.MemberScope: org.jetbrains.kotlin.descriptors.ClassifierDescriptor getContributedClassifier(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r9, $r11);

        $r13 = (org.jetbrains.kotlin.descriptors.ClassDescriptor) $r12;

        if $r13 == null goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class is not found: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        $r19 = (java.lang.Throwable) $r17;

        throw $r19;

     label2:
        r3 = $r13;

        $r20 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrClassSymbol referenceClass(org.jetbrains.kotlin.descriptors.ClassDescriptor)>(r3);

        return $r21;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getTopLevelFunction(org.jetbrains.kotlin.name.FqName)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.name.FqName r1, $r6;
        java.lang.String r2, $r20;
        boolean z0;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r3, $r15;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r5;
        org.jetbrains.kotlin.descriptors.PackageViewDescriptor $r7;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r8;
        org.jetbrains.kotlin.name.Name $r9;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r10;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r11;
        java.util.Collection $r12;
        java.lang.Iterable $r13;
        java.lang.Object $r14;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.IllegalStateException $r19;
        java.lang.Throwable $r21;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r22;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r23;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r24;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r25;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r26, $r27;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.name.FqName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fqName");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r6 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.FqName parent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "fqName.parent()");

        $r7 = interfaceinvoke $r5.<org.jetbrains.kotlin.descriptors.ModuleDescriptor: org.jetbrains.kotlin.descriptors.PackageViewDescriptor getPackage(org.jetbrains.kotlin.name.FqName)>($r6);

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.descriptors.PackageViewDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getMemberScope()>();

        $r9 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.Name shortName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "fqName.shortName()");

        $r10 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r11 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r10;

        $r12 = interfaceinvoke $r8.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r9, $r11);

        $r13 = (java.lang.Iterable) $r12;

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object singleOrNull(java.lang.Iterable)>($r13);

        $r15 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r14;

        if $r15 == null goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function not found ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        $r21 = (java.lang.Throwable) $r19;

        throw $r21;

     label2:
        r3 = $r15;

        $r22 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r23 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r24 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r3;

        $r25 = interfaceinvoke $r23.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol referenceSimpleFunction(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r24);

        $r26 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r25;

        $r27 = virtualinvoke $r22.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getReferencedFunction(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol)>($r26);

        return $r27;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getInternalFunction(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.lang.String r1;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r2;
        org.jetbrains.kotlin.name.FqName $r3;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName internalFqNameFor(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getTopLevelFunction(org.jetbrains.kotlin.name.FqName)>($r3);

        return $r4;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrClassSymbol getInternalClass(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.lang.String r1;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r2;
        org.jetbrains.kotlin.name.FqName $r3;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName internalFqNameFor(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getTopLevelClass(org.jetbrains.kotlin.name.FqName)>($r3);

        return $r4;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getTopLevelPropertyGetter(org.jetbrains.kotlin.name.FqName)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.name.FqName r1, $r6;
        java.lang.String r2, $r20;
        boolean z0;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor r3, $r15;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r5;
        org.jetbrains.kotlin.descriptors.PackageViewDescriptor $r7;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r8;
        org.jetbrains.kotlin.name.Name $r9;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r10;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r11;
        java.util.Collection $r12;
        java.lang.Iterable $r13;
        java.lang.Object $r14;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.IllegalStateException $r19;
        java.lang.Throwable $r21;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r22;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r23;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r24;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r25;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r26;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r27, $r28;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.name.FqName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fqName");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r6 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.FqName parent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "fqName.parent()");

        $r7 = interfaceinvoke $r5.<org.jetbrains.kotlin.descriptors.ModuleDescriptor: org.jetbrains.kotlin.descriptors.PackageViewDescriptor getPackage(org.jetbrains.kotlin.name.FqName)>($r6);

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.descriptors.PackageViewDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getMemberScope()>();

        $r9 = virtualinvoke r1.<org.jetbrains.kotlin.name.FqName: org.jetbrains.kotlin.name.Name shortName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "fqName.shortName()");

        $r10 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r11 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r10;

        $r12 = interfaceinvoke $r8.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedVariables(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r9, $r11);

        $r13 = (java.lang.Iterable) $r12;

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object singleOrNull(java.lang.Iterable)>($r13);

        $r15 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) $r14;

        if $r15 == null goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function not found ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        $r21 = (java.lang.Throwable) $r19;

        throw $r21;

     label2:
        r3 = $r15;

        $r22 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r23 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r24 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor getGetter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r24);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "descriptor.getter!!");

        $r25 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r24;

        $r26 = interfaceinvoke $r23.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol referenceSimpleFunction(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r25);

        $r27 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r26;

        $r28 = virtualinvoke $r22.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getReferencedFunction(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol)>($r27);

        return $r28;
    }

    public final org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.types.KotlinType $r1;
        org.jetbrains.kotlin.ir.util.TypeTranslator $r2;
        org.jetbrains.kotlin.ir.types.IrType $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.types.KotlinType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toIrType");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator>;

        $r3 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.util.TypeTranslator: org.jetbrains.kotlin.ir.types.IrType translateType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        return $r3;
    }

    public final org.jetbrains.kotlin.ir.types.IrType unboxInlineClass(org.jetbrains.kotlin.ir.types.IrType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType $r1, $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$unboxInlineClass");

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.types.IrType unboxType(org.jetbrains.kotlin.ir.types.IrType)>($r1);

        if $r2 == null goto label1;

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    public final org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r1;
        boolean $z0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl $r3;
        org.jetbrains.kotlin.ir.linkage.IrDeserializer $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.symbols.IrSymbol;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$bindIfNecessary");

        $z0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.symbols.IrSymbol: boolean isBound()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        if $r2 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl");

        throw $r6;

     label1:
        $r3 = (org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl) $r2;

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl: org.jetbrains.kotlin.ir.linkage.IrDeserializer getLinker()>();

        interfaceinvoke $r4.<org.jetbrains.kotlin.ir.linkage.IrDeserializer: org.jetbrains.kotlin.ir.declarations.IrDeclaration getDeclaration(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r1);

     label2:
        return $r1;
    }

    public final boolean hasDefaultValueSafe(org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r1;
        java.util.List $r2;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 $r3;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 $r4;
        kotlin.jvm.functions.Function1 $r5;
        org.jetbrains.kotlin.utils.DFS$Neighbors $r6;
        java.util.Collection $r7;
        java.lang.Boolean $r8;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$hasDefaultValueSafe");

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        $r7 = (java.util.Collection) $r2;

        $r3 = <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 INSTANCE>;

        $r6 = (org.jetbrains.kotlin.utils.DFS$Neighbors) $r3;

        $r4 = <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        $r8 = staticinvoke <org.jetbrains.kotlin.utils.DFS: java.lang.Boolean ifAny(java.util.Collection,org.jetbrains.kotlin.utils.DFS$Neighbors,kotlin.jvm.functions.Function1)>($r7, $r6, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "DFS.ifAny(\n        listO\u2026aultValue != null }\n    )");

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public final org.jetbrains.kotlin.ir.types.IrType unboxType(org.jetbrains.kotlin.ir.types.IrType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType $r1, r4, $r11, $r12;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r2, $r5, $r8;
        org.jetbrains.kotlin.ir.declarations.IrClass r3;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r6, $r7;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r9;
        boolean $z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$unboxType");

        $r5 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r1);

        if $r5 == null goto label1;

        goto label2;

     label1:
        return null;

     label2:
        r2 = $r5;

        $r6 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r2;

        $r7 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r6);

        $r8 = (org.jetbrains.kotlin.ir.symbols.IrClassSymbol) $r7;

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        r3 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r9;

        $z0 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrClass: boolean isInline()>();

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r10 = <org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi: org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi INSTANCE>;

        $r11 = virtualinvoke $r10.<org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi: org.jetbrains.kotlin.ir.types.IrType getUnderlyingType(org.jetbrains.kotlin.ir.declarations.IrClass)>(r3);

        r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.types.IrType unboxInlineClass(org.jetbrains.kotlin.ir.types.IrType)>($r11);

        $z1 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypeUtilsKt: boolean isNullable(org.jetbrains.kotlin.ir.types.IrType)>($r1);

        if $z1 != 0 goto label4;

        return r4;

     label4:
        $z2 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypeUtilsKt: boolean isNullable(org.jetbrains.kotlin.ir.types.IrType)>(r4);

        if $z2 != 0 goto label5;

        $z3 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isPrimitiveType(org.jetbrains.kotlin.ir.types.IrType)>(r4);

        if $z3 == 0 goto label6;

     label5:
        return null;

     label6:
        $r12 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType makeNullable(org.jetbrains.kotlin.ir.types.IrType)>(r4);

        return $r12;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression unboxValueIfInline(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r25, $r26;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r2, $r7, $r10;
        org.jetbrains.kotlin.ir.declarations.IrClass r3;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r4, $r15;
        boolean z0, $z1, $z2, z3;
        org.jetbrains.kotlin.ir.types.IrType $r5, $r6;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r8, $r9;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r11;
        org.jetbrains.kotlin.ir.declarations.IrConstructor $r12;
        java.util.List $r13;
        java.lang.Object $r14;
        org.jetbrains.kotlin.name.Name $r16;
        java.lang.String $r17, $r20, r27, $r29, r31;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r18, r32;
        java.lang.IllegalStateException $r19, $r28;
        java.lang.Throwable $r21, $r30;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r22;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r23;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r24;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$unboxValueIfInline");

        $r5 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z1 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypeUtilsKt: boolean isNullable(org.jetbrains.kotlin.ir.types.IrType)>($r5);

        if $z1 == 0 goto label1;

        return $r1;

     label1:
        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r7 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r6);

        if $r7 == null goto label2;

        goto label3;

     label2:
        return $r1;

     label3:
        r2 = $r7;

        $r8 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r2;

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r8);

        $r10 = (org.jetbrains.kotlin.ir.symbols.IrClassSymbol) $r9;

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        r3 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r11;

        $z2 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrClass: boolean isInline()>();

        if $z2 == 0 goto label8;

        $r12 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrConstructor getPrimaryConstructor(org.jetbrains.kotlin.ir.declarations.IrClass)>(r3);

        if $r12 == null goto label4;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.ir.declarations.IrConstructor: java.util.List getValueParameters()>();

        if $r13 == null goto label4;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r14;

        if $r15 == null goto label4;

        goto label5;

     label4:
        r27 = "Expected a value parameter";

        z3 = 0;

        $r28 = new java.lang.IllegalStateException;

        $r29 = virtualinvoke r27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        $r30 = (java.lang.Throwable) $r28;

        throw $r30;

     label5:
        r4 = $r15;

        $r16 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r17 = virtualinvoke $r16.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "primaryValueParameter.name.identifier");

        $r18 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getPropertyGetter(org.jetbrains.kotlin.ir.declarations.IrClass,java.lang.String)>(r3, $r17);

        if $r18 == null goto label6;

        goto label7;

     label6:
        r31 = "Expected a getter";

        z0 = 0;

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        $r21 = (java.lang.Throwable) $r19;

        throw $r21;

     label7:
        r32 = $r18;

        $r23 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) r32;

        $r22 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[0];

        $r24 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[],int,java.lang.Object)>(r0, $r23, null, $r1, null, $r22, 10, null);

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r24;

        $r26 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression unboxValueIfInline(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r25);

        return $r26;

     label8:
        return $r1;
    }

    public final boolean hasComposableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r1;
        java.util.List $r2;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r3;
        org.jetbrains.kotlin.name.FqName $r4;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$hasComposableAnnotation");

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer: java.util.List getAnnotations()>();

        $r3 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposable()>();

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: boolean hasAnnotation(java.util.List,org.jetbrains.kotlin.name.FqName)>($r2, $r4);

        return $z0;
    }

    public final boolean hasStableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r1;
        java.util.List $r2;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r3;
        org.jetbrains.kotlin.name.FqName $r4;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$hasStableAnnotation");

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer: java.util.List getAnnotations()>();

        $r3 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getStable()>();

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: boolean hasAnnotation(java.util.List,org.jetbrains.kotlin.name.FqName)>($r2, $r4);

        return $z0;
    }

    public final boolean hasAnnotation(java.util.List, org.jetbrains.kotlin.name.FqName)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.util.List $r1;
        org.jetbrains.kotlin.name.FqName r2, $r12;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall r6;
        boolean $z2, $z3, $z4, $z5, $z6;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol $r7;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r8;
        org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor $r9;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r10;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r11;
        java.util.Collection $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.jetbrains.kotlin.name.FqName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$hasAnnotation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "fqName");

        $r3 = (java.lang.Iterable) $r1;

        $z2 = $r3 instanceof java.util.Collection;

        if $z2 == 0 goto label1;

        $r13 = (java.util.Collection) $r3;

        $z4 = interfaceinvoke $r13.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $z5 = 0;

        goto label4;

     label1:
        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) r5;

        $r7 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getSymbol()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r9 = (org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor) $r8;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor: org.jetbrains.kotlin.descriptors.ClassDescriptor getConstructedClass()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "it.symbol.descriptor.constructedClass");

        $r11 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r10;

        $r12 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r11);

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, r2);

        if $z3 == 0 goto label2;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    public final boolean isInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r2;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE $r3;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isInvoke");

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r3 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE INSTANCE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $z1 = $r5 instanceof org.jetbrains.kotlin.builtins.functions.FunctionInvokeDescriptor;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final boolean isTransformedComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        androidx.compose.compiler.plugins.kotlin.WeakBindingTrace $r3;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r4;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r5;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r6;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r7;
        java.lang.Object $r8;
        java.lang.Boolean $r9;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isTransformedComposableCall");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.WeakBindingTraceKt: androidx.compose.compiler.plugins.kotlin.WeakBindingTrace getIrTrace(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r2);

        $r4 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getIS_COMPOSABLE_CALL()>();

        $r7 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r5;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) $r1;

        $r8 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.WeakBindingTrace: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r7, $r6);

        $r9 = (java.lang.Boolean) $r8;

        if $r9 == null goto label1;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isSyntheticComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        androidx.compose.compiler.plugins.kotlin.WeakBindingTrace $r3;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r4;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r5;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r6;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r7;
        java.lang.Object $r8;
        java.lang.Boolean $r9, $r10;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isSyntheticComposableCall");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.WeakBindingTraceKt: androidx.compose.compiler.plugins.kotlin.WeakBindingTrace getIrTrace(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r2);

        $r4 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getIS_SYNTHETIC_COMPOSABLE_CALL()>();

        $r7 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r5;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) $r1;

        $r8 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.WeakBindingTrace: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r7, $r6);

        $r9 = (java.lang.Boolean) $r8;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r10);

        return $z0;
    }

    public final boolean isInlinedLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r3, $r8, $r13;
        boolean z0, z1, z3, z4, $z6, $z7;
        org.jetbrains.kotlin.psi.KtFunctionLiteral r4, r5, $r9;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r6;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r7;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r10;
        org.jetbrains.kotlin.psi.KtFunction $r11;
        org.jetbrains.kotlin.resolve.BindingContext $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isInlinedLambda");

        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r7 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r6;

        $r8 = staticinvoke <org.jetbrains.kotlin.js.resolve.diagnostics.SourceLocationUtilsKt: org.jetbrains.kotlin.com.intellij.psi.PsiElement findPsi(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r7);

        if $r8 == null goto label4;

        r2 = $r8;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r13 = r3;

        $z6 = r3 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z6 != 0 goto label1;

        $r13 = null;

     label1:
        $r9 = (org.jetbrains.kotlin.psi.KtFunctionLiteral) $r13;

        if $r9 == null goto label3;

        r4 = $r9;

        z3 = 0;

        z4 = 0;

        r5 = r4;

        $r11 = (org.jetbrains.kotlin.psi.KtFunction) r5;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r12 = interfaceinvoke $r10.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z7 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInlinedArgument(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext,boolean)>($r11, $r12, 0);

        if $z7 == 0 goto label2;

        return 1;

     label2:
        goto label3;

     label3:
        goto label4;

     label4:
        return 0;
    }

    protected final boolean isEnum(org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.types.KotlinType $r1;
        org.jetbrains.kotlin.types.TypeConstructor $r2;
        boolean $z0, $z1;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r3;
        org.jetbrains.kotlin.descriptors.ClassKind $r4, $r6;
        org.jetbrains.kotlin.descriptors.ClassifierDescriptor $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.types.KotlinType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isEnum");

        $r2 = virtualinvoke $r1.<org.jetbrains.kotlin.types.KotlinType: org.jetbrains.kotlin.types.TypeConstructor getConstructor()>();

        $r5 = interfaceinvoke $r2.<org.jetbrains.kotlin.types.TypeConstructor: org.jetbrains.kotlin.descriptors.ClassifierDescriptor getDeclarationDescriptor()>();

        $z0 = $r5 instanceof org.jetbrains.kotlin.descriptors.ClassDescriptor;

        if $z0 != 0 goto label1;

        $r5 = null;

     label1:
        $r3 = (org.jetbrains.kotlin.descriptors.ClassDescriptor) $r5;

        if $r3 == null goto label2;

        $r6 = interfaceinvoke $r3.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.descriptors.ClassKind getKind()>();

        goto label3;

     label2:
        $r6 = null;

     label3:
        $r4 = <org.jetbrains.kotlin.descriptors.ClassKind: org.jetbrains.kotlin.descriptors.ClassKind ENUM_CLASS>;

        if $r6 != $r4 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    protected final boolean isStable(org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.types.KotlinType $r1, $r8, $r9;
        org.jetbrains.kotlin.resolve.BindingTrace r2;
        java.lang.Boolean r3, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r4, $r10;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r5, $r11;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.types.KotlinType;

        if $r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.resolve.BindingTrace bindingTrace>;

        $r4 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getSTABLE_TYPE()>();

        $r6 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r5;

        $r7 = interfaceinvoke r2.<org.jetbrains.kotlin.resolve.BindingTrace: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r6, $r1);

        r3 = (java.lang.Boolean) $r7;

        if r3 != null goto label6;

        $z1 = staticinvoke <org.jetbrains.kotlin.types.KotlinTypeKt: boolean isError(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z1 != 0 goto label4;

        $z2 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isTypeParameter(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z2 != 0 goto label4;

        $z3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean isSpecialType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z3 != 0 goto label4;

        $z4 = staticinvoke <org.jetbrains.kotlin.builtins.KotlinBuiltIns: boolean isPrimitiveType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z4 != 0 goto label3;

        $z5 = staticinvoke <org.jetbrains.kotlin.backend.common.descriptors.DescriptorUtilsKt: boolean isFunctionOrKFunctionType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z5 != 0 goto label3;

        $z6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: boolean isEnum(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z6 != 0 goto label3;

        $z7 = staticinvoke <org.jetbrains.kotlin.builtins.KotlinBuiltIns: boolean isString(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z7 != 0 goto label3;

        $z8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean isMarkedStable(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z8 != 0 goto label3;

        $z9 = staticinvoke <org.jetbrains.kotlin.types.KotlinTypeKt: boolean isNullable(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z9 == 0 goto label2;

        $r9 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.types.KotlinType makeNotNullable(org.jetbrains.kotlin.types.KotlinType)>($r1);

        $z12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r9);

        if $z12 != 0 goto label3;

     label2:
        $z10 = staticinvoke <org.jetbrains.kotlin.resolve.InlineClassesUtilsKt: boolean isInlineClassType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z10 == 0 goto label4;

        $r8 = staticinvoke <org.jetbrains.kotlin.resolve.InlineClassesUtilsKt: org.jetbrains.kotlin.types.KotlinType unsubstitutedUnderlyingType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        $z11 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r8);

        if $z11 == 0 goto label4;

     label3:
        $z13 = 1;

        goto label5;

     label4:
        $z13 = 0;

     label5:
        z0 = $z13;

        $r10 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getSTABLE_TYPE()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke r2.<org.jetbrains.kotlin.resolve.BindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,java.lang.Object,java.lang.Object)>($r11, $r1, $r12);

        $z14 = z0;

        goto label7;

     label6:
        $z14 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

     label7:
        return $z14;
    }

    public final boolean isComposableCallable(org.jetbrains.kotlin.descriptors.FunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r3;
        org.jetbrains.kotlin.resolve.BindingContext $r4;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isComposableCallable");

        $r3 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) $r1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r4 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r3, $r4);

        return $z0;
    }

    public final boolean allowsComposableCalls(org.jetbrains.kotlin.descriptors.FunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.resolve.BindingContext $r3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$allowsComposableCalls");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean allowsComposableCalls(org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r1, $r3);

        return $z0;
    }

    public final boolean allowsComposableCalls(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression $r1;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.resolve.BindingContext $r5;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$allowsComposableCalls");

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean allowsComposableCalls(org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r3, $r5);

        return $z0;
    }

    private final void createParameterDeclarations(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, r26, r35;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1 $r4;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2 $r5;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r6, $r9, $r12, $r15;
        org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor $r7, $r10;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r8, $r11;
        java.util.List $r13, $r16, r33, r42;
        java.util.ArrayList $r14, $r17;
        int $i0, $i1;
        boolean $z0, $z5;
        org.jetbrains.kotlin.descriptors.ParameterDescriptor $r18, $r19, $r21;
        org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl $r23, $r24, r32;
        java.lang.Iterable $r25, $r34;
        java.util.Collection r27, r31, r36, r40;
        java.util.Iterator r28, r37;
        java.lang.Object r29, r38;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor r30;
        org.jetbrains.kotlin.descriptors.TypeParameterDescriptor r39;
        org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl r41;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r4 = new androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1;

        specialinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.declarations.IrFunction)>(r0, $r1);

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2;

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: void <init>(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter()>();

        if $r7 == null goto label1;

        $r21 = (org.jetbrains.kotlin.descriptors.ParameterDescriptor) $r7;

        $r23 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl invoke(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r21);

        goto label2;

     label1:
        $r23 = null;

     label2:
        $r8 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r23;

        interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setDispatchReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r8);

        $r9 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter()>();

        if $r10 == null goto label3;

        $r19 = (org.jetbrains.kotlin.descriptors.ParameterDescriptor) $r10;

        $r24 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl invoke(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r19);

        goto label4;

     label3:
        $r24 = null;

     label4:
        $r11 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r24;

        interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setExtensionReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r11);

        $r12 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "descriptor.valueParameters");

        $r25 = (java.lang.Iterable) $r13;

        r26 = $r1;

        $r14 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r25, 10);

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i0);

        r27 = (java.util.Collection) $r14;

        r28 = interfaceinvoke $r25.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) r29;

        r31 = r27;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r30, "it");

        $r18 = (org.jetbrains.kotlin.descriptors.ParameterDescriptor) r30;

        r32 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl invoke(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r18);

        interfaceinvoke r31.<java.util.Collection: boolean add(java.lang.Object)>(r32);

        goto label5;

     label6:
        r33 = (java.util.List) r27;

        interfaceinvoke r26.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setValueParameters(java.util.List)>(r33);

        $r15 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r16 = interfaceinvoke $r15.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getTypeParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "descriptor.typeParameters");

        $r34 = (java.lang.Iterable) $r16;

        r35 = $r1;

        $r17 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r34, 10);

        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>($i1);

        r36 = (java.util.Collection) $r17;

        r37 = interfaceinvoke $r34.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        r38 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.jetbrains.kotlin.descriptors.TypeParameterDescriptor) r38;

        r40 = r36;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r39, "it");

        r41 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl invoke(org.jetbrains.kotlin.descriptors.TypeParameterDescriptor)>(r39);

        interfaceinvoke r40.<java.util.Collection: boolean add(java.lang.Object)>(r41);

        goto label7;

     label8:
        r42 = (java.util.List) r36;

        interfaceinvoke r35.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setTypeParameters(java.util.List)>(r42);

        return;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irLambdaExpression(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope, org.jetbrains.kotlin.descriptors.FunctionDescriptor, org.jetbrains.kotlin.ir.types.IrType, kotlin.jvm.functions.Function2)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        org.jetbrains.kotlin.ir.types.IrType r3;
        kotlin.jvm.functions.Function2 r4;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.builders.IrBuilderWithScope;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r3 := @parameter2: org.jetbrains.kotlin.ir.types.IrType;

        r4 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$irLambdaExpression");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "descriptor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "body");

        $i0 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getStartOffset()>();

        $i1 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getEndOffset()>();

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irLambdaExpression(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,int,int,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.types.IrType,kotlin.jvm.functions.Function2)>($r1, $i0, $i1, r2, r3, r4);

        return $r5;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irLambdaExpression(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope, int, int, org.jetbrains.kotlin.descriptors.FunctionDescriptor, org.jetbrains.kotlin.ir.types.IrType, kotlin.jvm.functions.Function2)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r1, $r48;
        int i0, i1, i2, $i3, i4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        org.jetbrains.kotlin.ir.types.IrType r3, r6;
        kotlin.jvm.functions.Function2 r4;
        org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl r5, $r11;
        org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder r7, $r27;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl r8, r10, $r13, r47;
        kotlin.Unit r9;
        org.jetbrains.kotlin.types.KotlinType $r12;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA $r14;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r15;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r16;
        org.jetbrains.kotlin.name.Name $r17;
        org.jetbrains.kotlin.descriptors.Visibility $r18;
        org.jetbrains.kotlin.descriptors.Modality $r19;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, z9, z14;
        org.jetbrains.kotlin.ir.builders.Scope $r20, $r29, $r36;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r21;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r22;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder $r23;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r24;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r25;
        org.jetbrains.kotlin.ir.builders.IrGeneratorContext $r26, $r28, $r35;
        org.jetbrains.kotlin.ir.expressions.IrBlockBody $r31;
        org.jetbrains.kotlin.ir.expressions.IrBody $r32;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA $r33, $r41;
        org.jetbrains.kotlin.ir.builders.IrBlockBuilder $r34, r51;
        org.jetbrains.kotlin.ir.IrStatement $r37, $r43;
        org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl $r38;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r39;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r40;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r42, r50;
        org.jetbrains.kotlin.ir.expressions.IrContainerExpression $r44;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r45;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.builders.IrBuilderWithScope;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r3 := @parameter4: org.jetbrains.kotlin.ir.types.IrType;

        r4 := @parameter5: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$irLambdaExpression");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "descriptor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "body");

        $r11 = new org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl;

        specialinvoke $r11.<org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl: void <init>(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>(r2);

        r5 = $r11;

        $r12 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "descriptor.returnType!!");

        r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r12);

        $r13 = new org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        $r14 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA INSTANCE>;

        $r15 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r14;

        $r16 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r5;

        $r17 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "descriptor.name");

        $r18 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.Visibility getVisibility()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "descriptor.visibility");

        $r19 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.Modality getModality()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "descriptor.modality");

        $z3 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isInline()>();

        $z4 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isExternal()>();

        $z5 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isTailrec()>();

        $z6 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isSuspend()>();

        $z7 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isOperator()>();

        $z8 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isExpect()>();

        specialinvoke $r13.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.descriptors.Visibility,org.jetbrains.kotlin.descriptors.Modality,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, i1, $r15, $r16, $r17, $r18, $r19, r6, $z3, $z4, $z5, $z6, $z7, $z8, 0, 16384, null);

        z9 = 0;

        r47 = $r13;

        $r20 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        $r21 = virtualinvoke $r20.<org.jetbrains.kotlin.ir.builders.Scope: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getLocalDeclarationParent()>();

        virtualinvoke r47.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r21);

        $r22 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r47;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: void createParameterDeclarations(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r22);

        $r23 = new org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        $r24 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r26 = (org.jetbrains.kotlin.ir.builders.IrGeneratorContext) $r24;

        $r25 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r5;

        specialinvoke $r23.<org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.symbols.IrSymbol,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r26, $r25, 0, 0, 12, null);

        $r48 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) $r23;

        i4 = virtualinvoke $r48.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getStartOffset()>();

        i2 = virtualinvoke $r48.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getEndOffset()>();

        $r27 = new org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder;

        $r28 = virtualinvoke $r48.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.IrGeneratorContext getContext()>();

        $r29 = virtualinvoke $r48.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        specialinvoke $r27.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.builders.Scope,int,int)>($r28, $r29, i4, i2);

        r7 = $r27;

        r8 = r47;

        interfaceinvoke r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r7, r47);

        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r31 = virtualinvoke r7.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: org.jetbrains.kotlin.ir.expressions.IrBlockBody doBuild()>();

        $r32 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r31;

        virtualinvoke r8.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r32);

        r10 = $r13;

        $r33 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA INSTANCE>;

        r50 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r33;

        $r34 = new org.jetbrains.kotlin.ir.builders.IrBlockBuilder;

        $r35 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.IrGeneratorContext getContext()>();

        $r36 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        specialinvoke $r34.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.builders.Scope,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.types.IrType,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r35, $r36, i0, i1, r50, r3, 0, 64, null);

        r51 = $r34;

        z14 = 0;

        $r37 = (org.jetbrains.kotlin.ir.IrStatement) r10;

        virtualinvoke r51.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: void unaryPlus(org.jetbrains.kotlin.ir.IrStatement)>($r37);

        $r38 = new org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl;

        $r40 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) r5;

        $r39 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r2;

        $i3 = staticinvoke <org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt: int getTypeParametersCount(org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r39);

        $r41 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA INSTANCE>;

        $r42 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r41;

        specialinvoke $r38.<org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,int,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(i0, i1, r3, $r40, $i3, null, $r42);

        $r43 = (org.jetbrains.kotlin.ir.IrStatement) $r38;

        virtualinvoke r51.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: void unaryPlus(org.jetbrains.kotlin.ir.IrStatement)>($r43);

        $r44 = virtualinvoke r51.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: org.jetbrains.kotlin.ir.expressions.IrContainerExpression doBuild()>();

        $r45 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r44;

        return $r45;
    }

    protected final org.jetbrains.kotlin.descriptors.FunctionDescriptor createFunctionDescriptor(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope, org.jetbrains.kotlin.types.KotlinType, org.jetbrains.kotlin.descriptors.DeclarationDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r1;
        org.jetbrains.kotlin.types.KotlinType r2, $r16, $r20, $r28, $r33, r40;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r3;
        org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor r4, $r11, $r39, r41, r46;
        java.util.List r6, $r17, $r18, r50;
        java.util.Iterator r7;
        java.lang.Object r8;
        int i0, i1, $i2, $i3, i5;
        org.jetbrains.kotlin.types.TypeProjection r9;
        org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl r10, $r24;
        org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion $r12, $r25, $r36;
        org.jetbrains.kotlin.descriptors.annotations.Annotations $r13, $r27, $r38;
        org.jetbrains.kotlin.descriptors.SourceElement $r14, $r34;
        org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind $r15;
        java.util.ArrayList $r19;
        org.jetbrains.kotlin.descriptors.Visibility $r21;
        org.jetbrains.kotlin.descriptors.Modality $r22;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r23;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r26, $r37;
        java.lang.StringBuilder $r29, $r30, $r31;
        java.lang.String $r32;
        org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor r42, $r43, r45;
        java.lang.Iterable $r44;
        java.util.Collection r47, r48;
        boolean $z0;
        org.jetbrains.kotlin.name.Name $r49;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.builders.IrBuilderWithScope;

        r2 := @parameter1: org.jetbrains.kotlin.types.KotlinType;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$createFunctionDescriptor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "owner");

        $r11 = new org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor;

        $r12 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r13 = virtualinvoke $r12.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        $r15 = <org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind: org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind SYNTHESIZED>;

        $r14 = <org.jetbrains.kotlin.descriptors.SourceElement: org.jetbrains.kotlin.descriptors.SourceElement NO_SOURCE>;

        specialinvoke $r11.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void <init>(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind,org.jetbrains.kotlin.descriptors.SourceElement,boolean)>(r3, $r13, $r15, $r14, 0);

        r4 = $r11;

        $r39 = r4;

        $r16 = staticinvoke <org.jetbrains.kotlin.builtins.FunctionTypesKt: org.jetbrains.kotlin.types.KotlinType getReceiverTypeFromFunctionType(org.jetbrains.kotlin.types.KotlinType)>(r2);

        if $r16 == null goto label1;

        r40 = $r16;

        r41 = r4;

        $r37 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r4;

        $r36 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r38 = virtualinvoke $r36.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        r42 = staticinvoke <org.jetbrains.kotlin.resolve.DescriptorFactory: org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor createExtensionReceiverParameterForCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.annotations.Annotations)>($r37, r40, $r38);

        $r39 = r41;

        $r43 = r42;

        goto label2;

     label1:
        $r43 = null;

     label2:
        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r18 = staticinvoke <org.jetbrains.kotlin.builtins.FunctionTypesKt: java.util.List getValueParameterTypesFromFunctionType(org.jetbrains.kotlin.types.KotlinType)>(r2);

        $r44 = (java.lang.Iterable) $r18;

        r6 = $r17;

        r45 = $r43;

        r46 = $r39;

        $r19 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r44, 10);

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>($i2);

        r47 = (java.util.Collection) $r19;

        i5 = 0;

        r7 = interfaceinvoke $r44.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i5;

        i5 = i5 + 1;

        i0 = $i3;

        if i0 >= 0 goto label4;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label4:
        r9 = (org.jetbrains.kotlin.types.TypeProjection) r8;

        i1 = i0;

        r48 = r47;

        $r24 = new org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl;

        $r26 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r4;

        $r25 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r27 = virtualinvoke $r25.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        $r28 = interfaceinvoke r9.<org.jetbrains.kotlin.types.TypeProjection: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r28, "t.type");

        $r49 = staticinvoke <org.jetbrains.kotlin.builtins.FunctionTypesKt: org.jetbrains.kotlin.name.Name extractParameterNameFromFunctionTypeArgument(org.jetbrains.kotlin.types.KotlinType)>($r28);

        if $r49 == null goto label5;

        goto label6;

     label5:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(112);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r49 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>($r32);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r49, "Name.identifier(\"p$i\")");

     label6:
        $r33 = interfaceinvoke r9.<org.jetbrains.kotlin.types.TypeProjection: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r33, "t.type");

        $r34 = <org.jetbrains.kotlin.descriptors.SourceElement: org.jetbrains.kotlin.descriptors.SourceElement NO_SOURCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r34, "SourceElement.NO_SOURCE");

        specialinvoke $r24.<org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl: void <init>(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.descriptors.ValueParameterDescriptor,int,org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,boolean,boolean,boolean,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.SourceElement)>($r26, null, i1, $r27, $r49, $r33, 0, 0, 0, null, $r34);

        r10 = $r24;

        interfaceinvoke r48.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        goto label3;

     label7:
        r50 = (java.util.List) r47;

        $r20 = staticinvoke <org.jetbrains.kotlin.builtins.FunctionTypesKt: org.jetbrains.kotlin.types.KotlinType getReturnTypeFromFunctionType(org.jetbrains.kotlin.types.KotlinType)>(r2);

        $r22 = <org.jetbrains.kotlin.descriptors.Modality: org.jetbrains.kotlin.descriptors.Modality FINAL>;

        $r21 = <org.jetbrains.kotlin.descriptors.Visibilities: org.jetbrains.kotlin.descriptors.Visibility LOCAL>;

        virtualinvoke r46.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: org.jetbrains.kotlin.descriptors.impl.SimpleFunctionDescriptorImpl initialize(org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor,org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.Modality,org.jetbrains.kotlin.descriptors.Visibility,java.util.Map)>(r45, null, r6, r50, $r20, $r22, $r21, null);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setOperator(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setInfix(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setExternal(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setInline(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setTailrec(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setSuspend(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setExpect(boolean)>(0);

        virtualinvoke r4.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void setActual(boolean)>(0);

        $r23 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        return $r23;
    }

    public static org.jetbrains.kotlin.descriptors.FunctionDescriptor createFunctionDescriptor$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.builders.IrBuilderWithScope, org.jetbrains.kotlin.types.KotlinType, org.jetbrains.kotlin.descriptors.DeclarationDescriptor, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope r1;
        org.jetbrains.kotlin.types.KotlinType r2;
        int i0, $i1;
        java.lang.Object r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.ir.builders.Scope $r5;
        java.lang.UnsupportedOperationException $r6;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r7;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter1: org.jetbrains.kotlin.ir.builders.IrBuilderWithScope;

        r2 := @parameter2: org.jetbrains.kotlin.types.KotlinType;

        r7 := @parameter3: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        if r3 == null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: createFunctionDescriptor");

        throw $r6;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        $r5 = virtualinvoke r1.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        r7 = virtualinvoke $r5.<org.jetbrains.kotlin.ir.builders.Scope: org.jetbrains.kotlin.descriptors.DeclarationDescriptor getScopeOwner()>();

     label2:
        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.descriptors.FunctionDescriptor createFunctionDescriptor(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>(r1, r2, r7);

        return $r4;
    }

    protected final int withBit(int, int, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        int $i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i4 = 1 << i1;

        $i5 = $i0 | $i4;

        goto label2;

     label1:
        $i2 = 1 << i1;

        $i3 = $i2 ^ -1;

        $i5 = $i0 & $i3;

     label2:
        return $i5;
    }

    protected final boolean get(int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        int $i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = 1 << i1;

        $i3 = $i0 & $i2;

        if $i3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final transient int bitMask(boolean[])
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        boolean[] r1, r2;
        byte b0;
        int i1, i2, i3, $i4, i5, i6, i7;
        boolean z1, z2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: boolean[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        b0 = 0;

        i5 = 0;

        i6 = b0;

        r2 = r1;

        i1 = lengthof r2;

        i7 = 0;

     label1:
        if i7 >= i1 goto label2;

        z1 = r2[i7];

        $i4 = i5;

        i5 = i5 + 1;

        z2 = z1;

        i2 = i6;

        i3 = $i4;

        i6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: int withBit(int,int,boolean)>(i2, i3, z2);

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r1;
        int i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2, $r4, $r5;
        org.jetbrains.kotlin.ir.expressions.IrConst $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "param");

        $r2 = interfaceinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitAtIndex(int)>(i0);

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irNotEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r2, $r4);

        return $r5;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irSet(org.jetbrains.kotlin.ir.declarations.IrVariable, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrVariable r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, $r9;
        org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl $r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r5;
        org.jetbrains.kotlin.ir.types.IrType $r6;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r7;
        org.jetbrains.kotlin.ir.symbols.IrVariableSymbol $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrVariable;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "variable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = new org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r7 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        $r8 = (org.jetbrains.kotlin.ir.symbols.IrVariableSymbol) $r7;

        specialinvoke $r3.<org.jetbrains.kotlin.ir.expressions.impl.IrSetVariableImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrVariableSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(-1, -1, $r6, $r8, r2, null);

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        return $r9;
    }

    protected final transient org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression[])
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression r3, r4, r9, r10;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] r5, r8;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl r6, r7, $r13;
        boolean z0, z1;
        int i0, i1, $i2, i3, i4;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r11;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r14;
        org.jetbrains.kotlin.ir.types.IrType $r15;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r5 := @parameter4: org.jetbrains.kotlin.ir.expressions.IrExpression[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "symbol");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "args");

        $r11 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r11);

        $r13 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        $r14 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r15 = interfaceinvoke $r14.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.types.IrType getReturnType()>();

        specialinvoke $r13.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r15, r1, r2, null, 32, null);

        r6 = $r13;

        z0 = 0;

        z1 = 0;

        r7 = r6;

        if r3 == null goto label1;

        virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r3);

     label1:
        if r4 == null goto label2;

        virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setExtensionReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r4);

     label2:
        i3 = 0;

        r8 = r5;

        i0 = lengthof r8;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        r9 = r8[i4];

        $i2 = i3;

        i3 = i3 + 1;

        r10 = r9;

        i1 = $i2;

        virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i1, r10);

        i4 = i4 + 1;

        goto label3;

     label4:
        return r6;
    }

    public static org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression[], int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object r3;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r4;
        java.lang.UnsupportedOperationException $r5;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r6;
        org.jetbrains.kotlin.ir.expressions.IrExpression r7, r8;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter1: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol;

        r6 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r7 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r8 := @parameter4: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter5: org.jetbrains.kotlin.ir.expressions.IrExpression[];

        i0 := @parameter6: int;

        r3 := @parameter7: java.lang.Object;

        if r3 == null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irCall");

        throw $r5;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        r6 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) null;

     label2:
        $i2 = i0 & 4;

        if $i2 == 0 goto label3;

        r7 = (org.jetbrains.kotlin.ir.expressions.IrExpression) null;

     label3:
        $i3 = i0 & 8;

        if $i3 == 0 goto label4;

        r8 = (org.jetbrains.kotlin.ir.expressions.IrExpression) null;

     label4:
        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>(r1, r6, r7, r8, r2);

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r4;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r5;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r6;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r7;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getIntAnd()>();

        $r7 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r5;

        $r6 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r6[0] = r2;

        $r8 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r7, null, r1, null, $r6);

        return $r8;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irInv(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        org.jetbrains.kotlin.types.SimpleType r2, $r5;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3, $r6;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r4;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r7;
        org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames $r8;
        org.jetbrains.kotlin.name.Name $r9;
        org.jetbrains.kotlin.types.KotlinType $r10;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r11;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r12;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r13;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getIntType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "context.builtIns.intType");

        r2 = $r5;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r8 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r9 = virtualinvoke $r8.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getINV()>();

        $r10 = (org.jetbrains.kotlin.types.KotlinType) r2;

        $r11 = virtualinvoke $r7.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getUnaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType)>($r9, $r10);

        $r13 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r11;

        $r12 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[0];

        $r14 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[],int,java.lang.Object)>(r0, $r13, null, r1, null, $r12, 8, null);

        return $r14;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irOr(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2;
        org.jetbrains.kotlin.types.SimpleType r3, $r6;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4, $r7;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r5;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r8;
        org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames $r9;
        org.jetbrains.kotlin.name.Name $r10;
        org.jetbrains.kotlin.types.KotlinType $r11, $r12;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r14;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r15;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getIntType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "context.builtIns.intType");

        r3 = $r6;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r9 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getOR()>();

        $r12 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r11 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r13 = virtualinvoke $r8.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBinaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.types.KotlinType)>($r10, $r12, $r11);

        $r15 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r13;

        $r14 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r14[0] = r2;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r15, null, r1, null, $r14);

        return $r16;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irBooleanOr(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2;
        org.jetbrains.kotlin.types.SimpleType r3, $r6;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4, $r7;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r5;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r8;
        org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames $r9;
        org.jetbrains.kotlin.name.Name $r10;
        org.jetbrains.kotlin.types.KotlinType $r11, $r12;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r14;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r15;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getBooleanType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "context.builtIns.booleanType");

        r3 = $r6;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r9 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getOR()>();

        $r12 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r11 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r13 = virtualinvoke $r8.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBinaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.types.KotlinType)>($r10, $r12, $r11);

        $r15 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r13;

        $r14 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r14[0] = r2;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r15, null, r1, null, $r14);

        return $r16;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, $r14, $r17, $r19;
        java.util.List r3;
        org.jetbrains.kotlin.ir.types.IrType r4, $r10;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r5;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl $r6;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$OROR $r7;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r8;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r9;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl[] $r11;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r12, $r18;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r13, $r16;
        org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl $r15;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r6 = new org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl;

        $r7 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$OROR: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$OROR INSTANCE>;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getBooleanType()>();

        $r11 = newarray (org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl)[2];

        $r12 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(1);

        $r14 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r13;

        specialinvoke $r12.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, r1, $r14);

        $r11[0] = $r12;

        $r15 = new org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(1);

        $r17 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r16;

        specialinvoke $r15.<org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, $r17, r2);

        $r18 = (org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl) $r15;

        $r11[1] = $r18;

        r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r11);

        r4 = $r10;

        r5 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r7;

        specialinvoke $r6.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, r4, r5, r3);

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        return $r19;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irAndAnd(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, $r15, $r17, $r19;
        java.util.List r3;
        org.jetbrains.kotlin.ir.types.IrType r4, $r10;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r5;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl $r6;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$ANDAND $r7;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r8;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r9;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl[] $r11;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r12, $r18;
        org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl $r13;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r14, $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r6 = new org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl;

        $r7 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$ANDAND: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$ANDAND INSTANCE>;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getBooleanType()>();

        $r11 = newarray (org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl)[2];

        $r12 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        specialinvoke $r12.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, r1, r2);

        $r11[0] = $r12;

        $r13 = new org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl;

        $r14 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(1);

        $r15 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r14;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(0);

        $r17 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r16;

        specialinvoke $r13.<org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, $r15, $r17);

        $r18 = (org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl) $r13;

        $r11[1] = $r18;

        r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r11);

        r4 = $r10;

        r5 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r7;

        specialinvoke $r6.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, r4, r5, r3);

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        return $r19;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irXor(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2;
        org.jetbrains.kotlin.types.SimpleType r3, $r6;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4, $r7;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r5;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r8;
        org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames $r9;
        org.jetbrains.kotlin.name.Name $r10;
        org.jetbrains.kotlin.types.KotlinType $r11, $r12;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r14;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r15;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getIntType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "context.builtIns.intType");

        r3 = $r6;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r9 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getXOR()>();

        $r12 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r11 = (org.jetbrains.kotlin.types.KotlinType) r3;

        $r13 = virtualinvoke $r8.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBinaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.types.KotlinType)>($r10, $r12, $r11);

        $r15 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r13;

        $r14 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r14[0] = r2;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r15, null, r1, null, $r14);

        return $r16;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irReturn(org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.types.IrType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, $r5;
        org.jetbrains.kotlin.ir.types.IrType r3;
        org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: org.jetbrains.kotlin.ir.types.IrType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "type");

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl;

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, r3, r1, r2);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    public static org.jetbrains.kotlin.ir.expressions.IrExpression irReturn$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.types.IrType, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, $r4;
        int i0, $i1;
        java.lang.Object r3;
        java.lang.UnsupportedOperationException $r5;
        org.jetbrains.kotlin.ir.types.IrType r6;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter1: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol;

        r2 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r6 := @parameter3: org.jetbrains.kotlin.ir.types.IrType;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        if r3 == null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irReturn");

        throw $r5;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        r6 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

     label2:
        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irReturn(org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.types.IrType)>(r1, r2, r6);

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, $r9;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r4;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r5;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r6;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r7;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getEqeqeqSymbol()>();

        $r7 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r5;

        $r6 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        $r8 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r7, null, null, null, $r6);

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        return $r9;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irNot(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r8;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r3;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r5;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r6;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBooleanNotSymbol()>();

        $r6 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r4;

        $r5 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[0];

        $r7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[],int,java.lang.Object)>(r0, $r6, null, r1, null, $r5, 10, null);

        $r8 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r7;

        return $r8;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irNotEqual(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lhs");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rhs");

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, r2);

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irNot(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r3);

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        int i0;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r3;
        org.jetbrains.kotlin.ir.types.IrType $r4;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Int $r5;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r6;
        java.lang.Integer $r7;
        org.jetbrains.kotlin.ir.expressions.IrConst $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        i0 := @parameter0: int;

        $r1 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        $r5 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Int: org.jetbrains.kotlin.ir.expressions.IrConstKind$Int INSTANCE>;

        $r6 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r4, $r6, $r7);

        $r8 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r1;

        return $r8;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrConst irConst(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.lang.String r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r2;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r4;
        org.jetbrains.kotlin.ir.types.IrType $r5;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$String $r6;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r7;
        org.jetbrains.kotlin.ir.expressions.IrConst $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getStringType()>();

        $r6 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$String: org.jetbrains.kotlin.ir.expressions.IrConstKind$String INSTANCE>;

        $r7 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r6;

        specialinvoke $r2.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r5, $r7, r1);

        $r8 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r2;

        return $r8;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        boolean z0;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r3;
        org.jetbrains.kotlin.ir.types.IrType $r4;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean $r5;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r6;
        java.lang.Boolean $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        z0 := @parameter0: boolean;

        $r1 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getBooleanType()>();

        $r5 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean: org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean INSTANCE>;

        $r6 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r5;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        specialinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r4, $r6, $r7);

        return $r1;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irNull()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r3;
        org.jetbrains.kotlin.ir.types.IrType $r4;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Null $r5;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getAnyNType()>();

        $r5 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Null: org.jetbrains.kotlin.ir.expressions.IrConstKind$Null INSTANCE>;

        $r6 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r5;

        specialinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r4, $r6, null);

        return $r1;
    }

    protected final org.jetbrains.kotlin.ir.IrStatement irForLoop(org.jetbrains.kotlin.descriptors.DeclarationDescriptor, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrExpression, kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0, r11;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r1;
        org.jetbrains.kotlin.ir.types.IrType r2, r10, $r15, $r18, $r28, $r33, $r38, $r48, $r51, r142, $r143, r174;
        org.jetbrains.kotlin.ir.expressions.IrExpression r3, $r50, $r63, $r67, $r72, $r75, $r83, $r86;
        kotlin.jvm.functions.Function1 r4;
        org.jetbrains.kotlin.builtins.PrimitiveType r5, r137, r138;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r6, $r19, $r29, $r34, $r39, $r136, $r139, $r144;
        org.jetbrains.kotlin.ir.IrStatement[] r7, r8, $r54, $r77;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r9, $r46, $r58, $r62, $r71, $r79;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin r12, r173;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r13, r175;
        kotlin.Unit r14;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r16, $r132, $r140;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r17, $r133;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14, z15;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r20, $r40;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r21, $r23, $r90, $r97, $r104, $r113, $r120, $r127;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r22;
        java.util.List $r24, $r82, $r85;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r25, $r30, $r35;
        org.jetbrains.kotlin.ir.declarations.IrClass $r26, $r31, $r36;
        org.jetbrains.kotlin.ir.types.IrSimpleType $r27, $r32, $r37, $r44;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r41, $r65, $r74, r172;
        org.jetbrains.kotlin.ir.types.IrType[] $r42;
        org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol $r43, $r49;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR $r45;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r47, $r61, $r70;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR $r52;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP $r53;
        org.jetbrains.kotlin.ir.IrStatement $r55, $r78, $r81, $r84, $r87;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl $r56, r176;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE $r57, $r76;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_NEXT $r59;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r60, $r69;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r64, $r73;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_VARIABLE $r66;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_HAS_NEXT $r68;
        java.lang.Object $r80, $r135, r147, $r150, r152, r157, r160, $r162, r166, $r168;
        java.util.NoSuchElementException $r88, $r95, $r102, $r118, $r125;
        java.lang.Throwable $r89, $r94, $r96, $r101, $r103, $r108, $r117, $r119, $r124, $r126, $r131;
        org.jetbrains.kotlin.name.Name $r91, $r98, $r105, $r121, $r128;
        java.lang.String $r92, $r99, $r106, $r116, $r122, $r129;
        java.lang.IllegalArgumentException $r93, $r100, $r107, $r123, $r130;
        java.lang.AssertionError $r109;
        java.lang.StringBuilder $r110, $r111, $r115;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol $r112;
        org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor $r114;
        java.util.Map $r134;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r141;
        kotlin.sequences.Sequence $r145, $r149, $r155, r159, $r165;
        java.util.Iterator r146, r151, r156, r161, $r167;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r148, $r153, $r154, $r158, $r163, $r164, $r169, r170;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        r2 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "elementType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "subject");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "loopBody");

        $r15 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        r5 = staticinvoke <org.jetbrains.kotlin.ir.util.IrTypeUtilsKt: org.jetbrains.kotlin.builtins.PrimitiveType getPrimitiveArrayElementType(org.jetbrains.kotlin.ir.types.IrType)>($r15);

        if r5 == null goto label01;

        r137 = r5;

        r138 = r137;

        $r132 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r133 = interfaceinvoke $r132.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r134 = virtualinvoke $r133.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: java.util.Map getPrimitiveIteratorsByType()>();

        $r135 = interfaceinvoke $r134.<java.util.Map: java.lang.Object get(java.lang.Object)>(r138);

        $r136 = (org.jetbrains.kotlin.ir.symbols.IrClassSymbol) $r135;

        $r139 = $r136;

        if $r136 == null goto label01;

        goto label02;

     label01:
        $r16 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r139 = virtualinvoke $r17.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getIterator()>();

     label02:
        r6 = $r139;

        $r140 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r141 = interfaceinvoke $r140.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r142 = virtualinvoke $r141.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r143 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r144 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r143);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r144);

        $z10 = 0;

        $r145 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getFunctions(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r144);

        r146 = interfaceinvoke $r145.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label03:
        $z11 = interfaceinvoke r146.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label06;

        r147 = interfaceinvoke r146.<java.util.Iterator: java.lang.Object next()>();

        r148 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r147;

        $r127 = interfaceinvoke r148.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r128 = interfaceinvoke $r127.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r129 = virtualinvoke $r128.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z9 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r129, "iterator");

        if $z9 == 0 goto label05;

        if $z10 == 0 goto label04;

        $r130 = new java.lang.IllegalArgumentException;

        specialinvoke $r130.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        $r131 = (java.lang.Throwable) $r130;

        throw $r131;

     label04:
        $z10 = 1;

     label05:
        goto label03;

     label06:
        if $z10 != 0 goto label07;

        $r125 = new java.util.NoSuchElementException;

        specialinvoke $r125.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        $r126 = (java.lang.Throwable) $r125;

        throw $r126;

     label07:
        $r18 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r19 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r19);

        $r149 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getFunctions(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r19);

        $r150 = null;

        z12 = 0;

        r151 = interfaceinvoke $r149.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        r152 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>();

        $r153 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r152;

        $r120 = interfaceinvoke $r153.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r121 = interfaceinvoke $r120.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r122 = virtualinvoke $r121.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r122, "iterator");

        if $z8 == 0 goto label10;

        if z12 == 0 goto label09;

        $r123 = new java.lang.IllegalArgumentException;

        specialinvoke $r123.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        $r124 = (java.lang.Throwable) $r123;

        throw $r124;

     label09:
        $r150 = r152;

        z12 = 1;

     label10:
        goto label08;

     label11:
        if z12 != 0 goto label12;

        $r118 = new java.util.NoSuchElementException;

        specialinvoke $r118.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        $r119 = (java.lang.Throwable) $r118;

        throw $r119;

     label12:
        $r154 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r150;

        $r20 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r154;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r20);

        $z1 = $r154 instanceof org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol;

        if $z1 == 0 goto label13;

        $r109 = new java.lang.AssertionError;

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should be IrConstructorCall: ");

        $r112 = (org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol) $r154;

        $r113 = interfaceinvoke $r112.<org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r114 = (org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor) $r113;

        $r115 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r114);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r109.<java.lang.AssertionError: void <init>(java.lang.Object)>($r116);

        $r117 = (java.lang.Throwable) $r109;

        throw $r117;

     label13:
        $r21 = interfaceinvoke $r154.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r22 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) $r21;

        staticinvoke <org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt: int getTypeParametersCount(org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r22);

        $r23 = interfaceinvoke $r154.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r24 = interfaceinvoke $r23.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getValueParameters()>();

        interfaceinvoke $r24.<java.util.List: int size()>();

        $r25 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r26 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r25;

        $r27 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.types.IrSimpleType getDefaultType(org.jetbrains.kotlin.ir.declarations.IrClass)>($r26);

        $r28 = (org.jetbrains.kotlin.ir.types.IrType) $r27;

        $r29 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r28);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r29);

        $r155 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getFunctions(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r29);

        z13 = 0;

        r156 = interfaceinvoke $r155.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label14:
        $z2 = interfaceinvoke r156.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        r157 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        $r158 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r157;

        $r104 = interfaceinvoke $r158.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r105 = interfaceinvoke $r104.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r106 = virtualinvoke $r105.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r106, "next");

        if $z7 == 0 goto label16;

        if z13 == 0 goto label15;

        $r107 = new java.lang.IllegalArgumentException;

        specialinvoke $r107.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        $r108 = (java.lang.Throwable) $r107;

        throw $r108;

     label15:
        z13 = 1;

     label16:
        goto label14;

     label17:
        if z13 != 0 goto label18;

        $r102 = new java.util.NoSuchElementException;

        specialinvoke $r102.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        $r103 = (java.lang.Throwable) $r102;

        throw $r103;

     label18:
        $r30 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r31 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r30;

        $r32 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.types.IrSimpleType getDefaultType(org.jetbrains.kotlin.ir.declarations.IrClass)>($r31);

        $r33 = (org.jetbrains.kotlin.ir.types.IrType) $r32;

        $r34 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r33);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r34);

        r159 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getFunctions(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r34);

        r160 = null;

        z14 = 0;

        r161 = interfaceinvoke r159.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label19:
        $z3 = interfaceinvoke r161.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label22;

        $r162 = interfaceinvoke r161.<java.util.Iterator: java.lang.Object next()>();

        $r163 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r162;

        $r97 = interfaceinvoke $r163.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r98 = interfaceinvoke $r97.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r99 = virtualinvoke $r98.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r99, "next");

        if $z6 == 0 goto label21;

        if z14 == 0 goto label20;

        $r100 = new java.lang.IllegalArgumentException;

        specialinvoke $r100.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        $r101 = (java.lang.Throwable) $r100;

        throw $r101;

     label20:
        r160 = $r162;

        z14 = 1;

     label21:
        goto label19;

     label22:
        if z14 != 0 goto label23;

        $r95 = new java.util.NoSuchElementException;

        specialinvoke $r95.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        $r96 = (java.lang.Throwable) $r95;

        throw $r96;

     label23:
        $r164 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r160;

        $r35 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r36 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r35;

        $r37 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.types.IrSimpleType getDefaultType(org.jetbrains.kotlin.ir.declarations.IrClass)>($r36);

        $r38 = (org.jetbrains.kotlin.ir.types.IrType) $r37;

        $r39 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r38);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r39);

        $r165 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getFunctions(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r39);

        r166 = null;

        z15 = 0;

        $r167 = interfaceinvoke $r165.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label24:
        $z4 = interfaceinvoke $r167.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r168 = interfaceinvoke $r167.<java.util.Iterator: java.lang.Object next()>();

        $r169 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r168;

        $r90 = interfaceinvoke $r169.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r91 = interfaceinvoke $r90.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r92 = virtualinvoke $r91.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r92, "hasNext");

        if $z5 == 0 goto label26;

        if z15 == 0 goto label25;

        $r93 = new java.lang.IllegalArgumentException;

        specialinvoke $r93.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        $r94 = (java.lang.Throwable) $r93;

        throw $r94;

     label25:
        r166 = $r168;

        z15 = 1;

     label26:
        goto label24;

     label27:
        if z15 != 0 goto label28;

        $r88 = new java.util.NoSuchElementException;

        specialinvoke $r88.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        $r89 = (java.lang.Throwable) $r88;

        throw $r89;

     label28:
        r170 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r166;

        $r40 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r154;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r40);

        interfaceinvoke $r154.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r41 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        $r43 = (org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol) r6;

        $r42 = newarray (org.jetbrains.kotlin.ir.types.IrType)[1];

        $r42[0] = r2;

        $r44 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrSimpleType typeWith(org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol,org.jetbrains.kotlin.ir.types.IrType[])>($r43, $r42);

        $r48 = (org.jetbrains.kotlin.ir.types.IrType) $r44;

        $r47 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r154;

        $r45 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR INSTANCE>;

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r45;

        specialinvoke $r41.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r48, $r47, $r46, null, 32, null);

        r172 = $r41;

        virtualinvoke r172.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r3);

        $r50 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r41;

        $r49 = (org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol) r6;

        $r51 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType getDefaultType(org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol)>($r49);

        $r52 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR INSTANCE>;

        r173 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r52;

        r174 = $r51;

        r175 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin)>(r1, $r50, "tmp0_iterator", r174, 0, r173);

        $r53 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP INSTANCE>;

        $r54 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r55 = (org.jetbrains.kotlin.ir.IrStatement) r175;

        $r54[0] = $r55;

        $r56 = new org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl;

        $r57 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE INSTANCE>;

        $r58 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r57;

        specialinvoke $r56.<org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(-1, -1, r142, $r58);

        r176 = $r56;

        r7 = $r54;

        r8 = $r54;

        r9 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r53;

        r10 = r142;

        r11 = r0;

        $r61 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r164;

        $r59 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_NEXT: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_NEXT INSTANCE>;

        $r62 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r59;

        $r60 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r175;

        $r63 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r60);

        $r64 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[0];

        $r65 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[],int,java.lang.Object)>(r0, $r61, $r62, $r63, null, $r64, 8, null);

        $r67 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r65;

        $r66 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_VARIABLE: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_VARIABLE INSTANCE>;

        r12 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r66;

        r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin)>(r1, $r67, "value", r2, 0, r12);

        $r70 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) r170;

        $r68 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_HAS_NEXT: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_HAS_NEXT INSTANCE>;

        $r71 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r68;

        $r69 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r175;

        $r72 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r69);

        $r73 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[0];

        $r74 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[],int,java.lang.Object)>(r0, $r70, $r71, $r72, null, $r73, 8, null);

        $r75 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r74;

        virtualinvoke r176.<org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl: void setCondition(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r75);

        $r76 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE INSTANCE>;

        $r79 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r76;

        $r77 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r78 = (org.jetbrains.kotlin.ir.IrStatement) r13;

        $r77[0] = $r78;

        $r80 = interfaceinvoke r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r13);

        $r81 = (org.jetbrains.kotlin.ir.IrStatement) $r80;

        $r77[1] = $r81;

        $r82 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r77);

        $r83 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r142, $r79, $r82);

        virtualinvoke r176.<org.jetbrains.kotlin.ir.expressions.impl.IrWhileLoopImpl: void setBody(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r83);

        r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r84 = (org.jetbrains.kotlin.ir.IrStatement) r176;

        r7[1] = $r84;

        $r85 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r8);

        $r86 = virtualinvoke r11.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r10, r9, $r85);

        $r87 = (org.jetbrains.kotlin.ir.IrStatement) $r86;

        return $r87;
    }

    protected final org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.descriptors.DeclarationDescriptor, org.jetbrains.kotlin.ir.expressions.IrExpression, java.lang.String, org.jetbrains.kotlin.ir.types.IrType, boolean, org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2;
        java.lang.String r3;
        org.jetbrains.kotlin.ir.types.IrType r4;
        boolean z0;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin r5;
        org.jetbrains.kotlin.ir.descriptors.IrTemporaryVariableDescriptorImpl r6, $r7;
        org.jetbrains.kotlin.name.Name $r8;
        org.jetbrains.kotlin.types.KotlinType $r9;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r10;
        int $i0, $i1;
        org.jetbrains.kotlin.descriptors.VariableDescriptor $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.jetbrains.kotlin.ir.types.IrType;

        z0 := @parameter4: boolean;

        r5 := @parameter5: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "containingDeclaration");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "irType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "origin");

        $r7 = new org.jetbrains.kotlin.ir.descriptors.IrTemporaryVariableDescriptorImpl;

        $r8 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "Name.identifier(name)");

        $r9 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>(r4);

        specialinvoke $r7.<org.jetbrains.kotlin.ir.descriptors.IrTemporaryVariableDescriptorImpl: void <init>(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,boolean)>(r1, $r8, $r9, z0);

        r6 = $r7;

        $r10 = new org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl;

        $i0 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: int getStartOffset()>();

        $i1 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: int getEndOffset()>();

        $r11 = (org.jetbrains.kotlin.descriptors.VariableDescriptor) r6;

        specialinvoke $r10.<org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.descriptors.VariableDescriptor,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i0, $i1, r5, $r11, r4, r2);

        return $r10;
    }

    public static org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.descriptors.DeclarationDescriptor, org.jetbrains.kotlin.ir.expressions.IrExpression, java.lang.String, org.jetbrains.kotlin.ir.types.IrType, boolean, org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2;
        java.lang.String r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object r4;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r5;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_TEMPORARY_VARIABLE $r6;
        java.lang.UnsupportedOperationException $r7;
        org.jetbrains.kotlin.ir.types.IrType r8;
        boolean z0;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin r9;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter1: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        r2 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter3: java.lang.String;

        r8 := @parameter4: org.jetbrains.kotlin.ir.types.IrType;

        z0 := @parameter5: boolean;

        r9 := @parameter6: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin;

        i0 := @parameter7: int;

        r4 := @parameter8: java.lang.Object;

        if r4 == null goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irTemporary");

        throw $r7;

     label1:
        $i1 = i0 & 8;

        if $i1 == 0 goto label2;

        r8 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

     label2:
        $i2 = i0 & 16;

        if $i2 == 0 goto label3;

        z0 = 0;

     label3:
        $i3 = i0 & 32;

        if $i3 == 0 goto label4;

        $r6 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_TEMPORARY_VARIABLE: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_TEMPORARY_VARIABLE INSTANCE>;

        r9 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r6;

     label4:
        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin)>(r1, r2, r3, r8, z0, r9);

        return $r5;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.symbols.IrValueSymbol)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl $r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter1: org.jetbrains.kotlin.ir.symbols.IrValueSymbol;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbol");

        $r3 = new org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl;

        specialinvoke $r3.<org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrValueSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, r1, r2, null, 16, null);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r1;
        org.jetbrains.kotlin.ir.types.IrType $r2;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "variable");

        $r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueDeclaration: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueDeclaration: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrValueSymbol)>($r2, $r3);

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, $r13;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl r3, r4, $r5;
        boolean z0, z1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r6;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r7;
        org.jetbrains.kotlin.ir.types.IrType $r8;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF $r9;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r10;
        java.util.List $r11;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "condition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "body");

        $r5 = new org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r8 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r9 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF INSTANCE>;

        $r10 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r9;

        specialinvoke $r5.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(-1, -1, $r8, $r10);

        r3 = $r5;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r11 = virtualinvoke r4.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: java.util.List getBranches()>();

        $r12 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        specialinvoke $r12.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, r2);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r3;

        return $r13;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, r3, r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl r5, $r7;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF $r8;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r9;
        java.util.List $r10, $r12;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r11;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "condition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "thenPart");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "elsePart");

        $r7 = new org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl;

        $r8 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF INSTANCE>;

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r8;

        specialinvoke $r7.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(-1, -1, r1, $r9);

        r5 = $r7;

        z0 = 0;

        z1 = 0;

        $r10 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: java.util.List getBranches()>();

        $r11 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        $i0 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: int getStartOffset()>();

        $i1 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: int getEndOffset()>();

        specialinvoke $r11.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i0, $i1, r2, r3);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl: java.util.List getBranches()>();

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl irElseBranch(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r4);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        return r5;
    }

    public static org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2, r3;
        int i0, $i1;
        java.lang.Object r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r5;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r6;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r7;
        java.lang.UnsupportedOperationException $r8;
        org.jetbrains.kotlin.ir.types.IrType r9;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r9 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r1 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter4: org.jetbrains.kotlin.ir.expressions.IrExpression;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

        if r4 == null goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irIfThenElse");

        throw $r8;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r9 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

     label2:
        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r9, r1, r2, r3);

        return $r5;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl irWhen(org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r2;
        java.util.List r3;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "branches");

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl;

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, r1, r2, r3);

        return $r4;
    }

    public static org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl irWhen$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.util.List r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl $r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r5;
        java.lang.UnsupportedOperationException $r6;
        org.jetbrains.kotlin.ir.types.IrType r7;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r8;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r7 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r8 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r1 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irWhen");

        throw $r6;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r7 = virtualinvoke $r5.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        r8 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) null;

     label3:
        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl irWhen(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r7, r8, r1);

        return $r3;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrBranch irBranch(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r3;
        org.jetbrains.kotlin.ir.expressions.IrBranch $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "condition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "result");

        $r3 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        specialinvoke $r3.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, r2);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrBranch) $r3;

        return $r4;
    }

    protected final org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl irElseBranch(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl $r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r2 = new org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(1);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        specialinvoke $r2.<org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, $r4, r1);

        return $r2;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r2;
        java.util.List r3;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "statements");

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl;

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, r1, r2, r3);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    public static org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.util.List r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r5;
        java.lang.UnsupportedOperationException $r6;
        org.jetbrains.kotlin.ir.types.IrType r7;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r8;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r7 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r8 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r1 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irBlock");

        throw $r6;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r7 = virtualinvoke $r5.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        r8 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) null;

     label3:
        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r7, r8, r1);

        return $r3;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irComposite(org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r2;
        java.util.List r3;
        org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "statements");

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl;

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, r1, r2, r3);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    public static org.jetbrains.kotlin.ir.expressions.IrExpression irComposite$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrStatementOrigin, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        java.util.List r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r5;
        java.lang.UnsupportedOperationException $r6;
        org.jetbrains.kotlin.ir.types.IrType r7;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r8;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r7 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r8 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin;

        r1 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: irComposite");

        throw $r6;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r7 = virtualinvoke $r5.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        r8 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) null;

     label3:
        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irComposite(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r7, r8, r1);

        return $r3;
    }

    protected final org.jetbrains.kotlin.ir.expressions.IrExpression irLambda(org.jetbrains.kotlin.ir.declarations.IrFunction, org.jetbrains.kotlin.ir.types.IrType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        org.jetbrains.kotlin.ir.types.IrType r2;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA $r3, $r10;
        org.jetbrains.kotlin.ir.IrStatement[] $r4;
        org.jetbrains.kotlin.ir.IrStatement $r5, $r12;
        org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl $r6;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r7, $r11;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r8;
        java.util.List $r9, $r13;
        int $i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "type");

        $r3 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA INSTANCE>;

        $r7 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r3;

        $r4 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r5 = (org.jetbrains.kotlin.ir.IrStatement) r1;

        $r4[0] = $r5;

        $r6 = new org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r9 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getTypeParameters()>();

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LAMBDA INSTANCE>;

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r10;

        specialinvoke $r6.<org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,int,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(-1, -1, r2, $r8, $i0, null, $r11);

        $r12 = (org.jetbrains.kotlin.ir.IrStatement) $r6;

        $r4[1] = $r12;

        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r4);

        $r14 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(r2, $r7, $r13);

        return $r14;
    }

    public final org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        return $r1;
    }

    public final org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper getSymbolRemapper()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        return $r1;
    }

    public final org.jetbrains.kotlin.resolve.BindingTrace getBindingTrace()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0;
        org.jetbrains.kotlin.resolve.BindingTrace $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.resolve.BindingTrace bindingTrace>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.resolve.BindingTrace)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r0, r5;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1, $r8, $r10, $r12, $r15, $r17, $r20, $r22;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.resolve.BindingTrace r3;
        boolean z0, z2, z3;
        kotlin.Unit r6;
        org.jetbrains.kotlin.ir.util.TypeTranslator $r7, r31;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r9, $r18;
        org.jetbrains.kotlin.config.LanguageVersionSettings $r11;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r13;
        org.jetbrains.kotlin.ir.util.ConstantValueGenerator $r14, $r19;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r16, $r23;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r21;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r24;
        org.jetbrains.kotlin.name.FqName $r25;
        org.jetbrains.kotlin.name.ClassId $r26;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r27;
        java.lang.IllegalStateException $r28;
        java.lang.String $r29, r32;
        java.lang.Throwable $r30;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.BindingTrace;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbolRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bindingTrace");

        specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.resolve.BindingTrace bindingTrace> = r3;

        $r7 = new org.jetbrains.kotlin.ir.util.TypeTranslator;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.config.LanguageVersionSettings getLanguageVersionSettings()>();

        $r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        specialinvoke $r7.<org.jetbrains.kotlin.ir.util.TypeTranslator: void <init>(org.jetbrains.kotlin.ir.util.ReferenceSymbolTable,org.jetbrains.kotlin.config.LanguageVersionSettings,org.jetbrains.kotlin.builtins.KotlinBuiltIns,org.jetbrains.kotlin.ir.util.TypeParametersResolver,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r9, $r11, $r13, null, 0, 24, null);

        r31 = $r7;

        z2 = 0;

        z0 = 0;

        r5 = r0;

        $r14 = new org.jetbrains.kotlin.ir.util.ConstantValueGenerator;

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r16 = interfaceinvoke $r15.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r17 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r18 = interfaceinvoke $r17.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        specialinvoke $r14.<org.jetbrains.kotlin.ir.util.ConstantValueGenerator: void <init>(org.jetbrains.kotlin.descriptors.ModuleDescriptor,org.jetbrains.kotlin.ir.util.ReferenceSymbolTable)>($r16, $r18);

        virtualinvoke r31.<org.jetbrains.kotlin.ir.util.TypeTranslator: void setConstantValueGenerator(org.jetbrains.kotlin.ir.util.ConstantValueGenerator)>($r14);

        $r19 = virtualinvoke r31.<org.jetbrains.kotlin.ir.util.TypeTranslator: org.jetbrains.kotlin.ir.util.ConstantValueGenerator getConstantValueGenerator()>();

        virtualinvoke $r19.<org.jetbrains.kotlin.ir.util.ConstantValueGenerator: void setTypeTranslator(org.jetbrains.kotlin.ir.util.TypeTranslator)>(r31);

        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r5.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator> = r31;

        $r20 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns builtIns> = $r21;

        $r22 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r23 = interfaceinvoke $r22.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r24 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r25 = virtualinvoke $r24.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposer()>();

        $r26 = staticinvoke <org.jetbrains.kotlin.name.ClassId: org.jetbrains.kotlin.name.ClassId topLevel(org.jetbrains.kotlin.name.FqName)>($r25);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r26, "ClassId.topLevel(ComposeFqNames.Composer)");

        $r27 = staticinvoke <org.jetbrains.kotlin.descriptors.FindClassInModuleKt: org.jetbrains.kotlin.descriptors.ClassDescriptor findClassAcrossModuleDependencies(org.jetbrains.kotlin.descriptors.ModuleDescriptor,org.jetbrains.kotlin.name.ClassId)>($r23, $r26);

        if $r27 == null goto label1;

        goto label2;

     label1:
        r32 = "Cannot find the Composer class";

        z3 = 0;

        $r28 = new java.lang.IllegalStateException;

        $r29 = virtualinvoke r32.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        $r30 = (java.lang.Throwable) $r28;

        throw $r30;

     label2:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.descriptors.ClassDescriptor composerTypeDescriptor> = $r27;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering this$0>
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.descriptors.ParameterDescriptor $r2;
        org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.descriptors.ParameterDescriptor) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl invoke(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r2);

        return $r3;
    }

    public final org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl invoke(org.jetbrains.kotlin.descriptors.ParameterDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1 r0;
        org.jetbrains.kotlin.descriptors.ParameterDescriptor $r1, $r16;
        org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl r2, r3, $r9;
        boolean z0, z1, $z3;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource $r4, $r6;
        java.lang.Integer $r5, $r7;
        org.jetbrains.kotlin.ir.types.IrType $r8, $r15, $r23;
        int $i0, $i1, $i7, $i13;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED $r10;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r11;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering $r13, $r19;
        org.jetbrains.kotlin.types.KotlinType $r14, $r18;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r17;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r24;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r25;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1;

        $r1 := @parameter0: org.jetbrains.kotlin.descriptors.ParameterDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$irValueParameter");

        $r9 = new org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl;

        $r4 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource) $r1;

        $r5 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.lang.Integer getStartOffset(org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource)>($r4);

        if $r5 == null goto label1;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i7 = $i1;

        goto label2;

     label1:
        $i7 = -1;

     label2:
        $r6 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource) $r1;

        $r7 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.lang.Integer getEndOffset(org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource)>($r6);

        if $r7 == null goto label3;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i13 = $i0;

        goto label4;

     label3:
        $i13 = -1;

     label4:
        $r10 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED INSTANCE>;

        $r11 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r10;

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering this$0>;

        $r14 = interfaceinvoke $r1.<org.jetbrains.kotlin.descriptors.ParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "type");

        $r15 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r14);

        $r16 = $r1;

        $z3 = $r1 instanceof org.jetbrains.kotlin.descriptors.ValueParameterDescriptor;

        if $z3 != 0 goto label5;

        $r16 = null;

     label5:
        $r17 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r16;

        if $r17 == null goto label6;

        $r18 = interfaceinvoke $r17.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getVarargElementType()>();

        if $r18 == null goto label6;

        $r19 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering this$0>;

        $r8 = virtualinvoke $r19.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r18);

        $r23 = $r8;

        goto label7;

     label6:
        $r23 = null;

     label7:
        specialinvoke $r9.<org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.descriptors.ParameterDescriptor,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i7, $i13, $r11, $r1, $r15, $r23, null, null, 192, null);

        r2 = $r9;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r24 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations>;

        $r25 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r24;

        virtualinvoke r3.<org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r25);

        return r2;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering, org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering r1;
        org.jetbrains.kotlin.ir.declarations.IrFunction r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering;

        r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$1: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations> = r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.descriptors.TypeParameterDescriptor $r2;
        org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.descriptors.TypeParameterDescriptor) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl invoke(org.jetbrains.kotlin.descriptors.TypeParameterDescriptor)>($r2);

        return $r3;
    }

    public final org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl invoke(org.jetbrains.kotlin.descriptors.TypeParameterDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2 r0;
        org.jetbrains.kotlin.descriptors.TypeParameterDescriptor $r1;
        org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl r2, r3, $r8;
        boolean z0, z1, $z3;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource $r4, $r6;
        java.lang.Integer $r5, $r7;
        int $i0, $i2, $i3, $i4;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED $r9;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r10;
        org.jetbrains.kotlin.ir.symbols.impl.IrTypeParameterSymbolImpl $r11;
        org.jetbrains.kotlin.ir.symbols.IrTypeParameterSymbol $r12;
        org.jetbrains.kotlin.name.Name $r13;
        org.jetbrains.kotlin.types.Variance $r14;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r15;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2;

        $r1 := @parameter0: org.jetbrains.kotlin.descriptors.TypeParameterDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$irTypeParameter");

        $r8 = new org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl;

        $r4 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource) $r1;

        $r5 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.lang.Integer getStartOffset(org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource)>($r4);

        if $r5 == null goto label1;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i2 = $i0;

        goto label2;

     label1:
        $i2 = -1;

     label2:
        $r6 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource) $r1;

        $r7 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.lang.Integer getEndOffset(org.jetbrains.kotlin.descriptors.DeclarationDescriptorWithSource)>($r6);

        if $r7 == null goto label3;

        $i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        goto label4;

     label3:
        $i3 = -1;

     label4:
        $r9 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFINED INSTANCE>;

        $r10 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r9;

        $r11 = new org.jetbrains.kotlin.ir.symbols.impl.IrTypeParameterSymbolImpl;

        specialinvoke $r11.<org.jetbrains.kotlin.ir.symbols.impl.IrTypeParameterSymbolImpl: void <init>(org.jetbrains.kotlin.descriptors.TypeParameterDescriptor)>($r1);

        $r12 = (org.jetbrains.kotlin.ir.symbols.IrTypeParameterSymbol) $r11;

        $r13 = interfaceinvoke $r1.<org.jetbrains.kotlin.descriptors.TypeParameterDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "this.name");

        $i4 = interfaceinvoke $r1.<org.jetbrains.kotlin.descriptors.TypeParameterDescriptor: int getIndex()>();

        $z3 = interfaceinvoke $r1.<org.jetbrains.kotlin.descriptors.TypeParameterDescriptor: boolean isReified()>();

        $r14 = interfaceinvoke $r1.<org.jetbrains.kotlin.descriptors.TypeParameterDescriptor: org.jetbrains.kotlin.types.Variance getVariance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "this.variance");

        specialinvoke $r8.<org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.ir.symbols.IrTypeParameterSymbol,org.jetbrains.kotlin.name.Name,int,boolean,org.jetbrains.kotlin.types.Variance)>($i2, $i3, $r10, $r12, $r13, $i4, $z3, $r14);

        r2 = $r8;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations>;

        $r16 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r15;

        virtualinvoke r3.<org.jetbrains.kotlin.ir.declarations.impl.IrTypeParameterImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r16);

        return r2;
    }

    void <init>(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2 r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$createParameterDeclarations$2: org.jetbrains.kotlin.ir.declarations.IrFunction $this_createParameterDeclarations> = r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 INSTANCE>
    public volatile java.lang.Iterable getNeighbors(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r2;
        java.lang.Iterable $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1: java.lang.Iterable getNeighbors(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r2);

        return $r3;
    }

    public final java.lang.Iterable getNeighbors(org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r1, r8, r9;
        java.util.Collection r2, r6;
        java.util.Iterator r3;
        java.lang.Object r4, r7;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r5;
        boolean z3, z4, $z6, $z7;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r10, $r16;
        java.util.List $r11, $r12, $r14, $r17;
        java.util.ArrayList $r13;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r15, $r18;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r19, $r20;
        java.lang.Iterable $r21, $r22;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        $r20 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        $z6 = $r20 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z6 != 0 goto label1;

        $r20 = null;

     label1:
        $r10 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r20;

        if $r10 == null goto label4;

        $r12 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getOverriddenSymbols()>();

        if $r12 == null goto label4;

        $r21 = (java.lang.Iterable) $r12;

        $r13 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r21, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = (java.util.Collection) $r13;

        r3 = interfaceinvoke $r21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r4;

        r6 = r2;

        $r15 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r16 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r15;

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getValueParameters()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: int getIndex()>();

        r7 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i1);

        z3 = 0;

        z4 = 0;

        r8 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r7;

        $r18 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r19 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r18;

        interfaceinvoke r8.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r19);

        r9 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r7;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>(r9);

        goto label2;

     label3:
        $r14 = (java.util.List) r2;

        $r22 = (java.lang.Iterable) $r14;

        goto label5;

     label4:
        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r22 = (java.lang.Iterable) $r11;

     label5:
        return $r22;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2
<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 INSTANCE>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2: java.lang.Boolean invoke(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r2);

        return $r3;
    }

    public final java.lang.Boolean invoke(org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r1;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        $r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2: androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering$hasDefaultValueSafe$2 INSTANCE> = $r0;

        return;
    }

