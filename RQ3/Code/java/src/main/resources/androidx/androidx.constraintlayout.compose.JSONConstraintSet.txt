androidx.constraintlayout.compose.JSONConstraintSet
<androidx.constraintlayout.compose.JSONConstraintSet: androidx.constraintlayout.compose.ConstraintSet extendFrom>
<androidx.constraintlayout.compose.JSONConstraintSet: java.util.HashMap overridedVariables>
<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String overrideVariables>
<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty>
    public void <init>(java.lang.String, java.lang.String, androidx.constraintlayout.compose.ConstraintSet)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.lang.String r1, r2;
        androidx.constraintlayout.compose.ConstraintSet r3;
        java.util.HashMap $r4;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.constraintlayout.compose.ConstraintSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "content");

        specialinvoke r0.<androidx.constraintlayout.compose.EditableJSONLayout: void <init>(java.lang.String)>(r1);

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: androidx.constraintlayout.compose.ConstraintSet extendFrom> = r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.util.HashMap overridedVariables> = $r4;

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String overrideVariables> = r2;

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty> = 1;

        virtualinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: void initialization()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.String, androidx.constraintlayout.compose.ConstraintSet, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.lang.String r1, r3;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        androidx.constraintlayout.compose.ConstraintSet r4;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: androidx.constraintlayout.compose.ConstraintSet;

        i0 := @parameter3: int;

        r2 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        r4 = null;

     label2:
        specialinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: void <init>(java.lang.String,java.lang.String,androidx.constraintlayout.compose.ConstraintSet)>(r1, r3, r4);

        return;
    }

    public androidx.constraintlayout.compose.ConstraintSet getExtendFrom()
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        androidx.constraintlayout.compose.ConstraintSet $r1;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        $r1 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: androidx.constraintlayout.compose.ConstraintSet extendFrom>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.constraintlayout.compose.JSONConstraintSet;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String getCurrentContent()>();

        $r3 = (androidx.constraintlayout.compose.JSONConstraintSet) r1;

        $r4 = virtualinvoke $r3.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String getCurrentContent()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $z1;

     label1:
        return 0;
    }

    public boolean isDirty(java.util.List)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.util.List r1;
        boolean $z0;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "measurables");

        $z0 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty>;

        return $z0;
    }

    public void applyTo(androidx.constraintlayout.core.state.Transition, int)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        androidx.constraintlayout.core.state.Transition r1;
        int i0;
        androidx.constraintlayout.compose.LayoutVariables r2, $r3;
        java.lang.String $r4;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: androidx.constraintlayout.core.state.Transition;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transition");

        $r3 = new androidx.constraintlayout.compose.LayoutVariables;

        specialinvoke $r3.<androidx.constraintlayout.compose.LayoutVariables: void <init>()>();

        r2 = $r3;

        specialinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: void applyLayoutVariables(androidx.constraintlayout.compose.LayoutVariables)>(r2);

        $r4 = virtualinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String getCurrentContent()>();

        staticinvoke <androidx.constraintlayout.compose.ConstraintSetParserKt: void parseJSON(java.lang.String,androidx.constraintlayout.core.state.Transition,int)>($r4, r1, i0);

        return;
    }

    public final void emitDesignElements(java.util.ArrayList)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r4;
        java.lang.String $r3;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "designElements");

     label1:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r3 = virtualinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String getCurrentContent()>();

        staticinvoke <androidx.constraintlayout.compose.ConstraintSetParserKt: void parseDesignElementsJSON(java.lang.String,java.util.ArrayList)>($r3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void applyToState(androidx.constraintlayout.compose.State)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        androidx.constraintlayout.compose.State r1;
        androidx.constraintlayout.compose.LayoutVariables r2, $r4;
        java.lang.Throwable r3, $r6;
        java.lang.String $r5;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: androidx.constraintlayout.compose.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r4 = new androidx.constraintlayout.compose.LayoutVariables;

        specialinvoke $r4.<androidx.constraintlayout.compose.LayoutVariables: void <init>()>();

        r2 = $r4;

        specialinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: void applyLayoutVariables(androidx.constraintlayout.compose.LayoutVariables)>(r2);

     label1:
        $r5 = virtualinvoke r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String getCurrentContent()>();

        staticinvoke <androidx.constraintlayout.compose.ConstraintSetParserKt: void parseJSON(java.lang.String,androidx.constraintlayout.compose.State,androidx.constraintlayout.compose.LayoutVariables)>($r5, r1, r2);

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty> = 0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty> = 1;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void onNewContent(java.lang.String)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.lang.String r1;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "content");

        specialinvoke r0.<androidx.constraintlayout.compose.EditableJSONLayout: void onNewContent(java.lang.String)>(r1);

        r0.<androidx.constraintlayout.compose.JSONConstraintSet: boolean _isDirty> = 1;

        return;
    }

    public androidx.constraintlayout.compose.ConstraintSet override(java.lang.String, float)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        java.lang.String r1;
        float f0;
        java.util.Map r2;
        java.lang.Float r3;
        boolean z0;
        java.util.HashMap $r4;
        androidx.constraintlayout.compose.ConstraintSet $r6;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r4 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.util.HashMap overridedVariables>;

        r2 = (java.util.Map) $r4;

        r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        z0 = 0;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r6 = (androidx.constraintlayout.compose.ConstraintSet) r0;

        return $r6;
    }

    private final void applyLayoutVariables(androidx.constraintlayout.compose.LayoutVariables)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        androidx.constraintlayout.compose.LayoutVariables r1;
        androidx.constraintlayout.core.parser.CLKey r2;
        java.lang.String r3, $r4, $r9, $r14, r21;
        java.lang.Object $r5, $r7;
        java.util.HashMap $r6, $r18;
        java.lang.Number $r8;
        float $f0, f1;
        androidx.constraintlayout.core.parser.CLElement $r10, r16;
        java.lang.NullPointerException $r11;
        java.lang.Throwable $r12, r17;
        java.io.PrintStream $r13;
        androidx.constraintlayout.core.parser.CLObject r15;
        int i0, i1, i2;
        java.util.Set $r19;
        java.util.Iterator r20;
        boolean $z0;
        java.lang.Float r22, r23;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: androidx.constraintlayout.compose.LayoutVariables;

        $r4 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String overrideVariables>;

        if $r4 == null goto label6;

     label1:
        $r9 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.lang.String overrideVariables>;

        r15 = staticinvoke <androidx.constraintlayout.core.parser.CLParser: androidx.constraintlayout.core.parser.CLObject parse(java.lang.String)>($r9);

        i0 = 0;

        i1 = virtualinvoke r15.<androidx.constraintlayout.core.parser.CLObject: int size()>();

        if i0 >= i1 goto label6;

     label2:
        i2 = i0;

        i0 = i0 + 1;

        r16 = virtualinvoke r15.<androidx.constraintlayout.core.parser.CLObject: androidx.constraintlayout.core.parser.CLElement get(int)>(i2);

        if r16 != null goto label3;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.constraintlayout.core.parser.CLKey");

        throw $r11;

     label3:
        r2 = (androidx.constraintlayout.core.parser.CLKey) r16;

        $r10 = virtualinvoke r2.<androidx.constraintlayout.core.parser.CLKey: androidx.constraintlayout.core.parser.CLElement getValue()>();

        f1 = virtualinvoke $r10.<androidx.constraintlayout.core.parser.CLElement: float getFloat()>();

        r3 = virtualinvoke r2.<androidx.constraintlayout.core.parser.CLKey: java.lang.String content()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "key.content()");

        virtualinvoke r1.<androidx.constraintlayout.compose.LayoutVariables: void putOverride(java.lang.String,float)>(r3, f1);

        if i0 < i1 goto label2;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        r17 = $r12;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r14 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("exception: ", r17);

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label6:
        $r18 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.util.HashMap overridedVariables>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.util.Set keySet()>();

        r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r21, "name");

        $r6 = r0.<androidx.constraintlayout.compose.JSONConstraintSet: java.util.HashMap overridedVariables>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (java.lang.Float) $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r22);

        r23 = r22;

        $r8 = (java.lang.Number) r23;

        $f0 = virtualinvoke $r8.<java.lang.Number: float floatValue()>();

        virtualinvoke r1.<androidx.constraintlayout.compose.LayoutVariables: void putOverride(java.lang.String,float)>(r21, $f0);

        goto label7;

     label8:
        return;

        catch androidx.constraintlayout.core.parser.CLParsingException from label1 to label4 with label5;
    }

    public void applyTo(androidx.constraintlayout.compose.State, java.util.List)
    {
        androidx.constraintlayout.compose.JSONConstraintSet r0;
        androidx.constraintlayout.compose.State r1;
        java.util.List r2;

        r0 := @this: androidx.constraintlayout.compose.JSONConstraintSet;

        r1 := @parameter0: androidx.constraintlayout.compose.State;

        r2 := @parameter1: java.util.List;

        staticinvoke <androidx.constraintlayout.compose.DerivedConstraintSet$DefaultImpls: void applyTo(androidx.constraintlayout.compose.DerivedConstraintSet,androidx.constraintlayout.compose.State,java.util.List)>(r0, r1, r2);

        return;
    }

