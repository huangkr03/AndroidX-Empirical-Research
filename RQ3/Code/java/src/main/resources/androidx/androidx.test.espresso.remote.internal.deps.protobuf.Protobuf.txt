androidx.test.espresso.remote.internal.deps.protobuf.Protobuf
<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf INSTANCE>
<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.SchemaFactory schemaFactory>
<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>
    public static androidx.test.espresso.remote.internal.deps.protobuf.Protobuf getInstance()
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf $r0;

        $r0 = <androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf INSTANCE>;

        return $r0;
    }

    public androidx.test.espresso.remote.internal.deps.protobuf.Schema registerSchema(java.lang.Class, androidx.test.espresso.remote.internal.deps.protobuf.Schema)
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r0;
        java.lang.Class r1;
        androidx.test.espresso.remote.internal.deps.protobuf.Schema r2, $r7;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: androidx.test.espresso.remote.internal.deps.protobuf.Schema;

        staticinvoke <androidx.test.espresso.remote.internal.deps.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "messageType");

        staticinvoke <androidx.test.espresso.remote.internal.deps.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "schema");

        $r5 = r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        $r7 = (androidx.test.espresso.remote.internal.deps.protobuf.Schema) $r6;

        return $r7;
    }

    public androidx.test.espresso.remote.internal.deps.protobuf.Schema schemaFor(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object $r3;
        androidx.test.espresso.remote.internal.deps.protobuf.SchemaFactory $r4;
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r5;
        androidx.test.espresso.remote.internal.deps.protobuf.Schema r6, r7, r8, r9;

        r5 := @this: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <androidx.test.espresso.remote.internal.deps.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "messageType");

        $r2 = r5.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (androidx.test.espresso.remote.internal.deps.protobuf.Schema) $r3;

        if r6 != null goto label3;

        $r4 = r5.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.SchemaFactory schemaFactory>;

        r7 = interfaceinvoke $r4.<androidx.test.espresso.remote.internal.deps.protobuf.SchemaFactory: androidx.test.espresso.remote.internal.deps.protobuf.Schema createSchema(java.lang.Class)>(r0);

        r8 = virtualinvoke r5.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Schema registerSchema(java.lang.Class,androidx.test.espresso.remote.internal.deps.protobuf.Schema)>(r0, r7);

        if r8 != null goto label2;

        r9 = r7;

     label1:
        return r9;

     label2:
        return r8;

     label3:
        r9 = r6;

        goto label1;
    }

    public androidx.test.espresso.remote.internal.deps.protobuf.Schema schemaFor(java.lang.Object)
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        androidx.test.espresso.remote.internal.deps.protobuf.Schema $r3;

        r0 := @this: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Schema schemaFor(java.lang.Class)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r0;

        r0 = new androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        specialinvoke r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: void <init>()>();

        <androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf INSTANCE> = r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r0;
        java.util.concurrent.ConcurrentHashMap r1, r3;
        androidx.test.espresso.remote.internal.deps.protobuf.ManifestSchemaFactory r2, r4;
        java.util.concurrent.ConcurrentMap r5;

        r0 := @this: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = new java.util.concurrent.ConcurrentHashMap;

        r1 = r3;

        specialinvoke r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r5 = (java.util.concurrent.ConcurrentMap) r1;

        r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache> = r5;

        r4 = new androidx.test.espresso.remote.internal.deps.protobuf.ManifestSchemaFactory;

        r2 = r4;

        specialinvoke r4.<androidx.test.espresso.remote.internal.deps.protobuf.ManifestSchemaFactory: void <init>()>();

        r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.SchemaFactory schemaFactory> = r2;

        return;
    }

    public void mergeFrom(java.lang.Object, androidx.test.espresso.remote.internal.deps.protobuf.Reader, androidx.test.espresso.remote.internal.deps.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        androidx.test.espresso.remote.internal.deps.protobuf.Protobuf r0;
        java.lang.Object r1;
        androidx.test.espresso.remote.internal.deps.protobuf.Reader r2;
        androidx.test.espresso.remote.internal.deps.protobuf.ExtensionRegistryLite r3;
        androidx.test.espresso.remote.internal.deps.protobuf.Schema $r4;

        r0 := @this: androidx.test.espresso.remote.internal.deps.protobuf.Protobuf;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: androidx.test.espresso.remote.internal.deps.protobuf.Reader;

        r3 := @parameter2: androidx.test.espresso.remote.internal.deps.protobuf.ExtensionRegistryLite;

        $r4 = virtualinvoke r0.<androidx.test.espresso.remote.internal.deps.protobuf.Protobuf: androidx.test.espresso.remote.internal.deps.protobuf.Schema schemaFor(java.lang.Object)>(r1);

        interfaceinvoke $r4.<androidx.test.espresso.remote.internal.deps.protobuf.Schema: void mergeFrom(java.lang.Object,androidx.test.espresso.remote.internal.deps.protobuf.Reader,androidx.test.espresso.remote.internal.deps.protobuf.ExtensionRegistryLite)>(r1, r2, r3);

        return;
    }

