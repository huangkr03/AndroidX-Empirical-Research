androidx.camera.core.VideoCapture
<androidx.camera.core.VideoCapture: int ERROR_UNKNOWN>
<androidx.camera.core.VideoCapture: int ERROR_ENCODER>
<androidx.camera.core.VideoCapture: int ERROR_MUXER>
<androidx.camera.core.VideoCapture: int ERROR_RECORDING_IN_PROGRESS>
<androidx.camera.core.VideoCapture: int ERROR_FILE_IO>
<androidx.camera.core.VideoCapture: int ERROR_INVALID_CAMERA>
<androidx.camera.core.VideoCapture: int ERROR_RECORDING_TOO_SHORT>
<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$Defaults DEFAULT_CONFIG>
<androidx.camera.core.VideoCapture: java.lang.String TAG>
<androidx.camera.core.VideoCapture: int DEQUE_TIMEOUT_USEC>
<androidx.camera.core.VideoCapture: java.lang.String VIDEO_MIME_TYPE>
<androidx.camera.core.VideoCapture: java.lang.String AUDIO_MIME_TYPE>
<androidx.camera.core.VideoCapture: int[] CamcorderQuality>
<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>
<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal>
<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite>
<androidx.camera.core.VideoCapture: android.os.HandlerThread mVideoHandlerThread>
<androidx.camera.core.VideoCapture: android.os.Handler mVideoHandler>
<androidx.camera.core.VideoCapture: android.os.HandlerThread mAudioHandlerThread>
<androidx.camera.core.VideoCapture: android.os.Handler mAudioHandler>
<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>
<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>
<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture>
<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>
<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>
<androidx.camera.core.VideoCapture: int mVideoTrackIndex>
<androidx.camera.core.VideoCapture: int mAudioTrackIndex>
<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface>
<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>
<androidx.camera.core.VideoCapture: int mAudioBufferSize>
<androidx.camera.core.VideoCapture: boolean mIsRecording>
<androidx.camera.core.VideoCapture: int mAudioChannelCount>
<androidx.camera.core.VideoCapture: int mAudioSampleRate>
<androidx.camera.core.VideoCapture: int mAudioBitRate>
<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>
<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>
<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor>
<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>
<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus>
<androidx.camera.core.VideoCapture: java.lang.Throwable mVideoEncoderErrorMessage>
    void <init>(androidx.camera.core.impl.VideoCaptureConfig)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.impl.VideoCaptureConfig r1;
        android.media.MediaCodec$BufferInfo $r2, $r7;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r5, $r6, $r8, $r9, $r11, $r12;
        androidx.camera.core.impl.SessionConfig$Builder $r10;
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus $r13;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.impl.VideoCaptureConfig;

        specialinvoke r0.<androidx.camera.core.UseCase: void <init>(androidx.camera.core.impl.UseCaseConfig)>(r1);

        $r2 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r2.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal> = $r6;

        $r7 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r7.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite> = $r9;

        r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture> = null;

        $r10 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r10.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder> = $r10;

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted> = $r11;

        r0.<androidx.camera.core.VideoCapture: boolean mIsRecording> = 0;

        $r12 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled> = $r12;

        $r13 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r13;

        return;
    }

    private static android.media.MediaFormat createVideoMediaFormat(androidx.camera.core.impl.VideoCaptureConfig, android.util.Size)
    {
        androidx.camera.core.impl.VideoCaptureConfig r0;
        android.util.Size r1;
        android.media.MediaFormat r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: androidx.camera.core.impl.VideoCaptureConfig;

        r1 := @parameter1: android.util.Size;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        r2 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>("video/avc", $i0, $i1);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("color-format", 2130708361);

        $i2 = virtualinvoke r0.<androidx.camera.core.impl.VideoCaptureConfig: int getBitRate()>();

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i2);

        $i3 = virtualinvoke r0.<androidx.camera.core.impl.VideoCaptureConfig: int getVideoFrameRate()>();

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("frame-rate", $i3);

        $i4 = virtualinvoke r0.<androidx.camera.core.impl.VideoCaptureConfig: int getIFrameInterval()>();

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("i-frame-interval", $i4);

        return r2;
    }

    public androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean, androidx.camera.core.impl.UseCaseConfigFactory)
    {
        androidx.camera.core.VideoCapture r0;
        boolean z0;
        androidx.camera.core.impl.UseCaseConfigFactory r1;
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType $r2;
        androidx.camera.core.impl.UseCaseConfig$Builder $r3;
        androidx.camera.core.VideoCapture$Defaults $r4;
        androidx.camera.core.impl.VideoCaptureConfig $r5;
        androidx.camera.core.impl.Config r6;
        androidx.camera.core.impl.UseCaseConfig $r7;

        r0 := @this: androidx.camera.core.VideoCapture;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.camera.core.impl.UseCaseConfigFactory;

        $r2 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType VIDEO_CAPTURE>;

        r6 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfigFactory: androidx.camera.core.impl.Config getConfig(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType,int)>($r2, 1);

        if z0 == 0 goto label1;

        $r4 = <androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$Defaults DEFAULT_CONFIG>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.VideoCapture$Defaults: androidx.camera.core.impl.VideoCaptureConfig getConfig()>();

        r6 = staticinvoke <androidx.camera.core.impl.Config: androidx.camera.core.impl.Config mergeConfigs(androidx.camera.core.impl.Config,androidx.camera.core.impl.Config)>(r6, $r5);

     label1:
        if r6 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>(r6);

        $r7 = interfaceinvoke $r3.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

     label3:
        return $r7;
    }

    public void onAttached()
    {
        androidx.camera.core.VideoCapture r0;
        android.os.HandlerThread $r1, $r2, $r3, $r5, $r7, $r9;
        android.os.Handler $r4, $r8;
        android.os.Looper $r6, $r10;

        r0 := @this: androidx.camera.core.VideoCapture;

        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("CameraX-video encoding thread");

        r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mVideoHandlerThread> = $r1;

        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("CameraX-audio encoding thread");

        r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mAudioHandlerThread> = $r2;

        $r3 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mVideoHandlerThread>;

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r4 = new android.os.Handler;

        $r5 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mVideoHandlerThread>;

        $r6 = virtualinvoke $r5.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r4.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r0.<androidx.camera.core.VideoCapture: android.os.Handler mVideoHandler> = $r4;

        $r7 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mAudioHandlerThread>;

        virtualinvoke $r7.<android.os.HandlerThread: void start()>();

        $r8 = new android.os.Handler;

        $r9 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mAudioHandlerThread>;

        $r10 = virtualinvoke $r9.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        r0.<androidx.camera.core.VideoCapture: android.os.Handler mAudioHandler> = $r8;

        return;
    }

    protected android.util.Size onSuggestedResolutionUpdated(android.util.Size)
    {
        androidx.camera.core.VideoCapture r0;
        android.util.Size r1;
        java.lang.Throwable r2, $r11, $r15;
        android.view.Surface $r3;
        android.media.MediaCodec $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.String $r6, $r17;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: android.util.Size;

        $r3 = r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface>;

        if $r3 == null goto label1;

        $r7 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r7.<android.media.MediaCodec: void stop()>();

        $r8 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r8.<android.media.MediaCodec: void release()>();

        $r9 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r9.<android.media.MediaCodec: void stop()>();

        $r10 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r10.<android.media.MediaCodec: void release()>();

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseCameraSurface(boolean)>(0);

     label1:
        $r4 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>("video/avc");

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder> = $r4;

        $r5 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>("audio/mp4a-latm");

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder> = $r5;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create MediaCodec due to: ");

        $r15 = virtualinvoke r2.<java.io.IOException: java.lang.Throwable getCause()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        $r6 = virtualinvoke r0.<androidx.camera.core.VideoCapture: java.lang.String getCameraId()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void setupEncoder(java.lang.String,android.util.Size)>($r6, r1);

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void notifyActive()>();

        return r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void startRecording(androidx.camera.core.VideoCapture$OutputFileOptions, java.util.concurrent.Executor, androidx.camera.core.VideoCapture$OnVideoSavedCallback)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OutputFileOptions r1;
        java.util.concurrent.Executor r2, r97;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r3;
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r4, r92;
        androidx.camera.core.impl.CameraInternal r5;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r6, $r79;
        java.lang.Throwable r7, $r62, $r69, $r70, $r71, $r72, r73, r86, r89;
        android.os.Looper $r8, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r10, $r11, $r19, $r20, $r26, $r27, $r28, $r36, $r53, $r68, $r85;
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z7;
        java.lang.Object $r21, $r78, $r80, r87;
        android.media.MediaMuxer $r22, $r23, $r25, $r43;
        int $i0, $i1, $i2, $i3;
        androidx.camera.core.impl.SessionConfig$Builder $r29, $r32, $r34;
        androidx.camera.core.impl.DeferrableSurface $r31;
        androidx.camera.core.impl.SessionConfig $r35;
        android.os.Handler $r37, $r39;
        java.lang.Runnable $r38, $r40, $r61, $r82;
        android.location.Location $r41, $r42, $r44;
        double $d0, $d1;
        float $f0, $f1;
        android.media.MediaCodec $r45, $r84;
        android.media.AudioRecord $r46, $r47, $r50, $r54;
        java.lang.StringBuilder $r49, $r51, $r56, $r57, $r58, $r64, $r66, r93, r94, r95;
        java.lang.String $r52, $r59, $r65, $r67, r90;
        java.util.concurrent.ScheduledExecutorService $r60, $r83;
        java.util.concurrent.atomic.AtomicReference r75, r96;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r76;
        com.google.common.util.concurrent.ListenableFuture $r77, $r81;
        androidx.camera.core.VideoCapture$Metadata r88;
        android.util.Size r91;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        $r8 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r9 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r8 == $r9 goto label01;

        $r60 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r61 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture,androidx.camera.core.VideoCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>(r0, r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$startRecording$0(androidx.camera.core.VideoCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r60.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r61);

        return;

     label01:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "startRecording");

        $r10 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r11 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        r92 = new androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        specialinvoke r92.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: void <init>(java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>(r2, r3);

        r4 = r92;

        r5 = virtualinvoke r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        if r5 != null goto label02;

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not bound to a Camera [");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(5, $r59, null);

        return;

     label02:
        $r14 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus>;

        $r13 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE>;

        if $r14 == $r13 goto label03;

        $r16 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus>;

        $r15 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED>;

        if $r16 == $r15 goto label03;

        $r18 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus>;

        $r17 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED>;

        if $r18 != $r17 goto label04;

     label03:
        $r72 = r0.<androidx.camera.core.VideoCapture: java.lang.Throwable mVideoEncoderErrorMessage>;

        interfaceinvoke r4.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Video encoder initialization failed before start recording ", $r72);

        return;

     label04:
        $r19 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal>;

        $z0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label05;

        interfaceinvoke r4.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(3, "It is still in video recording!", null);

        return;

     label05:
        $r20 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z1 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label10;

     label06:
        $r46 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        $i1 = virtualinvoke $r46.<android.media.AudioRecord: int getState()>();

        if $i1 != 1 goto label07;

        $r54 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        virtualinvoke $r54.<android.media.AudioRecord: void startRecording()>();

     label07:
        goto label09;

     label08:
        $r62 := @caughtexception;

        r73 = $r62;

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioRecorder cannot start recording, disable audio.");

        $r65 = virtualinvoke r73.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r67);

        $r68 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        virtualinvoke $r68.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseAudioInputResource()>();

     label09:
        $r47 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        $i2 = virtualinvoke $r47.<android.media.AudioRecord: int getRecordingState()>();

        if $i2 == 3 goto label10;

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioRecorder startRecording failed - incorrect state: ");

        $r50 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        $i3 = virtualinvoke $r50.<android.media.AudioRecord: int getRecordingState()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r52);

        $r53 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        virtualinvoke $r53.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseAudioInputResource()>();

     label10:
        r96 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r96.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r75 = r96;

        $r76 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference)>(r75) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.VideoCapture: java.lang.Object lambda$startRecording$1(java.util.concurrent.atomic.AtomicReference,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r77 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r76);

        r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture> = $r77;

        $r78 = virtualinvoke r75.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r79 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r78;

        $r80 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r79);

        r6 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r80;

        $r81 = r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture>;

        $r82 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$startRecording$2()>, methodtype: void __METHODTYPE__());

        $r83 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r97 = (java.util.concurrent.Executor) $r83;

        interfaceinvoke $r81.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r82, r97);

     label11:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "videoEncoder start");

        $r84 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r84.<android.media.MediaCodec: void start()>();

        $r85 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z7 = virtualinvoke $r85.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z7 == 0 goto label12;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "audioEncoder start");

        $r45 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r45.<android.media.MediaCodec: void start()>();

     label12:
        goto label14;

     label13:
        $r71 := @caughtexception;

        r86 = $r71;

        virtualinvoke r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        interfaceinvoke r4.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Audio/Video encoder start fail", r86);

        return;

     label14:
        $r21 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r87 = $r21;

        entermonitor $r21;

     label15:
        $r22 = specialinvoke r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer initMediaMuxer(androidx.camera.core.VideoCapture$OutputFileOptions)>(r1);

        r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer> = $r22;

        $r23 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r23);

        $r25 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $i0 = virtualinvoke r0.<androidx.camera.core.VideoCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r5);

        virtualinvoke $r25.<android.media.MediaMuxer: void setOrientationHint(int)>($i0);

        r88 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata getMetadata()>();

        if r88 == null goto label16;

        $r41 = r88.<androidx.camera.core.VideoCapture$Metadata: android.location.Location location>;

        if $r41 == null goto label16;

        $r43 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $r42 = r88.<androidx.camera.core.VideoCapture$Metadata: android.location.Location location>;

        $d0 = virtualinvoke $r42.<android.location.Location: double getLatitude()>();

        $f0 = (float) $d0;

        $r44 = r88.<androidx.camera.core.VideoCapture$Metadata: android.location.Location location>;

        $d1 = virtualinvoke $r44.<android.location.Location: double getLongitude()>();

        $f1 = (float) $d1;

        virtualinvoke $r43.<android.media.MediaMuxer: void setLocation(float,float)>($f0, $f1);

     label16:
        exitmonitor r87;

     label17:
        goto label20;

     label18:
        $r70 := @caughtexception;

        r7 = $r70;

        exitmonitor r87;

     label19:
        throw r7;

     label20:
        goto label22;

     label21:
        $r69 := @caughtexception;

        r89 = $r69;

        virtualinvoke r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        interfaceinvoke r4.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(2, "MediaMuxer creation failed!", r89);

        return;

     label22:
        $r26 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>;

        virtualinvoke $r26.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r27 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal>;

        virtualinvoke $r27.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r28 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal>;

        virtualinvoke $r28.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        r0.<androidx.camera.core.VideoCapture: boolean mIsRecording> = 1;

        $r29 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        virtualinvoke $r29.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder clearSurfaces()>();

        $r32 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r31 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r32.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)>($r31);

        $r34 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r35 = virtualinvoke $r34.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r35);

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void notifyUpdated()>();

        $r36 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z2 = virtualinvoke $r36.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 == 0 goto label23;

        $r39 = r0.<androidx.camera.core.VideoCapture: android.os.Handler mAudioHandler>;

        $r40 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>(r0, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$startRecording$3(androidx.camera.core.VideoCapture$OnVideoSavedCallback)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r39.<android.os.Handler: boolean post(java.lang.Runnable)>($r40);

     label23:
        r90 = virtualinvoke r0.<androidx.camera.core.VideoCapture: java.lang.String getCameraId()>();

        r91 = virtualinvoke r0.<androidx.camera.core.VideoCapture: android.util.Size getAttachedSurfaceResolution()>();

        $r37 = r0.<androidx.camera.core.VideoCapture: android.os.Handler mVideoHandler>;

        $r38 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture,androidx.camera.core.VideoCapture$OnVideoSavedCallback,java.lang.String,android.util.Size,androidx.camera.core.VideoCapture$OutputFileOptions,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r4, r90, r91, r1, r6) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$startRecording$4(androidx.camera.core.VideoCapture$OnVideoSavedCallback,java.lang.String,android.util.Size,androidx.camera.core.VideoCapture$OutputFileOptions,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r37.<android.os.Handler: boolean post(java.lang.Runnable)>($r38);

        return;

        catch java.lang.IllegalStateException from label06 to label07 with label08;
        catch java.lang.IllegalStateException from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.io.IOException from label14 to label20 with label21;
    }

    public void stopRecording()
    {
        androidx.camera.core.VideoCapture r0;
        android.os.Looper $r1, $r2;
        androidx.camera.core.impl.SessionConfig$Builder $r3, $r6, $r8;
        androidx.camera.core.impl.DeferrableSurface $r5;
        androidx.camera.core.impl.SessionConfig $r9;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r10, $r11, $r12;
        java.util.concurrent.ScheduledExecutorService $r13;
        java.lang.Runnable $r14;

        r0 := @this: androidx.camera.core.VideoCapture;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == $r2 goto label1;

        $r13 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r14 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$stopRecording$5()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r13.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r14);

        return;

     label1:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "stopRecording");

        $r3 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        virtualinvoke $r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder clearSurfaces()>();

        $r6 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r5 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)>($r5);

        $r8 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r9 = virtualinvoke $r8.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r9);

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void notifyUpdated()>();

        $z0 = r0.<androidx.camera.core.VideoCapture: boolean mIsRecording>;

        if $z0 == 0 goto label3;

        $r10 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label2;

        $r12 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        goto label3;

     label2:
        $r11 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label3:
        return;
    }

    public void onDetached()
    {
        androidx.camera.core.VideoCapture r0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r2;
        java.lang.Runnable $r3;
        java.util.concurrent.ScheduledExecutorService $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: androidx.camera.core.VideoCapture;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void stopRecording()>();

        $r1 = r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture: void lambda$onDetached$6()>, methodtype: void __METHODTYPE__());

        $r4 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r5 = (java.util.concurrent.Executor) $r4;

        interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, r5);

        goto label2;

     label1:
        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseResources()>();

     label2:
        return;
    }

    private void releaseResources()
    {
        androidx.camera.core.VideoCapture r0;
        android.os.HandlerThread $r1;
        android.view.Surface $r2;

        r0 := @this: androidx.camera.core.VideoCapture;

        $r1 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mVideoHandlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: boolean quitSafely()>();

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseAudioInputResource()>();

        $r2 = r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface>;

        if $r2 == null goto label1;

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseCameraSurface(boolean)>(1);

     label1:
        return;
    }

    private void releaseAudioInputResource()
    {
        androidx.camera.core.VideoCapture r0;
        android.os.HandlerThread $r1;
        android.media.MediaCodec $r2, $r5;
        android.media.AudioRecord $r3, $r4;

        r0 := @this: androidx.camera.core.VideoCapture;

        $r1 = r0.<androidx.camera.core.VideoCapture: android.os.HandlerThread mAudioHandlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: boolean quitSafely()>();

        $r2 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        if $r2 == null goto label1;

        $r5 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r5.<android.media.MediaCodec: void release()>();

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder> = null;

     label1:
        $r3 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        virtualinvoke $r4.<android.media.AudioRecord: void release()>();

        r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder> = null;

     label2:
        return;
    }

    public androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.VideoCapture$Builder $r2;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = staticinvoke <androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder fromConfig(androidx.camera.core.impl.Config)>(r1);

        return $r2;
    }

    public void onStateDetached()
    {
        androidx.camera.core.VideoCapture r0;

        r0 := @this: androidx.camera.core.VideoCapture;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void stopRecording()>();

        return;
    }

    private void releaseCameraSurface(boolean)
    {
        androidx.camera.core.VideoCapture r0;
        boolean z0;
        android.media.MediaCodec r1;
        androidx.camera.core.impl.DeferrableSurface $r2, $r3, $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;
        java.lang.Runnable $r6;
        java.util.concurrent.ScheduledExecutorService $r7;
        java.util.concurrent.Executor r8;

        r0 := @this: androidx.camera.core.VideoCapture;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        if $r2 != null goto label1;

        return;

     label1:
        r1 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        $r3 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r3.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        $r4 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r6 = dynamicinvoke "run" <java.lang.Runnable (boolean,android.media.MediaCodec)>(z0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.VideoCapture: void lambda$releaseCameraSurface$7(boolean,android.media.MediaCodec)>, methodtype: void __METHODTYPE__());

        $r7 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r8 = (java.util.concurrent.Executor) $r7;

        interfaceinvoke $r5.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, r8);

        if z0 == 0 goto label2;

        r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder> = null;

     label2:
        r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface> = null;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = null;

        return;
    }

    public void setTargetRotation(int)
    {
        androidx.camera.core.VideoCapture r0;
        int i0;

        r0 := @this: androidx.camera.core.VideoCapture;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: boolean setTargetRotationInternal(int)>(i0);

        return;
    }

    void setupEncoder(java.lang.String, android.util.Size)
    {
        androidx.camera.core.VideoCapture r0;
        java.lang.String r1, r4, $r50, $r57;
        android.util.Size r2;
        androidx.camera.core.impl.VideoCaptureConfig r3;
        androidx.camera.core.impl.UseCaseConfig $r5;
        android.media.MediaCodec $r6, $r8, $r11, $r30, $r31;
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus $r7, $r42, $r44, $r51, $r58;
        android.media.MediaFormat $r9, $r32;
        android.view.Surface $r10, $r15, r61;
        androidx.camera.core.impl.SessionConfig$Builder $r12, $r22, $r25, $r27;
        androidx.camera.core.impl.DeferrableSurface $r13, $r16, $r21, $r39;
        int $i0, $i1, i2;
        com.google.common.util.concurrent.ListenableFuture $r17;
        java.lang.Runnable $r19;
        java.util.concurrent.ScheduledExecutorService $r20;
        androidx.camera.core.impl.SessionConfig $r28;
        java.util.concurrent.atomic.AtomicBoolean $r29, $r37;
        android.media.AudioRecord $r33, $r34, $r35, $r38;
        java.lang.Object $r36, r62;
        java.lang.Throwable $r41, $r43, r59, r60;
        java.lang.StringBuilder $r46, $r47, $r48, $r49, $r53, $r54, $r55, $r56, r63, r64;
        boolean z0;
        androidx.camera.core.impl.ImmediateSurface r65;
        androidx.camera.core.VideoCapture$1 r66;
        java.util.concurrent.Executor r67;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.util.Size;

        $r5 = virtualinvoke r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r3 = (androidx.camera.core.impl.VideoCaptureConfig) $r5;

        $r6 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r6.<android.media.MediaCodec: void reset()>();

        $r7 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r7;

     label01:
        $r8 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        $r9 = staticinvoke <androidx.camera.core.VideoCapture: android.media.MediaFormat createVideoMediaFormat(androidx.camera.core.impl.VideoCaptureConfig,android.util.Size)>(r3, r2);

        virtualinvoke $r8.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>($r9, null, null, 1);

     label02:
        goto label09;

     label03:
        $r43 := @caughtexception;

        r59 = $r43;

        z0 = 0;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label06;

        i2 = staticinvoke <androidx.camera.core.VideoCapture$Api23Impl: int getCodecExceptionErrorCode(android.media.MediaCodec$CodecException)>(r59);

        r4 = virtualinvoke r59.<android.media.MediaCodec$CodecException: java.lang.String getDiagnosticInfo()>();

        if i2 != 1100 goto label04;

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CodecException: code: ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" diagnostic: ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r57);

        $r58 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r58;

        goto label05;

     label04:
        if i2 != 1101 goto label05;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CodecException: code: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" diagnostic: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r50);

        $r51 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r51;

     label05:
        goto label07;

     label06:
        $r44 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r44;

     label07:
        r0.<androidx.camera.core.VideoCapture: java.lang.Throwable mVideoEncoderErrorMessage> = r59;

        return;

     label08:
        $r41 := @caughtexception;

        r60 = $r41;

        $r42 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED>;

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$VideoEncoderInitStatus mVideoEncoderInitStatus> = $r42;

        r0.<androidx.camera.core.VideoCapture: java.lang.Throwable mVideoEncoderErrorMessage> = r60;

        return;

     label09:
        $r10 = r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface>;

        if $r10 == null goto label10;

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseCameraSurface(boolean)>(0);

     label10:
        $r11 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        r61 = virtualinvoke $r11.<android.media.MediaCodec: android.view.Surface createInputSurface()>();

        r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface> = r61;

        $r12 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r3);

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder> = $r12;

        $r13 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        if $r13 == null goto label11;

        $r39 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r39.<androidx.camera.core.impl.DeferrableSurface: void close()>();

     label11:
        r65 = new androidx.camera.core.impl.ImmediateSurface;

        $r15 = r0.<androidx.camera.core.VideoCapture: android.view.Surface mCameraSurface>;

        $i0 = virtualinvoke r0.<androidx.camera.core.VideoCapture: int getImageFormat()>();

        specialinvoke r65.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface,android.util.Size,int)>($r15, r2, $i0);

        r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = r65;

        $r16 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        $r17 = virtualinvoke $r16.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r61);

        $r19 = dynamicinvoke "run" <java.lang.Runnable (android.view.Surface)>(r61) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <android.view.Surface: void release()>, methodtype: void __METHODTYPE__());

        $r20 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r67 = (java.util.concurrent.Executor) $r20;

        interfaceinvoke $r17.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r19, r67);

        $r22 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r21 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r22.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)>($r21);

        $r25 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        r66 = new androidx.camera.core.VideoCapture$1;

        specialinvoke r66.<androidx.camera.core.VideoCapture$1: void <init>(androidx.camera.core.VideoCapture,java.lang.String,android.util.Size)>(r0, r1, r2);

        virtualinvoke $r25.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addErrorListener(androidx.camera.core.impl.SessionConfig$ErrorListener)>(r66);

        $r27 = r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r28 = virtualinvoke $r27.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r28);

        $r29 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        virtualinvoke $r29.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        specialinvoke r0.<androidx.camera.core.VideoCapture: void setAudioParametersByCamcorderProfile(android.util.Size,java.lang.String)>(r2, r1);

        $r30 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r30.<android.media.MediaCodec: void reset()>();

        $r31 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        $r32 = specialinvoke r0.<androidx.camera.core.VideoCapture: android.media.MediaFormat createAudioMediaFormat()>();

        virtualinvoke $r31.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>($r32, null, null, 1);

        $r33 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        if $r33 == null goto label12;

        $r38 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        virtualinvoke $r38.<android.media.AudioRecord: void release()>();

     label12:
        $r34 = specialinvoke r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord autoConfigAudioRecordSource(androidx.camera.core.impl.VideoCaptureConfig)>(r3);

        r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder> = $r34;

        $r35 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        if $r35 != null goto label13;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapture", "AudioRecord object cannot initialized correctly!");

        $r37 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        virtualinvoke $r37.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

     label13:
        $r36 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r62 = $r36;

        entermonitor $r36;

        r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex> = -1;

        r0.<androidx.camera.core.VideoCapture: int mAudioTrackIndex> = -1;

        exitmonitor r62;

        goto label14;

     label14:
        r0.<androidx.camera.core.VideoCapture: boolean mIsRecording> = 0;

        return;

        catch android.media.MediaCodec$CodecException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label01 to label02 with label08;
        catch java.lang.IllegalStateException from label01 to label02 with label08;
    }

    private boolean writeVideoEncodedBuffer(int)
    {
        androidx.camera.core.VideoCapture r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r18;
        boolean z0, $z1, $z2, $z3, $z4;
        android.os.Bundle r3, $r21;
        java.lang.Throwable r4, $r28;
        android.media.MediaCodec $r5, $r22, $r31;
        java.util.concurrent.atomic.AtomicBoolean $r6, $r19, $r23;
        android.media.MediaCodec$BufferInfo $r7, $r12, $r14, $r15, $r17, $r20, $r30, $r32;
        java.lang.StringBuilder $r8, $r9, $r10, $r24, $r25, $r26;
        java.lang.String $r11, $r27;
        long $l6, $l7;
        android.media.MediaMuxer $r29;

        r0 := @this: androidx.camera.core.VideoCapture;

        i0 := @parameter0: int;

        if i0 >= 0 goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer should not have negative index: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapture", $r27);

        return 0;

     label01:
        $r5 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        r1 = virtualinvoke $r5.<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>(i0);

        if r1 != null goto label02;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("VideoCapture", "OutputBuffer was null.");

        return 0;

     label02:
        $r6 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        $z1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label13;

        $r7 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i1 = $r7.<android.media.MediaCodec$BufferInfo: int size>;

        if $i1 <= 0 goto label12;

        $r12 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i2 = $r12.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        $r14 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i4 = $r14.<android.media.MediaCodec$BufferInfo: int offset>;

        $r15 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i3 = $r15.<android.media.MediaCodec$BufferInfo: int size>;

        $i5 = $i4 + $i3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i5);

        $r17 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        $l7 = $l6 / 1000L;

        $r17.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = $l7;

        $r18 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r2 = $r18;

        entermonitor $r18;

     label03:
        $r19 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        $z2 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label07;

        $r20 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i8 = $r20.<android.media.MediaCodec$BufferInfo: int flags>;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z0 = $z3;

        if z0 == 0 goto label06;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "First video key frame written.");

        $r23 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        virtualinvoke $r23.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        goto label07;

     label06:
        $r21 = new android.os.Bundle;

        specialinvoke $r21.<android.os.Bundle: void <init>()>();

        r3 = $r21;

        virtualinvoke r3.<android.os.Bundle: void putInt(java.lang.String,int)>("request-sync", 0);

        $r22 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r22.<android.media.MediaCodec: void setParameters(android.os.Bundle)>(r3);

     label07:
        $r29 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $i10 = r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex>;

        $r30 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        virtualinvoke $r29.<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>($i10, r1, $r30);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r28 := @caughtexception;

        r4 = $r28;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        goto label13;

     label12:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mVideoBufferInfo.size <= 0, index ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r11);

     label13:
        $r31 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r31.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i0, 0);

        $r32 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        $i11 = $r32.<android.media.MediaCodec$BufferInfo: int flags>;

        $i12 = $i11 & 4;

        if $i12 == 0 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        return $z4;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean writeAudioEncodedBuffer(int)
    {
        androidx.camera.core.VideoCapture r0;
        int i0, $i1, $i2, $i3, $i7, $i8, $i9, $i11, $i12;
        java.nio.ByteBuffer r1;
        java.lang.Throwable r2, $r22, $r34, r36;
        android.media.MediaCodec $r3, $r37;
        android.media.MediaCodec$BufferInfo $r4, $r7, $r10, $r13, $r16, $r19, $r25, $r28, $r31, $r38;
        java.util.concurrent.atomic.AtomicBoolean $r6, $r18, $r21;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r23, $r24, $r26, $r27, $r29, $r30, $r32;
        long $l4, $l5, $l10;
        java.lang.String $r15, $r33;
        byte $b6;
        java.lang.Object $r17, r35;
        android.media.MediaMuxer $r20;

        r0 := @this: androidx.camera.core.VideoCapture;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        r1 = specialinvoke r0.<androidx.camera.core.VideoCapture: java.nio.ByteBuffer getOutputBuffer(android.media.MediaCodec,int)>($r3, i0);

        $r4 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i1 = $r4.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r6 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label11;

     label01:
        $r7 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i2 = $r7.<android.media.MediaCodec$BufferInfo: int size>;

        if $i2 <= 0 goto label08;

        $r16 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $l5 = $r16.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $b6 = $l5 cmp 0L;

        if $b6 <= 0 goto label08;

        $r17 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r35 = $r17;

        entermonitor $r17;

     label02:
        $r18 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite>;

        $z1 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label03;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "First audio sample written.");

        $r21 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite>;

        virtualinvoke $r21.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label03:
        $r20 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $i7 = r0.<androidx.camera.core.VideoCapture: int mAudioTrackIndex>;

        $r19 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        virtualinvoke $r20.<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>($i7, r1, $r19);

        exitmonitor r35;

     label04:
        goto label07;

     label05:
        $r34 := @caughtexception;

        r2 = $r34;

        exitmonitor r35;

     label06:
        throw r2;

     label07:
        goto label09;

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAudioBufferInfo size: ");

        $r10 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i3 = $r10.<android.media.MediaCodec$BufferInfo: int size>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" presentationTimeUs: ");

        $r13 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $l4 = $r13.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r15);

     label09:
        goto label11;

     label10:
        $r22 := @caughtexception;

        r36 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio error:size=");

        $r25 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i8 = $r25.<android.media.MediaCodec$BufferInfo: int size>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/offset=");

        $r28 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i9 = $r28.<android.media.MediaCodec$BufferInfo: int offset>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/timeUs=");

        $r31 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $l10 = $r31.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapture", $r33);

        virtualinvoke r36.<java.lang.Exception: void printStackTrace()>();

     label11:
        $r37 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r37.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i0, 0);

        $r38 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $i11 = $r38.<android.media.MediaCodec$BufferInfo: int flags>;

        $i12 = $i11 & 4;

        if $i12 == 0 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        return $z2;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label01 to label09 with label10;
    }

    boolean videoEncode(androidx.camera.core.VideoCapture$OnVideoSavedCallback, java.lang.String, android.util.Size, androidx.camera.core.VideoCapture$OutputFileOptions)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r1;
        java.lang.String r2, $r28, $r37, $r42;
        android.util.Size r3;
        androidx.camera.core.VideoCapture$OutputFileOptions r4;
        java.lang.Object r5, $r9, $r19, r50;
        java.lang.Throwable r6, r7, $r33, $r44, $r45, $r46, $r47, r49, r51, r53;
        android.media.MediaCodec $r8, $r17, $r20, $r31;
        android.media.MediaMuxer $r10, $r13, $r14, $r21, $r29;
        android.os.ParcelFileDescriptor $r11, $r52;
        java.util.concurrent.atomic.AtomicBoolean $r12, $r15, $r18, $r23, $r26, $r30, $r32, $r40, $r43, $r48, $r54, $r55, $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z8, z9;
        android.media.MediaCodec$BufferInfo $r16;
        android.media.MediaFormat $r22;
        int $i0, $i1, $i2, $i3, i5;
        java.lang.StringBuilder $r24, $r25, $r27, $r34, $r35, $r36, $r38, $r39, $r41;
        long $l4;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.util.Size;

        r4 := @parameter3: androidx.camera.core.VideoCapture$OutputFileOptions;

        z6 = 0;

        z7 = 0;

     label01:
        if z7 != 0 goto label16;

        if z6 != 0 goto label16;

        $r15 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>;

        $z1 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label02;

        $r31 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r31.<android.media.MediaCodec: void signalEndOfInputStream()>();

        $r32 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>;

        virtualinvoke $r32.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

     label02:
        $r17 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        $r16 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mVideoBufferInfo>;

        i5 = virtualinvoke $r17.<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>($r16, 10000L);

        lookupswitch(i5)
        {
            case -2: goto label03;
            case -1: goto label13;
            default: goto label14;
        };

     label03:
        $r18 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        $z2 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 == 0 goto label04;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Unexpected change in video encoding format.", null);

        z6 = 1;

     label04:
        $r19 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r5 = $r19;

        entermonitor $r19;

     label05:
        $r21 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $r20 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        $r22 = virtualinvoke $r20.<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>();

        $i0 = virtualinvoke $r21.<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>($r22);

        r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex> = $i0;

        $r23 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z3 = virtualinvoke $r23.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 == 0 goto label06;

        $i2 = r0.<androidx.camera.core.VideoCapture: int mAudioTrackIndex>;

        if $i2 < 0 goto label06;

        $i3 = r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex>;

        if $i3 >= 0 goto label07;

     label06:
        $r48 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $z8 = virtualinvoke $r48.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z8 != 0 goto label08;

        $i1 = r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex>;

        if $i1 < 0 goto label08;

     label07:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaMuxer started on video encode thread and audio enabled: ");

        $r26 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsAudioEnabled>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r28);

        $r29 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        virtualinvoke $r29.<android.media.MediaMuxer: void start()>();

        $r30 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        virtualinvoke $r30.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label08:
        exitmonitor r5;

     label09:
        goto label12;

     label10:
        $r46 := @caughtexception;

        r6 = $r46;

        exitmonitor r5;

     label11:
        throw r6;

     label12:
        goto label15;

     label13:
        goto label15;

     label14:
        z7 = specialinvoke r0.<androidx.camera.core.VideoCapture: boolean writeVideoEncodedBuffer(int)>(i5);

     label15:
        goto label01;

     label16:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "videoEncoder stop");

        $r8 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mVideoEncoder>;

        virtualinvoke $r8.<android.media.MediaCodec: void stop()>();

     label17:
        goto label19;

     label18:
        $r44 := @caughtexception;

        r49 = $r44;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Video encoder stop failed!", r49);

        z6 = 1;

     label19:
        $r9 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r50 = $r9;

        entermonitor $r9;

     label20:
        $r10 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        if $r10 == null goto label22;

        $r12 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        $z0 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label21;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "Muxer already started");

        $r14 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        virtualinvoke $r14.<android.media.MediaMuxer: void stop()>();

     label21:
        $r13 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        virtualinvoke $r13.<android.media.MediaMuxer: void release()>();

        r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer> = null;

     label22:
        exitmonitor r50;

     label23:
        goto label26;

     label24:
        $r47 := @caughtexception;

        r7 = $r47;

        exitmonitor r50;

     label25:
        throw r7;

     label26:
        z9 = specialinvoke r0.<androidx.camera.core.VideoCapture: boolean removeRecordingResultIfNoVideoKeyFrameArrived(androidx.camera.core.VideoCapture$OutputFileOptions)>(r4);

        if z9 != 0 goto label27;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(6, "The file has no video key frame.", null);

        z6 = 1;

     label27:
        goto label31;

     label28:
        $r33 := @caughtexception;

        r51 = $r33;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("muxer stop IllegalStateException: ");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r37);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("muxer stop exception, mIsFirstVideoKeyFrameWrite: ");

        $r40 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        $z4 = virtualinvoke $r40.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r42);

        $r43 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        $z5 = virtualinvoke $r43.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z5 == 0 goto label29;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(2, "Muxer stop failed!", r51);

        goto label30;

     label29:
        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(6, "The file has no video key frame.", null);

     label30:
        z6 = 1;

     label31:
        $r52 = r0.<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor>;

        if $r52 == null goto label35;

     label32:
        $r11 = r0.<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor>;

        virtualinvoke $r11.<android.os.ParcelFileDescriptor: void close()>();

        r0.<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor> = null;

     label33:
        goto label35;

     label34:
        $r45 := @caughtexception;

        r53 = $r45;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(2, "File descriptor close failed!", r53);

        z6 = 1;

     label35:
        $r54 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        virtualinvoke $r54.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r55 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal>;

        virtualinvoke $r55.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r56 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        virtualinvoke $r56.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "Video encode thread end.");

        return z6;

        catch java.lang.Throwable from label05 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.IllegalStateException from label16 to label17 with label18;
        catch java.lang.Throwable from label20 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.IllegalStateException from label19 to label27 with label28;
        catch java.io.IOException from label32 to label33 with label34;
    }

    boolean audioEncode(androidx.camera.core.VideoCapture$OnVideoSavedCallback)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r1;
        int i0, i1, $i2, $i3, $i4, $i8, i15;
        java.nio.ByteBuffer r2;
        java.lang.Throwable r3, $r32, $r33, $r34, $r40, $r46, r47, r48, r52, r53;
        android.media.AudioRecord $r4, $r9, $r29;
        android.media.MediaCodec $r5, $r8, $r10, $r12, $r25, $r27, $r30, $r49;
        java.util.concurrent.atomic.AtomicBoolean $r6, $r7, $r16, $r31;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r11, r51;
        android.media.MediaMuxer $r13, $r15;
        android.media.MediaFormat $r14;
        android.media.MediaCodec$BufferInfo $r17, $r20, $r26, $r50;
        long $l5, $l7, $l10, $l11, l14;
        byte $b6, $b16;
        java.lang.StringBuilder $r18, $r19, $r21, $r22, $r23, $r35, $r36, $r38, $r41, $r42, $r44;
        java.lang.String $r24, $r37, $r39, $r43, $r45;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        z3 = 0;

        l14 = 0L;

     label01:
        if z3 != 0 goto label21;

        $z0 = r0.<androidx.camera.core.VideoCapture: boolean mIsRecording>;

        if $z0 == 0 goto label21;

        $r7 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal>;

        $z1 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 == 0 goto label02;

        $r31 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal>;

        virtualinvoke $r31.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        r0.<androidx.camera.core.VideoCapture: boolean mIsRecording> = 0;

     label02:
        $r8 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        if $r8 == null goto label01;

        $r9 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        if $r9 == null goto label01;

     label03:
        $r10 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        i15 = virtualinvoke $r10.<android.media.MediaCodec: int dequeueInputBuffer(long)>(-1L);

        if i15 < 0 goto label06;

        $r27 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        r2 = specialinvoke r0.<androidx.camera.core.VideoCapture: java.nio.ByteBuffer getInputBuffer(android.media.MediaCodec,int)>($r27, i15);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r29 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        $i8 = r0.<androidx.camera.core.VideoCapture: int mAudioBufferSize>;

        i1 = virtualinvoke $r29.<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>(r2, $i8);

        if i1 <= 0 goto label06;

        $r30 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        $l10 = staticinvoke <java.lang.System: long nanoTime()>();

        $l11 = $l10 / 1000L;

        $z2 = r0.<androidx.camera.core.VideoCapture: boolean mIsRecording>;

        if $z2 == 0 goto label04;

        $b16 = 0;

        goto label05;

     label04:
        $b16 = 4;

     label05:
        virtualinvoke $r30.<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>(i15, 0, i1, $l11, $b16);

     label06:
        goto label09;

     label07:
        $r40 := @caughtexception;

        r47 = $r40;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio dequeueInputBuffer CodecException ");

        $r43 = virtualinvoke r47.<android.media.MediaCodec$CodecException: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r45);

        goto label09;

     label08:
        $r34 := @caughtexception;

        r48 = $r34;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio dequeueInputBuffer IllegalStateException ");

        $r37 = virtualinvoke r48.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r39);

     label09:
        $r49 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        $r50 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        i0 = virtualinvoke $r49.<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>($r50, 0L);

        lookupswitch(i0)
        {
            case -2: goto label10;
            case -1: goto label17;
            default: goto label18;
        };

     label10:
        $r11 = r0.<androidx.camera.core.VideoCapture: java.lang.Object mMuxerLock>;

        r51 = $r11;

        entermonitor $r11;

     label11:
        $r13 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        $r12 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        $r14 = virtualinvoke $r12.<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>();

        $i2 = virtualinvoke $r13.<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>($r14);

        r0.<androidx.camera.core.VideoCapture: int mAudioTrackIndex> = $i2;

        $i3 = r0.<androidx.camera.core.VideoCapture: int mAudioTrackIndex>;

        if $i3 < 0 goto label12;

        $i4 = r0.<androidx.camera.core.VideoCapture: int mVideoTrackIndex>;

        if $i4 < 0 goto label12;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "MediaMuxer start on audio encoder thread.");

        $r15 = r0.<androidx.camera.core.VideoCapture: android.media.MediaMuxer mMuxer>;

        virtualinvoke $r15.<android.media.MediaMuxer: void start()>();

        $r16 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mMuxerStarted>;

        virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label12:
        exitmonitor r51;

     label13:
        goto label16;

     label14:
        $r32 := @caughtexception;

        r3 = $r32;

        exitmonitor r51;

     label15:
        throw r3;

     label16:
        goto label20;

     label17:
        goto label20;

     label18:
        $r17 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $l5 = $r17.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $b6 = $l5 cmp l14;

        if $b6 <= 0 goto label19;

        z3 = specialinvoke r0.<androidx.camera.core.VideoCapture: boolean writeAudioEncodedBuffer(int)>(i0);

        $r26 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        l14 = $r26.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        goto label20;

     label19:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drops frame, current frame\'s timestamp ");

        $r20 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec$BufferInfo mAudioBufferInfo>;

        $l7 = $r20.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is earlier that last frame ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l14);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("VideoCapture", $r24);

        $r25 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r25.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i0, 0);

     label20:
        if i0 < 0 goto label01;

        if z3 == 0 goto label09;

        goto label01;

     label21:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "audioRecorder stop");

        $r4 = r0.<androidx.camera.core.VideoCapture: android.media.AudioRecord mAudioRecorder>;

        virtualinvoke $r4.<android.media.AudioRecord: void stop()>();

     label22:
        goto label24;

     label23:
        $r46 := @caughtexception;

        r52 = $r46;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Audio recorder stop failed!", r52);

     label24:
        $r5 = r0.<androidx.camera.core.VideoCapture: android.media.MediaCodec mAudioEncoder>;

        virtualinvoke $r5.<android.media.MediaCodec: void stop()>();

     label25:
        goto label27;

     label26:
        $r33 := @caughtexception;

        r53 = $r33;

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(1, "Audio encoder stop failed!", r53);

     label27:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "Audio encode thread end");

        $r6 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return 0;

        catch android.media.MediaCodec$CodecException from label03 to label06 with label07;
        catch java.lang.IllegalStateException from label03 to label06 with label08;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.IllegalStateException from label21 to label22 with label23;
        catch java.lang.IllegalStateException from label24 to label25 with label26;
    }

    private java.nio.ByteBuffer getInputBuffer(android.media.MediaCodec, int)
    {
        androidx.camera.core.VideoCapture r0;
        android.media.MediaCodec r1;
        int i0;
        java.nio.ByteBuffer $r2;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.media.MediaCodec: java.nio.ByteBuffer getInputBuffer(int)>(i0);

        return $r2;
    }

    private java.nio.ByteBuffer getOutputBuffer(android.media.MediaCodec, int)
    {
        androidx.camera.core.VideoCapture r0;
        android.media.MediaCodec r1;
        int i0;
        java.nio.ByteBuffer $r2;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>(i0);

        return $r2;
    }

    private android.media.MediaFormat createAudioMediaFormat()
    {
        androidx.camera.core.VideoCapture r0;
        android.media.MediaFormat r1;
        int $i0, $i1, $i2;

        r0 := @this: androidx.camera.core.VideoCapture;

        $i1 = r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate>;

        $i0 = r0.<androidx.camera.core.VideoCapture: int mAudioChannelCount>;

        r1 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>("audio/mp4a-latm", $i1, $i0);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("aac-profile", 2);

        $i2 = r0.<androidx.camera.core.VideoCapture: int mAudioBitRate>;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i2);

        return r1;
    }

    private android.media.AudioRecord autoConfigAudioRecordSource(androidx.camera.core.impl.VideoCaptureConfig)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.impl.VideoCaptureConfig r1;
        byte b0, $b7;
        android.media.AudioRecord r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, i8;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14, r15;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.impl.VideoCaptureConfig;

        $i1 = r0.<androidx.camera.core.VideoCapture: int mAudioChannelCount>;

        if $i1 != 1 goto label1;

        $b7 = 16;

        goto label2;

     label1:
        $b7 = 12;

     label2:
        b0 = $b7;

     label3:
        $i2 = r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate>;

        i8 = staticinvoke <android.media.AudioRecord: int getMinBufferSize(int,int,int)>($i2, b0, 2);

        if i8 > 0 goto label4;

        i8 = virtualinvoke r1.<androidx.camera.core.impl.VideoCaptureConfig: int getAudioMinBufferSize()>();

     label4:
        $r3 = new android.media.AudioRecord;

        $i4 = r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate>;

        $i3 = i8 * 2;

        specialinvoke $r3.<android.media.AudioRecord: void <init>(int,int,int,int,int)>(5, $i4, b0, 2, $i3);

        r2 = $r3;

        $i5 = virtualinvoke r2.<android.media.AudioRecord: int getState()>();

        if $i5 != 1 goto label6;

        r0.<androidx.camera.core.VideoCapture: int mAudioBufferSize> = i8;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("source: 5 audioSampleRate: ");

        $i6 = r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" channelConfig: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" audioFormat: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bufferSize: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r13);

     label5:
        return r2;

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;

        r15 = $r14;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("VideoCapture", "Exception, keep trying.", r15);

     label8:
        return null;

        catch java.lang.Exception from label3 to label5 with label7;
    }

    private void setAudioParametersByCamcorderProfile(android.util.Size, java.lang.String)
    {
        androidx.camera.core.VideoCapture r0;
        android.util.Size r1;
        java.lang.String r2;
        android.media.CamcorderProfile r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        androidx.camera.core.impl.UseCaseConfig $r4;
        boolean $z0, z1;
        java.lang.Throwable $r5, r7;
        int[] r6;
        androidx.camera.core.impl.VideoCaptureConfig r8;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: android.util.Size;

        r2 := @parameter1: java.lang.String;

        z1 = 0;

     label1:
        r6 = <androidx.camera.core.VideoCapture: int[] CamcorderQuality>;

        i0 = lengthof r6;

        i14 = 0;

     label2:
        if i14 >= i0 goto label4;

        i1 = r6[i14];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        $z0 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i5, i1);

        if $z0 == 0 goto label3;

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        r3 = staticinvoke <android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>($i6, i1);

        $i7 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i8 = r3.<android.media.CamcorderProfile: int videoFrameWidth>;

        if $i7 != $i8 goto label3;

        $i9 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i10 = r3.<android.media.CamcorderProfile: int videoFrameHeight>;

        if $i9 != $i10 goto label3;

        $i11 = r3.<android.media.CamcorderProfile: int audioChannels>;

        r0.<androidx.camera.core.VideoCapture: int mAudioChannelCount> = $i11;

        $i12 = r3.<android.media.CamcorderProfile: int audioSampleRate>;

        r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate> = $i12;

        $i13 = r3.<android.media.CamcorderProfile: int audioBitRate>;

        r0.<androidx.camera.core.VideoCapture: int mAudioBitRate> = $i13;

        z1 = 1;

        goto label4;

     label3:
        i14 = i14 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r7 = $r5;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "The camera Id is not an integer because the camera may be a removable device. Use the default values for the audio related settings.");

     label6:
        if z1 != 0 goto label7;

        $r4 = virtualinvoke r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r8 = (androidx.camera.core.impl.VideoCaptureConfig) $r4;

        $i2 = virtualinvoke r8.<androidx.camera.core.impl.VideoCaptureConfig: int getAudioChannelCount()>();

        r0.<androidx.camera.core.VideoCapture: int mAudioChannelCount> = $i2;

        $i3 = virtualinvoke r8.<androidx.camera.core.impl.VideoCaptureConfig: int getAudioSampleRate()>();

        r0.<androidx.camera.core.VideoCapture: int mAudioSampleRate> = $i3;

        $i4 = virtualinvoke r8.<androidx.camera.core.impl.VideoCaptureConfig: int getAudioBitRate()>();

        r0.<androidx.camera.core.VideoCapture: int mAudioBitRate> = $i4;

     label7:
        return;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    private boolean removeRecordingResultIfNoVideoKeyFrameArrived(androidx.camera.core.VideoCapture$OutputFileOptions)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OutputFileOptions r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r7;
        boolean $z0, $z1, $z2, $z3, z5;
        java.lang.String $r6;
        android.net.Uri $r8, $r9;
        java.io.File r10;
        android.content.ContentResolver r11;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("check Recording Result First Video Key Frame Write: ");

        $r4 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r6);

        $r7 = r0.<androidx.camera.core.VideoCapture: java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoKeyFrameWrite>;

        $z1 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "The recording result has no key frame.");

        z5 = 0;

        goto label2;

     label1:
        z5 = 1;

     label2:
        $z2 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: boolean isSavingToFile()>();

        if $z2 == 0 goto label4;

        r10 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File getFile()>();

        if z5 != 0 goto label3;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "Delete file.");

        virtualinvoke r10.<java.io.File: boolean delete()>();

     label3:
        goto label5;

     label4:
        $z3 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: boolean isSavingToMediaStore()>();

        if $z3 == 0 goto label5;

        if z5 != 0 goto label5;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", "Delete file.");

        $r8 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        if $r8 == null goto label5;

        r11 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver getContentResolver()>();

        $r9 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        virtualinvoke r11.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r9, null, null);

     label5:
        return z5;
    }

    private android.media.MediaMuxer initMediaMuxer(androidx.camera.core.VideoCapture$OutputFileOptions) throws java.io.IOException
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OutputFileOptions r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2, $r23;
        android.content.ContentValues $r3, $r21, $r31, r32;
        android.content.ContentResolver $r4, $r8, $r13;
        android.net.Uri $r5, $r6, $r7, $r9, $r14, $r25;
        int $i0, $i1;
        android.os.ParcelFileDescriptor $r10, $r11;
        java.io.FileDescriptor $r12, $r22;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18, $r27, r33;
        android.media.MediaMuxer $r19, $r26, r30;
        java.io.IOException $r20;
        java.io.File $r24, r29;
        java.lang.Throwable $r28, r34;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileOptions;

        $z0 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: boolean isSavingToFile()>();

        if $z0 == 0 goto label01;

        r29 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File getFile()>();

        $r24 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File getFile()>();

        $r25 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r24);

        r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri> = $r25;

        $r26 = new android.media.MediaMuxer;

        $r27 = virtualinvoke r29.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r26.<android.media.MediaMuxer: void <init>(java.lang.String,int)>($r27, 0);

        r30 = $r26;

        goto label12;

     label01:
        $z1 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: boolean isSavingToFileDescriptor()>();

        if $z1 == 0 goto label03;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 26 goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Using a FileDescriptor to record a video is only supported for Android 8.0 or above.");

        throw $r23;

     label02:
        $r22 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.FileDescriptor getFileDescriptor()>();

        r30 = staticinvoke <androidx.camera.core.VideoCapture$Api26Impl: android.media.MediaMuxer createMediaMuxer(java.io.FileDescriptor,int)>($r22, 0);

        goto label12;

     label03:
        $z2 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: boolean isSavingToMediaStore()>();

        if $z2 == 0 goto label11;

        $r3 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues getContentValues()>();

        if $r3 == null goto label04;

        $r31 = new android.content.ContentValues;

        $r21 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues getContentValues()>();

        specialinvoke $r31.<android.content.ContentValues: void <init>(android.content.ContentValues)>($r21);

        goto label05;

     label04:
        $r31 = new android.content.ContentValues;

        specialinvoke $r31.<android.content.ContentValues: void <init>()>();

     label05:
        r32 = $r31;

        $r4 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.net.Uri getSaveCollection()>();

        $r6 = virtualinvoke $r4.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r5, r32);

        r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri> = $r6;

        $r7 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        if $r7 != null goto label06;

        $r20 = new java.io.IOException;

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("Invalid Uri!");

        throw $r20;

     label06:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 26 goto label07;

        $r13 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver getContentResolver()>();

        $r14 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        r33 = staticinvoke <androidx.camera.core.internal.utils.VideoUtil: java.lang.String getAbsolutePathFromUri(android.content.ContentResolver,android.net.Uri)>($r13, $r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saved Location Path: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("VideoCapture", $r18);

        $r19 = new android.media.MediaMuxer;

        specialinvoke $r19.<android.media.MediaMuxer: void <init>(java.lang.String,int)>(r33, 0);

        r30 = $r19;

        goto label08;

     label07:
        $r8 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver getContentResolver()>();

        $r9 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        $r10 = virtualinvoke $r8.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>($r9, "rw");

        r0.<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor> = $r10;

        $r11 = r0.<androidx.camera.core.VideoCapture: android.os.ParcelFileDescriptor mParcelFileDescriptor>;

        $r12 = virtualinvoke $r11.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r30 = staticinvoke <androidx.camera.core.VideoCapture$Api26Impl: android.media.MediaMuxer createMediaMuxer(java.io.FileDescriptor,int)>($r12, 0);

     label08:
        goto label10;

     label09:
        $r28 := @caughtexception;

        r34 = $r28;

        r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri> = null;

        throw r34;

     label10:
        goto label12;

     label11:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The OutputFileOptions should assign before recording");

        throw $r2;

     label12:
        return r30;

        catch java.io.IOException from label06 to label08 with label09;
    }

    private static void lambda$releaseCameraSurface$7(boolean, android.media.MediaCodec)
    {
        boolean z0;
        android.media.MediaCodec r0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: android.media.MediaCodec;

        if z0 == 0 goto label1;

        if r0 == null goto label1;

        virtualinvoke r0.<android.media.MediaCodec: void release()>();

     label1:
        return;
    }

    private void lambda$onDetached$6()
    {
        androidx.camera.core.VideoCapture r0;

        r0 := @this: androidx.camera.core.VideoCapture;

        specialinvoke r0.<androidx.camera.core.VideoCapture: void releaseResources()>();

        return;
    }

    private void lambda$stopRecording$5()
    {
        androidx.camera.core.VideoCapture r0;

        r0 := @this: androidx.camera.core.VideoCapture;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void stopRecording()>();

        return;
    }

    private void lambda$startRecording$4(androidx.camera.core.VideoCapture$OnVideoSavedCallback, java.lang.String, android.util.Size, androidx.camera.core.VideoCapture$OutputFileOptions, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r1;
        java.lang.String r2;
        android.util.Size r3;
        androidx.camera.core.VideoCapture$OutputFileOptions r4;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r5;
        boolean z0;
        androidx.camera.core.VideoCapture$OutputFileResults $r6;
        android.net.Uri $r7;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.util.Size;

        r4 := @parameter3: androidx.camera.core.VideoCapture$OutputFileOptions;

        r5 := @parameter4: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        z0 = virtualinvoke r0.<androidx.camera.core.VideoCapture: boolean videoEncode(androidx.camera.core.VideoCapture$OnVideoSavedCallback,java.lang.String,android.util.Size,androidx.camera.core.VideoCapture$OutputFileOptions)>(r1, r2, r3, r4);

        if z0 != 0 goto label1;

        $r6 = new androidx.camera.core.VideoCapture$OutputFileResults;

        $r7 = r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri>;

        specialinvoke $r6.<androidx.camera.core.VideoCapture$OutputFileResults: void <init>(android.net.Uri)>($r7);

        interfaceinvoke r1.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onVideoSaved(androidx.camera.core.VideoCapture$OutputFileResults)>($r6);

        r0.<androidx.camera.core.VideoCapture: android.net.Uri mSavedVideoUri> = null;

     label1:
        virtualinvoke r5.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    private void lambda$startRecording$3(androidx.camera.core.VideoCapture$OnVideoSavedCallback)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r1;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: boolean audioEncode(androidx.camera.core.VideoCapture$OnVideoSavedCallback)>(r1);

        return;
    }

    private void lambda$startRecording$2()
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.impl.CameraInternal $r1;
        java.lang.String $r2;
        android.util.Size $r3;

        r0 := @this: androidx.camera.core.VideoCapture;

        r0.<androidx.camera.core.VideoCapture: com.google.common.util.concurrent.ListenableFuture mRecordingFuture> = null;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture: java.lang.String getCameraId()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.VideoCapture: android.util.Size getAttachedSurfaceResolution()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void setupEncoder(java.lang.String,android.util.Size)>($r2, $r3);

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void notifyReset()>();

     label1:
        return;
    }

    private static java.lang.Object lambda$startRecording$1(java.util.concurrent.atomic.AtomicReference, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return "startRecording";
    }

    private void lambda$startRecording$0(androidx.camera.core.VideoCapture$OutputFileOptions, java.util.concurrent.Executor, androidx.camera.core.VideoCapture$OnVideoSavedCallback)
    {
        androidx.camera.core.VideoCapture r0;
        androidx.camera.core.VideoCapture$OutputFileOptions r1;
        java.util.concurrent.Executor r2;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r3;

        r0 := @this: androidx.camera.core.VideoCapture;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        virtualinvoke r0.<androidx.camera.core.VideoCapture: void startRecording(androidx.camera.core.VideoCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.VideoCapture$Defaults $r0;
        int[] $r1;

        $r0 = new androidx.camera.core.VideoCapture$Defaults;

        specialinvoke $r0.<androidx.camera.core.VideoCapture$Defaults: void <init>()>();

        <androidx.camera.core.VideoCapture: androidx.camera.core.VideoCapture$Defaults DEFAULT_CONFIG> = $r0;

        $r1 = newarray (int)[4];

        $r1[0] = 8;

        $r1[1] = 6;

        $r1[2] = 5;

        $r1[3] = 4;

        <androidx.camera.core.VideoCapture: int[] CamcorderQuality> = $r1;

        return;
    }

androidx.camera.core.VideoCapture$1
<androidx.camera.core.VideoCapture$1: java.lang.String val$cameraId>
<androidx.camera.core.VideoCapture$1: android.util.Size val$resolution>
<androidx.camera.core.VideoCapture$1: androidx.camera.core.VideoCapture this$0>
    void <init>(androidx.camera.core.VideoCapture, java.lang.String, android.util.Size)
    {
        androidx.camera.core.VideoCapture$1 r0;
        androidx.camera.core.VideoCapture r1;
        java.lang.String r2;
        android.util.Size r3;

        r0 := @this: androidx.camera.core.VideoCapture$1;

        r1 := @parameter0: androidx.camera.core.VideoCapture;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.util.Size;

        r0.<androidx.camera.core.VideoCapture$1: androidx.camera.core.VideoCapture this$0> = r1;

        r0.<androidx.camera.core.VideoCapture$1: java.lang.String val$cameraId> = r2;

        r0.<androidx.camera.core.VideoCapture$1: android.util.Size val$resolution> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onError(androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.SessionConfig$SessionError)
    {
        androidx.camera.core.VideoCapture$1 r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.SessionConfig$SessionError r2;
        java.lang.String $r3, $r6;
        androidx.camera.core.VideoCapture $r4, $r7, $r8;
        boolean $z0;
        android.util.Size $r5;

        r0 := @this: androidx.camera.core.VideoCapture$1;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig$SessionError;

        $r4 = r0.<androidx.camera.core.VideoCapture$1: androidx.camera.core.VideoCapture this$0>;

        $r3 = r0.<androidx.camera.core.VideoCapture$1: java.lang.String val$cameraId>;

        $z0 = virtualinvoke $r4.<androidx.camera.core.VideoCapture: boolean isCurrentCamera(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.camera.core.VideoCapture$1: androidx.camera.core.VideoCapture this$0>;

        $r6 = r0.<androidx.camera.core.VideoCapture$1: java.lang.String val$cameraId>;

        $r5 = r0.<androidx.camera.core.VideoCapture$1: android.util.Size val$resolution>;

        virtualinvoke $r7.<androidx.camera.core.VideoCapture: void setupEncoder(java.lang.String,android.util.Size)>($r6, $r5);

        $r8 = r0.<androidx.camera.core.VideoCapture$1: androidx.camera.core.VideoCapture this$0>;

        virtualinvoke $r8.<androidx.camera.core.VideoCapture: void notifyReset()>();

     label1:
        return;
    }

androidx.camera.core.VideoCapture$Api23Impl
    private void <init>()
    {
        androidx.camera.core.VideoCapture$Api23Impl r0;

        r0 := @this: androidx.camera.core.VideoCapture$Api23Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int getCodecExceptionErrorCode(android.media.MediaCodec$CodecException)
    {
        android.media.MediaCodec$CodecException r0;
        int $i0;

        r0 := @parameter0: android.media.MediaCodec$CodecException;

        $i0 = virtualinvoke r0.<android.media.MediaCodec$CodecException: int getErrorCode()>();

        return $i0;
    }

androidx.camera.core.VideoCapture$Api26Impl
    private void <init>()
    {
        androidx.camera.core.VideoCapture$Api26Impl r0;

        r0 := @this: androidx.camera.core.VideoCapture$Api26Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.media.MediaMuxer createMediaMuxer(java.io.FileDescriptor, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int i0;
        android.media.MediaMuxer $r1;

        r0 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        $r1 = new android.media.MediaMuxer;

        specialinvoke $r1.<android.media.MediaMuxer: void <init>(java.io.FileDescriptor,int)>(r0, i0);

        return $r1;
    }

androidx.camera.core.VideoCapture$Builder
<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>
    public void <init>()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        specialinvoke r0.<androidx.camera.core.VideoCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r1);

        return;
    }

    private void <init>(androidx.camera.core.impl.MutableOptionsBundle)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        java.lang.Class r2;
        androidx.camera.core.impl.Config$Option $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.MutableOptionsBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig> = r1;

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, null);

        r2 = (java.lang.Class) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Landroidx/camera/core/VideoCapture;");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target class configuration for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetClass(java.lang.Class)>(class "Landroidx/camera/core/VideoCapture;");

        return;
    }

    static androidx.camera.core.VideoCapture$Builder fromConfig(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.Config r0;
        androidx.camera.core.VideoCapture$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.Config;

        $r1 = new androidx.camera.core.VideoCapture$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.VideoCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public static androidx.camera.core.VideoCapture$Builder fromConfig(androidx.camera.core.impl.VideoCaptureConfig)
    {
        androidx.camera.core.impl.VideoCaptureConfig r0;
        androidx.camera.core.VideoCapture$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.VideoCaptureConfig;

        $r1 = new androidx.camera.core.VideoCapture$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.VideoCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public androidx.camera.core.impl.MutableConfig getMutableConfig()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        return $r1;
    }

    public androidx.camera.core.impl.VideoCaptureConfig getUseCaseConfig()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.VideoCaptureConfig $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;
        androidx.camera.core.impl.OptionsBundle $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = new androidx.camera.core.impl.VideoCaptureConfig;

        $r2 = r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        $r3 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>($r2);

        specialinvoke $r1.<androidx.camera.core.impl.VideoCaptureConfig: void <init>(androidx.camera.core.impl.OptionsBundle)>($r3);

        return $r1;
    }

    public androidx.camera.core.VideoCapture build()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.MutableConfig $r1, $r6;
        androidx.camera.core.impl.Config$Option $r2, $r7;
        java.lang.Object $r3, $r8;
        androidx.camera.core.VideoCapture $r4;
        androidx.camera.core.impl.VideoCaptureConfig $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r3 = interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, null);

        if $r3 == null goto label1;

        $r6 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r7 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        $r8 = interfaceinvoke $r6.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r7, null);

        if $r8 == null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use both setTargetResolution and setTargetAspectRatio on the same config.");

        throw $r9;

     label1:
        $r4 = new androidx.camera.core.VideoCapture;

        $r5 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.VideoCaptureConfig getUseCaseConfig()>();

        specialinvoke $r4.<androidx.camera.core.VideoCapture: void <init>(androidx.camera.core.impl.VideoCaptureConfig)>($r5);

        return $r4;
    }

    public androidx.camera.core.VideoCapture$Builder setVideoFrameRate(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_VIDEO_FRAME_RATE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setBitRate(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_BIT_RATE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setIFrameInterval(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_INTRA_FRAME_INTERVAL>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setAudioBitRate(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_AUDIO_BIT_RATE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setAudioSampleRate(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_AUDIO_SAMPLE_RATE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setAudioChannelCount(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_AUDIO_CHANNEL_COUNT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setAudioMinBufferSize(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.VideoCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_AUDIO_MIN_BUFFER_SIZE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setTargetClass(java.lang.Class)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        java.lang.Class r1;
        java.lang.String r2, $r9;
        androidx.camera.core.impl.MutableConfig $r3, $r5;
        androidx.camera.core.impl.Config$Option $r4, $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;
        java.util.UUID $r12;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r4 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r4, r1);

        $r5 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r6 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        $r7 = interfaceinvoke $r5.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, null);

        if null != $r7 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetName(java.lang.String)>(r2);

     label1:
        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setTargetName(java.lang.String)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        java.lang.String r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setTargetAspectRatio(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setTargetRotation(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ROTATION>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setTargetResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setMaxResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        java.util.List r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_SUPPORTED_RESOLUTIONS>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.internal.ThreadConfig: androidx.camera.core.impl.Config$Option OPTION_BACKGROUND_EXECUTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_SESSION_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.CaptureConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_CAPTURE_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_SESSION_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_SURFACE_OCCUPANCY_PRIORITY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.CameraSelector r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_SELECTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.UseCase$EventCallback r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.internal.UseCaseEventConfig: androidx.camera.core.impl.Config$Option OPTION_USE_CASE_EVENT_CALLBACK>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.VideoCapture$Builder setZslDisabled(boolean)
    {
        androidx.camera.core.VideoCapture$Builder r0;
        boolean z0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_ZSL_DISABLED>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public volatile androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.impl.VideoCaptureConfig $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.VideoCaptureConfig getUseCaseConfig()>();

        return $r1;
    }

    public volatile java.lang.Object setZslDisabled(boolean)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r1;
        boolean z0;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setZslDisabled(boolean)>(z0);

        return $r1;
    }

    public volatile java.lang.Object setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.CameraSelector r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setCameraSelector(androidx.camera.core.CameraSelector)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setSurfaceOccupancyPriority(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetName(java.lang.String)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        java.lang.String r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetName(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetClass(java.lang.Class)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        java.lang.Class r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetClass(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build()
    {
        androidx.camera.core.VideoCapture$Builder r0;
        androidx.camera.core.VideoCapture $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture build()>();

        return $r1;
    }

    public volatile java.lang.Object setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        androidx.camera.core.UseCase$EventCallback r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        java.util.List r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setSupportedResolutions(java.util.List)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setMaxResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setMaxResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setDefaultResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetResolution(android.util.Size)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetRotation(int)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetRotation(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setTargetAspectRatio(int)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetAspectRatio(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.camera.core.VideoCapture$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setBackgroundExecutor(java.util.concurrent.Executor)>(r1);

        return $r2;
    }

androidx.camera.core.VideoCapture$Defaults
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_VIDEO_FRAME_RATE>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_BIT_RATE>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_INTRA_FRAME_INTERVAL>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_AUDIO_BIT_RATE>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_AUDIO_SAMPLE_RATE>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_AUDIO_CHANNEL_COUNT>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_AUDIO_MIN_BUFFER_SIZE>
<androidx.camera.core.VideoCapture$Defaults: android.util.Size DEFAULT_MAX_RESOLUTION>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_SURFACE_OCCUPANCY_PRIORITY>
<androidx.camera.core.VideoCapture$Defaults: int DEFAULT_ASPECT_RATIO>
<androidx.camera.core.VideoCapture$Defaults: androidx.camera.core.impl.VideoCaptureConfig DEFAULT_CONFIG>
    public void <init>()
    {
        androidx.camera.core.VideoCapture$Defaults r0;

        r0 := @this: androidx.camera.core.VideoCapture$Defaults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.core.impl.VideoCaptureConfig getConfig()
    {
        androidx.camera.core.VideoCapture$Defaults r0;
        androidx.camera.core.impl.VideoCaptureConfig $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Defaults;

        $r1 = <androidx.camera.core.VideoCapture$Defaults: androidx.camera.core.impl.VideoCaptureConfig DEFAULT_CONFIG>;

        return $r1;
    }

    public volatile androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.core.VideoCapture$Defaults r0;
        androidx.camera.core.impl.VideoCaptureConfig $r1;

        r0 := @this: androidx.camera.core.VideoCapture$Defaults;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Defaults: androidx.camera.core.impl.VideoCaptureConfig getConfig()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.VideoCapture$Builder r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        android.util.Size $r1, $r10;
        androidx.camera.core.impl.VideoCaptureConfig $r13;

        $r1 = new android.util.Size;

        specialinvoke $r1.<android.util.Size: void <init>(int,int)>(1920, 1080);

        <androidx.camera.core.VideoCapture$Defaults: android.util.Size DEFAULT_MAX_RESOLUTION> = $r1;

        $r2 = new androidx.camera.core.VideoCapture$Builder;

        specialinvoke $r2.<androidx.camera.core.VideoCapture$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setVideoFrameRate(int)>(30);

        $r4 = virtualinvoke $r3.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setBitRate(int)>(8388608);

        $r5 = virtualinvoke $r4.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setIFrameInterval(int)>(1);

        $r6 = virtualinvoke $r5.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setAudioBitRate(int)>(64000);

        $r7 = virtualinvoke $r6.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setAudioSampleRate(int)>(8000);

        $r8 = virtualinvoke $r7.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setAudioChannelCount(int)>(1);

        $r9 = virtualinvoke $r8.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setAudioMinBufferSize(int)>(1024);

        $r10 = <androidx.camera.core.VideoCapture$Defaults: android.util.Size DEFAULT_MAX_RESOLUTION>;

        $r11 = virtualinvoke $r9.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setMaxResolution(android.util.Size)>($r10);

        $r12 = virtualinvoke $r11.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setSurfaceOccupancyPriority(int)>(3);

        r0 = virtualinvoke $r12.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture$Builder setTargetAspectRatio(int)>(1);

        $r13 = virtualinvoke r0.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.impl.VideoCaptureConfig getUseCaseConfig()>();

        <androidx.camera.core.VideoCapture$Defaults: androidx.camera.core.impl.VideoCaptureConfig DEFAULT_CONFIG> = $r13;

        return;
    }

androidx.camera.core.VideoCapture$Metadata
<androidx.camera.core.VideoCapture$Metadata: android.location.Location location>
    public void <init>()
    {
        androidx.camera.core.VideoCapture$Metadata r0;

        r0 := @this: androidx.camera.core.VideoCapture$Metadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.camera.core.VideoCapture$OnVideoSavedCallback
<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onVideoSaved(androidx.camera.core.VideoCapture$OutputFileResults)>
<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>
androidx.camera.core.VideoCapture$OutputFileOptions$Builder
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.File mFile>
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.FileDescriptor mFileDescriptor>
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver>
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection>
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues>
<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: androidx.camera.core.VideoCapture$Metadata mMetadata>
    public void <init>(java.io.File)
    {
        androidx.camera.core.VideoCapture$OutputFileOptions$Builder r0;
        java.io.File r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions$Builder;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.File mFile> = r1;

        return;
    }

    public void <init>(java.io.FileDescriptor)
    {
        androidx.camera.core.VideoCapture$OutputFileOptions$Builder r0;
        java.io.FileDescriptor r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions$Builder;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Using a FileDescriptor to record a video is only supported for Android 8.0 or above.");

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.FileDescriptor mFileDescriptor> = r1;

        return;
    }

    public void <init>(android.content.ContentResolver, android.net.Uri, android.content.ContentValues)
    {
        androidx.camera.core.VideoCapture$OutputFileOptions$Builder r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        android.content.ContentValues r3;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions$Builder;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.content.ContentValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver> = r1;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection> = r2;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues> = r3;

        return;
    }

    public androidx.camera.core.VideoCapture$OutputFileOptions$Builder setMetadata(androidx.camera.core.VideoCapture$Metadata)
    {
        androidx.camera.core.VideoCapture$OutputFileOptions$Builder r0;
        androidx.camera.core.VideoCapture$Metadata r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions$Builder;

        r1 := @parameter0: androidx.camera.core.VideoCapture$Metadata;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: androidx.camera.core.VideoCapture$Metadata mMetadata> = r1;

        return r0;
    }

    public androidx.camera.core.VideoCapture$OutputFileOptions build()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions$Builder r0;
        androidx.camera.core.VideoCapture$OutputFileOptions $r1;
        androidx.camera.core.VideoCapture$Metadata $r2;
        android.content.ContentValues $r3;
        android.net.Uri $r4;
        android.content.ContentResolver $r5;
        java.io.FileDescriptor $r6;
        java.io.File $r7;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions$Builder;

        $r1 = new androidx.camera.core.VideoCapture$OutputFileOptions;

        $r7 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.File mFile>;

        $r6 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: java.io.FileDescriptor mFileDescriptor>;

        $r5 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver>;

        $r4 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection>;

        $r3 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues>;

        $r2 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions$Builder: androidx.camera.core.VideoCapture$Metadata mMetadata>;

        specialinvoke $r1.<androidx.camera.core.VideoCapture$OutputFileOptions: void <init>(java.io.File,java.io.FileDescriptor,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,androidx.camera.core.VideoCapture$Metadata)>($r7, $r6, $r5, $r4, $r3, $r2);

        return $r1;
    }

androidx.camera.core.VideoCapture$OutputFileOptions
<androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata EMPTY_METADATA>
<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File mFile>
<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.FileDescriptor mFileDescriptor>
<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver mContentResolver>
<androidx.camera.core.VideoCapture$OutputFileOptions: android.net.Uri mSaveCollection>
<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues mContentValues>
<androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata mMetadata>
    void <init>(java.io.File, java.io.FileDescriptor, android.content.ContentResolver, android.net.Uri, android.content.ContentValues, androidx.camera.core.VideoCapture$Metadata)
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        java.io.File r1;
        java.io.FileDescriptor r2;
        android.content.ContentResolver r3;
        android.net.Uri r4;
        android.content.ContentValues r5;
        androidx.camera.core.VideoCapture$Metadata r6, $r8;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: android.content.ContentResolver;

        r4 := @parameter3: android.net.Uri;

        r5 := @parameter4: android.content.ContentValues;

        r6 := @parameter5: androidx.camera.core.VideoCapture$Metadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File mFile> = r1;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.FileDescriptor mFileDescriptor> = r2;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver mContentResolver> = r3;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.net.Uri mSaveCollection> = r4;

        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues mContentValues> = r5;

        if r6 != null goto label1;

        $r8 = <androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata EMPTY_METADATA>;

        goto label2;

     label1:
        $r8 = r6;

     label2:
        r0.<androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata mMetadata> = $r8;

        return;
    }

    java.io.File getFile()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        java.io.File $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File mFile>;

        return $r1;
    }

    java.io.FileDescriptor getFileDescriptor()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        java.io.FileDescriptor $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.FileDescriptor mFileDescriptor>;

        return $r1;
    }

    android.content.ContentResolver getContentResolver()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        android.content.ContentResolver $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    android.net.Uri getSaveCollection()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        android.net.Uri $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.net.Uri mSaveCollection>;

        return $r1;
    }

    android.content.ContentValues getContentValues()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        android.content.ContentValues $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues mContentValues>;

        return $r1;
    }

    androidx.camera.core.VideoCapture$Metadata getMetadata()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        androidx.camera.core.VideoCapture$Metadata $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata mMetadata>;

        return $r1;
    }

    boolean isSavingToMediaStore()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        android.net.Uri $r1;
        android.content.ContentResolver $r2;
        android.content.ContentValues $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.net.Uri getSaveCollection()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentResolver getContentResolver()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<androidx.camera.core.VideoCapture$OutputFileOptions: android.content.ContentValues getContentValues()>();

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isSavingToFile()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.File getFile()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isSavingToFileDescriptor()
    {
        androidx.camera.core.VideoCapture$OutputFileOptions r0;
        java.io.FileDescriptor $r1;
        boolean $z0;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileOptions;

        $r1 = virtualinvoke r0.<androidx.camera.core.VideoCapture$OutputFileOptions: java.io.FileDescriptor getFileDescriptor()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        androidx.camera.core.VideoCapture$Metadata $r0;

        $r0 = new androidx.camera.core.VideoCapture$Metadata;

        specialinvoke $r0.<androidx.camera.core.VideoCapture$Metadata: void <init>()>();

        <androidx.camera.core.VideoCapture$OutputFileOptions: androidx.camera.core.VideoCapture$Metadata EMPTY_METADATA> = $r0;

        return;
    }

androidx.camera.core.VideoCapture$OutputFileResults
<androidx.camera.core.VideoCapture$OutputFileResults: android.net.Uri mSavedUri>
    void <init>(android.net.Uri)
    {
        androidx.camera.core.VideoCapture$OutputFileResults r0;
        android.net.Uri r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileResults;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$OutputFileResults: android.net.Uri mSavedUri> = r1;

        return;
    }

    public android.net.Uri getSavedUri()
    {
        androidx.camera.core.VideoCapture$OutputFileResults r0;
        android.net.Uri $r1;

        r0 := @this: androidx.camera.core.VideoCapture$OutputFileResults;

        $r1 = r0.<androidx.camera.core.VideoCapture$OutputFileResults: android.net.Uri mSavedUri>;

        return $r1;
    }

androidx.camera.core.VideoCapture$VideoCaptureError
androidx.camera.core.VideoCapture$VideoEncoderInitStatus
<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED>
<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED>
<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE>
<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED>
<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] $VALUES>
    public static androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] values()
    {
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.core.VideoCapture$VideoEncoderInitStatus[]) $r1;

        return $r2;
    }

    public static androidx.camera.core.VideoCapture$VideoEncoderInitStatus valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/core/VideoCapture$VideoEncoderInitStatus;", r0);

        $r2 = (androidx.camera.core.VideoCapture$VideoEncoderInitStatus) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.core.VideoCapture$VideoEncoderInitStatus;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] $r4;

        $r0 = new androidx.camera.core.VideoCapture$VideoEncoderInitStatus;

        specialinvoke $r0.<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: void <init>(java.lang.String,int)>("VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED", 0);

        <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED> = $r0;

        $r1 = new androidx.camera.core.VideoCapture$VideoEncoderInitStatus;

        specialinvoke $r1.<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: void <init>(java.lang.String,int)>("VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED", 1);

        <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED> = $r1;

        $r2 = new androidx.camera.core.VideoCapture$VideoEncoderInitStatus;

        specialinvoke $r2.<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: void <init>(java.lang.String,int)>("VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE", 2);

        <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE> = $r2;

        $r3 = new androidx.camera.core.VideoCapture$VideoEncoderInitStatus;

        specialinvoke $r3.<androidx.camera.core.VideoCapture$VideoEncoderInitStatus: void <init>(java.lang.String,int)>("VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED", 3);

        <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED> = $r3;

        $r4 = newarray (androidx.camera.core.VideoCapture$VideoEncoderInitStatus)[4];

        $r5 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_UNINITIALIZED>;

        $r4[0] = $r5;

        $r6 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INITIALIZED_FAILED>;

        $r4[1] = $r6;

        $r7 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_INSUFFICIENT_RESOURCE>;

        $r4[2] = $r7;

        $r8 = <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus VIDEO_ENCODER_INIT_STATUS_RESOURCE_RECLAIMED>;

        $r4[3] = $r8;

        <androidx.camera.core.VideoCapture$VideoEncoderInitStatus: androidx.camera.core.VideoCapture$VideoEncoderInitStatus[] $VALUES> = $r4;

        return;
    }

androidx.camera.core.VideoCapture$VideoSavedListenerWrapper
<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: java.util.concurrent.Executor mExecutor>
<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: androidx.camera.core.VideoCapture$OnVideoSavedCallback mOnVideoSavedCallback>
    void <init>(java.util.concurrent.Executor, androidx.camera.core.VideoCapture$OnVideoSavedCallback)
    {
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback r2;

        r0 := @this: androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.VideoCapture$OnVideoSavedCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: java.util.concurrent.Executor mExecutor> = r1;

        r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: androidx.camera.core.VideoCapture$OnVideoSavedCallback mOnVideoSavedCallback> = r2;

        return;
    }

    public void onVideoSaved(androidx.camera.core.VideoCapture$OutputFileResults)
    {
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r0;
        androidx.camera.core.VideoCapture$OutputFileResults r1;
        java.lang.Throwable r2, $r5;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileResults;

     label1:
        $r3 = r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: java.util.concurrent.Executor mExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture$VideoSavedListenerWrapper,androidx.camera.core.VideoCapture$OutputFileResults)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: void lambda$onVideoSaved$0(androidx.camera.core.VideoCapture$OutputFileResults)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapture", "Unable to post to the supplied executor.");

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void onError(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2, r3, $r6;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

     label1:
        $r4 = r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.VideoCapture$VideoSavedListenerWrapper,int,java.lang.String,java.lang.Throwable)>(r0, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: void lambda$onError$1(int,java.lang.String,java.lang.Throwable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapture", "Unable to post to the supplied executor.");

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private void lambda$onError$1(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback $r3;

        r0 := @this: androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r3 = r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: androidx.camera.core.VideoCapture$OnVideoSavedCallback mOnVideoSavedCallback>;

        interfaceinvoke $r3.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        return;
    }

    private void lambda$onVideoSaved$0(androidx.camera.core.VideoCapture$OutputFileResults)
    {
        androidx.camera.core.VideoCapture$VideoSavedListenerWrapper r0;
        androidx.camera.core.VideoCapture$OutputFileResults r1;
        androidx.camera.core.VideoCapture$OnVideoSavedCallback $r2;

        r0 := @this: androidx.camera.core.VideoCapture$VideoSavedListenerWrapper;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileResults;

        $r2 = r0.<androidx.camera.core.VideoCapture$VideoSavedListenerWrapper: androidx.camera.core.VideoCapture$OnVideoSavedCallback mOnVideoSavedCallback>;

        interfaceinvoke $r2.<androidx.camera.core.VideoCapture$OnVideoSavedCallback: void onVideoSaved(androidx.camera.core.VideoCapture$OutputFileResults)>(r1);

        return;
    }

