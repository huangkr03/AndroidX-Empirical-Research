androidx.compose.material.ripple.RippleContainer
<androidx.compose.material.ripple.RippleContainer: int MaxRippleHosts>
<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts>
<androidx.compose.material.ripple.RippleContainer: java.util.List unusedRippleHosts>
<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>
<androidx.compose.material.ripple.RippleContainer: int nextHostIndex>
    public void <init>(android.content.Context)
    {
        androidx.compose.material.ripple.RippleContainer r0;
        android.content.Context r1;
        androidx.compose.material.ripple.RippleHostView r2, r3, r4, $r10;
        java.util.ArrayList $r5, $r7;
        java.util.List $r6, $r8, $r12, $r13;
        androidx.compose.material.ripple.RippleHostMap $r9;
        android.view.View $r11;
        int $i0;
        java.lang.Boolean $r14;

        r0 := @this: androidx.compose.material.ripple.RippleContainer;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context)>(r1);

        r0.<androidx.compose.material.ripple.RippleContainer: int MaxRippleHosts> = 5;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = (java.util.List) $r5;

        r0.<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = (java.util.List) $r7;

        r0.<androidx.compose.material.ripple.RippleContainer: java.util.List unusedRippleHosts> = $r8;

        $r9 = new androidx.compose.material.ripple.RippleHostMap;

        specialinvoke $r9.<androidx.compose.material.ripple.RippleHostMap: void <init>()>();

        r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap> = $r9;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: void setClipChildren(boolean)>(0);

        $r10 = new androidx.compose.material.ripple.RippleHostView;

        specialinvoke $r10.<androidx.compose.material.ripple.RippleHostView: void <init>(android.content.Context)>(r1);

        r3 = $r10;

        r4 = r3;

        $r11 = (android.view.View) r4;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: void addView(android.view.View)>($r11);

        r2 = r3;

        $r12 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r13 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List unusedRippleHosts>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r2);

        r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex> = 1;

        $i0 = <androidx.compose.ui.R$id: int hide_in_inspector_tag>;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: void setTag(int,java.lang.Object)>($i0, $r14);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.material.ripple.RippleContainer r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.compose.material.ripple.RippleContainer;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.material.ripple.RippleContainer r0;
        int i0, i1;

        r0 := @this: androidx.compose.material.ripple.RippleContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: void setMeasuredDimension(int,int)>(0, 0);

        return;
    }

    public final androidx.compose.material.ripple.RippleHostView getRippleHostView(androidx.compose.material.ripple.AndroidRippleIndicationInstance)
    {
        androidx.compose.material.ripple.RippleContainer r0;
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r1, r21;
        androidx.compose.material.ripple.RippleHostView r2, $r11, r16, r17, r18, $r19, r20;
        androidx.compose.material.ripple.RippleHostMap $r3, $r9, $r10, $r22;
        java.util.List $r4, $r6, $r7, $r14;
        java.lang.Object $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.content.Context $r12;
        android.view.View $r13;
        java.util.Collection $r15;

        r0 := @this: androidx.compose.material.ripple.RippleContainer;

        $r1 := @parameter0: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r3 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        r2 = virtualinvoke $r3.<androidx.compose.material.ripple.RippleHostMap: androidx.compose.material.ripple.RippleHostView get(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>($r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r4 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List unusedRippleHosts>;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object removeFirstOrNull(java.util.List)>($r4);

        r16 = (androidx.compose.material.ripple.RippleHostView) $r5;

        if r16 != null goto label6;

        $i0 = r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex>;

        $r6 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts>;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r6);

        if $i0 <= $i1 goto label2;

        $r11 = new androidx.compose.material.ripple.RippleHostView;

        $r12 = virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "context");

        specialinvoke $r11.<androidx.compose.material.ripple.RippleHostView: void <init>(android.content.Context)>($r12);

        r17 = $r11;

        r18 = r17;

        $r13 = (android.view.View) r18;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleContainer: void addView(android.view.View)>($r13);

        $r14 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts>;

        $r15 = (java.util.Collection) $r14;

        interfaceinvoke $r15.<java.util.Collection: boolean add(java.lang.Object)>(r18);

        $r19 = r17;

        goto label4;

     label2:
        $r7 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List rippleHosts>;

        $i2 = r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2);

        r20 = (androidx.compose.material.ripple.RippleHostView) $r8;

        $r9 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        r21 = virtualinvoke $r9.<androidx.compose.material.ripple.RippleHostMap: androidx.compose.material.ripple.AndroidRippleIndicationInstance get(androidx.compose.material.ripple.RippleHostView)>(r20);

        if r21 == null goto label3;

        virtualinvoke r21.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void resetHostView()>();

        $r10 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        virtualinvoke $r10.<androidx.compose.material.ripple.RippleHostMap: void remove(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>(r21);

        virtualinvoke r20.<androidx.compose.material.ripple.RippleHostView: void disposeRipple()>();

     label3:
        $r19 = r20;

     label4:
        r16 = $r19;

        $i4 = r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex>;

        $i5 = r0.<androidx.compose.material.ripple.RippleContainer: int MaxRippleHosts>;

        $i6 = $i5 - 1;

        if $i4 >= $i6 goto label5;

        i7 = r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex>;

        $i3 = i7 + 1;

        r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex> = $i3;

        goto label6;

     label5:
        r0.<androidx.compose.material.ripple.RippleContainer: int nextHostIndex> = 0;

     label6:
        $r22 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        virtualinvoke $r22.<androidx.compose.material.ripple.RippleHostMap: void set(androidx.compose.material.ripple.AndroidRippleIndicationInstance,androidx.compose.material.ripple.RippleHostView)>($r1, r16);

        return r16;
    }

    public final void disposeRippleIfNeeded(androidx.compose.material.ripple.AndroidRippleIndicationInstance)
    {
        androidx.compose.material.ripple.RippleContainer r0;
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r1;
        androidx.compose.material.ripple.RippleHostView r2;
        androidx.compose.material.ripple.RippleHostMap $r3, $r4;
        java.util.List $r5;

        r0 := @this: androidx.compose.material.ripple.RippleContainer;

        $r1 := @parameter0: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        virtualinvoke $r1.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void resetHostView()>();

        $r3 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        r2 = virtualinvoke $r3.<androidx.compose.material.ripple.RippleHostMap: androidx.compose.material.ripple.RippleHostView get(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>($r1);

        if r2 == null goto label1;

        virtualinvoke r2.<androidx.compose.material.ripple.RippleHostView: void disposeRipple()>();

        $r4 = r0.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostMap rippleHostMap>;

        virtualinvoke $r4.<androidx.compose.material.ripple.RippleHostMap: void remove(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>($r1);

        $r5 = r0.<androidx.compose.material.ripple.RippleContainer: java.util.List unusedRippleHosts>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

