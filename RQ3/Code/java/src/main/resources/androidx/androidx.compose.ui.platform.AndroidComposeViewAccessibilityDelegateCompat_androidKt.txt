androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt
    private static final androidx.compose.ui.node.LayoutNode findClosestParentNode(androidx.compose.ui.node.LayoutNode, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode $r0, r4;
        kotlin.jvm.functions.Function1 r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        r4 = virtualinvoke $r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

     label1:
        if r4 == null goto label3;

        $r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return r4;

     label2:
        r4 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        goto label1;

     label3:
        return null;
    }

    private static final boolean enabled(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsProperties $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getDisabled()>();

        $r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r1, $r3);

        if $r4 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean propertiesDeleted(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        androidx.compose.ui.semantics.SemanticsConfiguration $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r8;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r1 := @parameter1: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy;

        $r4 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy: androidx.compose.ui.semantics.SemanticsConfiguration getUnmergedConfig()>();

        r2 = virtualinvoke $r4.<androidx.compose.ui.semantics.SemanticsConfiguration: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (androidx.compose.ui.semantics.SemanticsPropertyKey) $r7;

        $z1 = virtualinvoke $r6.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r8);

        if $z1 != 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    private static final boolean hasPaneTitle(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsProperties $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getPaneTitle()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r3);

        return $z0;
    }

    private static final boolean isPassword(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsProperties $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getPassword()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r3);

        return $z0;
    }

    private static final boolean isTextField(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsActions $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getUnmergedConfig$ui_release()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getSetText()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r3);

        return $z0;
    }

    private static final boolean isRtl(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.layout.LayoutInfo $r1;
        androidx.compose.ui.unit.LayoutDirection $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r2 = interfaceinvoke $r1.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        $r3 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Rtl>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean excludeLineAndPageGranularities(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.node.LayoutNode r1, $r4;
        androidx.compose.ui.node.SemanticsModifierNode r2;
        androidx.compose.ui.semantics.SemanticsConfiguration r3, $r11;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt$excludeLineAndPageGranularities$ancestor$1 $r5;
        kotlin.jvm.functions.Function1 $r6;
        androidx.compose.ui.semantics.SemanticsProperties $r7, $r12;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r8, $r13;
        java.lang.Object $r9, $r14;
        java.lang.Boolean $r10, $r15;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean isTextField(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getUnmergedConfig$ui_release()>();

        $r12 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r13 = virtualinvoke $r12.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getFocused()>();

        $r14 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r11, $r13);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r14, $r15);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        $r4 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.LayoutNode getLayoutNode$ui_release()>();

        $r5 = <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt$excludeLineAndPageGranularities$ancestor$1: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt$excludeLineAndPageGranularities$ancestor$1 INSTANCE>;

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: androidx.compose.ui.node.LayoutNode findClosestParentNode(androidx.compose.ui.node.LayoutNode,kotlin.jvm.functions.Function1)>($r4, $r6);

        if r1 == null goto label4;

        r2 = staticinvoke <androidx.compose.ui.semantics.SemanticsNodeKt: androidx.compose.ui.node.SemanticsModifierNode getOuterSemantics(androidx.compose.ui.node.LayoutNode)>(r1);

        if r2 == null goto label2;

        r3 = staticinvoke <androidx.compose.ui.node.SemanticsModifierNodeKt: androidx.compose.ui.semantics.SemanticsConfiguration collapsedSemanticsConfiguration(androidx.compose.ui.node.SemanticsModifierNode)>(r2);

        if r3 == null goto label2;

        $r7 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getFocused()>();

        $r9 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>(r3, $r8);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private static final boolean accessibilityEquals(androidx.compose.ui.semantics.AccessibilityAction, java.lang.Object)
    {
        androidx.compose.ui.semantics.AccessibilityAction $r0, $r3, $r7, $r9;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4;
        kotlin.Function $r5, $r6, $r8, $r10;

        $r0 := @parameter0: androidx.compose.ui.semantics.AccessibilityAction;

        r1 := @parameter1: java.lang.Object;

        if $r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.compose.ui.semantics.AccessibilityAction;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r0.<androidx.compose.ui.semantics.AccessibilityAction: java.lang.String getLabel()>();

        $r3 = (androidx.compose.ui.semantics.AccessibilityAction) r1;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.semantics.AccessibilityAction: java.lang.String getLabel()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r5 = virtualinvoke $r0.<androidx.compose.ui.semantics.AccessibilityAction: kotlin.Function getAction()>();

        if $r5 != null goto label4;

        $r9 = (androidx.compose.ui.semantics.AccessibilityAction) r1;

        $r10 = virtualinvoke $r9.<androidx.compose.ui.semantics.AccessibilityAction: kotlin.Function getAction()>();

        if $r10 == null goto label4;

        return 0;

     label4:
        $r6 = virtualinvoke $r0.<androidx.compose.ui.semantics.AccessibilityAction: kotlin.Function getAction()>();

        if $r6 == null goto label5;

        $r7 = (androidx.compose.ui.semantics.AccessibilityAction) r1;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.semantics.AccessibilityAction: kotlin.Function getAction()>();

        if $r8 != null goto label5;

        return 0;

     label5:
        return 1;
    }

    public static final java.util.Map getAllUncoveredSemanticsNodesToMap(androidx.compose.ui.semantics.SemanticsOwner)
    {
        androidx.compose.ui.semantics.SemanticsOwner $r0;
        androidx.compose.ui.semantics.SemanticsNode r1;
        java.util.Map r2;
        android.graphics.Region r3, r4, r5, $r9;
        java.util.LinkedHashMap $r6;
        androidx.compose.ui.node.LayoutNode $r7, $r8;
        boolean $z1, $z2;
        androidx.compose.ui.geometry.Rect $r10;
        android.graphics.Rect $r11;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsOwner: androidx.compose.ui.semantics.SemanticsNode getUnmergedRootSemanticsNode()>();

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r2 = (java.util.Map) $r6;

        $r7 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.LayoutNode getLayoutNode$ui_release()>();

        $z1 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z1 == 0 goto label1;

        $r8 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.LayoutNode getLayoutNode$ui_release()>();

        $z2 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z2 != 0 goto label2;

     label1:
        return r2;

     label2:
        $r9 = new android.graphics.Region;

        specialinvoke $r9.<android.graphics.Region: void <init>()>();

        r4 = $r9;

        r5 = r4;

        $r10 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $r11 = staticinvoke <androidx.compose.ui.graphics.RectHelper_androidKt: android.graphics.Rect toAndroidRect(androidx.compose.ui.geometry.Rect)>($r10);

        virtualinvoke r5.<android.graphics.Region: boolean set(android.graphics.Rect)>($r11);

        r3 = r4;

        staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: void getAllUncoveredSemanticsNodesToMap$findAllSemanticNodesRecursive(android.graphics.Region,androidx.compose.ui.semantics.SemanticsNode,java.util.Map,androidx.compose.ui.semantics.SemanticsNode)>(r3, r1, r2, r1);

        return r2;
    }

    public static final androidx.compose.ui.platform.ScrollObservationScope findById(java.util.List, int)
    {
        java.util.List $r0;
        int i0, i1, $i2, i3;
        java.lang.Object $r1, $r3;
        androidx.compose.ui.platform.ScrollObservationScope $r2, $r4;

        $r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i3 = 0;

        i1 = interfaceinvoke $r0.<java.util.List: int size()>();

     label1:
        if i3 >= i1 goto label3;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r2 = (androidx.compose.ui.platform.ScrollObservationScope) $r1;

        $i2 = virtualinvoke $r2.<androidx.compose.ui.platform.ScrollObservationScope: int getSemanticsNodeId()>();

        if $i2 != i0 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (androidx.compose.ui.platform.ScrollObservationScope) $r3;

        return $r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final void getAllUncoveredSemanticsNodesToMap$findAllSemanticNodesRecursive(android.graphics.Region, androidx.compose.ui.semantics.SemanticsNode, java.util.Map, androidx.compose.ui.semantics.SemanticsNode)
    {
        android.graphics.Region r0, r5, $r9, r25, r26;
        androidx.compose.ui.semantics.SemanticsNode r1, r3, $r23, r31;
        java.util.Map r2, r27, r33;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z8, $z9, $z10, $z12;
        android.graphics.Rect r4, $r12, $r15, $r19;
        java.lang.Integer r6, $r28, $r34;
        androidx.compose.ui.node.LayoutNode $r7, $r24;
        androidx.compose.ui.geometry.Rect $r8, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        android.graphics.Region$Op $r10, $r21;
        androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds $r11, $r14, $r18, r29, r35;
        androidx.compose.ui.layout.LayoutInfo $r17;
        java.lang.Object $r22;
        java.util.List r30;

        r0 := @parameter0: android.graphics.Region;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsNode;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: androidx.compose.ui.semantics.SemanticsNode;

        $r7 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.LayoutNode getLayoutNode$ui_release()>();

        $z1 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z1 == 0 goto label01;

        $r24 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.LayoutNode getLayoutNode$ui_release()>();

        $z9 = virtualinvoke $r24.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z9 != 0 goto label02;

     label01:
        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        z0 = $z10;

        $z2 = virtualinvoke r0.<android.graphics.Region: boolean isEmpty()>();

        if $z2 == 0 goto label04;

        $i3 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        $i4 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        if $i3 != $i4 goto label05;

     label04:
        if z0 == 0 goto label06;

        $z8 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: boolean isFake$ui_release()>();

        if $z8 != 0 goto label06;

     label05:
        return;

     label06:
        $r8 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getTouchBoundsInRoot()>();

        r4 = staticinvoke <androidx.compose.ui.graphics.RectHelper_androidKt: android.graphics.Rect toAndroidRect(androidx.compose.ui.geometry.Rect)>($r8);

        $r9 = new android.graphics.Region;

        specialinvoke $r9.<android.graphics.Region: void <init>()>();

        r25 = $r9;

        r26 = r25;

        virtualinvoke r26.<android.graphics.Region: boolean set(android.graphics.Rect)>(r4);

        r5 = r25;

        $i0 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        $i1 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

        if $i0 != $i1 goto label07;

        $i5 = -1;

        goto label08;

     label07:
        $i5 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: int getId()>();

     label08:
        i6 = $i5;

        $r10 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $z4 = virtualinvoke r5.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>(r0, r5, $r10);

        if $z4 == 0 goto label11;

        r27 = r2;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r18 = new androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds;

        $r19 = virtualinvoke r5.<android.graphics.Region: android.graphics.Rect getBounds()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "region.bounds");

        specialinvoke $r18.<androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds: void <init>(androidx.compose.ui.semantics.SemanticsNode,android.graphics.Rect)>(r3, $r19);

        r29 = $r18;

        interfaceinvoke r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r29);

        r30 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: java.util.List getReplacedChildren$ui_release()>();

        $i2 = interfaceinvoke r30.<java.util.List: int size()>();

        $i7 = $i2 - 1;

     label09:
        if -1 >= $i7 goto label10;

        $r22 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>($i7);

        $r23 = (androidx.compose.ui.semantics.SemanticsNode) $r22;

        staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: void getAllUncoveredSemanticsNodesToMap$findAllSemanticNodesRecursive(android.graphics.Region,androidx.compose.ui.semantics.SemanticsNode,java.util.Map,androidx.compose.ui.semantics.SemanticsNode)>(r0, r1, r2, $r23);

        $i7 = $i7 + -1;

        goto label09;

     label10:
        $r21 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r0.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>(r4, r0, $r21);

        goto label18;

     label11:
        $z5 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: boolean isFake$ui_release()>();

        if $z5 == 0 goto label17;

        r31 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsNode getParent()>();

        if r31 == null goto label13;

        $r17 = virtualinvoke r31.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        if $r17 == null goto label13;

        $z6 = interfaceinvoke $r17.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z6 != 1 goto label12;

        $z12 = 1;

        goto label14;

     label12:
        $z12 = 0;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        if $z12 == 0 goto label15;

        $r32 = virtualinvoke r31.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        goto label16;

     label15:
        $r32 = new androidx.compose.ui.geometry.Rect;

        specialinvoke $r32.<androidx.compose.ui.geometry.Rect: void <init>(float,float,float,float)>(0.0F, 0.0F, 10.0F, 10.0F);

     label16:
        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r14 = new androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds;

        $r15 = staticinvoke <androidx.compose.ui.graphics.RectHelper_androidKt: android.graphics.Rect toAndroidRect(androidx.compose.ui.geometry.Rect)>($r32);

        specialinvoke $r14.<androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds: void <init>(androidx.compose.ui.semantics.SemanticsNode,android.graphics.Rect)>(r3, $r15);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r14);

        goto label18;

     label17:
        if i6 != -1 goto label18;

        r33 = r2;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r11 = new androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds;

        $r12 = virtualinvoke r5.<android.graphics.Region: android.graphics.Rect getBounds()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "region.bounds");

        specialinvoke $r11.<androidx.compose.ui.platform.SemanticsNodeWithAdjustedBounds: void <init>(androidx.compose.ui.semantics.SemanticsNode,android.graphics.Rect)>(r3, $r12);

        r35 = $r11;

        interfaceinvoke r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r35);

     label18:
        return;
    }

    public static final androidx.compose.ui.node.LayoutNode access$findClosestParentNode(androidx.compose.ui.node.LayoutNode, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode $r0, $r2;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: androidx.compose.ui.node.LayoutNode findClosestParentNode(androidx.compose.ui.node.LayoutNode,kotlin.jvm.functions.Function1)>($r0, r1);

        return $r2;
    }

    public static final boolean access$isTextField(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean isTextField(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$isPassword(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean isPassword(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$enabled(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean enabled(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$excludeLineAndPageGranularities(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean excludeLineAndPageGranularities(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$isRtl(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean isRtl(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$hasPaneTitle(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean hasPaneTitle(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        return $z0;
    }

    public static final boolean access$accessibilityEquals(androidx.compose.ui.semantics.AccessibilityAction, java.lang.Object)
    {
        androidx.compose.ui.semantics.AccessibilityAction $r0;
        java.lang.Object r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.AccessibilityAction;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean accessibilityEquals(androidx.compose.ui.semantics.AccessibilityAction,java.lang.Object)>($r0, r1);

        return $z0;
    }

    public static final boolean access$propertiesDeleted(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r1 := @parameter1: androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat_androidKt: boolean propertiesDeleted(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.platform.AndroidComposeViewAccessibilityDelegateCompat$SemanticsNodeCopy)>($r0, r1);

        return $z0;
    }

