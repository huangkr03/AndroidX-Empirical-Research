androidx.media3.exoplayer.source.SampleDataQueue
<androidx.media3.exoplayer.source.SampleDataQueue: int INITIAL_SCRATCH_SIZE>
<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator>
<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>
<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.common.util.ParsableByteArray scratch>
<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>
<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode>
<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>
<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>
    public void <init>(androidx.media3.exoplayer.upstream.Allocator)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.exoplayer.upstream.Allocator r1;
        int $i0, $i1;
        androidx.media3.common.util.ParsableByteArray $r2;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r3, $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator> = r1;

        $i0 = interfaceinvoke r1.<androidx.media3.exoplayer.upstream.Allocator: int getIndividualAllocationLength()>();

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength> = $i0;

        $r2 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r2.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(32);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.common.util.ParsableByteArray scratch> = $r2;

        $r3 = new androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>;

        specialinvoke $r3.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void <init>(long,int)>(0L, $i1);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode> = $r3;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r4;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode> = $r5;

        return;
    }

    public void reset()
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r1, $r2, $r3, $r4;
        int $i0;
        androidx.media3.exoplayer.upstream.Allocator $r5;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: void clearAllocationNodes(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)>($r1);

        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void reset(long,int)>(0L, $i0);

        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r3;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode> = $r4;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten> = 0L;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator>;

        interfaceinvoke $r5.<androidx.media3.exoplayer.upstream.Allocator: void trim()>();

        return;
    }

    public void discardUpstreamSampleBytes(long)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        long l0, $l1, $l3, $l6, $l7, $l8, $l10, $l11, $l14, $l15, $l16;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, r13, $r14;
        byte $b2, $b4, $b9, $b12, $b17;
        int $i5, $i13;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $b2 = l0 cmp $l1;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten> = l0;

        $l3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        $l8 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $r6 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $l7 = $r6.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition>;

        $b9 = $l8 cmp $l7;

        if $b9 != 0 goto label4;

     label3:
        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: void clearAllocationNodes(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)>($r2);

        $r3 = new androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $l6 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>;

        specialinvoke $r3.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void <init>(long,int)>($l6, $i5);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode> = $r3;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r4;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode> = $r5;

        goto label9;

     label4:
        r13 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

     label5:
        $l11 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $l10 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b12 = $l11 cmp $l10;

        if $b12 <= 0 goto label6;

        r13 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        goto label5;

     label6:
        $r7 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        r1 = (androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode) $r8;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: void clearAllocationNodes(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)>(r1);

        $r9 = new androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $l14 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $i13 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>;

        specialinvoke $r9.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void <init>(long,int)>($l14, $i13);

        r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next> = $r9;

        $l16 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $l15 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b17 = $l16 cmp $l15;

        if $b17 != 0 goto label7;

        $r14 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        goto label8;

     label7:
        $r14 = r13;

     label8:
        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode> = $r14;

        $r10 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode>;

        if $r10 != r1 goto label9;

        $r11 = r13.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r11;

     label9:
        return;
    }

    public void rewind()
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r1;

        return;
    }

    public void readToBuffer(androidx.media3.decoder.DecoderInputBuffer, androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r2;
        androidx.media3.common.util.ParsableByteArray $r3;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        r2 := @parameter1: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode>;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.common.util.ParsableByteArray scratch>;

        $r5 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readSampleData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,androidx.media3.decoder.DecoderInputBuffer,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder,androidx.media3.common.util.ParsableByteArray)>($r4, r1, r2, $r3);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r5;

        return;
    }

    public void peekToBuffer(androidx.media3.decoder.DecoderInputBuffer, androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r2;
        androidx.media3.common.util.ParsableByteArray $r3;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r4;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        r2 := @parameter1: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode>;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.common.util.ParsableByteArray scratch>;

        staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readSampleData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,androidx.media3.decoder.DecoderInputBuffer,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder,androidx.media3.common.util.ParsableByteArray)>($r4, r1, r2, $r3);

        return;
    }

    public void discardDownstreamTo(long)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        long l0, $l2, $l4, $l5;
        byte $b1, $b3, $b6;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r1, $r2, $r3, $r4, $r5, $r8, $r9;
        androidx.media3.exoplayer.upstream.Allocation $r6;
        androidx.media3.exoplayer.upstream.Allocator $r7;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $l2 = $r1.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label2;

        $r7 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator>;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $r6 = $r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.upstream.Allocator: void release(androidx.media3.exoplayer.upstream.Allocation)>($r6);

        $r8 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode clear()>();

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode> = $r9;

        goto label1;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode>;

        $l5 = $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition>;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        $l4 = $r3.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition>;

        $b6 = $l5 cmp $l4;

        if $b6 >= 0 goto label3;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode firstAllocationNode>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readAllocationNode> = $r4;

     label3:
        return;
    }

    public long getTotalBytesWritten()
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        $l0 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        return $l0;
    }

    public int sampleData(androidx.media3.common.DataReader, int, boolean) throws java.io.IOException
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.common.DataReader r1;
        boolean z0;
        int i0, $i2, i3, i4;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r2, $r4;
        androidx.media3.exoplayer.upstream.Allocation $r3;
        long $l1;
        byte[] $r5;
        java.io.EOFException $r6;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.common.DataReader;

        i3 := @parameter1: int;

        z0 := @parameter2: boolean;

        i4 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: int preAppend(int)>(i3);

        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $r3 = $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $r5 = $r3.<androidx.media3.exoplayer.upstream.Allocation: byte[] data>;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $i2 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: int translateOffset(long)>($l1);

        i0 = interfaceinvoke r1.<androidx.media3.common.DataReader: int read(byte[],int,int)>($r5, $i2, i4);

        if i0 != -1 goto label2;

        if z0 == 0 goto label1;

        return -1;

     label1:
        $r6 = new java.io.EOFException;

        specialinvoke $r6.<java.io.EOFException: void <init>()>();

        throw $r6;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: void postAppend(int)>(i0);

        return i0;
    }

    public void sampleData(androidx.media3.common.util.ParsableByteArray, int)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i2, i3;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r2, $r4;
        androidx.media3.exoplayer.upstream.Allocation $r3;
        long $l1;
        byte[] $r5;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i3 := @parameter1: int;

     label1:
        if i3 <= 0 goto label2;

        i0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: int preAppend(int)>(i3);

        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $r3 = $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $r5 = $r3.<androidx.media3.exoplayer.upstream.Allocation: byte[] data>;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $i2 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: int translateOffset(long)>($l1);

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>($r5, $i2, i0);

        i3 = i3 - i0;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue: void postAppend(int)>(i0);

        goto label1;

     label2:
        return;
    }

    private void clearAllocationNodes(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r1;
        androidx.media3.exoplayer.upstream.Allocation $r2;
        androidx.media3.exoplayer.upstream.Allocator $r3;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        r1 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $r2 = r1.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.upstream.Allocator: void release(androidx.media3.exoplayer.upstream.Allocator$AllocationNode)>(r1);

        virtualinvoke r1.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode clear()>();

        return;
    }

    private int preAppend(int)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        int i0, $i4, $i5, $i6;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r1, $r3, $r5, $r7, $r8;
        androidx.media3.exoplayer.upstream.Allocation $r2, $r6;
        long $l1, $l2, $l3, $l7;
        androidx.media3.exoplayer.upstream.Allocator $r4;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $r2 = $r1.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        if $r2 != null goto label1;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.upstream.Allocator allocator>;

        $r6 = interfaceinvoke $r4.<androidx.media3.exoplayer.upstream.Allocator: androidx.media3.exoplayer.upstream.Allocation allocate()>();

        $r7 = new androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $l7 = $r8.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $i6 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: int allocationLength>;

        specialinvoke $r7.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void <init>(long,int)>($l7, $i6);

        virtualinvoke $r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void initialize(androidx.media3.exoplayer.upstream.Allocation,androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)>($r6, $r7);

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $l2 = $r3.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $l3 = $l2 - $l1;

        $i4 = (int) $l3;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i4);

        return $i5;
    }

    private void postAppend(int)
    {
        androidx.media3.exoplayer.source.SampleDataQueue r0;
        int i0;
        long $l1, $l2, $l3, $l4, $l5;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode $r1, $r2, $r3;
        byte $b6;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue;

        i0 := @parameter0: int;

        $l2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten> = $l3;

        $l5 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: long totalBytesWritten>;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $l4 = $r1.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b6 = $l5 cmp $l4;

        if $b6 != 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode>;

        $r3 = $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode writeAllocationNode> = $r3;

     label1:
        return;
    }

    private static androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readSampleData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode, androidx.media3.decoder.DecoderInputBuffer, androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder, androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r1;
        androidx.media3.common.util.ParsableByteArray r2;
        int i0, $i1, $i2, $i7, $i8, $i13, $i14, $i15, $i16;
        boolean $z0, $z1;
        java.nio.ByteBuffer $r3, $r5, $r6;
        long $l3, $l4, $l5, $l6, $l9, $l10, $l11, $l12, $l17;
        byte[] $r4;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r7, r8, r9, r10;

        r7 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        r0 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        r1 := @parameter2: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        r2 := @parameter3: androidx.media3.common.util.ParsableByteArray;

        $z0 = virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: boolean isEncrypted()>();

        if $z0 == 0 goto label1;

        r7 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readEncryptionData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,androidx.media3.decoder.DecoderInputBuffer,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder,androidx.media3.common.util.ParsableByteArray)>(r7, r0, r1, r2);

     label1:
        $z1 = virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: boolean hasSupplementalData()>();

        if $z1 == 0 goto label2;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(4);

        $l4 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $r4 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r8 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,byte[],int)>(r7, $l4, $r4, 4);

        i0 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        $l5 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $l6 = $l5 + 4L;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset> = $l6;

        $i7 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        $i8 = $i7 - 4;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size> = $i8;

        virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void ensureSpaceForWrite(int)>(i0);

        $l9 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $r5 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        r9 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,java.nio.ByteBuffer,int)>(r8, $l9, $r5, i0);

        $l11 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $l10 = (long) i0;

        $l12 = $l11 + $l10;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset> = $l12;

        $i13 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        $i14 = $i13 - i0;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size> = $i14;

        $i15 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void resetSupplementalData(int)>($i15);

        $l17 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $r6 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        $i16 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        r10 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,java.nio.ByteBuffer,int)>(r9, $l17, $r6, $i16);

        goto label3;

     label2:
        $i1 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void ensureSpaceForWrite(int)>($i1);

        $l3 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $r3 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $i2 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        r10 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,java.nio.ByteBuffer,int)>(r7, $l3, $r3, $i2);

     label3:
        return r10;
    }

    private static androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readEncryptionData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode, androidx.media3.decoder.DecoderInputBuffer, androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder, androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r1;
        androidx.media3.common.util.ParsableByteArray r2;
        byte b0, b1;
        boolean z0, $z1;
        androidx.media3.decoder.CryptoInfo r3;
        byte[] $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r16, $r17;
        short $s2;
        long $l3, $l4, $l5, $l12, $l13, $l14, $l15, $l16, $l19, l24, l25, l26;
        int $i6, $i7, $i8, $i9, $i10, $i11, $i17, $i18, $i20, $i21, $i22, $i23, i27, i28, i29, i30;
        androidx.media3.extractor.TrackOutput$CryptoData $r9, r23;
        java.lang.Object $r10;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r18, r19, r20;
        int[] r21, r22;

        r18 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        r0 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        r1 := @parameter2: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        r2 := @parameter3: androidx.media3.common.util.ParsableByteArray;

        l24 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(1);

        $r4 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r19 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,byte[],int)>(r18, l24, $r4, 1);

        l25 = l24 + 1L;

        $r5 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        b0 = $r5[0];

        $s2 = b0 & 128;

        if $s2 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        b1 = b0 & 127;

        r3 = r0.<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.CryptoInfo cryptoInfo>;

        $r6 = r3.<androidx.media3.decoder.CryptoInfo: byte[] iv>;

        if $r6 != null goto label03;

        $r17 = newarray (byte)[16];

        r3.<androidx.media3.decoder.CryptoInfo: byte[] iv> = $r17;

        goto label04;

     label03:
        $r7 = r3.<androidx.media3.decoder.CryptoInfo: byte[] iv>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r7, 0);

     label04:
        $r8 = r3.<androidx.media3.decoder.CryptoInfo: byte[] iv>;

        r20 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,byte[],int)>(r19, l25, $r8, b1);

        $l3 = (long) b1;

        l26 = l25 + $l3;

        if z0 == 0 goto label05;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(2);

        $r16 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r20 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,byte[],int)>(r20, l26, $r16, 2);

        l26 = l26 + 2L;

        i27 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        goto label06;

     label05:
        i27 = 1;

     label06:
        r21 = r3.<androidx.media3.decoder.CryptoInfo: int[] numBytesOfClearData>;

        if r21 == null goto label07;

        $i23 = lengthof r21;

        if $i23 >= i27 goto label08;

     label07:
        r21 = newarray (int)[i27];

     label08:
        r22 = r3.<androidx.media3.decoder.CryptoInfo: int[] numBytesOfEncryptedData>;

        if r22 == null goto label09;

        $i22 = lengthof r22;

        if $i22 >= i27 goto label10;

     label09:
        r22 = newarray (int)[i27];

     label10:
        if z0 == 0 goto label13;

        i28 = 6 * i27;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(i28);

        $r13 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r20 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long,byte[],int)>(r20, l26, $r13, i28);

        $l19 = (long) i28;

        l26 = l26 + $l19;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        i29 = 0;

     label11:
        if i29 >= i27 goto label12;

        $i20 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        r21[i29] = $i20;

        $i21 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        r22[i29] = $i21;

        i29 = i29 + 1;

        goto label11;

     label12:
        goto label14;

     label13:
        r21[0] = 0;

        $i7 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        $l4 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $l5 = l26 - $l4;

        $i6 = (int) $l5;

        $i8 = $i7 - $i6;

        r22[0] = $i8;

     label14:
        $r9 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r9);

        r23 = (androidx.media3.extractor.TrackOutput$CryptoData) $r10;

        $r12 = r23.<androidx.media3.extractor.TrackOutput$CryptoData: byte[] encryptionKey>;

        $r11 = r3.<androidx.media3.decoder.CryptoInfo: byte[] iv>;

        $i11 = r23.<androidx.media3.extractor.TrackOutput$CryptoData: int cryptoMode>;

        $i10 = r23.<androidx.media3.extractor.TrackOutput$CryptoData: int encryptedBlocks>;

        $i9 = r23.<androidx.media3.extractor.TrackOutput$CryptoData: int clearBlocks>;

        virtualinvoke r3.<androidx.media3.decoder.CryptoInfo: void set(int,int[],int[],byte[],byte[],int,int,int)>(i27, r21, r22, $r12, $r11, $i11, $i10, $i9);

        $l12 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $l13 = l26 - $l12;

        i30 = (int) $l13;

        $l15 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>;

        $l14 = (long) i30;

        $l16 = $l15 + $l14;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset> = $l16;

        $i17 = r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>;

        $i18 = $i17 - i30;

        r1.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size> = $i18;

        return r20;
    }

    private static androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode, long, java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, $i4, $i5, i10;
        androidx.media3.exoplayer.upstream.Allocation r1;
        long $l2, $l3, $l6, $l7, l9;
        byte[] $r2;
        byte $b8;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r4, r5;

        r4 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l9 := @parameter1: long;

        r0 := @parameter2: java.nio.ByteBuffer;

        i0 := @parameter3: int;

        r5 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode getNodeContainingPosition(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long)>(r4, l9);

        i10 = i0;

     label1:
        if i10 <= 0 goto label3;

        $l2 = r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $l3 = $l2 - l9;

        $i4 = (int) $l3;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i4);

        r1 = r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $r2 = r1.<androidx.media3.exoplayer.upstream.Allocation: byte[] data>;

        $i5 = virtualinvoke r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: int translateOffset(long)>(l9);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, $i5, i1);

        i10 = i10 - i1;

        $l6 = (long) i1;

        l9 = l9 + $l6;

        $l7 = r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b8 = l9 cmp $l7;

        if $b8 != 0 goto label2;

        r5 = r5.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

     label2:
        goto label1;

     label3:
        return r5;
    }

    private static androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode readData(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode, long, byte[], int)
    {
        byte[] r0, $r2;
        int i0, i1, $i4, $i5, $i6, i11;
        androidx.media3.exoplayer.upstream.Allocation r1;
        long $l2, $l3, $l7, $l8, l10;
        byte $b9;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r3, r4;

        r3 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l10 := @parameter1: long;

        r0 := @parameter2: byte[];

        i0 := @parameter3: int;

        r4 = staticinvoke <androidx.media3.exoplayer.source.SampleDataQueue: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode getNodeContainingPosition(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode,long)>(r3, l10);

        i11 = i0;

     label1:
        if i11 <= 0 goto label3;

        $l2 = r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $l3 = $l2 - l10;

        $i4 = (int) $l3;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i11, $i4);

        r1 = r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $r2 = r1.<androidx.media3.exoplayer.upstream.Allocation: byte[] data>;

        $i5 = virtualinvoke r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: int translateOffset(long)>(l10);

        $i6 = i0 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, r0, $i6, i1);

        i11 = i11 - i1;

        $l7 = (long) i1;

        l10 = l10 + $l7;

        $l8 = r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b9 = l10 cmp $l8;

        if $b9 != 0 goto label2;

        r4 = r4.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

     label2:
        goto label1;

     label3:
        return r4;
    }

    private static androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode getNodeContainingPosition(androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode, long)
    {
        long l0, $l1;
        byte $b2;
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0;

        r0 := @parameter0: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l0 := @parameter1: long;

     label1:
        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label2;

        r0 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        goto label1;

     label2:
        return r0;
    }

androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode
<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition>
<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition>
<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>
<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>
    public void <init>(long, int)
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0;
        long l0;
        int i1;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: void reset(long,int)>(l0, i1);

        return;
    }

    public void reset(long, int)
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0;
        long l0, $l2, $l3;
        int i1;
        androidx.media3.exoplayer.upstream.Allocation $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition> = l0;

        $l2 = (long) i1;

        $l3 = l0 + $l2;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long endPosition> = $l3;

        return;
    }

    public void initialize(androidx.media3.exoplayer.upstream.Allocation, androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode)
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0, r2;
        androidx.media3.exoplayer.upstream.Allocation r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Allocation;

        r2 := @parameter1: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation> = r1;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next> = r2;

        return;
    }

    public int translateOffset(long)
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0;
        long l0, $l1, $l2;
        androidx.media3.exoplayer.upstream.Allocation $r1;
        int $i3, $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: long startPosition>;

        $l2 = l0 - $l1;

        $i4 = (int) $l2;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $i3 = $r1.<androidx.media3.exoplayer.upstream.Allocation: int offset>;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode clear()
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0, r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation> = null;

        r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next> = null;

        return r1;
    }

    public androidx.media3.exoplayer.upstream.Allocation getAllocation()
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0;
        androidx.media3.exoplayer.upstream.Allocation $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.exoplayer.upstream.Allocation) $r2;

        return $r3;
    }

    public androidx.media3.exoplayer.upstream.Allocator$AllocationNode next()
    {
        androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode r0, $r1, $r2, $r4;
        androidx.media3.exoplayer.upstream.Allocation $r3;

        r0 := @this: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        $r3 = $r2.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.upstream.Allocation allocation>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode: androidx.media3.exoplayer.source.SampleDataQueue$AllocationNode next>;

        return $r4;
    }

