androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker>
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock>
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap>
    public void <init>(androidx.window.layout.WindowInfoTracker)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        androidx.window.layout.WindowInfoTracker r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.LinkedHashMap $r3;
        java.util.Map $r4;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: androidx.window.layout.WindowInfoTracker;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tracker");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker> = r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = (java.util.Map) $r3;

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap> = $r4;

        return;
    }

    public kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        android.app.Activity r1;
        androidx.window.layout.WindowInfoTracker $r2;
        kotlinx.coroutines.flow.Flow $r3;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: android.app.Activity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "activity");

        $r2 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker>;

        $r3 = interfaceinvoke $r2.<androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)>(r1);

        return $r3;
    }

    public final void addWindowLayoutInfoListener(android.app.Activity, java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        android.app.Activity r1;
        java.util.concurrent.Executor r2;
        androidx.core.util.Consumer r3;
        androidx.window.layout.WindowInfoTracker $r4;
        kotlinx.coroutines.flow.Flow $r5;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.core.util.Consumer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "activity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "executor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "consumer");

        $r4 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker>;

        $r5 = interfaceinvoke $r4.<androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)>(r1);

        specialinvoke r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)>(r2, r3, $r5);

        return;
    }

    public final void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        androidx.core.util.Consumer r1;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: androidx.core.util.Consumer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "consumer");

        specialinvoke r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)>(r1);

        return;
    }

    private final void addListener(java.util.concurrent.Executor, androidx.core.util.Consumer, kotlinx.coroutines.flow.Flow)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        java.util.concurrent.Executor r1;
        androidx.core.util.Consumer r2;
        kotlinx.coroutines.flow.Flow r3;
        java.util.concurrent.locks.Lock r4;
        kotlinx.coroutines.CoroutineScope r5;
        java.util.Map r6, $r9;
        kotlinx.coroutines.Job r7;
        java.util.concurrent.locks.ReentrantLock $r8;
        java.lang.Object $r10;
        kotlinx.coroutines.CoroutineDispatcher $r11;
        kotlin.coroutines.CoroutineContext $r12;
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 $r13;
        kotlin.jvm.functions.Function2 $r14;
        java.lang.Throwable $r16;
        kotlin.Unit $r17;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.core.util.Consumer;

        r3 := @parameter2: kotlinx.coroutines.flow.Flow;

        $r8 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock>;

        r4 = (java.util.concurrent.locks.Lock) $r8;

        interfaceinvoke r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r9 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r10 != null goto label2;

        $r11 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher 'from'(java.util.concurrent.Executor)>(r1);

        $r12 = (kotlin.coroutines.CoroutineContext) $r11;

        r5 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r12);

        r6 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap>;

        $r13 = new androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        specialinvoke $r13.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: void <init>(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)>(r3, r2, null);

        $r14 = (kotlin.jvm.functions.Function2) $r13;

        r7 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r5, null, null, $r14, 3, null);

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r7);

     label2:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        interfaceinvoke r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r16 := @caughtexception;

     label5:
        interfaceinvoke r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r16;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private final void removeListener(androidx.core.util.Consumer)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter r0;
        androidx.core.util.Consumer r1;
        java.util.concurrent.locks.Lock r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.Map $r4, $r7;
        java.lang.Object $r5, $r8;
        kotlinx.coroutines.Job $r6, $r10;
        java.lang.Throwable $r9;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter;

        r1 := @parameter0: androidx.core.util.Consumer;

        $r3 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock>;

        r2 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (kotlinx.coroutines.Job) $r5;

        if $r6 != null goto label2;

        goto label3;

     label2:
        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r6, null, 1, null);

     label3:
        $r7 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r10 = (kotlinx.coroutines.Job) $r8;

     label4:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label5:
        $r9 := @caughtexception;

     label6:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined>
    public void <init>(androidx.core.util.Consumer)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1 r0;
        androidx.core.util.Consumer r1;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1;

        r1 := @parameter0: androidx.core.util.Consumer;

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1 r0;
        java.lang.Object r1, r4;
        kotlin.coroutines.Continuation $r2;
        androidx.core.util.Consumer $r5;
        kotlin.Unit $r6;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r4 = r1;

        $r5 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined>;

        interfaceinvoke $r5.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r4);

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;
    }

androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label>
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow>
<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer>
    void <init>(kotlinx.coroutines.flow.Flow, androidx.core.util.Consumer, kotlin.coroutines.Continuation)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 r0;
        kotlinx.coroutines.flow.Flow $r1;
        androidx.core.util.Consumer $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: androidx.core.util.Consumer;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow> = $r1;

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 r0;
        java.lang.Object $r1, r4, $r9;
        kotlinx.coroutines.flow.Flow $r2;
        androidx.core.util.Consumer r3;
        int $i0;
        kotlin.Unit $r5;
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1 $r6;
        kotlinx.coroutines.flow.FlowCollector $r7;
        kotlin.coroutines.Continuation $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        $r1 := @parameter0: java.lang.Object;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r2 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow>;

        r3 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer>;

        $r6 = new androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1;

        specialinvoke $r6.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: void <init>(androidx.core.util.Consumer)>(r3);

        $r7 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label> = 1;

        $r9 = interfaceinvoke $r2.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r7, $r8);

        if $r9 != r4 goto label3;

        return r4;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;

     label4:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.core.util.Consumer $r4;
        kotlinx.coroutines.flow.Flow $r5;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        $r5 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow>;

        $r4 = r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer>;

        specialinvoke $r3.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: void <init>(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

