kotlin.concurrent.LocksKt
    private static final java.lang.Object read(java.util.concurrent.locks.ReentrantReadWriteLock, kotlin.jvm.functions.Function0)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock $r0;
        kotlin.jvm.functions.Function0 $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

     label1:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object withLock(java.util.concurrent.locks.Lock, kotlin.jvm.functions.Function0)
    {
        java.util.concurrent.locks.Lock $r0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.util.concurrent.locks.Lock;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        interfaceinvoke $r0.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object write(java.util.concurrent.locks.ReentrantReadWriteLock, kotlin.jvm.functions.Function0)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock $r0;
        kotlin.jvm.functions.Function0 $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;
        int $i0, $i1, $i2;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $i0 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>();

        $i1 = 0;

        if $i0 != 0 goto label01;

        $i0 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>();

        goto label02;

     label01:
        $i0 = 0;

     label02:
        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label04;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $i2 = $i2 + 1;

        goto label03;

     label04:
        $r3 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label05:
        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label06:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label07:
        if $i1 >= $i0 goto label08;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label07;

     label08:
        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r4;

     label09:
        $r5 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label10:
        if $i1 >= $i0 goto label11;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label10;

     label11:
        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label12;

     label12:
        throw $r5;

        catch java.lang.Throwable from label05 to label06 with label09;
    }

