androidx.compose.runtime.snapshots.Snapshot
<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>
<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.SnapshotIdSet invalid>
<androidx.compose.runtime.snapshots.Snapshot: int id>
<androidx.compose.runtime.snapshots.Snapshot: boolean disposed>
<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle>
<androidx.compose.runtime.snapshots.Snapshot: int $stable>
    private void <init>(int, androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int i0, $i1;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1, $r2;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.snapshots.SnapshotIdSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.SnapshotIdSet invalid> = r1;

        r0.<androidx.compose.runtime.snapshots.Snapshot: int id> = i0;

        if i0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: int trackPinning(int,androidx.compose.runtime.snapshots.SnapshotIdSet)>(i0, $r2);

        goto label2;

     label1:
        $i1 = -1;

     label2:
        r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle> = $i1;

        return;
    }

    public androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.SnapshotIdSet invalid>;

        return $r1;
    }

    public void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotIdSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.SnapshotIdSet invalid> = r1;

        return;
    }

    public int getId()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $i0 = r0.<androidx.compose.runtime.snapshots.Snapshot: int id>;

        return $i0;
    }

    public void setId$runtime_release(int)
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int i0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        i0 := @parameter0: int;

        r0.<androidx.compose.runtime.snapshots.Snapshot: int id> = i0;

        return;
    }

<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot getRoot()>
<androidx.compose.runtime.snapshots.Snapshot: boolean getReadOnly()>
    public void dispose()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3;
        kotlin.Unit $r4;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r0.<androidx.compose.runtime.snapshots.Snapshot: boolean disposed> = 1;

        r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r2 = r1;

        entermonitor r2;

     label1:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void releasePinnedSnapshotLocked$runtime_release()>();

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)>
    public static androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot$default(androidx.compose.runtime.snapshots.Snapshot, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.Snapshot r0, $r2;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r3;
        kotlin.jvm.functions.Function1 r4;

        r0 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        r4 := @parameter1: kotlin.jvm.functions.Function1;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        if r1 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: takeNestedSnapshot");

        throw $r3;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        r4 = null;

     label2:
        $r2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)>(r4);

        return $r2;
    }

<androidx.compose.runtime.snapshots.Snapshot: boolean hasPendingChanges()>
    public final java.lang.Object enter(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.Snapshot r0, r2;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Throwable $r3, r5;
        java.lang.Object r4;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label1:
        r4 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r4;

     label3:
        $r3 := @caughtexception;

        r5 = $r3;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public androidx.compose.runtime.snapshots.Snapshot makeCurrent()
    {
        androidx.compose.runtime.snapshots.Snapshot r0, r1;
        androidx.compose.runtime.SnapshotThreadLocal $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.SnapshotThreadLocal access$getThreadSnapshot$p()>();

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SnapshotThreadLocal: java.lang.Object get()>();

        r1 = (androidx.compose.runtime.snapshots.Snapshot) $r3;

        $r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.SnapshotThreadLocal access$getThreadSnapshot$p()>();

        virtualinvoke $r4.<androidx.compose.runtime.SnapshotThreadLocal: void set(java.lang.Object)>(r0);

        return r1;
    }

    public void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.Snapshot r0, r1;
        androidx.compose.runtime.SnapshotThreadLocal $r2;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        $r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.SnapshotThreadLocal access$getThreadSnapshot$p()>();

        virtualinvoke $r2.<androidx.compose.runtime.SnapshotThreadLocal: void set(java.lang.Object)>(r1);

        return;
    }

    public final androidx.compose.runtime.snapshots.Snapshot unsafeEnter()
    {
        androidx.compose.runtime.snapshots.Snapshot r0, $r1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

        return $r1;
    }

    public final void unsafeLeave(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.Snapshot r0, r1;
        androidx.compose.runtime.SnapshotThreadLocal $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7, r11;
        java.lang.String $r9, $r10;
        boolean $z0;
        java.lang.IllegalStateException r12;
        java.lang.Throwable r13;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        $r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.SnapshotThreadLocal access$getThreadSnapshot$p()>();

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SnapshotThreadLocal: java.lang.Object get()>();

        if $r3 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot leave snapshot; ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not the current snapshot");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        r13 = (java.lang.Throwable) r12;

        throw r13;

     label3:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        return;
    }

    public final boolean getDisposed$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.Snapshot: boolean disposed>;

        return $z0;
    }

    public final void setDisposed$runtime_release(boolean)
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        boolean z0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.runtime.snapshots.Snapshot: boolean disposed> = z0;

        return;
    }

    public final boolean isPinned$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int $i0;
        boolean $z1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $i0 = staticinvoke <androidx.compose.runtime.snapshots.Snapshot: int access$getPinningTrackingHandle$p(androidx.compose.runtime.snapshots.Snapshot)>(r0);

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

<androidx.compose.runtime.snapshots.Snapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>
<androidx.compose.runtime.snapshots.Snapshot: kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()>
<androidx.compose.runtime.snapshots.Snapshot: void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>
<androidx.compose.runtime.snapshots.Snapshot: void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>
<androidx.compose.runtime.snapshots.Snapshot: void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)>
<androidx.compose.runtime.snapshots.Snapshot: java.util.Set getModified$runtime_release()>
<androidx.compose.runtime.snapshots.Snapshot: void notifyObjectsInitialized$runtime_release()>
    public final void closeAndReleasePinning$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3;
        kotlin.Unit $r4;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Object getLock()>();

        r2 = r1;

        entermonitor r2;

     label1:
        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void closeLocked$runtime_release()>();

        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void releasePinnedSnapshotsForCloseLocked$runtime_release()>();

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void closeLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r1, $r2;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.SnapshotIdSet access$getOpenSnapshots$p()>();

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: int getId()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet clear(int)>($i0);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$setOpenSnapshots$p(androidx.compose.runtime.snapshots.SnapshotIdSet)>($r2);

        return;
    }

    public void releasePinnedSnapshotsForCloseLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void releasePinnedSnapshotLocked$runtime_release()>();

        return;
    }

    public final void validateNotDisposed$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $z0 = r0.<androidx.compose.runtime.snapshots.Snapshot: boolean disposed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r3 = "Cannot use a disposed snapshot";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label3:
        return;
    }

    public final void releasePinnedSnapshotLocked$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        $i0 = r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle>;

        if $i0 < 0 goto label1;

        $i1 = r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle>;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void releasePinningLocked(int)>($i1);

        r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle> = -1;

     label1:
        return;
    }

    public final int takeoverPinnedSnapshot$runtime_release()
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int i0, i1;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        i0 = r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle>;

        i1 = i0;

        r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle> = -1;

        return i0;
    }

    public void <init>(int, androidx.compose.runtime.snapshots.SnapshotIdSet, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.runtime.snapshots.Snapshot r0;
        int i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.compose.runtime.snapshots.Snapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.snapshots.SnapshotIdSet;

        $r2 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet)>(i0, r1);

        return;
    }

    public static final int access$getPinningTrackingHandle$p(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.Snapshot $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        $i0 = $r0.<androidx.compose.runtime.snapshots.Snapshot: int pinningTrackingHandle>;

        return $i0;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.snapshots.Snapshot$Companion $r0;

        $r0 = new androidx.compose.runtime.snapshots.Snapshot$Companion;

        specialinvoke $r0.<androidx.compose.runtime.snapshots.Snapshot$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion> = $r0;

        <androidx.compose.runtime.snapshots.Snapshot: int $stable> = 8;

        return;
    }

