androidx.test.internal.runner.InstrumentationConnection
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String TAG>
<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection DEFAULT_INSTANCE>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BUNDLE_KEY_CLIENTS>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BUNDLE_KEY_CLIENT_TYPE>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BUNDLE_KEY_CLIENT_MESSENGER>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BUNDLE_KEY_UUID>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BUNDLE_BR_NEW_BINDER>
<androidx.test.internal.runner.InstrumentationConnection: java.lang.String BROADCAST_FILTER>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REMOTE_ADD_CLIENT>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REMOTE_REMOVE_CLIENT>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_TERMINATE>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_HANDLE_INSTRUMENTATION_FROM_BROADCAST>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_ADD_INSTRUMENTATION>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REMOVE_INSTRUMENTATION>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_ADD_CLIENTS_IN_BUNDLE>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REMOVE_CLIENTS_IN_BUNDLE>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REG_CLIENT>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_UN_REG_CLIENT>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_REMOTE_CLEANUP_REQUEST>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_PERFORM_CLEANUP>
<androidx.test.internal.runner.InstrumentationConnection: int MSG_PERFORM_CLEANUP_FINISHED>
<androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation instrumentation>
<androidx.test.internal.runner.InstrumentationConnection: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher activityFinisher>
<androidx.test.internal.runner.InstrumentationConnection: android.content.Context targetContext>
<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>
<androidx.test.internal.runner.InstrumentationConnection: android.content.BroadcastReceiver messengerReceiver>
    static volatile android.app.Instrumentation '-$$Nest$sfgetinstrumentation'()
    {
        android.app.Instrumentation $r0;

        $r0 = <androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation instrumentation>;

        return $r0;
    }

    public static androidx.test.internal.runner.InstrumentationConnection getInstance()
    {
        androidx.test.internal.runner.InstrumentationConnection $r0;

        $r0 = <androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection DEFAULT_INSTANCE>;

        return $r0;
    }

    static volatile androidx.test.runner.MonitoringInstrumentation$ActivityFinisher '-$$Nest$sfgetactivityFinisher'()
    {
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher $r0;

        $r0 = <androidx.test.internal.runner.InstrumentationConnection: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher activityFinisher>;

        return $r0;
    }

    public synchronized java.util.Set getClientsForType(java.lang.String)
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        java.lang.String r1;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r2;
        java.util.Set $r3;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        $r3 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set '-$$Nest$mgetClientsForType'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.lang.String)>($r2, r1);

        return $r3;
    }

    static volatile void '-$$Nest$sfputactivityFinisher'(androidx.test.runner.MonitoringInstrumentation$ActivityFinisher)
    {
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r0;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        <androidx.test.internal.runner.InstrumentationConnection: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher activityFinisher> = r0;

        return;
    }

    static volatile void '-$$Nest$sfputinstrumentation'(android.app.Instrumentation)
    {
        android.app.Instrumentation r0;

        r0 := @parameter0: android.app.Instrumentation;

        <androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation instrumentation> = r0;

        return;
    }

    static void <clinit>()
    {
        androidx.test.internal.runner.InstrumentationConnection $r0;
        android.app.Instrumentation $r1;
        android.content.Context $r2;

        $r0 = new androidx.test.internal.runner.InstrumentationConnection;

        $r1 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r2 = virtualinvoke $r1.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        specialinvoke $r0.<androidx.test.internal.runner.InstrumentationConnection: void <init>(android.content.Context)>($r2);

        <androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection DEFAULT_INSTANCE> = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        android.content.Context r1, $r4;
        androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver;

        specialinvoke $r2.<androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver: void <init>(androidx.test.internal.runner.InstrumentationConnection)>(r0);

        r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.BroadcastReceiver messengerReceiver> = $r2;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Context can\'t be null");

        $r4 = (android.content.Context) $r3;

        r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.Context targetContext> = $r4;

        return;
    }

    public synchronized void init(android.app.Instrumentation, androidx.test.runner.MonitoringInstrumentation$ActivityFinisher)
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        android.app.Instrumentation r1;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r2;
        android.os.HandlerThread r3, $r9;
        android.content.Intent r4, $r12;
        android.os.Bundle r5, $r13;
        java.lang.Throwable r6, $r24;
        java.lang.Object[] $r7;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r8, $r10, $r15;
        android.os.Looper $r11;
        androidx.test.internal.util.ParcelableIBinder $r14;
        android.os.Messenger $r16;
        android.os.IBinder $r17;
        android.content.Context $r19, $r21;
        android.content.IntentFilter $r20;
        android.content.BroadcastReceiver $r22;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "init", $r7);

        $r8 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        if null != $r8 goto label4;

        <androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation instrumentation> = r1;

        <androidx.test.internal.runner.InstrumentationConnection: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher activityFinisher> = r2;

        $r9 = new android.os.HandlerThread;

        specialinvoke $r9.<android.os.HandlerThread: void <init>(java.lang.String)>("InstrumentationConnectionThread");

        r3 = $r9;

        virtualinvoke r3.<android.os.HandlerThread: void start()>();

        $r10 = new androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        $r11 = virtualinvoke r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void <init>(android.os.Looper)>($r11);

        r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler> = $r10;

        $r12 = new android.content.Intent;

        specialinvoke $r12.<android.content.Intent: void <init>(java.lang.String)>("androidx.test.runner.InstrumentationConnection.event");

        r4 = $r12;

        $r13 = new android.os.Bundle;

        specialinvoke $r13.<android.os.Bundle: void <init>()>();

        r5 = $r13;

        $r14 = new androidx.test.internal.util.ParcelableIBinder;

        $r15 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        $r16 = $r15.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Messenger messengerHandler>;

        $r17 = virtualinvoke $r16.<android.os.Messenger: android.os.IBinder getBinder()>();

        specialinvoke $r14.<androidx.test.internal.util.ParcelableIBinder: void <init>(android.os.IBinder)>($r17);

        virtualinvoke r5.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("new_instrumentation_binder", $r14);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>("new_instrumentation_binder", r5);

     label1:
        $r19 = r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.Context targetContext>;

        virtualinvoke $r19.<android.content.Context: void sendBroadcast(android.content.Intent)>(r4);

        $r21 = r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.Context targetContext>;

        $r22 = r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.BroadcastReceiver messengerReceiver>;

        $r20 = new android.content.IntentFilter;

        specialinvoke $r20.<android.content.IntentFilter: void <init>(java.lang.String)>("androidx.test.runner.InstrumentationConnection.event");

        virtualinvoke $r21.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r22, $r20);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

        r6 = $r24;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InstrConnection", "Could not send broadcast or register receiver (isolatedProcess?)");

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public synchronized void registerClient(java.lang.String, android.os.Messenger)
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        java.lang.String r1, r5, $r10;
        android.os.Messenger r2;
        android.os.Bundle r3, r15;
        android.os.Message r4;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r6, $r12, $r13;
        java.lang.StringBuilder $r8, $r9, r14;
        boolean $z1;
        android.os.Parcelable r16;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Messenger;

        $r6 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        if $r6 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z1, "Instrumentation Connection in not yet initialized");

        r5 = r1;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Register client of type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InstrConnection", $r10);

        r15 = new android.os.Bundle;

        specialinvoke r15.<android.os.Bundle: void <init>()>();

        r3 = r15;

        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("instr_client_type", r1);

        r16 = (android.os.Parcelable) r2;

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("instr_client_msgr", r16);

        $r12 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        r4 = virtualinvoke $r12.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(8);

        virtualinvoke r4.<android.os.Message: void setData(android.os.Bundle)>(r3);

        $r13 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        virtualinvoke $r13.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public synchronized void requestRemoteInstancesActivityCleanup()
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        java.util.UUID r1;
        java.util.concurrent.CountDownLatch r2, $r8;
        android.os.Message r3;
        android.os.Bundle r4;
        java.lang.Throwable r5, r6, $r20, $r26;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r7, $r9, $r10, $r11, $r13, $r15, $r25, $r27;
        android.os.Messenger $r12;
        java.util.concurrent.TimeUnit $r14;
        boolean $z1, $z2;
        java.lang.StringBuilder $r16, $r17, $r18, $r21, $r22, $r23;
        java.lang.String $r19, $r24, r28, r29;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        $r7 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        if $r7 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z2, "Instrumentation Connection in not yet initialized");

        r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r8 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = $r8;

        $r9 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void '-$$Nest$massociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID,java.util.concurrent.CountDownLatch)>($r9, r1, r2);

        $r10 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        r3 = virtualinvoke $r10.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(10);

        $r11 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        $r12 = $r11.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Messenger messengerHandler>;

        r3.<android.os.Message: android.os.Messenger replyTo> = $r12;

        r4 = virtualinvoke r3.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke r4.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("instr_uuid", r1);

        virtualinvoke r3.<android.os.Message: void setData(android.os.Bundle)>(r4);

        $r13 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        virtualinvoke $r13.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r3);

     label3:
        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z1 = virtualinvoke r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(2L, $r14);

        if $z1 != 0 goto label4;

        r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timed out while attempting to perform activity clean up for ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", $r19);

     label4:
        $r15 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void '-$$Nest$mdisassociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID)>($r15, r1);

        goto label9;

     label5:
        $r20 := @caughtexception;

        r5 = $r20;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted while waiting for response from message with id: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrConnection", $r24, r5);

     label6:
        $r25 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void '-$$Nest$mdisassociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID)>($r25, r1);

        goto label9;

     label7:
        $r26 := @caughtexception;

        r6 = $r26;

     label8:
        $r27 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void '-$$Nest$mdisassociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID)>($r27, r1);

        throw r6;

     label9:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public synchronized void terminate()
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        java.lang.Object[] $r1;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r2, $r4;
        androidx.test.internal.runner.InstrumentationConnection$1 $r3;
        android.content.BroadcastReceiver $r6;
        android.content.Context $r7;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "Terminate is called", $r1);

        $r2 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        $r3 = new androidx.test.internal.runner.InstrumentationConnection$1;

        specialinvoke $r3.<androidx.test.internal.runner.InstrumentationConnection$1: void <init>(androidx.test.internal.runner.InstrumentationConnection)>(r0);

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.lang.Object '-$$Nest$mrunSyncTask'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.concurrent.Callable)>($r4, $r3);

        $r7 = r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.Context targetContext>;

        $r6 = r0.<androidx.test.internal.runner.InstrumentationConnection: android.content.BroadcastReceiver messengerReceiver>;

        virtualinvoke $r7.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r6);

        r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler> = null;

     label1:
        return;
    }

    public synchronized void unregisterClient(java.lang.String, android.os.Messenger)
    {
        androidx.test.internal.runner.InstrumentationConnection r0;
        java.lang.String r1, r5, $r10;
        android.os.Messenger r2;
        android.os.Bundle r3, r15;
        android.os.Message r4;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r6, $r12, $r13;
        java.lang.StringBuilder $r8, $r9, r14;
        boolean $z1;
        android.os.Parcelable r16;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Messenger;

        $r6 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        if $r6 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z1, "Instrumentation Connection in not yet initialized");

        r5 = r1;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unregister client of type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InstrConnection", $r10);

        r15 = new android.os.Bundle;

        specialinvoke r15.<android.os.Bundle: void <init>()>();

        r3 = r15;

        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("instr_client_type", r1);

        r16 = (android.os.Parcelable) r2;

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("instr_client_msgr", r16);

        $r12 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        r4 = virtualinvoke $r12.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(9);

        virtualinvoke r4.<android.os.Message: void setData(android.os.Bundle)>(r3);

        $r13 = r0.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        virtualinvoke $r13.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

androidx.test.internal.runner.InstrumentationConnection$1
<androidx.test.internal.runner.InstrumentationConnection$1: androidx.test.internal.runner.InstrumentationConnection this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.internal.runner.InstrumentationConnection$1 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$1;

        $r1 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$1: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.internal.runner.InstrumentationConnection$1 r0;
        androidx.test.internal.runner.InstrumentationConnection $r1;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r2;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$1;

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$1: androidx.test.internal.runner.InstrumentationConnection this$0>;

        $r2 = $r1.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void '-$$Nest$mdoDie'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler)>($r2);

        return null;
    }

    void <init>(androidx.test.internal.runner.InstrumentationConnection)
    {
        androidx.test.internal.runner.InstrumentationConnection$1 r0;
        androidx.test.internal.runner.InstrumentationConnection r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$1;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection;

        r0.<androidx.test.internal.runner.InstrumentationConnection$1: androidx.test.internal.runner.InstrumentationConnection this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.UUID val$latchId>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.concurrent.CountDownLatch val$latch>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1;

        $r1 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r1;
        java.util.Map $r2;
        java.util.concurrent.CountDownLatch $r3;
        java.util.UUID $r4;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1;

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>;

        $r2 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map '-$$Nest$fgetlatches'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler)>($r1);

        $r4 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.UUID val$latchId>;

        $r3 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.concurrent.CountDownLatch val$latch>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        return null;
    }

    void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.util.UUID, java.util.concurrent.CountDownLatch)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r1;
        java.util.UUID r2;
        java.util.concurrent.CountDownLatch r3;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r3 := @parameter2: java.util.concurrent.CountDownLatch;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0> = r1;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.UUID val$latchId> = r2;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: java.util.concurrent.CountDownLatch val$latch> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: java.util.UUID val$latchId>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2;

        $r1 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r1;
        java.util.Map $r2;
        java.util.UUID $r3;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2;

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>;

        $r2 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map '-$$Nest$fgetlatches'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler)>($r1);

        $r3 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: java.util.UUID val$latchId>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return null;
    }

    void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.util.UUID)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r1;
        java.util.UUID r2;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0> = r1;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: java.util.UUID val$latchId> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: java.lang.String val$type>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3 r0;
        java.util.Set $r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3;

        $r1 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: java.util.Set call()>();

        return $r1;
    }

    public java.util.Set call()
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r1;
        java.lang.String $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.Set $r5;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3;

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0>;

        $r3 = $r1.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $r2 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: java.lang.String val$type>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.util.Set) $r4;

        return $r5;
    }

    void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.lang.String)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3 r0;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r1;
        java.lang.String r2;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler this$0> = r1;

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: java.lang.String val$type> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.internal.runner.InstrumentationConnection$IncomingHandler
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Messenger messengerHandler>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>
<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map latches>
    static volatile java.lang.Object '-$$Nest$mrunSyncTask'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.util.concurrent.Callable)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.concurrent.Callable r1;
        java.lang.Object $r2;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter1: java.util.concurrent.Callable;

        $r2 = specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.lang.Object runSyncTask(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    private java.lang.Object runSyncTask(java.util.concurrent.Callable)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.FutureTask r2, r13;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r7, $r8, $r10, r11, r12;
        java.lang.IllegalStateException r14, r15;
        java.lang.Runnable r16;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.util.concurrent.Callable;

        r13 = new java.util.concurrent.FutureTask;

        specialinvoke r13.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        r2 = r13;

        r16 = (java.lang.Runnable) r2;

        virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean post(java.lang.Runnable)>(r16);

     label1:
        $r4 = virtualinvoke r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        r11 = $r8;

        r14 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke r11.<java.lang.InterruptedException: java.lang.Throwable getCause()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw r14;

     label4:
        $r5 := @caughtexception;

        r12 = $r5;

        r15 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r12.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw r15;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    static volatile java.util.Map '-$$Nest$fgetlatches'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.Map $r1;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map latches>;

        return $r1;
    }

    static volatile java.util.Set '-$$Nest$mgetClientsForType'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.lang.String)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set getClientsForType(java.lang.String)>(r1);

        return $r2;
    }

    private java.util.Set getClientsForType(java.lang.String)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.lang.String r1;
        java.util.concurrent.FutureTask r2, r15;
        java.lang.Object $r5;
        java.util.Set $r6;
        java.lang.Throwable $r7, $r9, $r10, r12, r13;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3 r14;
        java.lang.IllegalStateException r16, r17;
        java.lang.Runnable r18;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.lang.String;

        r15 = new java.util.concurrent.FutureTask;

        r14 = new androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3;

        specialinvoke r14.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$3: void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.lang.String)>(r0, r1);

        specialinvoke r15.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r14);

        r2 = r15;

        r18 = (java.lang.Runnable) r2;

        virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean post(java.lang.Runnable)>(r18);

     label1:
        $r5 = virtualinvoke r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        $r6 = (java.util.Set) $r5;

     label2:
        return $r6;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r12);

        throw r16;

     label4:
        $r7 := @caughtexception;

        r13 = $r7;

        r17 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r13.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw r17;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    static volatile void '-$$Nest$massociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.util.UUID, java.util.concurrent.CountDownLatch)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.UUID r1;
        java.util.concurrent.CountDownLatch r2;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void associateLatch(java.util.UUID,java.util.concurrent.CountDownLatch)>(r1, r2);

        return;
    }

    static volatile void '-$$Nest$mdisassociateLatch'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler, java.util.UUID)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.UUID r1;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void disassociateLatch(java.util.UUID)>(r1);

        return;
    }

    static volatile void '-$$Nest$mdoDie'(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;

        r0 := @parameter0: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void doDie()>();

        return;
    }

    public void <init>(android.os.Looper)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        android.os.Looper r1, $r6, $r8;
        android.os.Messenger $r2;
        java.util.HashSet $r3;
        java.util.HashMap $r4, $r5;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        $r2 = new android.os.Messenger;

        specialinvoke $r2.<android.os.Messenger: void <init>(android.os.Handler)>(r0);

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Messenger messengerHandler> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map latches> = $r5;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r6 == r1 goto label1;

        $r8 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r8 != r1 goto label2;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This handler should not be using the main thread looper nor the instrumentation thread looper.");

        throw $r7;

     label2:
        return;
    }

    private void associateLatch(java.util.UUID, java.util.concurrent.CountDownLatch)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.UUID r1;
        java.util.concurrent.CountDownLatch r2;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1 $r3;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: java.util.concurrent.CountDownLatch;

        $r3 = new androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1;

        specialinvoke $r3.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$1: void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID,java.util.concurrent.CountDownLatch)>(r0, r1, r2);

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.lang.Object runSyncTask(java.util.concurrent.Callable)>($r3);

        return;
    }

    private void clientsRegistrationFromBundle(android.os.Bundle, boolean)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        android.os.Bundle r1;
        boolean z0, $z1;
        java.util.ArrayList r2;
        java.util.Iterator r3;
        java.lang.String r4, $r10;
        android.os.Parcelable[] r5, r6;
        int i0, i3;
        android.os.Parcelable r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        android.os.Messenger $r11, $r12;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: android.os.Bundle;

        z0 := @parameter1: boolean;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "clientsRegistrationFromBundle called", $r8);

        if null != r1 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "The client bundle is null, ignoring...");

        return;

     label1:
        r2 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("instr_clients");

        if null != r2 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "No clients found in the given bundle");

        return;

     label2:
        r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        r5 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>($r10);

        if r5 == null goto label7;

        r6 = r5;

        i0 = lengthof r6;

        i3 = 0;

     label4:
        if i3 >= i0 goto label7;

        r7 = r6[i3];

        if z0 == 0 goto label5;

        $r12 = (android.os.Messenger) r7;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void registerClient(java.lang.String,android.os.Messenger)>(r4, $r12);

        goto label6;

     label5:
        $r11 = (android.os.Messenger) r7;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void unregisterClient(java.lang.String,android.os.Messenger)>(r4, $r11);

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        goto label3;

     label8:
        return;
    }

    private void disassociateLatch(java.util.UUID)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.UUID r1;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2 $r2;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.util.UUID;

        $r2 = new androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2;

        specialinvoke $r2.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler$2: void <init>(androidx.test.internal.runner.InstrumentationConnection$IncomingHandler,java.util.UUID)>(r0, r1);

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.lang.Object runSyncTask(java.util.concurrent.Callable)>($r2);

        return;
    }

    private void doDie()
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.Set $r1;
        java.util.Map $r2;
        java.lang.Object[] $r3, $r5;
        android.os.Looper $r4;
        android.app.Instrumentation $r6;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InstrConnection", "terminating process");

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageToOtherInstr(int,android.os.Bundle)>(5, null);

        $r1 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r2 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "quitting looper...", $r3);

        $r4 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void quit()>();

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "finishing instrumentation...", $r5);

        $r6 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation '-$$Nest$sfgetinstrumentation'()>();

        virtualinvoke $r6.<android.app.Instrumentation: void finish(int,android.os.Bundle)>(0, null);

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection: void '-$$Nest$sfputinstrumentation'(android.app.Instrumentation)>(null);

        staticinvoke <androidx.test.internal.runner.InstrumentationConnection: void '-$$Nest$sfputactivityFinisher'(androidx.test.runner.MonitoringInstrumentation$ActivityFinisher)>(null);

        return;
    }

    public void handleMessage(android.os.Message)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        android.os.Message r1, r2;
        int i0, $i1;
        java.lang.Object[] $r3, $r7, $r12, $r16, $r23, $r30, $r32, $r34, $r37, $r43, $r47, $r48, $r52;
        android.os.Bundle $r4, $r11, $r14, $r15, $r17, $r19, $r22, $r24, $r26, $r29, $r31, $r33, $r41, $r49, $r53, $r55;
        java.io.Serializable $r5;
        java.util.UUID $r6;
        android.app.Instrumentation $r8;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher $r9;
        android.os.Messenger $r10, $r21, $r28, $r35, $r38, $r42, $r44, $r46, $r51, $r57;
        java.util.Set $r13, $r36, $r39, $r45;
        boolean $z0, $z2, $z3, $z4, $z5;
        java.lang.String $r18, $r25, $r50, $r54, $r61;
        android.os.Parcelable $r20, $r27, $r56;
        java.util.Map $r40;
        java.lang.StringBuilder $r58, $r59, $r60;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: android.os.Message;

        $i1 = r1.<android.os.Message: int what>;

        tableswitch($i1)
        {
            case 0: goto label11;
            case 1: goto label13;
            case 2: goto label01;
            case 3: goto label02;
            case 4: goto label04;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label12;
            case 10: goto label14;
            case 11: goto label16;
            case 12: goto label17;
            default: goto label18;
        };

     label01:
        $r47 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_TERMINATE)", $r47);

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void doDie()>();

        goto label19;

     label02:
        $r43 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_HANDLE_INSTRUMENTATION_FROM_BROADCAST)", $r43);

        $r45 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        $r44 = r1.<android.os.Message: android.os.Messenger replyTo>;

        $z5 = interfaceinvoke $r45.<java.util.Set: boolean add(java.lang.Object)>($r44);

        if $z5 == 0 goto label03;

        $r46 = r1.<android.os.Message: android.os.Messenger replyTo>;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageWithReply(android.os.Messenger,int,android.os.Bundle)>($r46, 4, null);

        goto label19;

     label03:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "Broadcast with existing binder was received, ignoring it..");

        goto label19;

     label04:
        $r37 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_ADD_INSTRUMENTATION)", $r37);

        $r39 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        $r38 = r1.<android.os.Message: android.os.Messenger replyTo>;

        $z3 = interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>($r38);

        if $z3 == 0 goto label06;

        $r40 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $z4 = interfaceinvoke $r40.<java.util.Map: boolean isEmpty()>();

        if $z4 != 0 goto label05;

        $r42 = r1.<android.os.Message: android.os.Messenger replyTo>;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageWithReply(android.os.Messenger,int,android.os.Bundle)>($r42, 6, null);

     label05:
        $r41 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void clientsRegistrationFromBundle(android.os.Bundle,boolean)>($r41, 1);

        goto label19;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "Message with existing binder was received, ignoring it..");

        goto label19;

     label07:
        $r34 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REMOVE_INSTRUMENTATION)", $r34);

        $r36 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        $r35 = r1.<android.os.Message: android.os.Messenger replyTo>;

        $z2 = interfaceinvoke $r36.<java.util.Set: boolean remove(java.lang.Object)>($r35);

        if $z2 != 0 goto label19;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "Attempting to remove a non-existent binder!");

        goto label19;

     label08:
        $r32 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_ADD_CLIENTS_IN_BUNDLE)", $r32);

        $r33 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void clientsRegistrationFromBundle(android.os.Bundle,boolean)>($r33, 1);

        goto label19;

     label09:
        $r30 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REMOVE_CLIENTS_IN_BUNDLE)", $r30);

        $r31 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void clientsRegistrationFromBundle(android.os.Bundle,boolean)>($r31, 0);

        goto label19;

     label10:
        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REG_CLIENT)", $r23);

        $r24 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r25 = virtualinvoke $r24.<android.os.Bundle: java.lang.String getString(java.lang.String)>("instr_client_type");

        $r26 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r27 = virtualinvoke $r26.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("instr_client_msgr");

        $r28 = (android.os.Messenger) $r27;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void registerClient(java.lang.String,android.os.Messenger)>($r25, $r28);

        $r29 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageToOtherInstr(int,android.os.Bundle)>(0, $r29);

        goto label19;

     label11:
        $r52 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REMOTE_ADD_CLIENT)", $r52);

        $r53 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r54 = virtualinvoke $r53.<android.os.Bundle: java.lang.String getString(java.lang.String)>("instr_client_type");

        $r55 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r56 = virtualinvoke $r55.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("instr_client_msgr");

        $r57 = (android.os.Messenger) $r56;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void registerClient(java.lang.String,android.os.Messenger)>($r54, $r57);

        goto label19;

     label12:
        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_UN_REG_CLIENT)", $r16);

        $r17 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r18 = virtualinvoke $r17.<android.os.Bundle: java.lang.String getString(java.lang.String)>("instr_client_type");

        $r19 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r20 = virtualinvoke $r19.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("instr_client_msgr");

        $r21 = (android.os.Messenger) $r20;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void unregisterClient(java.lang.String,android.os.Messenger)>($r18, $r21);

        $r22 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageToOtherInstr(int,android.os.Bundle)>(1, $r22);

        goto label19;

     label13:
        $r48 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REMOTE_REMOVE_CLIENT)", $r48);

        $r49 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r50 = virtualinvoke $r49.<android.os.Bundle: java.lang.String getString(java.lang.String)>("instr_client_type");

        $r51 = r1.<android.os.Message: android.os.Messenger replyTo>;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void unregisterClient(java.lang.String,android.os.Messenger)>($r50, $r51);

        goto label19;

     label14:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_REMOTE_CLEANUP_REQUEST)", $r12);

        $r13 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        $z0 = interfaceinvoke $r13.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label15;

        r2 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(12);

        $r15 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke r2.<android.os.Message: void setData(android.os.Bundle)>($r15);

        virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r2);

        goto label19;

     label15:
        $r14 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageToOtherInstr(int,android.os.Bundle)>(11, $r14);

        goto label19;

     label16:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_PERFORM_CLEANUP)", $r7);

        $r8 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: android.app.Instrumentation '-$$Nest$sfgetinstrumentation'()>();

        $r9 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher '-$$Nest$sfgetactivityFinisher'()>();

        virtualinvoke $r8.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>($r9);

        $r10 = r1.<android.os.Message: android.os.Messenger replyTo>;

        $r11 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageWithReply(android.os.Messenger,int,android.os.Bundle)>($r10, 12, $r11);

        goto label19;

     label17:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "handleMessage(MSG_PERFORM_CLEANUP_FINISHED)", $r3);

        $r4 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("instr_uuid");

        $r6 = (java.util.UUID) $r5;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void notifyLatch(java.util.UUID)>($r6);

        goto label19;

     label18:
        i0 = r1.<android.os.Message: int what>;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message code received: ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", $r61);

        specialinvoke r0.<android.os.Handler: void handleMessage(android.os.Message)>(r1);

     label19:
        return;
    }

    private void instrBinderDied(android.os.Messenger)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        android.os.Messenger r1;
        android.os.Message r2;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: android.os.Messenger;

        r2 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(5);

        r2.<android.os.Message: android.os.Messenger replyTo> = r1;

        virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    private void notifyLatch(java.util.UUID)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.util.UUID r1;
        java.lang.String r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.util.Map $r7, $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.util.concurrent.CountDownLatch $r10;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.util.UUID;

        if r1 == null goto label1;

        $r7 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map latches>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map latches>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (java.util.concurrent.CountDownLatch) $r9;

        virtualinvoke $r10.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label2;

     label1:
        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch not found ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", $r6);

     label2:
        return;
    }

    private void registerClient(java.lang.String, android.os.Messenger)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.lang.String r1;
        android.os.Messenger r2;
        java.lang.Object[] $r3;
        java.util.Map $r6, $r9;
        java.lang.Object $r7;
        java.util.HashSet $r8, r12;
        java.util.Set r11;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Messenger;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "registerClient called with type = [%s] client = [%s]", $r3);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "type cannot be null!");

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "client cannot be null!");

        $r6 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (java.util.Set) $r7;

        if null != r11 goto label1;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r12 = $r8;

        interfaceinvoke r12.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r9 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

        return;

     label1:
        interfaceinvoke r11.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return;
    }

    private void sendMessageToOtherInstr(int, android.os.Bundle)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        int i0;
        android.os.Bundle r1;
        java.util.Iterator r2;
        android.os.Messenger r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r4[1] = r1;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "sendMessageToOtherInstr() called with: what = [%s], data = [%s]", $r4);

        $r6 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Set otherInstrumentations>;

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.Messenger) $r7;

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void sendMessageWithReply(android.os.Messenger,int,android.os.Bundle)>(r3, i0, r1);

        goto label1;

     label2:
        return;
    }

    private void sendMessageWithReply(android.os.Messenger, int, android.os.Bundle)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        android.os.Messenger r1, $r15;
        int i0, i1, $i2;
        android.os.Bundle r2, r31;
        android.os.Message r3;
        java.util.ArrayList r4, r34;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.lang.String r7, $r13;
        android.os.Messenger[] r8, $r28;
        java.lang.StringBuilder $r10, $r11, $r12, r33;
        java.lang.Object[] $r14, $r29;
        java.util.Map $r16, $r18, $r20;
        boolean $z0, $z1;
        java.util.Set $r19, $r21, $r25, $r27;
        java.lang.Object $r22, $r23, $r24, $r26;
        java.lang.Throwable $r30, r32;
        android.os.Parcelable[] r35;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: android.os.Messenger;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        i1 = i0;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendMessageWithReply type: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" called");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", $r13, $r14);

        r3 = virtualinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(i0);

        $r15 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Messenger messengerHandler>;

        r3.<android.os.Message: android.os.Messenger replyTo> = $r15;

        if r2 == null goto label1;

        virtualinvoke r3.<android.os.Message: void setData(android.os.Bundle)>(r2);

     label1:
        $r16 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $z0 = interfaceinvoke $r16.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        r31 = virtualinvoke r3.<android.os.Message: android.os.Bundle getData()>();

        r34 = new java.util.ArrayList;

        $r18 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();

        specialinvoke r34.<java.util.ArrayList: void <init>(java.util.Collection)>($r19);

        r4 = r34;

        virtualinvoke r31.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("instr_clients", r4);

        $r20 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r22 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r22;

        $r23 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23);

        $r24 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (java.util.Set) $r24;

        $r26 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.util.Set) $r26;

        $i2 = interfaceinvoke $r27.<java.util.Set: int size()>();

        $r28 = newarray (android.os.Messenger)[$i2];

        $r29 = interfaceinvoke $r25.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r28);

        r8 = (android.os.Messenger[]) $r29;

        r35 = (android.os.Parcelable[]) r8;

        virtualinvoke r31.<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>(r7, r35);

        goto label2;

     label3:
        virtualinvoke r3.<android.os.Message: void setData(android.os.Bundle)>(r31);

     label4:
        virtualinvoke r1.<android.os.Messenger: void send(android.os.Message)>(r3);

     label5:
        goto label7;

     label6:
        $r30 := @caughtexception;

        r32 = $r30;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrConnection", "The remote process is terminated unexpectedly", r32);

        specialinvoke r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: void instrBinderDied(android.os.Messenger)>(r1);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void unregisterClient(java.lang.String, android.os.Messenger)
    {
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler r0;
        java.lang.String r1, $r16, $r20, r21, r22;
        android.os.Messenger r2;
        java.util.Set r3;
        java.lang.Object[] $r4;
        java.util.Map $r7, $r8, $r10;
        boolean $z0, $z1, $z3;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r18, $r19;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Messenger;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r4[1] = r2;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "unregisterClient called with type = [%s] client = [%s]", $r4);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "type cannot be null!");

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "client cannot be null!");

        $r7 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        r21 = r1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There are no registered clients for type: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", $r20);

        return;

     label1:
        $r8 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Set) $r9;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        r22 = r1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not unregister client for type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t seem to be registered");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", $r16);

        return;

     label2:
        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        $z3 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z3 == 0 goto label3;

        $r10 = r0.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: java.util.Map typedClients>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label3:
        return;
    }

androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver
<androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver: androidx.test.internal.runner.InstrumentationConnection this$0>
    void <init>(androidx.test.internal.runner.InstrumentationConnection)
    {
        androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver r0;
        androidx.test.internal.runner.InstrumentationConnection r1;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection;

        r0.<androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver: androidx.test.internal.runner.InstrumentationConnection this$0> = r1;

        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();

        return;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver r0;
        android.content.Context r1;
        android.content.Intent r2;
        android.os.Bundle r3;
        androidx.test.internal.util.ParcelableIBinder r4;
        android.os.Messenger r5, $r9;
        android.os.Message r6;
        java.lang.Object[] $r7;
        android.os.Parcelable $r8;
        android.os.IBinder $r10;
        androidx.test.internal.runner.InstrumentationConnection $r11, $r13;
        androidx.test.internal.runner.InstrumentationConnection$IncomingHandler $r12, $r14;

        r0 := @this: androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.Intent;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("InstrConnection", "Broadcast received", $r7);

        r3 = virtualinvoke r2.<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>("new_instrumentation_binder");

        if null != r3 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InstrConnection", "Broadcast intent doesn\'t contain any extras, ignoring it..");

        return;

     label1:
        $r8 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("new_instrumentation_binder");

        r4 = (androidx.test.internal.util.ParcelableIBinder) $r8;

        if r4 == null goto label2;

        $r9 = new android.os.Messenger;

        $r10 = virtualinvoke r4.<androidx.test.internal.util.ParcelableIBinder: android.os.IBinder getIBinder()>();

        specialinvoke $r9.<android.os.Messenger: void <init>(android.os.IBinder)>($r10);

        r5 = $r9;

        $r11 = r0.<androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver: androidx.test.internal.runner.InstrumentationConnection this$0>;

        $r12 = $r11.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        r6 = virtualinvoke $r12.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: android.os.Message obtainMessage(int)>(3);

        r6.<android.os.Message: android.os.Messenger replyTo> = r5;

        $r13 = r0.<androidx.test.internal.runner.InstrumentationConnection$MessengerReceiver: androidx.test.internal.runner.InstrumentationConnection this$0>;

        $r14 = $r13.<androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection$IncomingHandler incomingHandler>;

        virtualinvoke $r14.<androidx.test.internal.runner.InstrumentationConnection$IncomingHandler: boolean sendMessage(android.os.Message)>(r6);

     label2:
        return;
    }

