okio.Okio__JvmOkioKt
<okio.Okio__JvmOkioKt: java.util.logging.Logger logger>
    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("okio.Okio");

        <okio.Okio__JvmOkioKt: java.util.logging.Logger logger> = $r0;

        return;
    }

    public static final java.util.logging.Logger access$getLogger$p()
    {
        java.util.logging.Logger r0;

        r0 = <okio.Okio__JvmOkioKt: java.util.logging.Logger logger>;

        return r0;
    }

    public static final boolean isAndroidGetsocknameError(java.lang.AssertionError)
    {
        java.lang.AssertionError $r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.AssertionError;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.lang.AssertionError: java.lang.Throwable getCause()>();

        if $r1 == null goto label3;

        $r2 = virtualinvoke $r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        if $r2 == null goto label1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r2, "getsockname failed", 0, 2, null);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static final okio.Sink sink(java.net.Socket) throws java.io.IOException
    {
        okio.OutputStreamSink $r0;
        java.net.Socket $r1;
        okio.SocketAsyncTimeout $r2;
        java.io.OutputStream $r3;
        okio.Sink $r4;

        $r1 := @parameter0: java.net.Socket;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new okio.SocketAsyncTimeout;

        specialinvoke $r2.<okio.SocketAsyncTimeout: void <init>(java.net.Socket)>($r1);

        $r0 = new okio.OutputStreamSink;

        $r3 = virtualinvoke $r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "getOutputStream()");

        specialinvoke $r0.<okio.OutputStreamSink: void <init>(java.io.OutputStream,okio.Timeout)>($r3, $r2);

        $r4 = virtualinvoke $r2.<okio.SocketAsyncTimeout: okio.Sink sink(okio.Sink)>($r0);

        return $r4;
    }

    public static final okio.Source source(java.net.Socket) throws java.io.IOException
    {
        okio.InputStreamSource $r0;
        java.net.Socket $r1;
        okio.SocketAsyncTimeout $r2;
        java.io.InputStream $r3;
        okio.Source $r4;

        $r1 := @parameter0: java.net.Socket;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new okio.SocketAsyncTimeout;

        specialinvoke $r2.<okio.SocketAsyncTimeout: void <init>(java.net.Socket)>($r1);

        $r0 = new okio.InputStreamSource;

        $r3 = virtualinvoke $r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "getInputStream()");

        specialinvoke $r0.<okio.InputStreamSource: void <init>(java.io.InputStream,okio.Timeout)>($r3, $r2);

        $r4 = virtualinvoke $r2.<okio.SocketAsyncTimeout: okio.Source source(okio.Source)>($r0);

        return $r4;
    }

