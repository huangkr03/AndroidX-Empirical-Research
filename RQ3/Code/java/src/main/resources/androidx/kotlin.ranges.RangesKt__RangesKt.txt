kotlin.ranges.RangesKt__RangesKt
    public void <init>()
    {
        kotlin.ranges.RangesKt__RangesKt $r0;

        $r0 := @this: kotlin.ranges.RangesKt__RangesKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final void checkStepIsPositive(boolean, java.lang.Number)
    {
        boolean $z0;
        java.lang.Number $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Number;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "step");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step must be positive, was: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    private static final boolean contains(java.lang.Iterable, java.lang.Object)
    {
        boolean $z0;
        java.lang.Iterable $r0;
        java.lang.Object $r1;
        kotlin.ranges.ClosedRange $r2;
        java.lang.Comparable $r3;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label1;

        $r2 = (kotlin.ranges.ClosedRange) $r0;

        $r3 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r2.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final kotlin.ranges.ClosedFloatingPointRange rangeTo(double, double)
    {
        double $d0, $d1;
        kotlin.ranges.ClosedDoubleRange $r0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new kotlin.ranges.ClosedDoubleRange;

        specialinvoke $r0.<kotlin.ranges.ClosedDoubleRange: void <init>(double,double)>($d0, $d1);

        return $r0;
    }

    public static final kotlin.ranges.ClosedFloatingPointRange rangeTo(float, float)
    {
        float $f0, $f1;
        kotlin.ranges.ClosedFloatRange $r0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $r0 = new kotlin.ranges.ClosedFloatRange;

        specialinvoke $r0.<kotlin.ranges.ClosedFloatRange: void <init>(float,float)>($f0, $f1);

        return $r0;
    }

    public static final kotlin.ranges.ClosedRange rangeTo(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        kotlin.ranges.ComparableRange $r2;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "that");

        $r2 = new kotlin.ranges.ComparableRange;

        specialinvoke $r2.<kotlin.ranges.ComparableRange: void <init>(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        return $r2;
    }

