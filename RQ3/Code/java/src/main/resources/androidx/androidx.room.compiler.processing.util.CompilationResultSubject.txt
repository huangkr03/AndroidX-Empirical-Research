androidx.room.compiler.processing.util.CompilationResultSubject
<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject$Companion Companion>
<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>
<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed>
<androidx.room.compiler.processing.util.CompilationResultSubject: com.google.common.truth.Subject$Factory FACTORY>
    public void <init>(com.google.common.truth.FailureMetadata, androidx.room.compiler.processing.util.CompilationResult)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        com.google.common.truth.FailureMetadata r1;
        androidx.room.compiler.processing.util.CompilationResult r2;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: com.google.common.truth.FailureMetadata;

        r2 := @parameter1: androidx.room.compiler.processing.util.CompilationResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "failureMetadata");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "compilationResult");

        specialinvoke r0.<com.google.common.truth.Subject: void <init>(com.google.common.truth.FailureMetadata,java.lang.Object)>(r1, r2);

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult> = r2;

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 1;

        return;
    }

    public final androidx.room.compiler.processing.util.CompilationResult getCompilationResult()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        androidx.room.compiler.processing.util.CompilationResult $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        return $r1;
    }

    public final boolean getShouldSucceed$room_compiler_processing_testing()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $z0 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed>;

        return $z0;
    }

    public final void setShouldSucceed$room_compiler_processing_testing(boolean)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        boolean z0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        z0 := @parameter0: boolean;

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = z0;

        return;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject compilationDidFail()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, r1, $r2, $r3;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 = r0;

        $r2 = (androidx.room.compiler.processing.util.CompilationResultSubject) r1;

        $r2.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 0;

        $r3 = (androidx.room.compiler.processing.util.CompilationResultSubject) r1;

        return $r3;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject hasRawOutputContaining(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, r2, $r3, $r8;
        java.lang.String r1, $r5, $r13;
        boolean z1;
        androidx.room.compiler.processing.util.CompilationResult $r4;
        java.lang.CharSequence $r6, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        com.google.common.truth.Fact $r14;
        com.google.common.truth.Fact[] $r15;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        r2 = r0;

        $r3 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        $r4 = $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.util.CompilationResult: java.lang.String rawOutput()>();

        $r7 = (java.lang.CharSequence) $r5;

        $r6 = (java.lang.CharSequence) r1;

        z1 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r7, $r6, 0, 2, null);

        if z1 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the output.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r13);

        $r15 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r14, $r15);

     label1:
        $r8 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        return $r8;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject hasNoWarnings()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, $r2;
        javax.tools.Diagnostic$Kind $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $r1 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        $r2 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject hasDiagnosticCount(javax.tools.Diagnostic$Kind,int)>($r1, 0);

        return $r2;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject hasErrorCount(int)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, $r2;
        int i0;
        javax.tools.Diagnostic$Kind $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        i0 := @parameter0: int;

        $r1 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $r2 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject hasDiagnosticCount(javax.tools.Diagnostic$Kind,int)>($r1, i0);

        return $r2;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject hasWarningCount(int)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, $r2;
        int i0;
        javax.tools.Diagnostic$Kind $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        i0 := @parameter0: int;

        $r1 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        $r2 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject hasDiagnosticCount(javax.tools.Diagnostic$Kind,int)>($r1, i0);

        return $r2;
    }

    private final androidx.room.compiler.processing.util.CompilationResultSubject hasDiagnosticCount(javax.tools.Diagnostic$Kind, int)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, r2, $r3, $r6;
        javax.tools.Diagnostic$Kind r1;
        int i0, i1;
        androidx.room.compiler.processing.util.CompilationResult $r4;
        java.util.List $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        com.google.common.truth.Fact $r15;
        com.google.common.truth.Fact[] $r16;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: javax.tools.Diagnostic$Kind;

        i0 := @parameter1: int;

        r2 = r0;

        $r3 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        $r4 = $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.util.CompilationResult: java.util.List diagnosticsOfKind(javax.tools.Diagnostic$Kind)>(r1);

        i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i1 == i0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" messages, found ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r14);

        $r16 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r15, $r16);

     label1:
        $r6 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        return $r6;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasWarning(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasWarning$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasWarning$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasWarning$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 0, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasWarningContaining(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContaining$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContaining$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContaining$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasWarningContainingMatch(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContainingMatch$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expectedPattern");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContainingMatch$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasWarningContainingMatch$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithPattern(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasNote(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasNote$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind NOTE>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasNote$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasNote$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 0, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasNoteContaining(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContaining$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind NOTE>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContaining$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContaining$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasNoteContainingMatch(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContainingMatch$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expectedPattern");

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind NOTE>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContainingMatch$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasNoteContainingMatch$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithPattern(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasError(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasError$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 0;

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasError$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasError$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 0, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasErrorContaining(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContaining$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 0;

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContaining$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContaining$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasErrorContainingMatch(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContainingMatch$1 $r2;
        javax.tools.Diagnostic$Kind $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r5;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expectedPattern");

        r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 0;

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContainingMatch$1;

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject$hasErrorContainingMatch$1: void <init>(java.lang.String)>(r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithPattern(javax.tools.Diagnostic$Kind,java.lang.String,boolean,kotlin.jvm.functions.Function0)>($r3, r1, 1, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject hasError()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, r1, $r2, $r6;
        javax.tools.Diagnostic$Kind $r3;
        androidx.room.compiler.processing.util.CompilationResult $r4;
        java.util.List $r5;
        boolean $z1;
        com.google.common.truth.Fact $r7;
        com.google.common.truth.Fact[] $r8;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 = r0;

        $r2 = (androidx.room.compiler.processing.util.CompilationResultSubject) r1;

        $r2.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed> = 0;

        $r4 = $r2.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.util.CompilationResult: java.util.List diagnosticsOfKind(javax.tools.Diagnostic$Kind)>($r3);

        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r7 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("expected at least one failure message");

        $r8 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r7, $r8);

     label1:
        $r6 = (androidx.room.compiler.processing.util.CompilationResultSubject) r1;

        return $r6;
    }

    public final com.google.common.truth.StringSubject generatedSourceFileWithPath(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1, $r3, $r8;
        androidx.room.compiler.processing.util.Source r2;
        com.google.common.truth.StringSubject $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        com.google.common.truth.Fact $r9;
        com.google.common.truth.Fact[] $r10;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "relativePath");

        r2 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.Source findGeneratedSource(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Didn\'t generate file with path: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r8);

        $r10 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r9, $r10);

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        $r3 = virtualinvoke r2.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "assertThat(match!!.contents)");

        return $r4;
    }

    private final androidx.room.compiler.processing.util.Source findGeneratedSource(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.String r1, $r9;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.room.compiler.processing.util.Source r5, $r8, r10;
        androidx.room.compiler.processing.util.CompilationResult $r6;
        java.util.List $r7;
        boolean $z2, $z3;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r7 = virtualinvoke $r6.<androidx.room.compiler.processing.util.CompilationResult: java.util.List getGeneratedSources$room_compiler_processing_testing()>();

        $r2 = (java.lang.Iterable) $r7;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.room.compiler.processing.util.Source) r4;

        $r9 = virtualinvoke r5.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, r1);

        if $z3 == 0 goto label1;

        r10 = (androidx.room.compiler.processing.util.Source) r4;

        return r10;

     label2:
        $r8 = (androidx.room.compiler.processing.util.Source) null;

        return $r8;
    }

    public final androidx.room.compiler.processing.util.CompilationResultSubject generatedSource(androidx.room.compiler.processing.util.Source)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0, r2, $r3, $r28;
        androidx.room.compiler.processing.util.Source r1, r6, r7;
        java.util.Iterator r4;
        java.lang.Object r5, $r25;
        androidx.room.compiler.processing.util.CompilationResult $r8;
        java.util.List $r9;
        boolean $z2, $z3;
        com.google.common.truth.Fact $r10, $r11, $r13, $r15, $r20;
        java.lang.String $r12, $r14, $r19, $r22, $r23;
        java.lang.StringBuilder $r16, $r17, $r18;
        com.google.common.truth.Fact[] $r21, $r27;
        java.lang.Iterable $r24;
        androidx.room.compiler.processing.util.SourceFileMismatch $r26;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: androidx.room.compiler.processing.util.Source;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "source");

        r2 = r0;

        $r3 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        $r8 = $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r9 = virtualinvoke $r8.<androidx.room.compiler.processing.util.CompilationResult: java.util.List getGeneratedSources$room_compiler_processing_testing()>();

        $r24 = (java.lang.Iterable) $r9;

        r4 = interfaceinvoke $r24.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.room.compiler.processing.util.Source) r5;

        $r22 = virtualinvoke r6.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $r23 = virtualinvoke r1.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r22, $r23);

        if $z3 == 0 goto label1;

        $r25 = r5;

        goto label3;

     label2:
        $r25 = null;

     label3:
        r7 = (androidx.room.compiler.processing.util.Source) $r25;

        if r7 != null goto label4;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Didn\'t generate ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r19);

        $r21 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r20, $r21);

        goto label5;

     label4:
        $r26 = staticinvoke <androidx.room.compiler.processing.util.SourceFileAssertionsKt: androidx.room.compiler.processing.util.SourceFileMismatch findMismatch(androidx.room.compiler.processing.util.Source,androidx.room.compiler.processing.util.Source)>(r1, r7);

        if $r26 == null goto label5;

        $r10 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Generated code does not match expected");

        $r27 = newarray (com.google.common.truth.Fact)[3];

        $r11 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("mismatch", $r26);

        $r27[0] = $r11;

        $r12 = virtualinvoke r1.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r13 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("expected", $r12);

        $r27[1] = $r13;

        $r14 = virtualinvoke r7.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r15 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("actual", $r14);

        $r27[2] = $r15;

        virtualinvoke $r3.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r10, $r27);

     label5:
        $r28 = (androidx.room.compiler.processing.util.CompilationResultSubject) r2;

        return $r28;
    }

    public final void assertCompilationResult$room_compiler_processing_testing()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        androidx.room.compiler.processing.util.CompilationResult $r1, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r8;
        com.google.common.truth.Fact $r9;
        com.google.common.truth.Fact[] $r10;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $z0 = virtualinvoke $r1.<androidx.room.compiler.processing.util.CompilationResult: boolean getSuccessfulCompilation$room_compiler_processing_testing()>();

        $z1 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed>;

        if $z0 == $z1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected compilation result to be: ");

        $z2 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: boolean shouldSucceed>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $r6 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $z3 = virtualinvoke $r6.<androidx.room.compiler.processing.util.CompilationResult: boolean getSuccessfulCompilation$room_compiler_processing_testing()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r8);

        $r10 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r9, $r10);

     label1:
        return;
    }

    public final void assertAllExpectedRoundsAreCompleted$room_compiler_processing_testing()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        androidx.room.compiler.processing.util.CompilationResult $r1;
        androidx.room.compiler.processing.SyntheticProcessor $r2;
        boolean $z0;
        com.google.common.truth.Fact $r3;
        com.google.common.truth.Fact[] $r4;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.util.CompilationResult: androidx.room.compiler.processing.SyntheticProcessor getProcessor$room_compiler_processing_testing()>();

        $z0 = interfaceinvoke $r2.<androidx.room.compiler.processing.SyntheticProcessor: boolean expectsAnotherRound()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Test runner requested another round but that didn\'t happen");

        $r4 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r3, $r4);

     label1:
        return;
    }

    public final void assertNoProcessorAssertionErrors$room_compiler_processing_testing()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        java.lang.Throwable r1, r7;
        androidx.room.compiler.processing.util.CompilationResult $r2, $r5;
        androidx.room.compiler.processing.SyntheticProcessor $r3;
        androidx.room.compiler.processing.util.CompilationResultSubject$CompilationAssertionError r6;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        $r2 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.util.CompilationResult: androidx.room.compiler.processing.SyntheticProcessor getProcessor$room_compiler_processing_testing()>();

        r1 = interfaceinvoke $r3.<androidx.room.compiler.processing.SyntheticProcessor: java.lang.Throwable getProcessingException()>();

        if r1 == null goto label1;

        r6 = new androidx.room.compiler.processing.util.CompilationResultSubject$CompilationAssertionError;

        $r5 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        specialinvoke r6.<androidx.room.compiler.processing.util.CompilationResultSubject$CompilationAssertionError: void <init>(androidx.room.compiler.processing.util.CompilationResult,java.lang.Throwable)>($r5, r1);

        r7 = (java.lang.Throwable) r6;

        throw r7;

     label1:
        return;
    }

    private final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithMessage(javax.tools.Diagnostic$Kind, java.lang.String, boolean, kotlin.jvm.functions.Function0)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        javax.tools.Diagnostic$Kind r1;
        java.lang.String r2, r4, $r17, $r20, $r21, $r22, $r23;
        boolean z0, $z4, $z6, $z7;
        kotlin.jvm.functions.Function0 r3;
        java.util.List r5, r6;
        java.lang.Iterable $r7;
        java.util.Collection r8;
        java.util.Iterator r9;
        java.lang.Object r10, $r16;
        androidx.room.compiler.processing.util.DiagnosticMessage r11;
        androidx.room.compiler.processing.util.CompilationResult $r12;
        java.util.ArrayList $r13;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion $r14;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r15;
        com.google.common.truth.Fact $r18;
        com.google.common.truth.Fact[] $r19;
        java.lang.CharSequence $r24, $r25;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: javax.tools.Diagnostic$Kind;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: kotlin.jvm.functions.Function0;

        r4 = staticinvoke <androidx.room.compiler.processing.util.CompilationResultSubject: java.lang.String hasDiagnosticWithMessage$trimLines(java.lang.String)>(r2);

        $r12 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        r5 = virtualinvoke $r12.<androidx.room.compiler.processing.util.CompilationResult: java.util.List diagnosticsOfKind(javax.tools.Diagnostic$Kind)>(r1);

        $r7 = (java.lang.Iterable) r5;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r8 = (java.util.Collection) $r13;

        r9 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label4;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.room.compiler.processing.util.DiagnosticMessage) r10;

        if z0 == 0 goto label2;

        $r22 = virtualinvoke r11.<androidx.room.compiler.processing.util.DiagnosticMessage: java.lang.String getMsg()>();

        $r23 = staticinvoke <androidx.room.compiler.processing.util.CompilationResultSubject: java.lang.String hasDiagnosticWithMessage$trimLines(java.lang.String)>($r22);

        $r25 = (java.lang.CharSequence) $r23;

        $r24 = (java.lang.CharSequence) r4;

        $z7 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r25, $r24, 0, 2, null);

        goto label3;

     label2:
        $r20 = virtualinvoke r11.<androidx.room.compiler.processing.util.DiagnosticMessage: java.lang.String getMsg()>();

        $r21 = staticinvoke <androidx.room.compiler.processing.util.CompilationResultSubject: java.lang.String hasDiagnosticWithMessage$trimLines(java.lang.String)>($r20);

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r21, r4);

     label3:
        if $z7 == 0 goto label1;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        goto label1;

     label4:
        r6 = (java.util.List) r8;

        $z4 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label5;

        $r16 = interfaceinvoke r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r17 = (java.lang.String) $r16;

        $r18 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r17);

        $r19 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r18, $r19);

     label5:
        $r14 = <androidx.room.compiler.processing.util.DiagnosticMessagesSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion Companion>;

        $r15 = virtualinvoke $r14.<androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion: androidx.room.compiler.processing.util.DiagnosticMessagesSubject assertThat(java.util.List)>(r6);

        return $r15;
    }

    private final androidx.room.compiler.processing.util.DiagnosticMessagesSubject hasDiagnosticWithPattern(javax.tools.Diagnostic$Kind, java.lang.String, boolean, kotlin.jvm.functions.Function0)
    {
        androidx.room.compiler.processing.util.CompilationResultSubject r0;
        javax.tools.Diagnostic$Kind r1;
        java.lang.String r2, $r18, $r21;
        boolean z0, $z4, $z6, $z7;
        kotlin.jvm.functions.Function0 r3;
        java.util.List r4, r6;
        java.util.regex.Pattern r5;
        java.lang.Iterable $r7;
        java.util.Collection r8;
        java.util.Iterator r9;
        java.lang.Object r10, $r17;
        androidx.room.compiler.processing.util.DiagnosticMessage r11;
        java.util.regex.Matcher r12;
        androidx.room.compiler.processing.util.CompilationResult $r13;
        java.util.ArrayList $r14;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion $r15;
        androidx.room.compiler.processing.util.DiagnosticMessagesSubject $r16;
        com.google.common.truth.Fact $r19;
        com.google.common.truth.Fact[] $r20;
        java.lang.CharSequence $r22;

        r0 := @this: androidx.room.compiler.processing.util.CompilationResultSubject;

        r1 := @parameter0: javax.tools.Diagnostic$Kind;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: kotlin.jvm.functions.Function0;

        $r13 = r0.<androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResult compilationResult>;

        r4 = virtualinvoke $r13.<androidx.room.compiler.processing.util.CompilationResult: java.util.List diagnosticsOfKind(javax.tools.Diagnostic$Kind)>(r1);

        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r2);

        $r7 = (java.lang.Iterable) r4;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r8 = (java.util.Collection) $r14;

        r9 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label4;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.room.compiler.processing.util.DiagnosticMessage) r10;

        $r21 = virtualinvoke r11.<androidx.room.compiler.processing.util.DiagnosticMessage: java.lang.String getMsg()>();

        $r22 = (java.lang.CharSequence) $r21;

        r12 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r22);

        if z0 == 0 goto label2;

        $z7 = virtualinvoke r12.<java.util.regex.Matcher: boolean find()>();

        goto label3;

     label2:
        $z7 = virtualinvoke r12.<java.util.regex.Matcher: boolean matches()>();

     label3:
        if $z7 == 0 goto label1;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        goto label1;

     label4:
        r6 = (java.util.List) r8;

        $z4 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label5;

        $r17 = interfaceinvoke r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r18 = (java.lang.String) $r17;

        $r19 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r18);

        $r20 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationResultSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r19, $r20);

     label5:
        $r15 = <androidx.room.compiler.processing.util.DiagnosticMessagesSubject: androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion Companion>;

        $r16 = virtualinvoke $r15.<androidx.room.compiler.processing.util.DiagnosticMessagesSubject$Companion: androidx.room.compiler.processing.util.DiagnosticMessagesSubject assertThat(java.util.List)>(r6);

        return $r16;
    }

    private static final java.lang.String hasDiagnosticWithMessage$trimLines(java.lang.String)
    {
        java.lang.String $r0, $r4, $r8;
        java.lang.CharSequence $r1, $r7;
        java.util.List $r2;
        java.lang.Iterable $r3;
        androidx.room.compiler.processing.util.CompilationResultSubject$hasDiagnosticWithMessage$trimLines$1 $r5;
        kotlin.jvm.functions.Function1 $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 = (java.lang.CharSequence) $r0;

        $r2 = staticinvoke <kotlin.text.StringsKt: java.util.List lines(java.lang.CharSequence)>($r1);

        $r3 = (java.lang.Iterable) $r2;

        $r4 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "lineSeparator()");

        $r7 = (java.lang.CharSequence) $r4;

        $r5 = <androidx.room.compiler.processing.util.CompilationResultSubject$hasDiagnosticWithMessage$trimLines$1: androidx.room.compiler.processing.util.CompilationResultSubject$hasDiagnosticWithMessage$trimLines$1 INSTANCE>;

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, $r7, null, null, 0, null, $r6, 30, null);

        return $r8;
    }

    private static final androidx.room.compiler.processing.util.CompilationResultSubject FACTORY$lambda$9(com.google.common.truth.FailureMetadata, androidx.room.compiler.processing.util.CompilationResult)
    {
        com.google.common.truth.FailureMetadata r0;
        androidx.room.compiler.processing.util.CompilationResult r1;
        androidx.room.compiler.processing.util.CompilationResultSubject $r2;

        r0 := @parameter0: com.google.common.truth.FailureMetadata;

        r1 := @parameter1: androidx.room.compiler.processing.util.CompilationResult;

        $r2 = new androidx.room.compiler.processing.util.CompilationResultSubject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r0, "metadata");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "actual");

        specialinvoke $r2.<androidx.room.compiler.processing.util.CompilationResultSubject: void <init>(com.google.common.truth.FailureMetadata,androidx.room.compiler.processing.util.CompilationResult)>(r0, r1);

        return $r2;
    }

    public static final com.google.common.truth.Subject$Factory access$getFACTORY$cp()
    {
        com.google.common.truth.Subject$Factory $r0;

        $r0 = <androidx.room.compiler.processing.util.CompilationResultSubject: com.google.common.truth.Subject$Factory FACTORY>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.CompilationResultSubject$Companion $r0;
        com.google.common.truth.Subject$Factory $r1;

        $r0 = new androidx.room.compiler.processing.util.CompilationResultSubject$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.CompilationResultSubject$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject$Companion Companion> = $r0;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.room.compiler.processing.util.CompilationResultSubject: androidx.room.compiler.processing.util.CompilationResultSubject FACTORY$lambda$9(com.google.common.truth.FailureMetadata,androidx.room.compiler.processing.util.CompilationResult)>, methodtype: androidx.room.compiler.processing.util.CompilationResultSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,androidx.room.compiler.processing.util.CompilationResult));

        <androidx.room.compiler.processing.util.CompilationResultSubject: com.google.common.truth.Subject$Factory FACTORY> = $r1;

        return;
    }

