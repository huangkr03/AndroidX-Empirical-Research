androidx.test.internal.events.client.TestEventServiceConnectionBase
<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String TAG>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventClientConnectListener listener>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder serviceFromBinder>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String serviceName>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String servicePackageName>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.os.IInterface service>
<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.content.ServiceConnection connection>
    static volatile androidx.test.internal.events.client.TestEventClientConnectListener '-$$Nest$fgetlistener'(androidx.test.internal.events.client.TestEventServiceConnectionBase)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase r0;
        androidx.test.internal.events.client.TestEventClientConnectListener $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        $r1 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventClientConnectListener listener>;

        return $r1;
    }

    static volatile androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder '-$$Nest$fgetserviceFromBinder'(androidx.test.internal.events.client.TestEventServiceConnectionBase)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase r0;
        androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        $r1 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder serviceFromBinder>;

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$fgetserviceName'(androidx.test.internal.events.client.TestEventServiceConnectionBase)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        $r1 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String serviceName>;

        return $r1;
    }

    static java.lang.String getServiceNameOnly(java.lang.String)
    {
        java.lang.String r0, r2, $r8, $r9, $r10, r14, $r15, r16;
        java.lang.String[] r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r12, $r13;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof r1;

        if $i0 != 2 goto label3;

        $r10 = r1[1];

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 == 0 goto label1;

        r2 = r1[1];

        r14 = r1[0];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r15 = r1[1];

     label2:
        return $r15;

     label3:
        $i1 = lengthof r1;

        if $i1 != 1 goto label4;

        $r9 = r1[0];

        return $r9;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        r16 = r0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid serviceName [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    static java.lang.String getServicePackage(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.String[] r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof r1;

        if $i0 < 2 goto label1;

        $r2 = r1[0];

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void <init>(java.lang.String, androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder, androidx.test.internal.events.client.TestEventClientConnectListener)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase r0;
        java.lang.String r1, $r5, $r7, $r8, $r10;
        androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder r2, $r14;
        androidx.test.internal.events.client.TestEventClientConnectListener r3, $r12;
        androidx.test.internal.events.client.TestEventServiceConnectionBase$1 $r4;
        java.lang.Object $r6, $r9, $r11, $r13;

        r0 := @this: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder;

        r3 := @parameter2: androidx.test.internal.events.client.TestEventClientConnectListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.os.IInterface service> = null;

        $r4 = new androidx.test.internal.events.client.TestEventServiceConnectionBase$1;

        specialinvoke $r4.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: void <init>(androidx.test.internal.events.client.TestEventServiceConnectionBase)>(r0);

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.content.ServiceConnection connection> = $r4;

        $r5 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String getServiceNameOnly(java.lang.String)>(r1);

        $r6 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r5, "serviceName cannot be null");

        $r7 = (java.lang.String) $r6;

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String serviceName> = $r7;

        $r8 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String getServicePackage(java.lang.String)>(r1);

        $r9 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r8, "servicePackageName cannot be null");

        $r10 = (java.lang.String) $r9;

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String servicePackageName> = $r10;

        $r11 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "listener cannot be null");

        $r12 = (androidx.test.internal.events.client.TestEventClientConnectListener) $r11;

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventClientConnectListener listener> = $r12;

        $r13 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "serviceFromBinder cannot be null");

        $r14 = (androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder) $r13;

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder serviceFromBinder> = $r14;

        return;
    }

    public void connect(android.content.Context)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase r0;
        android.content.Context r1;
        android.content.Intent r2, $r4;
        java.lang.String r3, $r5, $r6, $r13;
        android.content.ServiceConnection $r8;
        boolean $z0;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        r1 := @parameter0: android.content.Context;

        $r4 = new android.content.Intent;

        $r5 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String serviceName>;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>($r5);

        r2 = $r4;

        $r6 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String servicePackageName>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r6);

        $r8 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.content.ServiceConnection connection>;

        $z0 = virtualinvoke r1.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r2, $r8, 1);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        r3 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String serviceName>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot connect to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        return;
    }

androidx.test.internal.events.client.TestEventServiceConnectionBase$1
<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>
    void <init>(androidx.test.internal.events.client.TestEventServiceConnectionBase)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase$1 r0;
        androidx.test.internal.events.client.TestEventServiceConnectionBase r1;

        r0 := @this: androidx.test.internal.events.client.TestEventServiceConnectionBase$1;

        r1 := @parameter0: androidx.test.internal.events.client.TestEventServiceConnectionBase;

        r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase$1 r0;
        android.content.ComponentName r1;
        android.os.IBinder r2;
        java.lang.String r3, $r12;
        androidx.test.internal.events.client.TestEventServiceConnectionBase $r4, $r5, $r8, $r13;
        androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder $r6;
        android.os.IInterface $r7;
        java.lang.StringBuilder $r9, $r10, $r11;
        androidx.test.internal.events.client.TestEventClientConnectListener $r14;

        r0 := @this: androidx.test.internal.events.client.TestEventServiceConnectionBase$1;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.IBinder;

        $r5 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        $r4 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        $r6 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder '-$$Nest$fgetserviceFromBinder'(androidx.test.internal.events.client.TestEventServiceConnectionBase)>($r4);

        $r7 = interfaceinvoke $r6.<androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder: android.os.IInterface asInterface(android.os.IBinder)>(r2);

        $r5.<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.os.IInterface service> = $r7;

        $r8 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        r3 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String '-$$Nest$fgetserviceName'(androidx.test.internal.events.client.TestEventServiceConnectionBase)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connected to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectionBase", $r12);

        $r13 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        $r14 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: androidx.test.internal.events.client.TestEventClientConnectListener '-$$Nest$fgetlistener'(androidx.test.internal.events.client.TestEventServiceConnectionBase)>($r13);

        interfaceinvoke $r14.<androidx.test.internal.events.client.TestEventClientConnectListener: void onTestEventClientConnect()>();

        return;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        androidx.test.internal.events.client.TestEventServiceConnectionBase$1 r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8;
        androidx.test.internal.events.client.TestEventServiceConnectionBase $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: androidx.test.internal.events.client.TestEventServiceConnectionBase$1;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        $r3.<androidx.test.internal.events.client.TestEventServiceConnectionBase: android.os.IInterface service> = null;

        $r4 = r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase$1: androidx.test.internal.events.client.TestEventServiceConnectionBase this$0>;

        r2 = staticinvoke <androidx.test.internal.events.client.TestEventServiceConnectionBase: java.lang.String '-$$Nest$fgetserviceName'(androidx.test.internal.events.client.TestEventServiceConnectionBase)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disconnected from ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectionBase", $r8);

        return;
    }

androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder
<androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder: android.os.IInterface asInterface(android.os.IBinder)>
