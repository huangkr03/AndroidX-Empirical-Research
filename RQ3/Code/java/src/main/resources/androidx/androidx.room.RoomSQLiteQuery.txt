androidx.room.RoomSQLiteQuery
<androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>
<androidx.room.RoomSQLiteQuery: int capacity>
<androidx.room.RoomSQLiteQuery: java.lang.String query>
<androidx.room.RoomSQLiteQuery: long[] longBindings>
<androidx.room.RoomSQLiteQuery: double[] doubleBindings>
<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>
<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>
<androidx.room.RoomSQLiteQuery: int[] bindingTypes>
<androidx.room.RoomSQLiteQuery: int argCount>
<androidx.room.RoomSQLiteQuery: int POOL_LIMIT>
<androidx.room.RoomSQLiteQuery: int DESIRED_POOL_SIZE>
<androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>
<androidx.room.RoomSQLiteQuery: int NULL>
<androidx.room.RoomSQLiteQuery: int LONG>
<androidx.room.RoomSQLiteQuery: int DOUBLE>
<androidx.room.RoomSQLiteQuery: int STRING>
<androidx.room.RoomSQLiteQuery: int BLOB>
    private void <init>(int)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0, i1, $i2;
        int[] $r1;
        long[] $r2;
        double[] $r3;
        java.lang.String[] $r4;
        byte[][] $r5;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.RoomSQLiteQuery: int capacity> = i0;

        $i2 = r0.<androidx.room.RoomSQLiteQuery: int capacity>;

        i1 = $i2 + 1;

        $r1 = newarray (int)[i1];

        r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes> = $r1;

        $r2 = newarray (long)[i1];

        r0.<androidx.room.RoomSQLiteQuery: long[] longBindings> = $r2;

        $r3 = newarray (double)[i1];

        r0.<androidx.room.RoomSQLiteQuery: double[] doubleBindings> = $r3;

        $r4 = newarray (java.lang.String)[i1];

        r0.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings> = $r4;

        $r5 = newarray (byte[])[i1];

        r0.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings> = $r5;

        return;
    }

    public final int getCapacity()
    {
        androidx.room.RoomSQLiteQuery r0;
        int $i0;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        $i0 = r0.<androidx.room.RoomSQLiteQuery: int capacity>;

        return $i0;
    }

    public static void getLongBindings$annotations()
    {
        return;
    }

    public static void getDoubleBindings$annotations()
    {
        return;
    }

    public static void getStringBindings$annotations()
    {
        return;
    }

    public static void getBlobBindings$annotations()
    {
        return;
    }

    private static void getBindingTypes$annotations()
    {
        return;
    }

    public int getArgCount()
    {
        androidx.room.RoomSQLiteQuery r0;
        int $i0;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        $i0 = r0.<androidx.room.RoomSQLiteQuery: int argCount>;

        return $i0;
    }

    public final void init(java.lang.String, int)
    {
        androidx.room.RoomSQLiteQuery r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        r0.<androidx.room.RoomSQLiteQuery: java.lang.String query> = r1;

        r0.<androidx.room.RoomSQLiteQuery: int argCount> = i0;

        return;
    }

    public final void release()
    {
        androidx.room.RoomSQLiteQuery r0;
        java.util.TreeMap r1, $r2;
        int $i0;
        java.util.Map $r3;
        java.lang.Integer $r4;
        androidx.room.RoomSQLiteQuery$Companion $r6;
        java.lang.Throwable $r7;
        kotlin.Unit $r8;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        r1 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        entermonitor r1;

     label1:
        $r2 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $r3 = (java.util.Map) $r2;

        $i0 = r0.<androidx.room.RoomSQLiteQuery: int capacity>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

        $r6 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        virtualinvoke $r6.<androidx.room.RoomSQLiteQuery$Companion: void prunePoolLocked$room_runtime_release()>();

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r1;

        goto label5;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String getSql()
    {
        androidx.room.RoomSQLiteQuery r0;
        java.lang.String r1, $r2, $r4;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        $r2 = r0.<androidx.room.RoomSQLiteQuery: java.lang.String query>;

        if $r2 != null goto label1;

        r1 = "Required value was null.";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        return $r2;
    }

    public void bindTo(androidx.sqlite.db.SupportSQLiteProgram)
    {
        androidx.room.RoomSQLiteQuery r0;
        androidx.sqlite.db.SupportSQLiteProgram r1;
        int i0, $i1, i3;
        int[] $r2;
        byte[][] $r3;
        byte[] $r4;
        java.lang.IllegalArgumentException $r5, $r9;
        java.lang.String $r6, $r8, $r10, r13, r14;
        java.lang.String[] $r7;
        double[] $r11;
        double $d0;
        long[] $r12;
        long $l2;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteProgram;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "statement");

        i3 = 1;

        i0 = virtualinvoke r0.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        if i3 > i0 goto label10;

     label01:
        $r2 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $i1 = $r2[i3];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label07;
            default: goto label09;
        };

     label02:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteProgram: void bindNull(int)>(i3);

        goto label09;

     label03:
        $r12 = r0.<androidx.room.RoomSQLiteQuery: long[] longBindings>;

        $l2 = $r12[i3];

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteProgram: void bindLong(int,long)>(i3, $l2);

        goto label09;

     label04:
        $r11 = r0.<androidx.room.RoomSQLiteQuery: double[] doubleBindings>;

        $d0 = $r11[i3];

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteProgram: void bindDouble(int,double)>(i3, $d0);

        goto label09;

     label05:
        $r7 = r0.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>;

        $r8 = $r7[i3];

        if $r8 != null goto label06;

        r13 = "Required value was null.";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label06:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteProgram: void bindString(int,java.lang.String)>(i3, $r8);

        goto label09;

     label07:
        $r3 = r0.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>;

        $r4 = $r3[i3];

        if $r4 != null goto label08;

        r14 = "Required value was null.";

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label08:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteProgram: void bindBlob(int,byte[])>(i3, $r4);

     label09:
        if i3 == i0 goto label10;

        i3 = i3 + 1;

        goto label01;

     label10:
        return;
    }

    public void bindNull(int)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        int[] $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r1[i0] = 1;

        return;
    }

    public void bindLong(int, long)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        long l1;
        int[] $r1;
        long[] $r2;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r1[i0] = 2;

        $r2 = r0.<androidx.room.RoomSQLiteQuery: long[] longBindings>;

        $r2[i0] = l1;

        return;
    }

    public void bindDouble(int, double)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        double d0;
        int[] $r1;
        double[] $r2;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r1[i0] = 3;

        $r2 = r0.<androidx.room.RoomSQLiteQuery: double[] doubleBindings>;

        $r2[i0] = d0;

        return;
    }

    public void bindString(int, java.lang.String)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        java.lang.String r1;
        int[] $r2;
        java.lang.String[] $r3;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r2[i0] = 4;

        $r3 = r0.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>;

        $r3[i0] = r1;

        return;
    }

    public void bindBlob(int, byte[])
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        byte[] r1;
        int[] $r2;
        byte[][] $r3;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r2[i0] = 5;

        $r3 = r0.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>;

        $r3[i0] = r1;

        return;
    }

    public void close()
    {
        androidx.room.RoomSQLiteQuery r0;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        return;
    }

    public final void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)
    {
        androidx.room.RoomSQLiteQuery r0, r1;
        int i0, $i1;
        int[] $r2, $r3;
        long[] $r4, $r5;
        java.lang.String[] $r6, $r7;
        byte[][] $r8, $r9;
        double[] $r10, $r11;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        r1 := @parameter0: androidx.room.RoomSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $i1 = virtualinvoke r1.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        i0 = $i1 + 1;

        $r3 = r1.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        $r2 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, i0);

        $r5 = r1.<androidx.room.RoomSQLiteQuery: long[] longBindings>;

        $r4 = r0.<androidx.room.RoomSQLiteQuery: long[] longBindings>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i0);

        $r7 = r1.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>;

        $r6 = r0.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, i0);

        $r9 = r1.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>;

        $r8 = r0.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i0);

        $r11 = r1.<androidx.room.RoomSQLiteQuery: double[] doubleBindings>;

        $r10 = r0.<androidx.room.RoomSQLiteQuery: double[] doubleBindings>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, i0);

        return;
    }

    public void clearBindings()
    {
        androidx.room.RoomSQLiteQuery r0;
        int[] $r1;
        java.lang.String[] $r2;
        byte[][] $r3;
        java.lang.Object[] $r4;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        $r1 = r0.<androidx.room.RoomSQLiteQuery: int[] bindingTypes>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 1);

        $r2 = r0.<androidx.room.RoomSQLiteQuery: java.lang.String[] stringBindings>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        $r3 = r0.<androidx.room.RoomSQLiteQuery: byte[][] blobBindings>;

        $r4 = (java.lang.Object[]) $r3;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r4, null);

        r0.<androidx.room.RoomSQLiteQuery: java.lang.String query> = null;

        return;
    }

    public static final androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.sqlite.db.SupportSQLiteQuery r0;
        androidx.room.RoomSQLiteQuery$Companion $r1;
        androidx.room.RoomSQLiteQuery $r2;

        r0 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        $r1 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)>(r0);

        return $r2;
    }

    public static final androidx.room.RoomSQLiteQuery acquire(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        androidx.room.RoomSQLiteQuery$Companion $r1;
        androidx.room.RoomSQLiteQuery $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>(r0, i0);

        return $r2;
    }

    public void <init>(int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.RoomSQLiteQuery r0;
        int i0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery;

        i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.RoomSQLiteQuery: void <init>(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        androidx.room.RoomSQLiteQuery$Companion $r0;
        java.util.TreeMap $r1;

        $r0 = new androidx.room.RoomSQLiteQuery$Companion;

        specialinvoke $r0.<androidx.room.RoomSQLiteQuery$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion> = $r0;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool> = $r1;

        return;
    }

androidx.room.RoomSQLiteQuery$Binding
androidx.room.RoomSQLiteQuery$Companion$copyFrom$1
<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>
    void <init>(androidx.room.RoomSQLiteQuery)
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        $r1 := @parameter0: androidx.room.RoomSQLiteQuery;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0> = $r1;

        return;
    }

    public void bindBlob(int, byte[])
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        int i0;
        byte[] r1;
        androidx.room.RoomSQLiteQuery $r2;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindBlob(int,byte[])>(i0, r1);

        return;
    }

    public void bindDouble(int, double)
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        int i0;
        double d0;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindDouble(int,double)>(i0, d0);

        return;
    }

    public void bindLong(int, long)
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        int i0;
        long l1;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>(i0, l1);

        return;
    }

    public void bindNull(int)
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        int i0;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(i0);

        return;
    }

    public void bindString(int, java.lang.String)
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        int i0;
        java.lang.String r1;
        androidx.room.RoomSQLiteQuery $r2;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(i0, r1);

        return;
    }

    public void clearBindings()
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        $r1 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void clearBindings()>();

        return;
    }

    public void close()
    {
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 r0;
        androidx.room.RoomSQLiteQuery $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        $r1 = r0.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: androidx.room.RoomSQLiteQuery $$delegate_0>;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void close()>();

        return;
    }

androidx.room.RoomSQLiteQuery$Companion
    private void <init>()
    {
        androidx.room.RoomSQLiteQuery$Companion r0;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getPOOL_LIMIT$annotations()
    {
        return;
    }

    public static void getDESIRED_POOL_SIZE$annotations()
    {
        return;
    }

    public static void getQueryPool$annotations()
    {
        return;
    }

    public final androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.room.RoomSQLiteQuery$Companion r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        androidx.room.RoomSQLiteQuery r2;
        java.lang.String $r3;
        int $i0;
        androidx.room.RoomSQLiteQuery$Companion$copyFrom$1 $r4;
        androidx.sqlite.db.SupportSQLiteProgram $r5;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "supportSQLiteQuery");

        $r3 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: java.lang.String getSql()>();

        $i0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: int getArgCount()>();

        r2 = virtualinvoke r0.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r3, $i0);

        $r4 = new androidx.room.RoomSQLiteQuery$Companion$copyFrom$1;

        specialinvoke $r4.<androidx.room.RoomSQLiteQuery$Companion$copyFrom$1: void <init>(androidx.room.RoomSQLiteQuery)>(r2);

        $r5 = (androidx.sqlite.db.SupportSQLiteProgram) $r4;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: void bindTo(androidx.sqlite.db.SupportSQLiteProgram)>($r5);

        return r2;
    }

    public final androidx.room.RoomSQLiteQuery acquire(java.lang.String, int)
    {
        androidx.room.RoomSQLiteQuery$Companion r0;
        java.lang.String r1;
        int i0;
        androidx.room.RoomSQLiteQuery r2, r5, r6, $r9;
        java.util.TreeMap r3, $r7, $r10;
        java.util.Map$Entry r4;
        java.lang.Integer $r8;
        java.lang.Object $r11, $r13;
        java.lang.Throwable $r14;
        kotlin.Unit $r15;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        r3 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        entermonitor r3;

     label1:
        $r7 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r4 = virtualinvoke $r7.<java.util.TreeMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>($r8);

        if r4 == null goto label3;

        $r10 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r11);

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (androidx.room.RoomSQLiteQuery) $r13;

        virtualinvoke r5.<androidx.room.RoomSQLiteQuery: void init(java.lang.String,int)>(r1, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "sqliteQuery");

        r6 = r5;

     label2:
        exitmonitor r3;

        return r6;

     label3:
        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r3;

        goto label7;

     label5:
        $r14 := @caughtexception;

     label6:
        exitmonitor r3;

        throw $r14;

     label7:
        $r9 = new androidx.room.RoomSQLiteQuery;

        specialinvoke $r9.<androidx.room.RoomSQLiteQuery: void <init>(int,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, null);

        r2 = $r9;

        virtualinvoke r2.<androidx.room.RoomSQLiteQuery: void init(java.lang.String,int)>(r1, i0);

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void prunePoolLocked$room_runtime_release()
    {
        androidx.room.RoomSQLiteQuery$Companion r0;
        java.util.Iterator r1, $r6;
        java.util.TreeMap $r2, $r3, $r4;
        int $i0, $i1, $i2, i3;
        java.util.NavigableSet $r5;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion;

        $r2 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $i0 = virtualinvoke $r2.<java.util.TreeMap: int size()>();

        if $i0 <= 15 goto label2;

        $r3 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $i1 = virtualinvoke $r3.<java.util.TreeMap: int size()>();

        i3 = $i1 - 10;

        $r4 = <androidx.room.RoomSQLiteQuery: java.util.TreeMap queryPool>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.NavigableSet descendingKeySet()>();

        $r6 = interfaceinvoke $r5.<java.util.NavigableSet: java.util.Iterator iterator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "queryPool.descendingKeySet().iterator()");

        r1 = $r6;

     label1:
        $i2 = i3;

        i3 = i3 + -1;

        if $i2 <= 0 goto label2;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.RoomSQLiteQuery$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.RoomSQLiteQuery$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.RoomSQLiteQuery$Companion: void <init>()>();

        return;
    }

