kotlin.io.TextStreamsKt
    private static final java.io.BufferedReader buffered(java.io.Reader, int)
    {
        int $i0;
        java.io.Reader $r0;
        boolean $z0;
        java.io.BufferedReader $r1;

        $r0 := @parameter0: java.io.Reader;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = $r0 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r1 = (java.io.BufferedReader) $r0;

        return $r1;

     label1:
        $r1 = new java.io.BufferedReader;

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r0, $i0);

        return $r1;
    }

    private static final java.io.BufferedWriter buffered(java.io.Writer, int)
    {
        int $i0;
        java.io.Writer $r0;
        boolean $z0;
        java.io.BufferedWriter $r1;

        $r0 := @parameter0: java.io.Writer;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = $r0 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label1;

        $r1 = (java.io.BufferedWriter) $r0;

        return $r1;

     label1:
        $r1 = new java.io.BufferedWriter;

        specialinvoke $r1.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r0, $i0);

        return $r1;
    }

    static java.io.BufferedReader buffered$default(java.io.Reader, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        java.io.Reader $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.BufferedReader $r2;

        $r1 := @parameter0: java.io.Reader;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = 8192;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $z0 = $r1 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label2;

        $r2 = (java.io.BufferedReader) $r1;

        return $r2;

     label2:
        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r1, $i0);

        return $r2;
    }

    static java.io.BufferedWriter buffered$default(java.io.Writer, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        java.io.Writer $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.BufferedWriter $r2;

        $r1 := @parameter0: java.io.Writer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = 8192;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $z0 = $r1 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label2;

        $r2 = (java.io.BufferedWriter) $r1;

        return $r2;

     label2:
        $r2 = new java.io.BufferedWriter;

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r1, $i0);

        return $r2;
    }

    public static final long copyTo(java.io.Reader, java.io.Writer, int)
    {
        java.io.Reader $r0;
        java.io.Writer $r1;
        int $i0;
        char[] $r2;
        long $l1, $l2;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.Writer;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "out");

        $r2 = newarray (char)[$i0];

        $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>($r2);

        $l1 = 0L;

     label1:
        if $i0 < 0 goto label2;

        virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>($r2, 0, $i0);

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>($r2);

        goto label1;

     label2:
        return $l1;
    }

    public static long copyTo$default(java.io.Reader, java.io.Writer, int, int, java.lang.Object)
    {
        java.io.Writer $r0;
        java.lang.Object $r1;
        long $l0;
        java.io.Reader $r2;
        int $i1, $i2;

        $r2 := @parameter0: java.io.Reader;

        $r0 := @parameter1: java.io.Writer;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $i1 = 8192;

     label1:
        $l0 = staticinvoke <kotlin.io.TextStreamsKt: long copyTo(java.io.Reader,java.io.Writer,int)>($r2, $r0, $i1);

        return $l0;
    }

    public static final void forEachLine(java.io.Reader, kotlin.jvm.functions.Function1)
    {
        java.io.Reader $r0;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;
        java.io.BufferedReader $r2, r9;
        kotlin.sequences.Sequence $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        kotlin.Unit $r6;
        java.lang.Throwable $r7, $r8;
        java.io.Closeable r10;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $z0 = $r0 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label01;

        $r2 = (java.io.BufferedReader) $r0;

        goto label02;

     label01:
        r9 = new java.io.BufferedReader;

        specialinvoke r9.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r0, 8192);

        $r2 = r9;

     label02:
        $r3 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r2);

     label03:
        $r4 = interfaceinvoke $r3.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label08;

     label06:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label07:
        goto label04;

     label08:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r10 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r10, null);

        return;

     label09:
        $r7 := @caughtexception;

     label10:
        throw $r7;

     label11:
        $r8 := @caughtexception;

        r10 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r10, $r7);

        goto label12;

     label12:
        throw $r8;

        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public static final kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)
    {
        kotlin.sequences.Sequence $r0;
        java.io.BufferedReader $r1;
        kotlin.io.LinesSequence $r2;

        $r1 := @parameter0: java.io.BufferedReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new kotlin.io.LinesSequence;

        specialinvoke $r2.<kotlin.io.LinesSequence: void <init>(java.io.BufferedReader)>($r1);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)>($r2);

        return $r0;
    }

    public static final byte[] readBytes(java.net.URL)
    {
        java.net.URL $r0;
        java.io.InputStream $r1;
        byte[] $r2;
        java.io.Closeable r3;

        $r0 := @parameter0: java.net.URL;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.net.URL: java.io.InputStream openStream()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "it");

        $r2 = staticinvoke <kotlin.io.ByteStreamsKt: byte[] readBytes(java.io.InputStream)>($r1);

        r3 = (java.io.Closeable) $r1;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        return $r2;
    }

    public static final java.util.List readLines(java.io.Reader)
    {
        java.io.Reader $r0;
        java.util.ArrayList $r1, r2;
        kotlin.io.TextStreamsKt$readLines$1 r3;
        java.util.List r4;

        $r0 := @parameter0: java.io.Reader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r2 = new java.util.ArrayList;

        $r1 = r2;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = new kotlin.io.TextStreamsKt$readLines$1;

        specialinvoke r3.<kotlin.io.TextStreamsKt$readLines$1: void <init>(java.util.ArrayList)>($r1);

        staticinvoke <kotlin.io.TextStreamsKt: void forEachLine(java.io.Reader,kotlin.jvm.functions.Function1)>($r0, r3);

        r4 = (java.util.List) $r1;

        return r4;
    }

    public static final java.lang.String readText(java.io.Reader)
    {
        java.lang.String $r0;
        java.io.Reader $r1;
        java.io.StringWriter $r2;

        $r1 := @parameter0: java.io.Reader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        staticinvoke <kotlin.io.TextStreamsKt: long copyTo$default(java.io.Reader,java.io.Writer,int,int,java.lang.Object)>($r1, $r2, 0, 2, null);

        $r0 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "buffer.toString()");

        return $r0;
    }

    private static final java.lang.String readText(java.net.URL, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r0;
        byte[] $r1;
        java.net.URL $r2;
        java.lang.String $r3;

        $r2 := @parameter0: java.net.URL;

        $r0 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "charset");

        $r1 = staticinvoke <kotlin.io.TextStreamsKt: byte[] readBytes(java.net.URL)>($r2);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r0);

        return $r3;
    }

    static java.lang.String readText$default(java.net.URL, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.lang.Object $r0;
        byte[] $r1;
        java.net.URL $r2;
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.String $r4;

        $r2 := @parameter0: java.net.URL;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r1 = staticinvoke <kotlin.io.TextStreamsKt: byte[] readBytes(java.net.URL)>($r2);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r3);

        return $r4;
    }

    private static final java.io.StringReader reader(java.lang.String)
    {
        java.lang.String $r0;
        java.io.StringReader $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>($r0);

        return $r1;
    }

    public static final java.lang.Object useLines(java.io.Reader, kotlin.jvm.functions.Function1)
    {
        java.io.Reader $r0;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;
        java.io.BufferedReader $r2, r7;
        kotlin.sequences.Sequence $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        java.io.Closeable r8;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        $z0 = $r0 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r2 = (java.io.BufferedReader) $r0;

        goto label2;

     label1:
        r7 = new java.io.BufferedReader;

        specialinvoke r7.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r0, 8192);

        $r2 = r7;

     label2:
        $r3 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r2);

     label3:
        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r8 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r8, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r4;

     label5:
        $r5 := @caughtexception;

     label6:
        throw $r5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r8 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r8, $r5);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

