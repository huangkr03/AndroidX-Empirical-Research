androidx.room.compiler.processing.ksp.KspTypeArgumentType
<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeParameter typeParam>
<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>
<androidx.room.compiler.processing.ksp.KspTypeArgumentType: kotlin.Lazy _extendsBound$delegate>
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSTypeParameter, com.google.devtools.ksp.symbol.KSTypeArgument, androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSTypeParameter r2;
        com.google.devtools.ksp.symbol.KSTypeArgument r3;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r4;
        com.google.devtools.ksp.symbol.KSType $r5;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2 $r6;
        kotlin.jvm.functions.Function0 $r7;
        kotlin.Lazy $r8;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSTypeParameter;

        r3 := @parameter2: com.google.devtools.ksp.symbol.KSTypeArgument;

        r4 := @parameter3: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "typeParam");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "typeArg");

        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: com.google.devtools.ksp.symbol.KSType requireType(com.google.devtools.ksp.symbol.KSTypeArgument)>(r3);

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r1, $r5, r4);

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeParameter typeParam> = r2;

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg> = r3;

        $r6 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2;

        specialinvoke $r6.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspTypeArgumentType)>(r1, r0);

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        $r8 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r7);

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: kotlin.Lazy _extendsBound$delegate> = $r8;

        return;
    }

    public final com.google.devtools.ksp.symbol.KSTypeParameter getTypeParam()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        com.google.devtools.ksp.symbol.KSTypeParameter $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeParameter typeParam>;

        return $r1;
    }

    public final com.google.devtools.ksp.symbol.KSTypeArgument getTypeArg()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>;

        return $r1;
    }

    private final androidx.room.compiler.processing.ksp.KspType get_extendsBound()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: kotlin.Lazy _extendsBound$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r3;
    }

    protected com.squareup.javapoet.TypeName resolveJTypeName()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.javapoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeJavaPoetExtKt: com.squareup.javapoet.TypeName asJTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        return $r4;
    }

    protected com.squareup.kotlinpoet.TypeName resolveKTypeName()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.kotlinpoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        return $r4;
    }

    public androidx.room.compiler.processing.ksp.KspTypeArgumentType boxed()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        return r0;
    }

    public androidx.room.compiler.processing.XType extendsBound()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0;
        androidx.room.compiler.processing.ksp.KspType $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspType get_extendsBound()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

    protected androidx.room.compiler.processing.ksp.KspTypeArgumentType copyWithNullability(androidx.room.compiler.processing.XNullability)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0, $r2;
        androidx.room.compiler.processing.XNullability r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg $r4;
        com.google.devtools.ksp.symbol.KSTypeParameter $r5;
        com.google.devtools.ksp.symbol.KSTypeArgument $r6, $r10;
        com.google.devtools.ksp.symbol.KSType $r7, $r8;
        com.google.devtools.ksp.symbol.KSTypeReference $r9;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r11;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r1 := @parameter0: androidx.room.compiler.processing.XNullability;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "nullability");

        $r2 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r5 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeParameter typeParam>;

        $r4 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r6 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>;

        $r7 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r8 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: com.google.devtools.ksp.symbol.KSType withNullability(com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.XNullability)>($r7, r1);

        $r9 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeReferenceExtKt: com.google.devtools.ksp.symbol.KSTypeReference createTypeReference(com.google.devtools.ksp.symbol.KSType)>($r8);

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: void <init>(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.symbol.KSTypeReference)>($r6, $r9);

        $r10 = (com.google.devtools.ksp.symbol.KSTypeArgument) $r4;

        $r11 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()>();

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.symbol.KSTypeArgument,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r5, $r10, $r11);

        return $r2;
    }

    public androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0, $r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSTypeArgument $r4;
        com.google.devtools.ksp.symbol.KSTypeParameter $r5;
        androidx.room.compiler.processing.ksp.KspType $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jvmTypeResolver");

        $r2 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r5 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeParameter typeParam>;

        $r4 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSTypeArgument typeArg>;

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.symbol.KSTypeArgument,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r5, $r4, r1);

        $r6 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r6;
    }

    public volatile androidx.room.compiler.processing.ksp.KspType boxed()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0, $r1;
        androidx.room.compiler.processing.ksp.KspType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspTypeArgumentType boxed()>();

        $r2 = (androidx.room.compiler.processing.ksp.KspType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XType boxed()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0, $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspTypeArgumentType boxed()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType r0, $r2;
        androidx.room.compiler.processing.XNullability r1;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r1 := @parameter0: androidx.room.compiler.processing.XNullability;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: androidx.room.compiler.processing.ksp.KspTypeArgumentType copyWithNullability(androidx.room.compiler.processing.XNullability)>(r1);

        $r3 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg
<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>
<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeReference type>
    public void <init>(com.google.devtools.ksp.symbol.KSTypeArgument, com.google.devtools.ksp.symbol.KSTypeReference)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument r1;
        com.google.devtools.ksp.symbol.KSTypeReference r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSTypeArgument;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSTypeReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "original");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "type");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original> = r1;

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeReference type> = r2;

        return;
    }

    public final com.google.devtools.ksp.symbol.KSTypeArgument getOriginal()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        return $r1;
    }

    public com.google.devtools.ksp.symbol.KSTypeReference getType()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeReference $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeReference type>;

        return $r1;
    }

    public kotlin.sequences.Sequence getAnnotations()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        kotlin.sequences.Sequence $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSTypeArgument: kotlin.sequences.Sequence getAnnotations()>();

        return $r2;
    }

    public com.google.devtools.ksp.symbol.Location getLocation()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        com.google.devtools.ksp.symbol.Location $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.Location getLocation()>();

        return $r2;
    }

    public com.google.devtools.ksp.symbol.Origin getOrigin()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        com.google.devtools.ksp.symbol.Origin $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.Origin getOrigin()>();

        return $r2;
    }

    public com.google.devtools.ksp.symbol.KSNode getParent()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        com.google.devtools.ksp.symbol.KSNode $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.KSNode getParent()>();

        return $r2;
    }

    public com.google.devtools.ksp.symbol.Variance getVariance()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSTypeArgument $r1;
        com.google.devtools.ksp.symbol.Variance $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.Variance getVariance()>();

        return $r2;
    }

    public java.lang.Object accept(com.google.devtools.ksp.symbol.KSVisitor, java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg r0;
        com.google.devtools.ksp.symbol.KSVisitor r1;
        java.lang.Object r2, $r4;
        com.google.devtools.ksp.symbol.KSTypeArgument $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSVisitor;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "visitor");

        $r3 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$DelegatingTypeArg: com.google.devtools.ksp.symbol.KSTypeArgument original>;

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSTypeArgument: java.lang.Object accept(com.google.devtools.ksp.symbol.KSVisitor,java.lang.Object)>(r1, r2);

        return $r4;
    }

androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2
<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>
<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspTypeArgumentType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspTypeArgumentType)
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r2 := @parameter1: androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env> = $r1;

        r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspTypeArgumentType this$0> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspType invoke()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2 r0;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.symbol.KSType $r3;
        androidx.room.compiler.processing.ksp.KspType $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspTypeArgumentType this$0>;

        $r3 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r4 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r3, 0);

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspTypeArgumentType$_extendsBound$2: androidx.room.compiler.processing.ksp.KspType invoke()>();

        return $r1;
    }

