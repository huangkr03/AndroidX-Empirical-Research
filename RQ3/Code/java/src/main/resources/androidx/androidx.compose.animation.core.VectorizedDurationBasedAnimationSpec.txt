androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec
<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: int getDurationMillis()>
<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: int getDelayMillis()>
    public long getDurationNanos(androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3;
        int $i0, $i1, $i2;
        long $l3, $l4;

        r0 := @this: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        r1 := @parameter0: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter2: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        $i0 = interfaceinvoke r0.<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: int getDelayMillis()>();

        $i1 = interfaceinvoke r0.<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: int getDurationMillis()>();

        $i2 = $i0 + $i1;

        $l3 = (long) $i2;

        $l4 = $l3 * 1000000L;

        return $l4;
    }

    public static long access$getDurationNanos$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3;
        long $l0;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        $l0 = specialinvoke $r0.<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: long getDurationNanos(androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>(r1, r2, r3);

        return $l0;
    }

    public static boolean access$isInfinite$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        $z0 = specialinvoke $r0.<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: boolean isInfinite()>();

        return $z0;
    }

    public static androidx.compose.animation.core.AnimationVector access$getEndVelocity$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3, $r4;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        $r4 = specialinvoke $r0.<androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: androidx.compose.animation.core.AnimationVector getEndVelocity(androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>(r1, r2, r3);

        return $r4;
    }

androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec$DefaultImpls
    public static long getDurationNanos(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3;
        long $l0;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        $l0 = staticinvoke <androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: long access$getDurationNanos$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>($r0, r1, r2, r3);

        return $l0;
    }

    public static boolean isInfinite(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        $z0 = staticinvoke <androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: boolean access$isInfinite$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec)>($r0);

        return $z0;
    }

    public static androidx.compose.animation.core.AnimationVector getEndVelocity(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3, $r4;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        $r4 = staticinvoke <androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec: androidx.compose.animation.core.AnimationVector access$getEndVelocity$jd(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>($r0, r1, r2, r3);

        return $r4;
    }

