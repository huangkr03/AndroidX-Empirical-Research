androidx.compose.ui.node.MyersDiffKt
    private static final androidx.compose.ui.node.IntStack calculateDiff(int, int, androidx.compose.ui.node.DiffCallback)
    {
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        androidx.compose.ui.node.DiffCallback r0;
        androidx.compose.ui.node.IntStack r1, r2, $r6, $r7;
        int[] r3, r4, r5, $r8, $r9, $r10;
        boolean z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: androidx.compose.ui.node.DiffCallback;

        $i7 = i0 + i1;

        $i8 = $i7 + 1;

        i2 = $i8 / 2;

        $r6 = new androidx.compose.ui.node.IntStack;

        $i9 = i2 * 3;

        specialinvoke $r6.<androidx.compose.ui.node.IntStack: void <init>(int)>($i9);

        r1 = $r6;

        $r7 = new androidx.compose.ui.node.IntStack;

        $i10 = i2 * 4;

        specialinvoke $r7.<androidx.compose.ui.node.IntStack: void <init>(int)>($i10);

        r2 = $r7;

        virtualinvoke r2.<androidx.compose.ui.node.IntStack: void pushRange(int,int,int,int)>(0, i0, 0, i1);

        $i11 = i2 * 2;

        $i12 = $i11 + 1;

        $r8 = newarray (int)[$i12];

        r3 = staticinvoke <androidx.compose.ui.node.CenteredArray: int[] constructor-impl(int[])>($r8);

        $i13 = i2 * 2;

        $i14 = $i13 + 1;

        $r9 = newarray (int)[$i14];

        r4 = staticinvoke <androidx.compose.ui.node.CenteredArray: int[] constructor-impl(int[])>($r9);

        $r10 = newarray (int)[5];

        r5 = staticinvoke <androidx.compose.ui.node.Snake: int[] constructor-impl(int[])>($r10);

     label1:
        $z1 = virtualinvoke r2.<androidx.compose.ui.node.IntStack: boolean isNotEmpty()>();

        if $z1 == 0 goto label3;

        i3 = virtualinvoke r2.<androidx.compose.ui.node.IntStack: int pop()>();

        i4 = virtualinvoke r2.<androidx.compose.ui.node.IntStack: int pop()>();

        i5 = virtualinvoke r2.<androidx.compose.ui.node.IntStack: int pop()>();

        i6 = virtualinvoke r2.<androidx.compose.ui.node.IntStack: int pop()>();

        z0 = staticinvoke <androidx.compose.ui.node.MyersDiffKt: boolean midPoint-q5eDKzI(int,int,int,int,androidx.compose.ui.node.DiffCallback,int[],int[],int[])>(i6, i5, i4, i3, r0, r3, r4, r5);

        if z0 == 0 goto label1;

        $i15 = staticinvoke <androidx.compose.ui.node.Snake: int getDiagonalSize-impl(int[])>(r5);

        if $i15 <= 0 goto label2;

        staticinvoke <androidx.compose.ui.node.Snake: void addDiagonalToStack-impl(int[],androidx.compose.ui.node.IntStack)>(r5, r1);

     label2:
        $i16 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r5);

        $i17 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r5);

        virtualinvoke r2.<androidx.compose.ui.node.IntStack: void pushRange(int,int,int,int)>(i6, $i16, i4, $i17);

        $i18 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r5);

        $i19 = staticinvoke <androidx.compose.ui.node.Snake: int getEndY-impl(int[])>(r5);

        virtualinvoke r2.<androidx.compose.ui.node.IntStack: void pushRange(int,int,int,int)>($i18, i5, $i19, i3);

        goto label1;

     label3:
        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void sortDiagonals()>();

        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void pushDiagonal(int,int,int)>(i0, i1, 0);

        return r1;
    }

    private static final void applyDiff(int, int, androidx.compose.ui.node.IntStack, androidx.compose.ui.node.DiffCallback)
    {
        int i0, i1, i2, i3, $i4, i5, i6, i7;
        androidx.compose.ui.node.IntStack r0;
        androidx.compose.ui.node.DiffCallback r1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: androidx.compose.ui.node.IntStack;

        r1 := @parameter3: androidx.compose.ui.node.DiffCallback;

        i5 = i0;

        i6 = i1;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.IntStack: boolean isNotEmpty()>();

        if $z0 == 0 goto label5;

        i7 = virtualinvoke r0.<androidx.compose.ui.node.IntStack: int pop()>();

        i2 = virtualinvoke r0.<androidx.compose.ui.node.IntStack: int pop()>();

        i3 = virtualinvoke r0.<androidx.compose.ui.node.IntStack: int pop()>();

     label2:
        if i5 <= i3 goto label3;

        i5 = i5 + -1;

        interfaceinvoke r1.<androidx.compose.ui.node.DiffCallback: void remove(int)>(i5);

        goto label2;

     label3:
        if i6 <= i2 goto label4;

        i6 = i6 + -1;

        interfaceinvoke r1.<androidx.compose.ui.node.DiffCallback: void insert(int,int)>(i5, i6);

        goto label3;

     label4:
        $i4 = i7;

        i7 = i7 + -1;

        if $i4 <= 0 goto label1;

        i5 = i5 + -1;

        i6 = i6 + -1;

        interfaceinvoke r1.<androidx.compose.ui.node.DiffCallback: void same(int,int)>(i5, i6);

        goto label4;

     label5:
        if i5 <= 0 goto label6;

        i5 = i5 + -1;

        interfaceinvoke r1.<androidx.compose.ui.node.DiffCallback: void remove(int)>(i5);

        goto label5;

     label6:
        if i6 <= 0 goto label7;

        i6 = i6 + -1;

        interfaceinvoke r1.<androidx.compose.ui.node.DiffCallback: void insert(int,int)>(i5, i6);

        goto label6;

     label7:
        return;
    }

    public static final void executeDiff(int, int, androidx.compose.ui.node.DiffCallback)
    {
        int i0, i1;
        androidx.compose.ui.node.DiffCallback r0;
        androidx.compose.ui.node.IntStack r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: androidx.compose.ui.node.DiffCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "callback");

        r1 = staticinvoke <androidx.compose.ui.node.MyersDiffKt: androidx.compose.ui.node.IntStack calculateDiff(int,int,androidx.compose.ui.node.DiffCallback)>(i0, i1, r0);

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void applyDiff(int,int,androidx.compose.ui.node.IntStack,androidx.compose.ui.node.DiffCallback)>(i0, i1, r1, r0);

        return;
    }

    private static final boolean midPoint-q5eDKzI(int, int, int, int, androidx.compose.ui.node.DiffCallback, int[], int[], int[])
    {
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, i9;
        androidx.compose.ui.node.DiffCallback r0;
        int[] r1, r2, r3;
        boolean z0, z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0 := @parameter4: androidx.compose.ui.node.DiffCallback;

        r1 := @parameter5: int[];

        r2 := @parameter6: int[];

        r3 := @parameter7: int[];

        i4 = i1 - i0;

        i5 = i3 - i2;

        if i4 < 1 goto label1;

        if i5 >= 1 goto label2;

     label1:
        return 0;

     label2:
        $i7 = i4 + i5;

        $i8 = $i7 + 1;

        i6 = $i8 / 2;

        staticinvoke <androidx.compose.ui.node.CenteredArray: void set-impl(int[],int,int)>(r1, 1, i0);

        staticinvoke <androidx.compose.ui.node.CenteredArray: void set-impl(int[],int,int)>(r2, 1, i1);

        i9 = 0;

     label3:
        if i9 >= i6 goto label6;

        z0 = staticinvoke <androidx.compose.ui.node.MyersDiffKt: boolean forward-4l5_RBY(int,int,int,int,androidx.compose.ui.node.DiffCallback,int[],int[],int,int[])>(i0, i1, i2, i3, r0, r1, r2, i9, r3);

        if z0 == 0 goto label4;

        return 1;

     label4:
        z1 = staticinvoke <androidx.compose.ui.node.MyersDiffKt: boolean backward-4l5_RBY(int,int,int,int,androidx.compose.ui.node.DiffCallback,int[],int[],int,int[])>(i0, i1, i2, i3, r0, r1, r2, i9, r3);

        if z1 == 0 goto label5;

        return 1;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        return 0;
    }

    private static final boolean forward-4l5_RBY(int, int, int, int, androidx.compose.ui.node.DiffCallback, int[], int[], int, int[])
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, $i26, $i27, i28, $i29, i30;
        androidx.compose.ui.node.DiffCallback r0;
        int[] r1, r2, r3;
        boolean z0, $z1, $z2, z3, z4, z5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0 := @parameter4: androidx.compose.ui.node.DiffCallback;

        r1 := @parameter5: int[];

        r2 := @parameter6: int[];

        i4 := @parameter7: int;

        r3 := @parameter8: int[];

        i5 = i1 - i0;

        i6 = i3 - i2;

        $i9 = i5 - i6;

        $i10 = staticinvoke <java.lang.Math: int abs(int)>($i9);

        $i11 = $i10 % 2;

        if $i11 != 1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        i7 = i5 - i6;

        i23 = neg i4;

     label03:
        if i23 > i4 goto label13;

        z3 = 0;

        z4 = 0;

        z5 = 0;

        $i12 = neg i4;

        if i23 == $i12 goto label04;

        if i23 == i4 goto label05;

        $i19 = i23 + 1;

        $i20 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r1, $i19);

        $i21 = i23 - 1;

        $i22 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r1, $i21);

        if $i20 <= $i22 goto label05;

     label04:
        $i13 = i23 + 1;

        i24 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r1, $i13);

        i25 = i24;

        goto label06;

     label05:
        $i18 = i23 - 1;

        i24 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r1, $i18);

        i25 = i24 + 1;

     label06:
        $i26 = i25 - i0;

        $i27 = i2 + $i26;

        i28 = $i27 - i23;

        if i4 == 0 goto label07;

        if i25 == i24 goto label08;

     label07:
        $i29 = i28;

        goto label09;

     label08:
        $i29 = i28 - 1;

     label09:
        i30 = $i29;

     label10:
        if i25 >= i1 goto label11;

        if i28 >= i3 goto label11;

        $z1 = interfaceinvoke r0.<androidx.compose.ui.node.DiffCallback: boolean areItemsTheSame(int,int)>(i25, i28);

        if $z1 == 0 goto label11;

        i25 = i25 + 1;

        i28 = i28 + 1;

        goto label10;

     label11:
        staticinvoke <androidx.compose.ui.node.CenteredArray: void set-impl(int[],int,int)>(r1, i23, i25);

        if z0 == 0 goto label12;

        i8 = i7 - i23;

        $i14 = neg i4;

        $i15 = $i14 + 1;

        if i8 < $i15 goto label12;

        $i16 = i4 - 1;

        if i8 > $i16 goto label12;

        $i17 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r2, i8);

        if $i17 > i25 goto label12;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void fillSnake(int,int,int,int,boolean,int[])>(i24, i30, i25, i28, 0, r3);

        return 1;

     label12:
        i23 = i23 + 2;

        goto label03;

     label13:
        return 0;
    }

    private static final boolean backward-4l5_RBY(int, int, int, int, androidx.compose.ui.node.DiffCallback, int[], int[], int, int[])
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, $i26, $i27, i28, $i29;
        androidx.compose.ui.node.DiffCallback r0;
        int[] r1, r2, r3;
        boolean z0, $z1, $z2, z3, z4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0 := @parameter4: androidx.compose.ui.node.DiffCallback;

        r1 := @parameter5: int[];

        r2 := @parameter6: int[];

        i4 := @parameter7: int;

        r3 := @parameter8: int[];

        i5 = i1 - i0;

        i6 = i3 - i2;

        $i10 = i5 - i6;

        $i11 = $i10 % 2;

        if $i11 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        i7 = i5 - i6;

        i23 = neg i4;

     label03:
        if i23 > i4 goto label13;

        z3 = 0;

        z4 = 0;

        $i12 = neg i4;

        if i23 == $i12 goto label04;

        if i23 == i4 goto label05;

        $i19 = i23 + 1;

        $i20 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r2, $i19);

        $i21 = i23 - 1;

        $i22 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r2, $i21);

        if $i20 >= $i22 goto label05;

     label04:
        $i13 = i23 + 1;

        i24 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r2, $i13);

        i25 = i24;

        goto label06;

     label05:
        $i18 = i23 - 1;

        i24 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r2, $i18);

        i25 = i24 - 1;

     label06:
        $i26 = i1 - i25;

        $i27 = $i26 - i23;

        i28 = i3 - $i27;

        if i4 == 0 goto label07;

        if i25 == i24 goto label08;

     label07:
        $i29 = i28;

        goto label09;

     label08:
        $i29 = i28 + 1;

     label09:
        i8 = $i29;

     label10:
        if i25 <= i0 goto label11;

        if i28 <= i2 goto label11;

        $i17 = i25 - 1;

        $i16 = i28 - 1;

        $z1 = interfaceinvoke r0.<androidx.compose.ui.node.DiffCallback: boolean areItemsTheSame(int,int)>($i17, $i16);

        if $z1 == 0 goto label11;

        i25 = i25 + -1;

        i28 = i28 + -1;

        goto label10;

     label11:
        staticinvoke <androidx.compose.ui.node.CenteredArray: void set-impl(int[],int,int)>(r2, i23, i25);

        if z0 == 0 goto label12;

        i9 = i7 - i23;

        $i14 = neg i4;

        if i9 < $i14 goto label12;

        if i9 > i4 goto label12;

        $i15 = staticinvoke <androidx.compose.ui.node.CenteredArray: int get-impl(int[],int)>(r1, i9);

        if $i15 < i25 goto label12;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void fillSnake(int,int,int,int,boolean,int[])>(i25, i28, i24, i8, 1, r3);

        return 1;

     label12:
        i23 = i23 + 2;

        goto label03;

     label13:
        return 0;
    }

    public static final void fillSnake(int, int, int, int, boolean, int[])
    {
        int i0, i1, i2, i3;
        boolean z0;
        int[] r0;
        byte $b5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        r0 := @parameter5: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "data");

        r0[0] = i0;

        r0[1] = i1;

        r0[2] = i2;

        r0[3] = i3;

        if z0 == 0 goto label1;

        $b5 = 1;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        r0[4] = $b5;

        return;
    }

    private static final void swap(int[], int, int)
    {
        int[] $r0;
        int i0, i1, i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = $r0[i0];

        $i3 = $r0[i1];

        $r0[i0] = $i3;

        $r0[i1] = i2;

        return;
    }

    public static final void access$swap(int[], int, int)
    {
        int[] $r0;
        int i0, i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void swap(int[],int,int)>($r0, i0, i1);

        return;
    }

