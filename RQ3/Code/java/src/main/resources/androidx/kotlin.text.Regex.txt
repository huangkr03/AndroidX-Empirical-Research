kotlin.text.Regex
<kotlin.text.Regex: kotlin.text.Regex$Companion Companion>
<kotlin.text.Regex: java.util.Set _options>
<kotlin.text.Regex: java.util.regex.Pattern nativePattern>
    static void <clinit>()
    {
        kotlin.text.Regex$Companion $r0;

        $r0 = new kotlin.text.Regex$Companion;

        specialinvoke $r0.<kotlin.text.Regex$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.text.Regex: kotlin.text.Regex$Companion Companion> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        kotlin.text.Regex $r0;
        java.util.regex.Pattern $r1;
        java.lang.String $r2;

        $r0 := @this: kotlin.text.Regex;

        $r2 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "pattern");

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "compile(pattern)");

        specialinvoke $r0.<kotlin.text.Regex: void <init>(java.util.regex.Pattern)>($r1);

        return;
    }

    public void <init>(java.lang.String, java.util.Set)
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        java.util.Set $r2;
        kotlin.text.Regex$Companion $r3;
        int $i0;
        java.util.regex.Pattern $r4;
        java.lang.Iterable r5;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pattern");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r3 = <kotlin.text.Regex: kotlin.text.Regex$Companion Companion>;

        r5 = (java.lang.Iterable) $r2;

        $i0 = staticinvoke <kotlin.text.RegexKt: int access$toInt(java.lang.Iterable)>(r5);

        $i0 = staticinvoke <kotlin.text.Regex$Companion: int access$ensureUnicodeCase(kotlin.text.Regex$Companion,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "compile(pattern, ensureU\u2026odeCase(options.toInt()))");

        specialinvoke $r0.<kotlin.text.Regex: void <init>(java.util.regex.Pattern)>($r4);

        return;
    }

    public void <init>(java.lang.String, kotlin.text.RegexOption)
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        kotlin.text.RegexOption $r2;
        kotlin.text.Regex$Companion $r3;
        int $i0;
        java.util.regex.Pattern $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.text.RegexOption;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pattern");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "option");

        $r3 = <kotlin.text.Regex: kotlin.text.Regex$Companion Companion>;

        $i0 = virtualinvoke $r2.<kotlin.text.RegexOption: int getValue()>();

        $i0 = staticinvoke <kotlin.text.Regex$Companion: int access$ensureUnicodeCase(kotlin.text.Regex$Companion,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "compile(pattern, ensureUnicodeCase(option.value))");

        specialinvoke $r0.<kotlin.text.Regex: void <init>(java.util.regex.Pattern)>($r4);

        return;
    }

    public void <init>(java.util.regex.Pattern)
    {
        kotlin.text.Regex $r0;
        java.util.regex.Pattern $r1;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.util.regex.Pattern;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "nativePattern");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern> = $r1;

        return;
    }

    public static final java.util.regex.Pattern access$getNativePattern$p(kotlin.text.Regex)
    {
        kotlin.text.Regex $r0;
        java.util.regex.Pattern r1;

        $r0 := @parameter0: kotlin.text.Regex;

        r1 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        return r1;
    }

    public static kotlin.text.MatchResult find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        java.lang.Object $r1;
        kotlin.text.MatchResult $r2;
        kotlin.text.Regex $r3;
        int $i0, $i1;

        $r3 := @parameter0: kotlin.text.Regex;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r2 = virtualinvoke $r3.<kotlin.text.Regex: kotlin.text.MatchResult find(java.lang.CharSequence,int)>($r0, $i0);

        return $r2;
    }

    public static kotlin.sequences.Sequence findAll$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r2;
        kotlin.text.Regex $r3;
        int $i0, $i1;

        $r3 := @parameter0: kotlin.text.Regex;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r2 = virtualinvoke $r3.<kotlin.text.Regex: kotlin.sequences.Sequence findAll(java.lang.CharSequence,int)>($r0, $i0);

        return $r2;
    }

    public static java.util.List split$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        java.lang.Object $r1;
        java.util.List $r2;
        kotlin.text.Regex $r3;
        int $i0, $i1;

        $r3 := @parameter0: kotlin.text.Regex;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r2 = virtualinvoke $r3.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r0, $i0);

        return $r2;
    }

    public static kotlin.sequences.Sequence splitToSequence$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r2;
        kotlin.text.Regex $r3;
        int $i0, $i1;

        $r3 := @parameter0: kotlin.text.Regex;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r2 = virtualinvoke $r3.<kotlin.text.Regex: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,int)>($r0, $i0);

        return $r2;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.text.Regex $r0;
        kotlin.text.Regex$Serialized $r1;
        java.util.regex.Pattern $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @this: kotlin.text.Regex;

        $r1 = new kotlin.text.Regex$Serialized;

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String pattern()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "nativePattern.pattern()");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $i0 = virtualinvoke $r2.<java.util.regex.Pattern: int flags()>();

        specialinvoke $r1.<kotlin.text.Regex$Serialized: void <init>(java.lang.String,int)>($r3, $i0);

        return $r1;
    }

    public final boolean containsMatchIn(java.lang.CharSequence)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }

    public final kotlin.text.MatchResult find(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        int $i0;
        java.lang.CharSequence $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        kotlin.text.MatchResult $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "nativePattern.matcher(input)");

        $r4 = staticinvoke <kotlin.text.RegexKt: kotlin.text.MatchResult access$findNext(java.util.regex.Matcher,int,java.lang.CharSequence)>($r3, $i0, $r1);

        return $r4;
    }

    public final kotlin.sequences.Sequence findAll(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        kotlin.text.Regex$findAll$1 $r2;
        kotlin.text.Regex$findAll$2 $r3;
        kotlin.sequences.Sequence $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 > $i1 goto label1;

        $r2 = new kotlin.text.Regex$findAll$1;

        specialinvoke $r2.<kotlin.text.Regex$findAll$1: void <init>(kotlin.text.Regex,java.lang.CharSequence,int)>($r0, $r1, $i0);

        $r3 = <kotlin.text.Regex$findAll$2: kotlin.text.Regex$findAll$2 INSTANCE>;

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence generateSequence(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>($r2, $r3);

        return $r4;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start index out of bounds: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", input length: ");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }

    public final java.util.Set getOptions()
    {
        kotlin.text.Regex $r0;
        java.util.Set $r1;
        java.util.regex.Pattern $r2;
        int $i0;
        java.util.EnumSet $r3;
        kotlin.text.Regex$special$$inlined$fromInt$1 r4;
        java.lang.Iterable r5;

        $r0 := @this: kotlin.text.Regex;

        $r1 = $r0.<kotlin.text.Regex: java.util.Set _options>;

        if $r1 != null goto label1;

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $i0 = virtualinvoke $r2.<java.util.regex.Pattern: int flags()>();

        $r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lkotlin/text/RegexOption;");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "");

        r4 = new kotlin.text.Regex$special$$inlined$fromInt$1;

        specialinvoke r4.<kotlin.text.Regex$special$$inlined$fromInt$1: void <init>(int)>($i0);

        r5 = (java.lang.Iterable) $r3;

        staticinvoke <kotlin.collections.CollectionsKt: boolean retainAll(java.lang.Iterable,kotlin.jvm.functions.Function1)>(r5, r4);

        $r1 = (java.util.Set) $r3;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "unmodifiableSet(EnumSet.\u2026mask == it.value }\n    })");

        $r0.<kotlin.text.Regex: java.util.Set _options> = $r1;

     label1:
        return $r1;
    }

    public final java.lang.String getPattern()
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;

        $r0 := @this: kotlin.text.Regex;

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String pattern()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "nativePattern.pattern()");

        return $r1;
    }

    public final kotlin.text.MatchResult matchAt(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        kotlin.text.MatcherMatchResult $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>(0);

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>(1);

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label1;

        $r4 = new kotlin.text.MatcherMatchResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this");

        specialinvoke $r4.<kotlin.text.MatcherMatchResult: void <init>(java.util.regex.Matcher,java.lang.CharSequence)>($r3, $r1);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public final kotlin.text.MatchResult matchEntire(java.lang.CharSequence)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        kotlin.text.MatchResult $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "nativePattern.matcher(input)");

        $r4 = staticinvoke <kotlin.text.RegexKt: kotlin.text.MatchResult access$matchEntire(java.util.regex.Matcher,java.lang.CharSequence)>($r3, $r1);

        return $r4;
    }

    public final boolean matches(java.lang.CharSequence)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public final boolean matchesAt(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        int $i0, $i1;
        java.lang.CharSequence $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>(0);

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>(1);

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r3 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean lookingAt()>();

        return $z0;
    }

    public final java.lang.String replace(java.lang.CharSequence, java.lang.String)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "replacement");

        $r3 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "nativePattern.matcher(in\u2026).replaceAll(replacement)");

        return $r2;
    }

    public final java.lang.String replace(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        kotlin.text.Regex $r0;
        java.lang.StringBuilder $r1;
        java.lang.CharSequence $r2, $r10;
        kotlin.jvm.functions.Function1 $r3;
        int $i0, $i1, $i2;
        kotlin.text.MatchResult $r4, $r5;
        java.lang.String $r6;
        kotlin.ranges.IntRange $r7;
        java.lang.Integer $r8;
        java.lang.Object $r9;

        $r0 := @this: kotlin.text.Regex;

        $r2 := @parameter0: java.lang.CharSequence;

        $r3 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "input");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "transform");

        $i0 = 0;

        $r4 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r0, $r2, 0, 2, null);

        $r5 = $r4;

        if $r4 != null goto label1;

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r6;

     label1:
        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

     label2:
        $r7 = interfaceinvoke $r5.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $r8 = virtualinvoke $r7.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i0, $i2);

        $r9 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r10 = (java.lang.CharSequence) $r9;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r10);

        $r7 = interfaceinvoke $r5.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $r8 = virtualinvoke $r7.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        $r4 = interfaceinvoke $r5.<kotlin.text.MatchResult: kotlin.text.MatchResult next()>();

        $r5 = $r4;

        if $i0 >= $i1 goto label3;

        if $r4 != null goto label2;

     label3:
        if $i0 >= $i1 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i0, $i1);

     label4:
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "sb.toString()");

        return $r6;
    }

    public final java.lang.String replaceFirst(java.lang.CharSequence, java.lang.String)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "replacement");

        $r3 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "nativePattern.matcher(in\u2026replaceFirst(replacement)");

        return $r2;
    }

    public final java.util.List split(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        java.lang.CharSequence $r1, $r5;
        int $i0, $i1, $i2, $i3;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        java.util.ArrayList $r4, r8;
        java.lang.String $r6;
        java.util.List $r7;

        $r0 := @this: kotlin.text.Regex;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        staticinvoke <kotlin.text.StringsKt: void requireNonNegativeLimit(int)>($i0);

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        if $i0 == 1 goto label6;

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        goto label6;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i1 = 10;

        if $i0 <= 0 goto label2;

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, 10);

        goto label2;

     label2:
        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i1);

        $i0 = $i0 + -1;

        $i1 = 0;

     label3:
        $i2 = virtualinvoke $r3.<java.util.regex.Matcher: int start()>();

        $r5 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i2 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        $i1 = $i2;

        if $i0 < 0 goto label4;

        $i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i3 == $i0 goto label5;

     label4:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label3;

     label5:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i2, $i0);

        $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r7 = (java.util.List) $r4;

        return $r7;

     label6:
        $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r6);

        return $r7;
    }

    public final kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence, int)
    {
        kotlin.text.Regex $r0;
        int $i0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;
        kotlin.text.Regex$splitToSequence$1 $r3;

        $r0 := @this: kotlin.text.Regex;

        $r2 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "input");

        staticinvoke <kotlin.text.StringsKt: void requireNonNegativeLimit(int)>($i0);

        $r3 = new kotlin.text.Regex$splitToSequence$1;

        specialinvoke $r3.<kotlin.text.Regex$splitToSequence$1: void <init>(kotlin.text.Regex,java.lang.CharSequence,int,kotlin.coroutines.Continuation)>($r0, $r2, $i0, null);

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r3);

        return $r1;
    }

    public final java.util.regex.Pattern toPattern()
    {
        kotlin.text.Regex $r0;
        java.util.regex.Pattern r1;

        $r0 := @this: kotlin.text.Regex;

        r1 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        return r1;
    }

    public java.lang.String toString()
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;

        $r0 := @this: kotlin.text.Regex;

        $r2 = $r0.<kotlin.text.Regex: java.util.regex.Pattern nativePattern>;

        $r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "nativePattern.toString()");

        return $r1;
    }

