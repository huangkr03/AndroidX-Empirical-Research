androidx.ui.graphics.AndroidCanvas
<androidx.ui.graphics.AndroidCanvas: kotlin.reflect.KProperty[] $$delegatedProperties>
<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas internalCanvas>
<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy srcRect$delegate>
<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy dstRect$delegate>
    public void <init>()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas $r1;
        androidx.ui.graphics.AndroidCanvas$srcRect$2 $r2;
        kotlin.LazyThreadSafetyMode $r3, $r7;
        kotlin.jvm.functions.Function0 $r4, $r8;
        kotlin.Lazy $r5, $r9;
        androidx.ui.graphics.AndroidCanvas$dstRect$2 $r6;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <androidx.ui.graphics.AndroidCanvasKt: android.graphics.Canvas access$getEmptyCanvas$cp$s534641744()>();

        r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas internalCanvas> = $r1;

        $r3 = <kotlin.LazyThreadSafetyMode: kotlin.LazyThreadSafetyMode NONE>;

        $r2 = new androidx.ui.graphics.AndroidCanvas$srcRect$2;

        specialinvoke $r2.<androidx.ui.graphics.AndroidCanvas$srcRect$2: void <init>()>();

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.LazyThreadSafetyMode,kotlin.jvm.functions.Function0)>($r3, $r4);

        r0.<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy srcRect$delegate> = $r5;

        $r7 = <kotlin.LazyThreadSafetyMode: kotlin.LazyThreadSafetyMode NONE>;

        $r6 = new androidx.ui.graphics.AndroidCanvas$dstRect$2;

        specialinvoke $r6.<androidx.ui.graphics.AndroidCanvas$dstRect$2: void <init>()>();

        $r8 = (kotlin.jvm.functions.Function0) $r6;

        $r9 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.LazyThreadSafetyMode,kotlin.jvm.functions.Function0)>($r7, $r8);

        r0.<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy dstRect$delegate> = $r9;

        return;
    }

    public final android.graphics.Canvas getInternalCanvas()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas internalCanvas>;

        return $r1;
    }

    public final void setInternalCanvas(android.graphics.Canvas)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas internalCanvas> = r1;

        return;
    }

    public static void getInternalCanvas$annotations()
    {
        return;
    }

    private final android.graphics.Rect getSrcRect()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        kotlin.Lazy r1;
        kotlin.reflect.KProperty r2;
        boolean z0;
        kotlin.reflect.KProperty[] $r3;
        java.lang.Object $r4;
        android.graphics.Rect $r5;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 = r0.<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy srcRect$delegate>;

        $r3 = <androidx.ui.graphics.AndroidCanvas: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r3[0];

        z0 = 0;

        $r4 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r5 = (android.graphics.Rect) $r4;

        return $r5;
    }

    private final android.graphics.Rect getDstRect()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        kotlin.Lazy r1;
        kotlin.reflect.KProperty r2;
        boolean z0;
        kotlin.reflect.KProperty[] $r3;
        java.lang.Object $r4;
        android.graphics.Rect $r5;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 = r0.<androidx.ui.graphics.AndroidCanvas: kotlin.Lazy dstRect$delegate>;

        $r3 = <androidx.ui.graphics.AndroidCanvas: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r3[1];

        z0 = 0;

        $r4 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r5 = (android.graphics.Rect) $r4;

        return $r5;
    }

    public void save()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        return;
    }

    public void restore()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    public android.graphics.Canvas getNativeCanvas()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        return $r1;
    }

    public void saveLayer(androidx.ui.geometry.Rect, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        androidx.ui.graphics.Paint r2;
        android.graphics.Canvas $r3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r4;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bounds");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "paint");

        $r3 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $f0 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getLeft()>();

        $f1 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getTop()>();

        $f2 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getRight()>();

        $f3 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getBottom()>();

        $r4 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r3.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f0, $f1, $f2, $f3, $r4, 31);

        return;
    }

    public void translate(float, float)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        return;
    }

    public void scale(float, float)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f0, f1);

        return;
    }

    public void rotate(float)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>(f0);

        return;
    }

    public void skew(float, float)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1;
        android.graphics.Canvas $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<android.graphics.Canvas: void skew(float,float)>(f0, f1);

        return;
    }

    public void concat(androidx.ui.graphics.vectormath.Matrix4)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.vectormath.Matrix4 r1;
        android.graphics.Matrix r2, $r5;
        float[] r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        android.graphics.Canvas $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.vectormath.Matrix4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matrix4");

        $z0 = staticinvoke <androidx.ui.graphics.vectormath.Matrix4Kt: boolean isIdentity(androidx.ui.graphics.vectormath.Matrix4)>(r1);

        if $z0 != 0 goto label17;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r2 = $r5;

        $f0 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 0);

        $b0 = $f0 cmpg 0.0F;

        if $b0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label15;

        $f1 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 1);

        $b1 = $f1 cmpg 0.0F;

        if $b1 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        if $z2 == 0 goto label15;

        $f2 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 0);

        $b2 = $f2 cmpg 0.0F;

        if $b2 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        if $z3 == 0 goto label15;

        $f3 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 1);

        $b3 = $f3 cmpg 0.0F;

        if $b3 != 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        if $z4 == 0 goto label15;

        $f4 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 2);

        $b4 = $f4 cmpg 1.0F;

        if $b4 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        if $z5 == 0 goto label15;

        $f5 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(2, 3);

        $b5 = $f5 cmpg 0.0F;

        if $b5 != 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        if $z6 == 0 goto label15;

        $f6 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(3, 2);

        $b6 = $f6 cmpg 0.0F;

        if $b6 != 0 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        if $z7 != 0 goto label16;

     label15:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Android does not support arbitrary transforms");

        throw $r7;

     label16:
        r4 = newarray (float)[9];

        $f7 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(0, 0);

        r4[0] = $f7;

        $f8 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(1, 0);

        r4[1] = $f8;

        $f9 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(3, 0);

        r4[2] = $f9;

        $f10 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(0, 1);

        r4[3] = $f10;

        $f11 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(1, 1);

        r4[4] = $f11;

        $f12 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(3, 1);

        r4[5] = $f12;

        $f13 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(0, 3);

        r4[6] = $f13;

        $f14 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(1, 3);

        r4[7] = $f14;

        $f15 = virtualinvoke r1.<androidx.ui.graphics.vectormath.Matrix4: float get(int,int)>(3, 3);

        r4[8] = $f15;

        r3 = r4;

        virtualinvoke r2.<android.graphics.Matrix: void setValues(float[])>(r3);

        $r6 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r6.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r2);

     label17:
        return;
    }

    public void clipRect(float, float, float, float, androidx.ui.graphics.ClipOp)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1, f2, f3;
        androidx.ui.graphics.ClipOp r1;
        android.graphics.Canvas $r2;
        android.graphics.Region$Op $r3;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: androidx.ui.graphics.ClipOp;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "clipOp");

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r3 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Region$Op toRegionOp(androidx.ui.graphics.ClipOp)>(r1);

        virtualinvoke $r2.<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>(f0, f1, f2, f3, $r3);

        return;
    }

    public void clipPath(androidx.ui.graphics.Path, androidx.ui.graphics.ClipOp)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.Path r1;
        androidx.ui.graphics.ClipOp r2;
        android.graphics.Canvas r4;
        android.graphics.Path r5;
        boolean $z1;
        java.lang.UnsupportedOperationException $r6;
        androidx.ui.graphics.AndroidPath $r7;
        android.graphics.Region$Op $r8;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.Path;

        r2 := @parameter1: androidx.ui.graphics.ClipOp;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "clipOp");

        r4 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $z1 = r1 instanceof androidx.ui.graphics.AndroidPath;

        if $z1 == 0 goto label1;

        $r7 = (androidx.ui.graphics.AndroidPath) r1;

        goto label2;

     label1:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unable to obtain android.graphics.Path");

        throw $r6;

     label2:
        r5 = virtualinvoke $r7.<androidx.ui.graphics.AndroidPath: android.graphics.Path getInternalPath()>();

        $r8 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Region$Op toRegionOp(androidx.ui.graphics.ClipOp)>(r2);

        virtualinvoke r4.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r5, $r8);

        return;
    }

    public final android.graphics.Region$Op toRegionOp(androidx.ui.graphics.ClipOp)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.ClipOp $r1, r2;
        int i0, $i1;
        int[] $r3;
        android.graphics.Region$Op $r4;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 := @parameter0: androidx.ui.graphics.ClipOp;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        r2 = $r1;

        $r3 = <androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.ui.graphics.ClipOp: int ordinal()>();

        i0 = $r3[$i1];

        if i0 != 1 goto label1;

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        goto label2;

     label1:
        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

     label2:
        return $r4;
    }

    public void drawLine(androidx.ui.geometry.Offset, androidx.ui.geometry.Offset, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Offset r1, r2;
        androidx.ui.graphics.Paint r3;
        android.graphics.Canvas $r4;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r5;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Offset;

        r2 := @parameter1: androidx.ui.geometry.Offset;

        r3 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "p2");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "paint");

        $r4 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $f0 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getX()>();

        $f1 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getY()>();

        $f2 = virtualinvoke r2.<androidx.ui.geometry.Offset: float getX()>();

        $f3 = virtualinvoke r2.<androidx.ui.geometry.Offset: float getY()>();

        $r5 = virtualinvoke r3.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r4.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r5);

        return;
    }

    public void drawRect(float, float, float, float, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1, f2, f3;
        androidx.ui.graphics.Paint r1;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "paint");

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r3 = virtualinvoke r1.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r2.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, $r3);

        return;
    }

    public void drawRoundRect(float, float, float, float, float, float, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1, f2, f3, f4, f5;
        androidx.ui.graphics.Paint r1;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r1 := @parameter6: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "paint");

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r3 = virtualinvoke r1.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r2.<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, f4, f5, $r3);

        return;
    }

    public void drawOval(float, float, float, float, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1, f2, f3;
        androidx.ui.graphics.Paint r1;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "paint");

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r3 = virtualinvoke r1.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r2.<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, $r3);

        return;
    }

    public void drawCircle(androidx.ui.geometry.Offset, float, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Offset r1;
        float f0, $f1, $f2;
        androidx.ui.graphics.Paint r2;
        android.graphics.Canvas $r3;
        android.graphics.Paint $r4;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Offset;

        f0 := @parameter1: float;

        r2 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "center");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "paint");

        $r3 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $f1 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getX()>();

        $f2 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getY()>();

        $r4 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r3.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f1, $f2, f0, $r4);

        return;
    }

    public void drawArc(float, float, float, float, float, float, boolean, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1, f2, f3, f4, f5;
        boolean z0;
        androidx.ui.graphics.Paint r1;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        z0 := @parameter6: boolean;

        r1 := @parameter7: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "paint");

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r3 = virtualinvoke r1.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r2.<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>(f0, f1, f2, f3, f4, f5, z0, $r3);

        return;
    }

    public void drawPath(androidx.ui.graphics.Path, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.Path r1;
        androidx.ui.graphics.Paint r2;
        android.graphics.Canvas r4;
        android.graphics.Path r5;
        boolean $z1;
        java.lang.UnsupportedOperationException $r6;
        androidx.ui.graphics.AndroidPath $r7;
        android.graphics.Paint $r8;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.Path;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "paint");

        r4 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $z1 = r1 instanceof androidx.ui.graphics.AndroidPath;

        if $z1 == 0 goto label1;

        $r7 = (androidx.ui.graphics.AndroidPath) r1;

        goto label2;

     label1:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unable to obtain android.graphics.Path");

        throw $r6;

     label2:
        r5 = virtualinvoke $r7.<androidx.ui.graphics.AndroidPath: android.graphics.Path getInternalPath()>();

        $r8 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke r4.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r5, $r8);

        return;
    }

    public void drawImage(androidx.ui.graphics.ImageAsset, androidx.ui.geometry.Offset, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.ImageAsset r1;
        androidx.ui.geometry.Offset r2;
        androidx.ui.graphics.Paint r3;
        android.graphics.Canvas $r4;
        android.graphics.Bitmap $r5;
        float $f0, $f1;
        android.graphics.Paint $r6;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.ImageAsset;

        r2 := @parameter1: androidx.ui.geometry.Offset;

        r3 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "image");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "topLeftOffset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "paint");

        $r4 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r5 = staticinvoke <androidx.ui.graphics.AndroidImageAssetKt: android.graphics.Bitmap asAndroidBitmap(androidx.ui.graphics.ImageAsset)>(r1);

        $f0 = virtualinvoke r2.<androidx.ui.geometry.Offset: float getX()>();

        $f1 = virtualinvoke r2.<androidx.ui.geometry.Offset: float getY()>();

        $r6 = virtualinvoke r3.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r4.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r5, $f0, $f1, $r6);

        return;
    }

    public void drawImageRect(androidx.ui.graphics.ImageAsset, androidx.ui.unit.IntOffset, androidx.ui.unit.IntSize, androidx.ui.unit.IntOffset, androidx.ui.unit.IntSize, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.ImageAsset r1;
        androidx.ui.unit.IntOffset r2, r4;
        androidx.ui.unit.IntSize r3, r5;
        androidx.ui.graphics.Paint r6;
        android.graphics.Rect r7, r11, r15, r16, r17;
        android.graphics.Canvas $r8, r13, r19;
        android.graphics.Bitmap $r9, r12, r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.graphics.Paint $r10;
        boolean z0, z1, z3, z4;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.ImageAsset;

        r2 := @parameter1: androidx.ui.unit.IntOffset;

        r3 := @parameter2: androidx.ui.unit.IntSize;

        r4 := @parameter3: androidx.ui.unit.IntOffset;

        r5 := @parameter4: androidx.ui.unit.IntSize;

        r6 := @parameter5: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "image");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "srcOffset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "srcSize");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "dstOffset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "dstSize");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "paint");

        $r8 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r9 = staticinvoke <androidx.ui.graphics.AndroidImageAssetKt: android.graphics.Bitmap asAndroidBitmap(androidx.ui.graphics.ImageAsset)>(r1);

        r11 = specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Rect getSrcRect()>();

        r12 = $r9;

        r13 = $r8;

        z0 = 0;

        z1 = 0;

        $i0 = virtualinvoke r2.<androidx.ui.unit.IntOffset: int getX()>();

        r11.<android.graphics.Rect: int left> = $i0;

        $i1 = virtualinvoke r2.<androidx.ui.unit.IntOffset: int getY()>();

        r11.<android.graphics.Rect: int top> = $i1;

        $i2 = virtualinvoke r2.<androidx.ui.unit.IntOffset: int getX()>();

        $i3 = virtualinvoke r3.<androidx.ui.unit.IntSize: int getWidth()>();

        $i4 = $i2 + $i3;

        r11.<android.graphics.Rect: int right> = $i4;

        $i5 = virtualinvoke r2.<androidx.ui.unit.IntOffset: int getY()>();

        $i6 = virtualinvoke r3.<androidx.ui.unit.IntSize: int getHeight()>();

        $i7 = $i5 + $i6;

        r11.<android.graphics.Rect: int bottom> = $i7;

        r15 = r11;

        r16 = specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Rect getDstRect()>();

        r17 = r15;

        r18 = r12;

        r19 = r13;

        z3 = 0;

        z4 = 0;

        $i8 = virtualinvoke r4.<androidx.ui.unit.IntOffset: int getX()>();

        r16.<android.graphics.Rect: int left> = $i8;

        $i9 = virtualinvoke r4.<androidx.ui.unit.IntOffset: int getY()>();

        r16.<android.graphics.Rect: int top> = $i9;

        $i10 = virtualinvoke r4.<androidx.ui.unit.IntOffset: int getX()>();

        $i11 = virtualinvoke r5.<androidx.ui.unit.IntSize: int getWidth()>();

        $i12 = $i10 + $i11;

        r16.<android.graphics.Rect: int right> = $i12;

        $i13 = virtualinvoke r4.<androidx.ui.unit.IntOffset: int getY()>();

        $i14 = virtualinvoke r5.<androidx.ui.unit.IntSize: int getHeight()>();

        $i15 = $i13 + $i14;

        r16.<android.graphics.Rect: int bottom> = $i15;

        r7 = r16;

        $r10 = virtualinvoke r6.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke r19.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r18, r17, r7, $r10);

        return;
    }

    public void drawPoints(androidx.ui.graphics.PointMode, java.util.List, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.PointMode r1, r4;
        java.util.List r2;
        androidx.ui.graphics.Paint r3;
        int i0, $i1;
        int[] $r5;
        kotlin.NoWhenBranchMatchedException $r6;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.PointMode;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pointMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "paint");

        r4 = r1;

        $r5 = <androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i1 = virtualinvoke r4.<androidx.ui.graphics.PointMode: int ordinal()>();

        i0 = $r5[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawLines(java.util.List,androidx.ui.graphics.Paint,int)>(r2, r3, 2);

        goto label5;

     label2:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawLines(java.util.List,androidx.ui.graphics.Paint,int)>(r2, r3, 1);

        goto label5;

     label3:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawPoints(java.util.List,androidx.ui.graphics.Paint)>(r2, r3);

        goto label5;

     label4:
        $r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r6;

     label5:
        return;
    }

    public void enableZ()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.CanvasUtils $r1;
        android.graphics.Canvas $r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = <androidx.ui.graphics.CanvasUtils: androidx.ui.graphics.CanvasUtils INSTANCE>;

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<androidx.ui.graphics.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>($r2, 1);

        return;
    }

    public void disableZ()
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.CanvasUtils $r1;
        android.graphics.Canvas $r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        $r1 = <androidx.ui.graphics.CanvasUtils: androidx.ui.graphics.CanvasUtils INSTANCE>;

        $r2 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        virtualinvoke $r1.<androidx.ui.graphics.CanvasUtils: void enableZ(android.graphics.Canvas,boolean)>($r2, 0);

        return;
    }

    private final void drawPoints(java.util.List, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        java.util.List r1;
        androidx.ui.graphics.Paint r2;
        int i0, i1, $i2, i3;
        java.lang.Object r4;
        androidx.ui.geometry.Offset r5;
        java.util.Collection $r6;
        android.graphics.Canvas $r7;
        float $f0, $f1;
        android.graphics.Paint $r8;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        i3 = 0;

        $r6 = (java.util.Collection) r1;

        $i2 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        i0 = $i2 + -1;

        if i3 > i0 goto label2;

     label1:
        i1 = i3;

        i3 = i3 + 1;

        r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (androidx.ui.geometry.Offset) r4;

        $r7 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $f0 = virtualinvoke r5.<androidx.ui.geometry.Offset: float getX()>();

        $f1 = virtualinvoke r5.<androidx.ui.geometry.Offset: float getY()>();

        $r8 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r7.<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>($f0, $f1, $r8);

        if i3 <= i0 goto label1;

     label2:
        return;
    }

    private final void drawLines(java.util.List, androidx.ui.graphics.Paint, int)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        java.util.List r1;
        androidx.ui.graphics.Paint r2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, i10;
        androidx.ui.geometry.Offset r3, r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Object $r11, $r12;
        android.graphics.Canvas $r13;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r14;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        i0 := @parameter2: int;

        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i7 < 2 goto label4;

        $i8 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i8 - 1;

        i2 = i1 + -1;

        if i0 <= 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step must be positive, was: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        i3 = i0;

        i10 = 0;

        i4 = staticinvoke <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>(0, i2, i3);

        i5 = i3;

        if i1 == -2147483648 goto label4;

        if i10 > i4 goto label4;

     label3:
        i6 = i10;

        i10 = i10 + i5;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r3 = (androidx.ui.geometry.Offset) $r11;

        $i9 = i6 + 1;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i9);

        r4 = (androidx.ui.geometry.Offset) $r12;

        $r13 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $f0 = virtualinvoke r3.<androidx.ui.geometry.Offset: float getX()>();

        $f1 = virtualinvoke r3.<androidx.ui.geometry.Offset: float getY()>();

        $f2 = virtualinvoke r4.<androidx.ui.geometry.Offset: float getX()>();

        $f3 = virtualinvoke r4.<androidx.ui.geometry.Offset: float getY()>();

        $r14 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r13.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r14);

        if i6 != i4 goto label3;

     label4:
        return;
    }

    public void drawRawPoints(androidx.ui.graphics.PointMode, float[], androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.PointMode r1, r4;
        float[] r2;
        androidx.ui.graphics.Paint r3;
        int i0, $i1, $i2, $i3;
        int[] $r5;
        kotlin.NoWhenBranchMatchedException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.PointMode;

        r2 := @parameter1: float[];

        r3 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pointMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "paint");

        $i1 = lengthof r2;

        $i2 = $i1 % 2;

        if $i2 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("points must have an even number of values");

        throw $r7;

     label1:
        r4 = r1;

        $r5 = <androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i3 = virtualinvoke r4.<androidx.ui.graphics.PointMode: int ordinal()>();

        i0 = $r5[$i3];

        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawRawLines(float[],androidx.ui.graphics.Paint,int)>(r2, r3, 2);

        goto label6;

     label3:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawRawLines(float[],androidx.ui.graphics.Paint,int)>(r2, r3, 1);

        goto label6;

     label4:
        specialinvoke r0.<androidx.ui.graphics.AndroidCanvas: void drawRawPoints(float[],androidx.ui.graphics.Paint,int)>(r2, r3, 2);

        goto label6;

     label5:
        $r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r6;

     label6:
        return;
    }

    private final void drawRawPoints(float[], androidx.ui.graphics.Paint, int)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float[] r1;
        androidx.ui.graphics.Paint r2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, i11;
        float f0, f1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        android.graphics.Canvas $r9;
        android.graphics.Paint $r10;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: androidx.ui.graphics.Paint;

        i0 := @parameter2: int;

        $i7 = lengthof r1;

        $i8 = $i7 % 2;

        if $i8 != 0 goto label4;

        $i9 = lengthof r1;

        i1 = $i9 - 1;

        i2 = i1 + -1;

        if i0 <= 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step must be positive, was: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        i3 = i0;

        i11 = 0;

        i4 = staticinvoke <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>(0, i2, i3);

        i5 = i3;

        if i1 == -2147483648 goto label4;

        if i11 > i4 goto label4;

     label3:
        i6 = i11;

        i11 = i11 + i5;

        f0 = r1[i6];

        $i10 = i6 + 1;

        f1 = r1[$i10];

        $r9 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r10 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r9.<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>(f0, f1, $r10);

        if i6 != i4 goto label3;

     label4:
        return;
    }

    private final void drawRawLines(float[], androidx.ui.graphics.Paint, int)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float[] r1;
        androidx.ui.graphics.Paint r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        float f0, f1, f2, f3;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        android.graphics.Canvas $r9;
        android.graphics.Paint $r10;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: androidx.ui.graphics.Paint;

        i0 := @parameter2: int;

        $i8 = lengthof r1;

        if $i8 < 4 goto label4;

        $i9 = lengthof r1;

        $i10 = $i9 % 2;

        if $i10 != 0 goto label4;

        $i11 = lengthof r1;

        i1 = $i11 - 3;

        i2 = i1 + -1;

        i3 = i0 * 2;

        if i3 <= 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step must be positive, was: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        i4 = i3;

        i15 = 0;

        i5 = staticinvoke <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>(0, i2, i4);

        i6 = i4;

        if i1 == -2147483648 goto label4;

        if i15 > i5 goto label4;

     label3:
        i7 = i15;

        i15 = i15 + i6;

        f0 = r1[i7];

        $i12 = i7 + 1;

        f1 = r1[$i12];

        $i13 = i7 + 2;

        f2 = r1[$i13];

        $i14 = i7 + 3;

        f3 = r1[$i14];

        $r9 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r10 = virtualinvoke r2.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r9.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, $r10);

        if i7 != i5 goto label3;

     label4:
        return;
    }

    public void drawVertices(androidx.ui.graphics.Vertices, androidx.ui.graphics.BlendMode, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.graphics.Vertices r1;
        androidx.ui.graphics.BlendMode r2;
        androidx.ui.graphics.Paint r3;
        android.graphics.Canvas $r4;
        androidx.ui.graphics.VertexMode $r5;
        android.graphics.Canvas$VertexMode $r6;
        float[] $r7, $r8, $r9;
        int $i0, $i1;
        int[] $r10;
        short[] $r11, $r12;
        android.graphics.Paint $r13;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.graphics.Vertices;

        r2 := @parameter1: androidx.ui.graphics.BlendMode;

        r3 := @parameter2: androidx.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "vertices");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "blendMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "paint");

        $r4 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r5 = virtualinvoke r1.<androidx.ui.graphics.Vertices: androidx.ui.graphics.VertexMode getVertexMode()>();

        $r6 = staticinvoke <androidx.ui.graphics.AndroidVertexModeKt: android.graphics.Canvas$VertexMode toNativeVertexMode(androidx.ui.graphics.VertexMode)>($r5);

        $r7 = virtualinvoke r1.<androidx.ui.graphics.Vertices: float[] getPositions()>();

        $i0 = lengthof $r7;

        $r8 = virtualinvoke r1.<androidx.ui.graphics.Vertices: float[] getPositions()>();

        $r9 = virtualinvoke r1.<androidx.ui.graphics.Vertices: float[] getTextureCoordinates()>();

        $r10 = virtualinvoke r1.<androidx.ui.graphics.Vertices: int[] getColors()>();

        $r11 = virtualinvoke r1.<androidx.ui.graphics.Vertices: short[] getIndices()>();

        $r12 = virtualinvoke r1.<androidx.ui.graphics.Vertices: short[] getIndices()>();

        $i1 = lengthof $r12;

        $r13 = virtualinvoke r3.<androidx.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke $r4.<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>($r6, $i0, $r8, 0, $r9, 0, $r10, 0, $r11, 0, $i1, $r13);

        return;
    }

    public void clipRect(androidx.ui.geometry.Rect, androidx.ui.graphics.ClipOp)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        androidx.ui.graphics.ClipOp r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        r2 := @parameter1: androidx.ui.graphics.ClipOp;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void clipRect(androidx.ui.graphics.Canvas,androidx.ui.geometry.Rect,androidx.ui.graphics.ClipOp)>(r0, r1, r2);

        return;
    }

    public void drawArc(androidx.ui.geometry.Rect, float, float, boolean, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        float f0, f1;
        boolean z0;
        androidx.ui.graphics.Paint r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        r2 := @parameter4: androidx.ui.graphics.Paint;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void drawArc(androidx.ui.graphics.Canvas,androidx.ui.geometry.Rect,float,float,boolean,androidx.ui.graphics.Paint)>(r0, r1, f0, f1, z0, r2);

        return;
    }

    public void drawArcRad(androidx.ui.geometry.Rect, float, float, boolean, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        float f0, f1;
        boolean z0;
        androidx.ui.graphics.Paint r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        r2 := @parameter4: androidx.ui.graphics.Paint;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void drawArcRad(androidx.ui.graphics.Canvas,androidx.ui.geometry.Rect,float,float,boolean,androidx.ui.graphics.Paint)>(r0, r1, f0, f1, z0, r2);

        return;
    }

    public void drawOval(androidx.ui.geometry.Rect, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        androidx.ui.graphics.Paint r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void drawOval(androidx.ui.graphics.Canvas,androidx.ui.geometry.Rect,androidx.ui.graphics.Paint)>(r0, r1, r2);

        return;
    }

    public void drawRect(androidx.ui.geometry.Rect, androidx.ui.graphics.Paint)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        androidx.ui.geometry.Rect r1;
        androidx.ui.graphics.Paint r2;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        r2 := @parameter1: androidx.ui.graphics.Paint;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void drawRect(androidx.ui.graphics.Canvas,androidx.ui.geometry.Rect,androidx.ui.graphics.Paint)>(r0, r1, r2);

        return;
    }

    public void skewRad(float, float)
    {
        androidx.ui.graphics.AndroidCanvas r0;
        float f0, f1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        staticinvoke <androidx.ui.graphics.Canvas$DefaultImpls: void skewRad(androidx.ui.graphics.Canvas,float,float)>(r0, f0, f1);

        return;
    }

    public static final void <clinit>()
    {
        kotlin.reflect.KProperty[] r0;
        kotlin.jvm.internal.PropertyReference1Impl $r1, $r7;
        kotlin.reflect.KClass $r2, $r8;
        kotlin.reflect.KDeclarationContainer $r3, $r9;
        kotlin.jvm.internal.PropertyReference1 $r4, $r10;
        kotlin.reflect.KProperty1 $r5, $r11;
        kotlin.reflect.KProperty $r6, $r12;

        r0 = newarray (kotlin.reflect.KProperty)[2];

        $r1 = new kotlin.jvm.internal.PropertyReference1Impl;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/ui/graphics/AndroidCanvas;");

        $r3 = (kotlin.reflect.KDeclarationContainer) $r2;

        specialinvoke $r1.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>($r3, "srcRect", "getSrcRect()Landroid/graphics/Rect;");

        $r4 = (kotlin.jvm.internal.PropertyReference1) $r1;

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r4);

        $r6 = (kotlin.reflect.KProperty) $r5;

        r0[0] = $r6;

        $r7 = new kotlin.jvm.internal.PropertyReference1Impl;

        $r8 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/ui/graphics/AndroidCanvas;");

        $r9 = (kotlin.reflect.KDeclarationContainer) $r8;

        specialinvoke $r7.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>($r9, "dstRect", "getDstRect()Landroid/graphics/Rect;");

        $r10 = (kotlin.jvm.internal.PropertyReference1) $r7;

        $r11 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r10);

        $r12 = (kotlin.reflect.KProperty) $r11;

        r0[1] = $r12;

        <androidx.ui.graphics.AndroidCanvas: kotlin.reflect.KProperty[] $$delegatedProperties> = r0;

        return;
    }

androidx.ui.graphics.AndroidCanvas$dstRect$2
    void <init>()
    {
        androidx.ui.graphics.AndroidCanvas$dstRect$2 r0;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$dstRect$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final android.graphics.Rect invoke()
    {
        androidx.ui.graphics.AndroidCanvas$dstRect$2 r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$dstRect$2;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.ui.graphics.AndroidCanvas$dstRect$2 r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$dstRect$2;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas$dstRect$2: android.graphics.Rect invoke()>();

        return $r1;
    }

androidx.ui.graphics.AndroidCanvas$srcRect$2
    void <init>()
    {
        androidx.ui.graphics.AndroidCanvas$srcRect$2 r0;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$srcRect$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final android.graphics.Rect invoke()
    {
        androidx.ui.graphics.AndroidCanvas$srcRect$2 r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$srcRect$2;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.ui.graphics.AndroidCanvas$srcRect$2 r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.ui.graphics.AndroidCanvas$srcRect$2;

        $r1 = virtualinvoke r0.<androidx.ui.graphics.AndroidCanvas$srcRect$2: android.graphics.Rect invoke()>();

        return $r1;
    }

androidx.ui.graphics.AndroidCanvas$WhenMappings
<androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$0>
<androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$1>
    public static final void <clinit>()
    {
        androidx.ui.graphics.ClipOp[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.ui.graphics.ClipOp $r1;
        androidx.ui.graphics.PointMode[] $r2;
        androidx.ui.graphics.PointMode $r3, $r4, $r5;
        int[] r6, r7;

        $r0 = staticinvoke <androidx.ui.graphics.ClipOp: androidx.ui.graphics.ClipOp[] values()>();

        $i0 = lengthof $r0;

        r6 = newarray (int)[$i0];

        $r1 = <androidx.ui.graphics.ClipOp: androidx.ui.graphics.ClipOp difference>;

        $i1 = virtualinvoke $r1.<androidx.ui.graphics.ClipOp: int ordinal()>();

        r6[$i1] = 1;

        <androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$0> = r6;

        $r2 = staticinvoke <androidx.ui.graphics.PointMode: androidx.ui.graphics.PointMode[] values()>();

        $i2 = lengthof $r2;

        r7 = newarray (int)[$i2];

        $r3 = <androidx.ui.graphics.PointMode: androidx.ui.graphics.PointMode lines>;

        $i3 = virtualinvoke $r3.<androidx.ui.graphics.PointMode: int ordinal()>();

        r7[$i3] = 1;

        $r4 = <androidx.ui.graphics.PointMode: androidx.ui.graphics.PointMode polygon>;

        $i4 = virtualinvoke $r4.<androidx.ui.graphics.PointMode: int ordinal()>();

        r7[$i4] = 2;

        $r5 = <androidx.ui.graphics.PointMode: androidx.ui.graphics.PointMode points>;

        $i5 = virtualinvoke $r5.<androidx.ui.graphics.PointMode: int ordinal()>();

        r7[$i5] = 3;

        <androidx.ui.graphics.AndroidCanvas$WhenMappings: int[] $EnumSwitchMapping$1> = r7;

        return;
    }

