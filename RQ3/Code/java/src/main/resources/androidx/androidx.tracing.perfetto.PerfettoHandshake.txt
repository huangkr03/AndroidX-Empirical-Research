androidx.tracing.perfetto.PerfettoHandshake
<androidx.tracing.perfetto.PerfettoHandshake: java.lang.String targetPackage>
<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 parseJsonMap>
<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 executeShellCommand>
    public void <init>(java.lang.String, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.tracing.perfetto.PerfettoHandshake r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function1 r2, r3;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "targetPackage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "parseJsonMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "executeShellCommand");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tracing.perfetto.PerfettoHandshake: java.lang.String targetPackage> = r1;

        r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 parseJsonMap> = r2;

        r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 executeShellCommand> = r3;

        return;
    }

    public final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableTracing(androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider)
    {
        androidx.tracing.perfetto.PerfettoHandshake r0;
        androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider r1, r19;
        java.lang.String r2, r3, r4, $r5, $r6, $r13, r20, $r21, $r26, r32;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r22, $r23, $r24, $r25, $r27, $r28;
        java.lang.Throwable $r10;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r18, r31;
        kotlin.jvm.functions.Function1 $r29;
        java.lang.Object $r30;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake;

        r1 := @parameter0: androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider;

        if r1 == null goto label1;

        r19 = r1;

        $r5 = r0.<androidx.tracing.perfetto.PerfettoHandshake: java.lang.String targetPackage>;

        $r6 = specialinvoke r0.<androidx.tracing.perfetto.PerfettoHandshake: java.lang.String getDeviceAbi()>();

        r20 = virtualinvoke r19.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.lang.String pushLibrary$tracing_perfetto_common(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--es path ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r21 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        if $r21 != null goto label2;

     label1:
        $r21 = "";

     label2:
        r2 = $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("am broadcast -a androidx.tracing.perfetto.action.ENABLE_TRACING ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r26 = r0.<androidx.tracing.perfetto.PerfettoHandshake: java.lang.String targetPackage>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/androidx.tracing.perfetto.TracingReceiver");

        r3 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 executeShellCommand>;

        $r30 = interfaceinvoke $r29.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r4 = (java.lang.String) $r30;

     label3:
        r31 = specialinvoke r0.<androidx.tracing.perfetto.PerfettoHandshake: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse parseResponse(java.lang.String)>(r4);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception occurred while trying to parse a response. Error: ");

        $r13 = virtualinvoke $r10.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Raw response: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        r32 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        specialinvoke $r18.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: void <init>(int,java.lang.String,java.lang.String)>(99, null, r32);

        r31 = $r18;

     label6:
        return r31;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public static androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableTracing$default(androidx.tracing.perfetto.PerfettoHandshake, androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider, int, java.lang.Object)
    {
        androidx.tracing.perfetto.PerfettoHandshake r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r2;
        androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider r3;

        r0 := @parameter0: androidx.tracing.perfetto.PerfettoHandshake;

        r3 := @parameter1: androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = virtualinvoke r0.<androidx.tracing.perfetto.PerfettoHandshake: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableTracing(androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider)>(r3);

        return $r2;
    }

    private final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse parseResponse(java.lang.String)
    {
        androidx.tracing.perfetto.PerfettoHandshake r0;
        java.lang.String r1, r2, $r8, $r17, $r20, $r22, $r28, $r30, $r35, $r41, r48, r51, r52, r60, r61, $r62, $r68;
        kotlin.text.MatchResult r3, $r11;
        java.lang.Object r4, $r14, $r16, $r19, $r21, r47, $r49, $r58;
        kotlin.text.MatchGroup r5, $r50, r59;
        kotlin.text.Regex $r6, $r9;
        java.util.List $r7;
        boolean $z1, $z2, $z3, z6, $z7, $z8;
        java.lang.CharSequence $r10, $r42, $r43, $r44;
        kotlin.text.MatchGroupCollection $r12, $r55;
        kotlin.jvm.functions.Function1 $r13;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r15, $r36, r70;
        java.lang.IllegalArgumentException $r18, $r29, $r31, $r37, $r63;
        int $i0, $i1, i3;
        java.lang.IllegalStateException $r23;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r38, $r39, $r40, $r64, $r65, $r66, $r67;
        byte b2;
        java.lang.Iterable $r45, r56;
        java.util.Iterator r46, $r57;
        java.lang.Integer $r53, $r54;
        java.util.Map r69;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake;

        r1 := @parameter0: java.lang.String;

        $r44 = (java.lang.CharSequence) r1;

        $r6 = new kotlin.text.Regex;

        specialinvoke $r6.<kotlin.text.Regex: void <init>(java.lang.String)>("\r?\n");

        b2 = 0;

        $r7 = virtualinvoke $r6.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r44, b2);

        $r45 = (java.lang.Iterable) $r7;

        r46 = interfaceinvoke $r45.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        r47 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.lang.String) r47;

        $r43 = (java.lang.CharSequence) r48;

        $r42 = (java.lang.CharSequence) "Broadcast completed: result=";

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r43, $r42, 0, 2, null);

        if $z3 == 0 goto label01;

        $r49 = r47;

        goto label03;

     label02:
        $r49 = null;

     label03:
        $r8 = (java.lang.String) $r49;

        if $r8 != null goto label04;

        $r37 = new java.lang.IllegalArgumentException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r41);

        throw $r37;

     label04:
        r2 = $r8;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "Broadcast completed: result=0");

        if $z2 == 0 goto label05;

        $r36 = new androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        specialinvoke $r36.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: void <init>(int,java.lang.String,java.lang.String)>(0, null, null);

        return $r36;

     label05:
        $r9 = new kotlin.text.Regex;

        specialinvoke $r9.<kotlin.text.Regex: void <init>(java.lang.String)>("Broadcast completed: (result=.*?)(, data=\".*?\")?(, extras: .*)?");

        $r10 = (java.lang.CharSequence) r2;

        $r11 = virtualinvoke $r9.<kotlin.text.Regex: kotlin.text.MatchResult matchEntire(java.lang.CharSequence)>($r10);

        if $r11 != null goto label06;

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label06:
        r3 = $r11;

        $r12 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.text.MatchGroupCollection getGroups()>();

        $r50 = interfaceinvoke $r12.<kotlin.text.MatchGroupCollection: kotlin.text.MatchGroup get(int)>(1);

        if $r50 == null goto label07;

        r51 = virtualinvoke $r50.<kotlin.text.MatchGroup: java.lang.String getValue()>();

        if r51 == null goto label07;

        r52 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>(r51, "result=", null, 2, null);

        if r52 == null goto label07;

        $r53 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>(r52);

        goto label08;

     label07:
        $r53 = null;

     label08:
        $r54 = $r53;

        $r55 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.text.MatchGroupCollection getGroups()>();

        r56 = (java.lang.Iterable) $r55;

        z6 = 0;

        $r57 = interfaceinvoke r56.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke $r57.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label12;

        r4 = interfaceinvoke $r57.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kotlin.text.MatchGroup) r4;

        if r5 == null goto label10;

        $r30 = virtualinvoke r5.<kotlin.text.MatchGroup: java.lang.String getValue()>();

        if $r30 == null goto label10;

        $z8 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r30, ", data=", 0, 2, null);

        goto label11;

     label10:
        $z8 = 0;

     label11:
        if $z8 == 0 goto label09;

        $r58 = r4;

        goto label13;

     label12:
        $r58 = null;

     label13:
        r59 = (kotlin.text.MatchGroup) $r58;

        if r59 == null goto label14;

        r60 = virtualinvoke r59.<kotlin.text.MatchGroup: java.lang.String getValue()>();

        if r60 == null goto label14;

        r61 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>(r60, ", data=\"", null, 2, null);

        if r61 == null goto label14;

        $r62 = staticinvoke <kotlin.text.StringsKt: java.lang.String dropLast(java.lang.String,int)>(r61, 1);

        if $r62 == null goto label14;

        goto label15;

     label14:
        $r63 = new java.lang.IllegalArgumentException;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse: ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Unable to detect \'data=\' section.");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r68);

        throw $r63;

     label15:
        $r13 = r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 parseJsonMap>;

        $r14 = interfaceinvoke $r13.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r62);

        r69 = (java.util.Map) $r14;

        $r15 = new androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        $r16 = interfaceinvoke r69.<java.util.Map: java.lang.Object get(java.lang.Object)>("exitCode");

        $r17 = (java.lang.String) $r16;

        if $r17 == null goto label16;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        goto label17;

     label16:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response missing exitCode value");

        throw $r18;

     label17:
        $r19 = interfaceinvoke r69.<java.util.Map: java.lang.Object get(java.lang.Object)>("requiredVersion");

        $r20 = (java.lang.String) $r19;

        if $r20 != null goto label18;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response missing requiredVersion value");

        throw $r29;

     label18:
        $r21 = interfaceinvoke r69.<java.util.Map: java.lang.Object get(java.lang.Object)>("message");

        $r22 = (java.lang.String) $r21;

        specialinvoke $r15.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: void <init>(int,java.lang.String,java.lang.String)>($i0, $r20, $r22);

        r70 = $r15;

        i3 = virtualinvoke r70.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int getExitCode()>();

        if $r54 != null goto label19;

        goto label20;

     label19:
        $i1 = virtualinvoke $r54.<java.lang.Integer: int intValue()>();

        if $i1 == i3 goto label21;

     label20:
        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Exit code not matching broadcast exit code.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label21:
        return r70;
    }

    private final java.lang.String getDeviceAbi()
    {
        androidx.tracing.perfetto.PerfettoHandshake r0;
        java.lang.String[] r1;
        kotlin.jvm.functions.Function1 $r2, $r6;
        java.lang.Object $r3, $r8, $r10;
        java.lang.CharSequence $r4, $r12, $r13;
        java.util.List $r5, $r9;
        java.util.Collection $r7;
        java.lang.String $r11, $r14;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake;

        $r2 = r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 executeShellCommand>;

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>("getprop ro.product.cpu.abilist");

        $r4 = (java.lang.CharSequence) $r3;

        r1 = newarray (java.lang.String)[1];

        r1[0] = ",";

        $r5 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r4, r1, 0, 0, 6, null);

        $r7 = (java.util.Collection) $r5;

        $r6 = r0.<androidx.tracing.perfetto.PerfettoHandshake: kotlin.jvm.functions.Function1 executeShellCommand>;

        $r8 = interfaceinvoke $r6.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>("getprop ro.product.cpu.abi");

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r7, $r8);

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r9);

        $r11 = (java.lang.String) $r10;

        $r12 = (java.lang.CharSequence) $r11;

        $r13 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        return $r14;
    }

androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse
<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int exitCode>
<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String requiredVersion>
<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String message>
    public void <init>(int, java.lang.String, java.lang.String)
    {
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r0;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int exitCode> = i0;

        r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String requiredVersion> = r1;

        r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String message> = r2;

        return;
    }

    public final int getExitCode()
    {
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r0;
        int $i0;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        $i0 = r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int exitCode>;

        return $i0;
    }

    public final java.lang.String getRequiredVersion()
    {
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r0;
        java.lang.String $r1;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        $r1 = r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String requiredVersion>;

        return $r1;
    }

    public final java.lang.String getMessage()
    {
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r0;
        java.lang.String $r1;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        $r1 = r0.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String message>;

        return $r1;
    }

androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResultCode
androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider
<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File libraryZip>
<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File tempDirectory>
<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: kotlin.jvm.functions.Function2 moveTempDirectoryFileToDestination>
    public void <init>(java.io.File, java.io.File, kotlin.jvm.functions.Function2)
    {
        androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider r0;
        java.io.File r1, r2;
        kotlin.jvm.functions.Function2 r3;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "libraryZip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tempDirectory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "moveTempDirectoryFileToDestination");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File libraryZip> = r1;

        r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File tempDirectory> = r2;

        r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: kotlin.jvm.functions.Function2 moveTempDirectoryFileToDestination> = r3;

        return;
    }

    public final java.lang.String pushLibrary$tracing_perfetto_common(java.lang.String, java.lang.String)
    {
        androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider r0;
        java.lang.String r1, r2, $r16, $r20, $r25, $r32, $r42, $r49, $r52, $r53;
        java.io.File r3, r4, r5, r6, $r11, $r22, $r34, $r48;
        kotlin.text.Regex r7, $r26;
        java.util.zip.ZipFile r8, $r33;
        java.util.zip.ZipEntry r9, $r37, r62;
        java.io.Closeable r10, r65;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r23, $r24, $r27, $r28, $r29, $r30, $r31, $r44, $r45, $r46, $r47, $r50, $r51;
        java.util.Enumeration $r35;
        java.util.Iterator $r36, $r60;
        boolean $z0, $z1;
        java.io.InputStream $r38, $r64;
        java.io.FileOutputStream $r39, $r66;
        java.io.OutputStream $r40;
        kotlin.jvm.functions.Function2 $r41;
        java.lang.IllegalStateException $r43;
        java.lang.CharSequence $r54;
        java.lang.Throwable $r55, $r56, $r57, $r58, r68;
        kotlin.sequences.Sequence $r59;
        java.lang.Object r61, $r63;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "targetPackage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "abi");

        $r11 = new java.io.File;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/sdcard/Android/media/");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/files");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r16);

        r3 = $r11;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib/");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r3, $r20);

        r5 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r4, "libtracing_perfetto.so");

        $r22 = r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File tempDirectory>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp_");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("libtracing_perfetto.so");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r22, $r25);

        $r26 = new kotlin.text.Regex;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*(lib|jni)/[^/]*");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[^/]*/");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("libtracing_perfetto.so");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<kotlin.text.Regex: void <init>(java.lang.String)>($r32);

        r7 = $r26;

        $r33 = new java.util.zip.ZipFile;

        $r34 = r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File libraryZip>;

        specialinvoke $r33.<java.util.zip.ZipFile: void <init>(java.io.File)>($r34);

        r8 = $r33;

        $r35 = virtualinvoke r8.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r35, "zipFile\n                .entries()");

        $r36 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Iterator iterator(java.util.Enumeration)>($r35);

        $r59 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)>($r36);

        $r60 = interfaceinvoke $r59.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r60.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        r61 = interfaceinvoke $r60.<java.util.Iterator: java.lang.Object next()>();

        r62 = (java.util.zip.ZipEntry) r61;

        $r53 = virtualinvoke r62.<java.util.zip.ZipEntry: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r53, "it.name");

        $r54 = (java.lang.CharSequence) $r53;

        $z1 = virtualinvoke r7.<kotlin.text.Regex: boolean matches(java.lang.CharSequence)>($r54);

        if $z1 == 0 goto label01;

        $r63 = r61;

        goto label03;

     label02:
        $r63 = null;

     label03:
        $r37 = (java.util.zip.ZipEntry) $r63;

        if $r37 != null goto label04;

        $r43 = new java.lang.IllegalStateException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("libtracing_perfetto.so");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to enable Perfetto SDK. Tried inside ");

        $r48 = r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: java.io.File libraryZip>;

        $r49 = virtualinvoke $r48.<java.io.File: java.lang.String getPath()>();

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r52);

        throw $r43;

     label04:
        r9 = $r37;

        $r38 = virtualinvoke r8.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r9);

        r10 = (java.io.Closeable) $r38;

     label05:
        $r64 = (java.io.InputStream) r10;

        $r39 = new java.io.FileOutputStream;

        specialinvoke $r39.<java.io.FileOutputStream: void <init>(java.io.File)>(r6);

        r65 = (java.io.Closeable) $r39;

     label06:
        $r66 = (java.io.FileOutputStream) r65;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r64, "inputStream");

        $r40 = (java.io.OutputStream) $r66;

        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo$default(java.io.InputStream,java.io.OutputStream,int,int,java.lang.Object)>($r64, $r40, 0, 2, null);

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r65, null);

        goto label11;

     label08:
        $r58 := @caughtexception;

        r68 = $r58;

        throw $r58;

     label09:
        $r57 := @caughtexception;

     label10:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r65, r68);

        throw $r57;

     label11:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r10, null);

        goto label15;

     label12:
        $r56 := @caughtexception;

        throw $r56;

     label13:
        $r55 := @caughtexception;

     label14:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r10, $r56);

        throw $r55;

     label15:
        $r41 = r0.<androidx.tracing.perfetto.PerfettoHandshake$ExternalLibraryProvider: kotlin.jvm.functions.Function2 moveTempDirectoryFileToDestination>;

        interfaceinvoke $r41.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r6, r5);

        $r42 = virtualinvoke r5.<java.io.File: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r42, "dstFile.path");

        return $r42;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

androidx.tracing.perfetto.PerfettoHandshake$RequestKeys
<androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: androidx.tracing.perfetto.PerfettoHandshake$RequestKeys INSTANCE>
<androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: java.lang.String RECEIVER_CLASS_NAME>
<androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: java.lang.String ACTION_ENABLE_TRACING>
<androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: java.lang.String KEY_PATH>
    private void <init>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$RequestKeys r0;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$RequestKeys;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$RequestKeys $r0;

        $r0 = new androidx.tracing.perfetto.PerfettoHandshake$RequestKeys;

        specialinvoke $r0.<androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: void <init>()>();

        <androidx.tracing.perfetto.PerfettoHandshake$RequestKeys: androidx.tracing.perfetto.PerfettoHandshake$RequestKeys INSTANCE> = $r0;

        return;
    }

androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes INSTANCE>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_CANCELLED>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_SUCCESS>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_ALREADY_ENABLED>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_ERROR_BINARY_MISSING>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_ERROR_BINARY_VERSION_MISMATCH>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_ERROR_BINARY_VERIFICATION_ERROR>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: int RESULT_CODE_ERROR_OTHER>
    private void <init>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes r0;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes $r0;

        $r0 = new androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes;

        specialinvoke $r0.<androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: void <init>()>();

        <androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes: androidx.tracing.perfetto.PerfettoHandshake$ResponseExitCodes INSTANCE> = $r0;

        return;
    }

androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys
<androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys INSTANCE>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: java.lang.String KEY_EXIT_CODE>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: java.lang.String KEY_REQUIRED_VERSION>
<androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: java.lang.String KEY_MESSAGE>
    private void <init>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys r0;

        r0 := @this: androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys $r0;

        $r0 = new androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys;

        specialinvoke $r0.<androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: void <init>()>();

        <androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys: androidx.tracing.perfetto.PerfettoHandshake$ResponseKeys INSTANCE> = $r0;

        return;
    }

