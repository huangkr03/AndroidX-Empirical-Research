androidx.media3.extractor.mp4.Mp4Extractor
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorsFactory FACTORY>
<androidx.media3.extractor.mp4.Mp4Extractor: int FLAG_WORKAROUND_IGNORE_EDIT_LISTS>
<androidx.media3.extractor.mp4.Mp4Extractor: int FLAG_READ_MOTION_PHOTO_METADATA>
<androidx.media3.extractor.mp4.Mp4Extractor: int FLAG_READ_SEF_DATA>
<androidx.media3.extractor.mp4.Mp4Extractor: int STATE_READING_ATOM_HEADER>
<androidx.media3.extractor.mp4.Mp4Extractor: int STATE_READING_ATOM_PAYLOAD>
<androidx.media3.extractor.mp4.Mp4Extractor: int STATE_READING_SAMPLE>
<androidx.media3.extractor.mp4.Mp4Extractor: int STATE_READING_SEF>
<androidx.media3.extractor.mp4.Mp4Extractor: int FILE_TYPE_MP4>
<androidx.media3.extractor.mp4.Mp4Extractor: int FILE_TYPE_QUICKTIME>
<androidx.media3.extractor.mp4.Mp4Extractor: int FILE_TYPE_HEIC>
<androidx.media3.extractor.mp4.Mp4Extractor: long RELOAD_MINIMUM_SEEK_DISTANCE>
<androidx.media3.extractor.mp4.Mp4Extractor: long MAXIMUM_READ_AHEAD_BYTES_STREAM>
<androidx.media3.extractor.mp4.Mp4Extractor: int flags>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalLength>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>
<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.SefReader sefReader>
<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries>
<androidx.media3.extractor.mp4.Mp4Extractor: int parserState>
<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>
<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>
<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomData>
<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex>
<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead>
<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>
<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>
<androidx.media3.extractor.mp4.Mp4Extractor: long[][] accumulatedSampleSizes>
<androidx.media3.extractor.mp4.Mp4Extractor: int firstVideoTrackIndex>
<androidx.media3.extractor.mp4.Mp4Extractor: long durationUs>
<androidx.media3.extractor.mp4.Mp4Extractor: int fileType>
<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata motionPhotoMetadata>
    public void <init>()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        int i0, $i1;
        androidx.media3.extractor.mp4.SefReader $r1;
        java.util.ArrayList $r2;
        androidx.media3.common.util.ParsableByteArray $r3, $r5, $r7, $r8;
        java.util.ArrayDeque $r4;
        byte[] $r6;
        androidx.media3.extractor.ExtractorOutput $r9;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] $r10;
        byte $b2;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int flags> = i0;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        $b2 = 3;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState> = $b2;

        $r1 = new androidx.media3.extractor.mp4.SefReader;

        specialinvoke $r1.<androidx.media3.extractor.mp4.SefReader: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.SefReader sefReader> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries> = $r2;

        $r3 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r3.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(16);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms> = $r4;

        $r5 = new androidx.media3.common.util.ParsableByteArray;

        $r6 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r6);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode> = $r5;

        $r7 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(4);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalLength> = $r7;

        $r8 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch> = $r8;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex> = -1;

        $r9 = <androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.ExtractorOutput PLACEHOLDER>;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput> = $r9;

        $r10 = newarray (androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track)[0];

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks> = $r10;

        return;
    }

    public boolean sniff(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $i0 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z0 = staticinvoke <androidx.media3.extractor.mp4.Sniffer: boolean sniffUnfragmented(androidx.media3.extractor.ExtractorInput,boolean)>(r1, $z1);

        return $z0;
    }

    public void init(androidx.media3.extractor.ExtractorOutput)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorOutput r1;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput> = r1;

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0, l1;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] r1;
        int i2, $i4, i5;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r2;
        java.util.ArrayDeque $r3;
        byte $b3;
        androidx.media3.extractor.TrueHdSampleRechunker $r4, $r5;
        androidx.media3.extractor.mp4.SefReader $r6;
        java.util.List $r7;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex> = -1;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining> = 0;

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label2;

        $i4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState>;

        if $i4 == 3 goto label1;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void enterReadingAtomHeaderState()>();

        goto label5;

     label1:
        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.SefReader sefReader>;

        virtualinvoke $r6.<androidx.media3.extractor.mp4.SefReader: void reset()>();

        $r7 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        goto label5;

     label2:
        r1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        i2 = lengthof r1;

        i5 = 0;

     label3:
        if i5 >= i2 goto label5;

        r2 = r1[i5];

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void updateSampleIndex(androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track,long)>(r2, l1);

        $r4 = r2.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        if $r4 == null goto label4;

        $r5 = r2.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        virtualinvoke $r5.<androidx.media3.extractor.TrueHdSampleRechunker: void reset()>();

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        return;
    }

    public void release()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        return;
    }

    public int read(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

     label1:
        $i2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState>;

        tableswitch($i2)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        $z1 = specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: boolean readAtomHeader(androidx.media3.extractor.ExtractorInput)>(r1);

        if $z1 != 0 goto label1;

        return -1;

     label3:
        $z0 = specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: boolean readAtomPayload(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label4:
        $i1 = specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: int readSample(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r1, r2);

        return $i1;

     label5:
        $i0 = specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: int readSefData(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r1, r2);

        return $i0;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public boolean isSeekable()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        return 1;
    }

    public long getDurationUs()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long $l0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        $l0 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long durationUs>;

        return $l0;
    }

    public androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0;
        androidx.media3.extractor.SeekMap$SeekPoints $r1;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long,int)>(l0, -1);

        return $r1;
    }

    public androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long, int)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0, l3, l13, l14, l17, l18;
        int i1, i2, i4, $i5, $i7, $i8, $i11, $i12, $i15, i16, i19;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] $r1, $r6, $r7, $r9;
        androidx.media3.extractor.SeekPoint $r2, $r3, $r16, $r18, r21, r22;
        byte $b6, $b9, $b10;
        androidx.media3.extractor.SeekMap$SeekPoints $r4, $r5, $r15, $r17;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track $r8, $r10;
        long[] $r11, $r12, $r13, $r14;
        androidx.media3.extractor.mp4.TrackSampleTable r19, r20;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $i5 = lengthof $r1;

        if $i5 != 0 goto label01;

        $r17 = new androidx.media3.extractor.SeekMap$SeekPoints;

        $r18 = <androidx.media3.extractor.SeekPoint: androidx.media3.extractor.SeekPoint START>;

        specialinvoke $r17.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint)>($r18);

        return $r17;

     label01:
        l13 = -9223372036854775807L;

        l14 = -1L;

        if i1 == -1 goto label02;

        $i15 = i1;

        goto label03;

     label02:
        $i15 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int firstVideoTrackIndex>;

     label03:
        i2 = $i15;

        if i2 == -1 goto label06;

        $r9 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $r10 = $r9[i2];

        r19 = $r10.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        i16 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: int getSynchronizationSampleIndex(androidx.media3.extractor.mp4.TrackSampleTable,long)>(r19, l0);

        if i16 != -1 goto label04;

        $r15 = new androidx.media3.extractor.SeekMap$SeekPoints;

        $r16 = <androidx.media3.extractor.SeekPoint: androidx.media3.extractor.SeekPoint START>;

        specialinvoke $r15.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint)>($r16);

        return $r15;

     label04:
        $r11 = r19.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        l3 = $r11[i16];

        l17 = l3;

        $r12 = r19.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        l18 = $r12[i16];

        $b10 = l3 cmp l0;

        if $b10 >= 0 goto label05;

        $i11 = r19.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        $i12 = $i11 - 1;

        if i16 >= $i12 goto label05;

        i4 = virtualinvoke r19.<androidx.media3.extractor.mp4.TrackSampleTable: int getIndexOfLaterOrEqualSynchronizationSample(long)>(l0);

        if i4 == -1 goto label05;

        if i4 == i16 goto label05;

        $r13 = r19.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        l13 = $r13[i4];

        $r14 = r19.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        l14 = $r14[i4];

     label05:
        goto label07;

     label06:
        l17 = l0;

        l18 = 9223372036854775807L;

     label07:
        if i1 != -1 goto label10;

        i19 = 0;

     label08:
        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $i7 = lengthof $r6;

        if i19 >= $i7 goto label10;

        $i8 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int firstVideoTrackIndex>;

        if i19 == $i8 goto label09;

        $r7 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $r8 = $r7[i19];

        r20 = $r8.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        l18 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: long maybeAdjustSeekOffset(androidx.media3.extractor.mp4.TrackSampleTable,long,long)>(r20, l17, l18);

        $b9 = l13 cmp -9223372036854775807L;

        if $b9 == 0 goto label09;

        l14 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: long maybeAdjustSeekOffset(androidx.media3.extractor.mp4.TrackSampleTable,long,long)>(r20, l13, l14);

     label09:
        i19 = i19 + 1;

        goto label08;

     label10:
        $r2 = new androidx.media3.extractor.SeekPoint;

        specialinvoke $r2.<androidx.media3.extractor.SeekPoint: void <init>(long,long)>(l17, l18);

        r21 = $r2;

        $b6 = l13 cmp -9223372036854775807L;

        if $b6 != 0 goto label11;

        $r5 = new androidx.media3.extractor.SeekMap$SeekPoints;

        specialinvoke $r5.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint)>(r21);

        return $r5;

     label11:
        $r3 = new androidx.media3.extractor.SeekPoint;

        specialinvoke $r3.<androidx.media3.extractor.SeekPoint: void <init>(long,long)>(l13, l14);

        r22 = $r3;

        $r4 = new androidx.media3.extractor.SeekMap$SeekPoints;

        specialinvoke $r4.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint,androidx.media3.extractor.SeekPoint)>(r21, r22);

        return $r4;
    }

    private void enterReadingAtomHeaderState()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead> = 0;

        return;
    }

    private boolean readAtomHeader(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r2, r21;
        int $i0, $i5, $i6, $i8, $i11, $i15, $i18, $i21, $i25, $i28, $i32, $i33, $i36, $i41, $i45, $i47;
        long $l1, $l3, $l7, $l9, $l10, $l12, $l14, $l16, $l17, $l19, $l20, $l22, $l23, $l27, $l29, $l30, $l31, $l34, $l35, l38, $l40, $l42, l44, $l46, $l48;
        byte $b2, $b4, $b13, $b24, $b26, b37, $b39, $b43, $b49;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.media3.common.util.ParsableByteArray $r4, $r10, $r12, $r13, $r15, $r16, $r17, r20, r22;
        byte[] $r5, $r6, $r11, $r14;
        androidx.media3.common.ParserException $r7;
        java.util.ArrayDeque $r8, $r18;
        java.lang.Object $r9;
        java.lang.Throwable r23;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $i0 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        if $i0 != 0 goto label02;

        $r13 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r14 = virtualinvoke $r13.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $z2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: boolean readFully(byte[],int,int,boolean)>($r14, 0, 8, 1);

        if $z2 != 0 goto label01;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void processEndOfStreamReadingAtomHeader()>();

        return 0;

     label01:
        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead> = 8;

        $r15 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        virtualinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r16 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $l35 = virtualinvoke $r16.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize> = $l35;

        $r17 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $i36 = virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType> = $i36;

     label02:
        $l1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $b2 = $l1 cmp 1L;

        if $b2 != 0 goto label03;

        b37 = 8;

        $r10 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r11 = virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r11, 8, b37);

        $i32 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $i33 = $i32 + b37;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead> = $i33;

        $r12 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $l34 = virtualinvoke $r12.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize> = $l34;

        goto label05;

     label03:
        $l3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label05;

        l38 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        $b26 = l38 cmp -1L;

        if $b26 != 0 goto label04;

        $r8 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r9 = virtualinvoke $r8.<java.util.ArrayDeque: java.lang.Object peek()>();

        r2 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r9;

        if r2 == null goto label04;

        l38 = r2.<androidx.media3.extractor.mp4.Atom$ContainerAtom: long endPosition>;

     label04:
        $b39 = l38 cmp -1L;

        if $b39 == 0 goto label05;

        $l27 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l30 = l38 - $l27;

        $i28 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l29 = (long) $i28;

        $l31 = $l30 + $l29;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize> = $l31;

     label05:
        $l40 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i41 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l42 = (long) $i41;

        $b43 = $l40 cmp $l42;

        if $b43 >= 0 goto label06;

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Atom size less than header length (unsupported).");

        r23 = (java.lang.Throwable) $r7;

        throw r23;

     label06:
        $i5 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        $z0 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: boolean shouldParseContainerAtom(int)>($i5);

        if $z0 == 0 goto label10;

        $l16 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l17 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $l20 = $l16 + $l17;

        $i18 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l19 = (long) $i18;

        l44 = $l20 - $l19;

        $l23 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i21 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l22 = (long) $i21;

        $b24 = $l23 cmp $l22;

        if $b24 == 0 goto label07;

        $i25 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        if $i25 != 1835365473 goto label07;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void maybeSkipRemainingMetaAtomHeaderBytes(androidx.media3.extractor.ExtractorInput)>(r1);

     label07:
        $r18 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        r21 = new androidx.media3.extractor.mp4.Atom$ContainerAtom;

        $i45 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        specialinvoke r21.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void <init>(int,long)>($i45, l44);

        virtualinvoke $r18.<java.util.ArrayDeque: void push(java.lang.Object)>(r21);

        $l46 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i47 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l48 = (long) $i47;

        $b49 = $l46 cmp $l48;

        if $b49 != 0 goto label08;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void processAtomEnded(long)>(l44);

        goto label09;

     label08:
        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void enterReadingAtomHeaderState()>();

     label09:
        goto label16;

     label10:
        $i6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        $z1 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: boolean shouldParseLeafAtom(int)>($i6);

        if $z1 == 0 goto label15;

        $i11 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        if $i11 != 8 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z3);

        $l12 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $b13 = $l12 cmp 2147483647L;

        if $b13 > 0 goto label13;

        $z4 = 1;

        goto label14;

     label13:
        $z4 = 0;

     label14:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z4);

        r22 = new androidx.media3.common.util.ParsableByteArray;

        $l14 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i15 = (int) $l14;

        specialinvoke r22.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>($i15);

        r20 = r22;

        $r4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r5 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r6 = virtualinvoke r20.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 0, 8);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomData> = r20;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState> = 1;

        goto label16;

     label15:
        $l7 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $i8 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l9 = (long) $i8;

        $l10 = $l7 - $l9;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void processUnparsedAtom(long)>($l10);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomData> = null;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState> = 1;

     label16:
        return 1;
    }

    private boolean readAtomPayload(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        long l0, l1, $l3, $l4, $l5, $l7, $l8;
        androidx.media3.common.util.ParsableByteArray r3;
        int $i2, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        byte $b6;
        byte[] $r4;
        java.util.ArrayDeque $r5, $r6;
        boolean $z0, z1, $z2;
        java.lang.Object $r7;
        androidx.media3.extractor.mp4.Atom$LeafAtom $r8;
        androidx.media3.extractor.mp4.Atom$ContainerAtom $r9;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

        $l4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l3 = (long) $i2;

        l0 = $l4 - $l3;

        $l5 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        l1 = $l5 + l0;

        z1 = 0;

        r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray atomData>;

        if r3 == null goto label2;

        $r4 = virtualinvoke r3.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i12 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $i11 = (int) l0;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r4, $i12, $i11);

        $i13 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        if $i13 != 1718909296 goto label1;

        $i15 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: int processFtypAtom(androidx.media3.common.util.ParsableByteArray)>(r3);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int fileType> = $i15;

        goto label4;

     label1:
        $r5 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z0 = virtualinvoke $r5.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r7 = virtualinvoke $r6.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r9 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r7;

        $r8 = new androidx.media3.extractor.mp4.Atom$LeafAtom;

        $i14 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        specialinvoke $r8.<androidx.media3.extractor.mp4.Atom$LeafAtom: void <init>(int,androidx.media3.common.util.ParsableByteArray)>($i14, r3);

        virtualinvoke $r9.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void add(androidx.media3.extractor.mp4.Atom$LeafAtom)>($r8);

        goto label4;

     label2:
        $b6 = l0 cmp 262144L;

        if $b6 >= 0 goto label3;

        $i10 = (int) l0;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i10);

        goto label4;

     label3:
        $l7 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l8 = $l7 + l0;

        r2.<androidx.media3.extractor.PositionHolder: long position> = $l8;

        z1 = 1;

     label4:
        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void processAtomEnded(long)>(l1);

        if z1 == 0 goto label5;

        $i9 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState>;

        if $i9 == 2 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private int readSefData(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        int i0;
        java.util.List $r3;
        androidx.media3.extractor.mp4.SefReader $r4;
        long $l1;
        byte $b2;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

        $r4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.SefReader sefReader>;

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries>;

        i0 = virtualinvoke $r4.<androidx.media3.extractor.mp4.SefReader: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder,java.util.List)>(r1, r2, $r3);

        if i0 != 1 goto label1;

        $l1 = r2.<androidx.media3.extractor.PositionHolder: long position>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void enterReadingAtomHeaderState()>();

     label1:
        return i0;
    }

    private void processAtomEnded(long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0, $l2;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r1, $r5, $r11;
        java.util.ArrayDeque $r2, $r3, $r6, $r8, $r9, $r12;
        boolean $z0, $z1;
        int $i1, $i4;
        java.lang.Object $r4, $r7, $r10;
        byte $b3;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z0 = virtualinvoke $r2.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r5 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r4;

        $l2 = $r5.<androidx.media3.extractor.mp4.Atom$ContainerAtom: long endPosition>;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label4;

        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r7 = virtualinvoke $r6.<java.util.ArrayDeque: java.lang.Object pop()>();

        r1 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r7;

        $i4 = r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: int type>;

        if $i4 != 1836019574 goto label2;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void processMoovAtom(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r1);

        $r12 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        virtualinvoke $r12.<java.util.ArrayDeque: void clear()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState> = 2;

        goto label3;

     label2:
        $r8 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z1 = virtualinvoke $r8.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r9 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r10 = virtualinvoke $r9.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r11 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r10;

        virtualinvoke $r11.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void add(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r1);

     label3:
        goto label1;

     label4:
        $i1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int parserState>;

        if $i1 == 2 goto label5;

        specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: void enterReadingAtomHeaderState()>();

     label5:
        return;
    }

    private void processMoovAtom(androidx.media3.extractor.mp4.Atom$ContainerAtom) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r1, r5;
        java.util.ArrayList r2, $r11;
        boolean z0, z1, $z2, $z5, $z6, $z7;
        androidx.media3.extractor.GaplessInfoHolder r3, $r12;
        androidx.media3.extractor.mp4.Atom$LeafAtom r4;
        java.util.List r6, $r30, $r44;
        int i0, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i13, $i15, $i16, $i17, i18, i20, i22, $i23;
        androidx.media3.extractor.mp4.TrackSampleTable r7;
        androidx.media3.extractor.mp4.Track r8;
        long l1, $l6, l19, $l21;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r9, $r22;
        androidx.media3.common.Format$Builder r10;
        float f0, $f1, $f2, $f3;
        com.google.common.base.Function $r13;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] $r14, $r16, $r17;
        java.lang.Object[] $r15;
        long[][] $r18;
        androidx.media3.extractor.ExtractorOutput $r19, $r20, $r23;
        java.lang.Object $r21, $r37, $r38;
        byte $b7, $b14;
        androidx.media3.extractor.TrackOutput $r24, $r31;
        androidx.media3.common.Format $r25, $r28, $r32;
        java.lang.String $r26, $r27;
        androidx.media3.common.Metadata $r33, $r34, r39, r40, r42, $r45;
        android.util.Pair r41;
        androidx.media3.common.Metadata[] $r43;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        i18 = -1;

        l19 = -9223372036854775807L;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r2 = $r11;

        r39 = null;

        r40 = null;

        $i2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int fileType>;

        if $i2 != 1 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        $r12 = new androidx.media3.extractor.GaplessInfoHolder;

        specialinvoke $r12.<androidx.media3.extractor.GaplessInfoHolder: void <init>()>();

        r3 = $r12;

        r4 = virtualinvoke r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1969517665);

        if r4 == null goto label03;

        r41 = staticinvoke <androidx.media3.extractor.mp4.AtomParsers: android.util.Pair parseUdta(androidx.media3.extractor.mp4.Atom$LeafAtom)>(r4);

        $r37 = r41.<android.util.Pair: java.lang.Object first>;

        r39 = (androidx.media3.common.Metadata) $r37;

        $r38 = r41.<android.util.Pair: java.lang.Object second>;

        r40 = (androidx.media3.common.Metadata) $r38;

        if r39 == null goto label03;

        virtualinvoke r3.<androidx.media3.extractor.GaplessInfoHolder: boolean setFromMetadata(androidx.media3.common.Metadata)>(r39);

     label03:
        r42 = null;

        r5 = virtualinvoke r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$ContainerAtom getContainerAtomOfType(int)>(1835365473);

        if r5 == null goto label04;

        r42 = staticinvoke <androidx.media3.extractor.mp4.AtomParsers: androidx.media3.common.Metadata parseMdtaFromMeta(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r5);

     label04:
        $i3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int flags>;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z1 = $z6;

        $r13 = dynamicinvoke "apply" <com.google.common.base.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Track lambda$processMoovAtom$1(androidx.media3.extractor.mp4.Track)>, methodtype: androidx.media3.extractor.mp4.Track __METHODTYPE__(androidx.media3.extractor.mp4.Track));

        r6 = staticinvoke <androidx.media3.extractor.mp4.AtomParsers: java.util.List parseTraks(androidx.media3.extractor.mp4.Atom$ContainerAtom,androidx.media3.extractor.GaplessInfoHolder,long,androidx.media3.common.DrmInitData,boolean,boolean,com.google.common.base.Function)>(r1, r3, -9223372036854775807L, null, z1, z0, $r13);

        i0 = interfaceinvoke r6.<java.util.List: int size()>();

        i20 = 0;

     label07:
        if i20 >= i0 goto label18;

        $r21 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i20);

        r7 = (androidx.media3.extractor.mp4.TrackSampleTable) $r21;

        $i5 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        if $i5 != 0 goto label08;

        goto label17;

     label08:
        r8 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $l6 = r8.<androidx.media3.extractor.mp4.Track: long durationUs>;

        $b7 = $l6 cmp -9223372036854775807L;

        if $b7 == 0 goto label09;

        $l21 = r8.<androidx.media3.extractor.mp4.Track: long durationUs>;

        goto label10;

     label09:
        $l21 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: long durationUs>;

     label10:
        l1 = $l21;

        l19 = staticinvoke <java.lang.Math: long max(long,long)>(l19, l1);

        $r22 = new androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track;

        $r23 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $i8 = r8.<androidx.media3.extractor.mp4.Track: int type>;

        $r24 = interfaceinvoke $r23.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i20, $i8);

        specialinvoke $r22.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: void <init>(androidx.media3.extractor.mp4.Track,androidx.media3.extractor.mp4.TrackSampleTable,androidx.media3.extractor.TrackOutput)>(r8, r7, $r24);

        r9 = $r22;

        $r27 = "audio/true-hd";

        $r25 = r8.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r26 = $r25.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z2 == 0 goto label11;

        $i17 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: int maximumSize>;

        i22 = $i17 * 16;

        goto label12;

     label11:
        $i9 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: int maximumSize>;

        i22 = $i9 + 30;

     label12:
        $r28 = r8.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        r10 = virtualinvoke $r28.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        virtualinvoke r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setMaxInputSize(int)>(i22);

        $i10 = r8.<androidx.media3.extractor.mp4.Track: int type>;

        if $i10 != 2 goto label13;

        $b14 = l1 cmp 0L;

        if $b14 <= 0 goto label13;

        $i15 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        if $i15 <= 1 goto label13;

        $i16 = r7.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        $f3 = (float) $i16;

        $f1 = (float) l1;

        $f2 = $f1 / 1000000.0F;

        f0 = $f3 / $f2;

        virtualinvoke r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setFrameRate(float)>(f0);

     label13:
        $i23 = r8.<androidx.media3.extractor.mp4.Track: int type>;

        staticinvoke <androidx.media3.extractor.mp4.MetadataUtil: void setFormatGaplessInfo(int,androidx.media3.extractor.GaplessInfoHolder,androidx.media3.common.Format$Builder)>($i23, r3, r10);

        $i11 = r8.<androidx.media3.extractor.mp4.Track: int type>;

        $r33 = r39;

        $r34 = r42;

        $r43 = newarray (androidx.media3.common.Metadata)[2];

        $r43[0] = r40;

        $r44 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries>;

        $z7 = interfaceinvoke $r44.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label14;

        $r45 = null;

        goto label15;

     label14:
        $r45 = new androidx.media3.common.Metadata;

        $r30 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: java.util.List slowMotionMetadataEntries>;

        specialinvoke $r45.<androidx.media3.common.Metadata: void <init>(java.util.List)>($r30);

     label15:
        $r43[1] = $r45;

        staticinvoke <androidx.media3.extractor.mp4.MetadataUtil: void setFormatMetadata(int,androidx.media3.common.Metadata,androidx.media3.common.Metadata,androidx.media3.common.Format$Builder,androidx.media3.common.Metadata[])>($i11, $r33, $r34, r10, $r43);

        $r31 = r9.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrackOutput trackOutput>;

        $r32 = virtualinvoke r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        interfaceinvoke $r31.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r32);

        $i13 = r8.<androidx.media3.extractor.mp4.Track: int type>;

        if $i13 != 2 goto label16;

        if i18 != -1 goto label16;

        i18 = interfaceinvoke r2.<java.util.List: int size()>();

     label16:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r9);

     label17:
        i20 = i20 + 1;

        goto label07;

     label18:
        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int firstVideoTrackIndex> = i18;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: long durationUs> = l19;

        $r14 = newarray (androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track)[0];

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[]) $r15;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks> = $r16;

        $r17 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $r18 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: long[][] calculateAccumulatedSampleSizes(androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[])>($r17);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: long[][] accumulatedSampleSizes> = $r18;

        $r19 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r19.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

        $r20 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r20.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>(r0);

        return;
    }

    private int readSample(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        long l0, l2, $l7, $l8, l43, l50;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r3;
        androidx.media3.extractor.TrackOutput r4;
        int i1, i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i44, $i45, i46, i47, $i48, i49, i51, $i52, $i53;
        androidx.media3.extractor.TrueHdSampleRechunker r5;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] $r6;
        androidx.media3.extractor.mp4.TrackSampleTable $r7, $r9, $r17, $r19, $r21;
        long[] $r8, $r18;
        int[] $r10, $r20;
        byte $b9, $b10;
        androidx.media3.extractor.mp4.Track $r11, $r12, $r13, $r25, $r26;
        androidx.media3.common.Format $r14;
        java.lang.String $r15, $r16;
        boolean $z0;
        androidx.media3.common.util.ParsableByteArray $r22, $r23, $r24, $r27, $r28, $r29, $r30;
        androidx.media3.common.ParserException $r31;
        byte[] r32;
        java.lang.Throwable r34;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

        l0 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $i4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex>;

        if $i4 != -1 goto label01;

        $i40 = specialinvoke r0.<androidx.media3.extractor.mp4.Mp4Extractor: int getTrackIndexOfNextReadSample(long)>(l0);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex> = $i40;

        $i41 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex>;

        if $i41 != -1 goto label01;

        return -1;

     label01:
        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $i5 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex>;

        r3 = $r6[$i5];

        r4 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrackOutput trackOutput>;

        i1 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex>;

        $r7 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r8 = $r7.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        l2 = $r8[i1];

        $r9 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r10 = $r9.<androidx.media3.extractor.mp4.TrackSampleTable: int[] sizes>;

        i42 = $r10[i1];

        r5 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        $l8 = l2 - l0;

        $i6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead>;

        $l7 = (long) $i6;

        l43 = $l8 + $l7;

        $b9 = l43 cmp 0L;

        if $b9 < 0 goto label02;

        $b10 = l43 cmp 262144L;

        if $b10 < 0 goto label03;

     label02:
        r2.<androidx.media3.extractor.PositionHolder: long position> = l2;

        return 1;

     label03:
        $r11 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>;

        $i11 = $r11.<androidx.media3.extractor.mp4.Track: int sampleTransformation>;

        if $i11 != 1 goto label04;

        l43 = l43 + 8L;

        i42 = i42 + -8;

     label04:
        $i12 = (int) l43;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i12);

        $r12 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>;

        $i13 = $r12.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        if $i13 == 0 goto label09;

        $r24 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        r32 = virtualinvoke $r24.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r32[0] = 0;

        r32[1] = 0;

        r32[2] = 0;

        $r25 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>;

        i3 = $r25.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        $r26 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>;

        $i27 = $r26.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        i44 = 4 - $i27;

     label05:
        $i45 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        if $i45 >= i42 goto label08;

        $i28 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining>;

        if $i28 != 0 goto label07;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>(r32, i44, i3);

        $i36 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead>;

        $i37 = $i36 + i3;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead> = $i37;

        $r27 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        virtualinvoke $r27.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r28 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        i46 = virtualinvoke $r28.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if i46 >= 0 goto label06;

        $r31 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Invalid NAL length", null);

        r34 = (java.lang.Throwable) $r31;

        throw r34;

     label06:
        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining> = i46;

        $r29 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        virtualinvoke $r29.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r30 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        interfaceinvoke r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r30, 4);

        $i38 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        $i39 = $i38 + 4;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = $i39;

        i42 = i42 + i44;

        goto label05;

     label07:
        $i29 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining>;

        i47 = interfaceinvoke r4.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, $i29, 0);

        $i30 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead>;

        $i31 = $i30 + i47;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead> = $i31;

        $i32 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        $i33 = $i32 + i47;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = $i33;

        $i34 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining>;

        $i35 = $i34 - i47;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining> = $i35;

        goto label05;

     label08:
        goto label13;

     label09:
        $r16 = "audio/ac4";

        $r13 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>;

        $r14 = $r13.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r15 = $r14.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label11;

        $i24 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        if $i24 != 0 goto label10;

        $r22 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        staticinvoke <androidx.media3.extractor.Ac4Util: void getAc4SampleHeader(int,androidx.media3.common.util.ParsableByteArray)>(i42, $r22);

        $r23 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        interfaceinvoke r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r23, 7);

        $i25 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        $i26 = $i25 + 7;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = $i26;

     label10:
        i42 = i42 + 7;

        goto label12;

     label11:
        if r5 == null goto label12;

        virtualinvoke r5.<androidx.media3.extractor.TrueHdSampleRechunker: void startSample(androidx.media3.extractor.ExtractorInput)>(r1);

     label12:
        $i48 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        if $i48 >= i42 goto label13;

        $i16 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        $i17 = i42 - $i16;

        i49 = interfaceinvoke r4.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, $i17, 0);

        $i18 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead>;

        $i19 = $i18 + i49;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead> = $i19;

        $i20 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten>;

        $i21 = $i20 + i49;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = $i21;

        $i22 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining>;

        $i23 = $i22 - i49;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining> = $i23;

        goto label12;

     label13:
        $r17 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r18 = $r17.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        l50 = $r18[i1];

        $r19 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r20 = $r19.<androidx.media3.extractor.mp4.TrackSampleTable: int[] flags>;

        i51 = $r20[i1];

        if r5 == null goto label14;

        virtualinvoke r5.<androidx.media3.extractor.TrueHdSampleRechunker: void sampleMetadata(androidx.media3.extractor.TrackOutput,long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(r4, l50, i51, i42, 0, null);

        $i15 = i1 + 1;

        $r21 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $i14 = $r21.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        if $i15 != $i14 goto label15;

        virtualinvoke r5.<androidx.media3.extractor.TrueHdSampleRechunker: void outputPendingSampleMetadata(androidx.media3.extractor.TrackOutput,androidx.media3.extractor.TrackOutput$CryptoData)>(r4, null);

        goto label15;

     label14:
        interfaceinvoke r4.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l50, i51, i42, 0, null);

     label15:
        $i52 = r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex>;

        $i53 = $i52 + 1;

        r3.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex> = $i53;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleTrackIndex> = -1;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesRead> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleBytesWritten> = 0;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: int sampleCurrentNalBytesRemaining> = 0;

        return 0;
    }

    private int getTrackIndexOfNextReadSample(long)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0, l2, l3, l4, $l7, l13, l15, l16;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r1;
        int i1, $i5, $i9, i14, i17, i18, $i20;
        boolean z0, z1, z2, $z3;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] $r2, $r3;
        byte $b6, $b8, $b10, $b11, $b12, $b19;
        androidx.media3.extractor.mp4.TrackSampleTable $r4, $r5;
        long[] $r6, $r10;
        long[][] $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

        l13 = 9223372036854775807L;

        z1 = 1;

        i14 = -1;

        l15 = 9223372036854775807L;

        l16 = 9223372036854775807L;

        z2 = 1;

        i17 = -1;

        i18 = 0;

     label01:
        $r2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        $i5 = lengthof $r2;

        if i18 >= $i5 goto label10;

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] tracks>;

        r1 = $r3[i18];

        i1 = r1.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex>;

        $r4 = r1.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $i9 = $r4.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        if i1 != $i9 goto label02;

        goto label09;

     label02:
        $r5 = r1.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r6 = $r5.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        l2 = $r6[i1];

        $r7 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long[][] accumulatedSampleSizes>;

        $r8 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r7);

        $r9 = (long[][]) $r8;

        $r10 = $r9[i18];

        l3 = $r10[i1];

        l4 = l2 - l0;

        $b10 = l4 cmp 0L;

        if $b10 < 0 goto label03;

        $b12 = l4 cmp 262144L;

        if $b12 < 0 goto label04;

     label03:
        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z0 = $z3;

        if z0 != 0 goto label06;

        if z1 != 0 goto label07;

     label06:
        if z0 != z1 goto label08;

        $b11 = l4 cmp l13;

        if $b11 >= 0 goto label08;

     label07:
        z1 = z0;

        l13 = l4;

        i14 = i18;

        l15 = l3;

     label08:
        $b19 = l3 cmp l16;

        if $b19 >= 0 goto label09;

        l16 = l3;

        z2 = z0;

        i17 = i18;

     label09:
        i18 = i18 + 1;

        goto label01;

     label10:
        $b6 = l16 cmp 9223372036854775807L;

        if $b6 == 0 goto label11;

        if z2 == 0 goto label11;

        $l7 = l16 + 10485760L;

        $b8 = l15 cmp $l7;

        if $b8 >= 0 goto label12;

     label11:
        $i20 = i14;

        goto label13;

     label12:
        $i20 = i17;

     label13:
        return $i20;
    }

    private void updateSampleIndex(androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track, long)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r1;
        long l0;
        androidx.media3.extractor.mp4.TrackSampleTable r2;
        int i1;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track;

        l0 := @parameter1: long;

        r2 = r1.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        i1 = virtualinvoke r2.<androidx.media3.extractor.mp4.TrackSampleTable: int getIndexOfEarlierOrEqualSynchronizationSample(long)>(l0);

        if i1 != -1 goto label1;

        i1 = virtualinvoke r2.<androidx.media3.extractor.mp4.TrackSampleTable: int getIndexOfLaterOrEqualSynchronizationSample(long)>(l0);

     label1:
        r1.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex> = i1;

        return;
    }

    private void processEndOfStreamReadingAtomHeader()
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.TrackOutput r1;
        androidx.media3.common.Metadata r2, $r13, r14;
        int $i0, $i1, $i2;
        androidx.media3.extractor.ExtractorOutput $r3, $r10, $r12;
        androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata $r4, $r6;
        java.lang.Object[] $r5;
        androidx.media3.common.Format$Builder $r8, r15;
        androidx.media3.common.Format $r9;
        androidx.media3.extractor.SeekMap$Unseekable r16;
        androidx.media3.common.Metadata$Entry[] r17;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        $i0 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int fileType>;

        if $i0 != 2 goto label3;

        $i1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int flags>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label3;

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        r1 = interfaceinvoke $r3.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(0, 4);

        $r4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata motionPhotoMetadata>;

        if $r4 != null goto label1;

        $r13 = null;

        goto label2;

     label1:
        r14 = new androidx.media3.common.Metadata;

        $r13 = r14;

        $r5 = newarray (androidx.media3.common.Metadata$Entry)[1];

        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata motionPhotoMetadata>;

        $r5[0] = $r6;

        r17 = (androidx.media3.common.Metadata$Entry[]) $r5;

        specialinvoke r14.<androidx.media3.common.Metadata: void <init>(androidx.media3.common.Metadata$Entry[])>(r17);

     label2:
        r2 = $r13;

        r15 = new androidx.media3.common.Format$Builder;

        specialinvoke r15.<androidx.media3.common.Format$Builder: void <init>()>();

        $r8 = virtualinvoke r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setMetadata(androidx.media3.common.Metadata)>(r2);

        $r9 = virtualinvoke $r8.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        interfaceinvoke r1.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r9);

        $r10 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r10.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

        $r12 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        r16 = new androidx.media3.extractor.SeekMap$Unseekable;

        specialinvoke r16.<androidx.media3.extractor.SeekMap$Unseekable: void <init>(long)>(-9223372036854775807L);

        interfaceinvoke $r12.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>(r16);

     label3:
        return;
    }

    private void maybeSkipRemainingMetaAtomHeaderBytes(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.common.util.ParsableByteArray $r2, $r3, $r5, $r6;
        byte[] $r4;
        int $i0;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $r2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(8);

        $r3 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r4 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void peekFully(byte[],int,int)>($r4, 0, 8);

        $r5 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        staticinvoke <androidx.media3.extractor.mp4.AtomParsers: void maybeSkipRemainingMetaAtomHeaderBytes(androidx.media3.common.util.ParsableByteArray)>($r5);

        $r6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i0 = virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: int getPosition()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i0);

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void resetPeekPosition()>();

        return;
    }

    private void processUnparsedAtom(long)
    {
        androidx.media3.extractor.mp4.Mp4Extractor r0;
        long l0, $l3, $l5, $l6, $l7, $l8;
        int $i1, $i2, $i4;
        androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata $r1;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor;

        l0 := @parameter0: long;

        $i1 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomType>;

        if $i1 != 1836086884 goto label1;

        $r1 = new androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata;

        $i2 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l3 = (long) $i2;

        $l8 = l0 + $l3;

        $l6 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: long atomSize>;

        $i4 = r0.<androidx.media3.extractor.mp4.Mp4Extractor: int atomHeaderBytesRead>;

        $l5 = (long) $i4;

        $l7 = $l6 - $l5;

        specialinvoke $r1.<androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata: void <init>(long,long,long,long,long)>(0L, l0, -9223372036854775807L, $l8, $l7);

        r0.<androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.metadata.mp4.MotionPhotoMetadata motionPhotoMetadata> = $r1;

     label1:
        return;
    }

    private static long[][] calculateAccumulatedSampleSizes(androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[])
    {
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[] r0;
        long[][] r1;
        int[] r2, $r8;
        long[] r3, $r5, $r9, $r12, $r15, $r18;
        boolean[] r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i13, i15, i17, i19, i20, i21, i22;
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track $r6, $r10, $r13, $r16;
        androidx.media3.extractor.mp4.TrackSampleTable $r7, $r11, $r14, $r17;
        long $l8, $l10, $l11, $l14, l16, l18;
        boolean $z0;
        byte $b12;

        r0 := @parameter0: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track[];

        $i0 = lengthof r0;

        r1 = newarray (long[])[$i0];

        $i1 = lengthof r0;

        r2 = newarray (int)[$i1];

        $i2 = lengthof r0;

        r3 = newarray (long)[$i2];

        $i3 = lengthof r0;

        r4 = newarray (boolean)[$i3];

        i15 = 0;

     label1:
        $i4 = lengthof r0;

        if i15 >= $i4 goto label2;

        $r13 = r0[i15];

        $r14 = $r13.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $i13 = $r14.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        $r15 = newarray (long)[$i13];

        r1[i15] = $r15;

        $r16 = r0[i15];

        $r17 = $r16.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r18 = $r17.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        $l14 = $r18[0];

        r3[i15] = $l14;

        i15 = i15 + 1;

        goto label1;

     label2:
        l16 = 0L;

        i17 = 0;

     label3:
        $i5 = lengthof r0;

        if i17 >= $i5 goto label9;

        l18 = 9223372036854775807L;

        i19 = -1;

        i20 = 0;

     label4:
        $i6 = lengthof r0;

        if i20 >= $i6 goto label6;

        $z0 = r4[i20];

        if $z0 != 0 goto label5;

        $l11 = r3[i20];

        $b12 = $l11 cmp l18;

        if $b12 > 0 goto label5;

        i19 = i20;

        l18 = r3[i20];

     label5:
        i20 = i20 + 1;

        goto label4;

     label6:
        i21 = r2[i19];

        $r5 = r1[i19];

        $r5[i21] = l16;

        $r6 = r0[i19];

        $r7 = $r6.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r8 = $r7.<androidx.media3.extractor.mp4.TrackSampleTable: int[] sizes>;

        $i7 = $r8[i21];

        $l8 = (long) $i7;

        l16 = l16 + $l8;

        i22 = i21 + 1;

        r2[i19] = i22;

        $r9 = r1[i19];

        $i9 = lengthof $r9;

        if i22 >= $i9 goto label7;

        $r10 = r0[i19];

        $r11 = $r10.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>;

        $r12 = $r11.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        $l10 = $r12[i22];

        r3[i19] = $l10;

        goto label8;

     label7:
        r4[i19] = 1;

        i17 = i17 + 1;

     label8:
        goto label3;

     label9:
        return r1;
    }

    private static long maybeAdjustSeekOffset(androidx.media3.extractor.mp4.TrackSampleTable, long, long)
    {
        androidx.media3.extractor.mp4.TrackSampleTable r0;
        long l0, l1, l3, $l4;
        int i2;
        long[] $r1;

        r0 := @parameter0: androidx.media3.extractor.mp4.TrackSampleTable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i2 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: int getSynchronizationSampleIndex(androidx.media3.extractor.mp4.TrackSampleTable,long)>(r0, l0);

        if i2 != -1 goto label1;

        return l1;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        l3 = $r1[i2];

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>(l3, l1);

        return $l4;
    }

    private static int getSynchronizationSampleIndex(androidx.media3.extractor.mp4.TrackSampleTable, long)
    {
        androidx.media3.extractor.mp4.TrackSampleTable r0;
        long l0;
        int i1;

        r0 := @parameter0: androidx.media3.extractor.mp4.TrackSampleTable;

        l0 := @parameter1: long;

        i1 = virtualinvoke r0.<androidx.media3.extractor.mp4.TrackSampleTable: int getIndexOfEarlierOrEqualSynchronizationSample(long)>(l0);

        if i1 != -1 goto label1;

        i1 = virtualinvoke r0.<androidx.media3.extractor.mp4.TrackSampleTable: int getIndexOfLaterOrEqualSynchronizationSample(long)>(l0);

     label1:
        return i1;
    }

    private static int processFtypAtom(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, $i1, $i2, i3, i4;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i3 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: int brandToFileType(int)>(i0);

        if i3 == 0 goto label1;

        return i3;

     label1:
        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

     label2:
        $i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if $i1 <= 0 goto label3;

        $i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i4 = staticinvoke <androidx.media3.extractor.mp4.Mp4Extractor: int brandToFileType(int)>($i2);

        if i4 == 0 goto label2;

        return i4;

     label3:
        return 0;
    }

    private static int brandToFileType(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1751476579: goto label2;
            case 1903435808: goto label1;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 0;
    }

    private static boolean shouldParseLeafAtom(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1835296868 goto label1;

        if i0 == 1836476516 goto label1;

        if i0 == 1751411826 goto label1;

        if i0 == 1937011556 goto label1;

        if i0 == 1937011827 goto label1;

        if i0 == 1937011571 goto label1;

        if i0 == 1668576371 goto label1;

        if i0 == 1701606260 goto label1;

        if i0 == 1937011555 goto label1;

        if i0 == 1937011578 goto label1;

        if i0 == 1937013298 goto label1;

        if i0 == 1937007471 goto label1;

        if i0 == 1668232756 goto label1;

        if i0 == 1953196132 goto label1;

        if i0 == 1718909296 goto label1;

        if i0 == 1969517665 goto label1;

        if i0 == 1801812339 goto label1;

        if i0 != 1768715124 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean shouldParseContainerAtom(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1836019574 goto label1;

        if i0 == 1953653099 goto label1;

        if i0 == 1835297121 goto label1;

        if i0 == 1835626086 goto label1;

        if i0 == 1937007212 goto label1;

        if i0 == 1701082227 goto label1;

        if i0 != 1835365473 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static androidx.media3.extractor.mp4.Track lambda$processMoovAtom$1(androidx.media3.extractor.mp4.Track)
    {
        androidx.media3.extractor.mp4.Track r0;

        r0 := @parameter0: androidx.media3.extractor.mp4.Track;

        return r0;
    }

    private static androidx.media3.extractor.Extractor[] lambda$static$0()
    {
        androidx.media3.extractor.Extractor[] $r0;
        androidx.media3.extractor.mp4.Mp4Extractor $r1;

        $r0 = newarray (androidx.media3.extractor.Extractor)[1];

        $r1 = new androidx.media3.extractor.mp4.Mp4Extractor;

        specialinvoke $r1.<androidx.media3.extractor.mp4.Mp4Extractor: void <init>()>();

        $r0[0] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.media3.extractor.ExtractorsFactory $r0;

        $r0 = dynamicinvoke "createExtractors" <androidx.media3.extractor.ExtractorsFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.Extractor[] lambda$static$0()>, methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__());

        <androidx.media3.extractor.mp4.Mp4Extractor: androidx.media3.extractor.ExtractorsFactory FACTORY> = $r0;

        return;
    }

androidx.media3.extractor.mp4.Mp4Extractor$Flags
androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track
<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track>
<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable>
<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>
<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: int sampleIndex>
    public void <init>(androidx.media3.extractor.mp4.Track, androidx.media3.extractor.mp4.TrackSampleTable, androidx.media3.extractor.TrackOutput)
    {
        androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track r0;
        androidx.media3.extractor.mp4.Track r1;
        androidx.media3.extractor.mp4.TrackSampleTable r2;
        androidx.media3.extractor.TrackOutput r3;
        androidx.media3.common.Format $r4;
        java.lang.String $r5, $r6;
        boolean $z0;
        androidx.media3.extractor.TrueHdSampleRechunker $r8;

        r0 := @this: androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track;

        r1 := @parameter0: androidx.media3.extractor.mp4.Track;

        r2 := @parameter1: androidx.media3.extractor.mp4.TrackSampleTable;

        r3 := @parameter2: androidx.media3.extractor.TrackOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.Track track> = r1;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.mp4.TrackSampleTable sampleTable> = r2;

        r0.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrackOutput trackOutput> = r3;

        $r6 = "audio/true-hd";

        $r4 = r1.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r5 = $r4.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r8 = new androidx.media3.extractor.TrueHdSampleRechunker;

        specialinvoke $r8.<androidx.media3.extractor.TrueHdSampleRechunker: void <init>()>();

        goto label2;

     label1:
        $r8 = null;

     label2:
        r0.<androidx.media3.extractor.mp4.Mp4Extractor$Mp4Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker> = $r8;

        return;
    }

