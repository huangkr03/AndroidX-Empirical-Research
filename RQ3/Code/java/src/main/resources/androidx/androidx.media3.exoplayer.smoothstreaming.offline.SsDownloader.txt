androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader
    public void <init>(androidx.media3.common.MediaItem, androidx.media3.datasource.cache.CacheDataSource$Factory)
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.datasource.cache.CacheDataSource$Factory r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r2 := @parameter1: androidx.media3.datasource.cache.CacheDataSource$Factory;

        $r3 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_INTERFACE" <java.lang.Runnable: void run()>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        specialinvoke r0.<androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader: void <init>(androidx.media3.common.MediaItem,androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor)>(r1, r2, $r3);

        return;
    }

    public void <init>(androidx.media3.common.MediaItem, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor)
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.common.MediaItem r1, $r11;
        androidx.media3.datasource.cache.CacheDataSource$Factory r2;
        java.util.concurrent.Executor r3;
        androidx.media3.common.MediaItem$Builder $r4, $r10;
        androidx.media3.common.MediaItem$LocalConfiguration $r5, $r7;
        java.lang.Object $r6;
        android.net.Uri $r8, $r9;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifestParser $r12;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r2 := @parameter1: androidx.media3.datasource.cache.CacheDataSource$Factory;

        r3 := @parameter2: java.util.concurrent.Executor;

        $r4 = virtualinvoke r1.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$Builder buildUpon()>();

        $r5 = r1.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (androidx.media3.common.MediaItem$LocalConfiguration) $r6;

        $r8 = $r7.<androidx.media3.common.MediaItem$LocalConfiguration: android.net.Uri uri>;

        $r9 = staticinvoke <androidx.media3.common.util.Util: android.net.Uri fixSmoothStreamingIsmManifestUri(android.net.Uri)>($r8);

        $r10 = virtualinvoke $r4.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>($r9);

        $r11 = virtualinvoke $r10.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r12 = new androidx.media3.exoplayer.smoothstreaming.manifest.SsManifestParser;

        specialinvoke $r12.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifestParser: void <init>()>();

        specialinvoke r0.<androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader: void <init>(androidx.media3.common.MediaItem,androidx.media3.exoplayer.upstream.ParsingLoadable$Parser,androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor,long)>($r11, $r12, r2, r3, 20000L);

        return;
    }

    public void <init>(androidx.media3.common.MediaItem, androidx.media3.exoplayer.upstream.ParsingLoadable$Parser, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor)
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.exoplayer.upstream.ParsingLoadable$Parser r2;
        androidx.media3.datasource.cache.CacheDataSource$Factory r3;
        java.util.concurrent.Executor r4;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.ParsingLoadable$Parser;

        r3 := @parameter2: androidx.media3.datasource.cache.CacheDataSource$Factory;

        r4 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader: void <init>(androidx.media3.common.MediaItem,androidx.media3.exoplayer.upstream.ParsingLoadable$Parser,androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor,long)>(r1, r2, r3, r4, 20000L);

        return;
    }

    public void <init>(androidx.media3.common.MediaItem, androidx.media3.exoplayer.upstream.ParsingLoadable$Parser, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor, long)
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.exoplayer.upstream.ParsingLoadable$Parser r2;
        androidx.media3.datasource.cache.CacheDataSource$Factory r3;
        java.util.concurrent.Executor r4;
        long l0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.ParsingLoadable$Parser;

        r3 := @parameter2: androidx.media3.datasource.cache.CacheDataSource$Factory;

        r4 := @parameter3: java.util.concurrent.Executor;

        l0 := @parameter4: long;

        specialinvoke r0.<androidx.media3.exoplayer.offline.SegmentDownloader: void <init>(androidx.media3.common.MediaItem,androidx.media3.exoplayer.upstream.ParsingLoadable$Parser,androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor,long)>(r1, r2, r3, r4, l0);

        return;
    }

    protected java.util.List getSegments(androidx.media3.datasource.DataSource, androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest, boolean)
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest r2;
        boolean z0;
        java.util.ArrayList r3, $r6;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] r4;
        int i0, $i1, $i2, i4, i5, i6;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement r5;
        androidx.media3.common.Format[] $r7;
        androidx.media3.exoplayer.offline.SegmentDownloader$Segment $r8;
        long $l3;
        androidx.media3.datasource.DataSpec $r9;
        android.net.Uri $r10;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        r2 := @parameter1: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest;

        z0 := @parameter2: boolean;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        r4 = r2.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] streamElements>;

        i0 = lengthof r4;

        i4 = 0;

     label1:
        if i4 >= i0 goto label6;

        r5 = r4[i4];

        i5 = 0;

     label2:
        $r7 = r5.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: androidx.media3.common.Format[] formats>;

        $i1 = lengthof $r7;

        if i5 >= $i1 goto label5;

        i6 = 0;

     label3:
        $i2 = r5.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: int chunkCount>;

        if i6 >= $i2 goto label4;

        $r8 = new androidx.media3.exoplayer.offline.SegmentDownloader$Segment;

        $l3 = virtualinvoke r5.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: long getStartTimeUs(int)>(i6);

        $r9 = new androidx.media3.datasource.DataSpec;

        $r10 = virtualinvoke r5.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: android.net.Uri buildRequestUri(int,int)>(i5, i6);

        specialinvoke $r9.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r10);

        specialinvoke $r8.<androidx.media3.exoplayer.offline.SegmentDownloader$Segment: void <init>(long,androidx.media3.datasource.DataSpec)>($l3, $r9);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i6 = i6 + 1;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return r3;
    }

    protected volatile java.util.List getSegments(androidx.media3.datasource.DataSource, androidx.media3.exoplayer.offline.FilterableManifest, boolean) throws java.io.IOException, java.lang.InterruptedException
    {
        androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.exoplayer.offline.FilterableManifest r2;
        boolean z0;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest $r3;
        java.util.List $r4;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        r2 := @parameter1: androidx.media3.exoplayer.offline.FilterableManifest;

        z0 := @parameter2: boolean;

        $r3 = (androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest) r2;

        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader: java.util.List getSegments(androidx.media3.datasource.DataSource,androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest,boolean)>(r1, $r3, z0);

        return $r4;
    }

