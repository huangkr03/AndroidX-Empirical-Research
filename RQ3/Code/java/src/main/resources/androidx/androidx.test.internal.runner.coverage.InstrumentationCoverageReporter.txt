androidx.test.internal.runner.coverage.InstrumentationCoverageReporter
<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>
<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String EMMA_RUNTIME_CLASS>
<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String DEFAULT_COVERAGE_FILE_NAME>
<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation>
<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: androidx.test.platform.io.PlatformTestStorage testStorage>
    private java.lang.String dumpCoverageToFile(java.lang.String, java.io.PrintStream)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.io.PrintStream r1;
        java.lang.String r2, r3, $r4, $r5, $r9, r14;
        boolean $z0;
        android.app.Instrumentation $r6;
        android.content.Context $r7;
        java.io.File $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintStream;

        if r14 != null goto label1;

        $r5 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "No coverage file path was specified. Dumps to the default file path.");

        $r6 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation>;

        $r7 = virtualinvoke $r6.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.io.File getFilesDir()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = <java.io.File: java.lang.String separator>;

        r2 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coverage.ec");

        r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z0 = virtualinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: boolean generateCoverageInternal(java.lang.String,java.io.PrintStream)>(r14, r1);

        if $z0 != 0 goto label2;

        $r4 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "Failed to generate the coverage data file. Please refer to the instrumentation result for more info.");

     label2:
        return r14;
    }

    private java.lang.String dumpCoverageToTestStorage(java.lang.String, java.io.PrintStream)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.io.PrintStream r1;
        java.lang.String r2, r4, r5, $r9, $r14, $r15, $r17, r19;
        java.lang.Throwable r3, $r18;
        android.app.Instrumentation $r6;
        android.content.Context $r7;
        java.io.File $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;
        boolean $z0;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r19 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintStream;

        if r19 != null goto label1;

        $r17 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r17, "No coverage file path was specified. Dumps to the default coverage file using test storage.");

        r19 = "coverage.ec";

     label1:
        $r6 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation>;

        $r7 = virtualinvoke $r6.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.io.File getFilesDir()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        r5 = <java.io.File: java.lang.String separator>;

        r4 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coverage.ec");

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: boolean generateCoverageInternal(java.lang.String,java.io.PrintStream)>(r2, r1);

        if $z0 != 0 goto label2;

        $r15 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r15, "Failed to generate the coverage data file. Please refer to the instrumentation result for more info.");

     label2:
        $r14 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r14, "Test service is available. Moving the coverage data file to be managed by the storage service.");

        specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: void moveFileToTestStorage(java.lang.String,java.lang.String)>(r2, r19);

     label3:
        return r19;

     label4:
        $r18 := @caughtexception;

        r3 = $r18;

        specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r3);

        return null;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.lang.String generateCoverageReport(java.lang.String, java.io.PrintStream)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.io.PrintStream r1;
        java.lang.String r2, $r5, $r8, r11, r12;
        androidx.test.platform.io.PlatformTestStorage $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.Object[] $r9;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintStream;

        $r3 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: androidx.test.platform.io.PlatformTestStorage testStorage>;

        $z0 = $r3 instanceof androidx.test.services.storage.TestStorage;

        if $z0 == 0 goto label1;

        r12 = specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String dumpCoverageToTestStorage(java.lang.String,java.io.PrintStream)>(r11, r1);

        goto label2;

     label1:
        r12 = specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String dumpCoverageToFile(java.lang.String,java.io.PrintStream)>(r11, r1);

     label2:
        $r5 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        r2 = r12;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Coverage file was generated to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, $r8);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r12;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\nGenerated code coverage data to %s", $r9);

        return r12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/test/internal/runner/coverage/InstrumentationCoverageReporter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.app.Instrumentation, androidx.test.platform.io.PlatformTestStorage)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        android.app.Instrumentation r1;
        androidx.test.platform.io.PlatformTestStorage r2;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: androidx.test.platform.io.PlatformTestStorage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation> = r1;

        r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: androidx.test.platform.io.PlatformTestStorage testStorage> = r2;

        return;
    }

    private void moveFileToTestStorage(java.lang.String, java.lang.String) throws java.io.IOException
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.lang.String r1, r2, $r8, $r9, $r13, $r14, $r15;
        java.io.File r3, $r6;
        java.io.OutputStream r4;
        java.lang.Throwable r5, $r16, $r17, $r18, $r19, $r20, $r21, r24, r25, r26, r27, r28;
        boolean $z0, $z1;
        java.lang.Object[] $r7, $r12;
        androidx.test.platform.io.PlatformTestStorage $r10;
        java.io.FileInputStream $r11;
        long $l1;
        java.nio.channels.FileChannel r22;
        java.nio.channels.WritableByteChannel r23;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        r3 = $r6;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label23;

        $r8 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r7[1] = r2;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Moving coverage file [%s] to the internal test storage [%s].", $r7);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r8, $r9);

        $r10 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: androidx.test.platform.io.PlatformTestStorage testStorage>;

        r4 = interfaceinvoke $r10.<androidx.test.platform.io.PlatformTestStorage: java.io.OutputStream openInternalOutputFile(java.lang.String)>(r2);

     label01:
        $r11 = new java.io.FileInputStream;

        specialinvoke $r11.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        r22 = virtualinvoke $r11.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

     label02:
        r23 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(r4);

     label03:
        $l1 = virtualinvoke r22.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke r22.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, $l1, r23);

     label04:
        if r23 == null goto label10;

        interfaceinvoke r23.<java.nio.channels.WritableByteChannel: void close()>();

        goto label10;

     label05:
        $r21 := @caughtexception;

        r24 = $r21;

        if r23 == null goto label09;

     label06:
        interfaceinvoke r23.<java.nio.channels.WritableByteChannel: void close()>();

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

        r5 = $r16;

        staticinvoke <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r24, r5);

     label09:
        throw r24;

     label10:
        if r22 == null goto label16;

        virtualinvoke r22.<java.nio.channels.FileChannel: void close()>();

        goto label16;

     label11:
        $r20 := @caughtexception;

        r25 = $r20;

        if r22 == null goto label15;

     label12:
        virtualinvoke r22.<java.nio.channels.FileChannel: void close()>();

     label13:
        goto label15;

     label14:
        $r19 := @caughtexception;

        r26 = $r19;

        staticinvoke <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r25, r26);

     label15:
        throw r25;

     label16:
        if r4 == null goto label22;

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        goto label22;

     label17:
        $r18 := @caughtexception;

        r27 = $r18;

        if r4 == null goto label21;

     label18:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label19:
        goto label21;

     label20:
        $r17 := @caughtexception;

        r28 = $r17;

        staticinvoke <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r27, r28);

     label21:
        throw r27;

     label22:
        $z1 = virtualinvoke r3.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label23;

        $r13 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to delete original coverage file [%s]", $r12);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r13, $r15);

     label23:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    private void reportEmmaError(java.io.PrintStream, java.lang.Exception)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.io.PrintStream r1;
        java.lang.Exception r2;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.Exception;

        specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: void reportEmmaError(java.io.PrintStream,java.lang.String,java.lang.Exception)>(r1, "", r2);

        return;
    }

    private void reportEmmaError(java.io.PrintStream, java.lang.String, java.lang.Exception)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.io.PrintStream r1;
        java.lang.String r2, r4, r5, $r9;
        java.lang.Exception r3;
        java.lang.StringBuilder $r7, $r8, r12;
        java.lang.Object[] $r10;
        java.lang.Throwable r13;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Exception;

        r5 = r2;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate Emma/JaCoCo coverage. ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        r13 = (java.lang.Throwable) r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, r4, r13);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\nError: %s", $r10);

        return;
    }

    public boolean generateCoverageInternal(java.lang.String, java.io.PrintStream)
    {
        androidx.test.internal.runner.coverage.InstrumentationCoverageReporter r0;
        java.lang.String r1, r4, $r21;
        java.io.PrintStream r2;
        java.io.File r3, $r5;
        android.app.Instrumentation $r6, $r18;
        android.content.Context $r7, $r19;
        java.lang.ClassLoader $r8, $r20;
        java.lang.Class[] $r9;
        java.lang.Class $r10, $r11, $r12, r26;
        java.lang.Object[] $r13, $r22;
        java.lang.Boolean $r14, $r15;
        java.lang.Throwable $r17, $r24, $r25, r27, r29, r30;
        java.lang.reflect.Method r28;

        r0 := @this: androidx.test.internal.runner.coverage.InstrumentationCoverageReporter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintStream;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1);

        r3 = $r5;

     label1:
        $r6 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation>;

        $r7 = virtualinvoke $r6.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.vladium.emma.rt.RT", 1, $r8);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        r27 = $r17;

        $r18 = r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: android.app.Instrumentation instrumentation>;

        $r19 = virtualinvoke $r18.<android.app.Instrumentation: android.content.Context getContext()>();

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.vladium.emma.rt.RT", 1, $r20);

        r4 = "Generating coverage for alternate test context.";

        $r21 = <androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r21, r4);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r4;

        virtualinvoke r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\nWarning: %s", $r22);

     label4:
        $r9 = newarray (java.lang.Class)[3];

        $r10 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r9[0] = $r10;

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r9[1] = $r11;

        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r9[2] = $r12;

        r28 = virtualinvoke r26.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r9);

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r3;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13[2] = $r15;

        virtualinvoke r28.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label5:
        return 1;

     label6:
        $r25 := @caughtexception;

        r29 = $r25;

        specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: void reportEmmaError(java.io.PrintStream,java.lang.String,java.lang.Exception)>(r2, "Is Emma/JaCoCo jar on classpath?", r29);

        goto label8;

     label7:
        $r24 := @caughtexception;

        r30 = $r24;

        specialinvoke r0.<androidx.test.internal.runner.coverage.InstrumentationCoverageReporter: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r2, r30);

     label8:
        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label5 with label6;
        catch java.lang.SecurityException from label1 to label5 with label7;
        catch java.lang.NoSuchMethodException from label1 to label5 with label7;
        catch java.lang.IllegalArgumentException from label1 to label5 with label7;
        catch java.lang.IllegalAccessException from label1 to label5 with label7;
        catch java.lang.reflect.InvocationTargetException from label1 to label5 with label7;
    }

androidx.test.internal.runner.coverage.InstrumentationCoverageReporter$$ExternalSyntheticBackport0
    public static void m(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r0, r1, $r6, r8;
        java.lang.Class[] $r2;
        java.lang.Class $r3;
        java.lang.Object[] $r4;
        java.lang.reflect.Method r7;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Throwable;

     label1:
        $r3 = class "Ljava/lang/Throwable;";

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/Throwable;";

        r7 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

