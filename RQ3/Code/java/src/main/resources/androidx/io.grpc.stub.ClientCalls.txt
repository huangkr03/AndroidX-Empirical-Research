io.grpc.stub.ClientCalls
<io.grpc.stub.ClientCalls: boolean $assertionsDisabled>
<io.grpc.stub.ClientCalls: io.grpc.CallOptions$Key STUB_TYPE_OPTION>
<io.grpc.stub.ClientCalls: java.util.logging.Logger logger>
<io.grpc.stub.ClientCalls: boolean rejectRunnableOnExecutor>
    static void <clinit>()
    {
        boolean $z0, $z1;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        io.grpc.CallOptions$Key $r3;

        $z0 = 1;

        <io.grpc.stub.ClientCalls: boolean $assertionsDisabled> = 1;

        $r0 = class "Lio/grpc/stub/ClientCalls;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.stub.ClientCalls: java.util.logging.Logger logger> = $r2;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("GRPC_CLIENT_CALL_REJECT_RUNNABLE");

        $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("GRPC_CLIENT_CALL_REJECT_RUNNABLE");

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <io.grpc.stub.ClientCalls: boolean rejectRunnableOnExecutor> = $z0;

        $r3 = staticinvoke <io.grpc.CallOptions$Key: io.grpc.CallOptions$Key create(java.lang.String)>("internal-stub-type");

        <io.grpc.stub.ClientCalls: io.grpc.CallOptions$Key STUB_TYPE_OPTION> = $r3;

        return;
    }

    private void <init>()
    {
        io.grpc.stub.ClientCalls $r0;

        $r0 := @this: io.grpc.stub.ClientCalls;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static io.grpc.stub.StreamObserver asyncBidiStreamingCall(io.grpc.ClientCall, io.grpc.stub.StreamObserver)
    {
        io.grpc.stub.StreamObserver $r0;
        io.grpc.ClientCall $r1;

        $r1 := @parameter0: io.grpc.ClientCall;

        $r0 := @parameter1: io.grpc.stub.StreamObserver;

        $r0 = staticinvoke <io.grpc.stub.ClientCalls: io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)>($r1, $r0, 1);

        return $r0;
    }

    private static io.grpc.stub.StreamObserver asyncStreamingRequestCall(io.grpc.ClientCall, io.grpc.stub.StreamObserver, boolean)
    {
        io.grpc.ClientCall $r0;
        io.grpc.stub.StreamObserver $r1;
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r2;
        boolean $z0;
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r3;

        $r0 := @parameter0: io.grpc.ClientCall;

        $r1 := @parameter1: io.grpc.stub.StreamObserver;

        $z0 := @parameter2: boolean;

        $r2 = new io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        specialinvoke $r2.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void <init>(io.grpc.ClientCall,boolean)>($r0, $z0);

        $r3 = new io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        specialinvoke $r3.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: void <init>(io.grpc.stub.StreamObserver,io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1, $r2);

        staticinvoke <io.grpc.stub.ClientCalls: void startCall(io.grpc.ClientCall,io.grpc.stub.ClientCalls$StartableListener)>($r0, $r3);

        return $r2;
    }

    private static void startCall(io.grpc.ClientCall, io.grpc.stub.ClientCalls$StartableListener)
    {
        io.grpc.ClientCall $r0;
        io.grpc.stub.ClientCalls$StartableListener $r1;
        io.grpc.Metadata $r2;

        $r0 := @parameter0: io.grpc.ClientCall;

        $r1 := @parameter1: io.grpc.stub.ClientCalls$StartableListener;

        $r2 = new io.grpc.Metadata;

        specialinvoke $r2.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r0.<io.grpc.ClientCall: void start(io.grpc.ClientCall$Listener,io.grpc.Metadata)>($r1, $r2);

        virtualinvoke $r1.<io.grpc.stub.ClientCalls$StartableListener: void onStart()>();

        return;
    }

io.grpc.stub.ClientCalls$1
io.grpc.stub.ClientCalls$CallToStreamObserverAdapter
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean aborted>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean autoRequestEnabled>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean completed>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean frozen>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: int initialRequest>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable onReadyHandler>
<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean streamingResponse>
    void <init>(io.grpc.ClientCall, boolean)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        io.grpc.ClientCall $r1;
        boolean $z0;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $r1 := @parameter0: io.grpc.ClientCall;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<io.grpc.stub.ClientCallStreamObserver: void <init>()>();

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: int initialRequest> = 1;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean autoRequestEnabled> = 1;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean aborted> = 0;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean completed> = 0;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call> = $r1;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean streamingResponse> = $z0;

        return;
    }

    static void access$100(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;

        $r0 := @parameter0: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        specialinvoke $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void freeze()>();

        return;
    }

    static boolean access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        z0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean streamingResponse>;

        return z0;
    }

    static boolean access$300(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        z0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean autoRequestEnabled>;

        return z0;
    }

    static java.lang.Runnable access$400(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        java.lang.Runnable r1;

        $r0 := @parameter0: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        r1 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable onReadyHandler>;

        return r1;
    }

    static int access$500(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        int i0;

        $r0 := @parameter0: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        i0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: int initialRequest>;

        return i0;
    }

    private void freeze()
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean frozen> = 1;

        return;
    }

    public void onCompleted()
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        io.grpc.ClientCall $r1;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $r1 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>;

        virtualinvoke $r1.<io.grpc.ClientCall: void halfClose()>();

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean completed> = 1;

        return;
    }

    public void onError(java.lang.Throwable)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        io.grpc.ClientCall $r1;
        java.lang.Throwable $r2;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $r2 := @parameter0: java.lang.Throwable;

        $r1 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>;

        virtualinvoke $r1.<io.grpc.ClientCall: void cancel(java.lang.String,java.lang.Throwable)>("Cancelled by client with StreamObserver.onError()", $r2);

        $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean aborted> = 1;

        return;
    }

    public void onNext(java.lang.Object)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;
        io.grpc.ClientCall $r2;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean aborted>;

        $z1 = 1;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Stream was terminated by error, no further calls are allowed");

        $z0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean completed>;

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Stream is already completed, no further calls are allowed");

        $r2 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>;

        virtualinvoke $r2.<io.grpc.ClientCall: void sendMessage(java.lang.Object)>($r1);

        return;
    }

    public void request(int)
    {
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r0;
        int $i0;
        boolean $z0;
        io.grpc.ClientCall $r1;

        $r0 := @this: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        $i0 := @parameter0: int;

        $z0 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean streamingResponse>;

        if $z0 != 0 goto label1;

        if $i0 != 1 goto label1;

        $r1 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>;

        virtualinvoke $r1.<io.grpc.ClientCall: void request(int)>(2);

        return;

     label1:
        $r1 = $r0.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: io.grpc.ClientCall call>;

        virtualinvoke $r1.<io.grpc.ClientCall: void request(int)>($i0);

        return;
    }

io.grpc.stub.ClientCalls$StartableListener
    private void <init>()
    {
        io.grpc.stub.ClientCalls$StartableListener $r0;

        $r0 := @this: io.grpc.stub.ClientCalls$StartableListener;

        specialinvoke $r0.<io.grpc.ClientCall$Listener: void <init>()>();

        return;
    }

    void <init>(io.grpc.stub.ClientCalls$1)
    {
        io.grpc.stub.ClientCalls$StartableListener $r0;
        io.grpc.stub.ClientCalls$1 $r1;

        $r0 := @this: io.grpc.stub.ClientCalls$StartableListener;

        $r1 := @parameter0: io.grpc.stub.ClientCalls$1;

        specialinvoke $r0.<io.grpc.stub.ClientCalls$StartableListener: void <init>()>();

        return;
    }

<io.grpc.stub.ClientCalls$StartableListener: void onStart()>
io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter
<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>
<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: boolean firstResponseReceived>
<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.StreamObserver observer>
    void <init>(io.grpc.stub.StreamObserver, io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r1;
        io.grpc.stub.StreamObserver $r2;
        boolean $z0;
        io.grpc.stub.ClientResponseObserver $r3;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r2 := @parameter0: io.grpc.stub.StreamObserver;

        $r1 := @parameter1: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter;

        specialinvoke $r0.<io.grpc.stub.ClientCalls$StartableListener: void <init>(io.grpc.stub.ClientCalls$1)>(null);

        $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.StreamObserver observer> = $r2;

        $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter> = $r1;

        $z0 = $r2 instanceof io.grpc.stub.ClientResponseObserver;

        if $z0 == 0 goto label1;

        $r3 = (io.grpc.stub.ClientResponseObserver) $r2;

        interfaceinvoke $r3.<io.grpc.stub.ClientResponseObserver: void beforeStart(io.grpc.stub.ClientCallStreamObserver)>($r1);

     label1:
        staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void access$100(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1);

        return;
    }

    public void onClose(io.grpc.Status, io.grpc.Metadata)
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.Metadata $r1;
        io.grpc.Status $r2;
        boolean $z0;
        io.grpc.stub.StreamObserver $r3;
        io.grpc.StatusRuntimeException $r4;
        java.lang.Throwable r5;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r2 := @parameter0: io.grpc.Status;

        $r1 := @parameter1: io.grpc.Metadata;

        $z0 = virtualinvoke $r2.<io.grpc.Status: boolean isOk()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.StreamObserver observer>;

        interfaceinvoke $r3.<io.grpc.stub.StreamObserver: void onCompleted()>();

        return;

     label1:
        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.StreamObserver observer>;

        $r4 = virtualinvoke $r2.<io.grpc.Status: io.grpc.StatusRuntimeException asRuntimeException(io.grpc.Metadata)>($r1);

        r5 = (java.lang.Throwable) $r4;

        interfaceinvoke $r3.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>(r5);

        return;
    }

    public void onHeaders(io.grpc.Metadata)
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.Metadata $r1;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r1 := @parameter0: io.grpc.Metadata;

        return;
    }

    public void onMessage(java.lang.Object)
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.stub.StreamObserver $r1;
        java.lang.Object $r2;
        boolean $z0;
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r3;
        io.grpc.Status $r4;
        io.grpc.StatusRuntimeException $r5;
        java.lang.Throwable r6;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: boolean firstResponseReceived>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $z0 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r4 = virtualinvoke $r4.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("More than one responses received for unary or client-streaming call");

        $r5 = virtualinvoke $r4.<io.grpc.Status: io.grpc.StatusRuntimeException asRuntimeException()>();

        r6 = (java.lang.Throwable) $r5;

        throw r6;

     label2:
        $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: boolean firstResponseReceived> = 1;

        $r1 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.StreamObserver observer>;

        interfaceinvoke $r1.<io.grpc.stub.StreamObserver: void onNext(java.lang.Object)>($r2);

        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $z0 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r3);

        if $z0 == 0 goto label3;

        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $z0 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: boolean access$300(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r3);

        if $z0 == 0 goto label3;

        $r3 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        virtualinvoke $r3.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void request(int)>(1);

     label3:
        return;
    }

    public void onReady()
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r1;
        java.lang.Runnable $r2;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r1 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $r2 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$400(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1);

        if $r2 == null goto label1;

        $r1 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $r2 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: java.lang.Runnable access$400(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1);

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    void onStart()
    {
        io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter $r0;
        io.grpc.stub.ClientCalls$CallToStreamObserverAdapter $r1;
        int $i0;

        $r0 := @this: io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter;

        $r1 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $i0 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: int access$500(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1);

        if $i0 <= 0 goto label1;

        $r1 = $r0.<io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter: io.grpc.stub.ClientCalls$CallToStreamObserverAdapter adapter>;

        $i0 = staticinvoke <io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: int access$500(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter)>($r1);

        virtualinvoke $r1.<io.grpc.stub.ClientCalls$CallToStreamObserverAdapter: void request(int)>($i0);

     label1:
        return;
    }

io.grpc.stub.ClientCalls$StubType
<io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType[] $VALUES>
<io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType ASYNC>
<io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType BLOCKING>
<io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType FUTURE>
    private static io.grpc.stub.ClientCalls$StubType[] $values()
    {
        io.grpc.stub.ClientCalls$StubType[] $r0;
        io.grpc.stub.ClientCalls$StubType $r1;

        $r0 = newarray (io.grpc.stub.ClientCalls$StubType)[3];

        $r1 = <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType BLOCKING>;

        $r0[0] = $r1;

        $r1 = <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType FUTURE>;

        $r0[1] = $r1;

        $r1 = <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType ASYNC>;

        $r0[2] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        io.grpc.stub.ClientCalls$StubType[] $r0;
        io.grpc.stub.ClientCalls$StubType $r1;

        $r1 = new io.grpc.stub.ClientCalls$StubType;

        specialinvoke $r1.<io.grpc.stub.ClientCalls$StubType: void <init>(java.lang.String,int)>("BLOCKING", 0);

        <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType BLOCKING> = $r1;

        $r1 = new io.grpc.stub.ClientCalls$StubType;

        specialinvoke $r1.<io.grpc.stub.ClientCalls$StubType: void <init>(java.lang.String,int)>("FUTURE", 1);

        <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType FUTURE> = $r1;

        $r1 = new io.grpc.stub.ClientCalls$StubType;

        specialinvoke $r1.<io.grpc.stub.ClientCalls$StubType: void <init>(java.lang.String,int)>("ASYNC", 2);

        <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType ASYNC> = $r1;

        $r0 = staticinvoke <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType[] $values()>();

        <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        io.grpc.stub.ClientCalls$StubType $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: io.grpc.stub.ClientCalls$StubType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static io.grpc.stub.ClientCalls$StubType[] values()
    {
        java.lang.Object $r0;
        io.grpc.stub.ClientCalls$StubType[] $r1;

        $r1 = <io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (io.grpc.stub.ClientCalls$StubType[]) $r0;

        return $r1;
    }

