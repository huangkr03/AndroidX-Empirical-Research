androidx.media3.test.utils.FakeMediaSourceFactory
<androidx.media3.test.utils.FakeMediaSourceFactory: java.lang.Object DEFAULT_WINDOW_UID>
    public void <init>()
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.exoplayer.source.MediaSourceFactory setDrmSessionManagerProvider(androidx.media3.exoplayer.drm.DrmSessionManagerProvider)
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        androidx.media3.exoplayer.drm.DrmSessionManagerProvider r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DrmSessionManagerProvider;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public androidx.media3.exoplayer.source.MediaSourceFactory setLoadErrorHandlingPolicy(androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy)
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int[] getSupportedTypes()
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        int[] $r1;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        $r1 = newarray (int)[1];

        $r1[0] = 4;

        return $r1;
    }

    public androidx.media3.exoplayer.source.MediaSource createMediaSource(androidx.media3.common.MediaItem)
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition r2, r11;
        java.lang.Object $r4;
        long $l0;
        androidx.media3.common.AdPlaybackState $r5;
        com.google.common.collect.ImmutableList $r6;
        androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition[] $r9;
        androidx.media3.common.Format[] $r10;
        androidx.media3.test.utils.FakeTimeline r12;
        androidx.media3.test.utils.FakeMediaSource r13;
        androidx.media3.exoplayer.source.MediaSource r14;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r11 = new androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition;

        $r4 = <androidx.media3.test.utils.FakeMediaSourceFactory: java.lang.Object DEFAULT_WINDOW_UID>;

        $l0 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>(123456789L);

        $r5 = <androidx.media3.common.AdPlaybackState: androidx.media3.common.AdPlaybackState NONE>;

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r5);

        specialinvoke r11.<androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition: void <init>(int,java.lang.Object,boolean,boolean,boolean,boolean,long,long,long,java.util.List,androidx.media3.common.MediaItem)>(1, $r4, 1, 0, 0, 0, 1000000000L, 2000000L, $l0, $r6, r1);

        r2 = r11;

        r13 = new androidx.media3.test.utils.FakeMediaSource;

        r12 = new androidx.media3.test.utils.FakeTimeline;

        $r9 = newarray (androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition)[1];

        $r9[0] = r2;

        specialinvoke r12.<androidx.media3.test.utils.FakeTimeline: void <init>(androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition[])>($r9);

        $r10 = newarray (androidx.media3.common.Format)[0];

        specialinvoke r13.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.common.Format[])>(r12, $r10);

        r14 = (androidx.media3.exoplayer.source.MediaSource) r13;

        return r14;
    }

    public volatile androidx.media3.exoplayer.source.MediaSource$Factory setLoadErrorHandlingPolicy(androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy)
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy r1;
        androidx.media3.exoplayer.source.MediaSourceFactory $r2;
        androidx.media3.exoplayer.source.MediaSource$Factory r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy;

        $r2 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSourceFactory: androidx.media3.exoplayer.source.MediaSourceFactory setLoadErrorHandlingPolicy(androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy)>(r1);

        r3 = (androidx.media3.exoplayer.source.MediaSource$Factory) $r2;

        return r3;
    }

    public volatile androidx.media3.exoplayer.source.MediaSource$Factory setDrmSessionManagerProvider(androidx.media3.exoplayer.drm.DrmSessionManagerProvider)
    {
        androidx.media3.test.utils.FakeMediaSourceFactory r0;
        androidx.media3.exoplayer.drm.DrmSessionManagerProvider r1;
        androidx.media3.exoplayer.source.MediaSourceFactory $r2;
        androidx.media3.exoplayer.source.MediaSource$Factory r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSourceFactory;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DrmSessionManagerProvider;

        $r2 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSourceFactory: androidx.media3.exoplayer.source.MediaSourceFactory setDrmSessionManagerProvider(androidx.media3.exoplayer.drm.DrmSessionManagerProvider)>(r1);

        r3 = (androidx.media3.exoplayer.source.MediaSource$Factory) $r2;

        return r3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.media3.test.utils.FakeMediaSourceFactory: java.lang.Object DEFAULT_WINDOW_UID> = $r0;

        return;
    }

