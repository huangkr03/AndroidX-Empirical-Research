androidx.test.espresso.base.IdlingResourceRegistry
<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>
<androidx.test.espresso.base.IdlingResourceRegistry: int DYNAMIC_RESOURCE_HAS_IDLED>
<androidx.test.espresso.base.IdlingResourceRegistry: int TIMEOUT_OCCURRED>
<androidx.test.espresso.base.IdlingResourceRegistry: int IDLE_WARNING_REACHED>
<androidx.test.espresso.base.IdlingResourceRegistry: int POSSIBLE_RACE_CONDITION_DETECTED>
<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG>
<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback NO_OP_CALLBACK>
<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>
<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>
<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>
<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher dispatcher>
<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.platform.tracing.Tracing tracer>
<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback>
    static volatile android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        android.os.Handler $r1;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        return $r1;
    }

    androidx.test.espresso.base.IdleNotifier asIdleNotifier()
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.base.IdlingResourceRegistry$6 r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 = new androidx.test.espresso.base.IdlingResourceRegistry$6;

        specialinvoke r1.<androidx.test.espresso.base.IdlingResourceRegistry$6: void <init>(androidx.test.espresso.base.IdlingResourceRegistry)>(r0);

        return r1;
    }

    static volatile androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$fgetidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r1;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback>;

        return $r1;
    }

    static volatile androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$sfgetNO_OP_CALLBACK'()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r0;

        $r0 = <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback NO_OP_CALLBACK>;

        return $r0;
    }

    static volatile androidx.test.platform.tracing.Tracing '-$$Nest$fgettracer'(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.platform.tracing.Tracing $r1;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.platform.tracing.Tracing tracer>;

        return $r1;
    }

    static volatile java.lang.Object '-$$Nest$sfgetTIMEOUT_MESSAGE_TAG'()
    {
        java.lang.Object $r0;

        $r0 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG>;

        return $r0;
    }

    private java.lang.Object runSynchronouslyOnMainThread(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask r0, r14;
        android.os.Handler $r1;
        java.lang.Throwable $r2, $r3, $r4, r8, r10, r12, r19, r20, r21;
        androidx.test.espresso.base.IdlingResourceRegistry r5;
        java.util.concurrent.Callable r6;
        java.lang.Object r7;
        java.lang.RuntimeException r9, r11, r13, r15, r16, r17;
        java.lang.Runnable r18;

        r5 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r6 := @parameter0: java.util.concurrent.Callable;

        r14 = new java.util.concurrent.FutureTask;

        r0 = r14;

        specialinvoke r14.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r6);

        $r1 = r5.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        r18 = (java.lang.Runnable) r0;

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r18);

     label1:
        r7 = virtualinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        goto label5;

     label2:
        $r2 := @caughtexception;

        r8 = $r2;

        r15 = new java.lang.RuntimeException;

        r9 = r15;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r8);

        r19 = (java.lang.Throwable) r9;

        throw r19;

     label3:
        $r4 := @caughtexception;

        r10 = $r4;

        r16 = new java.lang.RuntimeException;

        r11 = r16;

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r10);

        r20 = (java.lang.Throwable) r11;

        throw r20;

     label4:
        $r3 := @caughtexception;

        r12 = $r3;

        r17 = new java.lang.RuntimeException;

        r13 = r17;

        specialinvoke r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r12);

        r21 = (java.lang.Throwable) r13;

        throw r21;

     label5:
        return r7;

        catch java.util.concurrent.CancellationException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label1 to label2 with label2;
    }

    static volatile java.lang.String '-$$Nest$sfgetTAG'()
    {
        java.lang.String $r0;

        $r0 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>;

        return $r0;
    }

    static volatile java.util.List '-$$Nest$fgetidlingStates'(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        return $r1;
    }

    java.util.List getBusyResources()
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        java.util.ArrayList r1, r12;
        java.util.Iterator r2;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r3;
        java.util.List $r4, r14, r15, r16, r17;
        boolean $z0, $z2, $z3, $z6;
        java.lang.Object $r5, $r8;
        android.os.Handler $r6, $r7;
        androidx.test.espresso.IdlingResource $r9, $r10;
        java.lang.String $r11;
        android.os.Message r13;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r12 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        r1 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r8;

        $z2 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r3);

        if $z2 != 0 goto label1;

        $r9 = r3.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $z3 = interfaceinvoke $r9.<androidx.test.espresso.IdlingResource: boolean isIdleNow()>();

        if $z3 == 0 goto label2;

        r14 = (java.util.List) r1;

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        $r10 = r3.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r11 = interfaceinvoke $r10.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r15 = (java.util.List) r12;

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label3:
        r16 = (java.util.List) r1;

        $z0 = interfaceinvoke r16.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r6 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        $r5 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG>;

        r13 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, $r5);

        r13.<android.os.Message: java.lang.Object obj> = r1;

        $r7 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        virtualinvoke $r7.<android.os.Handler: boolean sendMessage(android.os.Message)>(r13);

        return null;

     label4:
        r17 = (java.util.List) r12;

        return r17;
    }

    public java.util.List getResources()
    {
        android.os.Looper $r0, $r1;
        java.util.List $r2, $r9;
        boolean $z0;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r3;
        java.lang.Object $r4, $r8;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState $r5;
        androidx.test.espresso.IdlingResource $r6;
        androidx.test.espresso.base.IdlingResourceRegistry r10;
        androidx.test.espresso.base.IdlingResourceRegistry$5 r11;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList$Builder r12;
        java.util.Iterator r13;

        r10 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = r10.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r0 == $r1 goto label1;

        r11 = new androidx.test.espresso.base.IdlingResourceRegistry$5;

        specialinvoke r11.<androidx.test.espresso.base.IdlingResourceRegistry$5: void <init>(androidx.test.espresso.base.IdlingResourceRegistry)>(r10);

        $r8 = specialinvoke r10.<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object runSynchronouslyOnMainThread(java.util.concurrent.Callable)>(r11);

        $r9 = (java.util.List) $r8;

        return $r9;

     label1:
        r12 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList$Builder builder()>();

        $r2 = r10.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        r13 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r4;

        $r6 = $r5.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        virtualinvoke r12.<androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList$Builder: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList$Builder add(java.lang.Object)>($r6);

        goto label2;

     label3:
        $r3 = virtualinvoke r12.<androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList$Builder: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList build()>();

        return $r3;
    }

    static volatile void '-$$Nest$fputidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry, androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback r1;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 := @parameter1: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Object r2;
        androidx.test.espresso.base.IdlingResourceRegistry$1 r3;

        $r0 = class "Landroidx/test/espresso/base/IdlingResourceRegistry;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG> = $r1;

        r2 = new java.lang.Object;

        specialinvoke r2.<java.lang.Object: void <init>()>();

        <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG> = r2;

        r3 = new androidx.test.espresso.base.IdlingResourceRegistry$1;

        specialinvoke r3.<androidx.test.espresso.base.IdlingResourceRegistry$1: void <init>()>();

        <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback NO_OP_CALLBACK> = r3;

        return;
    }

    public void <init>(android.os.Looper)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        android.os.Looper r1;
        androidx.test.platform.tracing.Tracing $r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 := @parameter0: android.os.Looper;

        $r2 = staticinvoke <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracing getInstance()>();

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: void <init>(android.os.Looper,androidx.test.platform.tracing.Tracing)>(r1, $r2);

        return;
    }

    void <init>(android.os.Looper, androidx.test.platform.tracing.Tracing)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        android.os.Looper r1;
        java.util.ArrayList r2, r8;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r3;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher $r4, r6, r9;
        androidx.test.platform.tracing.Tracing r5;
        android.os.Handler r7, r10;
        java.util.List r11;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 := @parameter0: android.os.Looper;

        r5 := @parameter1: androidx.test.platform.tracing.Tracing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r8 = new java.util.ArrayList;

        r2 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        r11 = (java.util.List) r2;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates> = r11;

        $r3 = <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback NO_OP_CALLBACK>;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback> = $r3;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper> = r1;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.platform.tracing.Tracing tracer> = r5;

        r9 = new androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r6 = r9;

        specialinvoke r9.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher-IA)>(r0, null);

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher dispatcher> = r6;

        r10 = new android.os.Handler;

        r7 = r10;

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher dispatcher>;

        specialinvoke r10.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>(r1, $r4);

        r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler> = r7;

        return;
    }

    void cancelIdleMonitor()
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher dispatcher>;

        staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void '-$$Nest$mderegister'(androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher)>($r1);

        return;
    }

    private void logDuplicateRegistrationError(androidx.test.espresso.IdlingResource, androidx.test.espresso.IdlingResource)
    {
        androidx.test.espresso.IdlingResource r0, r1;
        java.util.Locale r2;
        java.lang.Object[] r3;
        java.lang.String $r4, $r5, r7;
        androidx.test.espresso.base.IdlingResourceRegistry r6;

        r6 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r0 := @parameter0: androidx.test.espresso.IdlingResource;

        r1 := @parameter1: androidx.test.espresso.IdlingResource;

        r7 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>;

        r2 = <java.util.Locale: java.util.Locale ROOT>;

        r3 = newarray (java.lang.Object)[3];

        $r4 = interfaceinvoke r0.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r3[0] = $r4;

        r3[1] = r0;

        r3[2] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r2, "Attempted to register resource with same names: %s. R1: %s R2: %s.\nDuplicate resource registration will be ignored.", r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r7, $r5);

        return;
    }

    void notifyWhenAllResourcesAreIdle(androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback r1, $r5, $r6;
        android.os.Looper $r3, $r4;
        boolean $z0, z1, z2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r3 != $r4 goto label5;

        z1 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean)>(z1);

        $r6 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback>;

        $r5 = <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback NO_OP_CALLBACK>;

        if $r6 != $r5 goto label4;

        z2 = 1;

     label2:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>(z2, "Callback has already been registered.");

        $z0 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: boolean allResourcesAreIdle()>();

        if $z0 == 0 goto label3;

        interfaceinvoke r1.<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void allResourcesIdle()>();

        return;

     label3:
        r0.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback idleNotificationCallback> = r1;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: void scheduleTimeoutMessages()>();

        return;

     label4:
        z2 = 0;

        goto label2;

     label5:
        z1 = 0;

        goto label1;
    }

    public void registerLooper(android.os.Looper, boolean)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        android.os.Looper r1, $r3;
        androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler $r4;
        java.util.ArrayList $r5;
        boolean z1, z2;
        androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler[] r6;
        java.util.List r7;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r1 := @parameter0: android.os.Looper;

        z1 := @parameter1: boolean;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r3 == r1 goto label2;

        z2 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "Not intended for use with main looper!");

        r6 = newarray (androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler)[1];

        $r4 = staticinvoke <androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler: androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler forLooper(android.os.Looper)>(r1);

        r6[0] = $r4;

        $r5 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>(r6);

        r7 = (java.util.List) $r5;

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: boolean registerResources(java.util.List)>(r7);

        return;

     label2:
        z2 = 0;

        goto label1;
    }

    private void scheduleTimeoutMessages()
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        java.lang.Object r1, r10;
        android.os.Handler $r2, $r4, r7, r9;
        java.util.concurrent.TimeUnit $r3, $r5;
        long $l0, $l1, $l2, $l3;
        androidx.test.espresso.IdlingPolicy r6, r12;
        android.os.Message r8, r11;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r6 = staticinvoke <androidx.test.espresso.IdlingPolicies: androidx.test.espresso.IdlingPolicy getDynamicIdlingResourceWarningPolicy()>();

        r7 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        r1 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG>;

        r8 = virtualinvoke r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r1);

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        $r3 = virtualinvoke r6.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();

        $l0 = virtualinvoke r6.<androidx.test.espresso.IdlingPolicy: long getIdleTimeout()>();

        $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r8, $l1);

        r9 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        r10 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object TIMEOUT_MESSAGE_TAG>;

        r11 = virtualinvoke r9.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r10);

        r12 = staticinvoke <androidx.test.espresso.IdlingPolicies: androidx.test.espresso.IdlingPolicy getDynamicIdlingResourceErrorPolicy()>();

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        $r5 = virtualinvoke r12.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();

        $l2 = virtualinvoke r12.<androidx.test.espresso.IdlingPolicy: long getIdleTimeout()>();

        $l3 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l2);

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r11, $l3);

        return;
    }

    public void sync(java.lang.Iterable, java.lang.Iterable)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        androidx.test.espresso.IdlingResource r1, $r8, $r11, $r12, $r15, $r23, $r30, r37;
        android.os.Looper $r2, $r3, $r17;
        java.util.List $r4, r53, r54, r56, r59;
        java.util.Collection $r5;
        java.util.ArrayList $r6, r40, r45;
        java.lang.Object $r7, $r10, $r16, $r22, $r24, $r29;
        java.lang.String $r9, $r13, $r18, $r19, $r21, $r25, $r26, $r28;
        boolean $z4, $z5, $z6, $z7, $z8;
        java.lang.Iterable r32, r33, r58;
        androidx.test.espresso.base.IdlingResourceRegistry$2 r34, r43;
        java.util.HashMap r35, r44;
        java.util.Iterator r36, r38, r41;
        androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler r39;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r42;
        java.util.Map r46, r47, r48, r49, r50, r51, r52, r55, r57;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r32 := @parameter0: java.lang.Iterable;

        r33 := @parameter1: java.lang.Iterable;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r3 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r2 == $r3 goto label01;

        r43 = new androidx.test.espresso.base.IdlingResourceRegistry$2;

        r34 = r43;

        specialinvoke r43.<androidx.test.espresso.base.IdlingResourceRegistry$2: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,java.lang.Iterable,java.lang.Iterable)>(r0, r32, r33);

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object runSynchronouslyOnMainThread(java.util.concurrent.Callable)>(r34);

        return;

     label01:
        r44 = new java.util.HashMap;

        r35 = r44;

        specialinvoke r44.<java.util.HashMap: void <init>()>();

        r36 = interfaceinvoke r32.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r24 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (androidx.test.espresso.IdlingResource) $r24;

        $r25 = interfaceinvoke r37.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r46 = (java.util.Map) r35;

        $z5 = interfaceinvoke r46.<java.util.Map: boolean containsKey(java.lang.Object)>($r25);

        if $z5 == 0 goto label03;

        $r28 = interfaceinvoke r37.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r47 = (java.util.Map) r35;

        $r29 = interfaceinvoke r47.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        $r30 = (androidx.test.espresso.IdlingResource) $r29;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: void logDuplicateRegistrationError(androidx.test.espresso.IdlingResource,androidx.test.espresso.IdlingResource)>(r37, $r30);

        goto label02;

     label03:
        $r26 = interfaceinvoke r37.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r48 = (java.util.Map) r35;

        interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r37);

        goto label02;

     label04:
        r38 = interfaceinvoke r33.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r16 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (android.os.Looper) $r16;

        r39 = staticinvoke <androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler: androidx.test.espresso.base.LooperIdlingResourceInterrogationHandler forLooper(android.os.Looper)>($r17);

        $r18 = interfaceinvoke r39.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r49 = (java.util.Map) r35;

        $z4 = interfaceinvoke r49.<java.util.Map: boolean containsKey(java.lang.Object)>($r18);

        if $z4 == 0 goto label06;

        $r21 = interfaceinvoke r39.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r50 = (java.util.Map) r35;

        $r22 = interfaceinvoke r50.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (androidx.test.espresso.IdlingResource) $r22;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: void logDuplicateRegistrationError(androidx.test.espresso.IdlingResource,androidx.test.espresso.IdlingResource)>(r39, $r23);

        goto label05;

     label06:
        $r19 = interfaceinvoke r39.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r51 = (java.util.Map) r35;

        interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r39);

        goto label05;

     label07:
        r45 = new java.util.ArrayList;

        r40 = r45;

        specialinvoke r45.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        r41 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z8 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r7 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r7;

        $r8 = r42.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r9 = interfaceinvoke $r8.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r52 = (java.util.Map) r35;

        $r10 = interfaceinvoke r52.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        r1 = (androidx.test.espresso.IdlingResource) $r10;

        if r1 != null goto label09;

        $r15 = r42.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        r53 = (java.util.List) r40;

        interfaceinvoke r53.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label08;

     label09:
        $r11 = r42.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        if $r11 == r1 goto label08;

        $r12 = r42.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        r54 = (java.util.List) r40;

        interfaceinvoke r54.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = interfaceinvoke r1.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r55 = (java.util.Map) r35;

        interfaceinvoke r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r1);

        goto label08;

     label10:
        r56 = (java.util.List) r40;

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: boolean unregisterResources(java.util.List)>(r56);

        r57 = (java.util.Map) r35;

        $r5 = interfaceinvoke r57.<java.util.Map: java.util.Collection values()>();

        r58 = (java.lang.Iterable) $r5;

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r58);

        r59 = (java.util.List) $r6;

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: boolean registerResources(java.util.List)>(r59);

        return;
    }

    boolean allResourcesAreIdle()
    {
        android.os.Looper $r0, $r1;
        java.util.List $r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.lang.Object $r5;
        androidx.test.espresso.IdlingResource $r6;
        androidx.test.espresso.base.IdlingResourceRegistry r7;
        java.util.Iterator r8;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r9;

        r7 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = r7.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r0 != $r1 goto label6;

        z4 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean)>(z4);

        $r2 = r7.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r5;

        $z1 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r9);

        if $z1 == 0 goto label3;

        $r6 = r9.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $z3 = interfaceinvoke $r6.<androidx.test.espresso.IdlingResource: boolean isIdleNow()>();

        virtualinvoke r9.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void setIdle(boolean)>($z3);

     label3:
        $z2 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r9);

        if $z2 != 0 goto label2;

        return 0;

     label4:
        $r3 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>($r3, 3);

        if $z0 == 0 goto label5;

        $r4 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "All idling resources are idle.");

     label5:
        return 1;

     label6:
        z4 = 0;

        goto label1;
    }

    public boolean registerResources(java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        java.util.Iterator r1, r21;
        androidx.test.espresso.IdlingResource r2, $r14, $r16;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r3, r22;
        android.os.Looper $r4, $r5;
        java.lang.Object $r6, $r12, $r17;
        java.lang.String $r7, $r13, $r15;
        java.util.List $r9, $r11, r19;
        boolean $z0, $z2, $z3, z4, $z5, z6;
        android.os.Handler $r10;
        java.lang.Boolean $r18;
        androidx.test.espresso.base.IdlingResourceRegistry$3 r20;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r19 := @parameter0: java.util.List;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r4 == $r5 goto label1;

        r20 = new androidx.test.espresso.base.IdlingResourceRegistry$3;

        specialinvoke r20.<androidx.test.espresso.base.IdlingResourceRegistry$3: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,java.util.List)>(r0, r19);

        $r17 = specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object runSynchronouslyOnMainThread(java.util.concurrent.Callable)>(r20);

        $r18 = (java.lang.Boolean) $r17;

        $z3 = virtualinvoke $r18.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label1:
        r1 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

        z4 = 1;

     label2:
        $z5 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.espresso.IdlingResource) $r6;

        $r7 = interfaceinvoke r2.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r7, "IdlingResource.getName() should not be null");

        $r9 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        r21 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r12;

        $r13 = interfaceinvoke r2.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        $r14 = r3.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r15 = interfaceinvoke $r14.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label3;

        $r16 = r3.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: void logDuplicateRegistrationError(androidx.test.espresso.IdlingResource,androidx.test.espresso.IdlingResource)>(r2, $r16);

        z6 = 1;

     label4:
        if z6 != 0 goto label5;

        r22 = new androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        $r10 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler handler>;

        specialinvoke r22.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,androidx.test.espresso.IdlingResource,android.os.Handler,androidx.test.espresso.base.IdlingResourceRegistry$IdlingState-IA)>(r0, r2, $r10, null);

        $r11 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r22);

        staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void '-$$Nest$mregisterSelf'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r22);

        goto label2;

     label5:
        z4 = 0;

        goto label2;

     label6:
        z6 = 0;

        goto label4;

     label7:
        return z4;
    }

    public boolean unregisterResources(java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry r0;
        java.util.Iterator r1;
        androidx.test.espresso.IdlingResource r2, $r14;
        java.lang.Object[] r3;
        android.os.Looper $r4, $r5;
        java.lang.Object $r6, $r12, $r18, $r22;
        java.util.List $r7, $r9, $r11, $r17, $r20, r24;
        int $i0, i2;
        java.lang.String $r8, $r10, $r15, $r16, r26;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState $r13, $r19;
        boolean $z0, $z1, z2, $z3, z4;
        java.lang.Boolean $r23;
        androidx.test.espresso.base.IdlingResourceRegistry$4 r25;
        java.util.Locale r27;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry;

        r24 := @parameter0: java.util.List;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: android.os.Looper looper>;

        if $r4 == $r5 goto label1;

        r25 = new androidx.test.espresso.base.IdlingResourceRegistry$4;

        specialinvoke r25.<androidx.test.espresso.base.IdlingResourceRegistry$4: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,java.util.List)>(r0, r24);

        $r22 = specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object runSynchronouslyOnMainThread(java.util.concurrent.Callable)>(r25);

        $r23 = (java.lang.Boolean) $r22;

        $z1 = virtualinvoke $r23.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label1:
        r1 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

        z2 = 1;

     label2:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.espresso.IdlingResource) $r6;

        i2 = 0;

     label3:
        $r7 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i2 >= $i0 goto label6;

        $r11 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i2);

        $r13 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r12;

        $r14 = $r13.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r15 = interfaceinvoke $r14.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        $r16 = interfaceinvoke r2.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label5;

        $r17 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i2);

        $r19 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r18;

        staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void '-$$Nest$mcloseSpan'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>($r19);

        $r20 = r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List idlingStates>;

        interfaceinvoke $r20.<java.util.List: java.lang.Object remove(int)>(i2);

        z4 = 1;

     label4:
        if z4 != 0 goto label2;

        r26 = <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String TAG>;

        r27 = <java.util.Locale: java.util.Locale ROOT>;

        r3 = newarray (java.lang.Object)[2];

        $r8 = interfaceinvoke r2.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r3[0] = $r8;

        $r9 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List getResources()>();

        r3[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r27, "Attempted to unregister resource that is not registered: \'%s\'. Resource list: %s", r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r26, $r10);

        z2 = 0;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        z4 = 0;

        goto label4;

     label7:
        return z2;
    }

androidx.test.espresso.base.IdlingResourceRegistry$1
    void <init>()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$1 r0;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void allResourcesIdle()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$1 r0;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$1;

        return;
    }

    public void resourcesHaveTimedOut(java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$1 r0;
        java.util.List r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$1;

        r1 := @parameter0: java.util.List;

        return;
    }

    public void resourcesStillBusyWarning(java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$1 r0;
        java.util.List r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$1;

        r1 := @parameter0: java.util.List;

        return;
    }

androidx.test.espresso.base.IdlingResourceRegistry$2
<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$resources>
<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$loopers>
<androidx.test.espresso.base.IdlingResourceRegistry$2: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.IdlingResourceRegistry$2 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$2;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$2 r0;
        java.lang.Iterable $r1, $r2;
        androidx.test.espresso.base.IdlingResourceRegistry $r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$2;

        $r3 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$resources>;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$loopers>;

        virtualinvoke $r3.<androidx.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>($r2, $r1);

        return null;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry, java.lang.Iterable, java.lang.Iterable)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$2 r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        java.lang.Iterable r2, r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$2;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: java.lang.Iterable;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$resources> = r2;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$2: java.lang.Iterable val$loopers> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.IdlingResourceRegistry$3
<androidx.test.espresso.base.IdlingResourceRegistry$3: java.util.List val$resourceList>
<androidx.test.espresso.base.IdlingResourceRegistry$3: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    public java.lang.Boolean call()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$3 r0;
        java.util.List $r1;
        androidx.test.espresso.base.IdlingResourceRegistry $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$3;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$3: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$3: java.util.List val$resourceList>;

        $z0 = virtualinvoke $r2.<androidx.test.espresso.base.IdlingResourceRegistry: boolean registerResources(java.util.List)>($r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.IdlingResourceRegistry$3 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$3;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$3: java.lang.Boolean call()>();

        return $r1;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry, java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$3 r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        java.util.List r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$3;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: java.util.List;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$3: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$3: java.util.List val$resourceList> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.IdlingResourceRegistry$4
<androidx.test.espresso.base.IdlingResourceRegistry$4: java.util.List val$resourceList>
<androidx.test.espresso.base.IdlingResourceRegistry$4: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    public java.lang.Boolean call()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$4 r0;
        java.util.List $r1;
        androidx.test.espresso.base.IdlingResourceRegistry $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$4;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$4: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$4: java.util.List val$resourceList>;

        $z0 = virtualinvoke $r2.<androidx.test.espresso.base.IdlingResourceRegistry: boolean unregisterResources(java.util.List)>($r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.IdlingResourceRegistry$4 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$4;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$4: java.lang.Boolean call()>();

        return $r1;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry, java.util.List)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$4 r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        java.util.List r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$4;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: java.util.List;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$4: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$4: java.util.List val$resourceList> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.IdlingResourceRegistry$5
<androidx.test.espresso.base.IdlingResourceRegistry$5: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.IdlingResourceRegistry$5 r0;
        java.util.List $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$5;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$5: java.util.List call()>();

        return $r1;
    }

    public java.util.List call()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$5 r0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1;
        java.util.List $r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$5;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$5: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r2 = virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List getResources()>();

        return $r2;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$5 r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$5;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$5: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.IdlingResourceRegistry$6
<androidx.test.espresso.base.IdlingResourceRegistry$6: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    void <init>(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$6 r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$6;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$6: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelCallback()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$6 r0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$6;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$6: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: void cancelIdleMonitor()>();

        return;
    }

    public void registerNotificationCallback(androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$6 r0;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback r1;
        androidx.test.espresso.base.IdlingResourceRegistry $r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$6;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$6: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        virtualinvoke $r2.<androidx.test.espresso.base.IdlingResourceRegistry: void notifyWhenAllResourcesAreIdle(androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)>(r1);

        return;
    }

    public volatile void registerNotificationCallback(java.lang.Object)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$6 r0;
        java.lang.Object r1;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$6;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback) r1;

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$6: void registerNotificationCallback(androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)>($r2);

        return;
    }

    public boolean isIdleNow()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$6 r0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1;
        boolean $z0;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$6;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$6: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $z0 = virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: boolean allResourcesAreIdle()>();

        return $z0;
    }

androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher-IA
androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher
<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    static volatile void '-$$Nest$mderegister'(androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void deregister()>();

        return;
    }

    private void <init>(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry, androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher-IA)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher-IA r2;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher-IA;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void <init>(androidx.test.espresso.base.IdlingResourceRegistry)>(r1);

        return;
    }

    private void deregister()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1, $r4;
        android.os.Handler $r2;
        java.lang.Object $r3;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r5;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r2 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r1);

        $r3 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object '-$$Nest$sfgetTIMEOUT_MESSAGE_TAG'()>();

        virtualinvoke $r2.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>($r3);

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r5 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$sfgetNO_OP_CALLBACK'()>();

        staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: void '-$$Nest$fputidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry,androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback)>($r4, $r5);

        return;
    }

    private void handleRaceCondition(android.os.Message)
    {
        java.util.Locale r0;
        java.lang.Object[] r1;
        java.lang.Object $r2, $r4;
        java.util.List $r3;
        boolean $z0, $z1;
        androidx.test.espresso.IdlingResource $r5;
        java.lang.String $r6, $r7;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r8;
        android.os.Message r9;
        java.util.Iterator r10;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r11;
        java.lang.IllegalStateException r12;

        r8 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r9 := @parameter0: android.os.Message;

        $r2 = r9.<android.os.Message: java.lang.Object obj>;

        $r3 = (java.util.List) $r2;

        r10 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r4;

        $z1 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r11);

        if $z1 != 0 goto label1;

        r12 = new java.lang.IllegalStateException;

        r0 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[1];

        $r5 = r11.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r6 = interfaceinvoke $r5.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r1[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r0, "Resource %s isIdleNow() is returning true, but a message indicating that the resource has transitioned from busy to idle was never sent.", r1);

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r12;

     label2:
        return;
    }

    private void handleResourceIdled(android.os.Message)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0, r2;
        java.util.Iterator r1;
        java.lang.Object $r3, $r11;
        androidx.test.espresso.base.IdlingResourceRegistry $r4, $r6;
        java.util.List $r5;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r7;
        java.lang.StringBuilder $r8, $r9, r18;
        java.lang.String $r10, r15, r17;
        boolean $z0, z1, z2, $z3;
        java.lang.Throwable $r12, r19;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r13;
        android.os.Message r14;
        androidx.test.espresso.IdlingResource r16;

        r13 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r14 := @parameter0: android.os.Message;

        $r3 = r14.<android.os.Message: java.lang.Object obj>;

        r0 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r3;

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void setIdle(boolean)>(1);

        $r4 = r13.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r5 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.util.List '-$$Nest$fgetidlingStates'(androidx.test.espresso.base.IdlingResourceRegistry)>($r4);

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        z1 = 1;

        z2 = 1;

     label01:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.espresso.base.IdlingResourceRegistry$IdlingState) $r11;

        if z2 == 0 goto label09;

        $z0 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)>(r2);

        if $z0 == 0 goto label09;

        z2 = 1;

     label02:
        if z1 != 0 goto label03;

        if z2 == 0 goto label04;

     label03:
        if z1 == 0 goto label01;

        if r2 != r0 goto label01;

        z1 = 0;

        goto label01;

     label04:
        if z1 == 0 goto label05;

        r15 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String '-$$Nest$sfgetTAG'()>();

        r16 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r16);

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring message from unregistered resource: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r15, $r10);

        return;

     label05:
        if z2 == 0 goto label08;

     label06:
        $r6 = r13.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r7 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$fgetidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry)>($r6);

        interfaceinvoke $r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void allResourcesIdle()>();

     label07:
        specialinvoke r13.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void deregister()>();

        return;

     label08:
        return;

     label09:
        z2 = 0;

        goto label02;

     label10:
        $r12 := @caughtexception;

        r19 = $r12;

        specialinvoke r13.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void deregister()>();

        throw r19;

        catch java.lang.Throwable from label06 to label07 with label10;
    }

    private void handleTimeout()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1, $r2, $r4, $r6;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r3;
        android.os.Handler $r5, $r7;
        java.lang.Object $r8;
        android.os.Message $r9;
        java.lang.Throwable $r10, r12;
        java.util.List r11;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        r11 = virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List getBusyResources()>();

        if r11 != null goto label1;

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r5 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r4);

        $r6 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r7 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r6);

        $r8 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object '-$$Nest$sfgetTIMEOUT_MESSAGE_TAG'()>();

        $r9 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r8);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r9);

        return;

     label1:
        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r3 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$fgetidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry)>($r2);

        interfaceinvoke $r3.<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void resourcesHaveTimedOut(java.util.List)>(r11);

        goto label3;

     label2:
        $r10 := @caughtexception;

        r12 = $r10;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void deregister()>();

        throw r12;

     label3:
        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void deregister()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    private void handleTimeoutWarning()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r0;
        java.util.List r1;
        androidx.test.espresso.IdlingPolicy r2;
        androidx.test.espresso.base.IdlingResourceRegistry $r3, $r4, $r6, $r8, $r13, $r15;
        androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback $r5;
        android.os.Handler $r7, $r9, $r14, $r16;
        java.lang.Object $r10, $r17;
        android.os.Message $r11, $r18;
        java.util.concurrent.TimeUnit $r12;
        long $l0, $l1;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        $r3 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        r1 = virtualinvoke $r3.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List getBusyResources()>();

        if r1 != null goto label1;

        $r13 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r14 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r13);

        $r15 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r16 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r15);

        $r17 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object '-$$Nest$sfgetTIMEOUT_MESSAGE_TAG'()>();

        $r18 = virtualinvoke $r16.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, $r17);

        virtualinvoke $r14.<android.os.Handler: boolean sendMessage(android.os.Message)>($r18);

        return;

     label1:
        r2 = staticinvoke <androidx.test.espresso.IdlingPolicies: androidx.test.espresso.IdlingPolicy getDynamicIdlingResourceWarningPolicy()>();

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r5 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback '-$$Nest$fgetidleNotificationCallback'(androidx.test.espresso.base.IdlingResourceRegistry)>($r4);

        interfaceinvoke $r5.<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void resourcesStillBusyWarning(java.util.List)>(r1);

        $r6 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r7 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r6);

        $r8 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r9 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: android.os.Handler '-$$Nest$fgethandler'(androidx.test.espresso.base.IdlingResourceRegistry)>($r8);

        $r10 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.Object '-$$Nest$sfgetTIMEOUT_MESSAGE_TAG'()>();

        $r11 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, $r10);

        $r12 = virtualinvoke r2.<androidx.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>();

        $l0 = virtualinvoke r2.<androidx.test.espresso.IdlingPolicy: long getIdleTimeout()>();

        $l1 = virtualinvoke $r12.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        virtualinvoke $r7.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r11, $l1);

        return;
    }

    public boolean handleMessage(android.os.Message)
    {
        java.lang.StringBuilder r0, $r1, $r2;
        int $i0;
        java.lang.String $r3, r6, r7;
        androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher r4;
        android.os.Message r5;

        r4 := @this: androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher;

        r5 := @parameter0: android.os.Message;

        $i0 = r5.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label1;
            default: goto label6;
        };

     label1:
        specialinvoke r4.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void handleRaceCondition(android.os.Message)>(r5);

     label2:
        return 1;

     label3:
        specialinvoke r4.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void handleTimeoutWarning()>();

        goto label2;

     label4:
        specialinvoke r4.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void handleTimeout()>();

        goto label2;

     label5:
        specialinvoke r4.<androidx.test.espresso.base.IdlingResourceRegistry$Dispatcher: void handleResourceIdled(android.os.Message)>(r5);

        goto label2;

     label6:
        r6 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String '-$$Nest$sfgetTAG'()>();

        r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message type: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r6, $r3);

        return 0;
    }

androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback
<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void allResourcesIdle()>
<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void resourcesHaveTimedOut(java.util.List)>
<androidx.test.espresso.base.IdlingResourceRegistry$IdleNotificationCallback: void resourcesStillBusyWarning(java.util.List)>
androidx.test.espresso.base.IdlingResourceRegistry$IdlingState-IA
androidx.test.espresso.base.IdlingResourceRegistry$IdlingState
<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>
<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: android.os.Handler handler>
<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean idle>
<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>
<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.base.IdlingResourceRegistry this$0>
    private androidx.test.platform.tracing.Tracer$Span createUnmanagedTracerSpan(java.lang.String)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        java.lang.String r1;
        androidx.test.espresso.base.IdlingResourceRegistry $r2;
        androidx.test.platform.tracing.Tracing $r3;
        androidx.test.platform.tracing.Tracer$Span $r4;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.base.IdlingResourceRegistry this$0>;

        $r3 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.platform.tracing.Tracing '-$$Nest$fgettracer'(androidx.test.espresso.base.IdlingResourceRegistry)>($r2);

        $r4 = virtualinvoke $r3.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>(r1);

        return $r4;
    }

    static volatile void '-$$Nest$mcloseSpan'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void closeSpan()>();

        return;
    }

    static volatile void '-$$Nest$mregisterSelf'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void registerSelf()>();

        return;
    }

    private void <init>(androidx.test.espresso.base.IdlingResourceRegistry, androidx.test.espresso.IdlingResource, android.os.Handler)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        androidx.test.espresso.IdlingResource r2;
        android.os.Handler r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: androidx.test.espresso.IdlingResource;

        r3 := @parameter2: android.os.Handler;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.base.IdlingResourceRegistry this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource> = r2;

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: android.os.Handler handler> = r3;

        return;
    }

    void <init>(androidx.test.espresso.base.IdlingResourceRegistry, androidx.test.espresso.IdlingResource, android.os.Handler, androidx.test.espresso.base.IdlingResourceRegistry$IdlingState-IA)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        androidx.test.espresso.IdlingResource r2;
        android.os.Handler r3;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState-IA r4;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        r2 := @parameter1: androidx.test.espresso.IdlingResource;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState-IA;

        specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void <init>(androidx.test.espresso.base.IdlingResourceRegistry,androidx.test.espresso.IdlingResource,android.os.Handler)>(r1, r2, r3);

        return;
    }

    private void closeSpan()
    {
        java.lang.String r0, $r6, r9;
        java.lang.StringBuilder r1, $r4, $r5;
        androidx.test.platform.tracing.Tracer$Span $r2, $r3;
        boolean $z0;
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r7;
        androidx.test.espresso.IdlingResource r8;

        r7 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        $r2 = r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>;

        if $r2 == null goto label1;

        $r3 = r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>;

        interfaceinvoke $r3.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan> = null;

        $z0 = r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean idle>;

        if $z0 != 0 goto label1;

        r0 = staticinvoke <androidx.test.espresso.base.IdlingResourceRegistry: java.lang.String '-$$Nest$sfgetTAG'()>();

        r8 = r7.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        r9 = interfaceinvoke r8.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing span for resource not idle: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r0, $r6);

        return;

     label1:
        return;
    }

    public void onTransitionToIdle()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: android.os.Handler handler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        r1.<android.os.Message: java.lang.Object obj> = r0;

        $r3 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: android.os.Handler handler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void registerSelf()
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        androidx.test.espresso.IdlingResource $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        interfaceinvoke $r1.<androidx.test.espresso.IdlingResource: void registerIdleTransitionCallback(androidx.test.espresso.IdlingResource$ResourceCallback)>(r0);

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $z0 = interfaceinvoke $r2.<androidx.test.espresso.IdlingResource: boolean isIdleNow()>();

        virtualinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: void setIdle(boolean)>($z0);

        return;
    }

    public void setIdle(boolean)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        boolean z0;
        androidx.test.platform.tracing.Tracer$Span $r1, $r2, $r3, $r8;
        androidx.test.espresso.IdlingResource $r4;
        java.lang.String $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label2;

        $r3 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>;

        if $r3 != null goto label2;

        $r4 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.espresso.IdlingResource resource>;

        $r5 = interfaceinvoke $r4.<androidx.test.espresso.IdlingResource: java.lang.String getName()>();

        $r6 = newarray (java.lang.Object)[0];

        $r7 = staticinvoke <androidx.test.espresso.util.TracingUtil: java.lang.String getSpanName(java.lang.String,java.lang.String,java.lang.Object[])>("IdleResource", $r5, $r6);

        $r8 = specialinvoke r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span createUnmanagedTracerSpan(java.lang.String)>($r7);

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan> = $r8;

     label1:
        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean idle> = z0;

        return;

     label2:
        if z0 == 0 goto label1;

        $r1 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan>;

        interfaceinvoke $r2.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: androidx.test.platform.tracing.Tracer$Span tracerSpan> = null;

        goto label1;
    }

    static volatile boolean '-$$Nest$fgetidle'(androidx.test.espresso.base.IdlingResourceRegistry$IdlingState)
    {
        androidx.test.espresso.base.IdlingResourceRegistry$IdlingState r0;
        boolean $z0;

        r0 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry$IdlingState;

        $z0 = r0.<androidx.test.espresso.base.IdlingResourceRegistry$IdlingState: boolean idle>;

        return $z0;
    }

