kotlin.NumbersKt__FloorDivModKt
    public void <init>()
    {
        kotlin.NumbersKt__FloorDivModKt $r0;

        $r0 := @this: kotlin.NumbersKt__FloorDivModKt;

        specialinvoke $r0.<kotlin.NumbersKt__BigIntegersKt: void <init>()>();

        return;
    }

    private static final int floorDiv(byte, byte)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4;

        $b0 := @parameter0: byte;

        $b2 := @parameter1: byte;

        $i3 = $b0 / $b2;

        $b1 = $b0 ^ $b2;

        if $b1 >= 0 goto label1;

        $i4 = $b2 * $i3;

        if $i4 == $b0 goto label1;

        $i3 = $i3 + -1;

     label1:
        return $i3;
    }

    private static final int floorDiv(byte, int)
    {
        byte $b0;
        int $i1, $i2, $i3;

        $b0 := @parameter0: byte;

        $i2 := @parameter1: int;

        $i3 = $b0 / $i2;

        $i1 = $b0 ^ $i2;

        if $i1 >= 0 goto label1;

        $i2 = $i2 * $i3;

        if $i2 == $b0 goto label1;

        $i2 = $i3 + -1;

        return $i2;

     label1:
        return $i3;
    }

    private static final int floorDiv(byte, short)
    {
        byte $b0;
        short $s1, $s2;
        int $i3, $i4;

        $b0 := @parameter0: byte;

        $s2 := @parameter1: short;

        $i3 = $b0 / $s2;

        $s1 = $b0 ^ $s2;

        if $s1 >= 0 goto label1;

        $i4 = $s2 * $i3;

        if $i4 == $b0 goto label1;

        $i3 = $i3 + -1;

     label1:
        return $i3;
    }

    private static final int floorDiv(int, byte)
    {
        int $i0, $i1, $i3;
        byte $b2;

        $i0 := @parameter0: int;

        $b2 := @parameter1: byte;

        $i3 = $i0 / $b2;

        $i1 = $i0 ^ $b2;

        if $i1 >= 0 goto label1;

        $i1 = $b2 * $i3;

        if $i1 == $i0 goto label1;

        $i0 = $i3 + -1;

        return $i0;

     label1:
        return $i3;
    }

    private static final int floorDiv(int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i2 := @parameter1: int;

        $i3 = $i0 / $i2;

        $i1 = $i0 ^ $i2;

        if $i1 >= 0 goto label1;

        $i2 = $i2 * $i3;

        if $i2 == $i0 goto label1;

        $i0 = $i3 + -1;

        return $i0;

     label1:
        return $i3;
    }

    private static final int floorDiv(int, short)
    {
        int $i0, $i1, $i3;
        short $s2;

        $i0 := @parameter0: int;

        $s2 := @parameter1: short;

        $i3 = $i0 / $s2;

        $i1 = $i0 ^ $s2;

        if $i1 >= 0 goto label1;

        $i1 = $s2 * $i3;

        if $i1 == $i0 goto label1;

        $i0 = $i3 + -1;

        return $i0;

     label1:
        return $i3;
    }

    private static final int floorDiv(short, byte)
    {
        short $s0, $s1;
        byte $b2;
        int $i3, $i4;

        $s0 := @parameter0: short;

        $b2 := @parameter1: byte;

        $i3 = $s0 / $b2;

        $s1 = $s0 ^ $b2;

        if $s1 >= 0 goto label1;

        $i4 = $b2 * $i3;

        if $i4 == $s0 goto label1;

        $i3 = $i3 + -1;

     label1:
        return $i3;
    }

    private static final int floorDiv(short, int)
    {
        short $s0;
        int $i1, $i2, $i3;

        $s0 := @parameter0: short;

        $i2 := @parameter1: int;

        $i3 = $s0 / $i2;

        $i1 = $s0 ^ $i2;

        if $i1 >= 0 goto label1;

        $i2 = $i2 * $i3;

        if $i2 == $s0 goto label1;

        $i2 = $i3 + -1;

        return $i2;

     label1:
        return $i3;
    }

    private static final int floorDiv(short, short)
    {
        short $s0, $s1, $s2;
        int $i3, $i4;

        $s0 := @parameter0: short;

        $s2 := @parameter1: short;

        $i3 = $s0 / $s2;

        $s1 = $s0 ^ $s2;

        if $s1 >= 0 goto label1;

        $i4 = $s2 * $i3;

        if $i4 == $s0 goto label1;

        $i3 = $i3 + -1;

     label1:
        return $i3;
    }

    private static final long floorDiv(byte, long)
    {
        long $l0, $l1, $l3, $l4;
        byte $b2;

        $b2 := @parameter0: byte;

        $l3 := @parameter1: long;

        $l0 = (long) $b2;

        $l4 = $l0 / $l3;

        $l1 = $l0 ^ $l3;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $l3 = $l3 * $l4;

        $b2 = $l3 cmp $l0;

        if $b2 == 0 goto label1;

        $l3 = $l4 + -1L;

        return $l3;

     label1:
        return $l4;
    }

    private static final long floorDiv(int, long)
    {
        long $l0, $l1, $l3, $l4;
        int $i2;
        byte $b5;

        $i2 := @parameter0: int;

        $l3 := @parameter1: long;

        $l0 = (long) $i2;

        $l4 = $l0 / $l3;

        $l1 = $l0 ^ $l3;

        $b5 = $l1 cmp 0L;

        if $b5 >= 0 goto label1;

        $l3 = $l3 * $l4;

        $b5 = $l3 cmp $l0;

        if $b5 == 0 goto label1;

        $l3 = $l4 + -1L;

        return $l3;

     label1:
        return $l4;
    }

    private static final long floorDiv(long, byte)
    {
        long $l0, $l1, $l3, $l4;
        byte $b2;

        $l1 := @parameter0: long;

        $b2 := @parameter1: byte;

        $l3 = (long) $b2;

        $l4 = $l1 / $l3;

        $l0 = $l1 ^ $l3;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $l0 = $l3 * $l4;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $l1 = $l4 + -1L;

        return $l1;

     label1:
        return $l4;
    }

    private static final long floorDiv(long, int)
    {
        long $l0, $l1, $l3, $l4;
        int $i2;
        byte $b5;

        $l1 := @parameter0: long;

        $i2 := @parameter1: int;

        $l3 = (long) $i2;

        $l4 = $l1 / $l3;

        $l0 = $l1 ^ $l3;

        $b5 = $l0 cmp 0L;

        if $b5 >= 0 goto label1;

        $l0 = $l3 * $l4;

        $b5 = $l0 cmp $l1;

        if $b5 == 0 goto label1;

        $l1 = $l4 + -1L;

        return $l1;

     label1:
        return $l4;
    }

    private static final long floorDiv(long, long)
    {
        byte $b0;
        long $l1, $l2, $l3, $l4;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l3 = $l1 / $l2;

        $l4 = $l1 ^ $l2;

        $b0 = $l4 cmp 0L;

        if $b0 >= 0 goto label1;

        $l2 = $l2 * $l3;

        $b0 = $l2 cmp $l1;

        if $b0 == 0 goto label1;

        $l1 = $l3 + -1L;

        return $l1;

     label1:
        return $l3;
    }

    private static final long floorDiv(long, short)
    {
        long $l0, $l1, $l3, $l4;
        short $s2;
        byte $b5;

        $l1 := @parameter0: long;

        $s2 := @parameter1: short;

        $l3 = (long) $s2;

        $l4 = $l1 / $l3;

        $l0 = $l1 ^ $l3;

        $b5 = $l0 cmp 0L;

        if $b5 >= 0 goto label1;

        $l0 = $l3 * $l4;

        $b5 = $l0 cmp $l1;

        if $b5 == 0 goto label1;

        $l1 = $l4 + -1L;

        return $l1;

     label1:
        return $l4;
    }

    private static final long floorDiv(short, long)
    {
        long $l0, $l1, $l3, $l4;
        short $s2;
        byte $b5;

        $s2 := @parameter0: short;

        $l3 := @parameter1: long;

        $l0 = (long) $s2;

        $l4 = $l0 / $l3;

        $l1 = $l0 ^ $l3;

        $b5 = $l1 cmp 0L;

        if $b5 >= 0 goto label1;

        $l3 = $l3 * $l4;

        $b5 = $l3 cmp $l0;

        if $b5 == 0 goto label1;

        $l3 = $l4 + -1L;

        return $l3;

     label1:
        return $l4;
    }

    private static final byte mod(byte, byte)
    {
        byte $b0, $b1;
        int $i2, $i3, $i4;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $i2 = $b0 % $b1;

        $i3 = $i2 ^ $b1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i3 = $b1 & $i3;

        $i2 = $i2 + $i3;

        $b0 = (byte) $i2;

        return $b0;
    }

    private static final byte mod(int, byte)
    {
        int $i0, $i2, $i3;
        byte $b1;

        $i0 := @parameter0: int;

        $b1 := @parameter1: byte;

        $i0 = $i0 % $b1;

        $i2 = $i0 ^ $b1;

        $i3 = neg $i0;

        $i3 = $i3 | $i0;

        $i2 = $i2 & $i3;

        $i2 = $i2 >> 31;

        $i2 = $b1 & $i2;

        $i0 = $i0 + $i2;

        $b1 = (byte) $i0;

        return $b1;
    }

    private static final byte mod(long, byte)
    {
        int $i0;
        long $l1, $l3, $l4, $l5;
        byte $b2;

        $l1 := @parameter0: long;

        $b2 := @parameter1: byte;

        $l3 = (long) $b2;

        $l1 = $l1 % $l3;

        $l4 = $l1 ^ $l3;

        $l5 = neg $l1;

        $l5 = $l5 | $l1;

        $l4 = $l4 & $l5;

        $l4 = $l4 >> 63;

        $l3 = $l3 & $l4;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $b2 = (byte) $i0;

        return $b2;
    }

    private static final byte mod(short, byte)
    {
        short $s0;
        byte $b1;
        int $i2, $i3, $i4;

        $s0 := @parameter0: short;

        $b1 := @parameter1: byte;

        $i2 = $s0 % $b1;

        $i3 = $i2 ^ $b1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i3 = $b1 & $i3;

        $i2 = $i2 + $i3;

        $b1 = (byte) $i2;

        return $b1;
    }

    private static final double mod(double, double)
    {
        double $d0, $d1, $d2, $d3;
        byte $b0;
        boolean $z0, $z1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = $d1 % $d0;

        $z0 = 1;

        $b0 = $d1 cmpg 0.0;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label5;

        $d2 = staticinvoke <java.lang.Math: double signum(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        $b0 = $d2 cmpg $d3;

        if $b0 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        $d1 = $d1 + $d0;

     label5:
        return $d1;
    }

    private static final double mod(double, float)
    {
        double $d0, $d1, $d2, $d3;
        byte $b0;
        float $f0;
        boolean $z0, $z1;

        $d1 := @parameter0: double;

        $f0 := @parameter1: float;

        $d0 = (double) $f0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d1 = $d1 % $d0;

        $z0 = 1;

        $b0 = $d1 cmpg 0.0;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label5;

        $d2 = staticinvoke <java.lang.Math: double signum(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        $b0 = $d2 cmpg $d3;

        if $b0 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d1 = $d1 + $d0;

     label5:
        return $d1;
    }

    private static final double mod(float, double)
    {
        double $d0, $d1, $d2, $d3;
        byte $b0;
        float $f0;
        boolean $z0, $z1;

        $f0 := @parameter0: float;

        $d0 := @parameter1: double;

        $d1 = (double) $f0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d1 = $d1 % $d0;

        $z0 = 1;

        $b0 = $d1 cmpg 0.0;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label5;

        $d2 = staticinvoke <java.lang.Math: double signum(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        $b0 = $d2 cmpg $d3;

        if $b0 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        $d0 = $d1 + $d0;

        return $d0;

     label5:
        return $d1;
    }

    private static final float mod(float, float)
    {
        float $f0, $f1, $f2, $f3;
        boolean $z0, $z1;
        byte $b0;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = $f1 % $f0;

        $z0 = 1;

        $b0 = $f1 cmpg 0.0F;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label5;

        $f2 = staticinvoke <java.lang.Math: float signum(float)>($f1);

        $f3 = staticinvoke <java.lang.Math: float signum(float)>($f0);

        $b0 = $f2 cmpg $f3;

        if $b0 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        $f1 = $f1 + $f0;

     label5:
        return $f1;
    }

    private static final int mod(byte, int)
    {
        byte $b0;
        int $i1, $i2, $i3, $i4;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $i2 = $b0 % $i1;

        $i3 = $i2 ^ $i1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i1 = $i1 & $i3;

        $i1 = $i2 + $i1;

        return $i1;
    }

    private static final int mod(int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 % $i1;

        $i2 = $i0 ^ $i1;

        $i3 = neg $i0;

        $i3 = $i3 | $i0;

        $i2 = $i2 & $i3;

        $i2 = $i2 >> 31;

        $i1 = $i1 & $i2;

        $i0 = $i0 + $i1;

        return $i0;
    }

    private static final int mod(long, int)
    {
        int $i0;
        long $l1, $l2, $l3, $l4;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        $l2 = (long) $i0;

        $l1 = $l1 % $l2;

        $l3 = $l1 ^ $l2;

        $l4 = neg $l1;

        $l4 = $l4 | $l1;

        $l3 = $l3 & $l4;

        $l3 = $l3 >> 63;

        $l2 = $l2 & $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        return $i0;
    }

    private static final int mod(short, int)
    {
        short $s0;
        int $i1, $i2, $i3, $i4;

        $s0 := @parameter0: short;

        $i1 := @parameter1: int;

        $i2 = $s0 % $i1;

        $i3 = $i2 ^ $i1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i1 = $i1 & $i3;

        $i1 = $i2 + $i1;

        return $i1;
    }

    private static final long mod(byte, long)
    {
        byte $b0;
        long $l1, $l2, $l3, $l4;

        $b0 := @parameter0: byte;

        $l1 := @parameter1: long;

        $l2 = (long) $b0;

        $l2 = $l2 % $l1;

        $l3 = $l2 ^ $l1;

        $l4 = neg $l2;

        $l4 = $l4 | $l2;

        $l3 = $l3 & $l4;

        $l3 = $l3 >> 63;

        $l1 = $l1 & $l3;

        $l1 = $l2 + $l1;

        return $l1;
    }

    private static final long mod(int, long)
    {
        int $i0;
        long $l1, $l2, $l3, $l4;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 = (long) $i0;

        $l2 = $l2 % $l1;

        $l3 = $l2 ^ $l1;

        $l4 = neg $l2;

        $l4 = $l4 | $l2;

        $l3 = $l3 & $l4;

        $l3 = $l3 >> 63;

        $l1 = $l1 & $l3;

        $l1 = $l2 + $l1;

        return $l1;
    }

    private static final long mod(long, long)
    {
        long $l0, $l1, $l2, $l3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = $l0 % $l1;

        $l2 = $l0 ^ $l1;

        $l3 = neg $l0;

        $l3 = $l3 | $l0;

        $l2 = $l2 & $l3;

        $l2 = $l2 >> 63;

        $l1 = $l1 & $l2;

        $l0 = $l0 + $l1;

        return $l0;
    }

    private static final long mod(short, long)
    {
        short $s0;
        long $l1, $l2, $l3, $l4;

        $s0 := @parameter0: short;

        $l1 := @parameter1: long;

        $l2 = (long) $s0;

        $l2 = $l2 % $l1;

        $l3 = $l2 ^ $l1;

        $l4 = neg $l2;

        $l4 = $l4 | $l2;

        $l3 = $l3 & $l4;

        $l3 = $l3 >> 63;

        $l1 = $l1 & $l3;

        $l1 = $l2 + $l1;

        return $l1;
    }

    private static final short mod(byte, short)
    {
        byte $b0;
        short $s1;
        int $i2, $i3, $i4;

        $b0 := @parameter0: byte;

        $s1 := @parameter1: short;

        $i2 = $b0 % $s1;

        $i3 = $i2 ^ $s1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i3 = $s1 & $i3;

        $i2 = $i2 + $i3;

        $s1 = (short) $i2;

        return $s1;
    }

    private static final short mod(int, short)
    {
        int $i0, $i2, $i3;
        short $s1;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $i0 = $i0 % $s1;

        $i2 = $i0 ^ $s1;

        $i3 = neg $i0;

        $i3 = $i3 | $i0;

        $i2 = $i2 & $i3;

        $i2 = $i2 >> 31;

        $i2 = $s1 & $i2;

        $i0 = $i0 + $i2;

        $s1 = (short) $i0;

        return $s1;
    }

    private static final short mod(long, short)
    {
        int $i0;
        long $l1, $l3, $l4, $l5;
        short $s2;

        $l1 := @parameter0: long;

        $s2 := @parameter1: short;

        $l3 = (long) $s2;

        $l1 = $l1 % $l3;

        $l4 = $l1 ^ $l3;

        $l5 = neg $l1;

        $l5 = $l5 | $l1;

        $l4 = $l4 & $l5;

        $l4 = $l4 >> 63;

        $l3 = $l3 & $l4;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $s2 = (short) $i0;

        return $s2;
    }

    private static final short mod(short, short)
    {
        short $s0, $s1;
        int $i2, $i3, $i4;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $i2 = $s0 % $s1;

        $i3 = $i2 ^ $s1;

        $i4 = neg $i2;

        $i4 = $i4 | $i2;

        $i3 = $i3 & $i4;

        $i3 = $i3 >> 31;

        $i3 = $s1 & $i3;

        $i2 = $i2 + $i3;

        $s0 = (short) $i2;

        return $s0;
    }

