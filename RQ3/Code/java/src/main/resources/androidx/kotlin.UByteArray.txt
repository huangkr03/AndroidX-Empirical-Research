kotlin.UByteArray
<kotlin.UByteArray: byte[] storage>
    private void <init>(byte[])
    {
        kotlin.UByteArray $r0;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: byte[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.UByteArray: byte[] storage> = $r1;

        return;
    }

    public static final kotlin.UByteArray box-impl(byte[])
    {
        byte[] $r0;
        kotlin.UByteArray $r1;

        $r0 := @parameter0: byte[];

        $r1 = new kotlin.UByteArray;

        specialinvoke $r1.<kotlin.UByteArray: void <init>(byte[])>($r0);

        return $r1;
    }

    public static byte[] constructor-impl(int)
    {
        byte[] $r0;
        int $i0;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[$i0];

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    public static byte[] constructor-impl(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "storage");

        return $r0;
    }

    public static boolean contains-7apg3OU(byte[], byte)
    {
        byte $b0;
        boolean $z0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(byte[],byte)>($r0, $b0);

        return $z0;
    }

    public static boolean containsAll-impl(byte[], java.util.Collection)
    {
        byte[] $r0;
        boolean $z0, $z1;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        kotlin.UByte $r4;
        byte $b0;
        java.lang.Iterable r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        $z1 = 1;

        if $z0 == 0 goto label2;

     label1:
        goto label6;

     label2:
        r5 = (java.lang.Iterable) $r1;

        $r2 = interfaceinvoke r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r3 instanceof kotlin.UByte;

        if $z0 == 0 goto label4;

        $r4 = (kotlin.UByte) $r3;

        $b0 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(byte[],byte)>($r0, $b0);

        if $z0 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 != 0 goto label3;

        $z1 = 0;

     label6:
        return $z1;
    }

    public static boolean equals-impl(byte[], java.lang.Object)
    {
        boolean $z0;
        byte[] $r0, $r3;
        java.lang.Object $r1;
        kotlin.UByteArray $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof kotlin.UByteArray;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (kotlin.UByteArray) $r1;

        $r3 = virtualinvoke $r2.<kotlin.UByteArray: byte[] unbox-impl()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static final boolean equals-impl0(byte[], byte[])
    {
        byte[] $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: byte[];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $z0;
    }

    public static final byte get-w2LRezQ(byte[], int)
    {
        int $i0;
        byte $b1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $b1 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b1);

        return $b1;
    }

    public static int getSize-impl(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        return $i0;
    }

    public static void getStorage$annotations()
    {
        return;
    }

    public static int hashCode-impl(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r0);

        return $i0;
    }

    public static boolean isEmpty-impl(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Iterator iterator-impl(byte[])
    {
        byte[] $r0;
        kotlin.UByteArray$Iterator $r1;

        $r0 := @parameter0: byte[];

        $r1 = new kotlin.UByteArray$Iterator;

        specialinvoke $r1.<kotlin.UByteArray$Iterator: void <init>(byte[])>($r0);

        return $r1;
    }

    public static final void set-VurrAj0(byte[], int, byte)
    {
        byte[] $r0;
        int $i0;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 := @parameter2: byte;

        $r0[$i0] = $b1;

        return;
    }

    public static java.lang.String toString-impl(byte[])
    {
        byte[] $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UByteArray(storage=");

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public volatile boolean add(java.lang.Object)
    {
        kotlin.UByteArray $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add-7apg3OU(byte)
    {
        kotlin.UByteArray $r0;
        byte $b0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.UByteArray;

        $b0 := @parameter0: byte;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.UByteArray $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        kotlin.UByteArray $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        kotlin.UByteArray $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlin.UByte $r2;
        byte $b0;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.UByte;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (kotlin.UByte) $r1;

        $b0 = virtualinvoke $r2.<kotlin.UByte: byte unbox-impl()>();

        $z0 = virtualinvoke $r0.<kotlin.UByteArray: boolean contains-7apg3OU(byte)>($b0);

        return $z0;
    }

    public boolean contains-7apg3OU(byte)
    {
        kotlin.UByteArray $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;

        $r0 := @this: kotlin.UByteArray;

        $b0 := @parameter0: byte;

        $r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        $z0 = staticinvoke <kotlin.UByteArray: boolean contains-7apg3OU(byte[],byte)>($r1, $b0);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        kotlin.UByteArray $r0;
        boolean $z0;
        java.util.Collection $r1;
        byte[] $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.UByteArray: byte[] storage>;

        $z0 = staticinvoke <kotlin.UByteArray: boolean containsAll-impl(byte[],java.util.Collection)>($r2, $r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.UByteArray $r0;
        byte[] $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.UByteArray;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        $z0 = staticinvoke <kotlin.UByteArray: boolean equals-impl(byte[],java.lang.Object)>($r1, $r2);

        return $z0;
    }

    public int getSize()
    {
        kotlin.UByteArray $r0;
        int $i0;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        return $i0;
    }

    public int hashCode()
    {
        kotlin.UByteArray $r0;
        int $i0;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        $i0 = staticinvoke <kotlin.UByteArray: int hashCode-impl(byte[])>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.UByteArray $r0;
        boolean $z0;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.UByteArray $r0;
        java.util.Iterator $r1;
        byte[] $r2;

        $r0 := @this: kotlin.UByteArray;

        $r2 = $r0.<kotlin.UByteArray: byte[] storage>;

        $r1 = staticinvoke <kotlin.UByteArray: java.util.Iterator iterator-impl(byte[])>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.UByteArray $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.UByteArray $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.UByteArray $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public volatile int size()
    {
        kotlin.UByteArray $r0;
        int $i0;

        $r0 := @this: kotlin.UByteArray;

        $i0 = virtualinvoke $r0.<kotlin.UByteArray: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.UByteArray $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.UByteArray $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.UByteArray;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r0, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.UByteArray $r0;
        java.lang.String $r1;
        byte[] $r2;

        $r0 := @this: kotlin.UByteArray;

        $r2 = $r0.<kotlin.UByteArray: byte[] storage>;

        $r1 = staticinvoke <kotlin.UByteArray: java.lang.String toString-impl(byte[])>($r2);

        return $r1;
    }

    public final byte[] unbox-impl()
    {
        kotlin.UByteArray $r0;
        byte[] r1;

        $r0 := @this: kotlin.UByteArray;

        r1 = $r0.<kotlin.UByteArray: byte[] storage>;

        return r1;
    }

kotlin.UByteArray$Iterator
<kotlin.UByteArray$Iterator: byte[] array>
<kotlin.UByteArray$Iterator: int index>
    public void <init>(byte[])
    {
        kotlin.UByteArray$Iterator $r0;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray$Iterator;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.UByteArray$Iterator: byte[] array> = $r1;

        return;
    }

    public boolean hasNext()
    {
        kotlin.UByteArray$Iterator $r0;
        int $i0, $i1;
        byte[] $r1;

        $r0 := @this: kotlin.UByteArray$Iterator;

        $i0 = $r0.<kotlin.UByteArray$Iterator: int index>;

        $r1 = $r0.<kotlin.UByteArray$Iterator: byte[] array>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile java.lang.Object next()
    {
        kotlin.UByteArray$Iterator $r0;
        byte $b0;
        kotlin.UByte $r1;

        $r0 := @this: kotlin.UByteArray$Iterator;

        $b0 = virtualinvoke $r0.<kotlin.UByteArray$Iterator: byte next-w2LRezQ()>();

        $r1 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r1;
    }

    public byte next-w2LRezQ()
    {
        kotlin.UByteArray$Iterator $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        java.util.NoSuchElementException $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.UByteArray$Iterator;

        $i0 = $r0.<kotlin.UByteArray$Iterator: int index>;

        $r1 = $r0.<kotlin.UByteArray$Iterator: byte[] array>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        $i1 = $i0 + 1;

        $r0.<kotlin.UByteArray$Iterator: int index> = $i1;

        $b2 = $r1[$i0];

        $b2 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b2);

        return $b2;

     label1:
        $r2 = new java.util.NoSuchElementException;

        $i0 = $r0.<kotlin.UByteArray$Iterator: int index>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public void remove()
    {
        kotlin.UByteArray$Iterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.UByteArray$Iterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

