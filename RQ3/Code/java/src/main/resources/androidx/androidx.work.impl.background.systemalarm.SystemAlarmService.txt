androidx.work.impl.background.systemalarm.SystemAlarmService
<androidx.work.impl.background.systemalarm.SystemAlarmService: java.lang.String TAG>
<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>
<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown>
    public void <init>()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        specialinvoke r0.<androidx.lifecycle.LifecycleService: void <init>()>();

        return;
    }

    public void onCreate()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        specialinvoke r0.<androidx.lifecycle.LifecycleService: void onCreate()>();

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: void initializeDispatcher()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown> = 0;

        return;
    }

    public void onDestroy()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        specialinvoke r0.<androidx.lifecycle.LifecycleService: void onDestroy()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown> = 1;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        virtualinvoke $r1.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void onDestroy()>();

        return;
    }

    public int onStartCommand(android.content.Intent, int, int)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;
        android.content.Intent r1;
        int i0, i1;
        boolean $z0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r2, $r5;
        androidx.work.Logger $r3;
        java.lang.String $r4;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<androidx.lifecycle.LifecycleService: int onStartCommand(android.content.Intent,int,int)>(r1, i0, i1);

        $z0 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown>;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.background.systemalarm.SystemAlarmService: java.lang.String TAG>;

        virtualinvoke $r3.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r4, "Re-initializing SystemAlarmDispatcher after a request to shut-down.");

        $r5 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        virtualinvoke $r5.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void onDestroy()>();

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: void initializeDispatcher()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown> = 0;

     label1:
        if r1 == null goto label2;

        $r2 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        virtualinvoke $r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: boolean add(android.content.Intent,int)>(r1, i1);

     label2:
        return 3;
    }

    public void onAllCommandsCompleted()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;
        androidx.work.Logger $r1;
        java.lang.String $r2;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: boolean mIsShutdown> = 1;

        $r1 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.background.systemalarm.SystemAlarmService: java.lang.String TAG>;

        virtualinvoke $r1.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r2, "All commands completed in dispatcher");

        staticinvoke <androidx.work.impl.utils.WakeLocks: void checkWakeLocks()>();

        virtualinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: void stopSelf()>();

        return;
    }

    private void initializeDispatcher()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmService r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r2, r3;
        android.content.Context r4;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmService;

        r3 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r4 = (android.content.Context) r0;

        specialinvoke r3.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void <init>(android.content.Context)>(r4);

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher> = r3;

        $r2 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmService: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        virtualinvoke $r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void setCompletedListener(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemAlarmService");

        <androidx.work.impl.background.systemalarm.SystemAlarmService: java.lang.String TAG> = $r0;

        return;
    }

