androidx.media2.session.MediaController
<androidx.media2.session.MediaController: java.lang.String TAG>
<androidx.media2.session.MediaController: java.lang.Object mLock>
<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl mImpl>
<androidx.media2.session.MediaController: boolean mClosed>
<androidx.media2.session.MediaController: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback>
<androidx.media2.session.MediaController: java.util.concurrent.Executor mPrimaryCallbackExecutor>
<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>
<androidx.media2.session.MediaController: java.lang.Long mTimeDiff>
    void <init>(android.content.Context, androidx.media2.session.SessionToken, android.os.Bundle, java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController r0;
        android.content.Context r1;
        androidx.media2.session.SessionToken r2;
        android.os.Bundle r3;
        java.util.concurrent.Executor r4;
        androidx.media2.session.MediaController$ControllerCallback r5;
        java.lang.Object r6, $r8, $r10;
        java.lang.Throwable r7, $r14;
        java.util.ArrayList $r9;
        androidx.media2.session.MediaController$MediaControllerImpl $r11;
        java.lang.NullPointerException $r12, $r13;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media2.session.SessionToken;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.media2.session.MediaController$ControllerCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<androidx.media2.session.MediaController: java.lang.Object mLock> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks> = $r9;

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("context shouldn\'t be null");

        throw $r13;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("token shouldn\'t be null");

        throw $r12;

     label2:
        r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback> = r5;

        r0.<androidx.media2.session.MediaController: java.util.concurrent.Executor mPrimaryCallbackExecutor> = r4;

        $r10 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r6 = $r10;

        entermonitor $r10;

     label3:
        $r11 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl createImpl(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle)>(r1, r2, r3);

        r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl mImpl> = $r11;

        exitmonitor r6;

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        r7 = $r14;

        exitmonitor r6;

     label6:
        throw r7;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void <init>(android.content.Context, android.support.v4.media.session.MediaSessionCompat$Token, android.os.Bundle, java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController r0;
        android.content.Context r1;
        android.support.v4.media.session.MediaSessionCompat$Token r2;
        android.os.Bundle r3;
        java.util.concurrent.Executor r4;
        androidx.media2.session.MediaController$ControllerCallback r5;
        java.lang.Object $r6;
        java.util.ArrayList $r7;
        androidx.media2.session.SessionToken$OnSessionTokenCreatedListener $r8;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.support.v4.media.session.MediaSessionCompat$Token;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.media2.session.MediaController$ControllerCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.media2.session.MediaController: java.lang.Object mLock> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks> = $r7;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("context shouldn\'t be null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("token shouldn\'t be null");

        throw $r9;

     label2:
        r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback> = r5;

        r0.<androidx.media2.session.MediaController: java.util.concurrent.Executor mPrimaryCallbackExecutor> = r4;

        $r8 = dynamicinvoke "onSessionTokenCreated" <androidx.media2.session.SessionToken$OnSessionTokenCreatedListener (androidx.media2.session.MediaController,android.content.Context,android.os.Bundle)>(r0, r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.support.v4.media.session.MediaSessionCompat$Token,androidx.media2.session.SessionToken), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media2.session.MediaController: void lambda$new$1(android.content.Context,android.os.Bundle,android.support.v4.media.session.MediaSessionCompat$Token,androidx.media2.session.SessionToken)>, methodtype: void __METHODTYPE__(android.support.v4.media.session.MediaSessionCompat$Token,androidx.media2.session.SessionToken));

        staticinvoke <androidx.media2.session.SessionToken: void createSessionToken(android.content.Context,android.support.v4.media.session.MediaSessionCompat$Token,androidx.media2.session.SessionToken$OnSessionTokenCreatedListener)>(r1, r2, $r8);

        return;
    }

    androidx.media2.session.MediaController$MediaControllerImpl createImpl(android.content.Context, androidx.media2.session.SessionToken, android.os.Bundle)
    {
        androidx.media2.session.MediaController r0;
        android.content.Context r1;
        androidx.media2.session.SessionToken r2;
        android.os.Bundle r3;
        boolean $z0;
        androidx.media2.session.MediaControllerImplBase $r4;
        androidx.media2.session.MediaControllerImplLegacy $r5;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media2.session.SessionToken;

        r3 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r2.<androidx.media2.session.SessionToken: boolean isLegacySession()>();

        if $z0 == 0 goto label1;

        $r5 = new androidx.media2.session.MediaControllerImplLegacy;

        specialinvoke $r5.<androidx.media2.session.MediaControllerImplLegacy: void <init>(android.content.Context,androidx.media2.session.MediaController,androidx.media2.session.SessionToken)>(r1, r0, r2);

        return $r5;

     label1:
        $r4 = new androidx.media2.session.MediaControllerImplBase;

        specialinvoke $r4.<androidx.media2.session.MediaControllerImplBase: void <init>(android.content.Context,androidx.media2.session.MediaController,androidx.media2.session.SessionToken,android.os.Bundle)>(r1, r0, r2, r3);

        return $r4;
    }

    androidx.media2.session.MediaController$MediaControllerImpl getImpl()
    {
        androidx.media2.session.MediaController r0;
        java.lang.Object r1, $r2;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;

        r0 := @this: androidx.media2.session.MediaController;

        $r2 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl mImpl>;

        exitmonitor r1;

        return $r3;
    }

    public void close()
    {
        androidx.media2.session.MediaController r0;
        java.lang.Object r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3, r5;
        androidx.media2.session.MediaController$MediaControllerImpl r4;

        r0 := @this: androidx.media2.session.MediaController;

     label1:
        $r2 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $z0 = r0.<androidx.media2.session.MediaController: boolean mClosed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<androidx.media2.session.MediaController: boolean mClosed> = 1;

        r4 = r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl mImpl>;

        exitmonitor r1;

        goto label4;

     label4:
        if r4 == null goto label5;

        interfaceinvoke r4.<androidx.media2.session.MediaController$MediaControllerImpl: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        r5 = $r3;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    public androidx.media2.session.SessionToken getConnectedToken()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.session.SessionToken $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.SessionToken getConnectedToken()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public boolean isConnected()
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.MediaController$MediaControllerImpl r1;
        boolean $z0, $z1;

        r0 := @this: androidx.media2.session.MediaController;

        r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<androidx.media2.session.MediaController$MediaControllerImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public com.google.common.util.concurrent.ListenableFuture play()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture play()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture pause()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture pause()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture prepare()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture prepare()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture fastForward()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture fastForward()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture rewind()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture rewind()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture skipForward()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipForward()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture skipBackward()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipBackward()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture seekTo(long)
    {
        androidx.media2.session.MediaController r0;
        long l0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture seekTo(long)>(l0);

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture setVolumeTo(int, int)
    {
        androidx.media2.session.MediaController r0;
        int i0, i1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setVolumeTo(int,int)>(i0, i1);

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture adjustVolume(int, int)
    {
        androidx.media2.session.MediaController r0;
        int i0, i1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture adjustVolume(int,int)>(i0, i1);

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public android.app.PendingIntent getSessionActivity()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        android.app.PendingIntent $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: android.app.PendingIntent getSessionActivity()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public int getPlayerState()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getPlayerState()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public long getDuration()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        long $l0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $l0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: long getDuration()>();

        goto label2;

     label1:
        $l0 = -9223372036854775808L;

     label2:
        return $l0;
    }

    public long getCurrentPosition()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        long $l0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $l0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: long getCurrentPosition()>();

        goto label2;

     label1:
        $l0 = -9223372036854775808L;

     label2:
        return $l0;
    }

    public float getPlaybackSpeed()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        float $f0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $f0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: float getPlaybackSpeed()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public com.google.common.util.concurrent.ListenableFuture setPlaybackSpeed(float)
    {
        androidx.media2.session.MediaController r0;
        float f0;
        byte $b0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.media2.session.MediaController;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed must not be zero");

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setPlaybackSpeed(float)>(f0);

        return $r3;

     label2:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public int getBufferingState()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getBufferingState()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public long getBufferedPosition()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        long $l0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $l0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: long getBufferedPosition()>();

        goto label2;

     label1:
        $l0 = -9223372036854775808L;

     label2:
        return $l0;
    }

    public androidx.media2.session.MediaController$PlaybackInfo getPlaybackInfo()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.session.MediaController$PlaybackInfo $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.MediaController$PlaybackInfo getPlaybackInfo()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture setRating(java.lang.String, androidx.media2.common.Rating)
    {
        androidx.media2.session.MediaController r0;
        java.lang.String r1;
        androidx.media2.common.Rating r2;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaController$MediaControllerImpl $r4;
        java.lang.NullPointerException $r6, $r8;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media2.common.Rating;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("mediaId shouldn\'t be null");

        throw $r8;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mediaId shouldn\'t be empty");

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("rating shouldn\'t be null");

        throw $r6;

     label3:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z1 == 0 goto label4;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setRating(java.lang.String,androidx.media2.common.Rating)>(r1, r2);

        return $r5;

     label4:
        $r3 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture sendCustomCommand(androidx.media2.session.SessionCommand, android.os.Bundle)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.SessionCommand r1;
        android.os.Bundle r2;
        int $i0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaController$MediaControllerImpl $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.session.SessionCommand;

        r2 := @parameter1: android.os.Bundle;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("command shouldn\'t be null");

        throw $r7;

     label1:
        $i0 = virtualinvoke r1.<androidx.media2.session.SessionCommand: int getCommandCode()>();

        if $i0 == 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("command should be a custom command");

        throw $r6;

     label2:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture sendCustomCommand(androidx.media2.session.SessionCommand,android.os.Bundle)>(r1, r2);

        return $r5;

     label3:
        $r3 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public java.util.List getPlaylist()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        java.util.List $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: java.util.List getPlaylist()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture setPlaylist(java.util.List, androidx.media2.common.MediaMetadata)
    {
        androidx.media2.session.MediaController r0;
        java.util.List r1;
        androidx.media2.common.MediaMetadata r2;
        int $i0, i1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaController$MediaControllerImpl $r4;
        java.lang.Object $r6;
        java.lang.CharSequence $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.NullPointerException $r13;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.media2.common.MediaMetadata;

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("list shouldn\'t be null");

        throw $r13;

     label1:
        i1 = 0;

     label2:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.CharSequence) $r6;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

        if $z1 == 0 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("list shouldn\'t contain empty id, index=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setPlaylist(java.util.List,androidx.media2.common.MediaMetadata)>(r1, r2);

        return $r5;

     label5:
        $r3 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture setMediaItem(java.lang.String)
    {
        androidx.media2.session.MediaController r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mediaId shouldn\'t be empty");

        throw $r5;

     label1:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setMediaItem(java.lang.String)>(r1);

        return $r4;

     label2:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture setMediaUri(android.net.Uri, android.os.Bundle)
    {
        androidx.media2.session.MediaController r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaController$MediaControllerImpl $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("mediaUri shouldn\'t be null");

        throw $r6;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setMediaUri(android.net.Uri,android.os.Bundle)>(r1, r2);

        return $r5;

     label2:
        $r3 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture updatePlaylistMetadata(androidx.media2.common.MediaMetadata)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.common.MediaMetadata r1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.common.MediaMetadata;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture updatePlaylistMetadata(androidx.media2.common.MediaMetadata)>(r1);

        return $r4;

     label1:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public androidx.media2.common.MediaMetadata getPlaylistMetadata()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.common.MediaMetadata $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.MediaMetadata getPlaylistMetadata()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture addPlaylistItem(int, java.lang.String)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index shouldn\'t be negative");

        throw $r6;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mediaId shouldn\'t be empty");

        throw $r5;

     label2:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture addPlaylistItem(int,java.lang.String)>(i0, r1);

        return $r4;

     label3:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture removePlaylistItem(int)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index shouldn\'t be negative");

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture removePlaylistItem(int)>(i0);

        return $r3;

     label2:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture replacePlaylistItem(int, java.lang.String)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index shouldn\'t be negative");

        throw $r6;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mediaId shouldn\'t be empty");

        throw $r5;

     label2:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture replacePlaylistItem(int,java.lang.String)>(i0, r1);

        return $r4;

     label3:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture movePlaylistItem(int, int)
    {
        androidx.media2.session.MediaController r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("indexes shouldn\'t be negative");

        throw $r1;

     label2:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture movePlaylistItem(int,int)>(i0, i1);

        return $r4;

     label3:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public androidx.media2.common.MediaItem getCurrentMediaItem()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.common.MediaItem $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.MediaItem getCurrentMediaItem()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public int getCurrentMediaItemIndex()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getCurrentMediaItemIndex()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    public int getPreviousMediaItemIndex()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getPreviousMediaItemIndex()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    public int getNextMediaItemIndex()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getNextMediaItemIndex()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    public com.google.common.util.concurrent.ListenableFuture skipToPreviousPlaylistItem()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToPreviousItem()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture skipToNextPlaylistItem()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToNextItem()>();

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture skipToPlaylistItem(int)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index shouldn\'t be negative");

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToPlaylistItem(int)>(i0);

        return $r3;

     label2:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public int getRepeatMode()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getRepeatMode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public com.google.common.util.concurrent.ListenableFuture setRepeatMode(int)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setRepeatMode(int)>(i0);

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public int getShuffleMode()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $i0 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: int getShuffleMode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public com.google.common.util.concurrent.ListenableFuture setShuffleMode(int)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r3;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r3 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setShuffleMode(int)>(i0);

        return $r3;

     label1:
        $r1 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r1;
    }

    public androidx.media2.common.VideoSize getVideoSize()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.common.VideoSize $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.VideoSize getVideoSize()>();

        goto label2;

     label1:
        $r2 = new androidx.media2.common.VideoSize;

        specialinvoke $r2.<androidx.media2.common.VideoSize: void <init>(int,int)>(0, 0);

     label2:
        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture setSurface(android.view.Surface)
    {
        androidx.media2.session.MediaController r0;
        android.view.Surface r1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaController$MediaControllerImpl $r3;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.view.Surface;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setSurface(android.view.Surface)>(r1);

        return $r4;

     label1:
        $r2 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public java.util.List getTracks()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        java.util.List $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: java.util.List getTracks()>();

        goto label2;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture selectTrack(androidx.media2.common.SessionPlayer$TrackInfo)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.common.SessionPlayer$TrackInfo r1;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;
        java.lang.NullPointerException $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.common.SessionPlayer$TrackInfo;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("TrackInfo shouldn\'t be null");

        throw $r3;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture selectTrack(androidx.media2.common.SessionPlayer$TrackInfo)>(r1);

        goto label3;

     label2:
        $r4 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

     label3:
        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture deselectTrack(androidx.media2.common.SessionPlayer$TrackInfo)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.common.SessionPlayer$TrackInfo r1;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r2;
        java.lang.NullPointerException $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.common.SessionPlayer$TrackInfo;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("TrackInfo shouldn\'t be null");

        throw $r3;

     label1:
        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r4 = interfaceinvoke $r2.<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture deselectTrack(androidx.media2.common.SessionPlayer$TrackInfo)>(r1);

        goto label3;

     label2:
        $r4 = staticinvoke <androidx.media2.session.MediaController: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

     label3:
        return $r4;
    }

    public androidx.media2.common.SessionPlayer$TrackInfo getSelectedTrack(int)
    {
        androidx.media2.session.MediaController r0;
        int i0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.common.SessionPlayer$TrackInfo $r2;

        r0 := @this: androidx.media2.session.MediaController;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.SessionPlayer$TrackInfo getSelectedTrack(int)>(i0);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setTimeDiff(java.lang.Long)
    {
        androidx.media2.session.MediaController r0;
        java.lang.Long r1;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: java.lang.Long;

        r0.<androidx.media2.session.MediaController: java.lang.Long mTimeDiff> = r1;

        return;
    }

    public void registerExtraCallback(java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController r0;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaController$ControllerCallback r2;
        java.lang.Object r3, $r7, $r11, $r12;
        java.util.Iterator r4;
        androidx.core.util.Pair r5, $r9;
        java.lang.Throwable r6, $r15;
        java.util.List $r8, $r10;
        boolean $z0, z2;
        java.lang.NullPointerException $r13, $r14;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallback;

        if r1 != null goto label01;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("executor shouldn\'t be null");

        throw $r14;

     label01:
        if r2 != null goto label02;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("callback shouldn\'t be null");

        throw $r13;

     label02:
        z2 = 0;

        $r7 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.core.util.Pair) $r11;

        $r12 = r5.<androidx.core.util.Pair: java.lang.Object first>;

        if $r12 != r2 goto label05;

        z2 = 1;

        goto label06;

     label05:
        goto label04;

     label06:
        if z2 != 0 goto label07;

        $r10 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        $r9 = new androidx.core.util.Pair;

        specialinvoke $r9.<androidx.core.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r1);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

     label07:
        exitmonitor r3;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

        exitmonitor r3;

     label10:
        throw r6;

     label11:
        if z2 == 0 goto label12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaController", "registerExtraCallback: the callback already exists");

     label12:
        return;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void unregisterExtraCallback(androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.MediaController$ControllerCallback r1;
        java.lang.Object r2, $r4, $r7, $r9;
        java.lang.Throwable r3, $r13;
        java.util.List $r5, $r6, $r10;
        int $i0, i2;
        androidx.core.util.Pair $r8;
        java.lang.NullPointerException $r12;
        boolean z0;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.session.MediaController$ControllerCallback;

        if r1 != null goto label01;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("callback shouldn\'t be null");

        throw $r12;

     label01:
        z0 = 0;

        $r4 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label02:
        $r5 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i2 = $i0 - 1;

     label03:
        if i2 < 0 goto label05;

        $r6 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i2);

        $r8 = (androidx.core.util.Pair) $r7;

        $r9 = $r8.<androidx.core.util.Pair: java.lang.Object first>;

        if $r9 != r1 goto label04;

        z0 = 1;

        $r10 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        interfaceinvoke $r10.<java.util.List: java.lang.Object remove(int)>(i2);

        goto label05;

     label04:
        i2 = i2 + -1;

        goto label03;

     label05:
        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r2;

     label08:
        throw r3;

     label09:
        if z0 != 0 goto label10;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaController", "unregisterExtraCallback: no such callback found");

     label10:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public java.util.List getExtraControllerCallbacks()
    {
        androidx.media2.session.MediaController r0;
        java.util.ArrayList r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.util.List $r6;

        r0 := @this: androidx.media2.session.MediaController;

        $r4 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<androidx.media2.session.MediaController: java.util.List mExtraControllerCallbacks>;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r1 = $r5;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public androidx.media2.session.SessionCommandGroup getAllowedCommands()
    {
        androidx.media2.session.MediaController r0;
        boolean $z0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.session.SessionCommandGroup $r2;

        r0 := @this: androidx.media2.session.MediaController;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaController: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = interfaceinvoke $r1.<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.SessionCommandGroup getAllowedCommands()>();

        return $r2;
    }

    private static com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()
    {
        com.google.common.util.concurrent.ListenableFuture $r0;

        $r0 = staticinvoke <androidx.media2.session.SessionResult: com.google.common.util.concurrent.ListenableFuture createFutureWithResult(int)>(-100);

        return $r0;
    }

    void notifyPrimaryControllerCallback(androidx.media2.session.MediaController$ControllerCallbackRunnable)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.MediaController$ControllerCallbackRunnable r1;
        androidx.media2.session.MediaController$ControllerCallback $r2;
        java.util.concurrent.Executor $r3, $r5;
        androidx.media2.session.MediaController$1 $r4;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.session.MediaController$ControllerCallbackRunnable;

        $r2 = r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media2.session.MediaController: java.util.concurrent.Executor mPrimaryCallbackExecutor>;

        if $r3 == null goto label1;

        $r5 = r0.<androidx.media2.session.MediaController: java.util.concurrent.Executor mPrimaryCallbackExecutor>;

        $r4 = new androidx.media2.session.MediaController$1;

        specialinvoke $r4.<androidx.media2.session.MediaController$1: void <init>(androidx.media2.session.MediaController,androidx.media2.session.MediaController$ControllerCallbackRunnable)>(r0, r1);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label1:
        return;
    }

    public void notifyAllControllerCallbacks(androidx.media2.session.MediaController$ControllerCallbackRunnable)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.MediaController$ControllerCallbackRunnable r1;
        java.util.Iterator r2;
        androidx.core.util.Pair r3;
        androidx.media2.session.MediaController$ControllerCallback r4;
        java.util.concurrent.Executor r5;
        java.util.List $r6;
        java.lang.Object $r7, $r8, $r9;
        androidx.media2.session.MediaController$2 $r10;
        boolean $z0;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.session.MediaController$ControllerCallbackRunnable;

        virtualinvoke r0.<androidx.media2.session.MediaController: void notifyPrimaryControllerCallback(androidx.media2.session.MediaController$ControllerCallbackRunnable)>(r1);

        $r6 = virtualinvoke r0.<androidx.media2.session.MediaController: java.util.List getExtraControllerCallbacks()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.core.util.Pair) $r7;

        $r8 = r3.<androidx.core.util.Pair: java.lang.Object first>;

        r4 = (androidx.media2.session.MediaController$ControllerCallback) $r8;

        $r9 = r3.<androidx.core.util.Pair: java.lang.Object second>;

        r5 = (java.util.concurrent.Executor) $r9;

        if r4 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaController", "notifyAllControllerCallbacks: mExtraControllerCallbacks contains a null ControllerCallback! Ignoring.");

        goto label1;

     label2:
        if r5 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaController", "notifyAllControllerCallbacks: mExtraControllerCallbacks contains a null Executor! Ignoring.");

        goto label1;

     label3:
        $r10 = new androidx.media2.session.MediaController$2;

        specialinvoke $r10.<androidx.media2.session.MediaController$2: void <init>(androidx.media2.session.MediaController,androidx.media2.session.MediaController$ControllerCallbackRunnable,androidx.media2.session.MediaController$ControllerCallback)>(r0, r1, r4);

        interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

        goto label1;

     label4:
        return;
    }

    private void lambda$new$1(android.content.Context, android.os.Bundle, android.support.v4.media.session.MediaSessionCompat$Token, androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaController r0;
        android.content.Context r1;
        android.os.Bundle r2;
        android.support.v4.media.session.MediaSessionCompat$Token r3;
        androidx.media2.session.SessionToken r4;
        boolean z0;
        java.lang.Object r5, $r7;
        java.lang.Throwable r6, $r10;
        androidx.media2.session.MediaController$ControllerCallbackRunnable $r8;
        androidx.media2.session.MediaController$MediaControllerImpl $r9;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.support.v4.media.session.MediaSessionCompat$Token;

        r4 := @parameter3: androidx.media2.session.SessionToken;

        $r7 = r0.<androidx.media2.session.MediaController: java.lang.Object mLock>;

        r5 = $r7;

        entermonitor $r7;

     label1:
        z0 = r0.<androidx.media2.session.MediaController: boolean mClosed>;

        if z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl createImpl(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle)>(r1, r4, r2);

        r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl mImpl> = $r9;

     label2:
        exitmonitor r5;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r5;

     label5:
        throw r6;

     label6:
        if z0 == 0 goto label7;

        $r8 = dynamicinvoke "run" <androidx.media2.session.MediaController$ControllerCallbackRunnable (androidx.media2.session.MediaController)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.media2.session.MediaController$ControllerCallback), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media2.session.MediaController: void lambda$new$0(androidx.media2.session.MediaController$ControllerCallback)>, methodtype: void __METHODTYPE__(androidx.media2.session.MediaController$ControllerCallback));

        virtualinvoke r0.<androidx.media2.session.MediaController: void notifyAllControllerCallbacks(androidx.media2.session.MediaController$ControllerCallbackRunnable)>($r8);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void lambda$new$0(androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController r0;
        androidx.media2.session.MediaController$ControllerCallback r1;

        r0 := @this: androidx.media2.session.MediaController;

        r1 := @parameter0: androidx.media2.session.MediaController$ControllerCallback;

        virtualinvoke r1.<androidx.media2.session.MediaController$ControllerCallback: void onDisconnected(androidx.media2.session.MediaController)>(r0);

        return;
    }

androidx.media2.session.MediaController$1
<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable>
<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController this$0>
    void <init>(androidx.media2.session.MediaController, androidx.media2.session.MediaController$ControllerCallbackRunnable)
    {
        androidx.media2.session.MediaController$1 r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.MediaController$ControllerCallbackRunnable r2;

        r0 := @this: androidx.media2.session.MediaController$1;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallbackRunnable;

        r0.<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController this$0> = r1;

        r0.<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.media2.session.MediaController$1 r0;
        androidx.media2.session.MediaController $r1;
        androidx.media2.session.MediaController$ControllerCallback $r2;
        androidx.media2.session.MediaController$ControllerCallbackRunnable $r3;

        r0 := @this: androidx.media2.session.MediaController$1;

        $r3 = r0.<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable>;

        $r1 = r0.<androidx.media2.session.MediaController$1: androidx.media2.session.MediaController this$0>;

        $r2 = $r1.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback>;

        interfaceinvoke $r3.<androidx.media2.session.MediaController$ControllerCallbackRunnable: void run(androidx.media2.session.MediaController$ControllerCallback)>($r2);

        return;
    }

androidx.media2.session.MediaController$2
<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable>
<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallback val$callback>
<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController this$0>
    void <init>(androidx.media2.session.MediaController, androidx.media2.session.MediaController$ControllerCallbackRunnable, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController$2 r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.MediaController$ControllerCallbackRunnable r2;
        androidx.media2.session.MediaController$ControllerCallback r3;

        r0 := @this: androidx.media2.session.MediaController$2;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallbackRunnable;

        r3 := @parameter2: androidx.media2.session.MediaController$ControllerCallback;

        r0.<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController this$0> = r1;

        r0.<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable> = r2;

        r0.<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallback val$callback> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.media2.session.MediaController$2 r0;
        androidx.media2.session.MediaController$ControllerCallback $r1;
        androidx.media2.session.MediaController$ControllerCallbackRunnable $r2;

        r0 := @this: androidx.media2.session.MediaController$2;

        $r2 = r0.<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallbackRunnable val$callbackRunnable>;

        $r1 = r0.<androidx.media2.session.MediaController$2: androidx.media2.session.MediaController$ControllerCallback val$callback>;

        interfaceinvoke $r2.<androidx.media2.session.MediaController$ControllerCallbackRunnable: void run(androidx.media2.session.MediaController$ControllerCallback)>($r1);

        return;
    }

androidx.media2.session.MediaController$Builder
    public void <init>(android.content.Context)
    {
        androidx.media2.session.MediaController$Builder r0;
        android.content.Context r1;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: void <init>(android.content.Context)>(r1);

        return;
    }

    public androidx.media2.session.MediaController$Builder setSessionToken(androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaController$Builder r0, $r3;
        androidx.media2.session.SessionToken r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: androidx.media2.session.SessionToken;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setSessionToken(androidx.media2.session.SessionToken)>(r1);

        $r3 = (androidx.media2.session.MediaController$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaController$Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)
    {
        androidx.media2.session.MediaController$Builder r0, $r3;
        android.support.v4.media.session.MediaSessionCompat$Token r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: android.support.v4.media.session.MediaSessionCompat$Token;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)>(r1);

        $r3 = (androidx.media2.session.MediaController$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaController$Builder setConnectionHints(android.os.Bundle)
    {
        androidx.media2.session.MediaController$Builder r0, $r3;
        android.os.Bundle r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: android.os.Bundle;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setConnectionHints(android.os.Bundle)>(r1);

        $r3 = (androidx.media2.session.MediaController$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaController$Builder setControllerCallback(java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController$Builder r0, $r4;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaController$ControllerCallback r2;
        androidx.media2.session.MediaController$BuilderBase $r3;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallback;

        $r3 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>(r1, r2);

        $r4 = (androidx.media2.session.MediaController$Builder) $r3;

        return $r4;
    }

    public androidx.media2.session.MediaController build()
    {
        androidx.media2.session.MediaController$Builder r0;
        androidx.media2.session.SessionToken $r1, $r2, $r13;
        androidx.media2.session.MediaController $r3, $r9;
        androidx.media2.session.MediaController$ControllerCallback $r4, $r10;
        java.util.concurrent.Executor $r5, $r11;
        android.os.Bundle $r6, $r12;
        android.support.v4.media.session.MediaSessionCompat$Token $r7, $r15;
        android.content.Context $r8, $r14;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        $r1 = r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.SessionToken mToken>;

        if $r1 != null goto label1;

        $r15 = r0.<androidx.media2.session.MediaController$Builder: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken>;

        if $r15 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token and compat token shouldn\'t be both null");

        throw $r16;

     label1:
        $r2 = r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.SessionToken mToken>;

        if $r2 == null goto label2;

        $r9 = new androidx.media2.session.MediaController;

        $r14 = r0.<androidx.media2.session.MediaController$Builder: android.content.Context mContext>;

        $r13 = r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.SessionToken mToken>;

        $r12 = r0.<androidx.media2.session.MediaController$Builder: android.os.Bundle mConnectionHints>;

        $r11 = r0.<androidx.media2.session.MediaController$Builder: java.util.concurrent.Executor mCallbackExecutor>;

        $r10 = r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$ControllerCallback mCallback>;

        specialinvoke $r9.<androidx.media2.session.MediaController: void <init>(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>($r14, $r13, $r12, $r11, $r10);

        return $r9;

     label2:
        $r3 = new androidx.media2.session.MediaController;

        $r8 = r0.<androidx.media2.session.MediaController$Builder: android.content.Context mContext>;

        $r7 = r0.<androidx.media2.session.MediaController$Builder: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken>;

        $r6 = r0.<androidx.media2.session.MediaController$Builder: android.os.Bundle mConnectionHints>;

        $r5 = r0.<androidx.media2.session.MediaController$Builder: java.util.concurrent.Executor mCallbackExecutor>;

        $r4 = r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$ControllerCallback mCallback>;

        specialinvoke $r3.<androidx.media2.session.MediaController: void <init>(android.content.Context,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>($r8, $r7, $r6, $r5, $r4);

        return $r3;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setControllerCallback(java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController$Builder r0, $r3;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaController$ControllerCallback r2;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallback;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$Builder setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>(r1, r2);

        return $r3;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setConnectionHints(android.os.Bundle)
    {
        androidx.media2.session.MediaController$Builder r0, $r2;
        android.os.Bundle r1;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$Builder setConnectionHints(android.os.Bundle)>(r1);

        return $r2;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)
    {
        androidx.media2.session.MediaController$Builder r0, $r2;
        android.support.v4.media.session.MediaSessionCompat$Token r1;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: android.support.v4.media.session.MediaSessionCompat$Token;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)>(r1);

        return $r2;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setSessionToken(androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaController$Builder r0, $r2;
        androidx.media2.session.SessionToken r1;

        r0 := @this: androidx.media2.session.MediaController$Builder;

        r1 := @parameter0: androidx.media2.session.SessionToken;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaController$Builder: androidx.media2.session.MediaController$Builder setSessionToken(androidx.media2.session.SessionToken)>(r1);

        return $r2;
    }

androidx.media2.session.MediaController$BuilderBase
<androidx.media2.session.MediaController$BuilderBase: android.content.Context mContext>
<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.SessionToken mToken>
<androidx.media2.session.MediaController$BuilderBase: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken>
<androidx.media2.session.MediaController$BuilderBase: android.os.Bundle mConnectionHints>
<androidx.media2.session.MediaController$BuilderBase: java.util.concurrent.Executor mCallbackExecutor>
<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$ControllerCallback mCallback>
    void <init>(android.content.Context)
    {
        androidx.media2.session.MediaController$BuilderBase r0;
        android.content.Context r1;
        java.lang.NullPointerException $r2;

        r0 := @this: androidx.media2.session.MediaController$BuilderBase;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("context shouldn\'t be null");

        throw $r2;

     label1:
        r0.<androidx.media2.session.MediaController$BuilderBase: android.content.Context mContext> = r1;

        return;
    }

    androidx.media2.session.MediaController$BuilderBase setSessionToken(androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaController$BuilderBase r0;
        androidx.media2.session.SessionToken r1;
        java.lang.NullPointerException $r2;

        r0 := @this: androidx.media2.session.MediaController$BuilderBase;

        r1 := @parameter0: androidx.media2.session.SessionToken;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("token shouldn\'t be null");

        throw $r2;

     label1:
        r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.SessionToken mToken> = r1;

        r0.<androidx.media2.session.MediaController$BuilderBase: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken> = null;

        return r0;
    }

    androidx.media2.session.MediaController$BuilderBase setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)
    {
        androidx.media2.session.MediaController$BuilderBase r0;
        android.support.v4.media.session.MediaSessionCompat$Token r1;
        java.lang.NullPointerException $r2;

        r0 := @this: androidx.media2.session.MediaController$BuilderBase;

        r1 := @parameter0: android.support.v4.media.session.MediaSessionCompat$Token;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("compatToken shouldn\'t be null");

        throw $r2;

     label1:
        r0.<androidx.media2.session.MediaController$BuilderBase: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken> = r1;

        r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.SessionToken mToken> = null;

        return r0;
    }

    public androidx.media2.session.MediaController$BuilderBase setConnectionHints(android.os.Bundle)
    {
        androidx.media2.session.MediaController$BuilderBase r0;
        android.os.Bundle r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: androidx.media2.session.MediaController$BuilderBase;

        r1 := @parameter0: android.os.Bundle;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("connectionHints shouldn\'t be null");

        throw $r4;

     label1:
        $z0 = staticinvoke <androidx.media2.session.MediaUtils: boolean doesBundleHaveCustomParcelable(android.os.Bundle)>(r1);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionHints shouldn\'t contain any custom parcelables");

        throw $r3;

     label2:
        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>(android.os.Bundle)>(r1);

        r0.<androidx.media2.session.MediaController$BuilderBase: android.os.Bundle mConnectionHints> = $r2;

        return r0;
    }

    androidx.media2.session.MediaController$BuilderBase setControllerCallback(java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaController$BuilderBase r0;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaController$ControllerCallback r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @this: androidx.media2.session.MediaController$BuilderBase;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallback;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("executor shouldn\'t be null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("callback shouldn\'t be null");

        throw $r3;

     label2:
        r0.<androidx.media2.session.MediaController$BuilderBase: java.util.concurrent.Executor mCallbackExecutor> = r1;

        r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$ControllerCallback mCallback> = r2;

        return r0;
    }

<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController build()>
androidx.media2.session.MediaController$ControllerCallback
    public void <init>()
    {
        androidx.media2.session.MediaController$ControllerCallback r0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onConnected(androidx.media2.session.MediaController, androidx.media2.session.SessionCommandGroup)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.SessionCommandGroup r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.SessionCommandGroup;

        return;
    }

    public void onDisconnected(androidx.media2.session.MediaController)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        return;
    }

    public int onSetCustomLayout(androidx.media2.session.MediaController, java.util.List)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        java.util.List r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: java.util.List;

        return -6;
    }

    public void onPlaybackInfoChanged(androidx.media2.session.MediaController, androidx.media2.session.MediaController$PlaybackInfo)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.MediaController$PlaybackInfo r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.MediaController$PlaybackInfo;

        return;
    }

    public void onAllowedCommandsChanged(androidx.media2.session.MediaController, androidx.media2.session.SessionCommandGroup)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.SessionCommandGroup r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.SessionCommandGroup;

        return;
    }

    public androidx.media2.session.SessionResult onCustomCommand(androidx.media2.session.MediaController, androidx.media2.session.SessionCommand, android.os.Bundle)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.session.SessionCommand r2;
        android.os.Bundle r3;
        androidx.media2.session.SessionResult $r4;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.session.SessionCommand;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new androidx.media2.session.SessionResult;

        specialinvoke $r4.<androidx.media2.session.SessionResult: void <init>(int)>(-6);

        return $r4;
    }

    public void onPlayerStateChanged(androidx.media2.session.MediaController, int)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        int i0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        i0 := @parameter1: int;

        return;
    }

    public void onPlaybackSpeedChanged(androidx.media2.session.MediaController, float)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        float f0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        f0 := @parameter1: float;

        return;
    }

    public void onBufferingStateChanged(androidx.media2.session.MediaController, androidx.media2.common.MediaItem, int)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.MediaItem r2;
        int i0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.MediaItem;

        i0 := @parameter2: int;

        return;
    }

    public void onSeekCompleted(androidx.media2.session.MediaController, long)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        long l0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        l0 := @parameter1: long;

        return;
    }

    public void onCurrentMediaItemChanged(androidx.media2.session.MediaController, androidx.media2.common.MediaItem)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.MediaItem r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.MediaItem;

        return;
    }

    public void onPlaylistChanged(androidx.media2.session.MediaController, java.util.List, androidx.media2.common.MediaMetadata)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        java.util.List r2;
        androidx.media2.common.MediaMetadata r3;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.media2.common.MediaMetadata;

        return;
    }

    public void onPlaylistMetadataChanged(androidx.media2.session.MediaController, androidx.media2.common.MediaMetadata)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.MediaMetadata r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.MediaMetadata;

        return;
    }

    public void onShuffleModeChanged(androidx.media2.session.MediaController, int)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        int i0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        i0 := @parameter1: int;

        return;
    }

    public void onRepeatModeChanged(androidx.media2.session.MediaController, int)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        int i0;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        i0 := @parameter1: int;

        return;
    }

    public void onPlaybackCompleted(androidx.media2.session.MediaController)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        return;
    }

    public void onVideoSizeChanged(androidx.media2.session.MediaController, androidx.media2.common.MediaItem, androidx.media2.common.VideoSize)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.MediaItem r2;
        androidx.media2.common.VideoSize r3;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.MediaItem;

        r3 := @parameter2: androidx.media2.common.VideoSize;

        return;
    }

    public void onVideoSizeChanged(androidx.media2.session.MediaController, androidx.media2.common.VideoSize)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.VideoSize r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.VideoSize;

        return;
    }

    public void onTracksChanged(androidx.media2.session.MediaController, java.util.List)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        java.util.List r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: java.util.List;

        return;
    }

    public void onTrackSelected(androidx.media2.session.MediaController, androidx.media2.common.SessionPlayer$TrackInfo)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.SessionPlayer$TrackInfo r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.SessionPlayer$TrackInfo;

        return;
    }

    public void onTrackDeselected(androidx.media2.session.MediaController, androidx.media2.common.SessionPlayer$TrackInfo)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.SessionPlayer$TrackInfo r2;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.SessionPlayer$TrackInfo;

        return;
    }

    public void onSubtitleData(androidx.media2.session.MediaController, androidx.media2.common.MediaItem, androidx.media2.common.SessionPlayer$TrackInfo, androidx.media2.common.SubtitleData)
    {
        androidx.media2.session.MediaController$ControllerCallback r0;
        androidx.media2.session.MediaController r1;
        androidx.media2.common.MediaItem r2;
        androidx.media2.common.SessionPlayer$TrackInfo r3;
        androidx.media2.common.SubtitleData r4;

        r0 := @this: androidx.media2.session.MediaController$ControllerCallback;

        r1 := @parameter0: androidx.media2.session.MediaController;

        r2 := @parameter1: androidx.media2.common.MediaItem;

        r3 := @parameter2: androidx.media2.common.SessionPlayer$TrackInfo;

        r4 := @parameter3: androidx.media2.common.SubtitleData;

        return;
    }

androidx.media2.session.MediaController$ControllerCallbackRunnable
<androidx.media2.session.MediaController$ControllerCallbackRunnable: void run(androidx.media2.session.MediaController$ControllerCallback)>
androidx.media2.session.MediaController$MediaControllerImpl
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.SessionToken getConnectedToken()>
<androidx.media2.session.MediaController$MediaControllerImpl: boolean isConnected()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture play()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture pause()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture prepare()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture fastForward()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture rewind()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture seekTo(long)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipForward()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipBackward()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setVolumeTo(int,int)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture adjustVolume(int,int)>
<androidx.media2.session.MediaController$MediaControllerImpl: android.app.PendingIntent getSessionActivity()>
<androidx.media2.session.MediaController$MediaControllerImpl: int getPlayerState()>
<androidx.media2.session.MediaController$MediaControllerImpl: long getDuration()>
<androidx.media2.session.MediaController$MediaControllerImpl: long getCurrentPosition()>
<androidx.media2.session.MediaController$MediaControllerImpl: float getPlaybackSpeed()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setPlaybackSpeed(float)>
<androidx.media2.session.MediaController$MediaControllerImpl: int getBufferingState()>
<androidx.media2.session.MediaController$MediaControllerImpl: long getBufferedPosition()>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.MediaController$PlaybackInfo getPlaybackInfo()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setRating(java.lang.String,androidx.media2.common.Rating)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture sendCustomCommand(androidx.media2.session.SessionCommand,android.os.Bundle)>
<androidx.media2.session.MediaController$MediaControllerImpl: java.util.List getPlaylist()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setPlaylist(java.util.List,androidx.media2.common.MediaMetadata)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setMediaItem(java.lang.String)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setMediaUri(android.net.Uri,android.os.Bundle)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture updatePlaylistMetadata(androidx.media2.common.MediaMetadata)>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.MediaMetadata getPlaylistMetadata()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture addPlaylistItem(int,java.lang.String)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture removePlaylistItem(int)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture replacePlaylistItem(int,java.lang.String)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture movePlaylistItem(int,int)>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.MediaItem getCurrentMediaItem()>
<androidx.media2.session.MediaController$MediaControllerImpl: int getCurrentMediaItemIndex()>
<androidx.media2.session.MediaController$MediaControllerImpl: int getPreviousMediaItemIndex()>
<androidx.media2.session.MediaController$MediaControllerImpl: int getNextMediaItemIndex()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToPreviousItem()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToNextItem()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture skipToPlaylistItem(int)>
<androidx.media2.session.MediaController$MediaControllerImpl: int getRepeatMode()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setRepeatMode(int)>
<androidx.media2.session.MediaController$MediaControllerImpl: int getShuffleMode()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setShuffleMode(int)>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.VideoSize getVideoSize()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture setSurface(android.view.Surface)>
<androidx.media2.session.MediaController$MediaControllerImpl: java.util.List getTracks()>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture selectTrack(androidx.media2.common.SessionPlayer$TrackInfo)>
<androidx.media2.session.MediaController$MediaControllerImpl: com.google.common.util.concurrent.ListenableFuture deselectTrack(androidx.media2.common.SessionPlayer$TrackInfo)>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.common.SessionPlayer$TrackInfo getSelectedTrack(int)>
<androidx.media2.session.MediaController$MediaControllerImpl: androidx.media2.session.SessionCommandGroup getAllowedCommands()>
<androidx.media2.session.MediaController$MediaControllerImpl: android.content.Context getContext()>
<androidx.media2.session.MediaController$MediaControllerImpl: android.support.v4.media.MediaBrowserCompat getBrowserCompat()>
androidx.media2.session.MediaController$PlaybackInfo
<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType>
<androidx.media2.session.MediaController$PlaybackInfo: int mControlType>
<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume>
<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume>
<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat>
<androidx.media2.session.MediaController$PlaybackInfo: int PLAYBACK_TYPE_LOCAL>
<androidx.media2.session.MediaController$PlaybackInfo: int PLAYBACK_TYPE_REMOTE>
    void <init>()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(int, androidx.media.AudioAttributesCompat, int, int, int)
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        int i0, i1, i2, i3;
        androidx.media.AudioAttributesCompat r1;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media.AudioAttributesCompat;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType> = i0;

        r0.<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat> = r1;

        r0.<androidx.media2.session.MediaController$PlaybackInfo: int mControlType> = i1;

        r0.<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume> = i2;

        r0.<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume> = i3;

        return;
    }

    public int getPlaybackType()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $i0 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType>;

        return $i0;
    }

    public androidx.media.AudioAttributesCompat getAudioAttributes()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        androidx.media.AudioAttributesCompat $r1;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $r1 = r0.<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat>;

        return $r1;
    }

    public int getControlType()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $i0 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mControlType>;

        return $i0;
    }

    public int getMaxVolume()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $i0 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume>;

        return $i0;
    }

    public int getCurrentVolume()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        int $i0;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $i0 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume>;

        return $i0;
    }

    public int hashCode()
    {
        androidx.media2.session.MediaController$PlaybackInfo r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r2, $r3, $r4, $r5;
        androidx.media.AudioAttributesCompat $r6;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        $r1 = newarray (java.lang.Object)[5];

        $i0 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mControlType>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $i2 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r4;

        $i3 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[3] = $r5;

        $r6 = r0.<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat>;

        $r1[4] = $r6;

        $i4 = staticinvoke <androidx.core.util.ObjectsCompat: int hash(java.lang.Object[])>($r1);

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.media2.session.MediaController$PlaybackInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.media.AudioAttributesCompat $r3, $r4;

        r0 := @this: androidx.media2.session.MediaController$PlaybackInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.media2.session.MediaController$PlaybackInfo;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (androidx.media2.session.MediaController$PlaybackInfo) r1;

        $i1 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType>;

        $i0 = r2.<androidx.media2.session.MediaController$PlaybackInfo: int mPlaybackType>;

        if $i1 != $i0 goto label2;

        $i3 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mControlType>;

        $i2 = r2.<androidx.media2.session.MediaController$PlaybackInfo: int mControlType>;

        if $i3 != $i2 goto label2;

        $i5 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume>;

        $i4 = r2.<androidx.media2.session.MediaController$PlaybackInfo: int mMaxVolume>;

        if $i5 != $i4 goto label2;

        $i7 = r0.<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume>;

        $i6 = r2.<androidx.media2.session.MediaController$PlaybackInfo: int mCurrentVolume>;

        if $i7 != $i6 goto label2;

        $r4 = r0.<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat>;

        $r3 = r2.<androidx.media2.session.MediaController$PlaybackInfo: androidx.media.AudioAttributesCompat mAudioAttrsCompat>;

        $z1 = staticinvoke <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static androidx.media2.session.MediaController$PlaybackInfo createPlaybackInfo(int, androidx.media.AudioAttributesCompat, int, int, int)
    {
        int i0, i1, i2, i3;
        androidx.media.AudioAttributesCompat r0;
        androidx.media2.session.MediaController$PlaybackInfo $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.media.AudioAttributesCompat;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = new androidx.media2.session.MediaController$PlaybackInfo;

        specialinvoke $r1.<androidx.media2.session.MediaController$PlaybackInfo: void <init>(int,androidx.media.AudioAttributesCompat,int,int,int)>(i0, r0, i1, i2, i3);

        return $r1;
    }

androidx.media2.session.MediaController$VolumeDirection
androidx.media2.session.MediaController$VolumeFlags
