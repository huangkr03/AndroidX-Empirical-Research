androidx.constraintlayout.solver.Pools
<androidx.constraintlayout.solver.Pools: boolean DEBUG>
    private void <init>()
    {
        androidx.constraintlayout.solver.Pools r0;

        r0 := @this: androidx.constraintlayout.solver.Pools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.constraintlayout.solver.Pools$Pool
<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>
<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>
<androidx.constraintlayout.solver.Pools$Pool: void releaseAll(java.lang.Object[],int)>
androidx.constraintlayout.solver.Pools$SimplePool
<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>
<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>
    void <init>(int)
    {
        androidx.constraintlayout.solver.Pools$SimplePool r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: androidx.constraintlayout.solver.Pools$SimplePool;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The max pool size must be > 0");

        throw $r2;

     label1:
        $r1 = newarray (java.lang.Object)[i0];

        r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool> = $r1;

        return;
    }

    public java.lang.Object acquire()
    {
        androidx.constraintlayout.solver.Pools$SimplePool r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;

        r0 := @this: androidx.constraintlayout.solver.Pools$SimplePool;

        $i1 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        if $i1 <= 0 goto label1;

        $i2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        i0 = $i2 - 1;

        $r2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        r1 = $r2[i0];

        $r3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $r3[i0] = null;

        $i3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $i4 = $i3 - 1;

        r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize> = $i4;

        return r1;

     label1:
        return null;
    }

    public boolean release(java.lang.Object)
    {
        androidx.constraintlayout.solver.Pools$SimplePool r0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.constraintlayout.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $r2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $r3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $r3[$i2] = r1;

        $i3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $i4 = $i3 + 1;

        r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize> = $i4;

        return 1;

     label1:
        return 0;
    }

    public void releaseAll(java.lang.Object[], int)
    {
        androidx.constraintlayout.solver.Pools$SimplePool r0;
        java.lang.Object[] r1, $r3, $r4;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: androidx.constraintlayout.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object[];

        i6 := @parameter1: int;

        $i0 = lengthof r1;

        if i6 <= $i0 goto label1;

        i6 = lengthof r1;

     label1:
        i7 = 0;

     label2:
        if i7 >= i6 goto label4;

        r2 = r1[i7];

        $i2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $r3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i1 = lengthof $r3;

        if $i2 >= $i1 goto label3;

        $r4 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i3 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $r4[$i3] = r2;

        $i4 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        $i5 = $i4 + 1;

        r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize> = $i5;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        return;
    }

    private boolean isInPool(java.lang.Object)
    {
        androidx.constraintlayout.solver.Pools$SimplePool r0;
        java.lang.Object r1, $r3;
        int $i0, i1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.constraintlayout.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: int mPoolSize>;

        if i1 >= $i0 goto label3;

        $r2 = r0.<androidx.constraintlayout.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $r3 = $r2[i1];

        if $r3 != r1 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

