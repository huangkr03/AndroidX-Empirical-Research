androidx.media3.exoplayer.audio.TrimmingAudioProcessor
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int OUTPUT_ENCODING>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimStartFrames>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimEndFrames>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: boolean reconfigurationPending>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>
<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        byte[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void <init>()>();

        $r1 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer> = $r1;

        return;
    }

    public void setTrimFrameCount(int, int)
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        int i0, i1;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimStartFrames> = i0;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimEndFrames> = i1;

        return;
    }

    public void resetTrimmedFrameCount()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount> = 0L;

        return;
    }

    public long getTrimmedFrameCount()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $l0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount>;

        return $l0;
    }

    public androidx.media3.common.audio.AudioProcessor$AudioFormat onConfigure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r3;
        int $i0, $i1, $i2;
        androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException $r2;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i0 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int encoding>;

        if $i0 == 2 goto label1;

        $r2 = new androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException;

        specialinvoke $r2.<androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException: void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        throw $r2;

     label1:
        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: boolean reconfigurationPending> = 1;

        $i1 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimStartFrames>;

        if $i1 != 0 goto label2;

        $i2 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimEndFrames>;

        if $i2 == 0 goto label3;

     label2:
        $r3 = r1;

        goto label4;

     label3:
        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

     label4:
        return $r3;
    }

    public void queueInput(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        java.nio.ByteBuffer r1, r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r3;
        long $l8, $l9, $l10;
        byte[] $r5, $r6, $r11, $r12, $r13;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i27 = i1 - i0;

        if i27 != 0 goto label1;

        return;

     label1:
        $i5 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i27, $i5);

        $l9 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount>;

        $r3 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i6 = $r3.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        $i7 = i2 / $i6;

        $l8 = (long) $i7;

        $l10 = $l9 + $l8;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount> = $l10;

        $i11 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes>;

        $i12 = $i11 - i2;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes> = $i12;

        $i13 = i0 + i2;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i13);

        $i14 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes>;

        if $i14 <= 0 goto label2;

        return;

     label2:
        i28 = i27 - i2;

        $i15 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $i17 = $i15 + i28;

        $r5 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        $i16 = lengthof $r5;

        i29 = $i17 - $i16;

        r2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: java.nio.ByteBuffer replaceOutputBuffer(int)>(i29);

        $i18 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        i3 = staticinvoke <androidx.media3.common.util.Util: int constrainValue(int,int,int)>(i29, 0, $i18);

        $r6 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r6, 0, i3);

        i30 = i29 - i3;

        i4 = staticinvoke <androidx.media3.common.util.Util: int constrainValue(int,int,int)>(i30, 0, i28);

        $i19 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i20 = $i19 + i4;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i20);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        i31 = i28 - i4;

        $i21 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $i22 = $i21 - i3;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize> = $i22;

        $r12 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        $r11 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        $i23 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, i3, $r11, 0, $i23);

        $r13 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        $i24 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r13, $i24, i31);

        $i25 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $i26 = $i25 + i31;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize> = $i26;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    public java.nio.ByteBuffer getOutput()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        boolean $z0;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r1, $r3, $r5;
        byte[] $r2;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean isEnded()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $r1 = virtualinvoke r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: java.nio.ByteBuffer replaceOutputBuffer(int)>($i1);

        $r2 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer>;

        $i2 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, 0, $i2);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize> = 0;

     label1:
        $r5 = specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer getOutput()>();

        return $r5;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean isEnded()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void onQueueEndOfStream()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1;
        long $l4, $l5, $l6;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: boolean reconfigurationPending>;

        if $z0 == 0 goto label2;

        $i0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        if $i0 <= 0 goto label1;

        $l5 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount>;

        $i2 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize>;

        $r1 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i1 = $r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        $i3 = $i2 / $i1;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: long trimmedFrameCount> = $l6;

     label1:
        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize> = 0;

     label2:
        return;
    }

    protected void onFlush()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        boolean $z0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r2;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: boolean reconfigurationPending>;

        if $z0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: boolean reconfigurationPending> = 0;

        $i1 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimEndFrames>;

        $r1 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i0 = $r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        $i2 = $i1 * $i0;

        $r2 = newarray (byte)[$i2];

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer> = $r2;

        $i4 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int trimStartFrames>;

        $r3 = r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i3 = $r3.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        $i5 = $i4 * $i3;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int pendingTrimStartBytes> = $i5;

     label1:
        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: int endBufferSize> = 0;

        return;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.audio.TrimmingAudioProcessor r0;
        byte[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.TrimmingAudioProcessor;

        $r1 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.TrimmingAudioProcessor: byte[] endBuffer> = $r1;

        return;
    }

