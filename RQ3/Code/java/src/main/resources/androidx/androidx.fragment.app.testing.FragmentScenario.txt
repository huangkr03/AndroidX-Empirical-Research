androidx.fragment.app.testing.FragmentScenario
<androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>
<androidx.fragment.app.testing.FragmentScenario: java.lang.Class fragmentClass>
<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>
<androidx.fragment.app.testing.FragmentScenario: java.lang.String FRAGMENT_TAG>
    private void <init>(java.lang.Class, androidx.test.core.app.ActivityScenario)
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        java.lang.Class r1;
        androidx.test.core.app.ActivityScenario r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: androidx.test.core.app.ActivityScenario;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.fragment.app.testing.FragmentScenario: java.lang.Class fragmentClass> = r1;

        r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario> = r2;

        return;
    }

    public final java.lang.Class getFragmentClass$fragment_testing_release()
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        java.lang.Class $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario: java.lang.Class fragmentClass>;

        return $r1;
    }

    public final androidx.fragment.app.testing.FragmentScenario moveToState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        androidx.lifecycle.Lifecycle$State r1, $r2;
        androidx.test.core.app.ActivityScenario $r3, $r6;
        androidx.test.core.app.ActivityScenario$ActivityAction $r4, $r7;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "newState");

        $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if r1 != $r2 goto label1;

        $r6 = r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        $r7 = dynamicinvoke "perform" <androidx.test.core.app.ActivityScenario$ActivityAction ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.app.Activity), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.testing.FragmentScenario: void moveToState$lambda-1(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)>, methodtype: void __METHODTYPE__(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity));

        virtualinvoke $r6.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario onActivity(androidx.test.core.app.ActivityScenario$ActivityAction)>($r7);

        goto label2;

     label1:
        $r3 = r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        $r4 = dynamicinvoke "perform" <androidx.test.core.app.ActivityScenario$ActivityAction (androidx.lifecycle.Lifecycle$State)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.app.Activity), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.testing.FragmentScenario: void moveToState$lambda-4(androidx.lifecycle.Lifecycle$State,androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)>, methodtype: void __METHODTYPE__(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity));

        virtualinvoke $r3.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario onActivity(androidx.test.core.app.ActivityScenario$ActivityAction)>($r4);

     label2:
        return r0;
    }

    public final androidx.fragment.app.testing.FragmentScenario recreate()
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        androidx.test.core.app.ActivityScenario $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        virtualinvoke $r1.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario recreate()>();

        return r0;
    }

    public final androidx.fragment.app.testing.FragmentScenario onFragment(androidx.fragment.app.testing.FragmentScenario$FragmentAction)
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        androidx.fragment.app.testing.FragmentScenario$FragmentAction r1;
        androidx.test.core.app.ActivityScenario $r2;
        androidx.test.core.app.ActivityScenario$ActivityAction $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        r1 := @parameter0: androidx.fragment.app.testing.FragmentScenario$FragmentAction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "action");

        $r2 = r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        $r3 = dynamicinvoke "perform" <androidx.test.core.app.ActivityScenario$ActivityAction (androidx.fragment.app.testing.FragmentScenario,androidx.fragment.app.testing.FragmentScenario$FragmentAction)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.app.Activity), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.testing.FragmentScenario: void onFragment$lambda-6(androidx.fragment.app.testing.FragmentScenario,androidx.fragment.app.testing.FragmentScenario$FragmentAction,androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)>, methodtype: void __METHODTYPE__(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity));

        virtualinvoke $r2.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario onActivity(androidx.test.core.app.ActivityScenario$ActivityAction)>($r3);

        return r0;
    }

    public void close()
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        androidx.test.core.app.ActivityScenario $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        virtualinvoke $r1.<androidx.test.core.app.ActivityScenario: void close()>();

        return;
    }

    private static final void moveToState$lambda-1(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r0;
        androidx.fragment.app.Fragment r1;
        boolean z0;
        androidx.fragment.app.FragmentTransaction r2, $r5;
        androidx.fragment.app.FragmentManager $r3, $r4;

        r0 := @parameter0: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        $r3 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        r1 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)>("FragmentScenario_Fragment_Tag");

        if r1 == null goto label1;

        $r4 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "activity.supportFragmentManager");

        z0 = 0;

        $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentTransaction beginTransaction()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "beginTransaction()");

        r2 = $r5;

        virtualinvoke r2.<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction remove(androidx.fragment.app.Fragment)>(r1);

        virtualinvoke r2.<androidx.fragment.app.FragmentTransaction: void commitNow()>();

     label1:
        return;
    }

    private static final void moveToState$lambda-4(androidx.lifecycle.Lifecycle$State, androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)
    {
        androidx.lifecycle.Lifecycle$State $r0;
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r1;
        androidx.fragment.app.Fragment r2, $r5;
        boolean z0;
        androidx.fragment.app.FragmentTransaction r3, $r7;
        androidx.fragment.app.FragmentManager $r4, $r6;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r10, $r11;

        $r0 := @parameter0: androidx.lifecycle.Lifecycle$State;

        r1 := @parameter1: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$newState");

        $r4 = virtualinvoke r1.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)>("FragmentScenario_Fragment_Tag");

        if $r5 != null goto label1;

        $r11 = "The fragment has been removed from the FragmentManager already.";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "requireNotNull(\n        \u2026ready.\"\n                }");

        r2 = $r5;

        $r6 = virtualinvoke r1.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "activity.supportFragmentManager");

        z0 = 0;

        $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentTransaction beginTransaction()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "beginTransaction()");

        r3 = $r7;

        virtualinvoke r3.<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)>(r2, $r0);

        virtualinvoke r3.<androidx.fragment.app.FragmentTransaction: void commitNow()>();

        return;
    }

    private static final void onFragment$lambda-6(androidx.fragment.app.testing.FragmentScenario, androidx.fragment.app.testing.FragmentScenario$FragmentAction, androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        androidx.fragment.app.testing.FragmentScenario$FragmentAction $r1;
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r2;
        androidx.fragment.app.Fragment r3, $r5, $r9;
        androidx.fragment.app.FragmentManager $r4;
        java.lang.Class $r6, $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.IllegalArgumentException $r10, $r14;
        java.lang.String $r11, $r13, $r15, $r16, r17, r18;
        java.lang.IllegalStateException $r12;

        r0 := @parameter0: androidx.fragment.app.testing.FragmentScenario;

        $r1 := @parameter1: androidx.fragment.app.testing.FragmentScenario$FragmentAction;

        r2 := @parameter2: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$action");

        $r4 = virtualinvoke r2.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)>("FragmentScenario_Fragment_Tag");

        if $r5 != null goto label1;

        $r16 = "The fragment has been removed from the FragmentManager already.";

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "requireNotNull(\n        \u2026r already.\"\n            }");

        r3 = $r5;

        $r6 = r0.<androidx.fragment.app.testing.FragmentScenario: java.lang.Class fragmentClass>;

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        r17 = "Check failed.";

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        $r7 = r0.<androidx.fragment.app.testing.FragmentScenario: java.lang.Class fragmentClass>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r3);

        if $r8 != null goto label3;

        r18 = "Required value was null.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label3:
        $r9 = (androidx.fragment.app.Fragment) $r8;

        interfaceinvoke $r1.<androidx.fragment.app.testing.FragmentScenario$FragmentAction: void perform(androidx.fragment.app.Fragment)>($r9);

        return;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        androidx.fragment.app.FragmentFactory r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: androidx.fragment.app.FragmentFactory;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,androidx.fragment.app.FragmentFactory)>(r0, r1, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.fragment.app.FragmentFactory r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.fragment.app.FragmentFactory;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.fragment.app.FragmentFactory)>(r0, r1, i0, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.fragment.app.FragmentFactory r3;
        androidx.fragment.app.testing.FragmentScenario$Companion $r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.lifecycle.Lifecycle$State;

        r3 := @parameter4: androidx.fragment.app.FragmentFactory;

        $r4 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r0, r1, i0, r2, r3);

        return $r5;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        androidx.fragment.app.FragmentFactory r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: androidx.fragment.app.FragmentFactory;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,androidx.fragment.app.FragmentFactory)>(r0, r1, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.fragment.app.FragmentFactory r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.fragment.app.FragmentFactory;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.fragment.app.FragmentFactory)>(r0, r1, i0, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.fragment.app.FragmentFactory r3;
        androidx.fragment.app.testing.FragmentScenario$Companion $r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.lifecycle.Lifecycle$State;

        r3 := @parameter4: androidx.fragment.app.FragmentFactory;

        $r4 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r0, r1, i0, r2, r3);

        return $r5;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.lifecycle.Lifecycle$State;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State)>(r0, r1, i0, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.fragment.app.testing.FragmentScenario$Companion $r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        $r2 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int)>(r0, r1, i0);

        return $r3;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        androidx.fragment.app.testing.FragmentScenario$Companion $r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        $r2 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle)>(r0, r1);

        return $r3;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class)
    {
        java.lang.Class r0;
        androidx.fragment.app.testing.FragmentScenario$Companion $r1;
        androidx.fragment.app.testing.FragmentScenario $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class)>(r0);

        return $r2;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.fragment.app.testing.FragmentScenario$Companion $r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.lifecycle.Lifecycle$State;

        $r3 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State)>(r0, r1, i0, r2);

        return $r4;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        int i0;
        androidx.fragment.app.testing.FragmentScenario$Companion $r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        $r2 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int)>(r0, r1, i0);

        return $r3;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle)
    {
        java.lang.Class r0;
        android.os.Bundle r1;
        androidx.fragment.app.testing.FragmentScenario$Companion $r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        $r2 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle)>(r0, r1);

        return $r3;
    }

    public static final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class)
    {
        java.lang.Class r0;
        androidx.fragment.app.testing.FragmentScenario$Companion $r1;
        androidx.fragment.app.testing.FragmentScenario $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class)>(r0);

        return $r2;
    }

    public void <init>(java.lang.Class, androidx.test.core.app.ActivityScenario, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.fragment.app.testing.FragmentScenario r0;
        java.lang.Class r1;
        androidx.test.core.app.ActivityScenario r2;
        kotlin.jvm.internal.DefaultConstructorMarker $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: androidx.test.core.app.ActivityScenario;

        $r3 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.fragment.app.testing.FragmentScenario: void <init>(java.lang.Class,androidx.test.core.app.ActivityScenario)>(r1, r2);

        return;
    }

    public static final androidx.test.core.app.ActivityScenario access$getActivityScenario$p(androidx.fragment.app.testing.FragmentScenario)
    {
        androidx.fragment.app.testing.FragmentScenario $r0;
        androidx.test.core.app.ActivityScenario $r1;

        $r0 := @parameter0: androidx.fragment.app.testing.FragmentScenario;

        $r1 = $r0.<androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario activityScenario>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.fragment.app.testing.FragmentScenario$Companion $r0;

        $r0 = new androidx.fragment.app.testing.FragmentScenario$Companion;

        specialinvoke $r0.<androidx.fragment.app.testing.FragmentScenario$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.fragment.app.testing.FragmentScenario: androidx.fragment.app.testing.FragmentScenario$Companion Companion> = $r0;

        return;
    }

androidx.fragment.app.testing.FragmentScenario$Companion
    private void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        androidx.fragment.app.FragmentFactory r3;
        androidx.lifecycle.Lifecycle$State $r4;
        int $i0;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $i0 = <androidx.fragment.testing.R$style: int FragmentScenarioEmptyFragmentActivityTheme>;

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r2, $i0, $r4, r3);

        return $r5;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.fragment.app.FragmentFactory r3;
        androidx.lifecycle.Lifecycle$State $r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r2, i0, $r4, r3);

        return $r5;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.lifecycle.Lifecycle$State r3;
        androidx.fragment.app.FragmentFactory r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.lifecycle.Lifecycle$State;

        r4 := @parameter4: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialState");

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario internalLaunch$fragment_testing_release(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int)>(r1, r2, i0, r3, r4, 0);

        return $r5;
    }

    public static androidx.fragment.app.testing.FragmentScenario launch$default(androidx.fragment.app.testing.FragmentScenario$Companion, java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory, int, java.lang.Object)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object r2;
        androidx.fragment.app.testing.FragmentScenario $r3;
        android.os.Bundle r4;
        androidx.lifecycle.Lifecycle$State r5;
        androidx.fragment.app.FragmentFactory r6;

        r0 := @parameter0: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter1: java.lang.Class;

        r4 := @parameter2: android.os.Bundle;

        i5 := @parameter3: int;

        r5 := @parameter4: androidx.lifecycle.Lifecycle$State;

        r6 := @parameter5: androidx.fragment.app.FragmentFactory;

        i0 := @parameter6: int;

        r2 := @parameter7: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        i5 = <androidx.fragment.testing.R$style: int FragmentScenarioEmptyFragmentActivityTheme>;

     label2:
        $i3 = i0 & 8;

        if $i3 == 0 goto label3;

        r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

     label3:
        $i4 = i0 & 16;

        if $i4 == 0 goto label4;

        r6 = null;

     label4:
        $r3 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r4, i5, r5, r6);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        androidx.fragment.app.FragmentFactory r3;
        androidx.lifecycle.Lifecycle$State $r4;
        int $i0;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $i0 = <androidx.fragment.testing.R$style: int FragmentScenarioEmptyFragmentActivityTheme>;

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r2, $i0, $r4, r3);

        return $r5;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.fragment.app.FragmentFactory r3;
        androidx.lifecycle.Lifecycle$State $r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r2, i0, $r4, r3);

        return $r5;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.lifecycle.Lifecycle$State r3;
        androidx.fragment.app.FragmentFactory r4;
        androidx.fragment.app.testing.FragmentScenario $r5;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.lifecycle.Lifecycle$State;

        r4 := @parameter4: androidx.fragment.app.FragmentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialState");

        $r5 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario internalLaunch$fragment_testing_release(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int)>(r1, r2, i0, r3, r4, 16908290);

        return $r5;
    }

    public static androidx.fragment.app.testing.FragmentScenario launchInContainer$default(androidx.fragment.app.testing.FragmentScenario$Companion, java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory, int, java.lang.Object)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object r2;
        androidx.fragment.app.testing.FragmentScenario $r3;
        android.os.Bundle r4;
        androidx.lifecycle.Lifecycle$State r5;
        androidx.fragment.app.FragmentFactory r6;

        r0 := @parameter0: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter1: java.lang.Class;

        r4 := @parameter2: android.os.Bundle;

        i5 := @parameter3: int;

        r5 := @parameter4: androidx.lifecycle.Lifecycle$State;

        r6 := @parameter5: androidx.fragment.app.FragmentFactory;

        i0 := @parameter6: int;

        r2 := @parameter7: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        i5 = <androidx.fragment.testing.R$style: int FragmentScenarioEmptyFragmentActivityTheme>;

     label2:
        $i3 = i0 & 8;

        if $i3 == 0 goto label3;

        r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

     label3:
        $i4 = i0 & 16;

        if $i4 == 0 goto label4;

        r6 = null;

     label4:
        $r3 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory)>(r1, r4, i5, r5, r6);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario internalLaunch$fragment_testing_release(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.FragmentFactory, int)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0, i1;
        androidx.lifecycle.Lifecycle$State r3, $r7;
        androidx.fragment.app.FragmentFactory r4;
        android.content.ComponentName r5, $r8;
        androidx.fragment.app.testing.FragmentScenario r6, $r12;
        android.content.Context $r9;
        android.content.Intent $r10, $r11;
        androidx.test.core.app.ActivityScenario $r13, $r14;
        androidx.test.core.app.ActivityScenario$ActivityAction $r15;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;
        java.lang.IllegalArgumentException $r21;
        java.lang.String $r22, $r23;
        boolean $z0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.lifecycle.Lifecycle$State;

        r4 := @parameter4: androidx.fragment.app.FragmentFactory;

        i1 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialState");

        $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if r3 == $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set initial Lifecycle state to ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for FragmentScenario");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label3:
        $r8 = new android.content.ComponentName;

        $r9 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        specialinvoke $r8.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r9, class "Landroidx/fragment/app/testing/FragmentScenario$EmptyFragmentActivity;");

        r5 = $r8;

        $r10 = staticinvoke <android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>(r5);

        $r11 = virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("androidx.fragment.app.testing.FragmentScenario.EmptyFragmentActivity.THEME_EXTRAS_BUNDLE_KEY", i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "makeMainActivity(compone\u2026S_BUNDLE_KEY, themeResId)");

        $r12 = new androidx.fragment.app.testing.FragmentScenario;

        $r13 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario launch(android.content.Intent)>($r11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "launch(\n                \u2026yIntent\n                )");

        specialinvoke $r12.<androidx.fragment.app.testing.FragmentScenario: void <init>(java.lang.Class,androidx.test.core.app.ActivityScenario,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, $r13, null);

        r6 = $r12;

        $r14 = staticinvoke <androidx.fragment.app.testing.FragmentScenario: androidx.test.core.app.ActivityScenario access$getActivityScenario$p(androidx.fragment.app.testing.FragmentScenario)>(r6);

        $r15 = dynamicinvoke "perform" <androidx.test.core.app.ActivityScenario$ActivityAction (androidx.fragment.app.FragmentFactory,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State)>(r4, r1, r2, i1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.app.Activity), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.testing.FragmentScenario$Companion: void internalLaunch$lambda-2(androidx.fragment.app.FragmentFactory,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)>, methodtype: void __METHODTYPE__(androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity));

        virtualinvoke $r14.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario onActivity(androidx.test.core.app.ActivityScenario$ActivityAction)>($r15);

        return r6;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.lifecycle.Lifecycle$State r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialState");

        $r4 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, i0, r3, null, 16, null);

        return $r4;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle, int)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r3 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, i0, null, null, 24, null);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class, android.os.Bundle)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r3 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, 0, null, null, 28, null);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario launch(java.lang.Class)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        androidx.fragment.app.testing.FragmentScenario $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r2 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launch$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, null, 0, null, null, 30, null);

        return $r2;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.lifecycle.Lifecycle$State r3;
        androidx.fragment.app.testing.FragmentScenario $r4;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialState");

        $r4 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, i0, r3, null, 16, null);

        return $r4;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle, int)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        int i0;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r3 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, i0, null, null, 24, null);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class, android.os.Bundle)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        androidx.fragment.app.testing.FragmentScenario $r3;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r3 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, r2, 0, null, null, 28, null);

        return $r3;
    }

    public final androidx.fragment.app.testing.FragmentScenario launchInContainer(java.lang.Class)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        java.lang.Class r1;
        androidx.fragment.app.testing.FragmentScenario $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        $r2 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$Companion: androidx.fragment.app.testing.FragmentScenario launchInContainer$default(androidx.fragment.app.testing.FragmentScenario$Companion,java.lang.Class,android.os.Bundle,int,androidx.lifecycle.Lifecycle$State,androidx.fragment.app.FragmentFactory,int,java.lang.Object)>(r0, r1, null, 0, null, null, 30, null);

        return $r2;
    }

    private static final void internalLaunch$lambda-2(androidx.fragment.app.FragmentFactory, java.lang.Class, android.os.Bundle, int, androidx.lifecycle.Lifecycle$State, androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity)
    {
        androidx.fragment.app.FragmentFactory $r0, $r9;
        java.lang.Class $r1;
        android.os.Bundle $r2;
        int $i0;
        androidx.lifecycle.Lifecycle$State $r3;
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r4;
        androidx.fragment.app.Fragment r5, $r12;
        boolean z0;
        androidx.fragment.app.FragmentTransaction r6, $r14;
        androidx.fragment.app.FragmentManager $r8, $r13, $r22;
        java.lang.ClassLoader $r10;
        java.lang.String $r11, $r18, $r23;
        java.lang.IllegalArgumentException $r17;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion $r19;
        androidx.fragment.app.FragmentActivity $r20;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel $r21;

        $r0 := @parameter0: androidx.fragment.app.FragmentFactory;

        $r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: android.os.Bundle;

        $i0 := @parameter3: int;

        $r3 := @parameter4: androidx.lifecycle.Lifecycle$State;

        r4 := @parameter5: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$initialState");

        if $r0 == null goto label1;

        $r19 = <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion Companion>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "activity");

        $r20 = (androidx.fragment.app.FragmentActivity) r4;

        $r21 = virtualinvoke $r19.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel getInstance(androidx.fragment.app.FragmentActivity)>($r20);

        virtualinvoke $r21.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: void setFragmentFactory(androidx.fragment.app.FragmentFactory)>($r0);

        $r22 = virtualinvoke r4.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        virtualinvoke $r22.<androidx.fragment.app.FragmentManager: void setFragmentFactory(androidx.fragment.app.FragmentFactory)>($r0);

     label1:
        $r8 = virtualinvoke r4.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        $r9 = virtualinvoke $r8.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory getFragmentFactory()>();

        $r10 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r10 != null goto label2;

        $r23 = "Required value was null.";

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label2:
        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<androidx.fragment.app.FragmentFactory: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)>($r10, $r11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "activity.supportFragment\u2026der), fragmentClass.name)");

        r5 = $r12;

        virtualinvoke r5.<androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)>($r2);

        $r13 = virtualinvoke r4.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "activity.supportFragmentManager");

        z0 = 0;

        $r14 = virtualinvoke $r13.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentTransaction beginTransaction()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "beginTransaction()");

        r6 = $r14;

        virtualinvoke r6.<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction add(int,androidx.fragment.app.Fragment,java.lang.String)>($i0, r5, "FragmentScenario_Fragment_Tag");

        virtualinvoke r6.<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)>(r5, $r3);

        virtualinvoke r6.<androidx.fragment.app.FragmentTransaction: void commitNow()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.fragment.app.testing.FragmentScenario$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.fragment.app.testing.FragmentScenario$Companion: void <init>()>();

        return;
    }

androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion
    private void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion: void <init>()>();

        return;
    }

androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity
<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion Companion>
<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: java.lang.String THEME_EXTRAS_BUNDLE_KEY>
    public void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        specialinvoke r0.<androidx.fragment.app.FragmentActivity: void <init>()>();

        return;
    }

    protected void onCreate(android.os.Bundle)
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity r0;
        android.os.Bundle r1;
        androidx.fragment.app.FragmentFactory r2;
        android.content.Intent $r3;
        int $i0, $i1;
        androidx.fragment.app.FragmentActivity $r4;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion $r5;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel $r6;
        androidx.fragment.app.FragmentManager $r7;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity;

        r1 := @parameter0: android.os.Bundle;

        $r3 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: android.content.Intent getIntent()>();

        $i0 = <androidx.fragment.testing.R$style: int FragmentScenarioEmptyFragmentActivityTheme>;

        $i1 = virtualinvoke $r3.<android.content.Intent: int getIntExtra(java.lang.String,int)>("androidx.fragment.app.testing.FragmentScenario.EmptyFragmentActivity.THEME_EXTRAS_BUNDLE_KEY", $i0);

        virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: void setTheme(int)>($i1);

        $r5 = <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion Companion>;

        $r4 = (androidx.fragment.app.FragmentActivity) r0;

        $r6 = virtualinvoke $r5.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel getInstance(androidx.fragment.app.FragmentActivity)>($r4);

        r2 = virtualinvoke $r6.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.FragmentFactory getFragmentFactory()>();

        if r2 == null goto label1;

        $r7 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>();

        virtualinvoke $r7.<androidx.fragment.app.FragmentManager: void setFragmentFactory(androidx.fragment.app.FragmentFactory)>(r2);

     label1:
        specialinvoke r0.<androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>(r1);

        return;
    }

    static void <clinit>()
    {
        androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion $r0;

        $r0 = new androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion;

        specialinvoke $r0.<androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity: androidx.fragment.app.testing.FragmentScenario$EmptyFragmentActivity$Companion Companion> = $r0;

        return;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentAction
<androidx.fragment.app.testing.FragmentScenario$FragmentAction: void perform(androidx.fragment.app.Fragment)>
androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1
    void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1 r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.lifecycle.ViewModel create(java.lang.Class)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1 r0;
        java.lang.Class r1;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel r2, $r3;
        androidx.lifecycle.ViewModel $r4;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "modelClass");

        $r3 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel;

        specialinvoke $r3.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: void <init>()>();

        r2 = $r3;

        $r4 = (androidx.lifecycle.ViewModel) r2;

        return $r4;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1: androidx.activity.ComponentActivity $this_viewModels>
    public void <init>(androidx.activity.ComponentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1 r0;
        androidx.activity.ComponentActivity $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1;

        $r1 := @parameter0: androidx.activity.ComponentActivity;

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1: androidx.activity.ComponentActivity $this_viewModels> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.lifecycle.ViewModelProvider$Factory invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1 r0;
        androidx.activity.ComponentActivity $r1;
        androidx.lifecycle.ViewModelProvider$Factory $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1: androidx.activity.ComponentActivity $this_viewModels>;

        $r2 = virtualinvoke $r1.<androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "defaultViewModelProviderFactory");

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1 r0;
        androidx.lifecycle.ViewModelProvider$Factory $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1;

        $r1 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1: androidx.lifecycle.ViewModelProvider$Factory invoke()>();

        return $r1;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2: androidx.activity.ComponentActivity $this_viewModels>
    public void <init>(androidx.activity.ComponentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2 r0;
        androidx.activity.ComponentActivity $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2;

        $r1 := @parameter0: androidx.activity.ComponentActivity;

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2: androidx.activity.ComponentActivity $this_viewModels> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.lifecycle.ViewModelStore invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2 r0;
        androidx.activity.ComponentActivity $r1;
        androidx.lifecycle.ViewModelStore $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2: androidx.activity.ComponentActivity $this_viewModels>;

        $r2 = virtualinvoke $r1.<androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "viewModelStore");

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2 r0;
        androidx.lifecycle.ViewModelStore $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2;

        $r1 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2: androidx.lifecycle.ViewModelStore invoke()>();

        return $r1;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: kotlin.jvm.functions.Function0 $extrasProducer>
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: androidx.activity.ComponentActivity $this_viewModels>
    public void <init>(kotlin.jvm.functions.Function0, androidx.activity.ComponentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.activity.ComponentActivity $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: androidx.activity.ComponentActivity;

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: kotlin.jvm.functions.Function0 $extrasProducer> = $r1;

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: androidx.activity.ComponentActivity $this_viewModels> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.lifecycle.viewmodel.CreationExtras invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.activity.ComponentActivity $r2;
        java.lang.Object $r3;
        androidx.lifecycle.viewmodel.CreationExtras $r4;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: kotlin.jvm.functions.Function0 $extrasProducer>;

        if $r1 == null goto label1;

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = (androidx.lifecycle.viewmodel.CreationExtras) $r3;

        if $r4 != null goto label2;

     label1:
        $r2 = r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: androidx.activity.ComponentActivity $this_viewModels>;

        $r4 = virtualinvoke $r2.<androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "this.defaultViewModelCreationExtras");

     label2:
        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3 r0;
        androidx.lifecycle.viewmodel.CreationExtras $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3;

        $r1 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: androidx.lifecycle.viewmodel.CreationExtras invoke()>();

        return $r1;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 INSTANCE>
    void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.lifecycle.ViewModelProvider$Factory invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 r0;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion $r1;
        androidx.lifecycle.ViewModelProvider$Factory $r2;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2;

        $r1 = <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: androidx.lifecycle.ViewModelProvider$Factory getFACTORY$fragment_testing_release()>();

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 r0;
        androidx.lifecycle.ViewModelProvider$Factory $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2;

        $r1 = virtualinvoke r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2: androidx.lifecycle.ViewModelProvider$Factory invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 $r0;

        $r0 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2;

        specialinvoke $r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2: void <init>()>();

        <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 INSTANCE> = $r0;

        return;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion
    private void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.lifecycle.ViewModelProvider$Factory getFACTORY$fragment_testing_release()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion r0;
        androidx.lifecycle.ViewModelProvider$Factory $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion;

        $r1 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.lifecycle.ViewModelProvider$Factory access$getFACTORY$cp()>();

        return $r1;
    }

    public static void getFACTORY$fragment_testing_release$annotations()
    {
        return;
    }

    public final androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel getInstance(androidx.fragment.app.FragmentActivity)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion r0;
        androidx.fragment.app.FragmentActivity r1;
        kotlin.Lazy r2;
        androidx.activity.ComponentActivity $r3;
        kotlin.jvm.functions.Function0 r4, r5, $r11, $r12, $r15;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 $r6;
        androidx.lifecycle.ViewModelLazy $r7;
        kotlin.reflect.KClass $r8;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2 $r9;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3 $r10;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel $r13;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1 $r14;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion;

        r1 := @parameter0: androidx.fragment.app.FragmentActivity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "activity");

        $r3 = (androidx.activity.ComponentActivity) r1;

        $r6 = <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$viewModel$2 INSTANCE>;

        r4 = (kotlin.jvm.functions.Function0) $r6;

        $r15 = r4;

        if r4 != null goto label1;

        $r14 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1;

        specialinvoke $r14.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$1: void <init>(androidx.activity.ComponentActivity)>($r3);

        $r15 = (kotlin.jvm.functions.Function0) $r14;

     label1:
        r5 = $r15;

        $r7 = new androidx.lifecycle.ViewModelLazy;

        $r8 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/fragment/app/testing/FragmentScenario$FragmentFactoryHolderViewModel;");

        $r9 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2;

        specialinvoke $r9.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$2: void <init>(androidx.activity.ComponentActivity)>($r3);

        $r11 = (kotlin.jvm.functions.Function0) $r9;

        $r10 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3;

        specialinvoke $r10.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$getInstance$$inlined$viewModels$default$3: void <init>(kotlin.jvm.functions.Function0,androidx.activity.ComponentActivity)>(null, $r3);

        $r12 = (kotlin.jvm.functions.Function0) $r10;

        specialinvoke $r7.<androidx.lifecycle.ViewModelLazy: void <init>(kotlin.reflect.KClass,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>($r8, $r11, r5, $r12);

        r2 = (kotlin.Lazy) $r7;

        $r13 = staticinvoke <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel getInstance$lambda-0(kotlin.Lazy)>(r2);

        return $r13;
    }

    private static final androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel getInstance$lambda-0(kotlin.Lazy)
    {
        kotlin.Lazy $r0, r1;
        java.lang.Object $r2;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel $r3;

        $r0 := @parameter0: kotlin.Lazy;

        r1 = $r0;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel) $r2;

        return $r3;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: void <init>()>();

        return;
    }

androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion Companion>
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.FragmentFactory fragmentFactory>
<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY>
    public void <init>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel;

        specialinvoke r0.<androidx.lifecycle.ViewModel: void <init>()>();

        return;
    }

    public final androidx.fragment.app.FragmentFactory getFragmentFactory()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel r0;
        androidx.fragment.app.FragmentFactory $r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel;

        $r1 = r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.FragmentFactory fragmentFactory>;

        return $r1;
    }

    public final void setFragmentFactory(androidx.fragment.app.FragmentFactory)
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel r0;
        androidx.fragment.app.FragmentFactory r1;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel;

        r1 := @parameter0: androidx.fragment.app.FragmentFactory;

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.FragmentFactory fragmentFactory> = r1;

        return;
    }

    protected void onCleared()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel r0;

        r0 := @this: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel;

        specialinvoke r0.<androidx.lifecycle.ViewModel: void onCleared()>();

        r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.FragmentFactory fragmentFactory> = null;

        return;
    }

    public static final androidx.lifecycle.ViewModelProvider$Factory access$getFACTORY$cp()
    {
        androidx.lifecycle.ViewModelProvider$Factory $r0;

        $r0 = <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion $r0;
        androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1 $r1;
        androidx.lifecycle.ViewModelProvider$Factory $r2;

        $r0 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion;

        specialinvoke $r0.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion Companion> = $r0;

        $r1 = new androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1;

        specialinvoke $r1.<androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel$Companion$FACTORY$1: void <init>()>();

        $r2 = (androidx.lifecycle.ViewModelProvider$Factory) $r1;

        <androidx.fragment.app.testing.FragmentScenario$FragmentFactoryHolderViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY> = $r2;

        return;
    }

