androidx.core.graphics.TypefaceCompatUtil
<androidx.core.graphics.TypefaceCompatUtil: java.lang.String TAG>
<androidx.core.graphics.TypefaceCompatUtil: java.lang.String CACHE_FILE_PREFIX>
    private void <init>()
    {
        androidx.core.graphics.TypefaceCompatUtil r0;

        r0 := @this: androidx.core.graphics.TypefaceCompatUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File getTempFile(android.content.Context)
    {
        android.content.Context r0;
        java.io.File r1, r3, $r11;
        java.lang.String r2, $r15;
        java.lang.Throwable r4, $r16;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: java.io.File getCacheDir()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".font");

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i1 = staticinvoke <android.os.Process: int myTid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        i2 = 0;

     label2:
        if i2 >= 100 goto label8;

        $r11 = new java.io.File;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r15);

        r3 = $r11;

     label3:
        $z0 = virtualinvoke r3.<java.io.File: boolean createNewFile()>();

        if $z0 == 0 goto label5;

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;

        r4 = $r16;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return null;

        catch java.io.IOException from label3 to label4 with label6;
    }

    private static java.nio.ByteBuffer mmap(java.io.File)
    {
        java.io.File r0;
        java.nio.MappedByteBuffer r1;
        java.io.FileInputStream $r2, r7;
        java.nio.channels.FileChannel$MapMode $r3;
        java.lang.Throwable $r4, $r5, $r6, r9, r10, r11;
        java.nio.channels.FileChannel r8;
        long l0;

        r0 := @parameter0: java.io.File;

     label01:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r7 = $r2;

     label02:
        r8 = virtualinvoke r7.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l0 = virtualinvoke r8.<java.nio.channels.FileChannel: long size()>();

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r1 = virtualinvoke r8.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r3, 0L, l0);

     label03:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label04:
        return r1;

     label05:
        $r4 := @caughtexception;

        r9 = $r4;

     label06:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        r10 = $r6;

        virtualinvoke r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10);

     label09:
        throw r9;

     label10:
        $r5 := @caughtexception;

        r11 = $r5;

        return null;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label01 to label04 with label10;
        catch java.io.IOException from label05 to label10 with label10;
    }

    public static java.nio.ByteBuffer mmap(android.content.Context, android.os.CancellationSignal, android.net.Uri)
    {
        android.content.Context r0;
        android.os.CancellationSignal r1;
        android.net.Uri r2;
        android.content.ContentResolver r3;
        java.nio.MappedByteBuffer r4;
        java.io.FileInputStream $r5, r14;
        java.io.FileDescriptor $r6;
        java.nio.channels.FileChannel$MapMode $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, r16, r17, r18, r19;
        android.os.ParcelFileDescriptor r13;
        java.nio.channels.FileChannel r15;
        long l0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: android.net.Uri;

        r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        r13 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil$Api19Impl: android.os.ParcelFileDescriptor openFileDescriptor(android.content.ContentResolver,android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r3, r2, "r", r1);

     label02:
        if r13 != null goto label05;

     label03:
        if r13 == null goto label04;

        virtualinvoke r13.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        return null;

     label05:
        $r5 = new java.io.FileInputStream;

        $r6 = virtualinvoke r13.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r6);

        r14 = $r5;

     label06:
        r15 = virtualinvoke r14.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l0 = virtualinvoke r15.<java.nio.channels.FileChannel: long size()>();

        $r7 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r4 = virtualinvoke r15.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r7, 0L, l0);

     label07:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label08:
        if r13 == null goto label09;

        virtualinvoke r13.<android.os.ParcelFileDescriptor: void close()>();

     label09:
        return r4;

     label10:
        $r10 := @caughtexception;

        r16 = $r10;

     label11:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        r17 = $r12;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r17);

     label14:
        throw r16;

     label15:
        $r11 := @caughtexception;

        r18 = $r11;

        if r13 == null goto label19;

     label16:
        virtualinvoke r13.<android.os.ParcelFileDescriptor: void close()>();

     label17:
        goto label19;

     label18:
        $r9 := @caughtexception;

        r19 = $r9;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r19);

     label19:
        throw r18;

     label20:
        $r8 := @caughtexception;

        return null;

        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label05 to label08 with label15;
        catch java.lang.Throwable from label10 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.io.IOException from label01 to label04 with label20;
        catch java.io.IOException from label05 to label09 with label20;
        catch java.io.IOException from label10 to label20 with label20;
    }

    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context, android.content.res.Resources, int)
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        int i0;
        java.io.File r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;
        java.nio.ByteBuffer r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r2 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>(r0);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>(r2, r1, i0);

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        return null;

     label3:
        r5 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>(r2);

     label4:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        return r5;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

     label6:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static boolean copyToFile(java.io.File, java.io.InputStream)
    {
        java.io.File r0;
        java.io.InputStream r1;
        android.os.StrictMode$ThreadPolicy r2;
        boolean z0, z1;
        java.lang.Throwable r3, $r5, $r6, r14;
        java.io.FileOutputStream $r4, r12;
        int $i0, i2;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;
        byte[] r13;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.InputStream;

        r12 = null;

        r2 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label1:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r0, 0);

        r12 = $r4;

        r13 = newarray (byte)[1024];

     label2:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r13);

        i2 = $i0;

        if $i0 == -1 goto label3;

        virtualinvoke r12.<java.io.FileOutputStream: void write(byte[],int,int)>(r13, 0, i2);

        goto label2;

     label3:
        z0 = 1;

     label4:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r12);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        return z0;

     label5:
        $r6 := @caughtexception;

        r14 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error copying resource contents to temp file: ");

        $r9 = virtualinvoke r14.<java.io.IOException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TypefaceCompatUtil", $r11);

        z1 = 0;

     label6:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r12);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        return z1;

     label7:
        $r5 := @caughtexception;

        r3 = $r5;

     label8:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r12);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        throw r3;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static boolean copyToFile(java.io.File, android.content.res.Resources, int)
    {
        java.io.File r0;
        android.content.res.Resources r1;
        int i0;
        boolean z0;
        java.lang.Throwable r2, $r3;
        java.io.InputStream r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r4 = null;

     label1:
        r4 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>(r0, r4);

     label2:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r4);

        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r4);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.util.Map readFontInfoIntoByteBuffer(android.content.Context, androidx.core.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] r1, r4;
        android.os.CancellationSignal r2;
        java.util.HashMap r3, $r8;
        int i0, $i1, i2;
        androidx.core.provider.FontsContractCompat$FontInfo r5;
        android.net.Uri r6;
        java.nio.ByteBuffer r7;
        java.util.Map $r9;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.core.provider.FontsContractCompat$FontInfo[];

        r2 := @parameter2: android.os.CancellationSignal;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r3 = $r8;

        r4 = r1;

        i0 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r5 = r4[i2];

        $i1 = virtualinvoke r5.<androidx.core.provider.FontsContractCompat$FontInfo: int getResultCode()>();

        if $i1 == 0 goto label2;

        goto label4;

     label2:
        r6 = virtualinvoke r5.<androidx.core.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        r7 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>(r0, r2, r6);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        return $r9;
    }

androidx.core.graphics.TypefaceCompatUtil$Api19Impl
    private void <init>()
    {
        androidx.core.graphics.TypefaceCompatUtil$Api19Impl r0;

        r0 := @this: androidx.core.graphics.TypefaceCompatUtil$Api19Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.os.ParcelFileDescriptor openFileDescriptor(android.content.ContentResolver, android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.CancellationSignal r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.CancellationSignal;

        $r4 = virtualinvoke r0.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3);

        return $r4;
    }

