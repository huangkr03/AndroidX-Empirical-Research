androidx.sqlite.db.SupportSQLiteQueryBuilder
<androidx.sqlite.db.SupportSQLiteQueryBuilder: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion Companion>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String table>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: boolean distinct>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String[] columns>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String selection>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.Object[] bindArgs>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String groupBy>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String having>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String orderBy>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String limit>
<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.util.regex.Pattern limitPattern>
    private void <init>(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String table> = r1;

        return;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder distinct()
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r1, $r2, $r3;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 = r0;

        $r2 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r1;

        $r2.<androidx.sqlite.db.SupportSQLiteQueryBuilder: boolean distinct> = 1;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r1;

        return $r3;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder columns(java.lang.String[])
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r2, $r3, $r4;
        java.lang.String[] r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String[] columns> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        return $r4;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder selection(java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r3, $r4, $r5;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 = r0;

        $r4 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r3;

        $r4.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String selection> = r1;

        $r4.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.Object[] bindArgs> = r2;

        $r5 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r3;

        return $r5;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder groupBy(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String groupBy> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        return $r4;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder having(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String having> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        return $r4;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder orderBy(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String orderBy> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        return $r4;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder limit(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0, r2, $r3, $r8;
        java.lang.String r1, $r13, $r14;
        boolean z1, $z2, $z3;
        java.lang.CharSequence $r4, $r7;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        int $i0;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "limit");

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        $r5 = <androidx.sqlite.db.SupportSQLiteQueryBuilder: java.util.regex.Pattern limitPattern>;

        $r4 = (java.lang.CharSequence) r1;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        $r7 = (java.lang.CharSequence) r1;

        $i0 = interfaceinvoke $r7.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        if z1 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid LIMIT clauses:");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        $r3.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String limit> = r1;

        $r8 = (androidx.sqlite.db.SupportSQLiteQueryBuilder) r2;

        return $r8;
    }

    public final androidx.sqlite.db.SupportSQLiteQuery create()
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.StringBuilder r1, $r5;
        java.lang.String[] r3, $r20;
        java.lang.String $r4, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r23, $r24, $r27, r28;
        boolean $z1, $z2, $z3, $z4, $z6, $z7;
        androidx.sqlite.db.SimpleSQLiteQuery $r17;
        java.lang.Object[] $r18;
        androidx.sqlite.db.SupportSQLiteQuery $r19;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r22;
        java.lang.CharSequence r25, r26;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        $r4 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String groupBy>;

        r25 = (java.lang.CharSequence) $r4;

        if r25 == null goto label01;

        $i2 = interfaceinvoke r25.<java.lang.CharSequence: int length()>();

        if $i2 != 0 goto label02;

     label01:
        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        if $z2 == 0 goto label07;

        $r24 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String having>;

        r26 = (java.lang.CharSequence) $r24;

        if r26 == null goto label04;

        $i1 = interfaceinvoke r26.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label05;

     label04:
        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        if $z3 == 0 goto label08;

     label07:
        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        if $z4 != 0 goto label10;

        $r27 = "HAVING clauses are only permitted when using a groupBy clause";

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(120);

        r1 = $r5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        $z1 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: boolean distinct>;

        if $z1 == 0 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTINCT ");

     label11:
        r3 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String[] columns>;

        if r3 == null goto label14;

        $i0 = lengthof r3;

        if $i0 != 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        if $z6 == 0 goto label15;

     label14:
        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        if $z7 != 0 goto label17;

        $r20 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String[] columns>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r20);

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>(r1, $r20);

        goto label18;

     label17:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

     label18:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM ");

        $r9 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String table>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String selection>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, " WHERE ", $r11);

        $r12 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String groupBy>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, " GROUP BY ", $r12);

        $r13 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String having>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, " HAVING ", $r13);

        $r14 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String orderBy>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, " ORDER BY ", $r14);

        $r15 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.String limit>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, " LIMIT ", $r15);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "StringBuilder(capacity).\u2026builderAction).toString()");

        r28 = $r16;

        $r17 = new androidx.sqlite.db.SimpleSQLiteQuery;

        $r18 = r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: java.lang.Object[] bindArgs>;

        specialinvoke $r17.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String,java.lang.Object[])>(r28, $r18);

        $r19 = (androidx.sqlite.db.SupportSQLiteQuery) $r17;

        return $r19;
    }

    private final void appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.StringBuilder $r1;
        java.lang.String r2, r3;
        java.lang.CharSequence r4;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = (java.lang.CharSequence) r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label4:
        return;
    }

    private final void appendColumns(java.lang.StringBuilder, java.lang.String[])
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.StringBuilder $r1;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String r3;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String[];

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        if i1 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        return;
    }

    public static final androidx.sqlite.db.SupportSQLiteQueryBuilder builder(java.lang.String)
    {
        java.lang.String r0;
        androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion $r1;
        androidx.sqlite.db.SupportSQLiteQueryBuilder $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <androidx.sqlite.db.SupportSQLiteQueryBuilder: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion: androidx.sqlite.db.SupportSQLiteQueryBuilder builder(java.lang.String)>(r0);

        return $r2;
    }

    public void <init>(java.lang.String, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void <init>(java.lang.String)>(r1);

        return;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion $r0;
        java.util.regex.Pattern $r1;

        $r0 = new androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion;

        specialinvoke $r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.SupportSQLiteQueryBuilder: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion Companion> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*\\d+\\s*(,\\s*\\d+\\s*)?");

        <androidx.sqlite.db.SupportSQLiteQueryBuilder: java.util.regex.Pattern limitPattern> = $r1;

        return;
    }

androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion
    private void <init>()
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion r0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.sqlite.db.SupportSQLiteQueryBuilder builder(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion r0;
        java.lang.String r1;
        androidx.sqlite.db.SupportSQLiteQueryBuilder $r2;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableName");

        $r2 = new androidx.sqlite.db.SupportSQLiteQueryBuilder;

        specialinvoke $r2.<androidx.sqlite.db.SupportSQLiteQueryBuilder: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, null);

        return $r2;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteQueryBuilder$Companion: void <init>()>();

        return;
    }

