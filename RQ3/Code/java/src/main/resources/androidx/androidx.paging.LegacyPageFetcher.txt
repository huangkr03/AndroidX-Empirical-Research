androidx.paging.LegacyPageFetcher
<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineScope pagedListScope>
<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>
<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource source>
<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher notifyDispatcher>
<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher>
<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$PageConsumer pageConsumer>
<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$KeyProvider keyProvider>
<androidx.paging.LegacyPageFetcher: java.util.concurrent.atomic.AtomicBoolean detached>
<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>
    public void <init>(kotlinx.coroutines.CoroutineScope, androidx.paging.PagedList$Config, androidx.paging.PagingSource, kotlinx.coroutines.CoroutineDispatcher, kotlinx.coroutines.CoroutineDispatcher, androidx.paging.LegacyPageFetcher$PageConsumer, androidx.paging.LegacyPageFetcher$KeyProvider)
    {
        androidx.paging.LegacyPageFetcher r0;
        kotlinx.coroutines.CoroutineScope r1;
        androidx.paging.PagedList$Config r2;
        androidx.paging.PagingSource r3;
        kotlinx.coroutines.CoroutineDispatcher r4, r5;
        androidx.paging.LegacyPageFetcher$PageConsumer r6;
        androidx.paging.LegacyPageFetcher$KeyProvider r7;
        java.util.concurrent.atomic.AtomicBoolean $r8;
        androidx.paging.LegacyPageFetcher$loadStateManager$1 $r9;
        androidx.paging.PagedList$LoadStateManager $r10;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: androidx.paging.PagedList$Config;

        r3 := @parameter2: androidx.paging.PagingSource;

        r4 := @parameter3: kotlinx.coroutines.CoroutineDispatcher;

        r5 := @parameter4: kotlinx.coroutines.CoroutineDispatcher;

        r6 := @parameter5: androidx.paging.LegacyPageFetcher$PageConsumer;

        r7 := @parameter6: androidx.paging.LegacyPageFetcher$KeyProvider;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pagedListScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "notifyDispatcher");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "fetchDispatcher");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "pageConsumer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "keyProvider");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineScope pagedListScope> = r1;

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config> = r2;

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource source> = r3;

        r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher notifyDispatcher> = r4;

        r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher> = r5;

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$PageConsumer pageConsumer> = r6;

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$KeyProvider keyProvider> = r7;

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.paging.LegacyPageFetcher: java.util.concurrent.atomic.AtomicBoolean detached> = $r8;

        $r9 = new androidx.paging.LegacyPageFetcher$loadStateManager$1;

        specialinvoke $r9.<androidx.paging.LegacyPageFetcher$loadStateManager$1: void <init>(androidx.paging.LegacyPageFetcher)>(r0);

        $r10 = (androidx.paging.PagedList$LoadStateManager) $r9;

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager> = $r10;

        return;
    }

    public final androidx.paging.PagedList$Config getConfig()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagedList$Config $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>;

        return $r1;
    }

    public final androidx.paging.PagingSource getSource()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagingSource $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource source>;

        return $r1;
    }

    public final androidx.paging.LegacyPageFetcher$PageConsumer getPageConsumer()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LegacyPageFetcher$PageConsumer $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$PageConsumer pageConsumer>;

        return $r1;
    }

    public final androidx.paging.PagedList$LoadStateManager getLoadStateManager()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagedList$LoadStateManager $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        return $r1;
    }

    public final void setLoadStateManager(androidx.paging.PagedList$LoadStateManager)
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagedList$LoadStateManager r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        r1 := @parameter0: androidx.paging.PagedList$LoadStateManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager> = r1;

        return;
    }

    public static void getLoadStateManager$annotations()
    {
        return;
    }

    public final boolean isDetached()
    {
        androidx.paging.LegacyPageFetcher r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: java.util.concurrent.atomic.AtomicBoolean detached>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    private final void scheduleLoad(androidx.paging.LoadType, androidx.paging.PagingSource$LoadParams)
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LoadType r1;
        androidx.paging.PagingSource$LoadParams r2;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 $r4;
        kotlinx.coroutines.CoroutineScope $r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlin.jvm.functions.Function2 $r7;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r5 = r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineScope pagedListScope>;

        $r3 = r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher>;

        $r6 = (kotlin.coroutines.CoroutineContext) $r3;

        $r4 = new androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        specialinvoke $r4.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: void <init>(androidx.paging.LegacyPageFetcher,androidx.paging.PagingSource$LoadParams,androidx.paging.LoadType,kotlin.coroutines.Continuation)>(r0, r2, r1, null);

        $r7 = (kotlin.jvm.functions.Function2) $r4;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r5, $r6, null, $r7, 2, null);

        return;
    }

    private final void onLoadSuccess(androidx.paging.LoadType, androidx.paging.PagingSource$LoadResult$Page)
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LoadType r1, r3;
        androidx.paging.PagingSource$LoadResult$Page r2;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        androidx.paging.LegacyPageFetcher$PageConsumer $r4;
        androidx.paging.PagedList$LoadStateManager $r5;
        java.util.List $r6;
        androidx.paging.LoadState$NotLoading$Companion $r7, $r9;
        androidx.paging.LoadState $r8;
        int[] $r11;
        java.lang.IllegalStateException $r12;
        androidx.paging.LoadState$NotLoading $r13;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: androidx.paging.PagingSource$LoadResult$Page;

        $z0 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher: boolean isDetached()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$PageConsumer pageConsumer>;

        $z1 = interfaceinvoke $r4.<androidx.paging.LegacyPageFetcher$PageConsumer: boolean onPageResult(androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>(r1, r2);

        if $z1 == 0 goto label5;

        r3 = r1;

        $r11 = <androidx.paging.LegacyPageFetcher$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r3.<androidx.paging.LoadType: int ordinal()>();

        i0 = $r11[$i1];

        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void schedulePrepend()>();

        goto label8;

     label3:
        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void scheduleAppend()>();

        goto label8;

     label4:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only fetch more during append/prepend");

        throw $r12;

     label5:
        $r5 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        $r6 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label6;

        $r9 = <androidx.paging.LoadState$NotLoading: androidx.paging.LoadState$NotLoading$Companion Companion>;

        $r13 = virtualinvoke $r9.<androidx.paging.LoadState$NotLoading$Companion: androidx.paging.LoadState$NotLoading getComplete$paging_common()>();

        goto label7;

     label6:
        $r7 = <androidx.paging.LoadState$NotLoading: androidx.paging.LoadState$NotLoading$Companion Companion>;

        $r13 = virtualinvoke $r7.<androidx.paging.LoadState$NotLoading$Companion: androidx.paging.LoadState$NotLoading getIncomplete$paging_common()>();

     label7:
        $r8 = (androidx.paging.LoadState) $r13;

        virtualinvoke $r5.<androidx.paging.PagedList$LoadStateManager: void setState(androidx.paging.LoadType,androidx.paging.LoadState)>(r1, $r8);

     label8:
        return;
    }

    private final void onLoadError(androidx.paging.LoadType, java.lang.Throwable)
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LoadType r1;
        java.lang.Throwable r2;
        androidx.paging.LoadState$Error r3, $r4;
        boolean $z0;
        androidx.paging.LoadState $r5;
        androidx.paging.PagedList$LoadStateManager $r6;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher: boolean isDetached()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new androidx.paging.LoadState$Error;

        specialinvoke $r4.<androidx.paging.LoadState$Error: void <init>(java.lang.Throwable)>(r2);

        r3 = $r4;

        $r6 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        $r5 = (androidx.paging.LoadState) r3;

        virtualinvoke $r6.<androidx.paging.PagedList$LoadStateManager: void setState(androidx.paging.LoadType,androidx.paging.LoadState)>(r1, $r5);

        return;
    }

    private final void onLoadInvalid()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagingSource $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource source>;

        virtualinvoke $r1.<androidx.paging.PagingSource: void invalidate()>();

        virtualinvoke r0.<androidx.paging.LegacyPageFetcher: void detach()>();

        return;
    }

    public final void trySchedulePrepend()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LoadState r1;
        androidx.paging.PagedList$LoadStateManager $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r2 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        r1 = virtualinvoke $r2.<androidx.paging.PagedList$LoadStateManager: androidx.paging.LoadState getStartState()>();

        $z0 = r1 instanceof androidx.paging.LoadState$NotLoading;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<androidx.paging.LoadState: boolean getEndOfPaginationReached()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void schedulePrepend()>();

     label1:
        return;
    }

    public final void tryScheduleAppend()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.LoadState r1;
        androidx.paging.PagedList$LoadStateManager $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r2 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        r1 = virtualinvoke $r2.<androidx.paging.PagedList$LoadStateManager: androidx.paging.LoadState getEndState()>();

        $z0 = r1 instanceof androidx.paging.LoadState$NotLoading;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<androidx.paging.LoadState: boolean getEndOfPaginationReached()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void scheduleAppend()>();

     label1:
        return;
    }

    private final void schedulePrepend()
    {
        androidx.paging.LegacyPageFetcher r0;
        java.lang.Object r1;
        androidx.paging.PagingSource$LoadParams$Prepend r2, $r8;
        androidx.paging.LegacyPageFetcher$KeyProvider $r3;
        androidx.paging.LoadState$Loading $r4;
        androidx.paging.LoadState $r5;
        androidx.paging.LoadType $r6, $r12, $r14;
        androidx.paging.PagedList$LoadStateManager $r7;
        androidx.paging.PagedList$Config $r9, $r10;
        boolean $z0;
        int $i0;
        androidx.paging.PagingSource$LoadParams $r11;
        androidx.paging.PagingSource$LoadResult$Page$Companion $r13;
        androidx.paging.PagingSource$LoadResult$Page $r15;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r3 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$KeyProvider keyProvider>;

        r1 = interfaceinvoke $r3.<androidx.paging.LegacyPageFetcher$KeyProvider: java.lang.Object getPrevKey()>();

        if r1 != null goto label1;

        $r14 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $r13 = <androidx.paging.PagingSource$LoadResult$Page: androidx.paging.PagingSource$LoadResult$Page$Companion Companion>;

        $r15 = virtualinvoke $r13.<androidx.paging.PagingSource$LoadResult$Page$Companion: androidx.paging.PagingSource$LoadResult$Page empty$paging_common()>();

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void onLoadSuccess(androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>($r14, $r15);

        return;

     label1:
        $r7 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        $r6 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $r4 = <androidx.paging.LoadState$Loading: androidx.paging.LoadState$Loading INSTANCE>;

        $r5 = (androidx.paging.LoadState) $r4;

        virtualinvoke $r7.<androidx.paging.PagedList$LoadStateManager: void setState(androidx.paging.LoadType,androidx.paging.LoadState)>($r6, $r5);

        $r8 = new androidx.paging.PagingSource$LoadParams$Prepend;

        $r9 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>;

        $i0 = $r9.<androidx.paging.PagedList$Config: int pageSize>;

        $r10 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>;

        $z0 = $r10.<androidx.paging.PagedList$Config: boolean enablePlaceholders>;

        specialinvoke $r8.<androidx.paging.PagingSource$LoadParams$Prepend: void <init>(java.lang.Object,int,boolean)>(r1, $i0, $z0);

        r2 = $r8;

        $r12 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $r11 = (androidx.paging.PagingSource$LoadParams) r2;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void scheduleLoad(androidx.paging.LoadType,androidx.paging.PagingSource$LoadParams)>($r12, $r11);

        return;
    }

    private final void scheduleAppend()
    {
        androidx.paging.LegacyPageFetcher r0;
        java.lang.Object r1;
        androidx.paging.PagingSource$LoadParams$Append r2, $r8;
        androidx.paging.LegacyPageFetcher$KeyProvider $r3;
        androidx.paging.LoadState$Loading $r4;
        androidx.paging.LoadState $r5;
        androidx.paging.LoadType $r6, $r12, $r14;
        androidx.paging.PagedList$LoadStateManager $r7;
        androidx.paging.PagedList$Config $r9, $r10;
        boolean $z0;
        int $i0;
        androidx.paging.PagingSource$LoadParams $r11;
        androidx.paging.PagingSource$LoadResult$Page$Companion $r13;
        androidx.paging.PagingSource$LoadResult$Page $r15;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r3 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$KeyProvider keyProvider>;

        r1 = interfaceinvoke $r3.<androidx.paging.LegacyPageFetcher$KeyProvider: java.lang.Object getNextKey()>();

        if r1 != null goto label1;

        $r14 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $r13 = <androidx.paging.PagingSource$LoadResult$Page: androidx.paging.PagingSource$LoadResult$Page$Companion Companion>;

        $r15 = virtualinvoke $r13.<androidx.paging.PagingSource$LoadResult$Page$Companion: androidx.paging.PagingSource$LoadResult$Page empty$paging_common()>();

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void onLoadSuccess(androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>($r14, $r15);

        return;

     label1:
        $r7 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        $r6 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $r4 = <androidx.paging.LoadState$Loading: androidx.paging.LoadState$Loading INSTANCE>;

        $r5 = (androidx.paging.LoadState) $r4;

        virtualinvoke $r7.<androidx.paging.PagedList$LoadStateManager: void setState(androidx.paging.LoadType,androidx.paging.LoadState)>($r6, $r5);

        $r8 = new androidx.paging.PagingSource$LoadParams$Append;

        $r9 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>;

        $i0 = $r9.<androidx.paging.PagedList$Config: int pageSize>;

        $r10 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$Config config>;

        $z0 = $r10.<androidx.paging.PagedList$Config: boolean enablePlaceholders>;

        specialinvoke $r8.<androidx.paging.PagingSource$LoadParams$Append: void <init>(java.lang.Object,int,boolean)>(r1, $i0, $z0);

        r2 = $r8;

        $r12 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $r11 = (androidx.paging.PagingSource$LoadParams) r2;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void scheduleLoad(androidx.paging.LoadType,androidx.paging.PagingSource$LoadParams)>($r12, $r11);

        return;
    }

    public final void retry()
    {
        androidx.paging.LegacyPageFetcher r0;
        androidx.paging.PagedList$LoadStateManager $r1, $r2;
        boolean $z0, $z1, z2, z3, z5, z6;
        androidx.paging.LoadState r3, r4;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        r3 = virtualinvoke $r1.<androidx.paging.PagedList$LoadStateManager: androidx.paging.LoadState getStartState()>();

        z2 = 0;

        z3 = 0;

        $z0 = r3 instanceof androidx.paging.LoadState$Error;

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void schedulePrepend()>();

     label1:
        $r2 = r0.<androidx.paging.LegacyPageFetcher: androidx.paging.PagedList$LoadStateManager loadStateManager>;

        r4 = virtualinvoke $r2.<androidx.paging.PagedList$LoadStateManager: androidx.paging.LoadState getEndState()>();

        z5 = 0;

        z6 = 0;

        $z1 = r4 instanceof androidx.paging.LoadState$Error;

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.paging.LegacyPageFetcher: void scheduleAppend()>();

     label2:
        return;
    }

    public final void detach()
    {
        androidx.paging.LegacyPageFetcher r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher;

        $r1 = r0.<androidx.paging.LegacyPageFetcher: java.util.concurrent.atomic.AtomicBoolean detached>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public static final kotlinx.coroutines.CoroutineDispatcher access$getNotifyDispatcher$p(androidx.paging.LegacyPageFetcher)
    {
        androidx.paging.LegacyPageFetcher $r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        $r0 := @parameter0: androidx.paging.LegacyPageFetcher;

        $r1 = $r0.<androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher notifyDispatcher>;

        return $r1;
    }

    public static final void access$onLoadSuccess(androidx.paging.LegacyPageFetcher, androidx.paging.LoadType, androidx.paging.PagingSource$LoadResult$Page)
    {
        androidx.paging.LegacyPageFetcher $r0;
        androidx.paging.LoadType r1;
        androidx.paging.PagingSource$LoadResult$Page r2;

        $r0 := @parameter0: androidx.paging.LegacyPageFetcher;

        r1 := @parameter1: androidx.paging.LoadType;

        r2 := @parameter2: androidx.paging.PagingSource$LoadResult$Page;

        specialinvoke $r0.<androidx.paging.LegacyPageFetcher: void onLoadSuccess(androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>(r1, r2);

        return;
    }

    public static final void access$onLoadError(androidx.paging.LegacyPageFetcher, androidx.paging.LoadType, java.lang.Throwable)
    {
        androidx.paging.LegacyPageFetcher $r0;
        androidx.paging.LoadType r1;
        java.lang.Throwable r2;

        $r0 := @parameter0: androidx.paging.LegacyPageFetcher;

        r1 := @parameter1: androidx.paging.LoadType;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke $r0.<androidx.paging.LegacyPageFetcher: void onLoadError(androidx.paging.LoadType,java.lang.Throwable)>(r1, r2);

        return;
    }

    public static final void access$onLoadInvalid(androidx.paging.LegacyPageFetcher)
    {
        androidx.paging.LegacyPageFetcher $r0;

        $r0 := @parameter0: androidx.paging.LegacyPageFetcher;

        specialinvoke $r0.<androidx.paging.LegacyPageFetcher: void onLoadInvalid()>();

        return;
    }

androidx.paging.LegacyPageFetcher$KeyProvider
<androidx.paging.LegacyPageFetcher$KeyProvider: java.lang.Object getPrevKey()>
<androidx.paging.LegacyPageFetcher$KeyProvider: java.lang.Object getNextKey()>
androidx.paging.LegacyPageFetcher$loadStateManager$1
<androidx.paging.LegacyPageFetcher$loadStateManager$1: androidx.paging.LegacyPageFetcher this$0>
    void <init>(androidx.paging.LegacyPageFetcher)
    {
        androidx.paging.LegacyPageFetcher$loadStateManager$1 r0;
        androidx.paging.LegacyPageFetcher $r1;

        r0 := @this: androidx.paging.LegacyPageFetcher$loadStateManager$1;

        $r1 := @parameter0: androidx.paging.LegacyPageFetcher;

        r0.<androidx.paging.LegacyPageFetcher$loadStateManager$1: androidx.paging.LegacyPageFetcher this$0> = $r1;

        specialinvoke r0.<androidx.paging.PagedList$LoadStateManager: void <init>()>();

        return;
    }

    public void onStateChanged(androidx.paging.LoadType, androidx.paging.LoadState)
    {
        androidx.paging.LegacyPageFetcher$loadStateManager$1 r0;
        androidx.paging.LoadType r1;
        androidx.paging.LoadState r2;
        androidx.paging.LegacyPageFetcher $r3;
        androidx.paging.LegacyPageFetcher$PageConsumer $r4;

        r0 := @this: androidx.paging.LegacyPageFetcher$loadStateManager$1;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: androidx.paging.LoadState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "state");

        $r3 = r0.<androidx.paging.LegacyPageFetcher$loadStateManager$1: androidx.paging.LegacyPageFetcher this$0>;

        $r4 = virtualinvoke $r3.<androidx.paging.LegacyPageFetcher: androidx.paging.LegacyPageFetcher$PageConsumer getPageConsumer()>();

        interfaceinvoke $r4.<androidx.paging.LegacyPageFetcher$PageConsumer: void onStateChanged(androidx.paging.LoadType,androidx.paging.LoadState)>(r1, r2);

        return;
    }

androidx.paging.LegacyPageFetcher$PageConsumer
<androidx.paging.LegacyPageFetcher$PageConsumer: boolean onPageResult(androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>
<androidx.paging.LegacyPageFetcher$PageConsumer: void onStateChanged(androidx.paging.LoadType,androidx.paging.LoadState)>
androidx.paging.LegacyPageFetcher$scheduleLoad$1$1
<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: int label>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LoadType $type>
    void <init>(androidx.paging.PagingSource$LoadResult, androidx.paging.LegacyPageFetcher, androidx.paging.LoadType, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 r0;
        androidx.paging.PagingSource$LoadResult $r1;
        androidx.paging.LegacyPageFetcher $r2;
        androidx.paging.LoadType $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        $r1 := @parameter0: androidx.paging.PagingSource$LoadResult;

        $r2 := @parameter1: androidx.paging.LegacyPageFetcher;

        $r3 := @parameter2: androidx.paging.LoadType;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value> = $r1;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0> = $r2;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LoadType $type> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 r0;
        java.lang.Object $r1;
        androidx.paging.PagingSource$LoadResult r2, $r5, $r10;
        int $i0;
        boolean $z0, $z1, $z2;
        androidx.paging.LegacyPageFetcher $r4, $r7, $r13;
        androidx.paging.PagingSource$LoadResult$Error $r6;
        androidx.paging.LoadType $r8, $r12;
        java.lang.Throwable $r9;
        androidx.paging.PagingSource$LoadResult$Page $r11;
        java.lang.IllegalStateException $r14;
        kotlin.Unit $r15;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label5;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r2 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value>;

        $z0 = r2 instanceof androidx.paging.PagingSource$LoadResult$Page;

        if $z0 == 0 goto label2;

        $r13 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0>;

        $r12 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LoadType $type>;

        $r10 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value>;

        $r11 = (androidx.paging.PagingSource$LoadResult$Page) $r10;

        staticinvoke <androidx.paging.LegacyPageFetcher: void access$onLoadSuccess(androidx.paging.LegacyPageFetcher,androidx.paging.LoadType,androidx.paging.PagingSource$LoadResult$Page)>($r13, $r12, $r11);

        goto label4;

     label2:
        $z1 = r2 instanceof androidx.paging.PagingSource$LoadResult$Error;

        if $z1 == 0 goto label3;

        $r7 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0>;

        $r8 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LoadType $type>;

        $r5 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value>;

        $r6 = (androidx.paging.PagingSource$LoadResult$Error) $r5;

        $r9 = virtualinvoke $r6.<androidx.paging.PagingSource$LoadResult$Error: java.lang.Throwable getThrowable()>();

        staticinvoke <androidx.paging.LegacyPageFetcher: void access$onLoadError(androidx.paging.LegacyPageFetcher,androidx.paging.LoadType,java.lang.Throwable)>($r7, $r8, $r9);

        goto label4;

     label3:
        $z2 = r2 instanceof androidx.paging.PagingSource$LoadResult$Invalid;

        if $z2 == 0 goto label4;

        $r4 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0>;

        staticinvoke <androidx.paging.LegacyPageFetcher: void access$onLoadInvalid(androidx.paging.LegacyPageFetcher)>($r4);

     label4:
        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r15;

     label5:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r14;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.paging.LoadType $r4;
        androidx.paging.LegacyPageFetcher $r5;
        androidx.paging.PagingSource$LoadResult $r6;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        $r6 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.PagingSource$LoadResult $value>;

        $r5 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LegacyPageFetcher this$0>;

        $r4 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: androidx.paging.LoadType $type>;

        specialinvoke $r3.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: void <init>(androidx.paging.PagingSource$LoadResult,androidx.paging.LegacyPageFetcher,androidx.paging.LoadType,kotlin.coroutines.Continuation)>($r6, $r5, $r4, $r2);

        $r7 = (kotlin.coroutines.Continuation) $r3;

        return $r7;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.paging.LegacyPageFetcher$scheduleLoad$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.paging.LegacyPageFetcher$scheduleLoad$1
<androidx.paging.LegacyPageFetcher$scheduleLoad$1: int label>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object L$0>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.PagingSource$LoadParams $params>
<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LoadType $type>
    void <init>(androidx.paging.LegacyPageFetcher, androidx.paging.PagingSource$LoadParams, androidx.paging.LoadType, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 r0;
        androidx.paging.LegacyPageFetcher $r1;
        androidx.paging.PagingSource$LoadParams $r2;
        androidx.paging.LoadType $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        $r1 := @parameter0: androidx.paging.LegacyPageFetcher;

        $r2 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r3 := @parameter2: androidx.paging.LoadType;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0> = $r1;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.PagingSource$LoadParams $params> = $r2;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LoadType $type> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 r0;
        java.lang.Object $r1, r3, $r4, $r18, $r25;
        androidx.paging.PagingSource$LoadResult r2;
        int $i0;
        androidx.paging.LegacyPageFetcher $r5, $r7, $r11, $r16, $r19;
        androidx.paging.PagingSource $r6, $r20;
        boolean $z0;
        kotlinx.coroutines.CoroutineDispatcher $r8;
        androidx.paging.LegacyPageFetcher$scheduleLoad$1$1 $r9;
        androidx.paging.LoadType $r10;
        kotlin.coroutines.CoroutineContext $r12;
        kotlin.jvm.functions.Function2 $r13;
        kotlin.Unit $r15, $r17;
        androidx.paging.PagingSource$LoadParams $r21;
        kotlin.coroutines.Continuation $r22;
        java.lang.IllegalStateException $r23;
        kotlinx.coroutines.CoroutineScope $r24;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label5;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r18 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object L$0>;

        $r24 = (kotlinx.coroutines.CoroutineScope) $r18;

        $r19 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        $r20 = virtualinvoke $r19.<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource getSource()>();

        $r21 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.PagingSource$LoadParams $params>;

        $r22 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object L$0> = $r24;

        r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: int label> = 1;

        $r25 = virtualinvoke $r20.<androidx.paging.PagingSource: java.lang.Object load(androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r21, $r22);

        if $r25 != r3 goto label3;

        return r3;

     label2:
        $r4 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object L$0>;

        $r24 = (kotlinx.coroutines.CoroutineScope) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r25 = $r1;

     label3:
        r2 = (androidx.paging.PagingSource$LoadResult) $r25;

        $r5 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        $r6 = virtualinvoke $r5.<androidx.paging.LegacyPageFetcher: androidx.paging.PagingSource getSource()>();

        $z0 = virtualinvoke $r6.<androidx.paging.PagingSource: boolean getInvalid()>();

        if $z0 == 0 goto label4;

        $r16 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        virtualinvoke $r16.<androidx.paging.LegacyPageFetcher: void detach()>();

        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r17;

     label4:
        $r7 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        $r8 = staticinvoke <androidx.paging.LegacyPageFetcher: kotlinx.coroutines.CoroutineDispatcher access$getNotifyDispatcher$p(androidx.paging.LegacyPageFetcher)>($r7);

        $r12 = (kotlin.coroutines.CoroutineContext) $r8;

        $r9 = new androidx.paging.LegacyPageFetcher$scheduleLoad$1$1;

        $r11 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        $r10 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LoadType $type>;

        specialinvoke $r9.<androidx.paging.LegacyPageFetcher$scheduleLoad$1$1: void <init>(androidx.paging.PagingSource$LoadResult,androidx.paging.LegacyPageFetcher,androidx.paging.LoadType,kotlin.coroutines.Continuation)>(r2, $r11, $r10, null);

        $r13 = (kotlin.jvm.functions.Function2) $r9;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r24, $r12, null, $r13, 2, null);

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r15;

     label5:
        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r23;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r8;
        androidx.paging.LoadType $r5;
        androidx.paging.PagingSource$LoadParams $r6;
        androidx.paging.LegacyPageFetcher $r7;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        $r7 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LegacyPageFetcher this$0>;

        $r6 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.PagingSource$LoadParams $params>;

        $r5 = r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: androidx.paging.LoadType $type>;

        specialinvoke $r4.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: void <init>(androidx.paging.LegacyPageFetcher,androidx.paging.PagingSource$LoadParams,androidx.paging.LoadType,kotlin.coroutines.Continuation)>($r7, $r6, $r5, $r2);

        r3 = $r4;

        r3.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object L$0> = r1;

        $r8 = (kotlin.coroutines.Continuation) r3;

        return $r8;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.paging.LegacyPageFetcher$scheduleLoad$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.LegacyPageFetcher$scheduleLoad$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.paging.LegacyPageFetcher$scheduleLoad$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.paging.LegacyPageFetcher$scheduleLoad$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.paging.LegacyPageFetcher$WhenMappings
<androidx.paging.LegacyPageFetcher$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.LoadType[] $r1;
        int $i0, $i1, $i2;
        androidx.paging.LoadType $r2, $r3;

        $r1 = staticinvoke <androidx.paging.LoadType: androidx.paging.LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $i1 = virtualinvoke $r2.<androidx.paging.LoadType: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.LoadType: int ordinal()>();

        r0[$i2] = 2;

        <androidx.paging.LegacyPageFetcher$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

