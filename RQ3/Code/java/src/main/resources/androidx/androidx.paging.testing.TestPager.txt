androidx.paging.testing.TestPager
<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource>
<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>
<androidx.paging.testing.TestPager: java.util.concurrent.atomic.AtomicBoolean hasRefreshed>
<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>
<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>
    public void <init>(androidx.paging.PagingSource, androidx.paging.PagingConfig)
    {
        androidx.paging.testing.TestPager r0;
        androidx.paging.PagingSource r1;
        androidx.paging.PagingConfig r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        kotlinx.coroutines.sync.Mutex $r4;
        kotlin.collections.ArrayDeque $r5;

        r0 := @this: androidx.paging.testing.TestPager;

        r1 := @parameter0: androidx.paging.PagingSource;

        r2 := @parameter1: androidx.paging.PagingConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pagingSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource> = r1;

        r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config> = r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.paging.testing.TestPager: java.util.concurrent.atomic.AtomicBoolean hasRefreshed> = $r3;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        r0.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock> = $r4;

        $r5 = new kotlin.collections.ArrayDeque;

        specialinvoke $r5.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages> = $r5;

        return;
    }

    public final java.lang.Object refresh(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager r0;
        java.lang.Object r1, $r4;
        kotlin.coroutines.Continuation $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        androidx.paging.PagingSource $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.paging.testing.TestPager;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = r0.<androidx.paging.testing.TestPager: java.util.concurrent.atomic.AtomicBoolean hasRefreshed>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 != 0 goto label1;

        $r5 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource>;

        virtualinvoke $r5.<androidx.paging.PagingSource: void invalidate()>();

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TestPager does not support multi-generational access and refresh() can only be called once per TestPager. To start a new generation,create a new TestPager with a new PagingSource.");

        throw $r6;

     label1:
        $r4 = specialinvoke r0.<androidx.paging.testing.TestPager: java.lang.Object doInitialLoad(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r4;
    }

    public static java.lang.Object refresh$default(androidx.paging.testing.TestPager, java.lang.Object, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        androidx.paging.testing.TestPager r0;
        kotlin.coroutines.Continuation r1;
        int i0, $i1;
        java.lang.Object r2, $r3, r4;

        r0 := @parameter0: androidx.paging.testing.TestPager;

        r4 := @parameter1: java.lang.Object;

        r1 := @parameter2: kotlin.coroutines.Continuation;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $r3 = virtualinvoke r0.<androidx.paging.testing.TestPager: java.lang.Object refresh(java.lang.Object,kotlin.coroutines.Continuation)>(r4, r1);

        return $r3;
    }

    public final java.lang.Object append(kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager r0;
        kotlin.coroutines.Continuation $r1;
        androidx.paging.LoadType $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.paging.testing.TestPager;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $r3 = specialinvoke r0.<androidx.paging.testing.TestPager: java.lang.Object doLoad(androidx.paging.LoadType,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r3;
    }

    public final java.lang.Object prepend(kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager r0;
        kotlin.coroutines.Continuation $r1;
        androidx.paging.LoadType $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.paging.testing.TestPager;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $r3 = specialinvoke r0.<androidx.paging.testing.TestPager: java.lang.Object doLoad(androidx.paging.LoadType,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r3;
    }

    private final java.lang.Object doInitialLoad(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r29, r30;
        java.lang.Object r1, $r3, r4, $r6, $r7, $r9, $r10, $r16, r20, $r23;
        androidx.paging.PagingSource$LoadResult r2, r24;
        boolean $z0, $z1, $z2;
        kotlin.collections.ArrayDeque $r8;
        androidx.paging.PagingConfig $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.paging.PagingSource $r14;
        androidx.paging.PagingSource$LoadParams $r15;
        java.lang.Throwable $r18, r25;
        androidx.paging.testing.TestPager r19;
        androidx.paging.testing.TestPager$doInitialLoad$1 $r21, r26;
        kotlinx.coroutines.sync.Mutex $r22;
        androidx.paging.PagingSource$LoadParams$Refresh r27;
        java.lang.IllegalStateException r28;

        r19 := @this: androidx.paging.testing.TestPager;

        r20 := @parameter0: java.lang.Object;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$doInitialLoad$1;

        if $z0 == 0 goto label01;

        $r21 = (androidx.paging.testing.TestPager$doInitialLoad$1) r0;

        $i1 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label01;

        $i3 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label>;

        $i4 = $i3 - -2147483648;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label> = $i4;

        goto label02;

     label01:
        r26 = new androidx.paging.testing.TestPager$doInitialLoad$1;

        specialinvoke r26.<androidx.paging.testing.TestPager$doInitialLoad$1: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r19, r0);

        $r21 = r26;

     label02:
        $r3 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label07;
            default: goto label15;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r22 = r19.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$0> = r19;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$1> = r20;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$2> = $r22;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label> = 1;

        r29 = (kotlin.coroutines.Continuation) $r21;

        $r16 = interfaceinvoke $r22.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r29);

        if $r16 != r4 goto label05;

        return r4;

     label04:
        $r9 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$2>;

        $r22 = (kotlinx.coroutines.sync.Mutex) $r9;

        r20 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$1>;

        $r10 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$0>;

        r19 = (androidx.paging.testing.TestPager) $r10;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label05:
        $r14 = r19.<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource>;

        r27 = new androidx.paging.PagingSource$LoadParams$Refresh;

        $r12 = r19.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i0 = $r12.<androidx.paging.PagingConfig: int initialLoadSize>;

        $r13 = r19.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z2 = $r13.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        specialinvoke r27.<androidx.paging.PagingSource$LoadParams$Refresh: void <init>(java.lang.Object,int,boolean)>(r20, $i0, $z2);

        $r15 = (androidx.paging.PagingSource$LoadParams) r27;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$0> = r19;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$1> = $r22;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$2> = null;

        $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: int label> = 2;

        r30 = (kotlin.coroutines.Continuation) $r21;

        $r23 = virtualinvoke $r14.<androidx.paging.PagingSource: java.lang.Object load(androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r15, r30);

     label06:
        if $r23 != r4 goto label09;

        return r4;

     label07:
        $r6 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$1>;

        $r22 = (kotlinx.coroutines.sync.Mutex) $r6;

        $r7 = $r21.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$0>;

        r19 = (androidx.paging.testing.TestPager) $r7;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r23 = $r3;

     label09:
        r1 = $r23;

        r2 = (androidx.paging.PagingSource$LoadResult) r1;

        $z1 = r2 instanceof androidx.paging.PagingSource$LoadResult$Page;

        if $z1 == 0 goto label10;

        $r8 = r19.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        virtualinvoke $r8.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>(r2);

     label10:
        r24 = (androidx.paging.PagingSource$LoadResult) r1;

     label11:
        interfaceinvoke $r22.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label14;

     label12:
        $r18 := @caughtexception;

        r25 = $r18;

     label13:
        interfaceinvoke $r22.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r25;

     label14:
        return r24;

     label15:
        r28 = new java.lang.IllegalStateException;

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r28;

        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private final java.lang.Object doLoad(androidx.paging.LoadType, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r73, r74, r75;
        androidx.paging.LoadType r1, $r7, $r11, r51;
        java.lang.Object $r2, r3, $r5, $r6, $r9, $r10, $r13, $r14, $r15, $r19, $r21, $r28, $r30, $r47, r54, $r55, r56, r59, $r60, r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        kotlin.collections.ArrayDeque $r8, $r12, $r18, $r27;
        java.util.concurrent.atomic.AtomicBoolean $r16;
        int[] $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.paging.PagingSource$LoadResult$Page $r20, $r29;
        androidx.paging.PagingConfig $r23, $r24, $r32, $r33;
        androidx.paging.PagingSource $r25, $r34;
        androidx.paging.PagingSource$LoadParams $r26, $r35;
        java.lang.StringBuilder $r40, $r44, $r45, r66;
        java.lang.String $r41, $r43, $r46;
        java.util.Locale $r42;
        java.lang.Throwable $r49, r64;
        androidx.paging.testing.TestPager r50;
        androidx.paging.testing.TestPager$doLoad$1 $r52, r65;
        kotlinx.coroutines.sync.Mutex $r53;
        androidx.paging.PagingSource$LoadResult r57, $r58, r62, r63;
        java.lang.IllegalStateException r67, r72;
        java.lang.IllegalArgumentException r68;
        androidx.paging.PagingSource$LoadParams$Append r69;
        androidx.paging.PagingSource$LoadParams$Prepend r70;
        kotlin.NoWhenBranchMatchedException r71;

        r50 := @this: androidx.paging.testing.TestPager;

        r51 := @parameter0: androidx.paging.LoadType;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$doLoad$1;

        if $z0 == 0 goto label01;

        $r52 = (androidx.paging.testing.TestPager$doLoad$1) r0;

        $i4 = $r52.<androidx.paging.testing.TestPager$doLoad$1: int label>;

        $i5 = $i4 & -2147483648;

        if $i5 == 0 goto label01;

        $i6 = $r52.<androidx.paging.testing.TestPager$doLoad$1: int label>;

        $i7 = $i6 - -2147483648;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: int label> = $i7;

        goto label02;

     label01:
        r65 = new androidx.paging.testing.TestPager$doLoad$1;

        specialinvoke r65.<androidx.paging.testing.TestPager$doLoad$1: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r50, r0);

        $r52 = r65;

     label02:
        $r2 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i8 = $r52.<androidx.paging.testing.TestPager$doLoad$1: int label>;

        tableswitch($i8)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label12;
            case 3: goto label20;
            default: goto label30;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r53 = r50.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0> = r50;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1> = r51;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$2> = $r53;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: int label> = 1;

        r73 = (kotlin.coroutines.Continuation) $r52;

        $r47 = interfaceinvoke $r53.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r73);

        if $r47 != r3 goto label05;

        return r3;

     label04:
        $r13 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$2>;

        $r53 = (kotlinx.coroutines.sync.Mutex) $r13;

        $r14 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1>;

        r51 = (androidx.paging.LoadType) $r14;

        $r15 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0>;

        r50 = (androidx.paging.testing.TestPager) $r15;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $r16 = r50.<androidx.paging.testing.TestPager: java.util.concurrent.atomic.AtomicBoolean hasRefreshed>;

        $z3 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label06;

        r67 = new java.lang.IllegalStateException;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestPager\'s first load operation must be a refresh. Please call refresh() once before calling ");

        $r41 = virtualinvoke r51.<androidx.paging.LoadType: java.lang.String name()>();

        $r42 = <java.util.Locale: java.util.Locale ROOT>;

        $r43 = virtualinvoke $r41.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r42);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r43, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("().");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r67.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r46);

        throw r67;

     label06:
        r1 = r51;

        $r17 = <androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        $i1 = $r17[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label16;
            default: goto label24;
        };

     label07:
        r68 = new java.lang.IllegalArgumentException;

        specialinvoke r68.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For LoadType.REFRESH use doInitialLoad()");

        throw r68;

     label08:
        $r27 = r50.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r28 = virtualinvoke $r27.<kotlin.collections.ArrayDeque: java.lang.Object lastOrNull()>();

        $r29 = (androidx.paging.PagingSource$LoadResult$Page) $r28;

        if $r29 == null goto label09;

        $r30 = virtualinvoke $r29.<androidx.paging.PagingSource$LoadResult$Page: java.lang.Object getNextKey()>();

        if $r30 != null goto label10;

     label09:
        interfaceinvoke $r53.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return null;

     label10:
        r54 = $r30;

        $r34 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource>;

        r69 = new androidx.paging.PagingSource$LoadParams$Append;

        $r32 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i3 = $r32.<androidx.paging.PagingConfig: int pageSize>;

        $r33 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z5 = $r33.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        specialinvoke r69.<androidx.paging.PagingSource$LoadParams$Append: void <init>(java.lang.Object,int,boolean)>(r54, $i3, $z5);

        $r35 = (androidx.paging.PagingSource$LoadParams) r69;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0> = r50;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1> = $r53;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$2> = null;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: int label> = 2;

        r74 = (kotlin.coroutines.Continuation) $r52;

        $r55 = virtualinvoke $r34.<androidx.paging.PagingSource: java.lang.Object load(androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r35, r74);

     label11:
        if $r55 != r3 goto label14;

        return r3;

     label12:
        $r9 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1>;

        $r53 = (kotlinx.coroutines.sync.Mutex) $r9;

        $r10 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0>;

        r50 = (androidx.paging.testing.TestPager) $r10;

     label13:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r55 = $r2;

     label14:
        r56 = $r55;

        r57 = (androidx.paging.PagingSource$LoadResult) r56;

        $z2 = r57 instanceof androidx.paging.PagingSource$LoadResult$Page;

        if $z2 == 0 goto label15;

        $r12 = r50.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        virtualinvoke $r12.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>(r57);

     label15:
        $r11 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        specialinvoke r50.<androidx.paging.testing.TestPager: void dropPagesOrNoOp(androidx.paging.LoadType)>($r11);

        $r58 = (androidx.paging.PagingSource$LoadResult) r56;

        goto label25;

     label16:
        $r18 = r50.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r19 = virtualinvoke $r18.<kotlin.collections.ArrayDeque: java.lang.Object firstOrNull()>();

        $r20 = (androidx.paging.PagingSource$LoadResult$Page) $r19;

        if $r20 == null goto label17;

        $r21 = virtualinvoke $r20.<androidx.paging.PagingSource$LoadResult$Page: java.lang.Object getPrevKey()>();

        if $r21 != null goto label18;

     label17:
        interfaceinvoke $r53.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return null;

     label18:
        r59 = $r21;

        $r25 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingSource pagingSource>;

        r70 = new androidx.paging.PagingSource$LoadParams$Prepend;

        $r23 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i2 = $r23.<androidx.paging.PagingConfig: int pageSize>;

        $r24 = r50.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z4 = $r24.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        specialinvoke r70.<androidx.paging.PagingSource$LoadParams$Prepend: void <init>(java.lang.Object,int,boolean)>(r59, $i2, $z4);

        $r26 = (androidx.paging.PagingSource$LoadParams) r70;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0> = r50;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1> = $r53;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$2> = null;

        $r52.<androidx.paging.testing.TestPager$doLoad$1: int label> = 3;

        r75 = (kotlin.coroutines.Continuation) $r52;

        $r60 = virtualinvoke $r25.<androidx.paging.PagingSource: java.lang.Object load(androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r26, r75);

     label19:
        if $r60 != r3 goto label22;

        return r3;

     label20:
        $r5 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1>;

        $r53 = (kotlinx.coroutines.sync.Mutex) $r5;

        $r6 = $r52.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0>;

        r50 = (androidx.paging.testing.TestPager) $r6;

     label21:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r60 = $r2;

     label22:
        r61 = $r60;

        r62 = (androidx.paging.PagingSource$LoadResult) r61;

        $z1 = r62 instanceof androidx.paging.PagingSource$LoadResult$Page;

        if $z1 == 0 goto label23;

        $r8 = r50.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        virtualinvoke $r8.<kotlin.collections.ArrayDeque: void addFirst(java.lang.Object)>(r62);

     label23:
        $r7 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        specialinvoke r50.<androidx.paging.testing.TestPager: void dropPagesOrNoOp(androidx.paging.LoadType)>($r7);

        $r58 = (androidx.paging.PagingSource$LoadResult) r61;

        goto label25;

     label24:
        r71 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r71.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw r71;

     label25:
        r63 = $r58;

     label26:
        interfaceinvoke $r53.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label29;

     label27:
        $r49 := @caughtexception;

        r64 = $r49;

     label28:
        interfaceinvoke $r53.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r64;

     label29:
        return r63;

     label30:
        r72 = new java.lang.IllegalStateException;

        specialinvoke r72.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r72;

        catch java.lang.Throwable from label05 to label09 with label27;
        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label13 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label21 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public final java.lang.Object getLastLoadedPage(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r18;
        java.lang.Object $r1, r2, $r4, $r5, $r7, $r8;
        boolean $z0;
        kotlin.collections.ArrayDeque $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r10, r15;
        androidx.paging.testing.TestPager r11;
        androidx.paging.testing.TestPager$getLastLoadedPage$1 $r12, r16;
        kotlinx.coroutines.sync.Mutex $r13;
        androidx.paging.PagingSource$LoadResult$Page r14;
        java.lang.IllegalStateException r17;

        r11 := @this: androidx.paging.testing.TestPager;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$getLastLoadedPage$1;

        if $z0 == 0 goto label01;

        $r12 = (androidx.paging.testing.TestPager$getLastLoadedPage$1) r0;

        $i0 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label>;

        $i3 = $i2 - -2147483648;

        $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label> = $i3;

        goto label02;

     label01:
        r16 = new androidx.paging.testing.TestPager$getLastLoadedPage$1;

        specialinvoke r16.<androidx.paging.testing.TestPager$getLastLoadedPage$1: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r11, r0);

        $r12 = r16;

     label02:
        $r1 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = r11.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$0> = r11;

        $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$1> = $r13;

        $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label> = 1;

        r18 = (kotlin.coroutines.Continuation) $r12;

        $r8 = interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r18);

        if $r8 != r2 goto label05;

        return r2;

     label04:
        $r4 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$1>;

        $r13 = (kotlinx.coroutines.sync.Mutex) $r4;

        $r5 = $r12.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$0>;

        r11 = (androidx.paging.testing.TestPager) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r6 = r11.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r7 = virtualinvoke $r6.<kotlin.collections.ArrayDeque: java.lang.Object lastOrNull()>();

        r14 = (androidx.paging.PagingSource$LoadResult$Page) $r7;

     label06:
        interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label09;

     label07:
        $r10 := @caughtexception;

        r15 = $r10;

     label08:
        interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r15;

     label09:
        return r14;

     label10:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r17;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public final java.lang.Object getPages(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r18;
        java.lang.Object $r1, r2, $r4, $r5, $r8;
        boolean $z0;
        kotlin.collections.ArrayDeque $r6;
        java.lang.Iterable $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r10, r15;
        androidx.paging.testing.TestPager r11;
        androidx.paging.testing.TestPager$getPages$1 $r12, r16;
        kotlinx.coroutines.sync.Mutex $r13;
        java.util.List r14;
        java.lang.IllegalStateException r17;

        r11 := @this: androidx.paging.testing.TestPager;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$getPages$1;

        if $z0 == 0 goto label01;

        $r12 = (androidx.paging.testing.TestPager$getPages$1) r0;

        $i0 = $r12.<androidx.paging.testing.TestPager$getPages$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r12.<androidx.paging.testing.TestPager$getPages$1: int label>;

        $i3 = $i2 - -2147483648;

        $r12.<androidx.paging.testing.TestPager$getPages$1: int label> = $i3;

        goto label02;

     label01:
        r16 = new androidx.paging.testing.TestPager$getPages$1;

        specialinvoke r16.<androidx.paging.testing.TestPager$getPages$1: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r11, r0);

        $r12 = r16;

     label02:
        $r1 = $r12.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r12.<androidx.paging.testing.TestPager$getPages$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = r11.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r12.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$0> = r11;

        $r12.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$1> = $r13;

        $r12.<androidx.paging.testing.TestPager$getPages$1: int label> = 1;

        r18 = (kotlin.coroutines.Continuation) $r12;

        $r8 = interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r18);

        if $r8 != r2 goto label05;

        return r2;

     label04:
        $r4 = $r12.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$1>;

        $r13 = (kotlinx.coroutines.sync.Mutex) $r4;

        $r5 = $r12.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$0>;

        r11 = (androidx.paging.testing.TestPager) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r6 = r11.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r7 = (java.lang.Iterable) $r6;

        r14 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r7);

     label06:
        interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label09;

     label07:
        $r10 := @caughtexception;

        r15 = $r10;

     label08:
        interfaceinvoke $r13.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r15;

     label09:
        return r14;

     label10:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r17;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public final java.lang.Object getPagingState(int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r23;
        java.lang.Throwable r1, $r16;
        androidx.paging.PagingState r2, r21;
        java.lang.Object $r3, r4, $r6, $r7, $r14;
        boolean $z0;
        kotlin.collections.ArrayDeque $r9;
        java.lang.Iterable $r10;
        java.util.List $r11;
        java.lang.Integer $r12;
        androidx.paging.PagingConfig $r13;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        androidx.paging.testing.TestPager r17;
        androidx.paging.testing.TestPager$getPagingState$1 $r18, r20;
        kotlinx.coroutines.sync.Mutex $r19;
        java.lang.IllegalStateException r22;

        r17 := @this: androidx.paging.testing.TestPager;

        i5 := @parameter0: int;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$getPagingState$1;

        if $z0 == 0 goto label1;

        $r18 = (androidx.paging.testing.TestPager$getPagingState$1) r0;

        $i1 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: int label>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label1;

        $i3 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: int label>;

        $i4 = $i3 - -2147483648;

        $r18.<androidx.paging.testing.TestPager$getPagingState$1: int label> = $i4;

        goto label2;

     label1:
        r20 = new androidx.paging.testing.TestPager$getPagingState$1;

        specialinvoke r20.<androidx.paging.testing.TestPager$getPagingState$1: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r17, r0);

        $r18 = r20;

     label2:
        $r3 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i6 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: int label>;

        tableswitch($i6)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label9;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r19 = r17.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r18.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$0> = r17;

        $r18.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$1> = $r19;

        $r18.<androidx.paging.testing.TestPager$getPagingState$1: int I$0> = i5;

        $r18.<androidx.paging.testing.TestPager$getPagingState$1: int label> = 1;

        r23 = (kotlin.coroutines.Continuation) $r18;

        $r14 = interfaceinvoke $r19.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r23);

        if $r14 != r4 goto label5;

        return r4;

     label4:
        i5 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: int I$0>;

        $r6 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$1>;

        $r19 = (kotlinx.coroutines.sync.Mutex) $r6;

        $r7 = $r18.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$0>;

        r17 = (androidx.paging.testing.TestPager) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label5:
        specialinvoke r17.<androidx.paging.testing.TestPager: void checkWithinBoundary(int)>(i5);

        r21 = new androidx.paging.PagingState;

        $r9 = r17.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r10 = (java.lang.Iterable) $r9;

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r10);

        $r12 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>(i5);

        $r13 = r17.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i0 = specialinvoke r17.<androidx.paging.testing.TestPager: int getLeadingPlaceholderCount()>();

        specialinvoke r21.<androidx.paging.PagingState: void <init>(java.util.List,java.lang.Integer,androidx.paging.PagingConfig,int)>($r11, $r12, $r13, $i0);

        r2 = r21;

     label6:
        interfaceinvoke $r19.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return r2;

     label7:
        $r16 := @caughtexception;

        r1 = $r16;

     label8:
        interfaceinvoke $r19.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r1;

     label9:
        r22 = new java.lang.IllegalStateException;

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r22;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public final java.lang.Object getPagingState(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r39;
        java.util.Iterator r1;
        java.lang.Object r2, r3, $r6, r7, $r9, $r10, $r11, $r22, $r25, $r27;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11;
        java.lang.Throwable r4, $r30;
        androidx.paging.PagingState r5, r37;
        boolean $z0, $z1, $z2, $z3;
        kotlin.collections.ArrayDeque $r12, $r16, $r21;
        java.lang.Iterable $r13, $r17;
        androidx.paging.PagingConfig $r14, $r20;
        java.util.List $r18, $r28;
        java.lang.Integer $r19;
        androidx.paging.PagingSource$LoadResult$Page $r23;
        java.lang.Boolean $r26;
        androidx.paging.testing.TestPager r31;
        kotlin.jvm.functions.Function1 r32;
        androidx.paging.testing.TestPager$getPagingState$3 $r33, r35;
        kotlinx.coroutines.sync.Mutex $r34;
        java.lang.IllegalArgumentException r36;
        java.lang.IllegalStateException r38;

        r31 := @this: androidx.paging.testing.TestPager;

        r32 := @parameter0: kotlin.jvm.functions.Function1;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.TestPager$getPagingState$3;

        if $z0 == 0 goto label01;

        $r33 = (androidx.paging.testing.TestPager$getPagingState$3) r0;

        $i3 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: int label>;

        $i4 = $i3 & -2147483648;

        if $i4 == 0 goto label01;

        $i5 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: int label>;

        $i6 = $i5 - -2147483648;

        $r33.<androidx.paging.testing.TestPager$getPagingState$3: int label> = $i6;

        goto label02;

     label01:
        r35 = new androidx.paging.testing.TestPager$getPagingState$3;

        specialinvoke r35.<androidx.paging.testing.TestPager$getPagingState$3: void <init>(androidx.paging.testing.TestPager,kotlin.coroutines.Continuation)>(r31, r0);

        $r33 = r35;

     label02:
        $r6 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object result>;

        r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i7 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: int label>;

        tableswitch($i7)
        {
            case 0: goto label03;
            case 1: goto label04;
            default: goto label18;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

        $r34 = r31.<androidx.paging.testing.TestPager: kotlinx.coroutines.sync.Mutex lock>;

        $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$0> = r31;

        $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$1> = r32;

        $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$2> = $r34;

        $r33.<androidx.paging.testing.TestPager$getPagingState$3: int label> = 1;

        r39 = (kotlin.coroutines.Continuation) $r33;

        $r27 = interfaceinvoke $r34.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r39);

        if $r27 != r7 goto label05;

        return r7;

     label04:
        $r9 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$2>;

        $r34 = (kotlinx.coroutines.sync.Mutex) $r9;

        $r10 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$1>;

        r32 = (kotlin.jvm.functions.Function1) $r10;

        $r11 = $r33.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$0>;

        r31 = (androidx.paging.testing.TestPager) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

     label05:
        $r12 = r31.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r13 = (java.lang.Iterable) $r12;

        i8 = 0;

        $r28 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List flatten(java.lang.Iterable)>($r13);

        r1 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = r2;

        $r25 = interfaceinvoke r32.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        $r26 = (java.lang.Boolean) $r25;

        $z2 = virtualinvoke $r26.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label07;

        $i9 = i8;

        goto label09;

     label07:
        i8 = i8 + 1;

        goto label06;

     label08:
        $i9 = -1;

     label09:
        i0 = $i9;

        if i0 >= 0 goto label10;

        r36 = new java.lang.IllegalArgumentException;

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given predicate has returned false for every loaded item. To generate aPagingState anchored to an item, the expected item must have already been loaded.");

        throw r36;

     label10:
        $r14 = r31.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z1 = $r14.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z1 == 0 goto label13;

        $r21 = r31.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r22 = virtualinvoke $r21.<kotlin.collections.ArrayDeque: java.lang.Object firstOrNull()>();

        $r23 = (androidx.paging.PagingSource$LoadResult$Page) $r22;

        if $r23 == null goto label11;

        $i10 = virtualinvoke $r23.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

        goto label12;

     label11:
        $i10 = 0;

     label12:
        $i11 = i0 + $i10;

        goto label14;

     label13:
        $i11 = i0;

     label14:
        r37 = new androidx.paging.PagingState;

        $r16 = r31.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r17 = (java.lang.Iterable) $r16;

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r17);

        $r19 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i11);

        $r20 = r31.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i1 = specialinvoke r31.<androidx.paging.testing.TestPager: int getLeadingPlaceholderCount()>();

        specialinvoke r37.<androidx.paging.PagingState: void <init>(java.util.List,java.lang.Integer,androidx.paging.PagingConfig,int)>($r18, $r19, $r20, $i1);

        r5 = r37;

     label15:
        interfaceinvoke $r34.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return r5;

     label16:
        $r30 := @caughtexception;

        r4 = $r30;

     label17:
        interfaceinvoke $r34.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r4;

     label18:
        r38 = new java.lang.IllegalStateException;

        specialinvoke r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r38;

        catch java.lang.Throwable from label05 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private final void checkWithinBoundary(int)
    {
        androidx.paging.testing.TestPager r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        kotlin.collections.ArrayDeque $r1, $r13, $r16;
        java.lang.Iterable $r2;
        java.util.List $r3;
        androidx.paging.PagingConfig $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r11;
        java.lang.String $r12, $r19;
        java.lang.Object $r14, $r17;
        androidx.paging.PagingSource$LoadResult$Page $r15, $r18;

        r0 := @this: androidx.paging.testing.TestPager;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List flatten(java.lang.Iterable)>($r2);

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z0 = $r4.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z0 == 0 goto label05;

        $r13 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r14 = virtualinvoke $r13.<kotlin.collections.ArrayDeque: java.lang.Object firstOrNull()>();

        $r15 = (androidx.paging.PagingSource$LoadResult$Page) $r14;

        if $r15 == null goto label01;

        $i5 = virtualinvoke $r15.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

        goto label02;

     label01:
        $i5 = 0;

     label02:
        $i3 = $i5 + i1;

        $r16 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r17 = virtualinvoke $r16.<kotlin.collections.ArrayDeque: java.lang.Object lastOrNull()>();

        $r18 = (androidx.paging.PagingSource$LoadResult$Page) $r17;

        if $r18 == null goto label03;

        $i6 = virtualinvoke $r18.<androidx.paging.PagingSource$LoadResult$Page: int getItemsAfter()>();

        goto label04;

     label03:
        $i6 = 0;

     label04:
        $i4 = $i3 + $i6;

        $i7 = $i4 - 1;

        goto label06;

     label05:
        $i7 = i1 - 1;

     label06:
        i2 = $i7;

        if 0 > i0 goto label08;

        if i0 > i2 goto label07;

        $z1 = 1;

        goto label09;

     label07:
        $z1 = 0;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        if $z1 != 0 goto label10;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("anchorPosition ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of bounds between [0..");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Please provide a valid anchorPosition.");

        $r19 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label10:
        return;
    }

    private final int getLeadingPlaceholderCount()
    {
        androidx.paging.testing.TestPager r0;
        java.lang.Integer r1, r2, $r8, $r9;
        int i0, $i1, $i2, $i3;
        androidx.paging.PagingConfig $r3;
        boolean $z0;
        kotlin.collections.ArrayDeque $r4;
        java.lang.Object $r5;
        androidx.paging.PagingSource$LoadResult$Page $r6;

        r0 := @this: androidx.paging.testing.TestPager;

        $r3 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $z0 = $r3.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z0 == 0 goto label7;

        $r4 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r5 = virtualinvoke $r4.<kotlin.collections.ArrayDeque: java.lang.Object firstOrNull()>();

        $r6 = (androidx.paging.PagingSource$LoadResult$Page) $r5;

        if $r6 == null goto label1;

        $i2 = virtualinvoke $r6.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        goto label2;

     label1:
        $r8 = null;

     label2:
        r1 = $r8;

        if r1 == null goto label3;

        i0 = -2147483648;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i1 != i0 goto label4;

     label3:
        $r9 = null;

        goto label5;

     label4:
        $r9 = r1;

     label5:
        r2 = $r9;

        if r2 == null goto label6;

        $i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        goto label8;

     label6:
        $i3 = 0;

        goto label8;

     label7:
        $i3 = 0;

     label8:
        return $i3;
    }

    private final void dropPagesOrNoOp(androidx.paging.LoadType)
    {
        androidx.paging.testing.TestPager r0;
        androidx.paging.LoadType r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, $i21, $i22, $i23, i24;
        java.util.Iterator r2;
        java.lang.Object r3, $r20, $r30;
        androidx.paging.PagingSource$LoadResult$Page r4, $r21, $r31;
        androidx.paging.PagingConfig $r6, $r10, $r17, $r23;
        kotlin.collections.ArrayDeque $r7, $r12, $r13, $r16, $r19, $r25, $r27, $r29, $r34, $r35;
        java.lang.Iterable $r8, $r37, $r38;
        java.util.List $r9, $r14, $r15, $r22, $r32, $r33, $r36, $r45;
        int[] $r11, $r18, $r24;
        java.lang.StringBuilder $r39, $r40, $r41;
        java.lang.IllegalArgumentException $r42;
        java.lang.String $r43, $r44;
        boolean $z1, $z4;
        byte b19;

        r0 := @this: androidx.paging.testing.TestPager;

        r1 := @parameter0: androidx.paging.LoadType;

        $r5 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        if r1 == $r5 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 != 0 goto label03;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drop loadType must be APPEND or PREPEND but got ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = new java.lang.IllegalArgumentException;

        $r43 = virtualinvoke $r44.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43);

        throw $r42;

     label03:
        $r6 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i2 = $r6.<androidx.paging.PagingConfig: int maxSize>;

        if $i2 != 2147483647 goto label04;

        return;

     label04:
        $r7 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r8 = (java.lang.Iterable) $r7;

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List flatten(java.lang.Iterable)>($r8);

        i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i3 = $r10.<androidx.paging.PagingConfig: int maxSize>;

        if i0 >= $i3 goto label05;

        return;

     label05:
        $r11 = <androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i4 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        $i5 = $r11[$i4];

        if $i5 != 3 goto label06;

        $r34 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r37 = (java.lang.Iterable) $r34;

        $r35 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r36 = (java.util.List) $r35;

        $i18 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r36);

        $r45 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List take(java.lang.Iterable,int)>($r37, $i18);

        goto label07;

     label06:
        $r12 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r15 = (java.util.List) $r12;

        $r13 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r14 = (java.util.List) $r13;

        $i6 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r14);

        $r45 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List takeLast(java.util.List,int)>($r15, $i6);

     label07:
        b19 = 0;

        i20 = b19;

        $r38 = (java.lang.Iterable) $r45;

        r2 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.paging.PagingSource$LoadResult$Page) r3;

        i1 = i20;

        $r33 = virtualinvoke r4.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i17 = interfaceinvoke $r33.<java.util.List: int size()>();

        i20 = i1 + $i17;

        goto label08;

     label09:
        $i21 = i20;

        $i22 = 0;

     label10:
        $r16 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $i7 = virtualinvoke $r16.<kotlin.collections.ArrayDeque: int size()>();

        if $i7 <= 2 goto label15;

        $i9 = i0 - $i22;

        $r17 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i8 = $r17.<androidx.paging.PagingConfig: int maxSize>;

        if $i9 <= $i8 goto label15;

        $r18 = <androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i10 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        $i11 = $r18[$i10];

        if $i11 != 3 goto label11;

        $r29 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r30 = virtualinvoke $r29.<kotlin.collections.ArrayDeque: java.lang.Object first()>();

        $r31 = (androidx.paging.PagingSource$LoadResult$Page) $r30;

        $r32 = virtualinvoke $r31.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i23 = interfaceinvoke $r32.<java.util.List: int size()>();

        goto label12;

     label11:
        $r19 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        $r20 = virtualinvoke $r19.<kotlin.collections.ArrayDeque: java.lang.Object last()>();

        $r21 = (androidx.paging.PagingSource$LoadResult$Page) $r20;

        $r22 = virtualinvoke $r21.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i23 = interfaceinvoke $r22.<java.util.List: int size()>();

     label12:
        i24 = $i23;

        $i12 = $i21 - $i22;

        $i16 = $i12 - i24;

        $r23 = r0.<androidx.paging.testing.TestPager: androidx.paging.PagingConfig config>;

        $i13 = $r23.<androidx.paging.PagingConfig: int prefetchDistance>;

        if $i16 < $i13 goto label15;

        $r24 = <androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i14 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        $i15 = $r24[$i14];

        if $i15 != 3 goto label13;

        $r27 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        virtualinvoke $r27.<kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>();

        goto label14;

     label13:
        $r25 = r0.<androidx.paging.testing.TestPager: kotlin.collections.ArrayDeque pages>;

        virtualinvoke $r25.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

     label14:
        $i22 = $i22 + i24;

        goto label10;

     label15:
        return;
    }

    public static final java.lang.Object access$doInitialLoad(androidx.paging.testing.TestPager, java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager $r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        $r0 := @parameter0: androidx.paging.testing.TestPager;

        r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.paging.testing.TestPager: java.lang.Object doInitialLoad(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$doLoad(androidx.paging.testing.TestPager, androidx.paging.LoadType, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager $r0;
        androidx.paging.LoadType r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.paging.testing.TestPager;

        r1 := @parameter1: androidx.paging.LoadType;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.paging.testing.TestPager: java.lang.Object doLoad(androidx.paging.LoadType,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

androidx.paging.testing.TestPager$doInitialLoad$1
<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$0>
<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$1>
<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object L$2>
<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object result>
<androidx.paging.testing.TestPager$doInitialLoad$1: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$doInitialLoad$1: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$doInitialLoad$1 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$doInitialLoad$1;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$doInitialLoad$1: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$doInitialLoad$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$doInitialLoad$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$doInitialLoad$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$doInitialLoad$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$doInitialLoad$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$doInitialLoad$1: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.TestPager: java.lang.Object access$doInitialLoad(androidx.paging.testing.TestPager,java.lang.Object,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.paging.testing.TestPager$doLoad$1
<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$0>
<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$1>
<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object L$2>
<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object result>
<androidx.paging.testing.TestPager$doLoad$1: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$doLoad$1: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$doLoad$1 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$doLoad$1;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$doLoad$1: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$doLoad$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$doLoad$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$doLoad$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$doLoad$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$doLoad$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$doLoad$1: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.TestPager: java.lang.Object access$doLoad(androidx.paging.testing.TestPager,androidx.paging.LoadType,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.paging.testing.TestPager$getLastLoadedPage$1
<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$0>
<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object L$1>
<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object result>
<androidx.paging.testing.TestPager$getLastLoadedPage$1: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$getLastLoadedPage$1 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$getLastLoadedPage$1;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$getLastLoadedPage$1: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$getLastLoadedPage$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$getLastLoadedPage$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$getLastLoadedPage$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$getLastLoadedPage$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$getLastLoadedPage$1: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.TestPager: java.lang.Object getLastLoadedPage(kotlin.coroutines.Continuation)>($r2);

        return $r4;
    }

androidx.paging.testing.TestPager$getPages$1
<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$0>
<androidx.paging.testing.TestPager$getPages$1: java.lang.Object L$1>
<androidx.paging.testing.TestPager$getPages$1: java.lang.Object result>
<androidx.paging.testing.TestPager$getPages$1: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$getPages$1: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$getPages$1 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$getPages$1;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$getPages$1: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$getPages$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$getPages$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$getPages$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$getPages$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$getPages$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$getPages$1: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.TestPager: java.lang.Object getPages(kotlin.coroutines.Continuation)>($r2);

        return $r4;
    }

androidx.paging.testing.TestPager$getPagingState$1
<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$0>
<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object L$1>
<androidx.paging.testing.TestPager$getPagingState$1: int I$0>
<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object result>
<androidx.paging.testing.TestPager$getPagingState$1: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$getPagingState$1: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$getPagingState$1 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$getPagingState$1;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$getPagingState$1: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$getPagingState$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$getPagingState$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$getPagingState$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$getPagingState$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$getPagingState$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$getPagingState$1: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.TestPager: java.lang.Object getPagingState(int,kotlin.coroutines.Continuation)>(0, $r2);

        return $r4;
    }

androidx.paging.testing.TestPager$getPagingState$3
<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$0>
<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$1>
<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object L$2>
<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object result>
<androidx.paging.testing.TestPager$getPagingState$3: androidx.paging.testing.TestPager this$0>
<androidx.paging.testing.TestPager$getPagingState$3: int label>
    void <init>(androidx.paging.testing.TestPager, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.TestPager$getPagingState$3 r0;
        androidx.paging.testing.TestPager r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.TestPager$getPagingState$3;

        r1 := @parameter0: androidx.paging.testing.TestPager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.TestPager$getPagingState$3: androidx.paging.testing.TestPager this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.TestPager$getPagingState$3 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.TestPager $r3;

        r0 := @this: androidx.paging.testing.TestPager$getPagingState$3;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.TestPager$getPagingState$3: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.TestPager$getPagingState$3: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.TestPager$getPagingState$3: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.TestPager$getPagingState$3: androidx.paging.testing.TestPager this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.TestPager: java.lang.Object getPagingState(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.paging.testing.TestPager$WhenMappings
<androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.LoadType[] $r1;
        int $i0, $i1, $i2, $i3;
        androidx.paging.LoadType $r2, $r3, $r4;
        java.lang.Throwable $r5, $r6, $r7, r8, r9, r10;

        $r1 = staticinvoke <androidx.paging.LoadType: androidx.paging.LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label01:
        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        $i1 = virtualinvoke $r2.<androidx.paging.LoadType: int ordinal()>();

        r0[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

        r8 = $r5;

     label04:
        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.LoadType: int ordinal()>();

        r0[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

        r9 = $r7;

     label07:
        $r4 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $i3 = virtualinvoke $r4.<androidx.paging.LoadType: int ordinal()>();

        r0[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        r10 = $r6;

     label10:
        <androidx.paging.testing.TestPager$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

