androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: java.lang.String TAG>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int TOGETHER>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int MAX_NUM_POINTS>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_FLOAT>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_INT>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_PATH>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_COLOR>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_UNDEFINED>
<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean DBG_ANIMATOR_INFLATER>
    public static android.animation.Animator loadAnimator(android.content.Context, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        int i0, $i1;
        android.content.res.Resources $r1;
        android.content.res.Resources$Theme $r2;
        android.animation.Animator r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label1;

        r3 = staticinvoke <android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>(r0, i0);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        r3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int)>(r0, $r1, $r2, i0);

     label2:
        return r3;
    }

    public static android.animation.Animator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        int i0;
        android.animation.Animator $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        i0 := @parameter3: int;

        $r3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float)>(r0, r1, r2, i0, 1.0F);

        return $r3;
    }

    public static android.animation.Animator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, int, float) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        int i0;
        float f0;
        android.animation.Animator r3, r23;
        java.lang.Throwable r4, $r5, $r13, $r21, r24, r26;
        android.content.res.Resources$NotFoundException $r6, $r14, r25, r27;
        java.lang.StringBuilder $r7, $r8, $r10, $r15, $r16, $r18;
        java.lang.String $r9, $r11, $r17, $r19;
        android.content.res.XmlResourceParser r22;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        i0 := @parameter3: int;

        f0 := @parameter4: float;

        r22 = null;

     label1:
        r22 = virtualinvoke r1.<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>(i0);

        r3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float)>(r0, r1, r2, r22, f0);

        r23 = r3;

     label2:
        if r22 == null goto label3;

        interfaceinvoke r22.<android.content.res.XmlResourceParser: void close()>();

     label3:
        return r23;

     label4:
        $r5 := @caughtexception;

        r24 = $r5;

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load animation resource ID #0x");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        r25 = $r6;

        virtualinvoke r25.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(r24);

        throw r25;

     label5:
        $r13 := @caughtexception;

        r26 = $r13;

        $r14 = new android.content.res.Resources$NotFoundException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load animation resource ID #0x");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r19);

        r27 = $r14;

        virtualinvoke r27.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(r26);

        throw r27;

     label6:
        $r21 := @caughtexception;

        r4 = $r21;

     label7:
        if r22 == null goto label8;

        interfaceinvoke r22.<android.content.res.XmlResourceParser: void close()>();

     label8:
        throw r4;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }

    private static android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray, int, int, int, java.lang.String)
    {
        android.content.res.TypedArray r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, i8, i9;
        java.lang.String r1, $r20, r22, r23;
        android.util.TypedValue r2, r3;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        androidx.core.graphics.PathParser$PathDataNode[] r4, r24;
        float $f0, $f1, $f2, f3, f4, f5;
        int[] $r5, $r28, $r29;
        float[] $r6, $r7, $r8;
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator $r9, $r11, r25, r26;
        java.lang.Object[] $r10, $r12, $r13;
        android.view.InflateException $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19;
        android.animation.PropertyValuesHolder r21;
        androidx.vectordrawable.graphics.drawable.ArgbEvaluator r27;

        r0 := @parameter0: android.content.res.TypedArray;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 = virtualinvoke r0.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i0);

        if r2 == null goto label01;

        $z9 = 1;

        goto label02;

     label01:
        $z9 = 0;

     label02:
        z0 = $z9;

        if z0 == 0 goto label03;

        $i5 = r2.<android.util.TypedValue: int type>;

        goto label04;

     label03:
        $i5 = 0;

     label04:
        i2 = $i5;

        r3 = virtualinvoke r0.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i1);

        if r3 == null goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        z1 = $z10;

        if z1 == 0 goto label07;

        $i6 = r3.<android.util.TypedValue: int type>;

        goto label08;

     label07:
        $i6 = 0;

     label08:
        i3 = $i6;

        if i4 != 4 goto label12;

        if z0 == 0 goto label09;

        $z8 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i2);

        if $z8 != 0 goto label10;

     label09:
        if z1 == 0 goto label11;

        $z7 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i3);

        if $z7 == 0 goto label11;

     label10:
        i4 = 3;

        goto label12;

     label11:
        i4 = 0;

     label12:
        if i4 != 0 goto label13;

        $z11 = 1;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        z2 = $z11;

        r21 = null;

        if i4 != 2 goto label21;

        r22 = virtualinvoke r0.<android.content.res.TypedArray: java.lang.String getString(int)>(i0);

        r23 = virtualinvoke r0.<android.content.res.TypedArray: java.lang.String getString(int)>(i1);

        r24 = staticinvoke <androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>(r22);

        r4 = staticinvoke <androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>(r23);

        if r24 != null goto label15;

        if r4 == null goto label20;

     label15:
        if r24 == null goto label19;

        $r11 = new androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator;

        specialinvoke $r11.<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>();

        r25 = $r11;

        if r4 == null goto label17;

        $z6 = staticinvoke <androidx.core.graphics.PathParser: boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[])>(r24, r4);

        if $z6 != 0 goto label16;

        $r14 = new android.view.InflateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Can\'t morph from ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.view.InflateException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label16:
        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r24;

        $r13[1] = r4;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>(r1, r25, $r13);

        goto label18;

     label17:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r24;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>(r1, r25, $r12);

     label18:
        goto label20;

     label19:
        if r4 == null goto label20;

        $r9 = new androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator;

        specialinvoke $r9.<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>();

        r26 = $r9;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>(r1, r26, $r10);

     label20:
        goto label45;

     label21:
        r27 = null;

        if i4 != 3 goto label22;

        r27 = staticinvoke <androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>();

     label22:
        if z2 == 0 goto label32;

        if z0 == 0 goto label28;

        if i2 != 5 goto label23;

        f3 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i0, 0.0F);

        goto label24;

     label23:
        f3 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i0, 0.0F);

     label24:
        if z1 == 0 goto label27;

        if i3 != 5 goto label25;

        f4 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i1, 0.0F);

        goto label26;

     label25:
        f4 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i1, 0.0F);

     label26:
        $r8 = newarray (float)[2];

        $r8[0] = f3;

        $r8[1] = f4;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>(r1, $r8);

        goto label31;

     label27:
        $r7 = newarray (float)[1];

        $r7[0] = f3;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>(r1, $r7);

        goto label31;

     label28:
        if i3 != 5 goto label29;

        f5 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i1, 0.0F);

        goto label30;

     label29:
        f5 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i1, 0.0F);

     label30:
        $r6 = newarray (float)[1];

        $r6[0] = f5;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>(r1, $r6);

     label31:
        goto label44;

     label32:
        if z0 == 0 goto label40;

        if i2 != 5 goto label33;

        $f2 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i0, 0.0F);

        i7 = (int) $f2;

        goto label35;

     label33:
        $z4 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i2);

        if $z4 == 0 goto label34;

        i7 = virtualinvoke r0.<android.content.res.TypedArray: int getColor(int,int)>(i0, 0);

        goto label35;

     label34:
        i7 = virtualinvoke r0.<android.content.res.TypedArray: int getInt(int,int)>(i0, 0);

     label35:
        if z1 == 0 goto label39;

        if i3 != 5 goto label36;

        $f1 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i1, 0.0F);

        i8 = (int) $f1;

        goto label38;

     label36:
        $z5 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i3);

        if $z5 == 0 goto label37;

        i8 = virtualinvoke r0.<android.content.res.TypedArray: int getColor(int,int)>(i1, 0);

        goto label38;

     label37:
        i8 = virtualinvoke r0.<android.content.res.TypedArray: int getInt(int,int)>(i1, 0);

     label38:
        $r28 = newarray (int)[2];

        $r28[0] = i7;

        $r28[1] = i8;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>(r1, $r28);

        goto label44;

     label39:
        $r5 = newarray (int)[1];

        $r5[0] = i7;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>(r1, $r5);

        goto label44;

     label40:
        if z1 == 0 goto label44;

        if i3 != 5 goto label41;

        $f0 = virtualinvoke r0.<android.content.res.TypedArray: float getDimension(int,float)>(i1, 0.0F);

        i9 = (int) $f0;

        goto label43;

     label41:
        $z3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i3);

        if $z3 == 0 goto label42;

        i9 = virtualinvoke r0.<android.content.res.TypedArray: int getColor(int,int)>(i1, 0);

        goto label43;

     label42:
        i9 = virtualinvoke r0.<android.content.res.TypedArray: int getInt(int,int)>(i1, 0);

     label43:
        $r29 = newarray (int)[1];

        $r29[0] = i9;

        r21 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>(r1, $r29);

     label44:
        if r21 == null goto label45;

        if r27 == null goto label45;

        virtualinvoke r21.<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>(r27);

     label45:
        return r21;
    }

    private static void parseAnimatorFromTypeArray(android.animation.ValueAnimator, android.content.res.TypedArray, android.content.res.TypedArray, float, org.xmlpull.v1.XmlPullParser)
    {
        android.animation.ValueAnimator r0;
        android.content.res.TypedArray r1, r2;
        float f0;
        org.xmlpull.v1.XmlPullParser r3;
        long l0, l1;
        android.animation.PropertyValuesHolder r4;
        int $i2, $i3, i4, $i5, $i6;
        boolean $z0, $z1;
        android.animation.PropertyValuesHolder[] $r6;

        r0 := @parameter0: android.animation.ValueAnimator;

        r1 := @parameter1: android.content.res.TypedArray;

        r2 := @parameter2: android.content.res.TypedArray;

        f0 := @parameter3: float;

        r3 := @parameter4: org.xmlpull.v1.XmlPullParser;

        $i2 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r3, "duration", 1, 300);

        l0 = (long) $i2;

        $i3 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r3, "startOffset", 2, 0);

        l1 = (long) $i3;

        i4 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r3, "valueType", 7, 4);

        $z0 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r3, "valueFrom");

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r3, "valueTo");

        if $z1 == 0 goto label2;

        if i4 != 4 goto label1;

        i4 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeFromValues(android.content.res.TypedArray,int,int)>(r1, 5, 6);

     label1:
        r4 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>(r1, i4, 5, 6, "");

        if r4 == null goto label2;

        $r6 = newarray (android.animation.PropertyValuesHolder)[1];

        $r6[0] = r4;

        virtualinvoke r0.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r6);

     label2:
        virtualinvoke r0.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(l0);

        virtualinvoke r0.<android.animation.ValueAnimator: void setStartDelay(long)>(l1);

        $i5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r3, "repeatCount", 3, 0);

        virtualinvoke r0.<android.animation.ValueAnimator: void setRepeatCount(int)>($i5);

        $i6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r3, "repeatMode", 4, 1);

        virtualinvoke r0.<android.animation.ValueAnimator: void setRepeatMode(int)>($i6);

        if r2 == null goto label3;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser)>(r0, r2, i4, f0, r3);

     label3:
        return;
    }

    private static void setupObjectAnimator(android.animation.ValueAnimator, android.content.res.TypedArray, int, float, org.xmlpull.v1.XmlPullParser)
    {
        android.animation.ValueAnimator r0;
        android.content.res.TypedArray r1;
        float f0, $f1;
        org.xmlpull.v1.XmlPullParser r2;
        android.animation.ObjectAnimator r3;
        java.lang.String r4, r5, $r9, $r12, r13, r14;
        android.graphics.Path r6;
        android.view.InflateException $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        int i0;
        boolean z0;

        r0 := @parameter0: android.animation.ValueAnimator;

        r1 := @parameter1: android.content.res.TypedArray;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        r2 := @parameter4: org.xmlpull.v1.XmlPullParser;

        r3 = (android.animation.ObjectAnimator) r0;

        r4 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, r2, "pathData", 1);

        if r4 == null goto label4;

        r13 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, r2, "propertyXName", 2);

        r5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, r2, "propertyYName", 3);

        if i0 == 2 goto label1;

        if i0 != 4 goto label2;

     label1:
        z0 = 0;

     label2:
        if r13 != null goto label3;

        if r5 != null goto label3;

        $r7 = new android.view.InflateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" propertyXName or propertyYName is needed for PathData");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.view.InflateException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        r6 = staticinvoke <androidx.core.graphics.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>(r4);

        $f1 = 0.5F * f0;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String)>(r6, r3, $f1, r13, r5);

        goto label5;

     label4:
        r14 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, r2, "propertyName", 0);

        virtualinvoke r3.<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>(r14);

     label5:
        return;
    }

    private static void setupPathMotion(android.graphics.Path, android.animation.ObjectAnimator, float, java.lang.String, java.lang.String)
    {
        android.graphics.Path r0;
        android.animation.ObjectAnimator r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10, f11;
        java.lang.String r2, r3;
        android.graphics.PathMeasure r4, $r9, $r13, r21;
        java.util.ArrayList r5, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9;
        float[] r6, r7, r8;
        java.lang.Float $r11, $r12, $r18, $r20;
        boolean $z2;
        android.animation.PropertyValuesHolder[] $r14, $r15, $r16;
        java.lang.Object $r17, $r19;
        byte $b7;
        android.animation.PropertyValuesHolder r22, r23;

        r0 := @parameter0: android.graphics.Path;

        r1 := @parameter1: android.animation.ObjectAnimator;

        f0 := @parameter2: float;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $r9 = new android.graphics.PathMeasure;

        specialinvoke $r9.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>(r0, 0);

        r4 = $r9;

        f9 = 0.0F;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r5 = $r10;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label1:
        f10 = virtualinvoke r4.<android.graphics.PathMeasure: float getLength()>();

        f9 = f9 + f10;

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f9);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $z2 = virtualinvoke r4.<android.graphics.PathMeasure: boolean nextContour()>();

        if $z2 != 0 goto label1;

        $r13 = new android.graphics.PathMeasure;

        specialinvoke $r13.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>(r0, 0);

        r21 = $r13;

        $f2 = f9 / f0;

        $i1 = (int) $f2;

        $i2 = $i1 + 1;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(100, $i2);

        r6 = newarray (float)[i0];

        r7 = newarray (float)[i0];

        r8 = newarray (float)[2];

        i8 = 0;

        $i3 = i0 - 1;

        $f3 = (float) $i3;

        f1 = f9 / $f3;

        f11 = 0.0F;

        i9 = 0;

     label2:
        if i9 >= i0 goto label4;

        $r17 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r18 = (java.lang.Float) $r17;

        $f4 = virtualinvoke $r18.<java.lang.Float: float floatValue()>();

        $f5 = f11 - $f4;

        virtualinvoke r21.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>($f5, r8, null);

        $f6 = r8[0];

        r6[i9] = $f6;

        $f7 = r8[1];

        r7[i9] = $f7;

        f11 = f11 + f1;

        $i4 = i8 + 1;

        $i5 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        if $i4 >= $i5 goto label3;

        $i6 = i8 + 1;

        $r19 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r20 = (java.lang.Float) $r19;

        $f8 = virtualinvoke $r20.<java.lang.Float: float floatValue()>();

        $b7 = f11 cmpl $f8;

        if $b7 <= 0 goto label3;

        i8 = i8 + 1;

        virtualinvoke r21.<android.graphics.PathMeasure: boolean nextContour()>();

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        r22 = null;

        r23 = null;

        if r2 == null goto label5;

        r22 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>(r2, r6);

     label5:
        if r3 == null goto label6;

        r23 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>(r3, r7);

     label6:
        if r22 != null goto label7;

        $r16 = newarray (android.animation.PropertyValuesHolder)[1];

        $r16[0] = r23;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r16);

        goto label9;

     label7:
        if r23 != null goto label8;

        $r15 = newarray (android.animation.PropertyValuesHolder)[1];

        $r15[0] = r22;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r15);

        goto label9;

     label8:
        $r14 = newarray (android.animation.PropertyValuesHolder)[2];

        $r14[0] = r22;

        $r14[1] = r23;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r14);

     label9:
        return;
    }

    private static android.animation.Animator createAnimatorFromXml(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        org.xmlpull.v1.XmlPullParser r3;
        float f0;
        android.util.AttributeSet $r4;
        android.animation.Animator $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: org.xmlpull.v1.XmlPullParser;

        f0 := @parameter4: float;

        $r4 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r3);

        $r5 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>(r0, r1, r2, r3, $r4, null, 0, f0);

        return $r5;
    }

    private static android.animation.Animator createAnimatorFromXml(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.animation.AnimatorSet, int, float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        org.xmlpull.v1.XmlPullParser r3;
        android.util.AttributeSet r4, $r13;
        android.animation.AnimatorSet r5, $r18, r28;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        float f0;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, z7;
        java.lang.Object $r6, r20;
        java.lang.StringBuilder $r9, $r11, r29;
        java.lang.String $r10, $r12, r22;
        android.animation.ValueAnimator $r15;
        int[] $r17;
        java.util.ArrayList r21, r31;
        android.content.res.TypedArray r23;
        android.animation.PropertyValuesHolder[] r24;
        android.animation.Animator[] r25;
        java.util.Iterator r26;
        android.animation.Animator r27, r32;
        java.lang.RuntimeException r30;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: org.xmlpull.v1.XmlPullParser;

        r4 := @parameter4: android.util.AttributeSet;

        r5 := @parameter5: android.animation.AnimatorSet;

        i0 := @parameter6: int;

        f0 := @parameter7: float;

        r20 = null;

        r21 = null;

        i2 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        $i6 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

        i1 = $i6;

        if $i6 != 3 goto label02;

        $i5 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i5 <= i2 goto label12;

     label02:
        if i1 == 1 goto label12;

        if i1 == 2 goto label03;

        goto label01;

     label03:
        r22 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        z7 = 0;

        $z1 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("objectAnimator");

        if $z1 == 0 goto label04;

        r20 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser)>(r0, r1, r2, r4, f0, r3);

        goto label09;

     label04:
        $z2 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("animator");

        if $z2 == 0 goto label05;

        r20 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>(r0, r1, r2, r4, null, f0, r3);

        goto label09;

     label05:
        $z3 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("set");

        if $z3 == 0 goto label06;

        r28 = new android.animation.AnimatorSet;

        specialinvoke r28.<android.animation.AnimatorSet: void <init>()>();

        r20 = r28;

        $r17 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_ANIMATOR_SET>;

        r23 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r4, $r17);

        i7 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r23, r3, "ordering", 0, 0);

        $r18 = (android.animation.AnimatorSet) r20;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>(r0, r1, r2, r3, r4, $r18, i7, f0);

        virtualinvoke r23.<android.content.res.TypedArray: void recycle()>();

        goto label09;

     label06:
        $z4 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("propertyValuesHolder");

        if $z4 == 0 goto label08;

        $r13 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r3);

        r24 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>(r0, r1, r2, r3, $r13);

        if r24 == null goto label07;

        $z6 = r20 instanceof android.animation.ValueAnimator;

        if $z6 == 0 goto label07;

        $r15 = (android.animation.ValueAnimator) r20;

        virtualinvoke $r15.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>(r24);

     label07:
        z7 = 1;

        goto label09;

     label08:
        r30 = new java.lang.RuntimeException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown animator name: ");

        $r10 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw r30;

     label09:
        if r5 == null goto label11;

        if z7 != 0 goto label11;

        if r21 != null goto label10;

        r31 = new java.util.ArrayList;

        specialinvoke r31.<java.util.ArrayList: void <init>()>();

        r21 = r31;

     label10:
        virtualinvoke r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r20);

     label11:
        goto label01;

     label12:
        if r5 == null goto label16;

        if r21 == null goto label16;

        $i3 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        r25 = newarray (android.animation.Animator)[$i3];

        i8 = 0;

        r26 = virtualinvoke r21.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (android.animation.Animator) $r6;

        $i4 = i8;

        i8 = i8 + 1;

        r25[$i4] = r27;

        goto label13;

     label14:
        if i0 != 0 goto label15;

        virtualinvoke r5.<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>(r25);

        goto label16;

     label15:
        virtualinvoke r5.<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>(r25);

     label16:
        r32 = (android.animation.Animator) r20;

        return r32;
    }

    private static android.animation.PropertyValuesHolder[] loadValues(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        org.xmlpull.v1.XmlPullParser r3;
        android.util.AttributeSet r4;
        int i0, i1, $i4, i5, i6;
        java.lang.Object $r5;
        android.animation.PropertyValuesHolder $r6, r13;
        boolean $z0;
        int[] $r7;
        java.util.ArrayList $r8, r9;
        java.lang.String r10, r12;
        android.content.res.TypedArray r11;
        android.animation.PropertyValuesHolder[] r14;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: org.xmlpull.v1.XmlPullParser;

        r4 := @parameter4: android.util.AttributeSet;

        r9 = null;

     label1:
        $i4 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        i0 = $i4;

        if $i4 == 3 goto label7;

        if i0 == 1 goto label7;

        if i0 == 2 goto label2;

        interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label1;

     label2:
        r10 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("propertyValuesHolder");

        if $z0 == 0 goto label6;

        $r7 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_PROPERTY_VALUES_HOLDER>;

        r11 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r4, $r7);

        r12 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r11, r3, "propertyName", 3);

        i1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r11, r3, "valueType", 2, 4);

        r13 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r0, r1, r2, r3, r12, i1);

        if r13 != null goto label3;

        r13 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>(r11, i1, 0, 1, r12);

     label3:
        if r13 == null goto label5;

        if r9 != null goto label4;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r9 = $r8;

     label4:
        virtualinvoke r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

     label5:
        virtualinvoke r11.<android.content.res.TypedArray: void recycle()>();

     label6:
        interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label1;

     label7:
        r14 = null;

        if r9 == null goto label9;

        i5 = virtualinvoke r9.<java.util.ArrayList: int size()>();

        r14 = newarray (android.animation.PropertyValuesHolder)[i5];

        i6 = 0;

     label8:
        if i6 >= i5 goto label9;

        $r5 = virtualinvoke r9.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r6 = (android.animation.PropertyValuesHolder) $r5;

        r14[i6] = $r6;

        i6 = i6 + 1;

        goto label8;

     label9:
        return r14;
    }

    private static int inferValueTypeOfKeyframe(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, org.xmlpull.v1.XmlPullParser)
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        org.xmlpull.v1.XmlPullParser r3;
        android.content.res.TypedArray r4;
        android.util.TypedValue r5;
        boolean z0, $z1, $z2;
        int[] $r6;
        int $i0;
        byte b1;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: org.xmlpull.v1.XmlPullParser;

        $r6 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_KEYFRAME>;

        r4 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r0, r1, r2, $r6);

        r5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r4, r3, "value", 0);

        if r5 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $i0 = r5.<android.util.TypedValue: int type>;

        $z1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($i0);

        if $z1 == 0 goto label3;

        b1 = 3;

        goto label4;

     label3:
        b1 = 0;

     label4:
        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

        return b1;
    }

    private static int inferValueTypeFromValues(android.content.res.TypedArray, int, int)
    {
        android.content.res.TypedArray r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.util.TypedValue r1, r2;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        byte b6;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = virtualinvoke r0.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i0);

        if r1 == null goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z0 = $z4;

        if z0 == 0 goto label03;

        $i4 = r1.<android.util.TypedValue: int type>;

        goto label04;

     label03:
        $i4 = 0;

     label04:
        i2 = $i4;

        r2 = virtualinvoke r0.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i1);

        if r2 == null goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        z1 = $z5;

        if z1 == 0 goto label07;

        $i5 = r2.<android.util.TypedValue: int type>;

        goto label08;

     label07:
        $i5 = 0;

     label08:
        i3 = $i5;

        if z0 == 0 goto label09;

        $z3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i2);

        if $z3 != 0 goto label10;

     label09:
        if z1 == 0 goto label11;

        $z2 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(i3);

        if $z2 == 0 goto label11;

     label10:
        b6 = 3;

        goto label12;

     label11:
        b6 = 0;

     label12:
        return b6;
    }

    private static void dumpKeyframes(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r1, $r12;
        int i0, $i1, i5;
        android.animation.Keyframe r2;
        java.lang.Object $r3, $r13, $r14;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        float $f0, $f1;
        byte $b3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        return;

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AnimatorInflater", r1);

        i0 = lengthof r0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label8;

        $r3 = r0[i5];

        r2 = (android.animation.Keyframe) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keyframe ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": fraction ");

        $f0 = virtualinvoke r2.<android.animation.Keyframe: float getFraction()>();

        $b3 = $f0 cmpg 0.0F;

        if $b3 >= 0 goto label4;

        $r13 = "null";

        goto label5;

     label4:
        $f1 = virtualinvoke r2.<android.animation.Keyframe: float getFraction()>();

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

     label5:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", , value : ");

        $z0 = virtualinvoke r2.<android.animation.Keyframe: boolean hasValue()>();

        if $z0 == 0 goto label6;

        $r14 = virtualinvoke r2.<android.animation.Keyframe: java.lang.Object getValue()>();

        goto label7;

     label6:
        $r14 = "null";

     label7:
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AnimatorInflater", $r12);

        i5 = i5 + 1;

        goto label3;

     label8:
        return;
    }

    private static android.animation.PropertyValuesHolder loadPvh(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, java.lang.String, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        org.xmlpull.v1.XmlPullParser r3;
        java.lang.String r4, r22;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i14, i16, i17, i19, i20, i21;
        android.animation.Keyframe r5, r7, $r12, $r13, $r14, $r15, $r16, r23, r24;
        float f0, f1, $f2, $f3, $f4, $f5, f6;
        android.animation.Keyframe[] r6;
        java.lang.Object $r8, $r9;
        byte $b5, $b6, $b11, $b12, $b13, $b18;
        androidx.vectordrawable.graphics.drawable.ArgbEvaluator $r11;
        boolean $z0;
        android.util.AttributeSet $r17, $r19;
        java.util.ArrayList $r18, r21;
        android.animation.PropertyValuesHolder r20;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: org.xmlpull.v1.XmlPullParser;

        r4 := @parameter4: java.lang.String;

        i16 := @parameter5: int;

        r20 = null;

        r21 = null;

     label01:
        $i2 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i2;

        if $i2 == 3 goto label06;

        if i0 == 1 goto label06;

        r22 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("keyframe");

        if $z0 == 0 goto label05;

        if i16 != 4 goto label02;

        $r19 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r3);

        i16 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>(r1, r2, $r19, r3);

     label02:
        $r17 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r3);

        r23 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser)>(r0, r1, r2, $r17, i16, r3);

        if r23 == null goto label04;

        if r21 != null goto label03;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r21 = $r18;

     label03:
        virtualinvoke r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r23);

     label04:
        interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

     label05:
        goto label01;

     label06:
        if r21 == null goto label19;

        $i3 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        i17 = $i3;

        if $i3 <= 0 goto label19;

        $r8 = virtualinvoke r21.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r24 = (android.animation.Keyframe) $r8;

        $i4 = i17 - 1;

        $r9 = virtualinvoke r21.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        r5 = (android.animation.Keyframe) $r9;

        f0 = virtualinvoke r5.<android.animation.Keyframe: float getFraction()>();

        $b5 = f0 cmpg 1.0F;

        if $b5 >= 0 goto label08;

        $b13 = f0 cmpg 0.0F;

        if $b13 >= 0 goto label07;

        virtualinvoke r5.<android.animation.Keyframe: void setFraction(float)>(1.0F);

        goto label08;

     label07:
        $i14 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        $r16 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>(r5, 1.0F);

        virtualinvoke r21.<java.util.ArrayList: void add(int,java.lang.Object)>($i14, $r16);

        i17 = i17 + 1;

     label08:
        f1 = virtualinvoke r24.<android.animation.Keyframe: float getFraction()>();

        $b18 = f1 cmpl 0.0F;

        if $b18 == 0 goto label10;

        $b12 = f1 cmpg 0.0F;

        if $b12 >= 0 goto label09;

        virtualinvoke r24.<android.animation.Keyframe: void setFraction(float)>(0.0F);

        goto label10;

     label09:
        $r15 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>(r24, 0.0F);

        virtualinvoke r21.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r15);

        i17 = i17 + 1;

     label10:
        r6 = newarray (android.animation.Keyframe)[i17];

        virtualinvoke r21.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r6);

        i19 = 0;

     label11:
        if i19 >= i17 goto label18;

        r7 = r6[i19];

        $f2 = virtualinvoke r7.<android.animation.Keyframe: float getFraction()>();

        $b6 = $f2 cmpg 0.0F;

        if $b6 >= 0 goto label17;

        if i19 != 0 goto label12;

        virtualinvoke r7.<android.animation.Keyframe: void setFraction(float)>(0.0F);

        goto label17;

     label12:
        $i7 = i17 - 1;

        if i19 != $i7 goto label13;

        virtualinvoke r7.<android.animation.Keyframe: void setFraction(float)>(1.0F);

        goto label17;

     label13:
        i1 = i19;

        i20 = i19;

        i21 = i1 + 1;

     label14:
        $i8 = i17 - 1;

        if i21 >= $i8 goto label16;

        $r14 = r6[i21];

        $f5 = virtualinvoke $r14.<android.animation.Keyframe: float getFraction()>();

        $b11 = $f5 cmpl 0.0F;

        if $b11 < 0 goto label15;

        goto label16;

     label15:
        i20 = i21;

        i21 = i21 + 1;

        goto label14;

     label16:
        $i9 = i20 + 1;

        $r12 = r6[$i9];

        $f3 = virtualinvoke $r12.<android.animation.Keyframe: float getFraction()>();

        $i10 = i1 - 1;

        $r13 = r6[$i10];

        $f4 = virtualinvoke $r13.<android.animation.Keyframe: float getFraction()>();

        f6 = $f3 - $f4;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void distributeKeyframes(android.animation.Keyframe[],float,int,int)>(r6, f6, i1, i20);

     label17:
        i19 = i19 + 1;

        goto label11;

     label18:
        r20 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>(r4, r6);

        if i16 != 3 goto label19;

        $r11 = staticinvoke <androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>();

        virtualinvoke r20.<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>($r11);

     label19:
        return r20;
    }

    private static android.animation.Keyframe createNewKeyframe(android.animation.Keyframe, float)
    {
        android.animation.Keyframe r0, $r5;
        float f0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @parameter0: android.animation.Keyframe;

        f0 := @parameter1: float;

        $r1 = virtualinvoke r0.<android.animation.Keyframe: java.lang.Class getType()>();

        $r2 = <java.lang.Float: java.lang.Class TYPE>;

        if $r1 != $r2 goto label1;

        $r5 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>(f0);

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<android.animation.Keyframe: java.lang.Class getType()>();

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r3 != $r4 goto label2;

        $r5 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float)>(f0);

        goto label3;

     label2:
        $r5 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofObject(float)>(f0);

     label3:
        return $r5;
    }

    private static void distributeKeyframes(android.animation.Keyframe[], float, int, int)
    {
        android.animation.Keyframe[] r0;
        float f0, f1, $f2, $f3, $f4;
        int i0, i1, i2, $i3, $i4, i5;
        android.animation.Keyframe $r1, $r2;

        r0 := @parameter0: android.animation.Keyframe[];

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = i1 - i0;

        i2 = $i3 + 2;

        $f2 = (float) i2;

        f1 = f0 / $f2;

        i5 = i0;

     label1:
        if i5 > i1 goto label2;

        $r2 = r0[i5];

        $i4 = i5 - 1;

        $r1 = r0[$i4];

        $f3 = virtualinvoke $r1.<android.animation.Keyframe: float getFraction()>();

        $f4 = $f3 + f1;

        virtualinvoke $r2.<android.animation.Keyframe: void setFraction(float)>($f4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    private static android.animation.Keyframe loadKeyframe(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.util.AttributeSet r3;
        org.xmlpull.v1.XmlPullParser r4;
        android.content.res.TypedArray r5;
        float f0, f1;
        android.util.TypedValue r6;
        boolean z0, $z1, $z2;
        int[] $r7;
        int $i0, i1, i2, i3;
        android.animation.Keyframe r8, $r9;
        android.view.animation.Interpolator r10;
        android.animation.TimeInterpolator r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: android.util.AttributeSet;

        i1 := @parameter4: int;

        r4 := @parameter5: org.xmlpull.v1.XmlPullParser;

        $r7 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_KEYFRAME>;

        r5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r3, $r7);

        r8 = null;

        f0 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r5, r4, "fraction", 3, -1.0F);

        r6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r5, r4, "value", 0);

        if r6 == null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        if i1 != 4 goto label04;

        if z0 == 0 goto label03;

        $i0 = r6.<android.util.TypedValue: int type>;

        $z1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($i0);

        if $z1 == 0 goto label03;

        i1 = 3;

        goto label04;

     label03:
        i1 = 0;

     label04:
        if z0 == 0 goto label08;

        tableswitch(i1)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label06;
            default: goto label07;
        };

     label05:
        f1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r5, r4, "value", 0, 0.0F);

        r8 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>(f0, f1);

        goto label07;

     label06:
        i2 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r5, r4, "value", 0, 0);

        r8 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>(f0, i2);

     label07:
        goto label11;

     label08:
        if i1 != 0 goto label09;

        $r9 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>(f0);

        goto label10;

     label09:
        $r9 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float)>(f0);

     label10:
        r8 = $r9;

     label11:
        i3 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r5, r4, "interpolator", 1, 0);

        if i3 <= 0 goto label12;

        r10 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r0, i3);

        r11 = (android.animation.TimeInterpolator) r10;

        virtualinvoke r8.<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>(r11);

     label12:
        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return r8;
    }

    private static android.animation.ObjectAnimator loadObjectAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, float, org.xmlpull.v1.XmlPullParser) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.util.AttributeSet r3;
        float f0;
        org.xmlpull.v1.XmlPullParser r4;
        android.animation.ObjectAnimator r5, $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: android.util.AttributeSet;

        f0 := @parameter4: float;

        r4 := @parameter5: org.xmlpull.v1.XmlPullParser;

        $r6 = new android.animation.ObjectAnimator;

        specialinvoke $r6.<android.animation.ObjectAnimator: void <init>()>();

        r5 = $r6;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>(r0, r1, r2, r3, r5, f0, r4);

        return r5;
    }

    private static android.animation.ValueAnimator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, android.animation.ValueAnimator, float, org.xmlpull.v1.XmlPullParser) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.util.AttributeSet r3;
        float f0;
        org.xmlpull.v1.XmlPullParser r4;
        android.content.res.TypedArray r5, r6;
        int i0;
        android.view.animation.Interpolator r7;
        int[] $r8, $r9;
        android.animation.ValueAnimator r11, r12;
        android.animation.TimeInterpolator r13;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 := @parameter3: android.util.AttributeSet;

        r11 := @parameter4: android.animation.ValueAnimator;

        f0 := @parameter5: float;

        r4 := @parameter6: org.xmlpull.v1.XmlPullParser;

        $r8 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_ANIMATOR>;

        r5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r3, $r8);

        $r9 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_PROPERTY_ANIMATOR>;

        r6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r3, $r9);

        if r11 != null goto label1;

        r12 = new android.animation.ValueAnimator;

        specialinvoke r12.<android.animation.ValueAnimator: void <init>()>();

        r11 = r12;

     label1:
        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser)>(r11, r5, r6, f0, r4);

        i0 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r5, r4, "interpolator", 0, 0);

        if i0 <= 0 goto label2;

        r7 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r0, i0);

        r13 = (android.animation.TimeInterpolator) r7;

        virtualinvoke r11.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r13);

     label2:
        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        if r6 == null goto label3;

        virtualinvoke r6.<android.content.res.TypedArray: void recycle()>();

     label3:
        return r11;
    }

    private static boolean isColorType(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 28 goto label1;

        if i0 > 31 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>()
    {
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat r0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

