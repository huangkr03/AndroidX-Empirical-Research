androidx.graphics.opengl.egl.EGLManager
<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLManager$Companion Companion>
<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig mEglConfig>
<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface>
<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext>
<androidx.graphics.opengl.egl.EGLManager: boolean mWideColorGamutSupport>
<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLVersion mEglVersion>
<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec mEglSpec>
<androidx.graphics.opengl.egl.EGLManager: java.util.Set mEglExtensions>
<androidx.graphics.opengl.egl.EGLManager: boolean mIsSingleBuffered>
<androidx.graphics.opengl.egl.EGLManager: int[] mQueryResult>
<androidx.graphics.opengl.egl.EGLManager: java.lang.String TAG>
    public void <init>(androidx.graphics.opengl.egl.EGLSpec)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLSpec r1;
        android.opengl.EGLSurface $r2;
        android.opengl.EGLContext $r3;
        androidx.graphics.opengl.egl.EGLVersion $r4;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: androidx.graphics.opengl.egl.EGLSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "eglSpec");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "EGL_NO_SURFACE");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface> = $r2;

        $r3 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "EGL_NO_CONTEXT");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext> = $r3;

        $r4 = <androidx.graphics.opengl.egl.EGLVersion: androidx.graphics.opengl.egl.EGLVersion Unknown>;

        r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLVersion mEglVersion> = $r4;

        r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec mEglSpec> = r1;

        return;
    }

    public void <init>(androidx.graphics.opengl.egl.EGLSpec, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        androidx.graphics.opengl.egl.EGLSpec r2;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r2 := @parameter0: androidx.graphics.opengl.egl.EGLSpec;

        i0 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = <androidx.graphics.opengl.egl.EGLSpec: androidx.graphics.opengl.egl.EGLSpec V14>;

     label1:
        specialinvoke r0.<androidx.graphics.opengl.egl.EGLManager: void <init>(androidx.graphics.opengl.egl.EGLSpec)>(r2);

        return;
    }

    public final void initialize()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLContext r1, $r2;
        androidx.graphics.opengl.egl.EGLSpec $r3, $r6;
        androidx.graphics.opengl.egl.EGLVersion $r4;
        androidx.opengl.EGLExt$Companion $r5;
        java.lang.String $r7;
        java.util.Set $r8;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext>;

        $r2 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        if r1 != $r2 goto label1;

        $r3 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r4 = interfaceinvoke $r3.<androidx.graphics.opengl.egl.EGLSpec: androidx.graphics.opengl.egl.EGLVersion eglInitialize()>();

        r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLVersion mEglVersion> = $r4;

        $r5 = <androidx.opengl.EGLExt: androidx.opengl.EGLExt$Companion Companion>;

        $r6 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r7 = interfaceinvoke $r6.<androidx.graphics.opengl.egl.EGLSpec: java.lang.String eglQueryString(int)>(12373);

        $r8 = virtualinvoke $r5.<androidx.opengl.EGLExt$Companion: java.util.Set parseExtensions(java.lang.String)>($r7);

        r0.<androidx.graphics.opengl.egl.EGLManager: java.util.Set mEglExtensions> = $r8;

     label1:
        return;
    }

    public final android.opengl.EGLConfig loadConfig(androidx.graphics.opengl.egl.EGLConfigAttributes)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLConfigAttributes r1;
        androidx.graphics.opengl.egl.EGLSpec $r2;
        android.opengl.EGLConfig $r3;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: androidx.graphics.opengl.egl.EGLConfigAttributes;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configAttributes");

        $r2 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r3 = interfaceinvoke $r2.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLConfig loadConfig(androidx.graphics.opengl.egl.EGLConfigAttributes)>(r1);

        return $r3;
    }

    public final android.opengl.EGLContext createContext(android.opengl.EGLConfig)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLConfig r1;
        android.opengl.EGLContext r2, $r8, $r10;
        android.opengl.EGLSurface r3, $r9, $r16;
        androidx.graphics.opengl.egl.EGLConfigAttributes r4;
        androidx.graphics.opengl.egl.EGLConfigAttributes$Builder r5, r17;
        androidx.graphics.opengl.egl.EGLSpec $r7, $r12, $r13, $r15;
        boolean $z3, $z4;
        int $i0;
        androidx.graphics.opengl.egl.EGLException r18;
        java.lang.Throwable r19;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: android.opengl.EGLConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "config");

        $r7 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        r2 = interfaceinvoke $r7.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLContext eglCreateContext(android.opengl.EGLConfig)>(r1);

        $r8 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        if r2 == $r8 goto label4;

        $z3 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: boolean isExtensionSupported(java.lang.String)>("EGL_KHR_surfaceless_context");

        if $z3 == 0 goto label1;

        $r16 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "{\n                    EG\u2026SURFACE\n                }");

        goto label2;

     label1:
        r17 = new androidx.graphics.opengl.egl.EGLConfigAttributes$Builder;

        specialinvoke r17.<androidx.graphics.opengl.egl.EGLConfigAttributes$Builder: void <init>()>();

        r5 = r17;

        virtualinvoke r5.<androidx.graphics.opengl.egl.EGLConfigAttributes$Builder: void 'to'(int,int)>(12375, 1);

        virtualinvoke r5.<androidx.graphics.opengl.egl.EGLConfigAttributes$Builder: void 'to'(int,int)>(12374, 1);

        r4 = virtualinvoke r5.<androidx.graphics.opengl.egl.EGLConfigAttributes$Builder: androidx.graphics.opengl.egl.EGLConfigAttributes build()>();

        $r12 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r16 = interfaceinvoke $r12.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLSurface eglCreatePBufferSurface(android.opengl.EGLConfig,androidx.graphics.opengl.egl.EGLConfigAttributes)>(r1, r4);

     label2:
        r3 = $r16;

        $r13 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $z4 = interfaceinvoke $r13.<androidx.graphics.opengl.egl.EGLSpec: boolean eglMakeCurrent(android.opengl.EGLContext,android.opengl.EGLSurface,android.opengl.EGLSurface)>(r2, r3, r3);

        if $z4 != 0 goto label3;

        r18 = new androidx.graphics.opengl.egl.EGLException;

        $r15 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $i0 = interfaceinvoke $r15.<androidx.graphics.opengl.egl.EGLSpec: int eglGetError()>();

        specialinvoke r18.<androidx.graphics.opengl.egl.EGLException: void <init>(int,java.lang.String)>($i0, "Unable to make default surface current");

        r19 = (java.lang.Throwable) r18;

        throw r19;

     label3:
        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface> = r3;

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext> = r2;

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig mEglConfig> = r1;

        goto label5;

     label4:
        $r9 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "EGL_NO_SURFACE");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface> = $r9;

        $r10 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "EGL_NO_CONTEXT");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext> = $r10;

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig mEglConfig> = null;

     label5:
        return r2;
    }

    public final void release()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLContext r1, $r3, $r8, $r12;
        android.opengl.EGLSurface r2, $r5, $r6, $r9, $r10;
        boolean $z2, $z3;
        androidx.graphics.opengl.egl.EGLSpec $r4, $r7, $r13;
        androidx.graphics.opengl.egl.EGLVersion $r11;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext>;

        $r3 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r3);

        if $z2 != 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        interfaceinvoke $r4.<androidx.graphics.opengl.egl.EGLSpec: void eglDestroyContext(android.opengl.EGLContext)>(r1);

        r2 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface>;

        $r5 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $z3 != 0 goto label1;

        $r13 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        interfaceinvoke $r13.<androidx.graphics.opengl.egl.EGLSpec: boolean eglDestroySurface(android.opengl.EGLSurface)>(r2);

     label1:
        $r6 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "EGL_NO_SURFACE");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface> = $r6;

        $r7 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r8 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "EGL_NO_CONTEXT");

        $r9 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "EGL_NO_SURFACE");

        $r10 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "EGL_NO_SURFACE");

        interfaceinvoke $r7.<androidx.graphics.opengl.egl.EGLSpec: boolean eglMakeCurrent(android.opengl.EGLContext,android.opengl.EGLSurface,android.opengl.EGLSurface)>($r8, $r9, $r10);

        $r11 = <androidx.graphics.opengl.egl.EGLVersion: androidx.graphics.opengl.egl.EGLVersion Unknown>;

        r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLVersion mEglVersion> = $r11;

        $r12 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "EGL_NO_CONTEXT");

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext> = $r12;

        r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig mEglConfig> = null;

        r0.<androidx.graphics.opengl.egl.EGLManager: java.util.Set mEglExtensions> = null;

     label2:
        return;
    }

    public final androidx.graphics.opengl.egl.EGLSpec getEGLSpec()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLSpec $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec mEglSpec>;

        return $r1;
    }

    public final androidx.graphics.opengl.egl.EGLVersion getEGLVersion()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLVersion $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLVersion mEglVersion>;

        return $r1;
    }

    public final android.opengl.EGLContext getEGLContext()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLContext $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext>;

        return $r1;
    }

    public final android.opengl.EGLConfig getEGLConfig()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLConfig $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig mEglConfig>;

        return $r1;
    }

    public final boolean isExtensionSupported(java.lang.String)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "extensionName");

        $r2 = r0.<androidx.graphics.opengl.egl.EGLManager: java.util.Set mEglExtensions>;

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean makeCurrent(android.opengl.EGLSurface, android.opengl.EGLSurface)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLSurface r1, r2;
        boolean z0;
        androidx.graphics.opengl.egl.EGLSpec $r3;
        android.opengl.EGLContext $r4;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: android.opengl.EGLSurface;

        r2 := @parameter1: android.opengl.EGLSurface;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "drawSurface");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "readSurface");

        $r3 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r4 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext mEglContext>;

        z0 = interfaceinvoke $r3.<androidx.graphics.opengl.egl.EGLSpec: boolean eglMakeCurrent(android.opengl.EGLContext,android.opengl.EGLSurface,android.opengl.EGLSurface)>($r4, r1, r2);

        if z0 == 0 goto label1;

        specialinvoke r0.<androidx.graphics.opengl.egl.EGLManager: void querySurface(android.opengl.EGLSurface)>(r1);

     label1:
        return z0;
    }

    public static boolean makeCurrent$default(androidx.graphics.opengl.egl.EGLManager, android.opengl.EGLSurface, android.opengl.EGLSurface, int, java.lang.Object)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLSurface r1, r3;
        int i0, $i1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @parameter0: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter1: android.opengl.EGLSurface;

        r3 := @parameter2: android.opengl.EGLSurface;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = r1;

     label1:
        $z0 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: boolean makeCurrent(android.opengl.EGLSurface,android.opengl.EGLSurface)>(r1, r3);

        return $z0;
    }

    public final void swapAndFlushBuffers()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        boolean $z0;
        androidx.graphics.opengl.egl.EGLSpec $r1;
        android.opengl.EGLSurface $r2;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $z0 = r0.<androidx.graphics.opengl.egl.EGLManager: boolean mIsSingleBuffered>;

        if $z0 == 0 goto label1;

        staticinvoke <android.opengl.GLES20: void glFlush()>();

     label1:
        $r1 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r2 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface getCurrentDrawSurface()>();

        interfaceinvoke $r1.<androidx.graphics.opengl.egl.EGLSpec: boolean eglSwapBuffers(android.opengl.EGLSurface)>($r2);

        return;
    }

    public final android.opengl.EGLSurface getDefaultSurface()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLSurface $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = r0.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface mPBufferSurface>;

        return $r1;
    }

    public final android.opengl.EGLSurface getCurrentDrawSurface()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLSpec $r1;
        android.opengl.EGLSurface $r2;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r2 = interfaceinvoke $r1.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLSurface eglGetCurrentDrawSurface()>();

        return $r2;
    }

    public final android.opengl.EGLSurface getCurrentReadSurface()
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        androidx.graphics.opengl.egl.EGLSpec $r1;
        android.opengl.EGLSurface $r2;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        $r1 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r2 = interfaceinvoke $r1.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLSurface eglGetCurrentReadSurface()>();

        return $r2;
    }

    private final void querySurface(android.opengl.EGLSurface)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLSurface r1, $r5;
        int[] r2, r3, r4, $r8;
        boolean $z1, $z2, $z3;
        androidx.graphics.opengl.egl.EGLSpec $r6;
        int $i0;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: android.opengl.EGLSurface;

        $r5 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z1 == 0 goto label1;

        r0.<androidx.graphics.opengl.egl.EGLManager: boolean mIsSingleBuffered> = 0;

        goto label5;

     label1:
        $r8 = r0.<androidx.graphics.opengl.egl.EGLManager: int[] mQueryResult>;

        if $r8 != null goto label2;

        r3 = newarray (int)[1];

        r4 = r3;

        r0.<androidx.graphics.opengl.egl.EGLManager: int[] mQueryResult> = r4;

        $r8 = r3;

     label2:
        r2 = $r8;

        $r6 = virtualinvoke r0.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $z2 = interfaceinvoke $r6.<androidx.graphics.opengl.egl.EGLSpec: boolean eglQuerySurface(android.opengl.EGLSurface,int,int[],int)>(r1, 12422, r2, 0);

        if $z2 == 0 goto label5;

        $i0 = r2[0];

        if $i0 != 12421 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<androidx.graphics.opengl.egl.EGLManager: boolean mIsSingleBuffered> = $z3;

     label5:
        return;
    }

    public final boolean makeCurrent(android.opengl.EGLSurface)
    {
        androidx.graphics.opengl.egl.EGLManager r0;
        android.opengl.EGLSurface r1;
        boolean $z0;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        r1 := @parameter0: android.opengl.EGLSurface;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "drawSurface");

        $z0 = staticinvoke <androidx.graphics.opengl.egl.EGLManager: boolean makeCurrent$default(androidx.graphics.opengl.egl.EGLManager,android.opengl.EGLSurface,android.opengl.EGLSurface,int,java.lang.Object)>(r0, r1, null, 2, null);

        return $z0;
    }

    public void <init>()
    {
        androidx.graphics.opengl.egl.EGLManager r0;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager;

        specialinvoke r0.<androidx.graphics.opengl.egl.EGLManager: void <init>(androidx.graphics.opengl.egl.EGLSpec,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        return;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.egl.EGLManager$Companion $r0;

        $r0 = new androidx.graphics.opengl.egl.EGLManager$Companion;

        specialinvoke $r0.<androidx.graphics.opengl.egl.EGLManager$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLManager$Companion Companion> = $r0;

        return;
    }

androidx.graphics.opengl.egl.EGLManager$Companion
    private void <init>()
    {
        androidx.graphics.opengl.egl.EGLManager$Companion r0;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.egl.EGLManager$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.graphics.opengl.egl.EGLManager$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.graphics.opengl.egl.EGLManager$Companion: void <init>()>();

        return;
    }

