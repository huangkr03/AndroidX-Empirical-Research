com.google.common.flogger.backend.android.AndroidPlatform
<com.google.common.flogger.backend.android.AndroidPlatform: com.google.common.flogger.backend.Platform$LogCallerFinder CALLER_FINDER>
<com.google.common.flogger.backend.android.AndroidPlatform: boolean IS_ROBOLECTRIC>
<com.google.common.flogger.backend.android.AndroidPlatform: boolean USE_FAST_ANDROID_STACK>
    static volatile boolean '-$$Nest$sfgetIS_ROBOLECTRIC'()
    {
        boolean z0;

        z0 = <com.google.common.flogger.backend.android.AndroidPlatform: boolean IS_ROBOLECTRIC>;

        return z0;
    }

    static volatile boolean '-$$Nest$sfgetUSE_FAST_ANDROID_STACK'()
    {
        boolean z0;

        z0 = <com.google.common.flogger.backend.android.AndroidPlatform: boolean USE_FAST_ANDROID_STACK>;

        return z0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        java.lang.Class $r2;
        com.google.common.flogger.backend.android.AndroidPlatform$1 $r3;

        $z0 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform$InternalStackVerifier: boolean isVmStackPresent()>();

        <com.google.common.flogger.backend.android.AndroidPlatform: boolean USE_FAST_ANDROID_STACK> = $z0;

        $r0 = <android.os.Build: java.lang.String FINGERPRINT>;

        if $r0 == null goto label2;

        $r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r0 = "robolectric";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        <com.google.common.flogger.backend.android.AndroidPlatform: boolean IS_ROBOLECTRIC> = $z0;

        $r2 = class "Landroid/util/Log;";

        virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r3 = new com.google.common.flogger.backend.android.AndroidPlatform$1;

        specialinvoke $r3.<com.google.common.flogger.backend.android.AndroidPlatform$1: void <init>()>();

        <com.google.common.flogger.backend.android.AndroidPlatform: com.google.common.flogger.backend.Platform$LogCallerFinder CALLER_FINDER> = $r3;

        return;
    }

    public void <init>()
    {
        com.google.common.flogger.backend.android.AndroidPlatform $r0;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform;

        specialinvoke $r0.<com.google.common.flogger.backend.Platform: void <init>()>();

        return;
    }

    static java.lang.Class getStackClass1()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <dalvik.system.VMStack: java.lang.Class getStackClass2()>();

        return $r0;
    }

    static boolean isVmStackPresent()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.VMStack");

        $r0 = newarray (java.lang.Class)[0];

     label1:
        virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getStackClass2", $r0);

     label2:
        $r2 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform: java.lang.String staticGetLoggingClassName()>();

        $r1 = class "Lcom/google/common/flogger/backend/android/AndroidPlatform$InternalStackVerifier;";

     label3:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label4:
        return $z0;

     label5:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    static java.lang.String staticGetLoggingClassName()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 = staticinvoke <dalvik.system.VMStack: java.lang.Class getStackClass2()>();

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected com.google.common.flogger.backend.LoggerBackend getBackendImpl(java.lang.String)
    {
        com.google.common.flogger.backend.android.AndroidPlatform $r0;
        com.google.common.flogger.backend.LoggerBackend $r1;
        java.lang.String $r2;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend create(java.lang.String)>($r2);

        return $r1;
    }

    protected com.google.common.flogger.backend.Platform$LogCallerFinder getCallerFinderImpl()
    {
        com.google.common.flogger.backend.android.AndroidPlatform $r0;
        com.google.common.flogger.backend.Platform$LogCallerFinder r1;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform;

        r1 = <com.google.common.flogger.backend.android.AndroidPlatform: com.google.common.flogger.backend.Platform$LogCallerFinder CALLER_FINDER>;

        return r1;
    }

    protected java.lang.String getConfigInfoImpl()
    {
        com.google.common.flogger.backend.android.AndroidPlatform $r0;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform;

        return "platform: Android";
    }

    protected com.google.common.flogger.context.ContextDataProvider getContextDataProviderImpl()
    {
        com.google.common.flogger.backend.android.AndroidPlatform $r0;
        com.google.common.flogger.backend.android.ProxyContextDataProvider $r1;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform;

        $r1 = staticinvoke <com.google.common.flogger.backend.android.ProxyContextDataProvider: com.google.common.flogger.backend.android.ProxyContextDataProvider getInstance()>();

        return $r1;
    }

com.google.common.flogger.backend.android.AndroidPlatform$1
    void <init>()
    {
        com.google.common.flogger.backend.android.AndroidPlatform$1 $r0;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform$1;

        specialinvoke $r0.<com.google.common.flogger.backend.Platform$LogCallerFinder: void <init>()>();

        return;
    }

    public com.google.common.flogger.LogSite findLogSite(java.lang.Class, int)
    {
        com.google.common.flogger.backend.android.AndroidPlatform$1 $r0;
        int $i0;
        java.lang.Class $r1;
        com.google.common.flogger.LogSite r2;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform$1;

        $r1 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        r2 = <com.google.common.flogger.LogSite: com.google.common.flogger.LogSite INVALID>;

        return r2;
    }

    public java.lang.String findLoggingClass(java.lang.Class)
    {
        com.google.common.flogger.backend.android.AndroidPlatform$1 $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.lang.StackTraceElement $r5;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform$1;

        $r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform: boolean '-$$Nest$sfgetUSE_FAST_ANDROID_STACK'()>();

        if $z0 == 0 goto label6;

        $r2 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform: java.lang.Class getStackClass1()>();

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

     label2:
        if $z0 == 0 goto label6;

        $r2 = staticinvoke <dalvik.system.VMStack: java.lang.Class getStackClass2()>();

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        $z0 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform: boolean '-$$Nest$sfgetIS_ROBOLECTRIC'()>();

        if $z0 == 0 goto label7;

        $r5 = staticinvoke <com.google.common.flogger.util.CallerFinder: java.lang.StackTraceElement findCallerOf(java.lang.Class,int)>($r1, 1);

        if $r5 == null goto label7;

        $r3 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        return $r3;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

com.google.common.flogger.backend.android.AndroidPlatform$InternalStackVerifier
    void <init>()
    {
        com.google.common.flogger.backend.android.AndroidPlatform$InternalStackVerifier $r0;

        $r0 := @this: com.google.common.flogger.backend.android.AndroidPlatform$InternalStackVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean isVmStackPresent()
    {
        boolean $z0;

        $z0 = staticinvoke <com.google.common.flogger.backend.android.AndroidPlatform: boolean isVmStackPresent()>();

        return $z0;
    }

