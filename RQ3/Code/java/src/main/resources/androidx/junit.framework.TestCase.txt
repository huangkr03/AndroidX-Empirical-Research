junit.framework.TestCase
<junit.framework.TestCase: java.lang.String fName>
    public void <init>()
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        specialinvoke $r0.<junit.framework.Assert: void <init>()>();

        $r0.<junit.framework.TestCase: java.lang.String fName> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<junit.framework.Assert: void <init>()>();

        $r0.<junit.framework.TestCase: java.lang.String fName> = $r1;

        return;
    }

    public static void assertEquals(byte, byte)
    {
        byte $b0, $b1;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        staticinvoke <junit.framework.Assert: void assertEquals(byte,byte)>($b0, $b1);

        return;
    }

    public static void assertEquals(char, char)
    {
        char $c0, $c1;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        staticinvoke <junit.framework.Assert: void assertEquals(char,char)>($c0, $c1);

        return;
    }

    public static void assertEquals(double, double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        staticinvoke <junit.framework.Assert: void assertEquals(double,double,double)>($d0, $d1, $d2);

        return;
    }

    public static void assertEquals(float, float, float)
    {
        float $f0, $f1, $f2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        staticinvoke <junit.framework.Assert: void assertEquals(float,float,float)>($f0, $f1, $f2);

        return;
    }

    public static void assertEquals(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>($i0, $i1);

        return;
    }

    public static void assertEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <junit.framework.Assert: void assertEquals(long,long)>($l0, $l1);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void assertEquals(java.lang.String, byte, byte)
    {
        java.lang.String $r0;
        byte $b0, $b1;

        $r0 := @parameter0: java.lang.String;

        $b0 := @parameter1: byte;

        $b1 := @parameter2: byte;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,byte,byte)>($r0, $b0, $b1);

        return;
    }

    public static void assertEquals(java.lang.String, char, char)
    {
        java.lang.String $r0;
        char $c0, $c1;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,char,char)>($r0, $c0, $c1);

        return;
    }

    public static void assertEquals(java.lang.String, double, double, double)
    {
        java.lang.String $r0;
        double $d0, $d1, $d2;

        $r0 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,double,double,double)>($r0, $d0, $d1, $d2);

        return;
    }

    public static void assertEquals(java.lang.String, float, float, float)
    {
        java.lang.String $r0;
        float $f0, $f1, $f2;

        $r0 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,float,float,float)>($r0, $f0, $f1, $f2);

        return;
    }

    public static void assertEquals(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>($r0, $i0, $i1);

        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String $r0;
        long $l0, $l1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,long,long)>($r0, $l0, $l1);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>($r0, $r1);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return;
    }

    public static void assertEquals(java.lang.String, short, short)
    {
        java.lang.String $r0;
        short $s0, $s1;

        $r0 := @parameter0: java.lang.String;

        $s0 := @parameter1: short;

        $s1 := @parameter2: short;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,short,short)>($r0, $s0, $s1);

        return;
    }

    public static void assertEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>($r0, $z0, $z1);

        return;
    }

    public static void assertEquals(short, short)
    {
        short $s0, $s1;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        staticinvoke <junit.framework.Assert: void assertEquals(short,short)>($s0, $s1);

        return;
    }

    public static void assertEquals(boolean, boolean)
    {
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        staticinvoke <junit.framework.Assert: void assertEquals(boolean,boolean)>($z0, $z1);

        return;
    }

    public static void assertFalse(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        staticinvoke <junit.framework.Assert: void assertFalse(java.lang.String,boolean)>($r0, $z0);

        return;
    }

    public static void assertFalse(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <junit.framework.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public static void assertNotNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>($r0);

        return;
    }

    public static void assertNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void assertNotSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    public static void assertNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>($r0);

        return;
    }

    public static void assertNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNull(java.lang.String,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void assertSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    public static void assertTrue(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r0, $z0);

        return;
    }

    public static void assertTrue(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public static void fail()
    {
        staticinvoke <junit.framework.Assert: void fail()>();

        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r0);

        return;
    }

    public static void failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <junit.framework.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    public static void failNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <junit.framework.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    public static void failSame(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <junit.framework.Assert: void failSame(java.lang.String)>($r0);

        return;
    }

    public static java.lang.String format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r0 = staticinvoke <junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return $r0;
    }

    private void runTest0(java.lang.reflect.Method) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        junit.framework.TestCase $r0;
        java.lang.reflect.Method $r1;
        java.lang.Object[] $r2;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r2);

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return 1;
    }

    protected junit.framework.TestResult createResult()
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 = new junit.framework.TestResult;

        specialinvoke $r1.<junit.framework.TestResult: void <init>()>();

        return $r1;
    }

    public java.lang.String getName()
    {
        junit.framework.TestCase $r0;
        java.lang.String r1;

        $r0 := @this: junit.framework.TestCase;

        r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        return r1;
    }

    public junit.framework.TestResult run()
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 = virtualinvoke $r0.<junit.framework.TestCase: junit.framework.TestResult createResult()>();

        virtualinvoke $r0.<junit.framework.TestCase: void run(junit.framework.TestResult)>($r1);

        return $r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: junit.framework.TestResult;

        virtualinvoke $r1.<junit.framework.TestResult: void run(junit.framework.TestCase)>($r0);

        return;
    }

    public void runBare() throws java.lang.Throwable
    {
        junit.framework.TestCase $r0;
        java.lang.Throwable $r1, $r2, $r3;

        $r0 := @this: junit.framework.TestCase;

        $r1 = null;

        virtualinvoke $r0.<junit.framework.TestCase: void setUp()>();

     label01:
        virtualinvoke $r0.<junit.framework.TestCase: void runTest()>();

     label02:
        virtualinvoke $r0.<junit.framework.TestCase: void tearDown()>();

     label03:
        if $r1 == null goto label10;

        throw $r1;

     label04:
        $r2 := @caughtexception;

        $r1 = $r2;

        goto label03;

     label05:
        $r1 := @caughtexception;

     label06:
        virtualinvoke $r0.<junit.framework.TestCase: void tearDown()>();

     label07:
        goto label03;

     label08:
        $r3 := @caughtexception;

        if $r1 != null goto label11;

     label09:
        $r1 = $r3;

        goto label03;

     label10:
        return;

     label11:
        $r3 = $r1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    protected void runTest() throws java.lang.Throwable
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1, $r4;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r5, r9;
        java.lang.Throwable $r6, $r7, $r8;
        java.lang.reflect.InvocationTargetException r10;
        java.lang.IllegalAccessException r11;

        $r0 := @this: junit.framework.TestCase;

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.String,java.lang.Object)>("TestCase.fName cannot be null", $r1);

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, null);

     label4:
        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label5;

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 26;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" should be public");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r1);

     label5:
        specialinvoke $r0.<junit.framework.TestCase: void runTest0(java.lang.reflect.Method)>($r3);

     label6:
        return;

     label7:
        $r6 := @caughtexception;

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 19;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r1);

        $r3 = null;

        goto label4;

     label8:
        $r7 := @caughtexception;

        r10 = (java.lang.reflect.InvocationTargetException) $r7;

        virtualinvoke r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable fillInStackTrace()>();

        r10 = (java.lang.reflect.InvocationTargetException) $r7;

        $r6 = virtualinvoke r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r6;

     label9:
        $r8 := @caughtexception;

        r11 = (java.lang.IllegalAccessException) $r8;

        virtualinvoke r11.<java.lang.IllegalAccessException: java.lang.Throwable fillInStackTrace()>();

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label8;
        catch java.lang.IllegalAccessException from label5 to label6 with label9;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: java.lang.String;

        $r0.<junit.framework.TestCase: java.lang.String fName> = $r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return;
    }

    public java.lang.String toString()
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1, $r3, $r4;
        java.lang.Class $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r5;

        $r0 := @this: junit.framework.TestCase;

        $r1 = virtualinvoke $r0.<junit.framework.TestCase: java.lang.String getName()>();

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 2;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

