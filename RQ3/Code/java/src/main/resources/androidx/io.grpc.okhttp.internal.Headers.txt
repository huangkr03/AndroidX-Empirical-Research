io.grpc.okhttp.internal.Headers
<io.grpc.okhttp.internal.Headers: java.lang.String[] namesAndValues>
    private void <init>(io.grpc.okhttp.internal.Headers$Builder)
    {
        io.grpc.okhttp.internal.Headers $r0;
        io.grpc.okhttp.internal.Headers$Builder $r1;
        java.util.List $r2, $r3;
        int $i0;
        java.lang.String[] $r4;
        java.lang.Object[] $r5;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $r1 := @parameter0: io.grpc.okhttp.internal.Headers$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <io.grpc.okhttp.internal.Headers$Builder: java.util.List '-$$Nest$fgetnamesAndValues'(io.grpc.okhttp.internal.Headers$Builder)>($r1);

        $r3 = staticinvoke <io.grpc.okhttp.internal.Headers$Builder: java.util.List '-$$Nest$fgetnamesAndValues'(io.grpc.okhttp.internal.Headers$Builder)>($r1);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (java.lang.String[]) $r5;

        $r0.<io.grpc.okhttp.internal.Headers: java.lang.String[] namesAndValues> = $r4;

        return;
    }

    void <init>(io.grpc.okhttp.internal.Headers$Builder, io.grpc.okhttp.internal.Headers-IA)
    {
        io.grpc.okhttp.internal.Headers $r0;
        io.grpc.okhttp.internal.Headers$Builder $r1;
        io.grpc.okhttp.internal.Headers-IA $r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $r1 := @parameter0: io.grpc.okhttp.internal.Headers$Builder;

        $r2 := @parameter1: io.grpc.okhttp.internal.Headers-IA;

        specialinvoke $r0.<io.grpc.okhttp.internal.Headers: void <init>(io.grpc.okhttp.internal.Headers$Builder)>($r1);

        return;
    }

    public java.lang.String name(int)
    {
        io.grpc.okhttp.internal.Headers $r0;
        java.lang.String[] $r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $i0 := @parameter0: int;

        $i1 = $i0 + $i0;

        if $i1 < 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.Headers: java.lang.String[] namesAndValues>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        goto label2;

     label1:
        $r2 = $r1[$i1];

        return $r2;

     label2:
        return null;
    }

    public int size()
    {
        io.grpc.okhttp.internal.Headers $r0;
        java.lang.String[] $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $r1 = $r0.<io.grpc.okhttp.internal.Headers: java.lang.String[] namesAndValues>;

        $i0 = lengthof $r1;

        $i0 = $i0 >> 1;

        return $i0;
    }

    public java.lang.String toString()
    {
        io.grpc.okhttp.internal.Headers $r0;
        java.lang.StringBuilder $r1, $r3;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke $r0.<io.grpc.okhttp.internal.Headers: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = virtualinvoke $r0.<io.grpc.okhttp.internal.Headers: java.lang.String name(int)>($i1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r0.<io.grpc.okhttp.internal.Headers: java.lang.String value(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String value(int)
    {
        io.grpc.okhttp.internal.Headers $r0;
        java.lang.String[] $r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers;

        $i0 := @parameter0: int;

        $i0 = $i0 + $i0;

        $i1 = $i0 + 1;

        if $i1 < 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.Headers: java.lang.String[] namesAndValues>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        goto label2;

     label1:
        $r2 = $r1[$i1];

        return $r2;

     label2:
        return null;
    }

io.grpc.okhttp.internal.Headers$Builder
<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>
    static volatile java.util.List '-$$Nest$fgetnamesAndValues'(io.grpc.okhttp.internal.Headers$Builder)
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: io.grpc.okhttp.internal.Headers$Builder;

        r1 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        return r1;
    }

    public void <init>()
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.util.ArrayList r1;
        java.util.List r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(20);

        r2 = (java.util.List) r1;

        $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues> = r2;

        return;
    }

    private void checkNameAndValue(java.lang.String, java.lang.String)
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0, $i1;
        char $c2;
        java.lang.IllegalArgumentException $r3;
        java.util.Locale $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label08;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label07;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label03;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $c2 <= 31 goto label02;

        if $c2 >= 127 goto label02;

        $i1 = $i1 + 1;

        goto label01;

     label02:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[1] = $r6;

        $r5[2] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "Unexpected char %#04x at %d in header name: %s", $r5);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label03:
        if $r2 == null goto label06;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label10;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if $c2 <= 31 goto label05;

        if $c2 >= 127 goto label05;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[1] = $r6;

        $r5[2] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "Unexpected char %#04x at %d in header value: %s", $r5);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label06:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("value == null");

        throw $r3;

     label07:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name is empty");

        throw $r3;

     label08:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name == null");

        goto label09;

     label09:
        throw $r3;

     label10:
        return;
    }

    io.grpc.okhttp.internal.Headers$Builder addLenient(java.lang.String, java.lang.String)
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.util.List $r1;
        java.lang.String $r2, $r3;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r1 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r0;
    }

    public io.grpc.okhttp.internal.Headers build()
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        io.grpc.okhttp.internal.Headers $r1;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        $r1 = new io.grpc.okhttp.internal.Headers;

        specialinvoke $r1.<io.grpc.okhttp.internal.Headers: void <init>(io.grpc.okhttp.internal.Headers$Builder,io.grpc.okhttp.internal.Headers-IA)>($r0, null);

        return $r1;
    }

    public io.grpc.okhttp.internal.Headers$Builder removeAll(java.lang.String)
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.lang.String $r1, $r4;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r2 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i0);

        $r2 = $r0.<io.grpc.okhttp.internal.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i0);

        $i0 = $i0 + -2;

     label2:
        $i0 = $i0 + 2;

        goto label1;

     label3:
        return $r0;
    }

    public io.grpc.okhttp.internal.Headers$Builder set(java.lang.String, java.lang.String)
    {
        io.grpc.okhttp.internal.Headers$Builder $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: io.grpc.okhttp.internal.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<io.grpc.okhttp.internal.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke $r0.<io.grpc.okhttp.internal.Headers$Builder: io.grpc.okhttp.internal.Headers$Builder removeAll(java.lang.String)>($r1);

        virtualinvoke $r0.<io.grpc.okhttp.internal.Headers$Builder: io.grpc.okhttp.internal.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2);

        return $r0;
    }

