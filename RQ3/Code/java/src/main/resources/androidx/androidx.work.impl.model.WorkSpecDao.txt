androidx.work.impl.model.WorkSpecDao
<androidx.work.impl.model.WorkSpecDao: void insertWorkSpec(androidx.work.impl.model.WorkSpec)>
<androidx.work.impl.model.WorkSpecDao: void delete(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getWorkSpecIdAndStatesForName(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getAllWorkSpecIds()>
<androidx.work.impl.model.WorkSpecDao: androidx.lifecycle.LiveData getAllWorkSpecIdsLiveData()>
<androidx.work.impl.model.WorkSpecDao: int setState(androidx.work.WorkInfo$State,java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: void incrementPeriodCount(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: void setOutput(java.lang.String,androidx.work.Data)>
<androidx.work.impl.model.WorkSpecDao: void setLastEnqueuedTime(java.lang.String,long)>
<androidx.work.impl.model.WorkSpecDao: int incrementWorkSpecRunAttemptCount(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: int resetWorkSpecRunAttemptCount(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: androidx.work.WorkInfo$State getState(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec$WorkInfoPojo getWorkStatusPojoForId(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getWorkStatusPojoForIds(java.util.List)>
<androidx.work.impl.model.WorkSpecDao: androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForIds(java.util.List)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getWorkStatusPojoForTag(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForTag(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getWorkStatusPojoForName(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForName(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getInputsFromPrerequisites(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getUnfinishedWorkWithTag(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getUnfinishedWorkWithName(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getAllUnfinishedWork()>
<androidx.work.impl.model.WorkSpecDao: boolean hasUnfinishedWork()>
<androidx.work.impl.model.WorkSpecDao: int markWorkSpecScheduled(java.lang.String,long)>
<androidx.work.impl.model.WorkSpecDao: androidx.lifecycle.LiveData getScheduleRequestedAtLiveData(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: int resetScheduledState()>
<androidx.work.impl.model.WorkSpecDao: java.util.List getEligibleWorkForScheduling(int)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getAllEligibleWorkSpecsForScheduling(int)>
<androidx.work.impl.model.WorkSpecDao: java.util.List getScheduledWork()>
<androidx.work.impl.model.WorkSpecDao: java.util.List getRunningWork()>
<androidx.work.impl.model.WorkSpecDao: java.util.List getRecentlyCompletedWork(long)>
<androidx.work.impl.model.WorkSpecDao: void pruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast()>
<androidx.work.impl.model.WorkSpecDao: void incrementGeneration(java.lang.String)>
<androidx.work.impl.model.WorkSpecDao: void updateWorkSpec(androidx.work.impl.model.WorkSpec)>
