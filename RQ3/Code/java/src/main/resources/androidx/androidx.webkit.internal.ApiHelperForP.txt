androidx.webkit.internal.ApiHelperForP
    private void <init>()
    {
        androidx.webkit.internal.ApiHelperForP r0;

        r0 := @this: androidx.webkit.internal.ApiHelperForP;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.webkit.TracingController getTracingControllerInstance()
    {
        android.webkit.TracingController $r0;

        $r0 = staticinvoke <android.webkit.TracingController: android.webkit.TracingController getInstance()>();

        return $r0;
    }

    public static boolean isTracing(android.webkit.TracingController)
    {
        android.webkit.TracingController r0;
        boolean $z0;

        r0 := @parameter0: android.webkit.TracingController;

        $z0 = virtualinvoke r0.<android.webkit.TracingController: boolean isTracing()>();

        return $z0;
    }

    public static void start(android.webkit.TracingController, androidx.webkit.TracingConfig)
    {
        android.webkit.TracingController r0;
        androidx.webkit.TracingConfig r1;
        android.webkit.TracingConfig r2;
        android.webkit.TracingConfig$Builder $r3, $r5, $r7, $r8;
        int[] $r4;
        int $i0, $i1;
        java.util.List $r6;

        r0 := @parameter0: android.webkit.TracingController;

        r1 := @parameter1: androidx.webkit.TracingConfig;

        $r3 = new android.webkit.TracingConfig$Builder;

        specialinvoke $r3.<android.webkit.TracingConfig$Builder: void <init>()>();

        $r4 = newarray (int)[1];

        $i0 = virtualinvoke r1.<androidx.webkit.TracingConfig: int getPredefinedCategories()>();

        $r4[0] = $i0;

        $r5 = virtualinvoke $r3.<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(int[])>($r4);

        $r6 = virtualinvoke r1.<androidx.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>();

        $r7 = virtualinvoke $r5.<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.util.Collection)>($r6);

        $i1 = virtualinvoke r1.<androidx.webkit.TracingConfig: int getTracingMode()>();

        $r8 = virtualinvoke $r7.<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder setTracingMode(int)>($i1);

        r2 = virtualinvoke $r8.<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig build()>();

        virtualinvoke r0.<android.webkit.TracingController: void start(android.webkit.TracingConfig)>(r2);

        return;
    }

    public static boolean stop(android.webkit.TracingController, java.io.OutputStream, java.util.concurrent.Executor)
    {
        android.webkit.TracingController r0;
        java.io.OutputStream r1;
        java.util.concurrent.Executor r2;
        boolean $z0;

        r0 := @parameter0: android.webkit.TracingController;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.util.concurrent.Executor;

        $z0 = virtualinvoke r0.<android.webkit.TracingController: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>(r1, r2);

        return $z0;
    }

    public static java.lang.ClassLoader getWebViewClassLoader()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()>();

        return $r0;
    }

    public static android.os.Looper getWebViewLooper(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.webkit.WebView;

        $r1 = virtualinvoke r0.<android.webkit.WebView: android.os.Looper getWebViewLooper()>();

        return $r1;
    }

    public static void setDataDirectorySuffix(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.webkit.WebView: void setDataDirectorySuffix(java.lang.String)>(r0);

        return;
    }

