androidx.media3.test.utils.HttpDataSourceTestEnv
<androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED_LENGTH_UNKNOWN>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED_LENGTH_UNKNOWN>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_ENABLED>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_FORCED>
<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource REDIRECTS_TO_RANGE_SUPPORTED>
<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>
<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer>
    public void <init>()
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        okhttp3.mockwebserver.MockWebServer $r1, $r2;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

        specialinvoke r0.<org.junit.rules.ExternalResource: void <init>()>();

        $r1 = new okhttp3.mockwebserver.MockWebServer;

        specialinvoke $r1.<okhttp3.mockwebserver.MockWebServer: void <init>()>();

        r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer> = $r1;

        $r2 = new okhttp3.mockwebserver.MockWebServer;

        specialinvoke $r2.<okhttp3.mockwebserver.MockWebServer: void <init>()>();

        r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer> = $r2;

        return;
    }

    public com.google.common.collect.ImmutableList getServedResources()
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        androidx.media3.test.utils.WebServerDispatcher$Resource $r1, $r3, $r5, $r7, $r9, $r11, $r14;
        androidx.media3.test.utils.DataSourceContractTest$TestResource $r2, $r4, $r6, $r8, $r10, $r12, $r15;
        okhttp3.mockwebserver.MockWebServer $r13;
        com.google.common.collect.ImmutableList $r16;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

        $r1 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED>;

        $r2 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("range supported", $r1);

        $r3 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED_LENGTH_UNKNOWN>;

        $r4 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("range supported, length unknown", $r3);

        $r5 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED>;

        $r6 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("range not supported", $r5);

        $r7 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED_LENGTH_UNKNOWN>;

        $r8 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("range not supported, length unknown", $r7);

        $r9 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_ENABLED>;

        $r10 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("gzip enabled", $r9);

        $r11 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_FORCED>;

        $r12 = specialinvoke r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource)>("gzip forced", $r11);

        $r14 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource REDIRECTS_TO_RANGE_SUPPORTED>;

        $r13 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer>;

        $r15 = staticinvoke <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource,okhttp3.mockwebserver.MockWebServer)>("302 redirect", $r14, $r13);

        $r16 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r4, $r6, $r8, $r10, $r12, $r15);

        return $r16;
    }

    public java.lang.String getNonexistentUrl()
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        okhttp3.mockwebserver.MockWebServer $r1;
        okhttp3.HttpUrl $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

        $r1 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        $r2 = virtualinvoke $r1.<okhttp3.mockwebserver.MockWebServer: okhttp3.HttpUrl url(java.lang.String)>("/not/a/real/path");

        $r3 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String toString()>();

        return $r3;
    }

    protected void before() throws java.lang.Throwable
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        okhttp3.mockwebserver.MockWebServer $r1, $r8, $r11, $r13;
        androidx.media3.test.utils.WebServerDispatcher$Resource $r2, $r3, $r4, $r5, $r6, $r7;
        com.google.common.collect.ImmutableList $r9;
        androidx.media3.test.utils.WebServerDispatcher $r10;
        androidx.media3.test.utils.HttpDataSourceTestEnv$1 $r12;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

        $r1 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        virtualinvoke $r1.<okhttp3.mockwebserver.MockWebServer: void start()>();

        $r8 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        $r7 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED>;

        $r6 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED_LENGTH_UNKNOWN>;

        $r5 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED>;

        $r4 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED_LENGTH_UNKNOWN>;

        $r3 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_ENABLED>;

        $r2 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_FORCED>;

        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r6, $r5, $r4, $r3, $r2);

        $r10 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: androidx.media3.test.utils.WebServerDispatcher forResources(java.lang.Iterable)>($r9);

        virtualinvoke $r8.<okhttp3.mockwebserver.MockWebServer: void setDispatcher(okhttp3.mockwebserver.Dispatcher)>($r10);

        $r11 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer>;

        virtualinvoke $r11.<okhttp3.mockwebserver.MockWebServer: void start()>();

        $r13 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer>;

        $r12 = new androidx.media3.test.utils.HttpDataSourceTestEnv$1;

        specialinvoke $r12.<androidx.media3.test.utils.HttpDataSourceTestEnv$1: void <init>(androidx.media3.test.utils.HttpDataSourceTestEnv)>(r0);

        virtualinvoke $r13.<okhttp3.mockwebserver.MockWebServer: void setDispatcher(okhttp3.mockwebserver.Dispatcher)>($r12);

        return;
    }

    protected void after()
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        java.lang.Throwable r1, $r4;
        okhttp3.mockwebserver.MockWebServer $r2, $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

     label1:
        $r2 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        virtualinvoke $r2.<okhttp3.mockwebserver.MockWebServer: void shutdown()>();

        $r3 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer redirectionServer>;

        virtualinvoke $r3.<okhttp3.mockwebserver.MockWebServer: void shutdown()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String, androidx.media3.test.utils.WebServerDispatcher$Resource)
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        java.lang.String r1;
        androidx.media3.test.utils.WebServerDispatcher$Resource r2;
        okhttp3.mockwebserver.MockWebServer $r3;
        androidx.media3.test.utils.DataSourceContractTest$TestResource $r4;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $r3 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        $r4 = staticinvoke <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String,androidx.media3.test.utils.WebServerDispatcher$Resource,okhttp3.mockwebserver.MockWebServer)>(r1, r2, $r3);

        return $r4;
    }

    private static androidx.media3.test.utils.DataSourceContractTest$TestResource createTestResource(java.lang.String, androidx.media3.test.utils.WebServerDispatcher$Resource, okhttp3.mockwebserver.MockWebServer)
    {
        java.lang.String r0, $r5, $r7;
        androidx.media3.test.utils.WebServerDispatcher$Resource r1;
        okhttp3.mockwebserver.MockWebServer r2;
        androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder $r3, $r4, $r9, $r11;
        okhttp3.HttpUrl $r6;
        android.net.Uri $r8;
        byte[] $r10;
        androidx.media3.test.utils.DataSourceContractTest$TestResource $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.test.utils.WebServerDispatcher$Resource;

        r2 := @parameter2: okhttp3.mockwebserver.MockWebServer;

        $r3 = new androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder;

        specialinvoke $r3.<androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder: androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder setName(java.lang.String)>(r0);

        $r5 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String getPath()>();

        $r6 = virtualinvoke r2.<okhttp3.mockwebserver.MockWebServer: okhttp3.HttpUrl url(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String toString()>();

        $r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r7);

        $r9 = virtualinvoke $r4.<androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder: androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder setUri(android.net.Uri)>($r8);

        $r10 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] getData()>();

        $r11 = virtualinvoke $r9.<androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder: androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder setExpectedBytes(byte[])>($r10);

        $r12 = virtualinvoke $r11.<androidx.media3.test.utils.DataSourceContractTest$TestResource$Builder: androidx.media3.test.utils.DataSourceContractTest$TestResource build()>();

        return $r12;
    }

    static androidx.media3.test.utils.WebServerDispatcher$Resource access$000()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource $r0;

        $r0 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource REDIRECTS_TO_RANGE_SUPPORTED>;

        return $r0;
    }

    static androidx.media3.test.utils.WebServerDispatcher$Resource access$100()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource $r0;

        $r0 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED>;

        return $r0;
    }

    static okhttp3.mockwebserver.MockWebServer access$200(androidx.media3.test.utils.HttpDataSourceTestEnv)
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv r0;
        okhttp3.mockwebserver.MockWebServer $r1;

        r0 := @parameter0: androidx.media3.test.utils.HttpDataSourceTestEnv;

        $r1 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer originServer>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r39, $r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte[] $r2, $r8, $r15, $r21, $r28, $r34;
        androidx.media3.test.utils.WebServerDispatcher$Resource $r5, $r12, $r18, $r25, $r31, $r37, $r38, $r41;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = 0;

        $r0 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/supports/range-requests");

        $i0 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i1 = $i0 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i1;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i0);

        $r3 = virtualinvoke $r1.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r2);

        $r4 = virtualinvoke $r3.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder supportsRangeRequests(boolean)>(1);

        $r5 = virtualinvoke $r4.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED> = $r5;

        $r6 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r6.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/supports/range-requests-length-unknown");

        $i2 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i3 = $i2 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i3;

        $r8 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i2);

        $r9 = virtualinvoke $r7.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r8);

        $r10 = virtualinvoke $r9.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder supportsRangeRequests(boolean)>(1);

        $r11 = virtualinvoke $r10.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder resolvesToUnknownLength(boolean)>(1);

        $r12 = virtualinvoke $r11.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED_LENGTH_UNKNOWN> = $r12;

        $r13 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r13.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r14 = virtualinvoke $r13.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/doesnt/support/range-requests");

        $i4 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i5 = $i4 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i5;

        $r15 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i4);

        $r16 = virtualinvoke $r14.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r15);

        $r17 = virtualinvoke $r16.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder supportsRangeRequests(boolean)>(0);

        $r18 = virtualinvoke $r17.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED> = $r18;

        $r19 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r19.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r20 = virtualinvoke $r19.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/doesnt/support/range-requests-length-unknown");

        $i6 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i7 = $i6 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i7;

        $r21 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i6);

        $r22 = virtualinvoke $r20.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r21);

        $r23 = virtualinvoke $r22.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder supportsRangeRequests(boolean)>(0);

        $r24 = virtualinvoke $r23.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder resolvesToUnknownLength(boolean)>(1);

        $r25 = virtualinvoke $r24.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_NOT_SUPPORTED_LENGTH_UNKNOWN> = $r25;

        $r26 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r26.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r27 = virtualinvoke $r26.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/gzip/enabled");

        $i8 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i9 = $i8 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i9;

        $r28 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i8);

        $r29 = virtualinvoke $r27.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r28);

        $r30 = virtualinvoke $r29.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setGzipSupport(int)>(2);

        $r31 = virtualinvoke $r30.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_ENABLED> = $r31;

        $r32 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r32.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>()>();

        $r33 = virtualinvoke $r32.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/gzip/forced");

        $i10 = <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed>;

        $i11 = $i10 + 1;

        <androidx.media3.test.utils.HttpDataSourceTestEnv: int seed> = $i11;

        $r34 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(20, $i10);

        $r35 = virtualinvoke $r33.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])>($r34);

        $r36 = virtualinvoke $r35.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setGzipSupport(int)>(3);

        $r37 = virtualinvoke $r36.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource GZIP_FORCED> = $r37;

        $r38 = <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource RANGE_SUPPORTED>;

        $r39 = virtualinvoke $r38.<androidx.media3.test.utils.WebServerDispatcher$Resource: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder buildUpon()>();

        $r40 = virtualinvoke $r39.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)>("/redirects/to/range/supported");

        $r41 = virtualinvoke $r40.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: androidx.media3.test.utils.WebServerDispatcher$Resource build()>();

        <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource REDIRECTS_TO_RANGE_SUPPORTED> = $r41;

        return;
    }

androidx.media3.test.utils.HttpDataSourceTestEnv$1
<androidx.media3.test.utils.HttpDataSourceTestEnv$1: androidx.media3.test.utils.HttpDataSourceTestEnv this$0>
    void <init>(androidx.media3.test.utils.HttpDataSourceTestEnv)
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv$1 r0;
        androidx.media3.test.utils.HttpDataSourceTestEnv r1;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv$1;

        r1 := @parameter0: androidx.media3.test.utils.HttpDataSourceTestEnv;

        r0.<androidx.media3.test.utils.HttpDataSourceTestEnv$1: androidx.media3.test.utils.HttpDataSourceTestEnv this$0> = r1;

        specialinvoke r0.<okhttp3.mockwebserver.Dispatcher: void <init>()>();

        return;
    }

    public okhttp3.mockwebserver.MockResponse dispatch(okhttp3.mockwebserver.RecordedRequest)
    {
        androidx.media3.test.utils.HttpDataSourceTestEnv$1 r0;
        okhttp3.mockwebserver.RecordedRequest r1;
        java.lang.String $r2, $r4, $r12, $r14;
        androidx.media3.test.utils.WebServerDispatcher$Resource $r3, $r11;
        boolean $z0;
        okhttp3.mockwebserver.MockResponse $r5, $r6, $r7, $r8, $r15;
        androidx.media3.test.utils.HttpDataSourceTestEnv $r9;
        okhttp3.mockwebserver.MockWebServer $r10;
        okhttp3.HttpUrl $r13;

        r0 := @this: androidx.media3.test.utils.HttpDataSourceTestEnv$1;

        r1 := @parameter0: okhttp3.mockwebserver.RecordedRequest;

        $r2 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: java.lang.String getRequestPath(okhttp3.mockwebserver.RecordedRequest)>(r1);

        $r3 = staticinvoke <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource access$000()>();

        $r4 = virtualinvoke $r3.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String getPath()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r7 = new okhttp3.mockwebserver.MockResponse;

        specialinvoke $r7.<okhttp3.mockwebserver.MockResponse: void <init>()>();

        $r8 = virtualinvoke $r7.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(302);

        $r9 = r0.<androidx.media3.test.utils.HttpDataSourceTestEnv$1: androidx.media3.test.utils.HttpDataSourceTestEnv this$0>;

        $r10 = staticinvoke <androidx.media3.test.utils.HttpDataSourceTestEnv: okhttp3.mockwebserver.MockWebServer access$200(androidx.media3.test.utils.HttpDataSourceTestEnv)>($r9);

        $r11 = staticinvoke <androidx.media3.test.utils.HttpDataSourceTestEnv: androidx.media3.test.utils.WebServerDispatcher$Resource access$100()>();

        $r12 = virtualinvoke $r11.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String getPath()>();

        $r13 = virtualinvoke $r10.<okhttp3.mockwebserver.MockWebServer: okhttp3.HttpUrl url(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>();

        $r15 = virtualinvoke $r8.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Location", $r14);

        return $r15;

     label1:
        $r5 = new okhttp3.mockwebserver.MockResponse;

        specialinvoke $r5.<okhttp3.mockwebserver.MockResponse: void <init>()>();

        $r6 = virtualinvoke $r5.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(404);

        return $r6;
    }

