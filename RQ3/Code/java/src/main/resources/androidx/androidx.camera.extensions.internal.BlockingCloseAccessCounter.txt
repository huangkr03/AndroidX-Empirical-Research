androidx.camera.extensions.internal.BlockingCloseAccessCounter
<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount>
<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>
<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Condition mDoneCondition>
<androidx.camera.extensions.internal.BlockingCloseAccessCounter: int COUNTER_DESTROYED_FLAG>
    void <init>()
    {
        androidx.camera.extensions.internal.BlockingCloseAccessCounter r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: androidx.camera.extensions.internal.BlockingCloseAccessCounter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock> = $r2;

        $r3 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Condition mDoneCondition> = $r4;

        return;
    }

    boolean tryIncrement()
    {
        androidx.camera.extensions.internal.BlockingCloseAccessCounter r0;
        boolean z0;
        java.lang.Throwable r1, $r7;
        java.util.concurrent.locks.Lock $r2, $r5, $r6, $r8;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        int $i0;

        r0 := @this: androidx.camera.extensions.internal.BlockingCloseAccessCounter;

        $r2 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 != -1 goto label3;

        z0 = 0;

     label2:
        $r6 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return z0;

     label3:
        $r4 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

     label4:
        $r5 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r1;

     label6:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void decrement()
    {
        androidx.camera.extensions.internal.BlockingCloseAccessCounter r0;
        java.lang.Throwable r1, $r8;
        java.util.concurrent.locks.Lock $r2, $r7, $r9;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0;
        java.lang.IllegalStateException $r4, $r5;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: androidx.camera.extensions.internal.BlockingCloseAccessCounter;

        $r2 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 0: goto label3;
            default: goto label4;
        };

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to decrement. Counter already destroyed");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to decrement. No corresponding counter increment");

        throw $r4;

     label4:
        $r6 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Condition mDoneCondition>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label5:
        $r7 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label6:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r1;

     label7:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
    }

    void destroyAndWaitForZeroAccess()
    {
        androidx.camera.extensions.internal.BlockingCloseAccessCounter r0;
        java.lang.Throwable r1, r2, $r6, $r7;
        java.util.concurrent.locks.Lock $r3, $r4, $r8;
        java.util.concurrent.locks.Condition $r5;
        java.util.concurrent.atomic.AtomicInteger $r9;
        boolean $z0;

        r0 := @this: androidx.camera.extensions.internal.BlockingCloseAccessCounter;

        $r3 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r9 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.atomic.AtomicInteger mAccessCount>;

        $z0 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, -1);

        if $z0 != 0 goto label5;

     label2:
        $r5 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Condition mDoneCondition>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void await()>();

     label3:
        goto label1;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        goto label1;

     label5:
        $r4 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = r0.<androidx.camera.extensions.internal.BlockingCloseAccessCounter: java.util.concurrent.locks.Lock mLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label7:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label5 with label6;
    }

