androidx.camera.viewfinder.CameraViewfinder
<androidx.camera.viewfinder.CameraViewfinder: java.lang.String TAG>
<androidx.camera.viewfinder.CameraViewfinder: int DEFAULT_BACKGROUND_COLOR>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode DEFAULT_IMPL_MODE>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener mDisplayRotationListener>
<androidx.camera.viewfinder.CameraViewfinder: android.os.Looper mRequiredLooper>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>
<androidx.camera.viewfinder.CameraViewfinder: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>
<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.internal.surface.ViewfinderSurfaceProvider mSurfaceProvider>
    public void <init>(android.content.Context)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.content.Context r1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.content.Context r1, $r19;
        android.util.AttributeSet r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.content.res.TypedArray r3;
        java.lang.Throwable r4, $r20;
        android.os.Looper $r7;
        android.view.View$OnLayoutChangeListener $r8;
        android.content.res.Resources$Theme $r10;
        int[] $r11, $r12;
        androidx.camera.viewfinder.ViewfinderTransformation $r13, r21;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType $r14, $r15;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r16, $r17;
        android.graphics.drawable.Drawable $r18;
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener r22;
        androidx.camera.viewfinder.CameraViewfinder$1 r23;
        android.view.View r24;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        r21 = new androidx.camera.viewfinder.ViewfinderTransformation;

        specialinvoke r21.<androidx.camera.viewfinder.ViewfinderTransformation: void <init>()>();

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation> = r21;

        r22 = new androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener;

        specialinvoke r22.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: void <init>(androidx.camera.viewfinder.CameraViewfinder)>(r0);

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener mDisplayRotationListener> = r22;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<androidx.camera.viewfinder.CameraViewfinder: android.os.Looper mRequiredLooper> = $r7;

        $r8 = dynamicinvoke "onLayoutChange" <android.view.View$OnLayoutChangeListener (androidx.camera.viewfinder.CameraViewfinder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.view.View,int,int,int,int,int,int,int,int), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.viewfinder.CameraViewfinder: void lambda$new$0(android.view.View,int,int,int,int,int,int,int,int)>, methodtype: void __METHODTYPE__(android.view.View,int,int,int,int,int,int,int,int));

        r0.<androidx.camera.viewfinder.CameraViewfinder: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener> = $r8;

        r23 = new androidx.camera.viewfinder.CameraViewfinder$1;

        specialinvoke r23.<androidx.camera.viewfinder.CameraViewfinder$1: void <init>(androidx.camera.viewfinder.CameraViewfinder)>(r0);

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.internal.surface.ViewfinderSurfaceProvider mSurfaceProvider> = r23;

        $r10 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $r11 = <androidx.camera.viewfinder.R$styleable: int[] Viewfinder>;

        r3 = virtualinvoke $r10.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r11, i0, i1);

        $r12 = <androidx.camera.viewfinder.R$styleable: int[] Viewfinder>;

        r24 = (android.view.View) r0;

        staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r24, r1, $r12, r2, r3, i0, i1);

     label1:
        $i4 = <androidx.camera.viewfinder.R$styleable: int Viewfinder_scaleType>;

        $r13 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        $r14 = virtualinvoke $r13.<androidx.camera.viewfinder.ViewfinderTransformation: androidx.camera.viewfinder.CameraViewfinder$ScaleType getScaleType()>();

        $i5 = virtualinvoke $r14.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: int getId()>();

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getInteger(int,int)>($i4, $i5);

        $r15 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType fromId(int)>(i2);

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void setScaleType(androidx.camera.viewfinder.CameraViewfinder$ScaleType)>($r15);

        $i6 = <androidx.camera.viewfinder.R$styleable: int Viewfinder_implementationMode>;

        $r16 = <androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode DEFAULT_IMPL_MODE>;

        $i7 = virtualinvoke $r16.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int getId()>();

        i3 = virtualinvoke r3.<android.content.res.TypedArray: int getInteger(int,int)>($i6, $i7);

        $r17 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode fromId(int)>(i3);

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode> = $r17;

     label2:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label5;

     label3:
        $r20 := @caughtexception;

        r4 = $r20;

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r4;

     label5:
        $r18 = virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: android.graphics.drawable.Drawable getBackground()>();

        if $r18 != null goto label6;

        $r19 = virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: android.content.Context getContext()>();

        $i8 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>($r19, 17170444);

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void setBackgroundColor(int)>($i8);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public androidx.camera.viewfinder.CameraViewfinder$ImplementationMode getImplementationMode()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void checkUiThread()>();

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode>;

        return $r1;
    }

    public void setScaleType(androidx.camera.viewfinder.CameraViewfinder$ScaleType)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType r1;
        androidx.camera.viewfinder.ViewfinderTransformation $r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void checkUiThread()>();

        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        virtualinvoke $r2.<androidx.camera.viewfinder.ViewfinderTransformation: void setScaleType(androidx.camera.viewfinder.CameraViewfinder$ScaleType)>(r1);

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void redrawViewfinder()>();

        return;
    }

    public androidx.camera.viewfinder.CameraViewfinder$ScaleType getScaleType()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.ViewfinderTransformation $r1;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType $r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void checkUiThread()>();

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        $r2 = virtualinvoke $r1.<androidx.camera.viewfinder.ViewfinderTransformation: androidx.camera.viewfinder.CameraViewfinder$ScaleType getScaleType()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture requestSurfaceAsync(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1, $r3, $r4, $r6, $r7, $r8;
        com.google.common.util.concurrent.ListenableFuture r2, $r10;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r5, $r9;
        boolean $z1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void checkUiThread()>();

        $r3 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        if $r3 == null goto label1;

        $r7 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $r8 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        $r9 = virtualinvoke $r8.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface getViewfinderSurface()>();

        $r10 = virtualinvoke $r9.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        return $r10;

     label1:
        $r4 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        if $r4 == null goto label2;

        $r6 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        virtualinvoke $r6.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: void markSurfaceSafeToRelease()>();

     label2:
        $r5 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface getViewfinderSurface()>();

        r2 = virtualinvoke $r5.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest> = r1;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: boolean provideSurfaceIfReady()>();

        return r2;
    }

    public android.graphics.Bitmap getBitmap()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.ViewfinderImplementation $r1, $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void checkUiThread()>();

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        $r3 = virtualinvoke $r2.<androidx.camera.viewfinder.ViewfinderImplementation: android.graphics.Bitmap getBitmap()>();

     label2:
        return $r3;
    }

    protected void onAttachedToWindow()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.view.View$OnLayoutChangeListener $r1;
        androidx.camera.viewfinder.ViewfinderImplementation $r2, $r3;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        specialinvoke r0.<android.widget.FrameLayout: void onAttachedToWindow()>();

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>;

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r1);

        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        virtualinvoke $r3.<androidx.camera.viewfinder.ViewfinderImplementation: void onAttachedToWindow()>();

     label1:
        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void startListeningToDisplayChange()>();

        return;
    }

    protected void onDetachedFromWindow()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.view.View$OnLayoutChangeListener $r1;
        androidx.camera.viewfinder.ViewfinderImplementation $r2, $r5;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest $r3, $r4;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        specialinvoke r0.<android.widget.FrameLayout: void onDetachedFromWindow()>();

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>;

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r1);

        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        if $r2 == null goto label1;

        $r5 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        virtualinvoke $r5.<androidx.camera.viewfinder.ViewfinderImplementation: void onDetachedFromWindow()>();

     label1:
        $r3 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        virtualinvoke $r4.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: void markSurfaceSafeToRelease()>();

        r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest> = null;

     label2:
        specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void stopListeningToDisplayChange()>();

        return;
    }

    static boolean shouldUseTextureView(androidx.camera.viewfinder.CameraViewfinder$ImplementationMode)
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode r0;
        boolean z0, $z1;
        androidx.camera.viewfinder.internal.quirk.Quirk $r1, $r8;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        $r1 = staticinvoke <androidx.camera.viewfinder.internal.quirk.DeviceQuirks: androidx.camera.viewfinder.internal.quirk.Quirk get(java.lang.Class)>(class "Landroidx/camera/viewfinder/internal/quirk/SurfaceViewStretchedQuirk;");

        if $r1 != null goto label1;

        $r8 = staticinvoke <androidx.camera.viewfinder.internal.quirk.DeviceQuirks: androidx.camera.viewfinder.internal.quirk.Quirk get(java.lang.Class)>(class "Landroidx/camera/viewfinder/internal/quirk/SurfaceViewNotCroppedByParentQuirk;");

        if $r8 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 24 goto label4;

        if z0 == 0 goto label5;

     label4:
        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("CameraViewFinder", "Implementation mode to set is not supported, forcing to use TextureView, because transform APIs are not supported on these devices.");

        return 1;

     label5:
        $r2 = <androidx.camera.viewfinder.CameraViewfinder$2: int[] $SwitchMap$androidx$camera$viewfinder$CameraViewfinder$ImplementationMode>;

        $i1 = virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int ordinal()>();

        $i2 = $r2[$i1];

        lookupswitch($i2)
        {
            case 1: goto label6;
            case 2: goto label7;
            default: goto label8;
        };

     label6:
        return 1;

     label7:
        return 0;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid implementation mode: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    void redrawViewfinder()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.ViewfinderImplementation $r1, $r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        $r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        virtualinvoke $r2.<androidx.camera.viewfinder.ViewfinderImplementation: void redrawViewfinder()>();

     label1:
        return;
    }

    private boolean provideSurfaceIfReady()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurfaceProvider r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.internal.surface.ViewfinderSurfaceProvider mSurfaceProvider>;

        if r2 == null goto label1;

        if r1 == null goto label1;

        interfaceinvoke r2.<androidx.camera.viewfinder.internal.surface.ViewfinderSurfaceProvider: void onSurfaceRequested(androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r1);

        return 1;

     label1:
        return 0;
    }

    private void checkUiThread()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        java.lang.Throwable r1, r21, r23;
        android.os.Looper $r2, $r3, $r4, $r12, $r15;
        java.lang.StringBuilder $r7, $r10, $r11, $r13, $r14, $r16, $r17, r20;
        java.lang.Thread $r8;
        java.lang.String $r9, $r18;
        java.lang.RuntimeException r22;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: android.os.Looper mRequiredLooper>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<androidx.camera.viewfinder.CameraViewfinder: android.os.Looper mRequiredLooper>;

        if $r3 == $r4 goto label1;

        r21 = new java.lang.Throwable;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A method was called on thread \'");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. All methods must be called on the same thread. (Expected Looper ");

        $r12 = r0.<androidx.camera.viewfinder.CameraViewfinder: android.os.Looper mRequiredLooper>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but called on ");

        $r15 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.Throwable: void <init>(java.lang.String)>($r18);

        r1 = r21;

        r22 = new java.lang.RuntimeException;

        specialinvoke r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        r23 = (java.lang.Throwable) r22;

        throw r23;

     label1:
        return;
    }

    private void startListeningToDisplayChange()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.hardware.display.DisplayManager r1;
        android.os.Handler $r2;
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener $r3;
        android.os.Looper $r4;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 = specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: android.hardware.display.DisplayManager getDisplayManager()>();

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener mDisplayRotationListener>;

        $r2 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        virtualinvoke r1.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r3, $r2);

        return;
    }

    private void stopListeningToDisplayChange()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.hardware.display.DisplayManager r1;
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener $r2;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 = specialinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: android.hardware.display.DisplayManager getDisplayManager()>();

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener mDisplayRotationListener>;

        virtualinvoke r1.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>($r2);

        return;
    }

    private android.hardware.display.DisplayManager getDisplayManager()
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.content.Context r1, $r2;
        java.lang.Object $r3;
        android.hardware.display.DisplayManager $r4;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 = virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: android.content.Context getContext()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r4 = (android.hardware.display.DisplayManager) $r3;

        return $r4;
    }

    private void lambda$new$0(android.view.View, int, int, int, int, int, int, int, int)
    {
        androidx.camera.viewfinder.CameraViewfinder r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        $i9 = i2 - i0;

        $i8 = i6 - i4;

        if $i9 != $i8 goto label1;

        $i11 = i3 - i1;

        $i10 = i7 - i5;

        if $i11 == $i10 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        if z0 == 0 goto label4;

        virtualinvoke r0.<androidx.camera.viewfinder.CameraViewfinder: void redrawViewfinder()>();

     label4:
        return;
    }

    static void <clinit>()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r0;

        $r0 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode PERFORMANCE>;

        <androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode DEFAULT_IMPL_MODE> = $r0;

        return;
    }

androidx.camera.viewfinder.CameraViewfinder$1
<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>
    void <init>(androidx.camera.viewfinder.CameraViewfinder)
    {
        androidx.camera.viewfinder.CameraViewfinder$1 r0;
        androidx.camera.viewfinder.CameraViewfinder r1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$1;

        r1 := @parameter0: androidx.camera.viewfinder.CameraViewfinder;

        r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSurfaceRequested(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.CameraViewfinder$1 r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1;
        android.view.Display r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r3, $r5, $r24;
        androidx.camera.viewfinder.CameraViewfinder $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r18, $r20, $r22, $r23;
        androidx.camera.viewfinder.ViewfinderTransformation $r8, $r14, $r21;
        androidx.camera.viewfinder.ViewfinderImplementation $r11, $r26;
        android.util.Size $r15, $r17;
        int $i0, $i1, $i2;
        androidx.camera.viewfinder.internal.transform.TransformationInfo $r16;
        java.lang.IllegalStateException r27;
        androidx.camera.viewfinder.TextureViewImplementation r28;
        androidx.camera.viewfinder.SurfaceViewImplementation r29;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$1;

        r1 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $z0 = staticinvoke <androidx.camera.viewfinder.internal.utils.Threads: boolean isMainThread()>();

        if $z0 != 0 goto label1;

        r27 = new java.lang.IllegalStateException;

        specialinvoke r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("onSurfaceRequested must be called on the main  thread");

        throw r27;

     label1:
        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("CameraViewFinder", "Surface requested by Viewfinder.");

        $r3 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode getImplementationMode()>();

        if $r3 == null goto label2;

        $r23 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r24 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode getImplementationMode()>();

        $r23.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode> = $r24;

     label2:
        $r6 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r4 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r5 = $r4.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode>;

        $z1 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder: boolean shouldUseTextureView(androidx.camera.viewfinder.CameraViewfinder$ImplementationMode)>($r5);

        if $z1 == 0 goto label3;

        r28 = new androidx.camera.viewfinder.TextureViewImplementation;

        $r26 = r28;

        $r22 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r20 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r21 = $r20.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        specialinvoke r28.<androidx.camera.viewfinder.TextureViewImplementation: void <init>(android.widget.FrameLayout,androidx.camera.viewfinder.ViewfinderTransformation)>($r22, $r21);

        goto label4;

     label3:
        r29 = new androidx.camera.viewfinder.SurfaceViewImplementation;

        $r26 = r29;

        $r9 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r7 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r8 = $r7.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        specialinvoke r29.<androidx.camera.viewfinder.SurfaceViewImplementation: void <init>(android.widget.FrameLayout,androidx.camera.viewfinder.ViewfinderTransformation)>($r9, $r8);

     label4:
        $r6.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation> = $r26;

        $r10 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r11 = $r10.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderImplementation mImplementation>;

        virtualinvoke $r11.<androidx.camera.viewfinder.ViewfinderImplementation: void onSurfaceRequested(androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r1);

        $r12 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        r2 = virtualinvoke $r12.<androidx.camera.viewfinder.CameraViewfinder: android.view.Display getDisplay()>();

        if r2 == null goto label9;

        $r13 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r14 = $r13.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        $r15 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size getResolution()>();

        $i0 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int getLensFacing()>();

        if $i0 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $i1 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int getSensorOrientation()>();

        $r16 = staticinvoke <androidx.camera.viewfinder.internal.utils.TransformUtils: androidx.camera.viewfinder.internal.transform.TransformationInfo createTransformInfo(android.util.Size,android.view.Display,boolean,int)>($r15, r2, $z2, $i1);

        $r17 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size getResolution()>();

        $i2 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int getLensFacing()>();

        if $i2 != 0 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        virtualinvoke $r14.<androidx.camera.viewfinder.ViewfinderTransformation: void setTransformationInfo(androidx.camera.viewfinder.internal.transform.TransformationInfo,android.util.Size,boolean)>($r16, $r17, $z3);

        $r18 = r0.<androidx.camera.viewfinder.CameraViewfinder$1: androidx.camera.viewfinder.CameraViewfinder this$0>;

        virtualinvoke $r18.<androidx.camera.viewfinder.CameraViewfinder: void redrawViewfinder()>();

     label9:
        return;
    }

androidx.camera.viewfinder.CameraViewfinder$2
<androidx.camera.viewfinder.CameraViewfinder$2: int[] $SwitchMap$androidx$camera$viewfinder$CameraViewfinder$ImplementationMode>
    static void <clinit>()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $r0;
        int $i0, $i1, $i2;
        int[] $r1, $r3, $r5;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r2, $r4;
        java.lang.Throwable $r6, $r7, r8, r9;

        $r0 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.viewfinder.CameraViewfinder$2: int[] $SwitchMap$androidx$camera$viewfinder$CameraViewfinder$ImplementationMode> = $r1;

     label1:
        $r3 = <androidx.camera.viewfinder.CameraViewfinder$2: int[] $SwitchMap$androidx$camera$viewfinder$CameraViewfinder$ImplementationMode>;

        $r2 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode COMPATIBLE>;

        $i1 = virtualinvoke $r2.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

     label4:
        $r5 = <androidx.camera.viewfinder.CameraViewfinder$2: int[] $SwitchMap$androidx$camera$viewfinder$CameraViewfinder$ImplementationMode>;

        $r4 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode PERFORMANCE>;

        $i2 = virtualinvoke $r4.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int ordinal()>();

        $r5[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        r9 = $r6;

     label7:
        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener
<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0>
    void <init>(androidx.camera.viewfinder.CameraViewfinder)
    {
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener r0;
        androidx.camera.viewfinder.CameraViewfinder r1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener;

        r1 := @parameter0: androidx.camera.viewfinder.CameraViewfinder;

        r0.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDisplayAdded(int)
    {
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener r0;
        int i0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener;

        i0 := @parameter0: int;

        return;
    }

    public void onDisplayRemoved(int)
    {
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener r0;
        int i0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener;

        i0 := @parameter0: int;

        return;
    }

    public void onDisplayChanged(int)
    {
        androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener r0;
        int i0, $i1, $i2, $i3;
        android.view.Display r1;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r2;
        androidx.camera.viewfinder.CameraViewfinder $r3, $r4, $r5, $r9;
        androidx.camera.viewfinder.ViewfinderTransformation $r6;
        android.util.Size $r7;
        androidx.camera.viewfinder.internal.transform.TransformationInfo $r8;
        boolean $z0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0>;

        r1 = virtualinvoke $r3.<androidx.camera.viewfinder.CameraViewfinder: android.view.Display getDisplay()>();

        if r1 == null goto label3;

        $i1 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i1 != i0 goto label3;

        $r4 = r0.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0>;

        r2 = $r4.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderSurfaceRequest mCurrentSurfaceRequest>;

        if r2 == null goto label3;

        $r5 = r0.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0>;

        $r6 = $r5.<androidx.camera.viewfinder.CameraViewfinder: androidx.camera.viewfinder.ViewfinderTransformation mViewfinderTransformation>;

        $r7 = virtualinvoke r2.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size getResolution()>();

        $i2 = virtualinvoke r2.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int getLensFacing()>();

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i3 = virtualinvoke r2.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int getSensorOrientation()>();

        $r8 = staticinvoke <androidx.camera.viewfinder.internal.utils.TransformUtils: androidx.camera.viewfinder.internal.transform.TransformationInfo createTransformInfo(android.util.Size,android.view.Display,boolean,int)>($r7, r1, $z0, $i3);

        virtualinvoke $r6.<androidx.camera.viewfinder.ViewfinderTransformation: void updateTransformInfo(androidx.camera.viewfinder.internal.transform.TransformationInfo)>($r8);

        $r9 = r0.<androidx.camera.viewfinder.CameraViewfinder$DisplayRotationListener: androidx.camera.viewfinder.CameraViewfinder this$0>;

        virtualinvoke $r9.<androidx.camera.viewfinder.CameraViewfinder: void redrawViewfinder()>();

     label3:
        return;
    }

androidx.camera.viewfinder.CameraViewfinder$ImplementationMode
<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode PERFORMANCE>
<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode COMPATIBLE>
<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int mId>
<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $VALUES>
    public static androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] values()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[]) $r1;

        return $r2;
    }

    public static androidx.camera.viewfinder.CameraViewfinder$ImplementationMode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/viewfinder/CameraViewfinder$ImplementationMode;", r0);

        $r2 = (androidx.camera.viewfinder.CameraViewfinder$ImplementationMode) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int mId> = i1;

        return;
    }

    int getId()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode r0;
        int $i0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        $i0 = r0.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int mId>;

        return $i0;
    }

    static androidx.camera.viewfinder.CameraViewfinder$ImplementationMode fromId(int)
    {
        int i0, i1, $i2, i3;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] r0;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] values()>();

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r1 = r0[i3];

        $i2 = r1.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: int mId>;

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown implementation mode id ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    private static androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $values()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $r0;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r1, $r2;

        $r0 = newarray (androidx.camera.viewfinder.CameraViewfinder$ImplementationMode)[2];

        $r1 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode PERFORMANCE>;

        $r0[0] = $r1;

        $r2 = <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode COMPATIBLE>;

        $r0[1] = $r2;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r0, $r1;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $r2;

        $r0 = new androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        specialinvoke $r0.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: void <init>(java.lang.String,int,int)>("PERFORMANCE", 0, 0);

        <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode PERFORMANCE> = $r0;

        $r1 = new androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        specialinvoke $r1.<androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: void <init>(java.lang.String,int,int)>("COMPATIBLE", 1, 1);

        <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode COMPATIBLE> = $r1;

        $r2 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $values()>();

        <androidx.camera.viewfinder.CameraViewfinder$ImplementationMode: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode[] $VALUES> = $r2;

        return;
    }

androidx.camera.viewfinder.CameraViewfinder$ScaleType
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_START>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_CENTER>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_END>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_START>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_CENTER>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_END>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: int mId>
<androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $VALUES>
    public static androidx.camera.viewfinder.CameraViewfinder$ScaleType[] values()
    {
        androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.viewfinder.CameraViewfinder$ScaleType[]) $r1;

        return $r2;
    }

    public static androidx.camera.viewfinder.CameraViewfinder$ScaleType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/viewfinder/CameraViewfinder$ScaleType;", r0);

        $r2 = (androidx.camera.viewfinder.CameraViewfinder$ScaleType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        androidx.camera.viewfinder.CameraViewfinder$ScaleType r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: int mId> = i1;

        return;
    }

    int getId()
    {
        androidx.camera.viewfinder.CameraViewfinder$ScaleType r0;
        int $i0;

        r0 := @this: androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        $i0 = r0.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: int mId>;

        return $i0;
    }

    static androidx.camera.viewfinder.CameraViewfinder$ScaleType fromId(int)
    {
        int i0, i1, $i2, i3;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType[] r0;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType[] values()>();

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r1 = r0[i3];

        $i2 = r1.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: int mId>;

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown scale type id ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    private static androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $values()
    {
        androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $r0;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = newarray (androidx.camera.viewfinder.CameraViewfinder$ScaleType)[6];

        $r1 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_START>;

        $r0[0] = $r1;

        $r2 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_CENTER>;

        $r0[1] = $r2;

        $r3 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_END>;

        $r0[2] = $r3;

        $r4 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_START>;

        $r0[3] = $r4;

        $r5 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_CENTER>;

        $r0[4] = $r5;

        $r6 = <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_END>;

        $r0[5] = $r6;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.camera.viewfinder.CameraViewfinder$ScaleType $r0, $r1, $r2, $r3, $r4, $r5;
        androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $r6;

        $r0 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r0.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FILL_START", 0, 0);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_START> = $r0;

        $r1 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r1.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FILL_CENTER", 1, 1);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_CENTER> = $r1;

        $r2 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r2.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FILL_END", 2, 2);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FILL_END> = $r2;

        $r3 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r3.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FIT_START", 3, 3);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_START> = $r3;

        $r4 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r4.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FIT_CENTER", 4, 4);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_CENTER> = $r4;

        $r5 = new androidx.camera.viewfinder.CameraViewfinder$ScaleType;

        specialinvoke $r5.<androidx.camera.viewfinder.CameraViewfinder$ScaleType: void <init>(java.lang.String,int,int)>("FIT_END", 5, 5);

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType FIT_END> = $r5;

        $r6 = staticinvoke <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $values()>();

        <androidx.camera.viewfinder.CameraViewfinder$ScaleType: androidx.camera.viewfinder.CameraViewfinder$ScaleType[] $VALUES> = $r6;

        return;
    }

