androidx.test.services.shellexecutor.ShellCommandExecutor
<androidx.test.services.shellexecutor.ShellCommandExecutor: java.lang.String TAG>
<androidx.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>
    static volatile void '-$$Nest$smdebug'(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <androidx.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }

    void <init>(java.util.concurrent.ExecutorService)
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor $r0;
        java.util.concurrent.ExecutorService $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor> = $r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must provide an ExecutorService");

        throw $r2;
    }

    private static transient void debug(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("shell_cmd_exec", 3);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("shell_cmd_exec", $r1);

     label1:
        return;
    }

    public void execute(androidx.test.services.shellexecutor.ShellCommand, java.io.OutputStream) throws java.io.IOException
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor $r0;
        java.io.OutputStream $r1, $r14;
        androidx.test.services.shellexecutor.ShellCommand $r2;
        java.util.ArrayList $r3, r18;
        boolean $z0;
        java.lang.String $r4, $r12;
        java.lang.Object[] $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        java.lang.ProcessBuilder $r9, r19;
        java.util.Map $r10;
        java.util.Set $r11;
        java.lang.Process $r13;
        java.io.InputStream $r15;
        java.util.concurrent.CountDownLatch $r16, r20;
        long $l0;
        byte $b1;
        java.util.concurrent.ExecutorService $r17;
        androidx.test.services.shellexecutor.ShellCommandExecutor$1 r21;
        androidx.test.services.shellexecutor.ShellCommandExecutor$2 r22;
        androidx.test.services.shellexecutor.ShellCommandExecutor$3 r23;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter0: androidx.test.services.shellexecutor.ShellCommand;

        $r1 := @parameter1: java.io.OutputStream;

        r18 = new java.util.ArrayList;

        $r3 = r18;

        specialinvoke r18.<java.util.ArrayList: void <init>()>();

        $z0 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: boolean executeThroughShell()>();

        if $z0 == 0 goto label1;

        $r6 = (java.util.List) $r3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("sh");

        $r6 = (java.util.List) $r3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("-c");

     label1:
        $r4 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.lang.String getCommand()>();

        $r6 = (java.util.List) $r3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5[0] = $r4;

        staticinvoke <androidx.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Command to execute: %s", $r5);

        $r6 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.List getParameters()>();

        if $r6 == null goto label3;

        $r6 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.List getParameters()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r8;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r4;

        staticinvoke <androidx.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Added param: %s", $r5);

        $r6 = (java.util.List) $r3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label2;

     label3:
        r19 = new java.lang.ProcessBuilder;

        $r9 = r19;

        $r6 = (java.util.List) $r3;

        specialinvoke r19.<java.lang.ProcessBuilder: void <init>(java.util.List)>($r6);

        $r10 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        if $r10 == null goto label5;

        $r10 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        if $r11 == null goto label5;

        $r10 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r8;

        $r10 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r8 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r12 = (java.lang.String) $r8;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r5[1] = $r12;

        staticinvoke <androidx.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Set envVar %s:%s", $r5);

        $r10 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.util.Map environment()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r12);

        goto label4;

     label5:
        virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);

        $r13 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r14 = virtualinvoke $r13.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r14.<java.io.OutputStream: void close()>();

        $r15 = virtualinvoke $r13.<java.lang.Process: java.io.InputStream getErrorStream()>();

        virtualinvoke $r15.<java.io.InputStream: void close()>();

        r20 = new java.util.concurrent.CountDownLatch;

        $r16 = r20;

        specialinvoke r20.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $l0 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: long getTimeoutMs()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label6;

        $r17 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>;

        r21 = new androidx.test.services.shellexecutor.ShellCommandExecutor$1;

        specialinvoke r21.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor,androidx.test.services.shellexecutor.ShellCommand,java.util.concurrent.CountDownLatch,java.lang.Process)>($r0, $r2, $r16, $r13);

        interfaceinvoke $r17.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r21);

     label6:
        $r17 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>;

        r22 = new androidx.test.services.shellexecutor.ShellCommandExecutor$2;

        specialinvoke r22.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor,java.lang.Process,java.util.concurrent.CountDownLatch)>($r0, $r13, $r16);

        interfaceinvoke $r17.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r22);

        $r17 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>;

        r23 = new androidx.test.services.shellexecutor.ShellCommandExecutor$3;

        specialinvoke r23.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor,java.lang.Process,java.io.OutputStream)>($r0, $r13, $r1);

        interfaceinvoke $r17.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r23);

        return;
    }

androidx.test.services.shellexecutor.ShellCommandExecutor$1
<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p>
<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone>
<androidx.test.services.shellexecutor.ShellCommandExecutor$1: androidx.test.services.shellexecutor.ShellCommand val$shellCommand>
    void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor, androidx.test.services.shellexecutor.ShellCommand, java.util.concurrent.CountDownLatch, java.lang.Process)
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$1 $r0;
        androidx.test.services.shellexecutor.ShellCommandExecutor $r1;
        androidx.test.services.shellexecutor.ShellCommand $r2;
        java.util.concurrent.CountDownLatch $r3;
        java.lang.Process $r4;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$1;

        $r1 := @parameter0: androidx.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter1: androidx.test.services.shellexecutor.ShellCommand;

        $r3 := @parameter2: java.util.concurrent.CountDownLatch;

        $r4 := @parameter3: java.lang.Process;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: androidx.test.services.shellexecutor.ShellCommand val$shellCommand> = $r2;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone> = $r3;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p> = $r4;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$1 $r0;
        byte $b0;
        java.util.concurrent.TimeUnit $r1;
        androidx.test.services.shellexecutor.ShellCommand $r2;
        long $l1, $l2, $l3, $l4;
        java.util.concurrent.CountDownLatch $r3;
        java.lang.Throwable $r4, $r5, $r8;
        java.lang.Thread $r6;
        java.lang.Process $r7;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$1;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: androidx.test.services.shellexecutor.ShellCommand val$shellCommand>;

     label01:
        $l1 = virtualinvoke $r2.<androidx.test.services.shellexecutor.ShellCommand: long getTimeoutMs()>();

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label02:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l1;

     label03:
        $r3 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone>;

     label04:
        $l4 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: long getCount()>();

     label05:
        $b0 = $l4 cmp 0L;

        if $b0 <= 0 goto label15;

        $b0 = $l3 cmp 0L;

        if $b0 <= 0 goto label15;

        $r3 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label06:
        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l3, $r1);

     label07:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l3 - $l2;

        $l3 = $l1 - $l3;

        goto label12;

     label08:
        $r4 := @caughtexception;

        goto label13;

     label09:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label10:
        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label11:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l3 - $l2;

        $l3 = $l1 - $l3;

     label12:
        goto label03;

     label13:
        staticinvoke <java.lang.System: long nanoTime()>();

     label14:
        throw $r4;

     label15:
        $r3 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone>;

        $l1 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label19;

        $r7 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p>;

        virtualinvoke $r7.<java.lang.Process: void destroy()>();

        return;

     label16:
        $r8 := @caughtexception;

        $r3 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.util.concurrent.CountDownLatch val$processDone>;

        $l1 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label17;

        $r7 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p>;

        virtualinvoke $r7.<java.lang.Process: void destroy()>();

     label17:
        goto label18;

     label18:
        throw $r8;

     label19:
        return;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.InterruptedException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

androidx.test.services.shellexecutor.ShellCommandExecutor$2
<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p>
<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.util.concurrent.CountDownLatch val$processDone>
    void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor, java.lang.Process, java.util.concurrent.CountDownLatch)
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$2 $r0;
        androidx.test.services.shellexecutor.ShellCommandExecutor $r1;
        java.lang.Process $r2;
        java.util.concurrent.CountDownLatch $r3;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$2;

        $r1 := @parameter0: androidx.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter1: java.lang.Process;

        $r3 := @parameter2: java.util.concurrent.CountDownLatch;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p> = $r2;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.util.concurrent.CountDownLatch val$processDone> = $r3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$2 $r0;
        java.lang.Process $r1;
        int $i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.util.concurrent.CountDownLatch $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.Thread $r7;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$2;

     label1:
        $r1 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p>;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.Process: int waitFor()>();

     label3:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        staticinvoke <androidx.test.services.shellexecutor.ShellCommandExecutor: void '-$$Nest$smdebug'(java.lang.String,java.lang.Object[])>("Process ended with return code %d", $r2);

        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.util.concurrent.CountDownLatch val$processDone>;

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label4:
        $r5 := @caughtexception;

        goto label8;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("shell_cmd_exec", "Process interrupted", $r6);

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label6:
        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label7:
        goto label1;

     label8:
        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$2: java.util.concurrent.CountDownLatch val$processDone>;

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label9;

     label9:
        throw $r5;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

androidx.test.services.shellexecutor.ShellCommandExecutor$3
<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.lang.Process val$p>
<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo>
    void <init>(androidx.test.services.shellexecutor.ShellCommandExecutor, java.lang.Process, java.io.OutputStream)
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$3 $r0;
        androidx.test.services.shellexecutor.ShellCommandExecutor $r1;
        java.lang.Process $r2;
        java.io.OutputStream $r3;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$3;

        $r1 := @parameter0: androidx.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter1: java.lang.Process;

        $r3 := @parameter2: java.io.OutputStream;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.lang.Process val$p> = $r2;

        $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo> = $r3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellCommandExecutor$3 $r0;
        java.lang.Process $r1;
        java.io.InputStream $r2;
        byte[] $r3;
        java.io.OutputStream $r4;
        int $i0;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: androidx.test.services.shellexecutor.ShellCommandExecutor$3;

        $r1 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.lang.Process val$p>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Process is null.");

        $r1 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.lang.Process val$p>;

        $r2 = virtualinvoke $r1.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r3 = newarray (byte)[1024];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Process stdout is null.");

        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Process write-stdout-to is null.");

     label01:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

     label02:
        if $i0 != -1 goto label03;

        goto label09;

     label03:
        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo>;

     label04:
        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label05:
        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo>;

     label06:
        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label07:
        goto label01;

     label08:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("shell_cmd_exec", "Writer disconnected, terminating");

     label09:
        $r4 = $r0.<androidx.test.services.shellexecutor.ShellCommandExecutor$3: java.io.OutputStream val$writeStdoutTo>;

     label10:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label11:
        return;

     label12:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("shell_cmd_exec", "Close threw an exception", $r6);

        return;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label10 to label11 with label12;
    }

