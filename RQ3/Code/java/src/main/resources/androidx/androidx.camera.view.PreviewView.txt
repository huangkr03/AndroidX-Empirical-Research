androidx.camera.view.PreviewView
<androidx.camera.view.PreviewView: java.lang.String TAG>
<androidx.camera.view.PreviewView: int DEFAULT_BACKGROUND_COLOR>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode DEFAULT_IMPL_MODE>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>
<androidx.camera.view.PreviewView: boolean mUseDisplayRotation>
<androidx.camera.view.PreviewView: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData>
<androidx.camera.view.PreviewView: java.util.concurrent.atomic.AtomicReference mActiveStreamStateObserver>
<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$OnFrameUpdateListener mOnFrameUpdateListener>
<androidx.camera.view.PreviewView: java.util.concurrent.Executor mOnFrameUpdateListenerExecutor>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewMeteringPointFactory mPreviewViewMeteringPointFactory>
<androidx.camera.view.PreviewView: android.view.ScaleGestureDetector mScaleGestureDetector>
<androidx.camera.view.PreviewView: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal>
<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent>
<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$DisplayRotationListener mDisplayRotationListener>
<androidx.camera.view.PreviewView: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>
<androidx.camera.view.PreviewView: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>
    public void <init>(android.content.Context)
    {
        androidx.camera.view.PreviewView r0;
        android.content.Context r1;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.camera.view.PreviewView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.camera.view.PreviewView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<androidx.camera.view.PreviewView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.camera.view.PreviewView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.camera.view.PreviewView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        androidx.camera.view.PreviewView r0;
        android.content.Context r1, $r26;
        android.util.AttributeSet r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.content.res.TypedArray r3;
        java.lang.Throwable r4, $r27;
        androidx.camera.view.PreviewView$ImplementationMode $r5, $r21, $r22;
        androidx.camera.view.PreviewView$StreamState $r8;
        androidx.camera.view.PreviewTransformation $r11, $r18, r28;
        android.view.View$OnLayoutChangeListener $r13;
        android.content.res.Resources$Theme $r15;
        int[] $r16, $r17;
        androidx.camera.view.PreviewView$ScaleType $r19, $r20;
        android.graphics.drawable.Drawable $r25;
        androidx.lifecycle.MutableLiveData r29;
        java.util.concurrent.atomic.AtomicReference r30;
        androidx.camera.view.PreviewViewMeteringPointFactory r31;
        androidx.camera.view.PreviewView$DisplayRotationListener r32;
        androidx.camera.view.PreviewView$1 r33;
        androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener r34;
        android.view.ScaleGestureDetector r35;
        android.view.View r36;
        android.view.ScaleGestureDetector$OnScaleGestureListener r37;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        $r5 = <androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode DEFAULT_IMPL_MODE>;

        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode> = $r5;

        r28 = new androidx.camera.view.PreviewTransformation;

        specialinvoke r28.<androidx.camera.view.PreviewTransformation: void <init>()>();

        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform> = r28;

        r0.<androidx.camera.view.PreviewView: boolean mUseDisplayRotation> = 1;

        r29 = new androidx.lifecycle.MutableLiveData;

        $r8 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        specialinvoke r29.<androidx.lifecycle.MutableLiveData: void <init>(java.lang.Object)>($r8);

        r0.<androidx.camera.view.PreviewView: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData> = r29;

        r30 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r30.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<androidx.camera.view.PreviewView: java.util.concurrent.atomic.AtomicReference mActiveStreamStateObserver> = r30;

        r31 = new androidx.camera.view.PreviewViewMeteringPointFactory;

        $r11 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        specialinvoke r31.<androidx.camera.view.PreviewViewMeteringPointFactory: void <init>(androidx.camera.view.PreviewTransformation)>($r11);

        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewMeteringPointFactory mPreviewViewMeteringPointFactory> = r31;

        r32 = new androidx.camera.view.PreviewView$DisplayRotationListener;

        specialinvoke r32.<androidx.camera.view.PreviewView$DisplayRotationListener: void <init>(androidx.camera.view.PreviewView)>(r0);

        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$DisplayRotationListener mDisplayRotationListener> = r32;

        $r13 = dynamicinvoke "onLayoutChange" <android.view.View$OnLayoutChangeListener (androidx.camera.view.PreviewView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.view.View,int,int,int,int,int,int,int,int), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewView: void lambda$new$0(android.view.View,int,int,int,int,int,int,int,int)>, methodtype: void __METHODTYPE__(android.view.View,int,int,int,int,int,int,int,int));

        r0.<androidx.camera.view.PreviewView: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener> = $r13;

        r33 = new androidx.camera.view.PreviewView$1;

        specialinvoke r33.<androidx.camera.view.PreviewView$1: void <init>(androidx.camera.view.PreviewView)>(r0);

        r0.<androidx.camera.view.PreviewView: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider> = r33;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r15 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $r16 = <androidx.camera.view.R$styleable: int[] PreviewView>;

        r3 = virtualinvoke $r15.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r16, i0, i1);

        $r17 = <androidx.camera.view.R$styleable: int[] PreviewView>;

        r36 = (android.view.View) r0;

        staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r36, r1, $r17, r2, r3, i0, i1);

     label1:
        $i4 = <androidx.camera.view.R$styleable: int PreviewView_scaleType>;

        $r18 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        $r19 = virtualinvoke $r18.<androidx.camera.view.PreviewTransformation: androidx.camera.view.PreviewView$ScaleType getScaleType()>();

        $i5 = virtualinvoke $r19.<androidx.camera.view.PreviewView$ScaleType: int getId()>();

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getInteger(int,int)>($i4, $i5);

        $r20 = staticinvoke <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType fromId(int)>(i2);

        virtualinvoke r0.<androidx.camera.view.PreviewView: void setScaleType(androidx.camera.view.PreviewView$ScaleType)>($r20);

        $i6 = <androidx.camera.view.R$styleable: int PreviewView_implementationMode>;

        $r21 = <androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode DEFAULT_IMPL_MODE>;

        $i7 = virtualinvoke $r21.<androidx.camera.view.PreviewView$ImplementationMode: int getId()>();

        i3 = virtualinvoke r3.<android.content.res.TypedArray: int getInteger(int,int)>($i6, $i7);

        $r22 = staticinvoke <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode fromId(int)>(i3);

        virtualinvoke r0.<androidx.camera.view.PreviewView: void setImplementationMode(androidx.camera.view.PreviewView$ImplementationMode)>($r22);

     label2:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label5;

     label3:
        $r27 := @caughtexception;

        r4 = $r27;

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r4;

     label5:
        r35 = new android.view.ScaleGestureDetector;

        r34 = new androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener;

        specialinvoke r34.<androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener: void <init>(androidx.camera.view.PreviewView)>(r0);

        r37 = (android.view.ScaleGestureDetector$OnScaleGestureListener) r34;

        specialinvoke r35.<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener)>(r1, r37);

        r0.<androidx.camera.view.PreviewView: android.view.ScaleGestureDetector mScaleGestureDetector> = r35;

        $r25 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.graphics.drawable.Drawable getBackground()>();

        if $r25 != null goto label6;

        $r26 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.content.Context getContext()>();

        $i8 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>($r26, 17170444);

        virtualinvoke r0.<androidx.camera.view.PreviewView: void setBackgroundColor(int)>($i8);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void onAttachedToWindow()
    {
        androidx.camera.view.PreviewView r0;
        android.view.View$OnLayoutChangeListener $r1;
        androidx.camera.view.PreviewViewImplementation $r2, $r3;

        r0 := @this: androidx.camera.view.PreviewView;

        specialinvoke r0.<android.widget.FrameLayout: void onAttachedToWindow()>();

        virtualinvoke r0.<androidx.camera.view.PreviewView: void updateDisplayRotationIfNeeded()>();

        specialinvoke r0.<androidx.camera.view.PreviewView: void startListeningToDisplayChange()>();

        $r1 = r0.<androidx.camera.view.PreviewView: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>;

        virtualinvoke r0.<androidx.camera.view.PreviewView: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r1);

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        virtualinvoke $r3.<androidx.camera.view.PreviewViewImplementation: void onAttachedToWindow()>();

     label1:
        specialinvoke r0.<androidx.camera.view.PreviewView: void attachToControllerIfReady(boolean)>(1);

        return;
    }

    protected void onDetachedFromWindow()
    {
        androidx.camera.view.PreviewView r0;
        android.view.View$OnLayoutChangeListener $r1;
        androidx.camera.view.PreviewViewImplementation $r2, $r5;
        androidx.camera.view.CameraController $r3, $r4;

        r0 := @this: androidx.camera.view.PreviewView;

        specialinvoke r0.<android.widget.FrameLayout: void onDetachedFromWindow()>();

        $r1 = r0.<androidx.camera.view.PreviewView: android.view.View$OnLayoutChangeListener mOnLayoutChangeListener>;

        virtualinvoke r0.<androidx.camera.view.PreviewView: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r1);

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r2 == null goto label1;

        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        virtualinvoke $r5.<androidx.camera.view.PreviewViewImplementation: void onDetachedFromWindow()>();

     label1:
        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        virtualinvoke $r4.<androidx.camera.view.CameraController: void clearPreviewSurface()>();

     label2:
        specialinvoke r0.<androidx.camera.view.PreviewView: void stopListeningToDisplayChange()>();

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        androidx.camera.view.PreviewView r0;
        android.view.MotionEvent r1;
        boolean z0, z1, z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10;
        androidx.camera.view.CameraController $r2;
        int $i0, $i1, $i5;
        long $l2, $l3, $l4, $l6;
        byte $b7;
        android.view.ScaleGestureDetector $r3;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r2 != null goto label01;

        $z5 = specialinvoke r0.<android.widget.FrameLayout: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        return $z5;

     label01:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if $i0 != 1 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        z0 = $z6;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if $i1 != 1 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        z1 = $z7;

        $l2 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        $l3 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

        $l4 = $l2 - $l3;

        $i5 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l6 = (long) $i5;

        $b7 = $l4 cmp $l6;

        if $b7 >= 0 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        z2 = $z8;

        if z0 == 0 goto label08;

        if z1 == 0 goto label08;

        if z2 == 0 goto label08;

        r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent> = r1;

        virtualinvoke r0.<androidx.camera.view.PreviewView: boolean performClick()>();

        return 1;

     label08:
        $r3 = r0.<androidx.camera.view.PreviewView: android.view.ScaleGestureDetector mScaleGestureDetector>;

        $z9 = virtualinvoke $r3.<android.view.ScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z9 != 0 goto label09;

        $z3 = specialinvoke r0.<android.widget.FrameLayout: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z3 == 0 goto label10;

     label09:
        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        return $z10;
    }

    public boolean performClick()
    {
        androidx.camera.view.PreviewView r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        androidx.camera.view.CameraController $r1, $r5;
        android.view.MotionEvent $r2, $r3, $r6, $r7;
        int $i0, $i1;
        androidx.camera.view.PreviewViewMeteringPointFactory $r4;
        boolean $z0;

        r0 := @this: androidx.camera.view.PreviewView;

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r1 == null goto label5;

        $r2 = r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent>;

        if $r2 == null goto label1;

        $r7 = r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent>;

        $f4 = virtualinvoke $r7.<android.view.MotionEvent: float getX()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getWidth()>();

        $f2 = (float) $i0;

        $f4 = $f2 / 2.0F;

     label2:
        f0 = $f4;

        $r3 = r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent>;

        if $r3 == null goto label3;

        $r6 = r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent>;

        $f5 = virtualinvoke $r6.<android.view.MotionEvent: float getY()>();

        goto label4;

     label3:
        $i1 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getHeight()>();

        $f3 = (float) $i1;

        $f5 = $f3 / 2.0F;

     label4:
        f1 = $f5;

        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewMeteringPointFactory mPreviewViewMeteringPointFactory>;

        virtualinvoke $r5.<androidx.camera.view.CameraController: void onTapToFocus(androidx.camera.core.MeteringPointFactory,float,float)>($r4, f0, f1);

     label5:
        r0.<androidx.camera.view.PreviewView: android.view.MotionEvent mTouchUpEvent> = null;

        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean performClick()>();

        return $z0;
    }

    public void setImplementationMode(androidx.camera.view.PreviewView$ImplementationMode)
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewView$ImplementationMode r1, $r2, $r3;
        androidx.camera.view.PreviewView$OnFrameUpdateListener $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: androidx.camera.view.PreviewView$ImplementationMode;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode> = r1;

        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode>;

        $r2 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>;

        if $r3 != $r2 goto label1;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$OnFrameUpdateListener mOnFrameUpdateListener>;

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PERFORMANCE mode doesn\'t support frame update listener");

        throw $r5;

     label1:
        return;
    }

    public androidx.camera.view.PreviewView$ImplementationMode getImplementationMode()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewView$ImplementationMode $r1;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode>;

        return $r1;
    }

    public androidx.camera.core.Preview$SurfaceProvider getSurfaceProvider()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.core.Preview$SurfaceProvider $r1;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        return $r1;
    }

    public void setScaleType(androidx.camera.view.PreviewView$ScaleType)
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewView$ScaleType r1;
        androidx.camera.view.PreviewTransformation $r2;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: androidx.camera.view.PreviewView$ScaleType;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        virtualinvoke $r2.<androidx.camera.view.PreviewTransformation: void setScaleType(androidx.camera.view.PreviewView$ScaleType)>(r1);

        virtualinvoke r0.<androidx.camera.view.PreviewView: void redrawPreview()>();

        specialinvoke r0.<androidx.camera.view.PreviewView: void attachToControllerIfReady(boolean)>(0);

        return;
    }

    public androidx.camera.view.PreviewView$ScaleType getScaleType()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewTransformation $r1;
        androidx.camera.view.PreviewView$ScaleType $r2;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        $r2 = virtualinvoke $r1.<androidx.camera.view.PreviewTransformation: androidx.camera.view.PreviewView$ScaleType getScaleType()>();

        return $r2;
    }

    public androidx.camera.core.MeteringPointFactory getMeteringPointFactory()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewViewMeteringPointFactory $r1;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewMeteringPointFactory mPreviewViewMeteringPointFactory>;

        return $r1;
    }

    public androidx.lifecycle.LiveData getPreviewStreamState()
    {
        androidx.camera.view.PreviewView r0;
        androidx.lifecycle.MutableLiveData $r1;

        r0 := @this: androidx.camera.view.PreviewView;

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData>;

        return $r1;
    }

    public android.graphics.Bitmap getBitmap()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewViewImplementation $r1, $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        $r3 = virtualinvoke $r2.<androidx.camera.view.PreviewViewImplementation: android.graphics.Bitmap getBitmap()>();

     label2:
        return $r3;
    }

    public androidx.camera.core.ViewPort getViewPort()
    {
        androidx.camera.view.PreviewView r0;
        android.view.Display $r1, $r2;
        int $i0;
        androidx.camera.core.ViewPort $r3;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.view.Display getDisplay()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.view.Display getDisplay()>();

        $i0 = virtualinvoke $r2.<android.view.Display: int getRotation()>();

        $r3 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.core.ViewPort getViewPort(int)>($i0);

        return $r3;
    }

    public androidx.camera.core.ViewPort getViewPort(int)
    {
        androidx.camera.view.PreviewView r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        androidx.camera.core.ViewPort$Builder $r1, $r3, $r4;
        android.util.Rational $r2;
        androidx.camera.core.ViewPort $r5;

        r0 := @this: androidx.camera.view.PreviewView;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $i1 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getWidth()>();

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getHeight()>();

        if $i2 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = new androidx.camera.core.ViewPort$Builder;

        $r2 = new android.util.Rational;

        $i3 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getWidth()>();

        $i4 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getHeight()>();

        specialinvoke $r2.<android.util.Rational: void <init>(int,int)>($i3, $i4);

        specialinvoke $r1.<androidx.camera.core.ViewPort$Builder: void <init>(android.util.Rational,int)>($r2, i0);

        $i5 = specialinvoke r0.<androidx.camera.view.PreviewView: int getViewPortScaleType()>();

        $r3 = virtualinvoke $r1.<androidx.camera.core.ViewPort$Builder: androidx.camera.core.ViewPort$Builder setScaleType(int)>($i5);

        $i6 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getLayoutDirection()>();

        $r4 = virtualinvoke $r3.<androidx.camera.core.ViewPort$Builder: androidx.camera.core.ViewPort$Builder setLayoutDirection(int)>($i6);

        $r5 = virtualinvoke $r4.<androidx.camera.core.ViewPort$Builder: androidx.camera.core.ViewPort build()>();

        return $r5;
    }

    private int getViewPortScaleType()
    {
        androidx.camera.view.PreviewView r0;
        int[] $r1;
        androidx.camera.view.PreviewView$ScaleType $r2, $r6;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.view.PreviewView;

        $r1 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r2 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ScaleType getScaleType()>();

        $i0 = virtualinvoke $r2.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label4;
            default: goto label5;
        };

     label1:
        return 2;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 3;

     label5:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected scale type: ");

        $r6 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ScaleType getScaleType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    void redrawPreview()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.PreviewViewImplementation $r1, $r7;
        android.util.Size $r2;
        androidx.camera.view.PreviewViewMeteringPointFactory $r3;
        int $i0, $i1, $i2;
        androidx.camera.view.CameraController $r4, $r5;
        androidx.camera.view.transform.OutputTransform $r6;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r1 == null goto label1;

        $r7 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        virtualinvoke $r7.<androidx.camera.view.PreviewViewImplementation: void redrawPreview()>();

     label1:
        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewMeteringPointFactory mPreviewViewMeteringPointFactory>;

        $r2 = new android.util.Size;

        $i0 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getWidth()>();

        $i1 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getHeight()>();

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i0, $i1);

        $i2 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getLayoutDirection()>();

        virtualinvoke $r3.<androidx.camera.view.PreviewViewMeteringPointFactory: void recalculate(android.util.Size,int)>($r2, $i2);

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r4 == null goto label2;

        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        $r6 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.view.transform.OutputTransform getOutputTransform()>();

        virtualinvoke $r5.<androidx.camera.view.CameraController: void updatePreviewViewTransform(androidx.camera.view.transform.OutputTransform)>($r6);

     label2:
        return;
    }

    static boolean shouldUseTextureView(androidx.camera.core.SurfaceRequest, androidx.camera.view.PreviewView$ImplementationMode)
    {
        androidx.camera.core.SurfaceRequest r0;
        androidx.camera.view.PreviewView$ImplementationMode r1;
        boolean z0, z1, $z2, $z3;
        androidx.camera.core.impl.CameraInternal $r2;
        androidx.camera.core.impl.CameraInfoInternal $r3;
        java.lang.String $r4, $r11;
        androidx.camera.core.impl.Quirk $r5, $r12;
        int $i0, $i1, $i2;
        int[] $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: androidx.camera.core.SurfaceRequest;

        r1 := @parameter1: androidx.camera.view.PreviewView$ImplementationMode;

        $r2 = virtualinvoke r0.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.CameraInternal getCamera()>();

        $r3 = interfaceinvoke $r2.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r4 = interfaceinvoke $r3.<androidx.camera.core.impl.CameraInfoInternal: java.lang.String getImplementationType()>();

        z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("androidx.camera.camera2.legacy");

        $r5 = staticinvoke <androidx.camera.view.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/view/internal/compat/quirk/SurfaceViewStretchedQuirk;");

        if $r5 != null goto label1;

        $r12 = staticinvoke <androidx.camera.view.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/view/internal/compat/quirk/SurfaceViewNotCroppedByParentQuirk;");

        if $r12 == null goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z1 = $z3;

        $z2 = virtualinvoke r0.<androidx.camera.core.SurfaceRequest: boolean isRGBA8888Required()>();

        if $z2 != 0 goto label4;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 24 goto label4;

        if z0 != 0 goto label4;

        if z1 == 0 goto label5;

     label4:
        return 1;

     label5:
        $r6 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ImplementationMode>;

        $i1 = virtualinvoke r1.<androidx.camera.view.PreviewView$ImplementationMode: int ordinal()>();

        $i2 = $r6[$i1];

        lookupswitch($i2)
        {
            case 1: goto label6;
            case 2: goto label7;
            default: goto label8;
        };

     label6:
        return 1;

     label7:
        return 0;

     label8:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid implementation mode: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    void updateDisplayRotationIfNeeded()
    {
        androidx.camera.view.PreviewView r0;
        android.view.Display r1;
        boolean $z0;
        androidx.camera.core.impl.CameraInfoInternal $r2, $r4;
        androidx.camera.view.PreviewTransformation $r3;
        int $i0, $i1, $i2;

        r0 := @this: androidx.camera.view.PreviewView;

        $z0 = r0.<androidx.camera.view.PreviewView: boolean mUseDisplayRotation>;

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.view.Display getDisplay()>();

        if r1 == null goto label1;

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal>;

        $i0 = virtualinvoke r1.<android.view.Display: int getRotation()>();

        $i1 = interfaceinvoke $r4.<androidx.camera.core.impl.CameraInfoInternal: int getSensorRotationDegrees(int)>($i0);

        $i2 = virtualinvoke r1.<android.view.Display: int getRotation()>();

        virtualinvoke $r3.<androidx.camera.view.PreviewTransformation: void overrideWithDisplayRotation(int,int)>($i1, $i2);

     label1:
        return;
    }

    public void setFrameUpdateListener(java.util.concurrent.Executor, androidx.camera.view.PreviewView$OnFrameUpdateListener)
    {
        androidx.camera.view.PreviewView r0;
        java.util.concurrent.Executor r1;
        androidx.camera.view.PreviewView$OnFrameUpdateListener r2;
        androidx.camera.view.PreviewView$ImplementationMode $r3, $r4;
        androidx.camera.view.PreviewViewImplementation $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.view.PreviewView$OnFrameUpdateListener;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode>;

        $r3 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>;

        if $r4 != $r3 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PERFORMANCE mode doesn\'t support frame update listener");

        throw $r7;

     label1:
        r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$OnFrameUpdateListener mOnFrameUpdateListener> = r2;

        r0.<androidx.camera.view.PreviewView: java.util.concurrent.Executor mOnFrameUpdateListenerExecutor> = r1;

        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r5 == null goto label2;

        $r6 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        virtualinvoke $r6.<androidx.camera.view.PreviewViewImplementation: void setFrameUpdateListener(java.util.concurrent.Executor,androidx.camera.view.PreviewView$OnFrameUpdateListener)>(r1, r2);

     label2:
        return;
    }

    public void setController(androidx.camera.view.CameraController)
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.CameraController r1, $r2, $r3, $r4;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r3 == r1 goto label1;

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        virtualinvoke $r4.<androidx.camera.view.CameraController: void clearPreviewSurface()>();

     label1:
        r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController> = r1;

        specialinvoke r0.<androidx.camera.view.PreviewView: void attachToControllerIfReady(boolean)>(0);

        return;
    }

    public androidx.camera.view.CameraController getController()
    {
        androidx.camera.view.PreviewView r0;
        androidx.camera.view.CameraController $r1;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        return $r1;
    }

    public androidx.camera.view.transform.OutputTransform getOutputTransform()
    {
        androidx.camera.view.PreviewView r0;
        android.util.Size $r1, $r7;
        androidx.camera.view.PreviewTransformation $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Matrix $r4, $r8, r10;
        androidx.camera.view.PreviewViewImplementation $r5;
        boolean $z1;
        androidx.camera.view.transform.OutputTransform $r6;
        java.lang.Throwable $r9, r11;
        android.graphics.Rect r12;

        r0 := @this: androidx.camera.view.PreviewView;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r10 = null;

     label1:
        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        $r1 = new android.util.Size;

        $i0 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getWidth()>();

        $i1 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getHeight()>();

        specialinvoke $r1.<android.util.Size: void <init>(int,int)>($i0, $i1);

        $i2 = virtualinvoke r0.<androidx.camera.view.PreviewView: int getLayoutDirection()>();

        r10 = virtualinvoke $r2.<androidx.camera.view.PreviewTransformation: android.graphics.Matrix getSurfaceToPreviewViewMatrix(android.util.Size,int)>($r1, $i2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

     label4:
        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        r12 = virtualinvoke $r3.<androidx.camera.view.PreviewTransformation: android.graphics.Rect getSurfaceCropRect()>();

        if r10 == null goto label5;

        if r12 != null goto label6;

     label5:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("PreviewView", "Transform info is not ready");

        return null;

     label6:
        $r4 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getNormalizedToBuffer(android.graphics.Rect)>(r12);

        virtualinvoke r10.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>($r4);

        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        $z1 = $r5 instanceof androidx.camera.view.TextureViewImplementation;

        if $z1 == 0 goto label7;

        $r8 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.graphics.Matrix getMatrix()>();

        virtualinvoke r10.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r8);

        goto label8;

     label7:
        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("PreviewView", "PreviewView needs to be in COMPATIBLE mode for the transform to work correctly.");

     label8:
        $r6 = new androidx.camera.view.transform.OutputTransform;

        $r7 = new android.util.Size;

        $i3 = virtualinvoke r12.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r12.<android.graphics.Rect: int height()>();

        specialinvoke $r7.<android.util.Size: void <init>(int,int)>($i3, $i4);

        specialinvoke $r6.<androidx.camera.view.transform.OutputTransform: void <init>(android.graphics.Matrix,android.util.Size)>(r10, $r7);

        return $r6;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private void attachToControllerIfReady(boolean)
    {
        androidx.camera.view.PreviewView r0;
        boolean z0, $z1;
        android.view.Display r1;
        androidx.camera.core.ViewPort r2;
        java.lang.Throwable r3, $r7;
        androidx.camera.view.CameraController $r4, $r5;
        androidx.camera.core.Preview$SurfaceProvider $r6;
        java.lang.String $r8;

        r0 := @this: androidx.camera.view.PreviewView;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r1 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.view.Display getDisplay()>();

        r2 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.core.ViewPort getViewPort()>();

        $r4 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r4 == null goto label5;

        if r2 == null goto label5;

        $z1 = virtualinvoke r0.<androidx.camera.view.PreviewView: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label5;

        if r1 == null goto label5;

     label1:
        $r5 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        $r6 = virtualinvoke r0.<androidx.camera.view.PreviewView: androidx.camera.core.Preview$SurfaceProvider getSurfaceProvider()>();

        virtualinvoke $r5.<androidx.camera.view.CameraController: void attachPreviewSurface(androidx.camera.core.Preview$SurfaceProvider,androidx.camera.core.ViewPort,android.view.Display)>($r6, r2, r1);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        if z0 == 0 goto label4;

        $r8 = virtualinvoke r3.<java.lang.IllegalStateException: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("PreviewView", $r8, r3);

        goto label5;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private void startListeningToDisplayChange()
    {
        androidx.camera.view.PreviewView r0;
        android.hardware.display.DisplayManager r1;
        android.os.Handler $r2;
        androidx.camera.view.PreviewView$DisplayRotationListener $r3;
        android.os.Looper $r4;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 = specialinvoke r0.<androidx.camera.view.PreviewView: android.hardware.display.DisplayManager getDisplayManager()>();

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$DisplayRotationListener mDisplayRotationListener>;

        $r2 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        virtualinvoke r1.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r3, $r2);

        return;
    }

    private void stopListeningToDisplayChange()
    {
        androidx.camera.view.PreviewView r0;
        android.hardware.display.DisplayManager r1;
        androidx.camera.view.PreviewView$DisplayRotationListener $r2;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 = specialinvoke r0.<androidx.camera.view.PreviewView: android.hardware.display.DisplayManager getDisplayManager()>();

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$DisplayRotationListener mDisplayRotationListener>;

        virtualinvoke r1.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>($r2);

        return;
    }

    private android.hardware.display.DisplayManager getDisplayManager()
    {
        androidx.camera.view.PreviewView r0;
        android.content.Context r1, $r2;
        java.lang.Object $r3;
        android.hardware.display.DisplayManager $r4;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 = virtualinvoke r0.<androidx.camera.view.PreviewView: android.content.Context getContext()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r4 = (android.hardware.display.DisplayManager) $r3;

        return $r4;
    }

    private void lambda$new$0(android.view.View, int, int, int, int, int, int, int, int)
    {
        androidx.camera.view.PreviewView r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1;

        r0 := @this: androidx.camera.view.PreviewView;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        $i9 = i2 - i0;

        $i8 = i6 - i4;

        if $i9 != $i8 goto label1;

        $i11 = i3 - i1;

        $i10 = i7 - i5;

        if $i11 == $i10 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        if z0 == 0 goto label4;

        virtualinvoke r0.<androidx.camera.view.PreviewView: void redrawPreview()>();

        specialinvoke r0.<androidx.camera.view.PreviewView: void attachToControllerIfReady(boolean)>(1);

     label4:
        return;
    }

    static void <clinit>()
    {
        androidx.camera.view.PreviewView$ImplementationMode $r0;

        $r0 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>;

        <androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode DEFAULT_IMPL_MODE> = $r0;

        return;
    }

androidx.camera.view.PreviewView$1
<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>
    void <init>(androidx.camera.view.PreviewView)
    {
        androidx.camera.view.PreviewView$1 r0;
        androidx.camera.view.PreviewView r1;

        r0 := @this: androidx.camera.view.PreviewView$1;

        r1 := @parameter0: androidx.camera.view.PreviewView;

        r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSurfaceRequested(androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.view.PreviewView$1 r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.CameraInternal r2;
        androidx.camera.view.PreviewStreamStateObserver r3, r51;
        boolean $z0, $z1;
        androidx.camera.view.PreviewView $r4, $r6, $r10, $r12, $r13, $r15, $r18, $r19, $r22, $r25, $r28, $r31, $r33, $r35, $r36, $r37, $r41, $r43, $r44;
        androidx.camera.core.impl.CameraInfoInternal $r5, $r17;
        android.content.Context $r7, $r26, $r45;
        java.util.concurrent.Executor $r8, $r27, $r34, $r39, $r46;
        androidx.camera.core.SurfaceRequest$TransformationInfoListener $r9;
        androidx.camera.view.PreviewView$ImplementationMode $r11;
        androidx.camera.view.PreviewTransformation $r14, $r42;
        androidx.camera.view.PreviewViewImplementation $r20, $r29, $r40, $r48;
        androidx.lifecycle.MutableLiveData $r21;
        java.util.concurrent.atomic.AtomicReference $r23;
        androidx.camera.core.impl.Observable $r24;
        androidx.camera.view.PreviewViewImplementation$OnSurfaceNotInUseListener $r30;
        androidx.camera.view.PreviewView$OnFrameUpdateListener $r32, $r38;
        java.lang.Runnable $r47;
        androidx.camera.view.TextureViewImplementation r49;
        androidx.camera.view.SurfaceViewImplementation r50;

        r0 := @this: androidx.camera.view.PreviewView$1;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        $z0 = staticinvoke <androidx.camera.core.impl.utils.Threads: boolean isMainThread()>();

        if $z0 != 0 goto label1;

        $r44 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r45 = virtualinvoke $r44.<androidx.camera.view.PreviewView: android.content.Context getContext()>();

        $r46 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r45);

        $r47 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.view.PreviewView$1,androidx.camera.core.SurfaceRequest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewView$1: void lambda$onSurfaceRequested$0(androidx.camera.core.SurfaceRequest)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r46.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r47);

        return;

     label1:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("PreviewView", "Surface requested by Preview.");

        r2 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.CameraInternal getCamera()>();

        $r4 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r5 = interfaceinvoke r2.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r4.<androidx.camera.view.PreviewView: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal> = $r5;

        $r6 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r7 = virtualinvoke $r6.<androidx.camera.view.PreviewView: android.content.Context getContext()>();

        $r8 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r7);

        $r9 = dynamicinvoke "onTransformationInfoUpdate" <androidx.camera.core.SurfaceRequest$TransformationInfoListener (androidx.camera.view.PreviewView$1,androidx.camera.core.impl.CameraInternal,androidx.camera.core.SurfaceRequest)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$TransformationInfo), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewView$1: void lambda$onSurfaceRequested$1(androidx.camera.core.impl.CameraInternal,androidx.camera.core.SurfaceRequest,androidx.camera.core.SurfaceRequest$TransformationInfo)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$TransformationInfo));

        virtualinvoke r1.<androidx.camera.core.SurfaceRequest: void setTransformationInfoListener(java.util.concurrent.Executor,androidx.camera.core.SurfaceRequest$TransformationInfoListener)>($r8, $r9);

        $r12 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r10 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r11 = $r10.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$ImplementationMode mImplementationMode>;

        $z1 = staticinvoke <androidx.camera.view.PreviewView: boolean shouldUseTextureView(androidx.camera.core.SurfaceRequest,androidx.camera.view.PreviewView$ImplementationMode)>(r1, $r11);

        if $z1 == 0 goto label2;

        r49 = new androidx.camera.view.TextureViewImplementation;

        $r48 = r49;

        $r43 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r41 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r42 = $r41.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        specialinvoke r49.<androidx.camera.view.TextureViewImplementation: void <init>(android.widget.FrameLayout,androidx.camera.view.PreviewTransformation)>($r43, $r42);

        goto label3;

     label2:
        r50 = new androidx.camera.view.SurfaceViewImplementation;

        $r48 = r50;

        $r15 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r13 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r14 = $r13.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        specialinvoke r50.<androidx.camera.view.SurfaceViewImplementation: void <init>(android.widget.FrameLayout,androidx.camera.view.PreviewTransformation)>($r15, $r14);

     label3:
        $r12.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation> = $r48;

        r51 = new androidx.camera.view.PreviewStreamStateObserver;

        $r17 = interfaceinvoke r2.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r18 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r21 = $r18.<androidx.camera.view.PreviewView: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData>;

        $r19 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r20 = $r19.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        specialinvoke r51.<androidx.camera.view.PreviewStreamStateObserver: void <init>(androidx.camera.core.impl.CameraInfoInternal,androidx.lifecycle.MutableLiveData,androidx.camera.view.PreviewViewImplementation)>($r17, $r21, $r20);

        r3 = r51;

        $r22 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r23 = $r22.<androidx.camera.view.PreviewView: java.util.concurrent.atomic.AtomicReference mActiveStreamStateObserver>;

        virtualinvoke $r23.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3);

        $r24 = interfaceinvoke r2.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.Observable getCameraState()>();

        $r25 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r26 = virtualinvoke $r25.<androidx.camera.view.PreviewView: android.content.Context getContext()>();

        $r27 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r26);

        interfaceinvoke $r24.<androidx.camera.core.impl.Observable: void addObserver(java.util.concurrent.Executor,androidx.camera.core.impl.Observable$Observer)>($r27, r3);

        $r28 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r29 = $r28.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        $r30 = dynamicinvoke "onSurfaceNotInUse" <androidx.camera.view.PreviewViewImplementation$OnSurfaceNotInUseListener (androidx.camera.view.PreviewView$1,androidx.camera.view.PreviewStreamStateObserver,androidx.camera.core.impl.CameraInternal)>(r0, r3, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewView$1: void lambda$onSurfaceRequested$2(androidx.camera.view.PreviewStreamStateObserver,androidx.camera.core.impl.CameraInternal)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r29.<androidx.camera.view.PreviewViewImplementation: void onSurfaceRequested(androidx.camera.core.SurfaceRequest,androidx.camera.view.PreviewViewImplementation$OnSurfaceNotInUseListener)>(r1, $r30);

        $r31 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r32 = $r31.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$OnFrameUpdateListener mOnFrameUpdateListener>;

        if $r32 == null goto label4;

        $r33 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r34 = $r33.<androidx.camera.view.PreviewView: java.util.concurrent.Executor mOnFrameUpdateListenerExecutor>;

        if $r34 == null goto label4;

        $r35 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r40 = $r35.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        $r36 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r39 = $r36.<androidx.camera.view.PreviewView: java.util.concurrent.Executor mOnFrameUpdateListenerExecutor>;

        $r37 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r38 = $r37.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewView$OnFrameUpdateListener mOnFrameUpdateListener>;

        virtualinvoke $r40.<androidx.camera.view.PreviewViewImplementation: void setFrameUpdateListener(java.util.concurrent.Executor,androidx.camera.view.PreviewView$OnFrameUpdateListener)>($r39, $r38);

     label4:
        return;
    }

    private void lambda$onSurfaceRequested$2(androidx.camera.view.PreviewStreamStateObserver, androidx.camera.core.impl.CameraInternal)
    {
        androidx.camera.view.PreviewView$1 r0;
        androidx.camera.view.PreviewStreamStateObserver r1;
        androidx.camera.core.impl.CameraInternal r2;
        androidx.camera.view.PreviewView $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        boolean $z0;
        androidx.camera.core.impl.Observable $r5;
        androidx.camera.view.PreviewView$StreamState $r6;

        r0 := @this: androidx.camera.view.PreviewView$1;

        r1 := @parameter0: androidx.camera.view.PreviewStreamStateObserver;

        r2 := @parameter1: androidx.camera.core.impl.CameraInternal;

        $r3 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r4 = $r3.<androidx.camera.view.PreviewView: java.util.concurrent.atomic.AtomicReference mActiveStreamStateObserver>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, null);

        if $z0 == 0 goto label1;

        $r6 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        virtualinvoke r1.<androidx.camera.view.PreviewStreamStateObserver: void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)>($r6);

     label1:
        virtualinvoke r1.<androidx.camera.view.PreviewStreamStateObserver: void clear()>();

        $r5 = interfaceinvoke r2.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.Observable getCameraState()>();

        interfaceinvoke $r5.<androidx.camera.core.impl.Observable: void removeObserver(androidx.camera.core.impl.Observable$Observer)>(r1);

        return;
    }

    private void lambda$onSurfaceRequested$1(androidx.camera.core.impl.CameraInternal, androidx.camera.core.SurfaceRequest, androidx.camera.core.SurfaceRequest$TransformationInfo)
    {
        androidx.camera.view.PreviewView$1 r0;
        androidx.camera.core.impl.CameraInternal r1;
        androidx.camera.core.SurfaceRequest r2;
        androidx.camera.core.SurfaceRequest$TransformationInfo r3;
        java.lang.Integer r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        androidx.camera.core.impl.CameraInfoInternal $r9;
        int $i0, $i1;
        androidx.camera.view.PreviewView $r10, $r11, $r13, $r14, $r16, $r19, $r20;
        androidx.camera.view.PreviewViewImplementation $r12, $r15;
        boolean $z0, z1, $z2;
        androidx.camera.view.PreviewTransformation $r17;
        android.util.Size $r18;

        r0 := @this: androidx.camera.view.PreviewView$1;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        r2 := @parameter1: androidx.camera.core.SurfaceRequest;

        r3 := @parameter2: androidx.camera.core.SurfaceRequest$TransformationInfo;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preview transformation info updated. ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("PreviewView", $r8);

        $r9 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        r4 = interfaceinvoke $r9.<androidx.camera.core.impl.CameraInfoInternal: java.lang.Integer getLensFacing()>();

        if r4 != null goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("PreviewView", "The lens facing is null, probably an external.");

        z1 = 1;

        goto label4;

     label1:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z2;

     label4:
        $r16 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r17 = $r16.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewTransformation mPreviewTransform>;

        $r18 = virtualinvoke r2.<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()>();

        virtualinvoke $r17.<androidx.camera.view.PreviewTransformation: void setTransformationInfo(androidx.camera.core.SurfaceRequest$TransformationInfo,android.util.Size,boolean)>(r3, $r18, z1);

        $i1 = virtualinvoke r3.<androidx.camera.core.SurfaceRequest$TransformationInfo: int getTargetRotation()>();

        if $i1 == -1 goto label5;

        $r11 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r12 = $r11.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        if $r12 == null goto label6;

        $r14 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r15 = $r14.<androidx.camera.view.PreviewView: androidx.camera.view.PreviewViewImplementation mImplementation>;

        $z0 = $r15 instanceof androidx.camera.view.SurfaceViewImplementation;

        if $z0 == 0 goto label6;

     label5:
        $r10 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r10.<androidx.camera.view.PreviewView: boolean mUseDisplayRotation> = 1;

        goto label7;

     label6:
        $r13 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r13.<androidx.camera.view.PreviewView: boolean mUseDisplayRotation> = 0;

     label7:
        $r19 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        virtualinvoke $r19.<androidx.camera.view.PreviewView: void updateDisplayRotationIfNeeded()>();

        $r20 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        virtualinvoke $r20.<androidx.camera.view.PreviewView: void redrawPreview()>();

        return;
    }

    private void lambda$onSurfaceRequested$0(androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.view.PreviewView$1 r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.view.PreviewView $r2;
        androidx.camera.core.Preview$SurfaceProvider $r3;

        r0 := @this: androidx.camera.view.PreviewView$1;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        $r2 = r0.<androidx.camera.view.PreviewView$1: androidx.camera.view.PreviewView this$0>;

        $r3 = $r2.<androidx.camera.view.PreviewView: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        interfaceinvoke $r3.<androidx.camera.core.Preview$SurfaceProvider: void onSurfaceRequested(androidx.camera.core.SurfaceRequest)>(r1);

        return;
    }

androidx.camera.view.PreviewView$2
<androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>
<androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ImplementationMode>
    static void <clinit>()
    {
        androidx.camera.view.PreviewView$ImplementationMode[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        androidx.camera.view.PreviewView$ImplementationMode $r2, $r4;
        androidx.camera.view.PreviewView$ScaleType[] $r6;
        androidx.camera.view.PreviewView$ScaleType $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Throwable $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r28, r29, r30, r31, r32, r33, r34, r35;

        $r0 = staticinvoke <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ImplementationMode> = $r1;

     label01:
        $r3 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ImplementationMode>;

        $r2 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode COMPATIBLE>;

        $i1 = virtualinvoke $r2.<androidx.camera.view.PreviewView$ImplementationMode: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        r28 = $r25;

     label04:
        $r5 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ImplementationMode>;

        $r4 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>;

        $i2 = virtualinvoke $r4.<androidx.camera.view.PreviewView$ImplementationMode: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        r29 = $r27;

     label07:
        $r6 = staticinvoke <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType[] values()>();

        $i3 = lengthof $r6;

        $r7 = newarray (int)[$i3];

        <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType> = $r7;

     label08:
        $r9 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r8 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_END>;

        $i4 = virtualinvoke $r8.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r9[$i4] = 1;

     label09:
        goto label11;

     label10:
        $r26 := @caughtexception;

        r30 = $r26;

     label11:
        $r11 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r10 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_CENTER>;

        $i5 = virtualinvoke $r10.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r11[$i5] = 2;

     label12:
        goto label14;

     label13:
        $r20 := @caughtexception;

        r31 = $r20;

     label14:
        $r13 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r12 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_START>;

        $i6 = virtualinvoke $r12.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r13[$i6] = 3;

     label15:
        goto label17;

     label16:
        $r23 := @caughtexception;

        r32 = $r23;

     label17:
        $r15 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r14 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_END>;

        $i7 = virtualinvoke $r14.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r15[$i7] = 4;

     label18:
        goto label20;

     label19:
        $r22 := @caughtexception;

        r33 = $r22;

     label20:
        $r17 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r16 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_CENTER>;

        $i8 = virtualinvoke $r16.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r17[$i8] = 5;

     label21:
        goto label23;

     label22:
        $r24 := @caughtexception;

        r34 = $r24;

     label23:
        $r19 = <androidx.camera.view.PreviewView$2: int[] $SwitchMap$androidx$camera$view$PreviewView$ScaleType>;

        $r18 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_START>;

        $i9 = virtualinvoke $r18.<androidx.camera.view.PreviewView$ScaleType: int ordinal()>();

        $r19[$i9] = 6;

     label24:
        goto label26;

     label25:
        $r21 := @caughtexception;

        r35 = $r21;

     label26:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
    }

androidx.camera.view.PreviewView$DisplayRotationListener
<androidx.camera.view.PreviewView$DisplayRotationListener: androidx.camera.view.PreviewView this$0>
    void <init>(androidx.camera.view.PreviewView)
    {
        androidx.camera.view.PreviewView$DisplayRotationListener r0;
        androidx.camera.view.PreviewView r1;

        r0 := @this: androidx.camera.view.PreviewView$DisplayRotationListener;

        r1 := @parameter0: androidx.camera.view.PreviewView;

        r0.<androidx.camera.view.PreviewView$DisplayRotationListener: androidx.camera.view.PreviewView this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDisplayAdded(int)
    {
        androidx.camera.view.PreviewView$DisplayRotationListener r0;
        int i0;

        r0 := @this: androidx.camera.view.PreviewView$DisplayRotationListener;

        i0 := @parameter0: int;

        return;
    }

    public void onDisplayRemoved(int)
    {
        androidx.camera.view.PreviewView$DisplayRotationListener r0;
        int i0;

        r0 := @this: androidx.camera.view.PreviewView$DisplayRotationListener;

        i0 := @parameter0: int;

        return;
    }

    public void onDisplayChanged(int)
    {
        androidx.camera.view.PreviewView$DisplayRotationListener r0;
        int i0, $i1;
        android.view.Display r1;
        androidx.camera.view.PreviewView $r2, $r3, $r4;

        r0 := @this: androidx.camera.view.PreviewView$DisplayRotationListener;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.camera.view.PreviewView$DisplayRotationListener: androidx.camera.view.PreviewView this$0>;

        r1 = virtualinvoke $r2.<androidx.camera.view.PreviewView: android.view.Display getDisplay()>();

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i1 != i0 goto label1;

        $r3 = r0.<androidx.camera.view.PreviewView$DisplayRotationListener: androidx.camera.view.PreviewView this$0>;

        virtualinvoke $r3.<androidx.camera.view.PreviewView: void updateDisplayRotationIfNeeded()>();

        $r4 = r0.<androidx.camera.view.PreviewView$DisplayRotationListener: androidx.camera.view.PreviewView this$0>;

        virtualinvoke $r4.<androidx.camera.view.PreviewView: void redrawPreview()>();

     label1:
        return;
    }

androidx.camera.view.PreviewView$ImplementationMode
<androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>
<androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode COMPATIBLE>
<androidx.camera.view.PreviewView$ImplementationMode: int mId>
<androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode[] $VALUES>
    public static androidx.camera.view.PreviewView$ImplementationMode[] values()
    {
        androidx.camera.view.PreviewView$ImplementationMode[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.view.PreviewView$ImplementationMode[]) $r1;

        return $r2;
    }

    public static androidx.camera.view.PreviewView$ImplementationMode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.view.PreviewView$ImplementationMode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/view/PreviewView$ImplementationMode;", r0);

        $r2 = (androidx.camera.view.PreviewView$ImplementationMode) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        androidx.camera.view.PreviewView$ImplementationMode r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.camera.view.PreviewView$ImplementationMode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.camera.view.PreviewView$ImplementationMode: int mId> = i1;

        return;
    }

    int getId()
    {
        androidx.camera.view.PreviewView$ImplementationMode r0;
        int $i0;

        r0 := @this: androidx.camera.view.PreviewView$ImplementationMode;

        $i0 = r0.<androidx.camera.view.PreviewView$ImplementationMode: int mId>;

        return $i0;
    }

    static androidx.camera.view.PreviewView$ImplementationMode fromId(int)
    {
        int i0, i1, $i2, i3;
        androidx.camera.view.PreviewView$ImplementationMode[] r0;
        androidx.camera.view.PreviewView$ImplementationMode r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode[] values()>();

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r1 = r0[i3];

        $i2 = r1.<androidx.camera.view.PreviewView$ImplementationMode: int mId>;

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown implementation mode id ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    static void <clinit>()
    {
        androidx.camera.view.PreviewView$ImplementationMode $r0, $r1, $r3, $r4;
        androidx.camera.view.PreviewView$ImplementationMode[] $r2;

        $r0 = new androidx.camera.view.PreviewView$ImplementationMode;

        specialinvoke $r0.<androidx.camera.view.PreviewView$ImplementationMode: void <init>(java.lang.String,int,int)>("PERFORMANCE", 0, 0);

        <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE> = $r0;

        $r1 = new androidx.camera.view.PreviewView$ImplementationMode;

        specialinvoke $r1.<androidx.camera.view.PreviewView$ImplementationMode: void <init>(java.lang.String,int,int)>("COMPATIBLE", 1, 1);

        <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode COMPATIBLE> = $r1;

        $r2 = newarray (androidx.camera.view.PreviewView$ImplementationMode)[2];

        $r3 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE>;

        $r2[0] = $r3;

        $r4 = <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode COMPATIBLE>;

        $r2[1] = $r4;

        <androidx.camera.view.PreviewView$ImplementationMode: androidx.camera.view.PreviewView$ImplementationMode[] $VALUES> = $r2;

        return;
    }

androidx.camera.view.PreviewView$OnFrameUpdateListener
<androidx.camera.view.PreviewView$OnFrameUpdateListener: void onFrameUpdate(long)>
androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener
<androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener: androidx.camera.view.PreviewView this$0>
    void <init>(androidx.camera.view.PreviewView)
    {
        androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener r0;
        androidx.camera.view.PreviewView r1;

        r0 := @this: androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener;

        r1 := @parameter0: androidx.camera.view.PreviewView;

        r0.<androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener: androidx.camera.view.PreviewView this$0> = r1;

        specialinvoke r0.<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: void <init>()>();

        return;
    }

    public boolean onScale(android.view.ScaleGestureDetector)
    {
        androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener r0;
        android.view.ScaleGestureDetector r1;
        androidx.camera.view.PreviewView $r2, $r4;
        androidx.camera.view.CameraController $r3, $r5;
        float $f0;

        r0 := @this: androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener;

        r1 := @parameter0: android.view.ScaleGestureDetector;

        $r2 = r0.<androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener: androidx.camera.view.PreviewView this$0>;

        $r3 = $r2.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        if $r3 == null goto label1;

        $r4 = r0.<androidx.camera.view.PreviewView$PinchToZoomOnScaleGestureListener: androidx.camera.view.PreviewView this$0>;

        $r5 = $r4.<androidx.camera.view.PreviewView: androidx.camera.view.CameraController mCameraController>;

        $f0 = virtualinvoke r1.<android.view.ScaleGestureDetector: float getScaleFactor()>();

        virtualinvoke $r5.<androidx.camera.view.CameraController: void onPinchToZoom(float)>($f0);

     label1:
        return 1;
    }

androidx.camera.view.PreviewView$ScaleType
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_START>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_CENTER>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_END>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_START>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_CENTER>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_END>
<androidx.camera.view.PreviewView$ScaleType: int mId>
<androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType[] $VALUES>
    public static androidx.camera.view.PreviewView$ScaleType[] values()
    {
        androidx.camera.view.PreviewView$ScaleType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.view.PreviewView$ScaleType[]) $r1;

        return $r2;
    }

    public static androidx.camera.view.PreviewView$ScaleType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.view.PreviewView$ScaleType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/view/PreviewView$ScaleType;", r0);

        $r2 = (androidx.camera.view.PreviewView$ScaleType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        androidx.camera.view.PreviewView$ScaleType r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.camera.view.PreviewView$ScaleType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.camera.view.PreviewView$ScaleType: int mId> = i1;

        return;
    }

    int getId()
    {
        androidx.camera.view.PreviewView$ScaleType r0;
        int $i0;

        r0 := @this: androidx.camera.view.PreviewView$ScaleType;

        $i0 = r0.<androidx.camera.view.PreviewView$ScaleType: int mId>;

        return $i0;
    }

    static androidx.camera.view.PreviewView$ScaleType fromId(int)
    {
        int i0, i1, $i2, i3;
        androidx.camera.view.PreviewView$ScaleType[] r0;
        androidx.camera.view.PreviewView$ScaleType r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType[] values()>();

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r1 = r0[i3];

        $i2 = r1.<androidx.camera.view.PreviewView$ScaleType: int mId>;

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown scale type id ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    static void <clinit>()
    {
        androidx.camera.view.PreviewView$ScaleType $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        androidx.camera.view.PreviewView$ScaleType[] $r6;

        $r0 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r0.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FILL_START", 0, 0);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_START> = $r0;

        $r1 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r1.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FILL_CENTER", 1, 1);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_CENTER> = $r1;

        $r2 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r2.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FILL_END", 2, 2);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_END> = $r2;

        $r3 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r3.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FIT_START", 3, 3);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_START> = $r3;

        $r4 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r4.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FIT_CENTER", 4, 4);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_CENTER> = $r4;

        $r5 = new androidx.camera.view.PreviewView$ScaleType;

        specialinvoke $r5.<androidx.camera.view.PreviewView$ScaleType: void <init>(java.lang.String,int,int)>("FIT_END", 5, 5);

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_END> = $r5;

        $r6 = newarray (androidx.camera.view.PreviewView$ScaleType)[6];

        $r7 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_START>;

        $r6[0] = $r7;

        $r8 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_CENTER>;

        $r6[1] = $r8;

        $r9 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FILL_END>;

        $r6[2] = $r9;

        $r10 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_START>;

        $r6[3] = $r10;

        $r11 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_CENTER>;

        $r6[4] = $r11;

        $r12 = <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType FIT_END>;

        $r6[5] = $r12;

        <androidx.camera.view.PreviewView$ScaleType: androidx.camera.view.PreviewView$ScaleType[] $VALUES> = $r6;

        return;
    }

androidx.camera.view.PreviewView$StreamState
<androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>
<androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState STREAMING>
<androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState[] $VALUES>
    public static androidx.camera.view.PreviewView$StreamState[] values()
    {
        androidx.camera.view.PreviewView$StreamState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.view.PreviewView$StreamState[]) $r1;

        return $r2;
    }

    public static androidx.camera.view.PreviewView$StreamState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.view.PreviewView$StreamState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/view/PreviewView$StreamState;", r0);

        $r2 = (androidx.camera.view.PreviewView$StreamState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.view.PreviewView$StreamState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.view.PreviewView$StreamState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.view.PreviewView$StreamState $r0, $r1, $r3, $r4;
        androidx.camera.view.PreviewView$StreamState[] $r2;

        $r0 = new androidx.camera.view.PreviewView$StreamState;

        specialinvoke $r0.<androidx.camera.view.PreviewView$StreamState: void <init>(java.lang.String,int)>("IDLE", 0);

        <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE> = $r0;

        $r1 = new androidx.camera.view.PreviewView$StreamState;

        specialinvoke $r1.<androidx.camera.view.PreviewView$StreamState: void <init>(java.lang.String,int)>("STREAMING", 1);

        <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState STREAMING> = $r1;

        $r2 = newarray (androidx.camera.view.PreviewView$StreamState)[2];

        $r3 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        $r2[0] = $r3;

        $r4 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState STREAMING>;

        $r2[1] = $r4;

        <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState[] $VALUES> = $r2;

        return;
    }

