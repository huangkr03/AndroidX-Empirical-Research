androidx.work.impl.utils.SerialExecutorImpl
<androidx.work.impl.utils.SerialExecutorImpl: java.util.ArrayDeque mTasks>
<androidx.work.impl.utils.SerialExecutorImpl: java.util.concurrent.Executor mExecutor>
<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Runnable mActive>
<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock>
    public void <init>(java.util.concurrent.Executor)
    {
        androidx.work.impl.utils.SerialExecutorImpl r0;
        java.util.concurrent.Executor r1;
        java.util.ArrayDeque $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.concurrent.Executor mExecutor> = r1;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.ArrayDeque mTasks> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock> = $r3;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        androidx.work.impl.utils.SerialExecutorImpl r0;
        java.lang.Runnable r1, $r7;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        androidx.work.impl.utils.SerialExecutorImpl$Task $r5;
        java.util.ArrayDeque $r6;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl;

        r1 := @parameter0: java.lang.Runnable;

        $r4 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.ArrayDeque mTasks>;

        $r5 = new androidx.work.impl.utils.SerialExecutorImpl$Task;

        specialinvoke $r5.<androidx.work.impl.utils.SerialExecutorImpl$Task: void <init>(androidx.work.impl.utils.SerialExecutorImpl,java.lang.Runnable)>(r0, r1);

        virtualinvoke $r6.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r5);

        $r7 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Runnable mActive>;

        if $r7 != null goto label2;

        virtualinvoke r0.<androidx.work.impl.utils.SerialExecutorImpl: void scheduleNext()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void scheduleNext()
    {
        androidx.work.impl.utils.SerialExecutorImpl r0;
        java.util.ArrayDeque $r1;
        java.lang.Object $r2;
        java.lang.Runnable $r3, $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl;

        $r1 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.ArrayDeque mTasks>;

        $r2 = virtualinvoke $r1.<java.util.ArrayDeque: java.lang.Object poll()>();

        $r3 = (java.lang.Runnable) $r2;

        r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Runnable mActive> = $r3;

        if $r3 == null goto label1;

        $r5 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.concurrent.Executor mExecutor>;

        $r4 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Runnable mActive>;

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label1:
        return;
    }

    public boolean hasPendingTasks()
    {
        androidx.work.impl.utils.SerialExecutorImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.ArrayDeque $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl;

        $r3 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.ArrayDeque mTasks>;

        $z0 = virtualinvoke $r4.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.concurrent.Executor getDelegatedExecutor()
    {
        androidx.work.impl.utils.SerialExecutorImpl r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl;

        $r1 = r0.<androidx.work.impl.utils.SerialExecutorImpl: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

androidx.work.impl.utils.SerialExecutorImpl$Task
<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor>
<androidx.work.impl.utils.SerialExecutorImpl$Task: java.lang.Runnable mRunnable>
    void <init>(androidx.work.impl.utils.SerialExecutorImpl, java.lang.Runnable)
    {
        androidx.work.impl.utils.SerialExecutorImpl$Task r0;
        androidx.work.impl.utils.SerialExecutorImpl r1;
        java.lang.Runnable r2;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl$Task;

        r1 := @parameter0: androidx.work.impl.utils.SerialExecutorImpl;

        r2 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor> = r1;

        r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: java.lang.Runnable mRunnable> = r2;

        return;
    }

    public void run()
    {
        androidx.work.impl.utils.SerialExecutorImpl$Task r0;
        java.lang.Object r1, r4, $r8, $r13;
        java.lang.Throwable r2, r3, r5, $r10, $r11, $r15;
        java.lang.Runnable $r6;
        androidx.work.impl.utils.SerialExecutorImpl $r7, $r9, $r12, $r14;

        r0 := @this: androidx.work.impl.utils.SerialExecutorImpl$Task;

     label01:
        $r6 = r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: java.lang.Runnable mRunnable>;

        interfaceinvoke $r6.<java.lang.Runnable: void run()>();

     label02:
        $r7 = r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor>;

        $r8 = $r7.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock>;

        r1 = $r8;

        entermonitor $r8;

     label03:
        $r9 = r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor>;

        virtualinvoke $r9.<androidx.work.impl.utils.SerialExecutorImpl: void scheduleNext()>();

        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        goto label14;

     label08:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor>;

        $r13 = $r12.<androidx.work.impl.utils.SerialExecutorImpl: java.lang.Object mLock>;

        r4 = $r13;

        entermonitor $r13;

     label09:
        $r14 = r0.<androidx.work.impl.utils.SerialExecutorImpl$Task: androidx.work.impl.utils.SerialExecutorImpl mSerialExecutor>;

        virtualinvoke $r14.<androidx.work.impl.utils.SerialExecutorImpl: void scheduleNext()>();

        exitmonitor r4;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r4;

     label12:
        throw r5;

     label13:
        throw r3;

     label14:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

