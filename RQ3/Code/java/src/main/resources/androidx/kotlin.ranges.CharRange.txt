kotlin.ranges.CharRange
<kotlin.ranges.CharRange: kotlin.ranges.CharRange$Companion Companion>
<kotlin.ranges.CharRange: kotlin.ranges.CharRange EMPTY>
    static void <clinit>()
    {
        kotlin.ranges.CharRange$Companion $r0;
        kotlin.ranges.CharRange $r1;

        $r0 = new kotlin.ranges.CharRange$Companion;

        specialinvoke $r0.<kotlin.ranges.CharRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.ranges.CharRange: kotlin.ranges.CharRange$Companion Companion> = $r0;

        $r1 = new kotlin.ranges.CharRange;

        specialinvoke $r1.<kotlin.ranges.CharRange: void <init>(char,char)>(1, 0);

        <kotlin.ranges.CharRange: kotlin.ranges.CharRange EMPTY> = $r1;

        return;
    }

    public void <init>(char, char)
    {
        kotlin.ranges.CharRange $r0;
        char $c0, $c1;

        $r0 := @this: kotlin.ranges.CharRange;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        specialinvoke $r0.<kotlin.ranges.CharProgression: void <init>(char,char,int)>($c0, $c1, 1);

        return;
    }

    public static final kotlin.ranges.CharRange access$getEMPTY$cp()
    {
        kotlin.ranges.CharRange r0;

        r0 = <kotlin.ranges.CharRange: kotlin.ranges.CharRange EMPTY>;

        return r0;
    }

    public boolean contains(char)
    {
        kotlin.ranges.CharRange $r0;
        char $c0, $c1;
        int $i2;

        $r0 := @this: kotlin.ranges.CharRange;

        $c0 := @parameter0: char;

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c1, $c0);

        if $i2 > 0 goto label1;

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c0, $c1);

        if $i2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        kotlin.ranges.CharRange $r0;
        java.lang.Comparable $r1;
        java.lang.Character $r2;
        char $c0;
        boolean $z0;

        $r0 := @this: kotlin.ranges.CharRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Character) $r1;

        $c0 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharRange: boolean contains(char)>($c0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.ranges.CharRange $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        char $c0, $c1;

        $r0 := @this: kotlin.ranges.CharRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.CharRange;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.CharRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.CharRange: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $r2 = (kotlin.ranges.CharRange) $r1;

        $c1 = virtualinvoke $r2.<kotlin.ranges.CharRange: char getFirst()>();

        if $c0 != $c1 goto label3;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $r0 = (kotlin.ranges.CharRange) $r1;

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        if $c0 != $c1 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public java.lang.Character getEndInclusive()
    {
        kotlin.ranges.CharRange $r0;
        char $c0;
        java.lang.Character $r1;

        $r0 := @this: kotlin.ranges.CharRange;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r1;
    }

    public volatile java.lang.Comparable getEndInclusive()
    {
        kotlin.ranges.CharRange $r0;
        java.lang.Character $r1;
        java.lang.Comparable r2;

        $r0 := @this: kotlin.ranges.CharRange;

        $r1 = virtualinvoke $r0.<kotlin.ranges.CharRange: java.lang.Character getEndInclusive()>();

        r2 = (java.lang.Comparable) $r1;

        return r2;
    }

    public java.lang.Character getStart()
    {
        kotlin.ranges.CharRange $r0;
        char $c0;
        java.lang.Character $r1;

        $r0 := @this: kotlin.ranges.CharRange;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        kotlin.ranges.CharRange $r0;
        java.lang.Character $r1;
        java.lang.Comparable r2;

        $r0 := @this: kotlin.ranges.CharRange;

        $r1 = virtualinvoke $r0.<kotlin.ranges.CharRange: java.lang.Character getStart()>();

        r2 = (java.lang.Comparable) $r1;

        return r2;
    }

    public int hashCode()
    {
        kotlin.ranges.CharRange $r0;
        boolean $z0;
        char $c0;
        int $i1;

        $r0 := @this: kotlin.ranges.CharRange;

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $i1 = $c0 * 31;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $i1 = $i1 + $c0;

        return $i1;
    }

    public boolean isEmpty()
    {
        kotlin.ranges.CharRange $r0;
        char $c0, $c1;
        int $i2;

        $r0 := @this: kotlin.ranges.CharRange;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c0, $c1);

        if $i2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        kotlin.ranges.CharRange $r0;
        java.lang.StringBuilder $r1;
        char $c0;
        java.lang.String $r2;

        $r0 := @this: kotlin.ranges.CharRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

kotlin.ranges.CharRange$Companion
    private void <init>()
    {
        kotlin.ranges.CharRange$Companion $r0;

        $r0 := @this: kotlin.ranges.CharRange$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.ranges.CharRange$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.ranges.CharRange$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.ranges.CharRange$Companion: void <init>()>();

        return;
    }

    public final kotlin.ranges.CharRange getEMPTY()
    {
        kotlin.ranges.CharRange$Companion $r0;
        kotlin.ranges.CharRange $r1;

        $r0 := @this: kotlin.ranges.CharRange$Companion;

        $r1 = staticinvoke <kotlin.ranges.CharRange: kotlin.ranges.CharRange access$getEMPTY$cp()>();

        return $r1;
    }

