io.grpc.okhttp.OkHttpChannelProvider
    public void <init>()
    {
        io.grpc.okhttp.OkHttpChannelProvider $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelProvider;

        specialinvoke $r0.<io.grpc.ManagedChannelProvider: void <init>()>();

        return;
    }

    public volatile io.grpc.ManagedChannelBuilder builderForTarget(java.lang.String)
    {
        io.grpc.okhttp.OkHttpChannelProvider $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelProvider;

        $r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelProvider: io.grpc.okhttp.OkHttpChannelBuilder builderForTarget(java.lang.String)>($r2);

        return $r1;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder builderForTarget(java.lang.String)
    {
        io.grpc.okhttp.OkHttpChannelProvider $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelProvider;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder forTarget(java.lang.String)>($r2);

        return $r1;
    }

    public boolean isAvailable()
    {
        io.grpc.okhttp.OkHttpChannelProvider $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelProvider;

        return 1;
    }

