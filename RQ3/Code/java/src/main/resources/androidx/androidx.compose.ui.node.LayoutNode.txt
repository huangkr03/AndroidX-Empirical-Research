androidx.compose.ui.node.LayoutNode
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$Companion Companion>
<androidx.compose.ui.node.LayoutNode: boolean isVirtual>
<androidx.compose.ui.node.LayoutNode: int semanticsId>
<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>
<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _unfoldedChildren>
<androidx.compose.ui.node.LayoutNode: boolean unfoldedVirtualChildrenListDirty>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>
<androidx.compose.ui.node.LayoutNode: int depth>
<androidx.compose.ui.node.LayoutNode: boolean ignoreRemeasureRequests>
<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren>
<androidx.compose.ui.node.LayoutNode: boolean zSortedChildrenInvalidated>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy measurePolicy>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy intrinsicsPolicy>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density density>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection layoutDirection>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration viewConfiguration>
<androidx.compose.ui.node.LayoutNode: boolean isPlaced>
<androidx.compose.ui.node.LayoutNode: int placeOrder>
<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder>
<androidx.compose.ui.node.LayoutNode: int nextChildPlaceOrder>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParentInLookahead>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent previousIntrinsicsUsageByParent>
<androidx.compose.ui.node.LayoutNode: boolean canMultiMeasure>
<androidx.compose.ui.node.LayoutNode: boolean isLookaheadRoot>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>
<androidx.compose.ui.node.LayoutNode: float zIndex>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LayoutNodeSubcompositionsState subcompositionsState>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator _innerLayerCoordinator>
<androidx.compose.ui.node.LayoutNode: boolean innerLayerCoordinatorIsDirty>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier modifier>
<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onAttach>
<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onDetach>
<androidx.compose.ui.node.LayoutNode: boolean needsOnPositionedDispatch>
<androidx.compose.ui.node.LayoutNode: boolean relayoutWithoutParentInProgress>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy ErrorMeasurePolicy>
<androidx.compose.ui.node.LayoutNode: int NotPlacedPlaceOrder>
<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function0 Constructor>
<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration DummyViewConfiguration>
<androidx.compose.ui.node.LayoutNode: java.util.Comparator ZComparator>
    public void <init>(boolean, int)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0;
        int i0;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r1;
        androidx.compose.runtime.collection.MutableVector $r2, $r6;
        androidx.compose.ui.node.LayoutNode[] $r3, $r7;
        androidx.compose.ui.node.LayoutNode$_foldedChildren$1 $r4;
        kotlin.jvm.functions.Function0 $r5;
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy $r8;
        androidx.compose.ui.layout.MeasurePolicy $r9;
        androidx.compose.ui.node.IntrinsicsPolicy $r10;
        androidx.compose.ui.unit.Density $r11;
        androidx.compose.ui.unit.LayoutDirection $r12;
        androidx.compose.ui.platform.ViewConfiguration $r13;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r14, $r15, $r16, $r17;
        androidx.compose.ui.node.NodeChain $r18;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r19;
        androidx.compose.ui.Modifier$Companion $r20;
        androidx.compose.ui.Modifier $r21;
        byte b1, b2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual> = z0;

        r0.<androidx.compose.ui.node.LayoutNode: int semanticsId> = i0;

        $r1 = new androidx.compose.ui.node.MutableVectorWithMutationTracking;

        b1 = 16;

        $r2 = new androidx.compose.runtime.collection.MutableVector;

        $r3 = newarray (androidx.compose.ui.node.LayoutNode)[b1];

        specialinvoke $r2.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r3, 0);

        $r4 = new androidx.compose.ui.node.LayoutNode$_foldedChildren$1;

        specialinvoke $r4.<androidx.compose.ui.node.LayoutNode$_foldedChildren$1: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        specialinvoke $r1.<androidx.compose.ui.node.MutableVectorWithMutationTracking: void <init>(androidx.compose.runtime.collection.MutableVector,kotlin.jvm.functions.Function0)>($r2, $r5);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren> = $r1;

        b2 = 16;

        $r6 = new androidx.compose.runtime.collection.MutableVector;

        $r7 = newarray (androidx.compose.ui.node.LayoutNode)[b2];

        specialinvoke $r6.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r7, 0);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren> = $r6;

        r0.<androidx.compose.ui.node.LayoutNode: boolean zSortedChildrenInvalidated> = 1;

        $r8 = <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy ErrorMeasurePolicy>;

        $r9 = (androidx.compose.ui.layout.MeasurePolicy) $r8;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy measurePolicy> = $r9;

        $r10 = new androidx.compose.ui.node.IntrinsicsPolicy;

        specialinvoke $r10.<androidx.compose.ui.node.IntrinsicsPolicy: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy intrinsicsPolicy> = $r10;

        $r11 = staticinvoke <androidx.compose.ui.unit.DensityKt: androidx.compose.ui.unit.Density Density$default(float,float,int,java.lang.Object)>(1.0F, 0.0F, 2, null);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density density> = $r11;

        $r12 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Ltr>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection layoutDirection> = $r12;

        $r13 = <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration DummyViewConfiguration>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration viewConfiguration> = $r13;

        r0.<androidx.compose.ui.node.LayoutNode: int placeOrder> = 2147483647;

        r0.<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder> = 2147483647;

        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent> = $r14;

        $r15 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParentInLookahead> = $r15;

        $r16 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent> = $r16;

        $r17 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent previousIntrinsicsUsageByParent> = $r17;

        $r18 = new androidx.compose.ui.node.NodeChain;

        specialinvoke $r18.<androidx.compose.ui.node.NodeChain: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes> = $r18;

        $r19 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        specialinvoke $r19.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate> = $r19;

        r0.<androidx.compose.ui.node.LayoutNode: boolean innerLayerCoordinatorIsDirty> = 1;

        $r20 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r21 = (androidx.compose.ui.Modifier) $r20;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier modifier> = $r21;

        return;
    }

    public void <init>(boolean, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1, $i2, i3;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        androidx.compose.ui.semantics.SemanticsModifierCore$Companion $r2;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = <androidx.compose.ui.semantics.SemanticsModifierCore: androidx.compose.ui.semantics.SemanticsModifierCore$Companion Companion>;

        i3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsModifierCore$Companion: int generateSemanticsId()>();

     label2:
        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int)>(z0, i3);

        return;
    }

    public int getSemanticsId()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int semanticsId>;

        return $i0;
    }

    public final java.lang.Boolean isPlacedInLookahead()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public final java.util.List getFoldedChildren$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.MutableVectorWithMutationTracking: java.util.List asList()>();

        return $r2;
    }

    private final void recreateUnfoldedChildrenIfDirty()
    {
        androidx.compose.ui.node.LayoutNode r0, r4;
        androidx.compose.runtime.collection.MutableVector r1, r5, r6, $r10, $r12, r14, r15;
        androidx.compose.ui.node.MutableVectorWithMutationTracking r2;
        int i0, $i1, i3;
        java.lang.Object[] r3, $r8;
        boolean $z2, $z3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r7;
        java.lang.Object $r9;
        androidx.compose.ui.node.LayoutNode[] $r11;
        byte b2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z2 = r0.<androidx.compose.ui.node.LayoutNode: boolean unfoldedVirtualChildrenListDirty>;

        if $z2 == 0 goto label6;

        r0.<androidx.compose.ui.node.LayoutNode: boolean unfoldedVirtualChildrenListDirty> = 0;

        $r12 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _unfoldedChildren>;

        if $r12 != null goto label1;

        b2 = 16;

        $r10 = new androidx.compose.runtime.collection.MutableVector;

        $r11 = newarray (androidx.compose.ui.node.LayoutNode)[b2];

        specialinvoke $r10.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r11, 0);

        r14 = $r10;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _unfoldedChildren> = r14;

        $r12 = $r10;

     label1:
        r1 = $r12;

        virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        r15 = virtualinvoke r2.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        i0 = virtualinvoke r15.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label5;

        i3 = 0;

        $r8 = virtualinvoke r15.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r8;

     label2:
        $r9 = r3[i3];

        r4 = (androidx.compose.ui.node.LayoutNode) $r9;

        $z3 = r4.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z3 == 0 goto label3;

        r5 = r1;

        r6 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        $i1 = virtualinvoke r5.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        virtualinvoke r5.<androidx.compose.runtime.collection.MutableVector: boolean addAll(int,androidx.compose.runtime.collection.MutableVector)>($i1, r6);

        goto label4;

     label3:
        virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r4);

     label4:
        i3 = i3 + 1;

        if i3 < i0 goto label2;

     label5:
        $r7 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markChildrenDirty()>();

     label6:
        return;
    }

    public final java.util.List getChildMeasurables$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.util.List getChildMeasurables$ui_release()>();

        return $r2;
    }

    public final java.util.List getChildLookaheadMeasurables$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.util.List getChildMeasurables$ui_release()>();

        return $r2;
    }

    private final void invalidateUnfoldedVirtualChildren()
    {
        androidx.compose.ui.node.LayoutNode r0, $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>;

        if $i0 <= 0 goto label1;

        r0.<androidx.compose.ui.node.LayoutNode: boolean unfoldedVirtualChildrenListDirty> = 1;

     label1:
        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r1 != null goto label2;

        goto label3;

     label2:
        $r1.<androidx.compose.ui.node.LayoutNode: boolean unfoldedVirtualChildrenListDirty> = 1;

     label3:
        return;
    }

    public final androidx.compose.runtime.collection.MutableVector get_children$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r1;
        androidx.compose.runtime.collection.MutableVector $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void updateChildrenIfDirty$ui_release()>();

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>;

        if $i0 != 0 goto label1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _unfoldedChildren>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

     label2:
        return $r2;
    }

    public final void updateChildrenIfDirty$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>;

        if $i0 <= 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void recreateUnfoldedChildrenIfDirty()>();

     label1:
        return;
    }

    public final void forEachChild(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r4 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r4;

     label1:
        $r5 = r3[i1];

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public final void forEachChildIndexed(kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function2 r1;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r4 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r4;

     label1:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = r3[i1];

        interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r6);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public final java.util.List getChildren$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.runtime.collection.MutableVector $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r2;
    }

    public final androidx.compose.ui.node.LayoutNode getParent$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r1 == null goto label2;

        $z0 = $r1.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z0 != 1 goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label5;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r2 == null goto label4;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        goto label6;

     label4:
        $r3 = null;

        goto label6;

     label5:
        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

     label6:
        return $r3;
    }

    public final androidx.compose.ui.node.Owner getOwner$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.Owner $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        return $r1;
    }

    public boolean isAttached()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.Owner $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int getDepth$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int depth>;

        return $i0;
    }

    public final void setDepth$ui_release(int)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        r0.<androidx.compose.ui.node.LayoutNode: int depth> = i0;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        return $r2;
    }

    private final androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        return $r2;
    }

    private final androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        return $r2;
    }

    public final void insertAt$ui_release(int, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r3, $r4, $r12, $r33;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Object[] r2, $r8;
        androidx.compose.ui.node.Owner $r5, r45;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r6, r43;
        boolean $z2, $z3, $z4, $z5, $z7, $z9, $z11;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r7, $r46;
        java.lang.Object $r9;
        androidx.compose.ui.node.NodeCoordinator $r10, $r11, $r41, $r42;
        java.lang.IllegalArgumentException $r13;
        java.lang.String $r14, $r19, $r22, $r25, $r30, $r36, $r37, $r38, $r39, $r40;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20, $r21, $r23, $r26, $r27, $r28, $r29, $r31, $r32, $r34;
        java.lang.IllegalStateException $r24, $r35;
        androidx.compose.runtime.collection.MutableVector r44;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        $r4 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r4 != null goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 != 0 goto label05;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot insert ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it already has a parent. This tree: ");

        $r30 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>(r0, 0, 1, null);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Other tree: ");

        $r33 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r33 == null goto label03;

        $r38 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>($r33, 0, 1, null);

        goto label04;

     label03:
        $r38 = null;

     label04:
        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r35 = new java.lang.IllegalStateException;

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = virtualinvoke $r37.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label05:
        $r5 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r5 != null goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        if $z7 != 0 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot insert ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it already has an owner. This tree: ");

        $r19 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>(r0, 0, 1, null);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Other tree: ");

        $r22 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>(r1, 0, 1, null);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r39 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.IllegalStateException;

        $r25 = virtualinvoke $r39.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label08:
        r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent> = r0;

        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        virtualinvoke $r6.<androidx.compose.ui.node.MutableVectorWithMutationTracking: void add(int,java.lang.Object)>(i0, r1);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        $z2 = r1.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z2 == 0 goto label12;

        $z4 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z4 != 0 goto label09;

        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        if $z9 != 0 goto label11;

        $r40 = "Virtual LayoutNode can\'t be added into a virtual parent";

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r40.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label11:
        i5 = r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>;

        $i4 = i5 + 1;

        r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount> = $i4;

     label12:
        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateUnfoldedVirtualChildren()>();

        $r41 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $z3 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z3 == 0 goto label14;

        $r12 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r12 == null goto label13;

        $r42 = virtualinvoke $r12.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        goto label15;

     label13:
        $r42 = null;

        goto label15;

     label14:
        $r42 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

     label15:
        virtualinvoke $r41.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r42);

        $z11 = r1.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z11 == 0 goto label17;

        r43 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        r44 = virtualinvoke r43.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        i1 = virtualinvoke r44.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i1 <= 0 goto label17;

        i6 = 0;

        $r8 = virtualinvoke r44.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r8;

     label16:
        $r9 = r2[i6];

        r3 = (androidx.compose.ui.node.LayoutNode) $r9;

        $r10 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        virtualinvoke $r10.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r11);

        i6 = i6 + 1;

        if i6 < i1 goto label16;

     label17:
        r45 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if r45 == null goto label18;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void attach$ui_release(androidx.compose.ui.node.Owner)>(r45);

     label18:
        $r7 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $i2 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        if $i2 <= 0 goto label19;

        $r46 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        i7 = virtualinvoke $r46.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        $i3 = i7 + 1;

        virtualinvoke $r46.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i3);

     label19:
        return;
    }

    public final void onZSortedChildrenInvalidated$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        goto label3;

     label1:
        goto label3;

     label2:
        r0.<androidx.compose.ui.node.LayoutNode: boolean zSortedChildrenInvalidated> = 1;

     label3:
        return;
    }

    public final void removeAt$ui_release(int, int)
    {
        androidx.compose.ui.node.LayoutNode r0, $r3;
        int i0, i1, $i2, i3;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9, $r10;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be greater than 0");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label3:
        $i2 = i0 + i1;

        i3 = $i2 - 1;

        if i0 > i3 goto label5;

     label4:
        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.MutableVectorWithMutationTracking: java.lang.Object removeAt(int)>(i3);

        $r3 = (androidx.compose.ui.node.LayoutNode) $r2;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void onChildRemoved(androidx.compose.ui.node.LayoutNode)>($r3);

        if i3 == i0 goto label5;

        i3 = i3 + -1;

        goto label4;

     label5:
        return;
    }

    public final void removeAll$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, $r5;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.MutableVectorWithMutationTracking: int getSize()>();

        i1 = $i0 - 1;

     label1:
        if -1 >= i1 goto label2;

        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.MutableVectorWithMutationTracking: java.lang.Object get(int)>(i1);

        $r5 = (androidx.compose.ui.node.LayoutNode) $r4;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void onChildRemoved(androidx.compose.ui.node.LayoutNode)>($r5);

        i1 = i1 + -1;

        goto label1;

     label2:
        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        virtualinvoke $r2.<androidx.compose.ui.node.MutableVectorWithMutationTracking: void clear()>();

        return;
    }

    private final void onChildRemoved(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object[] r3, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, r11;
        androidx.compose.ui.node.Owner $r6;
        androidx.compose.ui.node.NodeCoordinator $r7, $r10;
        boolean $z2;
        java.lang.Object $r9;
        androidx.compose.ui.node.MutableVectorWithMutationTracking r12;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r5 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $i1 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        if $i1 <= 0 goto label1;

        r11 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $i4 = virtualinvoke r11.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        $i3 = $i4 + -1;

        virtualinvoke r11.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i3);

     label1:
        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r6 == null goto label2;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void detach$ui_release()>();

     label2:
        r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent> = null;

        $r7 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>(null);

        $z2 = r1.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z2 == 0 goto label4;

        i5 = r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount>;

        $i2 = i5 + -1;

        r0.<androidx.compose.ui.node.LayoutNode: int virtualChildrenCount> = $i2;

        r12 = r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        r2 = virtualinvoke r12.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label4;

        i6 = 0;

        $r8 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r8;

     label3:
        $r9 = r3[i6];

        r4 = (androidx.compose.ui.node.LayoutNode) $r9;

        $r10 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        virtualinvoke $r10.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>(null);

        i6 = i6 + 1;

        if i6 < i0 goto label3;

     label4:
        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateUnfoldedVirtualChildren()>();

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        return;
    }

    public final void move$ui_release(int, int, int)
    {
        androidx.compose.ui.node.LayoutNode r0, r1;
        int i0, i1, i2, i3, i4, $i5, i6, $i7, $i8;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 != i1 goto label1;

        return;

     label1:
        i6 = 0;

     label2:
        if i6 >= i2 goto label7;

        if i0 <= i1 goto label3;

        $i7 = i0 + i6;

        goto label4;

     label3:
        $i7 = i0;

     label4:
        i3 = $i7;

        if i0 <= i1 goto label5;

        $i8 = i1 + i6;

        goto label6;

     label5:
        $i5 = i1 + i2;

        $i8 = $i5 - 2;

     label6:
        i4 = $i8;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.MutableVectorWithMutationTracking: java.lang.Object removeAt(int)>(i3);

        r1 = (androidx.compose.ui.node.LayoutNode) $r3;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        virtualinvoke $r4.<androidx.compose.ui.node.MutableVectorWithMutationTracking: void add(int,java.lang.Object)>(i4, r1);

        i6 = i6 + 1;

        goto label2;

     label7:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateUnfoldedVirtualChildren()>();

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

        return;
    }

    public final void attach$ui_release(androidx.compose.ui.node.Owner)
    {
        androidx.compose.ui.node.LayoutNode r0, r2, r4, $r6, $r22, $r28, $r33;
        androidx.compose.ui.node.Owner r1, $r5, $r43, $r44;
        java.lang.Object[] r3, $r11;
        int $i0, $i1, i2, i3;
        androidx.compose.ui.node.SemanticsModifierNode $r7;
        boolean $z1, $z2, $z3, $z5, $z10, z11;
        androidx.compose.ui.node.NodeCoordinator $r8, r52, $r53, r54;
        kotlin.jvm.functions.Function1 $r9;
        java.lang.Object $r12;
        androidx.compose.ui.layout.LookaheadScope $r14, $r47;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r34, $r35, $r36, $r37, $r39;
        java.lang.String $r25, $r31, $r32, $r38, $r41, $r42, $r45;
        java.lang.IllegalStateException $r30, $r40;
        androidx.compose.ui.node.NodeChain $r48;
        androidx.compose.ui.node.MutableVectorWithMutationTracking $r49;
        androidx.compose.runtime.collection.MutableVector r50;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.Owner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r5 != null goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        if $z3 != 0 goto label03;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot attach ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as it already is attached.  Tree: ");

        $r38 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>(r0, 0, 1, null);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = new java.lang.IllegalStateException;

        $r41 = virtualinvoke $r42.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r41);

        throw $r40;

     label03:
        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r6 == null goto label06;

        $r33 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r33 == null goto label04;

        $r43 = $r33.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        goto label05;

     label04:
        $r43 = null;

     label05:
        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r43, r1);

        if $z2 == 0 goto label07;

     label06:
        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        if $z5 != 0 goto label13;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attaching to a different owner(");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") than the parent\'s owner(");

        $r22 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r22 == null goto label09;

        $r44 = $r22.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        goto label10;

     label09:
        $r44 = null;

     label10:
        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). This tree: ");

        $r25 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>(r0, 0, 1, null);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Parent tree: ");

        $r28 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode _foldedParent>;

        if $r28 == null goto label11;

        $r45 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>($r28, 0, 1, null);

        goto label12;

     label11:
        $r45 = null;

     label12:
        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r30 = new java.lang.IllegalStateException;

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = virtualinvoke $r32.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label13:
        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 != null goto label14;

        r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced> = 1;

     label14:
        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner> = r1;

        if r2 == null goto label15;

        $i1 = r2.<androidx.compose.ui.node.LayoutNode: int depth>;

        goto label16;

     label15:
        $i1 = -1;

     label16:
        $i0 = $i1 + 1;

        r0.<androidx.compose.ui.node.LayoutNode: int depth> = $i0;

        $r7 = staticinvoke <androidx.compose.ui.semantics.SemanticsNodeKt: androidx.compose.ui.node.SemanticsModifierNode getOuterSemantics(androidx.compose.ui.node.LayoutNode)>(r0);

        if $r7 == null goto label17;

        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void onSemanticsChange()>();

     label17:
        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void onAttach(androidx.compose.ui.node.LayoutNode)>(r0);

        if r2 == null goto label18;

        $r14 = r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        $r47 = $r14;

        if $r14 != null goto label20;

     label18:
        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean isLookaheadRoot>;

        if $z1 == 0 goto label19;

        $r47 = new androidx.compose.ui.layout.LookaheadScope;

        specialinvoke $r47.<androidx.compose.ui.layout.LookaheadScope: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        goto label20;

     label19:
        $r47 = null;

     label20:
        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void setMLookaheadScope(androidx.compose.ui.layout.LookaheadScope)>($r47);

        $r48 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        virtualinvoke $r48.<androidx.compose.ui.node.NodeChain: void attach()>();

        $r49 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        r50 = virtualinvoke $r49.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        i2 = virtualinvoke r50.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i2 <= 0 goto label22;

        i3 = 0;

        $r11 = virtualinvoke r50.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r11, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r11;

     label21:
        $r12 = r3[i3];

        r4 = (androidx.compose.ui.node.LayoutNode) $r12;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void attach$ui_release(androidx.compose.ui.node.Owner)>(r1);

        i3 = i3 + 1;

        if i3 < i2 goto label21;

     label22:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

        if r2 == null goto label23;

        virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

        goto label23;

     label23:
        r52 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r53 = virtualinvoke $r8.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label24:
        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r52, $r53);

        if $z10 != 0 goto label25;

        if r52 == null goto label25;

        r54 = r52;

        z11 = 0;

        virtualinvoke r54.<androidx.compose.ui.node.NodeCoordinator: void attach()>();

        r52 = virtualinvoke r52.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label24;

     label25:
        $r9 = r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onAttach>;

        if $r9 == null goto label26;

        interfaceinvoke $r9.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label26;

     label26:
        return;
    }

    public final void detach$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r3, $r15, $r21, r22;
        androidx.compose.ui.node.Owner r1;
        java.lang.Object[] r2, $r9;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4;
        kotlin.jvm.functions.Function1 $r5;
        androidx.compose.ui.node.NodeCoordinator $r6, r23, r24, r25;
        androidx.compose.ui.node.SemanticsModifierNode $r7;
        androidx.compose.ui.node.NodeChain $r8;
        java.lang.Object $r10;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.String $r18, $r19, $r20;
        boolean $z3, z6;
        androidx.compose.ui.node.MutableVectorWithMutationTracking r26;
        androidx.compose.runtime.collection.MutableVector r27;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if r1 != null goto label03;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot detach node that is already detached!  Tree: ");

        $r15 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r15 == null goto label01;

        $r20 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode,int,int,java.lang.Object)>($r15, 0, 1, null);

        goto label02;

     label01:
        $r20 = null;

     label02:
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r17 = new java.lang.IllegalStateException;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label03:
        $r21 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r21 == null goto label04;

        virtualinvoke $r21.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        virtualinvoke $r21.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

        $r12 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent> = $r12;

     label04:
        $r4 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void resetAlignmentLines()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onDetach>;

        if $r5 == null goto label05;

        interfaceinvoke $r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label05;

     label05:
        r22 = r0;

        r23 = virtualinvoke r22.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r6 = virtualinvoke r22.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        r24 = virtualinvoke $r6.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label06:
        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r23, r24);

        if $z3 != 0 goto label07;

        if r23 == null goto label07;

        r25 = r23;

        virtualinvoke r25.<androidx.compose.ui.node.NodeCoordinator: void detach()>();

        r23 = virtualinvoke r23.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label06;

     label07:
        $r7 = staticinvoke <androidx.compose.ui.semantics.SemanticsNodeKt: androidx.compose.ui.node.SemanticsModifierNode getOuterSemantics(androidx.compose.ui.node.LayoutNode)>(r0);

        if $r7 == null goto label08;

        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void onSemanticsChange()>();

     label08:
        $r8 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        virtualinvoke $r8.<androidx.compose.ui.node.NodeChain: void detach$ui_release()>();

        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void onDetach(androidx.compose.ui.node.LayoutNode)>(r0);

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner> = null;

        r0.<androidx.compose.ui.node.LayoutNode: int depth> = 0;

        r26 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.MutableVectorWithMutationTracking _foldedChildren>;

        r27 = virtualinvoke r26.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        z6 = 0;

        i0 = virtualinvoke r27.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label10;

        $i1 = 0;

        $r9 = virtualinvoke r27.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r9;

     label09:
        $r10 = r2[$i1];

        r3 = (androidx.compose.ui.node.LayoutNode) $r10;

        virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: void detach$ui_release()>();

        $i1 = $i1 + 1;

        if $i1 < i0 goto label09;

     label10:
        r0.<androidx.compose.ui.node.LayoutNode: int placeOrder> = 2147483647;

        r0.<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder> = 2147483647;

        r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced> = 0;

        return;
    }

    public final androidx.compose.runtime.collection.MutableVector getZSortedChildren()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.runtime.collection.MutableVector r1, r2, $r3, $r4, $r6;
        boolean $z1;
        int $i0;
        java.util.Comparator $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean zSortedChildrenInvalidated>;

        if $z1 == 0 goto label1;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren>;

        virtualinvoke $r4.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren>;

        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        $i0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: boolean addAll(int,androidx.compose.runtime.collection.MutableVector)>($i0, r2);

        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren>;

        $r5 = <androidx.compose.ui.node.LayoutNode: java.util.Comparator ZComparator>;

        virtualinvoke $r6.<androidx.compose.runtime.collection.MutableVector: void sortWith(java.util.Comparator)>($r5);

        r0.<androidx.compose.ui.node.LayoutNode: boolean zSortedChildrenInvalidated> = 0;

     label1:
        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector _zSortedChildren>;

        return $r3;
    }

    public static void getZSortedChildren$annotations()
    {
        return;
    }

    public boolean isValid()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        androidx.compose.ui.node.LayoutNode r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r2, $r10;
        java.util.List $r5;
        int $i0;
        androidx.compose.ui.layout.MeasurePolicy $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <androidx.compose.ui.platform.JvmActuals_jvmKt: java.lang.String simpleIdentityToString(java.lang.Object,java.lang.String)>(r0, null);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" children: ");

        $r5 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" measurePolicy: ");

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private final java.lang.String debugTreeToString(int)
    {
        androidx.compose.ui.node.LayoutNode r0, r4, r17;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.StringBuilder r1, $r5;
        androidx.compose.runtime.collection.MutableVector r2;
        java.lang.Object[] r3, $r12;
        java.lang.String $r7, $r10, $r11, $r14, r18;
        java.lang.Object $r13;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|-");

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        r17 = r0;

        r2 = virtualinvoke r17.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i1 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i1 <= 0 goto label4;

        i6 = 0;

        $r12 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r12, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r12;

     label3:
        $r13 = r3[i6];

        r4 = (androidx.compose.ui.node.LayoutNode) $r13;

        $i4 = i0 + 1;

        $r14 = specialinvoke r4.<androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString(int)>($i4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i6 = i6 + 1;

        if i6 < i1 goto label3;

     label4:
        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "tree.toString()");

        r18 = $r10;

        if i0 != 0 goto label5;

        $i2 = virtualinvoke r18.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r11 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        r18 = $r11;

     label5:
        return r18;
    }

    static java.lang.String debugTreeToString$default(androidx.compose.ui.node.LayoutNode, int, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        $r2 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: java.lang.String debugTreeToString(int)>(i2);

        return $r2;
    }

    public androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.MeasurePolicy $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy measurePolicy>;

        return $r1;
    }

    public void setMeasurePolicy(androidx.compose.ui.layout.MeasurePolicy)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.MeasurePolicy r1, $r2, $r4;
        boolean $z0;
        androidx.compose.ui.node.IntrinsicsPolicy $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.layout.MeasurePolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy measurePolicy>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy measurePolicy> = r1;

        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy intrinsicsPolicy>;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy()>();

        virtualinvoke $r3.<androidx.compose.ui.node.IntrinsicsPolicy: void updateFrom(androidx.compose.ui.layout.MeasurePolicy)>($r4);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

     label1:
        return;
    }

    public final androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.IntrinsicsPolicy $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy intrinsicsPolicy>;

        return $r1;
    }

    public androidx.compose.ui.unit.Density getDensity()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density density>;

        return $r1;
    }

    public void setDensity(androidx.compose.ui.unit.Density)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.Density r1, $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density density>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density density> = r1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void onDensityOrLayoutDirectionChanged()>();

     label1:
        return;
    }

    public final androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.LookaheadScope $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        return $r1;
    }

    private final void setMLookaheadScope(androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.LayoutNode r0, r2;
        androidx.compose.ui.layout.LookaheadScope r1, $r5;
        androidx.compose.ui.node.NodeCoordinator r3, r4, $r7, r8;
        boolean $z2, $z3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.layout.LookaheadScope;

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z2 != 0 goto label2;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope> = r1;

        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r6.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void onLookaheadScopeChanged$ui_release(androidx.compose.ui.layout.LookaheadScope)>(r1);

        r2 = r0;

        r8 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r7 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        r3 = virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label1:
        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r8, r3);

        if $z3 != 0 goto label2;

        if r8 == null goto label2;

        r4 = r8;

        virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: void updateLookaheadScope$ui_release(androidx.compose.ui.layout.LookaheadScope)>(r1);

        r8 = virtualinvoke r8.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public androidx.compose.ui.unit.LayoutDirection getLayoutDirection()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.LayoutDirection $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection layoutDirection>;

        return $r1;
    }

    public void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.LayoutDirection r1, $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.unit.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection layoutDirection>;

        if $r2 == r1 goto label1;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection layoutDirection> = r1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void onDensityOrLayoutDirectionChanged()>();

     label1:
        return;
    }

    public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.platform.ViewConfiguration $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration viewConfiguration>;

        return $r1;
    }

    public void setViewConfiguration(androidx.compose.ui.platform.ViewConfiguration)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.platform.ViewConfiguration r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.platform.ViewConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration viewConfiguration> = r1;

        return;
    }

    private final void onDensityOrLayoutDirectionChanged()
    {
        androidx.compose.ui.node.LayoutNode r0, $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label1;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateLayers$ui_release()>();

        return;
    }

    public int getWidth()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getWidth$ui_release()>();

        return $i0;
    }

    public int getHeight()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getHeight$ui_release()>();

        return $i0;
    }

    public final boolean getAlignmentLinesRequired$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2, $r4;
        androidx.compose.ui.node.AlignmentLines $r3, $r5;
        boolean $z1, $z2, $z3, $z4;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z1 = virtualinvoke $r3.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z1 != 0 goto label4;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getLookaheadAlignmentLinesOwner$ui_release()>();

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r5 == null goto label2;

        $z2 = virtualinvoke $r5.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z2 != 1 goto label1;

        $z3 = 1;

        goto label3;

     label1:
        $z3 = 0;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        if $z3 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    public final androidx.compose.ui.node.LayoutNodeDrawScope getMDrawScope$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.Owner $r1;
        androidx.compose.ui.node.LayoutNodeDrawScope $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>(r0);

        $r2 = interfaceinvoke $r1.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.LayoutNodeDrawScope getSharedDrawScope()>();

        return $r2;
    }

    public boolean isPlaced()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced>;

        return $z0;
    }

    public final int getPlaceOrder$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        return $i0;
    }

    public final int getPreviousPlaceOrder$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $i0 = r0.<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder>;

        return $i0;
    }

    public final androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent>;

        return $r1;
    }

    public final void setMeasuredByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode$UsageByParent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent> = r1;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParentInLookahead>;

        return $r1;
    }

    public final void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode$UsageByParent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParentInLookahead> = r1;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        return $r1;
    }

    public final void setIntrinsicsUsageByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode$UsageByParent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent> = r1;

        return;
    }

    public final boolean getCanMultiMeasure$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean canMultiMeasure>;

        return $z0;
    }

    public final void setCanMultiMeasure$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNode: boolean canMultiMeasure> = z0;

        return;
    }

    public static void getCanMultiMeasure$ui_release$annotations()
    {
        return;
    }

    public final boolean isLookaheadRoot()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean isLookaheadRoot>;

        return $z0;
    }

    public final void setLookaheadRoot(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0, $z1;
        androidx.compose.ui.layout.LookaheadScope $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean isLookaheadRoot>;

        if z0 == $z1 goto label3;

        if z0 != 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void setMLookaheadScope(androidx.compose.ui.layout.LookaheadScope)>(null);

        goto label2;

     label1:
        $r1 = new androidx.compose.ui.layout.LookaheadScope;

        specialinvoke $r1.<androidx.compose.ui.layout.LookaheadScope: void <init>(androidx.compose.ui.node.LayoutNode)>(r0);

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void setMLookaheadScope(androidx.compose.ui.layout.LookaheadScope)>($r1);

     label2:
        r0.<androidx.compose.ui.node.LayoutNode: boolean isLookaheadRoot> = z0;

     label3:
        return;
    }

    public final androidx.compose.ui.node.NodeChain getNodes$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        return $r1;
    }

    public final androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain $r1;
        androidx.compose.ui.node.InnerNodeCoordinator $r2;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator getInnerCoordinator$ui_release()>();

        $r3 = (androidx.compose.ui.node.NodeCoordinator) $r2;

        return $r3;
    }

    public final androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        return $r1;
    }

    public final androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        return $r2;
    }

    public final androidx.compose.ui.layout.LayoutNodeSubcompositionsState getSubcompositionsState$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LayoutNodeSubcompositionsState subcompositionsState>;

        return $r1;
    }

    public final void setSubcompositionsState$ui_release(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LayoutNodeSubcompositionsState subcompositionsState> = r1;

        return;
    }

    public final boolean getInnerLayerCoordinatorIsDirty$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean innerLayerCoordinatorIsDirty>;

        return $z0;
    }

    public final void setInnerLayerCoordinatorIsDirty$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNode: boolean innerLayerCoordinatorIsDirty> = z0;

        return;
    }

    private final androidx.compose.ui.node.NodeCoordinator getInnerLayerCoordinator()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeCoordinator r1, $r6, r7, $r9, r10;
        java.lang.String r2, $r5;
        boolean $z0, $z1;
        androidx.compose.ui.node.OwnedLayer $r3, $r8;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean innerLayerCoordinatorIsDirty>;

        if $z0 == 0 goto label7;

        r7 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        r1 = virtualinvoke $r6.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator _innerLayerCoordinator> = null;

     label1:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r7, r1);

        if $z1 != 0 goto label7;

        if r7 == null goto label2;

        $r8 = virtualinvoke r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        goto label3;

     label2:
        $r8 = null;

     label3:
        if $r8 == null goto label4;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator _innerLayerCoordinator> = r7;

        goto label7;

     label4:
        if r7 == null goto label5;

        $r9 = virtualinvoke r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        goto label6;

     label5:
        $r9 = null;

     label6:
        r7 = $r9;

        goto label1;

     label7:
        r10 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator _innerLayerCoordinator>;

        if r10 == null goto label8;

        $r3 = virtualinvoke r10.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r3 != null goto label8;

        r2 = "Required value was null.";

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label8:
        return r10;
    }

    public final void invalidateLayer$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r2;
        androidx.compose.ui.node.NodeCoordinator r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerLayerCoordinator()>();

        if r1 == null goto label1;

        virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

        goto label2;

     label1:
        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label2;

        virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label2;

     label2:
        return;
    }

    public androidx.compose.ui.Modifier getModifier()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.Modifier $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier modifier>;

        return $r1;
    }

    public void setModifier(androidx.compose.ui.Modifier)
    {
        androidx.compose.ui.node.LayoutNode r0, r2, $r9;
        androidx.compose.ui.Modifier r1, $r5, $r15;
        boolean z0, $z3, $z4, $z5, $z6, $z7, $z8, $z10;
        androidx.compose.ui.node.NodeCoordinator r3, r4, $r7, $r10, $r11, $r18, r19, $r20;
        androidx.compose.ui.node.NodeChain $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r8;
        androidx.compose.ui.layout.LookaheadScope $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.String $r14, $r17;
        androidx.compose.ui.Modifier$Companion $r16;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.Modifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier modifier>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z3 == 0 goto label01;

        return;

     label01:
        $z4 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z4 == 0 goto label02;

        $r15 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier getModifier()>();

        $r16 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        if $r15 != $r16 goto label03;

     label02:
        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        if $z8 != 0 goto label05;

        $r17 = "Modifiers are not supported on virtual LayoutNodes";

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label05:
        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.Modifier modifier> = r1;

        z0 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean shouldInvalidateParentLayer()>();

        $r18 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r6 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        virtualinvoke $r6.<androidx.compose.ui.node.NodeChain: void updateFrom$ui_release(androidx.compose.ui.Modifier)>(r1);

        r2 = r0;

        r19 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r7 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        r3 = virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label06:
        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r19, r3);

        if $z5 != 0 goto label07;

        if r19 == null goto label07;

        r4 = r19;

        virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: void onInitialize()>();

        $r12 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: void updateLookaheadScope$ui_release(androidx.compose.ui.layout.LookaheadScope)>($r12);

        r19 = virtualinvoke r19.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label06;

     label07:
        $r8 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void updateParentData()>();

        if z0 != 0 goto label08;

        $z7 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean shouldInvalidateParentLayer()>();

        if $z7 == 0 goto label09;

     label08:
        $r9 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r9 == null goto label09;

        virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label09;

     label09:
        $r20 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r18, $r20);

        if $z10 == 0 goto label10;

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z6 != 0 goto label11;

     label10:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateMeasurements$ui_release()>();

     label11:
        return;
    }

    public androidx.compose.ui.layout.LayoutCoordinates getCoordinates()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeCoordinator $r1;
        androidx.compose.ui.layout.LayoutCoordinates $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r2 = (androidx.compose.ui.layout.LayoutCoordinates) $r1;

        return $r2;
    }

    public final kotlin.jvm.functions.Function1 getOnAttach$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onAttach>;

        return $r1;
    }

    public final void setOnAttach$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onAttach> = r1;

        return;
    }

    public final kotlin.jvm.functions.Function1 getOnDetach$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onDetach>;

        return $r1;
    }

    public final void setOnDetach$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function1 onDetach> = r1;

        return;
    }

    public final boolean getNeedsOnPositionedDispatch$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z0 = r0.<androidx.compose.ui.node.LayoutNode: boolean needsOnPositionedDispatch>;

        return $z0;
    }

    public final void setNeedsOnPositionedDispatch$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNode: boolean needsOnPositionedDispatch> = z0;

        return;
    }

    public final void place$ui_release(int, int)
    {
        androidx.compose.ui.node.LayoutNode r0, $r10;
        int i0, i1, i2, i3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        androidx.compose.ui.layout.Placeable$PlacementScope$Companion r2, $r11, $r12, $r13, $r14, $r16, $r17;
        androidx.compose.ui.unit.LayoutDirection r3, r6;
        androidx.compose.ui.node.LookaheadCapablePlaceable r4;
        androidx.compose.ui.layout.LayoutCoordinates r5;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r7;
        boolean z2;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r8, $r9;
        androidx.compose.ui.layout.Placeable $r15;
        androidx.compose.ui.layout.Placeable$PlacementScope $r18;
        androidx.compose.ui.node.NodeCoordinator $r20;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r9 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r8 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r9 != $r8 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void clearSubtreePlacementIntrinsicsUsage()>();

     label1:
        $r1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()>();

        r2 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        i2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: int getMeasuredWidth()>();

        r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r10 == null goto label2;

        $r20 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        goto label3;

     label2:
        $r20 = null;

     label3:
        r4 = (androidx.compose.ui.node.LookaheadCapablePlaceable) $r20;

        r5 = staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.LayoutCoordinates access$get_coordinates$cp()>();

        $r11 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        i3 = staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope$Companion: int access$getParentWidth(androidx.compose.ui.layout.Placeable$PlacementScope$Companion)>($r11);

        $r12 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        r6 = staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope$Companion: androidx.compose.ui.unit.LayoutDirection access$getParentLayoutDirection(androidx.compose.ui.layout.Placeable$PlacementScope$Companion)>($r12);

        r7 = staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.node.LayoutNodeLayoutDelegate access$getLayoutDelegate$cp()>();

        $r13 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$setParentWidth$cp(int)>(i2);

        $r14 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$setParentLayoutDirection$cp(androidx.compose.ui.unit.LayoutDirection)>(r3);

        z2 = staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope$Companion: boolean access$configureForPlacingForAlignment(androidx.compose.ui.layout.Placeable$PlacementScope$Companion,androidx.compose.ui.node.LookaheadCapablePlaceable)>(r2, r4);

        $r18 = (androidx.compose.ui.layout.Placeable$PlacementScope) r2;

        $r15 = (androidx.compose.ui.layout.Placeable) $r1;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void placeRelative$default(androidx.compose.ui.layout.Placeable$PlacementScope,androidx.compose.ui.layout.Placeable,int,int,float,int,java.lang.Object)>($r18, $r15, i0, i1, 0.0F, 4, null);

        if r4 != null goto label4;

        goto label5;

     label4:
        virtualinvoke r4.<androidx.compose.ui.node.LookaheadCapablePlaceable: void setPlacingForAlignment$ui_release(boolean)>(z2);

     label5:
        $r16 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$setParentWidth$cp(int)>(i3);

        $r17 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$setParentLayoutDirection$cp(androidx.compose.ui.unit.LayoutDirection)>(r6);

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$set_coordinates$cp(androidx.compose.ui.layout.LayoutCoordinates)>(r5);

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void access$setLayoutDelegate$cp(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>(r7);

        return;
    }

    public final void replace$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        java.lang.Throwable r1, $r5;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r2, $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r2 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r3 != $r2 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void clearSubtreePlacementIntrinsicsUsage()>();

     label1:
        r0.<androidx.compose.ui.node.LayoutNode: boolean relayoutWithoutParentInProgress> = 1;

        $r4 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()>();

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void replace()>();

     label2:
        r0.<androidx.compose.ui.node.LayoutNode: boolean relayoutWithoutParentInProgress> = 0;

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        r0.<androidx.compose.ui.node.LayoutNode: boolean relayoutWithoutParentInProgress> = 0;

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void lookaheadReplace$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r1, $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r1 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r2 != $r1 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void clearSubtreePlacementIntrinsicsUsage()>();

     label1:
        $r3 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void replace()>();

        return;
    }

    public final void draw$ui_release(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: void draw(androidx.compose.ui.graphics.Canvas)>(r1);

        return;
    }

    public final void hitTest-M_7yMNQ$ui_release(long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        long l0, l1;
        androidx.compose.ui.node.HitTestResult r1;
        boolean z0, z1;
        androidx.compose.ui.node.NodeCoordinator $r2, $r3;
        androidx.compose.ui.node.NodeCoordinator$Companion $r4;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hitTestResult");

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        l1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: long fromParentPosition-MK-Hz9U(long)>(l0);

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r4 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator$Companion: androidx.compose.ui.node.NodeCoordinator$HitTestSource getPointerInputSource()>();

        virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: void hitTest-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>($r5, l1, r1, z0, z1);

        return;
    }

    public static void hitTest-M_7yMNQ$ui_release$default(androidx.compose.ui.node.LayoutNode, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        long l0;
        androidx.compose.ui.node.HitTestResult r1;
        int i1, $i2, $i3;
        java.lang.Object r2;
        boolean z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        r1 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i1 := @parameter5: int;

        r2 := @parameter6: java.lang.Object;

        $i2 = i1 & 4;

        if $i2 == 0 goto label1;

        z0 = 0;

     label1:
        $i3 = i1 & 8;

        if $i3 == 0 goto label2;

        z1 = 1;

     label2:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void hitTest-M_7yMNQ$ui_release(long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(l0, r1, z0, z1);

        return;
    }

    public final void hitTestSemantics-M_7yMNQ$ui_release(long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        long l0, l1;
        androidx.compose.ui.node.HitTestResult r1;
        boolean z0, z1;
        androidx.compose.ui.node.NodeCoordinator $r2, $r3;
        androidx.compose.ui.node.NodeCoordinator$Companion $r4;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hitSemanticsEntities");

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        l1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: long fromParentPosition-MK-Hz9U(long)>(l0);

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r4 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator$Companion: androidx.compose.ui.node.NodeCoordinator$HitTestSource getSemanticsSource()>();

        virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: void hitTest-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>($r5, l1, r1, 1, z1);

        return;
    }

    public static void hitTestSemantics-M_7yMNQ$ui_release$default(androidx.compose.ui.node.LayoutNode, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        long l0;
        androidx.compose.ui.node.HitTestResult r1;
        int i1, $i2, $i3;
        java.lang.Object r2;
        boolean z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        r1 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i1 := @parameter5: int;

        r2 := @parameter6: java.lang.Object;

        $i2 = i1 & 4;

        if $i2 == 0 goto label1;

        z0 = 1;

     label1:
        $i3 = i1 & 8;

        if $i3 == 0 goto label2;

        z1 = 1;

     label2:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void hitTestSemantics-M_7yMNQ$ui_release(long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(l0, r1, z0, z1);

        return;
    }

    public final void onNodePlaced$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r11;
        androidx.compose.ui.node.NodeCoordinator r2, $r4, r12;
        androidx.compose.ui.node.LayoutModifierNodeCoordinator r3, $r10;
        float $f0, $f1, f2, f3;
        byte $b0;
        boolean $z1, $z3, $z4, $z5;
        androidx.compose.ui.node.LayoutNode$LayoutState $r5, $r6;
        int $i1, $i2, $i3, i4;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8, $r13;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r14;
        androidx.compose.ui.node.AlignmentLinesOwner $r15;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        f2 = 0.0F;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        f3 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator: float getZIndex()>();

        r11 = r0;

        r12 = virtualinvoke r11.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        r2 = virtualinvoke r11.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

     label01:
        if r12 == r2 goto label02;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r12, "null cannot be cast to non-null type androidx.compose.ui.node.LayoutModifierNodeCoordinator");

        r3 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r12;

        $f1 = virtualinvoke r3.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: float getZIndex()>();

        f3 = f3 + $f1;

        $r10 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r12;

        r12 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label01;

     label02:
        $f0 = r0.<androidx.compose.ui.node.LayoutNode: float zIndex>;

        $b0 = f3 cmpg $f0;

        if $b0 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        if $z3 != 0 goto label06;

        r0.<androidx.compose.ui.node.LayoutNode: float zIndex> = f3;

        if r1 == null goto label05;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        goto label05;

     label05:
        if r1 == null goto label06;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label06;

     label06:
        $z4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z4 != 0 goto label08;

        if r1 == null goto label07;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label07;

     label07:
        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void markNodeAndSubtreeAsPlaced()>();

     label08:
        if r1 == null goto label12;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean relayoutWithoutParentInProgress>;

        if $z1 != 0 goto label13;

        $r5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r6 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        if $r5 != $r6 goto label13;

        $i1 = r0.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        if $i1 != 2147483647 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        if $z5 != 0 goto label11;

        $r13 = "Place was called on a node which was placed already";

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label11:
        $i2 = r1.<androidx.compose.ui.node.LayoutNode: int nextChildPlaceOrder>;

        r0.<androidx.compose.ui.node.LayoutNode: int placeOrder> = $i2;

        i4 = r1.<androidx.compose.ui.node.LayoutNode: int nextChildPlaceOrder>;

        $i3 = i4 + 1;

        r1.<androidx.compose.ui.node.LayoutNode: int nextChildPlaceOrder> = $i3;

        goto label13;

     label12:
        r0.<androidx.compose.ui.node.LayoutNode: int placeOrder> = 0;

     label13:
        $r14 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        interfaceinvoke $r15.<androidx.compose.ui.node.AlignmentLinesOwner: void layoutChildren()>();

        return;
    }

    public final void clearPlaceOrder$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, $i1, i2;
        java.lang.Object[] r3, $r5;
        java.lang.Object $r6;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r7, $r8, $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.node.LayoutNode: int nextChildPlaceOrder> = 0;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i2 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i2];

        r4 = (androidx.compose.ui.node.LayoutNode) $r6;

        $i1 = r4.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        r4.<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder> = $i1;

        r4.<androidx.compose.ui.node.LayoutNode: int placeOrder> = 2147483647;

        $r8 = r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent>;

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        if $r8 != $r7 goto label2;

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent measuredByParent> = $r9;

     label2:
        i2 = i2 + 1;

        if i2 < i0 goto label1;

     label3:
        return;
    }

    public final void checkChildrenPlaceOrderForUpdates$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object[] r3, $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i4 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i4];

        r4 = (androidx.compose.ui.node.LayoutNode) $r6;

        $i2 = r4.<androidx.compose.ui.node.LayoutNode: int previousPlaceOrder>;

        $i1 = r4.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        if $i2 == $i1 goto label2;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void onZSortedChildrenInvalidated$ui_release()>();

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        $i3 = r4.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        if $i3 != 2147483647 goto label2;

        specialinvoke r4.<androidx.compose.ui.node.LayoutNode: void markSubtreeAsNotPlaced()>();

     label2:
        i4 = i4 + 1;

        if i4 < i0 goto label1;

     label3:
        return;
    }

    private final void markNodeAndSubtreeAsPlaced()
    {
        androidx.compose.ui.node.LayoutNode r0, r2, r5, r10;
        boolean z0, $z2, $z3, $z4, $z6, z9;
        java.lang.Object[] r1, $r3;
        java.lang.Object $r4;
        int $i0, i1, $i2;
        androidx.compose.ui.node.NodeCoordinator r6, $r7, r8, r9;
        androidx.compose.runtime.collection.MutableVector r11;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced> = 1;

        if z0 != 0 goto label2;

        $z3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z3 == 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release(boolean)>(1);

        goto label2;

     label1:
        $z4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release(boolean)>(1);

     label2:
        r5 = r0;

        r6 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r7 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        r8 = virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label3:
        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r6, r8);

        if $z6 != 0 goto label5;

        if r6 == null goto label5;

        r9 = r6;

        $z2 = virtualinvoke r9.<androidx.compose.ui.node.NodeCoordinator: boolean getLastLayerDrawingWasSkipped$ui_release()>();

        if $z2 == 0 goto label4;

        virtualinvoke r9.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

     label4:
        r6 = virtualinvoke r6.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label3;

     label5:
        r10 = r0;

        r11 = virtualinvoke r10.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        z9 = 0;

        i1 = virtualinvoke r11.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i1 <= 0 goto label8;

        $i2 = 0;

        $r3 = virtualinvoke r11.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r1 = $r3;

     label6:
        $r4 = r1[$i2];

        r2 = (androidx.compose.ui.node.LayoutNode) $r4;

        $i0 = r2.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        if $i0 == 2147483647 goto label7;

        specialinvoke r2.<androidx.compose.ui.node.LayoutNode: void markNodeAndSubtreeAsPlaced()>();

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void rescheduleRemeasureOrRelayout$ui_release(androidx.compose.ui.node.LayoutNode)>(r2);

     label7:
        $i2 = $i2 + 1;

        if $i2 < i1 goto label6;

     label8:
        return;
    }

    public final void rescheduleRemeasureOrRelayout$ui_release(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNode r0, r1;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2, $r7;
        int[] $r3;
        int $i0, $i1;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r3 = <androidx.compose.ui.node.LayoutNode$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r3[$i0];

        if $i1 != 1 goto label4;

        $z0 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release(boolean)>(1);

        goto label5;

     label1:
        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release(boolean)>(1);

        goto label5;

     label2:
        $z2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z2 == 0 goto label3;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release(boolean)>(1);

        goto label5;

     label3:
        $z3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z3 == 0 goto label5;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRelayout$ui_release(boolean)>(1);

        goto label5;

     label4:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state ");

        $r7 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label5:
        return;
    }

    private final void markSubtreeAsNotPlaced()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r5;
        boolean $z3;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $z3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z3 == 0 goto label2;

        r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced> = 0;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r6;

        specialinvoke r4.<androidx.compose.ui.node.LayoutNode: void markSubtreeAsNotPlaced()>();

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public final void requestRemeasure$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0, $z1, $z2;
        androidx.compose.ui.node.Owner r1, $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean ignoreRemeasureRequests>;

        if $z1 != 0 goto label2;

        $z2 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z2 != 0 goto label2;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r2 != null goto label1;

        return;

     label1:
        r1 = $r2;

        staticinvoke <androidx.compose.ui.node.Owner: void onRequestMeasure$default(androidx.compose.ui.node.Owner,androidx.compose.ui.node.LayoutNode,boolean,boolean,int,java.lang.Object)>(r1, r0, 0, z0, 2, null);

        $r3 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()>();

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void invalidateIntrinsicsParent(boolean)>(z0);

     label2:
        return;
    }

    public static void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release(boolean)>(z0);

        return;
    }

    public final void requestLookaheadRemeasure$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0, $z1, $z2, $z3;
        androidx.compose.ui.node.Owner r1, $r3;
        androidx.compose.ui.layout.LookaheadScope $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        if $r2 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $r7 = "Lookahead measure cannot be requested on a node that is not a part of theLookaheadLayout";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r3 != null goto label4;

        return;

     label4:
        r1 = $r3;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean ignoreRemeasureRequests>;

        if $z1 != 0 goto label5;

        $z2 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z2 != 0 goto label5;

        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void onRequestMeasure(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r0, 1, z0);

        $r4 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void invalidateIntrinsicsParent(boolean)>(z0);

     label5:
        return;
    }

    public static void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release(boolean)>(z0);

        return;
    }

    public final void invalidateMeasurements$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.layout.LookaheadScope $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        if $r1 == null goto label1;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, 0, 1, null);

        goto label2;

     label1:
        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, 0, 1, null);

     label2:
        return;
    }

    public final void ignoreRemeasureRequests$ui_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function0 r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r0, 1);

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        staticinvoke <androidx.compose.ui.node.LayoutNode: void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode,boolean)>(r0, 0);

        return;
    }

    public final void requestRelayout$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0, $z1;
        androidx.compose.ui.node.Owner $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z1 != 0 goto label1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r1 == null goto label1;

        staticinvoke <androidx.compose.ui.node.Owner: void onRequestRelayout$default(androidx.compose.ui.node.Owner,androidx.compose.ui.node.LayoutNode,boolean,boolean,int,java.lang.Object)>($r1, r0, 0, z0, 2, null);

        goto label1;

     label1:
        return;
    }

    public static void requestRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release(boolean)>(z0);

        return;
    }

    public final void requestLookaheadRelayout$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNode r0;
        boolean z0, $z1;
        androidx.compose.ui.node.Owner $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.node.LayoutNode: boolean isVirtual>;

        if $z1 != 0 goto label1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<androidx.compose.ui.node.Owner: void onRequestRelayout(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r0, 1, z0);

        goto label1;

     label1:
        return;
    }

    public static void requestLookaheadRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRelayout$ui_release(boolean)>(z0);

        return;
    }

    public final void dispatchOnPositionedCallbacks$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.compose.ui.Modifier$Node r4, r5, r14;
        androidx.compose.ui.node.GlobalPositionAwareModifierNode r6;
        androidx.compose.ui.node.LayoutNode$LayoutState $r7, $r8;
        boolean $z6, $z7, $z8, $z9;
        androidx.compose.ui.node.Nodes $r9, $r10;
        androidx.compose.ui.node.DelegatableNode $r11;
        androidx.compose.ui.node.NodeCoordinator $r12;
        androidx.compose.ui.layout.LayoutCoordinates $r13;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r8 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        if $r7 != $r8 goto label1;

        $z6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z6 != 0 goto label1;

        $z7 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z7 == 0 goto label2;

     label1:
        return;

     label2:
        $z8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z8 != 0 goto label3;

        return;

     label3:
        r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r9 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r9.<androidx.compose.ui.node.Nodes: int getGlobalPositionAware-OLwlOKw()>();

        r2 = r1;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r2);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label6;

        r3 = r2;

        r14 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label4:
        if r14 == null goto label6;

        r4 = r14;

        $i4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label5;

        r5 = r4;

        $z9 = r5 instanceof androidx.compose.ui.node.GlobalPositionAwareModifierNode;

        if $z9 == 0 goto label5;

        r6 = (androidx.compose.ui.node.GlobalPositionAwareModifierNode) r5;

        $r11 = (androidx.compose.ui.node.DelegatableNode) r6;

        $r10 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i6 = virtualinvoke $r10.<androidx.compose.ui.node.Nodes: int getGlobalPositionAware-OLwlOKw()>();

        $r12 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.node.NodeCoordinator requireCoordinator-64DMado(androidx.compose.ui.node.DelegatableNode,int)>($r11, $i6);

        $r13 = (androidx.compose.ui.layout.LayoutCoordinates) $r12;

        interfaceinvoke r6.<androidx.compose.ui.node.GlobalPositionAwareModifierNode: void onGloballyPositioned(androidx.compose.ui.layout.LayoutCoordinates)>($r13);

     label5:
        $i7 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i8 = $i7 & i1;

        if $i8 == 0 goto label6;

        r14 = virtualinvoke r14.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label4;

     label6:
        return;
    }

    public java.util.List getModifierInfo()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeChain: java.util.List getModifierInfo()>();

        return $r2;
    }

    public final void invalidateLayers$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1;
        androidx.compose.ui.node.NodeCoordinator r2, $r4, r8;
        androidx.compose.ui.node.LayoutModifierNodeCoordinator r3, $r7;
        androidx.compose.ui.node.OwnedLayer $r5, $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = r0;

        r8 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

     label1:
        if r8 == r2 goto label3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r8, "null cannot be cast to non-null type androidx.compose.ui.node.LayoutModifierNodeCoordinator");

        r3 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r8;

        $r6 = virtualinvoke r3.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r6 == null goto label2;

        interfaceinvoke $r6.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label2;

     label2:
        $r7 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r8;

        r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label1;

     label3:
        $r4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r5 == null goto label4;

        interfaceinvoke $r5.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label4;

     label4:
        return;
    }

    public final boolean lookaheadRemeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.Constraints r1;
        androidx.compose.ui.layout.LookaheadScope $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r3;
        long $l0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.unit.Constraints;

        if r1 == null goto label1;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope mLookaheadScope>;

        if $r2 == null goto label1;

        $r3 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $l0 = virtualinvoke r1.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z0 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean remeasure-BRTryo0(long)>($l0);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean lookaheadRemeasure-_Sx5XlM$ui_release$default(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.unit.Constraints, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.unit.Constraints r3;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r3 := @parameter1: androidx.compose.ui.unit.Constraints;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.unit.Constraints getLastLookaheadConstraints-DWUhwKw()>();

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean lookaheadRemeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)>(r3);

        return $z0;
    }

    public final boolean remeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.Constraints r1;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r2, $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r4;
        long $l0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: androidx.compose.ui.unit.Constraints;

        if r1 == null goto label2;

        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r2 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r3 != $r2 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: void clearSubtreeIntrinsicsUsage$ui_release()>();

     label1:
        $r4 = specialinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate()>();

        $l0 = virtualinvoke r1.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z0 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean remeasure-BRTryo0(long)>($l0);

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean remeasure-_Sx5XlM$ui_release$default(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.unit.Constraints, int, java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.unit.Constraints r3;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r3 := @parameter1: androidx.compose.ui.unit.Constraints;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()>();

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: boolean remeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)>(r3);

        return $z0;
    }

    public final boolean getMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getMeasurePending$ui_release()>();

        return $z0;
    }

    public final boolean getLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLayoutPending$ui_release()>();

        return $z0;
    }

    public final boolean getLookaheadMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLookaheadMeasurePending$ui_release()>();

        return $z0;
    }

    public final boolean getLookaheadLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLookaheadLayoutPending$ui_release()>();

        return $z0;
    }

    public final void markLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLayoutPending$ui_release()>();

        return;
    }

    public final void markMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markMeasurePending$ui_release()>();

        return;
    }

    public final void markLookaheadLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLookaheadLayoutPending$ui_release()>();

        return;
    }

    public final void markLookaheadMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLookaheadMeasurePending$ui_release()>();

        return;
    }

    public void forceRemeasure()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.unit.Constraints r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.Owner $r3, $r4;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, 0, 1, null);

        $r2 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate layoutDelegate>;

        r1 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()>();

        if r1 == null goto label2;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r4 == null goto label1;

        $l0 = virtualinvoke r1.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        interfaceinvoke $r4.<androidx.compose.ui.node.Owner: void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode,long)>(r0, $l0);

        goto label3;

     label1:
        goto label3;

     label2:
        $r3 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner owner>;

        if $r3 == null goto label3;

        staticinvoke <androidx.compose.ui.node.Owner: void measureAndLayout$default(androidx.compose.ui.node.Owner,boolean,int,java.lang.Object)>($r3, 0, 1, null);

        goto label3;

     label3:
        return;
    }

    public void onLayoutComplete()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeCoordinator r1, r2, $r8;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z1, $z5;
        androidx.compose.ui.Modifier$Node r3, r4, $r7, $r10, r11;
        androidx.compose.ui.node.LayoutAwareModifierNode r5;
        androidx.compose.ui.node.Nodes $r6;
        androidx.compose.ui.layout.LayoutCoordinates $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getLayoutAware-OLwlOKw()>();

        r2 = r1;

        i1 = i0;

        z1 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z1 == 0 goto label1;

        $r10 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r10 = virtualinvoke $r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r10 != null goto label2;

        goto label5;

     label2:
        r3 = $r10;

        r11 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r2, z1);

     label3:
        if r11 == null goto label5;

        $i2 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i3 = $i2 & i1;

        if $i3 == 0 goto label5;

        $i4 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label4;

        r4 = r11;

        $z5 = r4 instanceof androidx.compose.ui.node.LayoutAwareModifierNode;

        if $z5 == 0 goto label4;

        r5 = (androidx.compose.ui.node.LayoutAwareModifierNode) r4;

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r9 = (androidx.compose.ui.layout.LayoutCoordinates) $r8;

        interfaceinvoke r5.<androidx.compose.ui.node.LayoutAwareModifierNode: void onPlaced(androidx.compose.ui.layout.LayoutCoordinates)>($r9);

     label4:
        if r11 == r3 goto label5;

        r11 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label5:
        return;
    }

    private final void forEachCoordinator(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.NodeCoordinator r2, r6;
        androidx.compose.ui.node.LayoutModifierNodeCoordinator $r3, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        r2 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

     label1:
        if r6 == r2 goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r6, "null cannot be cast to non-null type androidx.compose.ui.node.LayoutModifierNodeCoordinator");

        $r3 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r6;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) r6;

        r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label1;

     label2:
        return;
    }

    private final void forEachCoordinatorIncludingInner(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNode r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.NodeCoordinator r2, $r3, r5;
        boolean $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r5 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        r2 = virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

     label1:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, r2);

        if $z1 != 0 goto label2;

        if r5 == null goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r5);

        r5 = virtualinvoke r5.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        goto label1;

     label2:
        return;
    }

    private final boolean shouldInvalidateParentLayer()
    {
        androidx.compose.ui.node.LayoutNode r0;
        androidx.compose.ui.node.NodeChain r1, $r4, $r11;
        androidx.compose.ui.Modifier$Node r2, r12, r13, r14;
        androidx.compose.ui.node.Nodes $r3, $r5, $r6, $r10, $r15;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8;
        boolean $z2, $z3, $z4, $z6, $z8;
        androidx.compose.ui.node.DelegatableNode $r7;
        androidx.compose.ui.node.NodeCoordinator $r8;
        androidx.compose.ui.node.OwnedLayer $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r3 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.Nodes: int getDraw-OLwlOKw()>();

        $z2 = virtualinvoke $r4.<androidx.compose.ui.node.NodeChain: boolean has-H91voCI$ui_release(int)>($i0);

        if $z2 == 0 goto label1;

        $r11 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        $r10 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i4 = virtualinvoke $r10.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $z4 = virtualinvoke $r11.<androidx.compose.ui.node.NodeChain: boolean has-H91voCI$ui_release(int)>($i4);

        if $z4 != 0 goto label1;

        return 1;

     label1:
        r1 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain nodes>;

        r12 = virtualinvoke r1.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label2:
        if r12 == null goto label9;

        r2 = r12;

        r13 = r2;

        $r5 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i5 = virtualinvoke $r5.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $i1 = virtualinvoke r13.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i2 = $i1 & i5;

        if $i2 == 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        if $z6 == 0 goto label5;

        $z3 = r2 instanceof androidx.compose.ui.node.LayoutModifierNode;

        if $z3 == 0 goto label5;

        $r7 = (androidx.compose.ui.node.DelegatableNode) r2;

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i3 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r8 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: androidx.compose.ui.node.NodeCoordinator requireCoordinator-64DMado(androidx.compose.ui.node.DelegatableNode,int)>($r7, $i3);

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r9 == null goto label5;

        return 0;

     label5:
        r14 = r2;

        $r15 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i6 = virtualinvoke $r15.<androidx.compose.ui.node.Nodes: int getDraw-OLwlOKw()>();

        $i7 = virtualinvoke r14.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i8 = $i7 & i6;

        if $i8 == 0 goto label6;

        $z8 = 1;

        goto label7;

     label6:
        $z8 = 0;

     label7:
        if $z8 == 0 goto label8;

        return 1;

     label8:
        r12 = virtualinvoke r12.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label2;

     label9:
        return 1;
    }

    public final void clearSubtreeIntrinsicsUsage$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r7;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r5, $r6, $r9, $r10;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent previousIntrinsicsUsageByParent> = $r5;

        $r6 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent> = $r6;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r7 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r7;

     label1:
        $r8 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r8;

        $r10 = r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r10 == $r9 goto label2;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void clearSubtreeIntrinsicsUsage$ui_release()>();

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        return;
    }

    private final void clearSubtreePlacementIntrinsicsUsage()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r7;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r5, $r6, $r9, $r10;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r5 = r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent previousIntrinsicsUsageByParent> = $r5;

        $r6 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent> = $r6;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r7 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r7;

     label1:
        $r8 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r8;

        $r10 = r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        if $r10 != $r9 goto label2;

        specialinvoke r4.<androidx.compose.ui.node.LayoutNode: void clearSubtreePlacementIntrinsicsUsage()>();

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        return;
    }

    public final void resetSubtreeIntrinsicsUsage$ui_release()
    {
        androidx.compose.ui.node.LayoutNode r0, r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r5;
        java.lang.Object $r6;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r7, $r8, $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        r1 = r0;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r6;

        $r7 = r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent previousIntrinsicsUsageByParent>;

        r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent> = $r7;

        $r9 = r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent intrinsicsUsageByParent>;

        $r8 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r9 == $r8 goto label2;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void resetSubtreeIntrinsicsUsage$ui_release()>();

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        return;
    }

    public androidx.compose.ui.layout.LayoutInfo getParentInfo()
    {
        androidx.compose.ui.node.LayoutNode r0, $r1;
        androidx.compose.ui.layout.LayoutInfo $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r2 = (androidx.compose.ui.layout.LayoutInfo) $r1;

        return $r2;
    }

    private static final int ZComparator$lambda-37(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNode r0, r1;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        int $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        $f1 = r0.<androidx.compose.ui.node.LayoutNode: float zIndex>;

        $f0 = r1.<androidx.compose.ui.node.LayoutNode: float zIndex>;

        $b0 = $f1 cmpg $f0;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i2 = r0.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        $i1 = r1.<androidx.compose.ui.node.LayoutNode: int placeOrder>;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i2, $i1);

        goto label4;

     label3:
        $f3 = r0.<androidx.compose.ui.node.LayoutNode: float zIndex>;

        $f2 = r1.<androidx.compose.ui.node.LayoutNode: float zIndex>;

        $i3 = staticinvoke <java.lang.Float: int compare(float,float)>($f3, $f2);

     label4:
        return $i3;
    }

    public void <init>()
    {
        androidx.compose.ui.node.LayoutNode r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 3, null);

        return;
    }

    public static final void access$setIgnoreRemeasureRequests$p(androidx.compose.ui.node.LayoutNode, boolean)
    {
        androidx.compose.ui.node.LayoutNode $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNode: boolean ignoreRemeasureRequests> = z0;

        return;
    }

    public static final kotlin.jvm.functions.Function0 access$getConstructor$cp()
    {
        kotlin.jvm.functions.Function0 $r0;

        $r0 = <androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function0 Constructor>;

        return $r0;
    }

    public static final androidx.compose.ui.platform.ViewConfiguration access$getDummyViewConfiguration$cp()
    {
        androidx.compose.ui.platform.ViewConfiguration $r0;

        $r0 = <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration DummyViewConfiguration>;

        return $r0;
    }

    public static final java.util.Comparator access$getZComparator$cp()
    {
        java.util.Comparator $r0;

        $r0 = <androidx.compose.ui.node.LayoutNode: java.util.Comparator ZComparator>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$Companion $r0;
        androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1 $r1;
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy $r2;
        androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 $r3;
        kotlin.jvm.functions.Function0 $r4;
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 $r5;
        androidx.compose.ui.platform.ViewConfiguration $r6;
        java.util.Comparator $r7;

        $r0 = new androidx.compose.ui.node.LayoutNode$Companion;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNode$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$Companion Companion> = $r0;

        $r1 = new androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1;

        specialinvoke $r1.<androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1: void <init>()>();

        $r2 = (androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy) $r1;

        <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy ErrorMeasurePolicy> = $r2;

        $r3 = <androidx.compose.ui.node.LayoutNode$Companion$Constructor$1: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        <androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function0 Constructor> = $r4;

        $r5 = new androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        specialinvoke $r5.<androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1: void <init>()>();

        $r6 = (androidx.compose.ui.platform.ViewConfiguration) $r5;

        <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration DummyViewConfiguration> = $r6;

        $r7 = dynamicinvoke "compare" <java.util.Comparator ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(java.lang.Object,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.node.LayoutNode: int ZComparator$lambda-37(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutNode)>, methodtype: int __METHODTYPE__(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutNode));

        <androidx.compose.ui.node.LayoutNode: java.util.Comparator ZComparator> = $r7;

        return;
    }

androidx.compose.ui.node.LayoutNode$Companion$Constructor$1
<androidx.compose.ui.node.LayoutNode$Companion$Constructor$1: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.compose.ui.node.LayoutNode invoke()
    {
        androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1;

        $r1 = new androidx.compose.ui.node.LayoutNode;

        specialinvoke $r1.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 3, null);

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$Companion$Constructor$1: androidx.compose.ui.node.LayoutNode invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNode$Companion$Constructor$1;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNode$Companion$Constructor$1: void <init>()>();

        <androidx.compose.ui.node.LayoutNode$Companion$Constructor$1: androidx.compose.ui.node.LayoutNode$Companion$Constructor$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1
    void <init>()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long getLongPressTimeoutMillis()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        return 400L;
    }

    public long getDoubleTapTimeoutMillis()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        return 300L;
    }

    public long getDoubleTapMinTimeMillis()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        return 40L;
    }

    public float getTouchSlop()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        return 16.0F;
    }

    public long getMinimumTouchTargetSize-MYxV2XQ()
    {
        androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1 r0;
        androidx.compose.ui.unit.DpSize$Companion $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$DummyViewConfiguration$1;

        $r1 = <androidx.compose.ui.unit.DpSize: androidx.compose.ui.unit.DpSize$Companion Companion>;

        $l0 = virtualinvoke $r1.<androidx.compose.ui.unit.DpSize$Companion: long getZero-MYxV2XQ()>();

        return $l0;
    }

androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1
    void <init>()
    {
        androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: void <init>(java.lang.String)>("Undefined intrinsics block and it is required");

        return;
    }

    public java.lang.Void measure-3p2s80s(androidx.compose.ui.layout.MeasureScope, java.util.List, long)
    {
        androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1 r0;
        androidx.compose.ui.layout.MeasureScope $r1;
        java.util.List r2;
        long l0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureScope;

        r2 := @parameter1: java.util.List;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$measure");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r3 = new java.lang.IllegalStateException;

        $r4 = "Undefined measure and it is required";

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public volatile androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope, java.util.List, long)
    {
        androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1 r0;
        androidx.compose.ui.layout.MeasureScope $r1;
        java.util.List r2;
        long l0;
        java.lang.Void $r3;
        androidx.compose.ui.layout.MeasureResult $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureScope;

        r2 := @parameter1: java.util.List;

        l0 := @parameter2: long;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$Companion$ErrorMeasurePolicy$1: java.lang.Void measure-3p2s80s(androidx.compose.ui.layout.MeasureScope,java.util.List,long)>($r1, r2, l0);

        $r4 = (androidx.compose.ui.layout.MeasureResult) $r3;

        return $r4;
    }

androidx.compose.ui.node.LayoutNode$Companion
    private void <init>()
    {
        androidx.compose.ui.node.LayoutNode$Companion r0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final kotlin.jvm.functions.Function0 getConstructor$ui_release()
    {
        androidx.compose.ui.node.LayoutNode$Companion r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNode: kotlin.jvm.functions.Function0 access$getConstructor$cp()>();

        return $r1;
    }

    public final androidx.compose.ui.platform.ViewConfiguration getDummyViewConfiguration$ui_release()
    {
        androidx.compose.ui.node.LayoutNode$Companion r0;
        androidx.compose.ui.platform.ViewConfiguration $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration access$getDummyViewConfiguration$cp()>();

        return $r1;
    }

    public final java.util.Comparator getZComparator$ui_release()
    {
        androidx.compose.ui.node.LayoutNode$Companion r0;
        java.util.Comparator $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNode: java.util.Comparator access$getZComparator$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.LayoutNode$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNode$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.node.LayoutNode$LayoutState
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>
<androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.compose.ui.node.LayoutNode$LayoutState r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$LayoutState;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.compose.ui.node.LayoutNode$LayoutState[] values()
    {
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.compose.ui.node.LayoutNode$LayoutState[]) $r1;

        return $r2;
    }

    public static androidx.compose.ui.node.LayoutNode$LayoutState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/compose/ui/node/LayoutNode$LayoutState;", r0);

        $r2 = (androidx.compose.ui.node.LayoutNode$LayoutState) $r1;

        return $r2;
    }

    private static final androidx.compose.ui.node.LayoutNode$LayoutState[] $values()
    {
        androidx.compose.ui.node.LayoutNode$LayoutState[] r0;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1, $r2, $r3, $r4, $r5;

        r0 = newarray (androidx.compose.ui.node.LayoutNode$LayoutState)[5];

        $r1 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        r0[0] = $r1;

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        r0[1] = $r2;

        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        r0[2] = $r3;

        $r4 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        r0[3] = $r4;

        $r5 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        r0[4] = $r5;

        return r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$LayoutState $r0, $r1, $r2, $r3, $r4;
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r5;

        $r0 = new androidx.compose.ui.node.LayoutNode$LayoutState;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNode$LayoutState: void <init>(java.lang.String,int)>("Measuring", 0);

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring> = $r0;

        $r1 = new androidx.compose.ui.node.LayoutNode$LayoutState;

        specialinvoke $r1.<androidx.compose.ui.node.LayoutNode$LayoutState: void <init>(java.lang.String,int)>("LookaheadMeasuring", 1);

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring> = $r1;

        $r2 = new androidx.compose.ui.node.LayoutNode$LayoutState;

        specialinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: void <init>(java.lang.String,int)>("LayingOut", 2);

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut> = $r2;

        $r3 = new androidx.compose.ui.node.LayoutNode$LayoutState;

        specialinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: void <init>(java.lang.String,int)>("LookaheadLayingOut", 3);

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut> = $r3;

        $r4 = new androidx.compose.ui.node.LayoutNode$LayoutState;

        specialinvoke $r4.<androidx.compose.ui.node.LayoutNode$LayoutState: void <init>(java.lang.String,int)>("Idle", 4);

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle> = $r4;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] $values()>();

        <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] $VALUES> = $r5;

        return;
    }

androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy
<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error>
    public void <init>(java.lang.String)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        java.lang.String r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error> = r1;

        return;
    }

    public java.lang.Void minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r3 = new java.lang.IllegalStateException;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public java.lang.Void minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r3 = new java.lang.IllegalStateException;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public java.lang.Void maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r3 = new java.lang.IllegalStateException;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public java.lang.Void maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $r3 = new java.lang.IllegalStateException;

        $r4 = r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.String error>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public volatile int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.Void $r3;
        java.lang.Number $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.Void minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope,java.util.List,int)>($r1, r2, i0);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i1;
    }

    public volatile int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.Void $r3;
        java.lang.Number $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.Void minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope,java.util.List,int)>($r1, r2, i0);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i1;
    }

    public volatile int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.Void $r3;
        java.lang.Number $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.Void maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope,java.util.List,int)>($r1, r2, i0);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i1;
    }

    public volatile int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.Void $r3;
        java.lang.Number $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$NoIntrinsicsMeasurePolicy: java.lang.Void maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope,java.util.List,int)>($r1, r2, i0);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i1;
    }

androidx.compose.ui.node.LayoutNode$UsageByParent
<androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>
<androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>
<androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>
<androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.compose.ui.node.LayoutNode$UsageByParent r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNode$UsageByParent;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.compose.ui.node.LayoutNode$UsageByParent[] values()
    {
        androidx.compose.ui.node.LayoutNode$UsageByParent[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.compose.ui.node.LayoutNode$UsageByParent[]) $r1;

        return $r2;
    }

    public static androidx.compose.ui.node.LayoutNode$UsageByParent valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/compose/ui/node/LayoutNode$UsageByParent;", r0);

        $r2 = (androidx.compose.ui.node.LayoutNode$UsageByParent) $r1;

        return $r2;
    }

    private static final androidx.compose.ui.node.LayoutNode$UsageByParent[] $values()
    {
        androidx.compose.ui.node.LayoutNode$UsageByParent[] r0;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r1, $r2, $r3;

        r0 = newarray (androidx.compose.ui.node.LayoutNode$UsageByParent)[3];

        $r1 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        r0[0] = $r1;

        $r2 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        r0[1] = $r2;

        $r3 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        r0[2] = $r3;

        return r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$UsageByParent $r0, $r1, $r2;
        androidx.compose.ui.node.LayoutNode$UsageByParent[] $r3;

        $r0 = new androidx.compose.ui.node.LayoutNode$UsageByParent;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNode$UsageByParent: void <init>(java.lang.String,int)>("InMeasureBlock", 0);

        <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock> = $r0;

        $r1 = new androidx.compose.ui.node.LayoutNode$UsageByParent;

        specialinvoke $r1.<androidx.compose.ui.node.LayoutNode$UsageByParent: void <init>(java.lang.String,int)>("InLayoutBlock", 1);

        <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock> = $r1;

        $r2 = new androidx.compose.ui.node.LayoutNode$UsageByParent;

        specialinvoke $r2.<androidx.compose.ui.node.LayoutNode$UsageByParent: void <init>(java.lang.String,int)>("NotUsed", 2);

        <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed> = $r2;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] $values()>();

        <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] $VALUES> = $r3;

        return;
    }

androidx.compose.ui.node.LayoutNode$WhenMappings
<androidx.compose.ui.node.LayoutNode$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r1;
        int $i0, $i1;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i1] = 1;

        <androidx.compose.ui.node.LayoutNode$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

androidx.compose.ui.node.LayoutNode$_foldedChildren$1
<androidx.compose.ui.node.LayoutNode$_foldedChildren$1: androidx.compose.ui.node.LayoutNode this$0>
    void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNode$_foldedChildren$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$_foldedChildren$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.node.LayoutNode$_foldedChildren$1: androidx.compose.ui.node.LayoutNode this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNode$_foldedChildren$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNode$_foldedChildren$1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNode$_foldedChildren$1: androidx.compose.ui.node.LayoutNode this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markChildrenDirty()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNode$_foldedChildren$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNode$_foldedChildren$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNode$_foldedChildren$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

