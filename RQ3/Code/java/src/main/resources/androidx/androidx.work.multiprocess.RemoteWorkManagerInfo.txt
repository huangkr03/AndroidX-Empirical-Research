androidx.work.multiprocess.RemoteWorkManagerInfo
<androidx.work.multiprocess.RemoteWorkManagerInfo: java.lang.Object sLock>
<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance>
<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration>
<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>
<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ProgressUpdater mProgressUpdater>
<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ForegroundUpdater mForegroundUpdater>
    public static androidx.work.multiprocess.RemoteWorkManagerInfo getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r8;
        androidx.work.multiprocess.RemoteWorkManagerInfo $r3, $r4, $r6, $r7;

        r0 := @parameter0: android.content.Context;

        $r3 = <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance>;

        if $r3 != null goto label6;

        $r5 = <androidx.work.multiprocess.RemoteWorkManagerInfo: java.lang.Object sLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance>;

        if $r6 != null goto label2;

        $r7 = new androidx.work.multiprocess.RemoteWorkManagerInfo;

        specialinvoke $r7.<androidx.work.multiprocess.RemoteWorkManagerInfo: void <init>(android.content.Context)>(r0);

        <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance> = $r7;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r4 = <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance>;

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void clearInstance()
    {
        java.lang.Object r0, $r1;

        $r1 = <androidx.work.multiprocess.RemoteWorkManagerInfo: java.lang.Object sLock>;

        r0 = $r1;

        entermonitor $r1;

        <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo sInstance> = null;

        exitmonitor r0;

        goto label1;

     label1:
        return;
    }

    private void <init>(android.content.Context)
    {
        androidx.work.multiprocess.RemoteWorkManagerInfo r0;
        android.content.Context r1, r3;
        androidx.work.impl.WorkManagerImpl r2;
        androidx.work.Configuration$Provider r4;
        boolean $z0;
        androidx.work.Configuration$Builder $r5, $r7;
        java.lang.String $r6;
        androidx.work.Configuration $r8, $r10, $r12, $r13;
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor $r9;
        java.util.concurrent.Executor $r11;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r14;
        androidx.work.multiprocess.RemoteProgressUpdater $r15;
        androidx.work.multiprocess.RemoteForegroundUpdater $r16;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerInfo;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance()>();

        if r2 == null goto label1;

        $r13 = virtualinvoke r2.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration> = $r13;

        $r14 = virtualinvoke r2.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r14;

        goto label4;

     label1:
        r3 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $z0 = r3 instanceof androidx.work.Configuration$Provider;

        if $z0 == 0 goto label2;

        r4 = (androidx.work.Configuration$Provider) r3;

        $r12 = interfaceinvoke r4.<androidx.work.Configuration$Provider: androidx.work.Configuration getWorkManagerConfiguration()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration> = $r12;

        goto label3;

     label2:
        $r5 = new androidx.work.Configuration$Builder;

        specialinvoke $r5.<androidx.work.Configuration$Builder: void <init>()>();

        $r6 = virtualinvoke r3.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = virtualinvoke $r5.<androidx.work.Configuration$Builder: androidx.work.Configuration$Builder setDefaultProcessName(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<androidx.work.Configuration$Builder: androidx.work.Configuration build()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration> = $r8;

     label3:
        $r9 = new androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor;

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration>;

        $r11 = virtualinvoke $r10.<androidx.work.Configuration: java.util.concurrent.Executor getTaskExecutor()>();

        specialinvoke $r9.<androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor: void <init>(java.util.concurrent.Executor)>($r11);

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r9;

     label4:
        $r15 = new androidx.work.multiprocess.RemoteProgressUpdater;

        specialinvoke $r15.<androidx.work.multiprocess.RemoteProgressUpdater: void <init>()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ProgressUpdater mProgressUpdater> = $r15;

        $r16 = new androidx.work.multiprocess.RemoteForegroundUpdater;

        specialinvoke $r16.<androidx.work.multiprocess.RemoteForegroundUpdater: void <init>()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ForegroundUpdater mForegroundUpdater> = $r16;

        return;
    }

    public androidx.work.Configuration getConfiguration()
    {
        androidx.work.multiprocess.RemoteWorkManagerInfo r0;
        androidx.work.Configuration $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerInfo;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration mConfiguration>;

        return $r1;
    }

    public androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()
    {
        androidx.work.multiprocess.RemoteWorkManagerInfo r0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerInfo;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        return $r1;
    }

    public androidx.work.ProgressUpdater getProgressUpdater()
    {
        androidx.work.multiprocess.RemoteWorkManagerInfo r0;
        androidx.work.ProgressUpdater $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerInfo;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ProgressUpdater mProgressUpdater>;

        return $r1;
    }

    public androidx.work.ForegroundUpdater getForegroundUpdater()
    {
        androidx.work.multiprocess.RemoteWorkManagerInfo r0;
        androidx.work.ForegroundUpdater $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerInfo;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ForegroundUpdater mForegroundUpdater>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.work.multiprocess.RemoteWorkManagerInfo: java.lang.Object sLock> = $r0;

        return;
    }

