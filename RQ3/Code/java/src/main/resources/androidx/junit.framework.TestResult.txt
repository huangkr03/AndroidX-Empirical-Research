junit.framework.TestResult
<junit.framework.TestResult: java.util.List fErrors>
<junit.framework.TestResult: java.util.List fFailures>
<junit.framework.TestResult: java.util.List fListeners>
<junit.framework.TestResult: int fRunTests>
<junit.framework.TestResult: boolean fStop>
    public void <init>()
    {
        junit.framework.TestResult $r0;
        java.util.ArrayList $r1;

        $r0 := @this: junit.framework.TestResult;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<junit.framework.TestResult: java.util.List fFailures> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<junit.framework.TestResult: java.util.List fErrors> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<junit.framework.TestResult: java.util.List fListeners> = $r1;

        $r0.<junit.framework.TestResult: int fRunTests> = 0;

        $r0.<junit.framework.TestResult: boolean fStop> = 0;

        return;
    }

    private java.util.List cloneListeners()
    {
        junit.framework.TestResult $r0;
        java.util.List $r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r1 = $r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r1);

     label2:
        exitmonitor $r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.framework.TestResult $r0;
        junit.framework.Test $r1;
        java.lang.Throwable $r2, $r8;
        java.util.List $r3;
        junit.framework.TestFailure $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        junit.framework.TestListener $r7;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: java.lang.Throwable;

        entermonitor $r0;

     label1:
        $r3 = $r0.<junit.framework.TestResult: java.util.List fErrors>;

        $r4 = new junit.framework.TestFailure;

        specialinvoke $r4.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>($r1, $r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r3 = specialinvoke $r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (junit.framework.TestListener) $r6;

        interfaceinvoke $r7.<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>($r1, $r2);

     label3:
        goto label2;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r0;

        throw $r8;

     label5:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.framework.TestResult $r0;
        junit.framework.Test $r1;
        junit.framework.AssertionFailedError $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        junit.framework.TestListener $r6;
        java.lang.Throwable $r7;
        junit.framework.TestFailure r8;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: junit.framework.AssertionFailedError;

        entermonitor $r0;

     label1:
        $r3 = $r0.<junit.framework.TestResult: java.util.List fFailures>;

        r8 = new junit.framework.TestFailure;

        $r7 = (java.lang.Throwable) $r2;

        specialinvoke r8.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>($r1, $r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r8);

        $r3 = specialinvoke $r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (junit.framework.TestListener) $r5;

        interfaceinvoke $r6.<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>($r1, $r2);

     label3:
        goto label2;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r0;

        throw $r7;

     label5:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void addListener(junit.framework.TestListener)
    {
        junit.framework.TestResult $r0;
        junit.framework.TestListener $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.TestListener;

        entermonitor $r0;

     label1:
        $r2 = $r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void endTest(junit.framework.Test)
    {
        junit.framework.TestResult $r0;
        junit.framework.Test $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = specialinvoke $r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        interfaceinvoke $r5.<junit.framework.TestListener: void endTest(junit.framework.Test)>($r1);

        goto label1;

     label2:
        return;
    }

    public int errorCount()
    {
        junit.framework.TestResult $r0;
        int $i0;
        java.util.List $r1;
        java.lang.Throwable $r2;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $r1 = $r0.<junit.framework.TestResult: java.util.List fErrors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        exitmonitor $r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Enumeration errors()
    {
        junit.framework.TestResult $r0;
        java.util.Enumeration $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $r2 = $r0.<junit.framework.TestResult: java.util.List fErrors>;

        $r1 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r2);

     label2:
        exitmonitor $r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int failureCount()
    {
        junit.framework.TestResult $r0;
        int $i0;
        java.util.List $r1;
        java.lang.Throwable $r2;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $r1 = $r0.<junit.framework.TestResult: java.util.List fFailures>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        exitmonitor $r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Enumeration failures()
    {
        junit.framework.TestResult $r0;
        java.util.Enumeration $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $r2 = $r0.<junit.framework.TestResult: java.util.List fFailures>;

        $r1 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r2);

     label2:
        exitmonitor $r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeListener(junit.framework.TestListener)
    {
        junit.framework.TestResult $r0;
        junit.framework.TestListener $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.TestListener;

        entermonitor $r0;

     label1:
        $r2 = $r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void run(junit.framework.TestCase)
    {
        junit.framework.TestResult $r0;
        junit.framework.TestCase $r1;
        junit.framework.TestResult$1 $r2;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.TestCase;

        virtualinvoke $r0.<junit.framework.TestResult: void startTest(junit.framework.Test)>($r1);

        $r2 = new junit.framework.TestResult$1;

        specialinvoke $r2.<junit.framework.TestResult$1: void <init>(junit.framework.TestResult,junit.framework.TestCase)>($r0, $r1);

        virtualinvoke $r0.<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>($r1, $r2);

        virtualinvoke $r0.<junit.framework.TestResult: void endTest(junit.framework.Test)>($r1);

        return;
    }

    public int runCount()
    {
        junit.framework.TestResult $r0;
        int i0;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

        i0 = $r0.<junit.framework.TestResult: int fRunTests>;

        exitmonitor $r0;

        return i0;
    }

    public void runProtected(junit.framework.Test, junit.framework.Protectable)
    {
        junit.framework.TestResult $r0;
        junit.framework.Test $r1;
        junit.framework.Protectable $r2;
        java.lang.Throwable $r3, $r4;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: junit.framework.Protectable;

     label1:
        interfaceinvoke $r2.<junit.framework.Protectable: void protect()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        throw $r3;

     label4:
        $r4 := @caughtexception;

        virtualinvoke $r0.<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>($r1, $r4);

        return;

        catch java.lang.ThreadDeath from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean shouldStop()
    {
        junit.framework.TestResult $r0;
        boolean z0;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

        z0 = $r0.<junit.framework.TestResult: boolean fStop>;

        exitmonitor $r0;

        return z0;
    }

    public void startTest(junit.framework.Test)
    {
        junit.framework.TestResult $r0;
        junit.framework.Test $r1;
        int $i0, $i1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;

        $r0 := @this: junit.framework.TestResult;

        $r1 := @parameter0: junit.framework.Test;

        $i0 = interfaceinvoke $r1.<junit.framework.Test: int countTestCases()>();

        entermonitor $r0;

        $i1 = $r0.<junit.framework.TestResult: int fRunTests>;

        $i0 = $i0 + $i1;

        $r0.<junit.framework.TestResult: int fRunTests> = $i0;

        exitmonitor $r0;

        $r2 = specialinvoke $r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        interfaceinvoke $r5.<junit.framework.TestListener: void startTest(junit.framework.Test)>($r1);

        goto label1;

     label2:
        return;
    }

    public void stop()
    {
        junit.framework.TestResult $r0;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

        $r0.<junit.framework.TestResult: boolean fStop> = 1;

        exitmonitor $r0;

        return;
    }

    public boolean wasSuccessful()
    {
        junit.framework.TestResult $r0;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: junit.framework.TestResult;

        entermonitor $r0;

     label1:
        $i0 = virtualinvoke $r0.<junit.framework.TestResult: int failureCount()>();

        if $i0 != 0 goto label4;

        $i0 = virtualinvoke $r0.<junit.framework.TestResult: int errorCount()>();

     label2:
        if $i0 != 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor $r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

