kotlin.reflect.KClasses
    public static final java.lang.Object cast(kotlin.reflect.KClass, java.lang.Object)
    {
        kotlin.reflect.KClass $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.ClassCastException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: kotlin.reflect.KClass;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = interfaceinvoke $r0.<kotlin.reflect.KClass: boolean isInstance(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type T of kotlin.reflect.KClasses.cast");

        return $r1;

     label1:
        $r2 = new java.lang.ClassCastException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value cannot be cast to ");

        $r4 = interfaceinvoke $r0.<kotlin.reflect.KClass: java.lang.String getQualifiedName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public static final java.lang.Object safeCast(kotlin.reflect.KClass, java.lang.Object)
    {
        boolean $z0;
        kotlin.reflect.KClass $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlin.reflect.KClass;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = interfaceinvoke $r0.<kotlin.reflect.KClass: boolean isInstance(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type T of kotlin.reflect.KClasses.safeCast");

        return $r1;

     label1:
        return null;
    }

