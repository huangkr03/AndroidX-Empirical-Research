com.google.common.math.MathPreconditions
    static void checkNoOverflow(boolean, java.lang.String, long, long)
    {
        long $l0, $l1;
        boolean $z0;
        java.lang.String $r0;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $l1 := @parameter2: long;

        $l0 := @parameter3: long;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("overflow: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static int checkPositive(java.lang.String, int)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.StringBuilder $r2;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 <= 0 goto label1;

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    static void checkRoundingUnnecessary(boolean)
    {
        boolean $z0;
        java.lang.ArithmeticException $r0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("mode was UNNECESSARY, but rounding was necessary");

        throw $r0;
    }

