androidx.work.testing.WorkManagerTestInitHelper
    public static void initializeTestWorkManager(android.content.Context)
    {
        android.content.Context r0;
        androidx.work.testing.SynchronousExecutor r1, $r3;
        androidx.work.Configuration r2;
        androidx.work.Configuration$Builder $r4, $r5, $r6;

        r0 := @parameter0: android.content.Context;

        $r3 = new androidx.work.testing.SynchronousExecutor;

        specialinvoke $r3.<androidx.work.testing.SynchronousExecutor: void <init>()>();

        r1 = $r3;

        $r4 = new androidx.work.Configuration$Builder;

        specialinvoke $r4.<androidx.work.Configuration$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<androidx.work.Configuration$Builder: androidx.work.Configuration$Builder setExecutor(java.util.concurrent.Executor)>(r1);

        $r6 = virtualinvoke $r5.<androidx.work.Configuration$Builder: androidx.work.Configuration$Builder setTaskExecutor(java.util.concurrent.Executor)>(r1);

        r2 = virtualinvoke $r6.<androidx.work.Configuration$Builder: androidx.work.Configuration build()>();

        staticinvoke <androidx.work.testing.WorkManagerTestInitHelper: void initializeTestWorkManager(android.content.Context,androidx.work.Configuration)>(r0, r2);

        return;
    }

    public static void initializeTestWorkManager(android.content.Context, androidx.work.Configuration)
    {
        android.content.Context r0;
        androidx.work.Configuration$Builder r1, r10;
        boolean $z0;
        java.util.concurrent.Executor $r3;
        androidx.work.Configuration r8;
        java.lang.Object r9;
        androidx.work.testing.SynchronousExecutor r11;
        androidx.work.testing.SynchronousSerialExecutor r12;
        androidx.work.impl.utils.SerialExecutorImpl r13;
        androidx.work.testing.TestWorkManagerImpl r14;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r15;

        r0 := @parameter0: android.content.Context;

        r8 := @parameter1: androidx.work.Configuration;

        $z0 = virtualinvoke r8.<androidx.work.Configuration: boolean isUsingDefaultTaskExecutor()>();

        if $z0 == 0 goto label1;

        r10 = new androidx.work.Configuration$Builder;

        specialinvoke r10.<androidx.work.Configuration$Builder: void <init>(androidx.work.Configuration)>(r8);

        r11 = new androidx.work.testing.SynchronousExecutor;

        specialinvoke r11.<androidx.work.testing.SynchronousExecutor: void <init>()>();

        r1 = virtualinvoke r10.<androidx.work.Configuration$Builder: androidx.work.Configuration$Builder setTaskExecutor(java.util.concurrent.Executor)>(r11);

        r8 = virtualinvoke r1.<androidx.work.Configuration$Builder: androidx.work.Configuration build()>();

        r12 = new androidx.work.testing.SynchronousSerialExecutor;

        specialinvoke r12.<androidx.work.testing.SynchronousSerialExecutor: void <init>()>();

        r9 = r12;

        goto label2;

     label1:
        r13 = new androidx.work.impl.utils.SerialExecutorImpl;

        $r3 = virtualinvoke r8.<androidx.work.Configuration: java.util.concurrent.Executor getTaskExecutor()>();

        specialinvoke r13.<androidx.work.impl.utils.SerialExecutorImpl: void <init>(java.util.concurrent.Executor)>($r3);

        r9 = r13;

     label2:
        r14 = new androidx.work.testing.TestWorkManagerImpl;

        r15 = (androidx.work.impl.utils.taskexecutor.SerialExecutor) r9;

        specialinvoke r14.<androidx.work.testing.TestWorkManagerImpl: void <init>(android.content.Context,androidx.work.Configuration,androidx.work.impl.utils.taskexecutor.SerialExecutor)>(r0, r8, r15);

        staticinvoke <androidx.work.impl.WorkManagerImpl: void setDelegate(androidx.work.impl.WorkManagerImpl)>(r14);

        return;
    }

    public static androidx.work.testing.TestDriver getTestDriver()
    {
        androidx.work.impl.WorkManagerImpl r0;
        androidx.work.testing.TestWorkManagerImpl $r1;

        r0 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance()>();

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = (androidx.work.testing.TestWorkManagerImpl) r0;

        return $r1;
    }

    public static androidx.work.testing.TestDriver getTestDriver(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Throwable r1, $r4;
        androidx.work.impl.WorkManagerImpl $r2;
        androidx.work.testing.TestWorkManagerImpl $r3;

        r0 := @parameter0: android.content.Context;

     label1:
        $r2 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>(r0);

        $r3 = (androidx.work.testing.TestWorkManagerImpl) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        return null;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private void <init>()
    {
        androidx.work.testing.WorkManagerTestInitHelper r0;

        r0 := @this: androidx.work.testing.WorkManagerTestInitHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

