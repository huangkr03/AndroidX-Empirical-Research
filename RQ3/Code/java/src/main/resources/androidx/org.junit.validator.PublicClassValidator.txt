org.junit.validator.PublicClassValidator
<org.junit.validator.PublicClassValidator: java.util.List NO_VALIDATION_ERRORS>
    static void <clinit>()
    {
        java.util.List $r0;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.junit.validator.PublicClassValidator: java.util.List NO_VALIDATION_ERRORS> = $r0;

        return;
    }

    public void <init>()
    {
        org.junit.validator.PublicClassValidator $r0;

        $r0 := @this: org.junit.validator.PublicClassValidator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List validateTestClass(org.junit.runners.model.TestClass)
    {
        org.junit.validator.PublicClassValidator $r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.StringBuilder $r2;
        boolean $z0;
        java.lang.Exception $r3;
        java.lang.String $r4, $r5;
        int $i0;
        java.util.List $r6;

        $r0 := @this: org.junit.validator.PublicClassValidator;

        $r1 := @parameter0: org.junit.runners.model.TestClass;

        $z0 = virtualinvoke $r1.<org.junit.runners.model.TestClass: boolean isPublic()>();

        if $z0 == 0 goto label1;

        $r6 = <org.junit.validator.PublicClassValidator: java.util.List NO_VALIDATION_ERRORS>;

        return $r6;

     label1:
        $r3 = new java.lang.Exception;

        $r4 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 25;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not public.");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>($r4);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        return $r6;
    }

