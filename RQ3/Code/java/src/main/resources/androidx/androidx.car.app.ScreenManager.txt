androidx.car.app.ScreenManager
<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>
<androidx.car.app.ScreenManager: androidx.car.app.CarContext mCarContext>
<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>
    public androidx.car.app.Screen getTop()
    {
        androidx.car.app.ScreenManager r0;
        java.util.Deque $r1;
        java.lang.Object $r2, $r4;
        androidx.car.app.Screen $r3, $r5;

        r0 := @this: androidx.car.app.ScreenManager;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r1 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peek()>();

        $r3 = (androidx.car.app.Screen) $r2;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.car.app.Screen) $r4;

        return $r5;
    }

    public void push(androidx.car.app.Screen)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, $r6;
        androidx.lifecycle.Lifecycle $r2;
        androidx.lifecycle.Lifecycle$State $r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r2 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r3 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Pushing screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = (androidx.car.app.Screen) $r5;

        specialinvoke r0.<androidx.car.app.ScreenManager: void pushInternal(androidx.car.app.Screen)>($r6);

        return;
    }

    public void pushForResult(androidx.car.app.Screen, androidx.car.app.OnScreenResultListener)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, $r7;
        androidx.car.app.OnScreenResultListener r2, $r9;
        androidx.lifecycle.Lifecycle $r3;
        androidx.lifecycle.Lifecycle$State $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        r2 := @parameter1: androidx.car.app.OnScreenResultListener;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r3 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r4 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Pushing screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r7 = (androidx.car.app.Screen) $r6;

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r9 = (androidx.car.app.OnScreenResultListener) $r8;

        virtualinvoke $r7.<androidx.car.app.Screen: void setOnScreenResultListener(androidx.car.app.OnScreenResultListener)>($r9);

        specialinvoke r0.<androidx.car.app.ScreenManager: void pushInternal(androidx.car.app.Screen)>(r1);

        return;
    }

    public void pop()
    {
        androidx.car.app.ScreenManager r0;
        androidx.lifecycle.Lifecycle $r1;
        androidx.lifecycle.Lifecycle$State $r2, $r3;
        boolean $z0, $z1;
        java.util.Deque $r4, $r5;
        int $i0;
        java.lang.Object $r6;
        androidx.car.app.Screen $r7;
        java.util.List $r8;

        r0 := @this: androidx.car.app.ScreenManager;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r1 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r2 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Popping screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r4 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i0 = interfaceinvoke $r4.<java.util.Deque: int size()>();

        if $i0 <= 1 goto label3;

        $r5 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r6 = interfaceinvoke $r5.<java.util.Deque: java.lang.Object pop()>();

        $r7 = (androidx.car.app.Screen) $r6;

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        specialinvoke r0.<androidx.car.app.ScreenManager: void popInternal(java.util.List)>($r8);

     label3:
        return;
    }

    public void popTo(java.lang.String)
    {
        androidx.car.app.ScreenManager r0;
        java.lang.String r1;
        java.util.ArrayList r2, $r7;
        androidx.lifecycle.Lifecycle $r4;
        androidx.lifecycle.Lifecycle$State $r5, $r6;
        boolean $z0, $z1, $z2, $z4;
        java.util.Deque $r8, $r9;
        int $i0;
        java.lang.Object $r10;
        androidx.car.app.Screen $r11;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r5 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r6 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r5.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z4 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Popping screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

     label3:
        $r8 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i0 = interfaceinvoke $r8.<java.util.Deque: int size()>();

        if $i0 <= 1 goto label4;

        $z2 = specialinvoke r0.<androidx.car.app.ScreenManager: boolean foundMarker(java.lang.String)>(r1);

        if $z2 != 0 goto label4;

        $r9 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r10 = interfaceinvoke $r9.<java.util.Deque: java.lang.Object pop()>();

        $r11 = (androidx.car.app.Screen) $r10;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label4:
        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        return;

     label5:
        specialinvoke r0.<androidx.car.app.ScreenManager: void popInternal(java.util.List)>(r2);

        return;
    }

    public void popToRoot()
    {
        androidx.car.app.ScreenManager r0;
        java.util.ArrayList r1, $r6;
        androidx.lifecycle.Lifecycle $r2;
        androidx.lifecycle.Lifecycle$State $r3, $r4;
        boolean $z0, $z2;
        java.util.Deque $r5, $r7, $r8;
        int $i0, $i1;
        java.lang.Object $r9;
        androidx.car.app.Screen $r10;

        r0 := @this: androidx.car.app.ScreenManager;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $r2 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r3 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z2 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Popping screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r5 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i0 = interfaceinvoke $r5.<java.util.Deque: int size()>();

        if $i0 > 1 goto label3;

        return;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

     label4:
        $r7 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i1 = interfaceinvoke $r7.<java.util.Deque: int size()>();

        if $i1 <= 1 goto label5;

        $r8 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.lang.Object pop()>();

        $r10 = (androidx.car.app.Screen) $r9;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label4;

     label5:
        specialinvoke r0.<androidx.car.app.ScreenManager: void popInternal(java.util.List)>(r1);

        return;
    }

    public void remove(androidx.car.app.Screen)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, $r7;
        androidx.lifecycle.Lifecycle $r3;
        androidx.lifecycle.Lifecycle$State $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Deque $r6, $r8, $r10;
        int $i0;
        androidx.lifecycle.Lifecycle$Event $r9;
        java.util.List $r12;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r4 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $z0 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z3 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Popping screens after the DESTROYED state is a no-op");

     label1:
        return;

     label2:
        $r6 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i0 = interfaceinvoke $r6.<java.util.Deque: int size()>();

        if $i0 > 1 goto label3;

        return;

     label3:
        $r7 = virtualinvoke r0.<androidx.car.app.ScreenManager: androidx.car.app.Screen getTop()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        $r10 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        interfaceinvoke $r10.<java.util.Deque: java.lang.Object pop()>();

        $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.car.app.ScreenManager: void popInternal(java.util.List)>($r12);

        goto label5;

     label4:
        $r8 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $z2 = interfaceinvoke $r8.<java.util.Deque: boolean remove(java.lang.Object)>(r1);

        if $z2 == 0 goto label5;

        $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r9);

     label5:
        return;
    }

    public int getStackSize()
    {
        androidx.car.app.ScreenManager r0;
        java.util.Deque $r1;
        int $i0;

        r0 := @this: androidx.car.app.ScreenManager;

        $r1 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        return $i0;
    }

    static androidx.car.app.ScreenManager create(androidx.car.app.CarContext, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.CarContext r0;
        androidx.lifecycle.Lifecycle r1;
        androidx.car.app.ScreenManager $r2;

        r0 := @parameter0: androidx.car.app.CarContext;

        r1 := @parameter1: androidx.lifecycle.Lifecycle;

        $r2 = new androidx.car.app.ScreenManager;

        specialinvoke $r2.<androidx.car.app.ScreenManager: void <init>(androidx.car.app.CarContext,androidx.lifecycle.Lifecycle)>(r0, r1);

        return $r2;
    }

    androidx.car.app.model.TemplateWrapper getTopTemplate()
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, r5;
        androidx.car.app.model.TemplateWrapper r2;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        boolean $z0, $z2;
        java.util.Deque $r7;
        java.lang.Object $r8;
        androidx.car.app.model.TemplateInfo $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: androidx.car.app.ScreenManager;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        r1 = virtualinvoke r0.<androidx.car.app.ScreenManager: androidx.car.app.Screen getTop()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requesting template from Screen ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r13);

     label1:
        r2 = virtualinvoke r1.<androidx.car.app.Screen: androidx.car.app.model.TemplateWrapper getTemplateWrapper()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        $r7 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        r4 = interfaceinvoke $r7.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.car.app.Screen) $r8;

        $r9 = virtualinvoke r5.<androidx.car.app.Screen: androidx.car.app.model.TemplateInfo getLastTemplateInfo()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        virtualinvoke r2.<androidx.car.app.model.TemplateWrapper: void setTemplateInfosForScreenStack(java.util.List)>(r3);

        return r2;
    }

    void destroyAndClearScreenStack()
    {
        androidx.car.app.ScreenManager r0;
        java.util.ArrayDeque r1, $r4;
        java.util.Iterator r2;
        androidx.car.app.Screen r3;
        java.util.Deque $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.car.app.ScreenManager;

        $r4 = new java.util.ArrayDeque;

        $r5 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>(java.util.Collection)>($r5);

        r1 = $r4;

        r2 = interfaceinvoke r1.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.car.app.Screen) $r7;

        specialinvoke r0.<androidx.car.app.ScreenManager: void stop(androidx.car.app.Screen,boolean)>(r3, 1);

        goto label1;

     label2:
        $r6 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        interfaceinvoke $r6.<java.util.Deque: void clear()>();

        return;
    }

    protected java.util.Deque getScreenStack()
    {
        androidx.car.app.ScreenManager r0;
        java.util.Deque $r1;

        r0 := @this: androidx.car.app.ScreenManager;

        $r1 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        return $r1;
    }

    private boolean foundMarker(java.lang.String)
    {
        androidx.car.app.ScreenManager r0;
        java.lang.String r1, $r3;
        androidx.car.app.Screen $r2;
        boolean $z0;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.car.app.ScreenManager: androidx.car.app.Screen getTop()>();

        $r3 = virtualinvoke $r2.<androidx.car.app.Screen: java.lang.String getMarker()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    private void pushInternal(androidx.car.app.Screen)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Deque $r3, $r4, $r6;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle $r7;
        androidx.lifecycle.Lifecycle$State $r8, $r9;
        androidx.lifecycle.Lifecycle$Event $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pushing screen ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to the top of the screen stack");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r15);

     label1:
        $r3 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $z1 = interfaceinvoke $r3.<java.util.Deque: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.car.app.ScreenManager: void moveToTop(androidx.car.app.Screen)>(r1);

        return;

     label2:
        $r4 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r5;

        specialinvoke r0.<androidx.car.app.ScreenManager: void pushAndStart(androidx.car.app.Screen,boolean)>(r1, 1);

        $r6 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $z2 = interfaceinvoke $r6.<java.util.Deque: boolean contains(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        return;

     label3:
        if r2 == null goto label4;

        specialinvoke r0.<androidx.car.app.ScreenManager: void stop(androidx.car.app.Screen,boolean)>(r2, 0);

     label4:
        $r7 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r8 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r9 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $z3 = virtualinvoke $r8.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r9);

        if $z3 == 0 goto label5;

        $r10 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r10);

     label5:
        return;
    }

    private void popInternal(java.util.List)
    {
        androidx.car.app.ScreenManager r0;
        java.util.List r1;
        androidx.car.app.Screen r2, r4;
        java.util.Iterator r3;
        androidx.car.app.CarContext $r5;
        java.lang.Object $r6, $r21;
        androidx.car.app.AppManager $r7;
        androidx.lifecycle.Lifecycle $r8, $r11;
        androidx.lifecycle.Lifecycle$State $r9, $r10, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Deque $r14;
        androidx.lifecycle.Lifecycle$Event $r15, $r27;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25;
        java.lang.String $r20, $r26;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: java.util.List;

        r2 = virtualinvoke r0.<androidx.car.app.ScreenManager: androidx.car.app.Screen getTop()>();

        virtualinvoke r2.<androidx.car.app.Screen: void setUseLastTemplateId(boolean)>(1);

        $r5 = r0.<androidx.car.app.ScreenManager: androidx.car.app.CarContext mCarContext>;

        $r6 = virtualinvoke $r5.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/AppManager;");

        $r7 = (androidx.car.app.AppManager) $r6;

        virtualinvoke $r7.<androidx.car.app.AppManager: void invalidate()>();

        $r8 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r9 = virtualinvoke $r8.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r10 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $z0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r10);

        if $z0 == 0 goto label1;

        $r27 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r27);

     label1:
        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r21 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.car.app.Screen) $r21;

        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z4 == 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Popping screen ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" off the screen stack");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r26);

     label3:
        specialinvoke r0.<androidx.car.app.ScreenManager: void stop(androidx.car.app.Screen,boolean)>(r4, 1);

        goto label2;

     label4:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is at the top of the screen stack");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r20);

     label5:
        $r11 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r12 = virtualinvoke $r11.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r13 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $z2 = virtualinvoke $r12.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r13);

        if $z2 == 0 goto label6;

        $r14 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $z3 = interfaceinvoke $r14.<java.util.Deque: boolean contains(java.lang.Object)>(r2);

        if $z3 == 0 goto label6;

        $r15 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r15);

     label6:
        return;
    }

    private void pushAndStart(androidx.car.app.Screen, boolean)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1;
        boolean z0, $z1, $z2, $z3;
        java.util.Deque $r2;
        androidx.lifecycle.Lifecycle $r3, $r10, $r14;
        androidx.lifecycle.Lifecycle$State $r4, $r5, $r11, $r12, $r15, $r16;
        androidx.car.app.CarContext $r6;
        java.lang.Object $r7;
        androidx.car.app.AppManager $r8;
        androidx.lifecycle.Lifecycle$Event $r9, $r13;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>(r1);

        if z0 == 0 goto label1;

        $r10 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r11 = virtualinvoke $r10.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r12 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $z2 = virtualinvoke $r11.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r12);

        if $z2 == 0 goto label1;

        $r13 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r13);

     label1:
        $r14 = virtualinvoke r1.<androidx.car.app.Screen: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r15 = virtualinvoke $r14.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r16 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $z3 = virtualinvoke $r15.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r16);

        if $z3 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r4 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $z1 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r5);

        if $z1 == 0 goto label3;

        $r6 = r0.<androidx.car.app.ScreenManager: androidx.car.app.CarContext mCarContext>;

        $r7 = virtualinvoke $r6.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/AppManager;");

        $r8 = (androidx.car.app.AppManager) $r7;

        virtualinvoke $r8.<androidx.car.app.AppManager: void invalidate()>();

        $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r9);

     label3:
        return;
    }

    private void stop(androidx.car.app.Screen, boolean)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1;
        boolean z0, $z1, $z2;
        androidx.lifecycle.Lifecycle$State r2, $r4, $r5;
        androidx.lifecycle.Lifecycle $r3;
        androidx.lifecycle.Lifecycle$Event $r6, $r7, $r8;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        z0 := @parameter1: boolean;

        $r3 = virtualinvoke r1.<androidx.car.app.Screen: androidx.lifecycle.Lifecycle getLifecycle()>();

        r2 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $z1 = virtualinvoke r2.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r4);

        if $z1 == 0 goto label1;

        $r8 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r8);

     label1:
        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $z2 = virtualinvoke r2.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r5);

        if $z2 == 0 goto label2;

        $r7 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r7);

     label2:
        if z0 == 0 goto label3;

        $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6);

     label3:
        return;
    }

    private void moveToTop(androidx.car.app.Screen)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.Screen r1, r2;
        java.util.Deque $r3, $r5;
        java.lang.Object $r4;
        androidx.lifecycle.Lifecycle $r6;
        androidx.lifecycle.Lifecycle$State $r7, $r8;
        boolean $z1;
        androidx.lifecycle.Lifecycle$Event $r9;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.Screen;

        $r3 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r4;

        if r2 == null goto label1;

        if r2 != r1 goto label2;

     label1:
        return;

     label2:
        $r5 = r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack>;

        interfaceinvoke $r5.<java.util.Deque: boolean remove(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.car.app.ScreenManager: void pushAndStart(androidx.car.app.Screen,boolean)>(r1, 0);

        specialinvoke r0.<androidx.car.app.ScreenManager: void stop(androidx.car.app.Screen,boolean)>(r2, 0);

        $r6 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        $r7 = virtualinvoke $r6.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r8 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $z1 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r8);

        if $z1 == 0 goto label3;

        $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke r1.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r9);

     label3:
        return;
    }

    protected void <init>(androidx.car.app.CarContext, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.ScreenManager r0;
        androidx.car.app.CarContext r1;
        androidx.lifecycle.Lifecycle r2, $r5;
        java.util.ArrayDeque r6;
        androidx.car.app.ScreenManager$LifecycleObserverImpl r7;
        androidx.lifecycle.LifecycleObserver r8;

        r0 := @this: androidx.car.app.ScreenManager;

        r1 := @parameter0: androidx.car.app.CarContext;

        r2 := @parameter1: androidx.lifecycle.Lifecycle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r6 = new java.util.ArrayDeque;

        specialinvoke r6.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.car.app.ScreenManager: java.util.Deque mScreenStack> = r6;

        r0.<androidx.car.app.ScreenManager: androidx.car.app.CarContext mCarContext> = r1;

        r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle> = r2;

        $r5 = r0.<androidx.car.app.ScreenManager: androidx.lifecycle.Lifecycle mAppLifecycle>;

        r7 = new androidx.car.app.ScreenManager$LifecycleObserverImpl;

        specialinvoke r7.<androidx.car.app.ScreenManager$LifecycleObserverImpl: void <init>(androidx.car.app.ScreenManager)>(r0);

        r8 = (androidx.lifecycle.LifecycleObserver) r7;

        virtualinvoke $r5.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>(r8);

        return;
    }

androidx.car.app.ScreenManager$LifecycleObserverImpl
<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>
    void <init>(androidx.car.app.ScreenManager)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.car.app.ScreenManager r1;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.car.app.ScreenManager;

        r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCreate(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        return;
    }

    public void onStart(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.Screen r2;
        androidx.car.app.ScreenManager $r3;
        java.util.Deque $r4;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle$Event $r6;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>;

        $r4 = virtualinvoke $r3.<androidx.car.app.ScreenManager: java.util.Deque getScreenStack()>();

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r5;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", "Screen stack was empty during lifecycle onStart");

        return;

     label1:
        $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6);

        return;
    }

    public void onResume(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.Screen r2;
        androidx.car.app.ScreenManager $r3;
        java.util.Deque $r4;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle$Event $r6;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>;

        $r4 = virtualinvoke $r3.<androidx.car.app.ScreenManager: java.util.Deque getScreenStack()>();

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r5;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", "Screen stack was empty during lifecycle onResume");

        return;

     label1:
        $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6);

        return;
    }

    public void onPause(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.Screen r2;
        androidx.car.app.ScreenManager $r3;
        java.util.Deque $r4;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle$Event $r6;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>;

        $r4 = virtualinvoke $r3.<androidx.car.app.ScreenManager: java.util.Deque getScreenStack()>();

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r5;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", "Screen stack was empty during lifecycle onPause");

        return;

     label1:
        $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6);

        return;
    }

    public void onStop(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.Screen r2;
        androidx.car.app.ScreenManager $r3;
        java.util.Deque $r4;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle$Event $r6;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>;

        $r4 = virtualinvoke $r3.<androidx.car.app.ScreenManager: java.util.Deque getScreenStack()>();

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peek()>();

        r2 = (androidx.car.app.Screen) $r5;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", "Screen stack was empty during lifecycle onStop");

        return;

     label1:
        $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP>;

        virtualinvoke r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6);

        return;
    }

    public void onDestroy(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.ScreenManager$LifecycleObserverImpl r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.ScreenManager $r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.lifecycle.LifecycleObserver r4;

        r0 := @this: androidx.car.app.ScreenManager$LifecycleObserverImpl;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.car.app.ScreenManager$LifecycleObserverImpl: androidx.car.app.ScreenManager this$0>;

        virtualinvoke $r2.<androidx.car.app.ScreenManager: void destroyAndClearScreenStack()>();

        $r3 = interfaceinvoke r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        r4 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r3.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>(r4);

        return;
    }

