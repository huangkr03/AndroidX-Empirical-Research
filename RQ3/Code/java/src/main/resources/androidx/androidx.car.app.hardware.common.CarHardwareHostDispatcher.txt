androidx.car.app.hardware.common.CarHardwareHostDispatcher
<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.HostDispatcher mHostDispatcher>
<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost mICarHardwareHost>
    public void <init>(androidx.car.app.HostDispatcher)
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        androidx.car.app.HostDispatcher r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        r1 := @parameter0: androidx.car.app.HostDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (androidx.car.app.HostDispatcher) $r2;

        r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.HostDispatcher mHostDispatcher> = $r3;

        return;
    }

    public void dispatchGetCarHardwareResult(int, androidx.car.app.serialization.Bundleable, androidx.car.app.hardware.ICarHardwareResult)
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.hardware.ICarHardwareResult r2;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r4;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        r2 := @parameter2: androidx.car.app.hardware.ICarHardwareResult;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.hardware.common.CarHardwareHostDispatcher,int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>(r0, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.CarHardwareHostDispatcher: java.lang.Object lambda$dispatchGetCarHardwareResult$0(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>("getCarHardwareResult", $r4);

        return;
    }

    public void dispatchSubscribeCarHardwareResult(int, androidx.car.app.serialization.Bundleable, androidx.car.app.hardware.ICarHardwareResult)
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.hardware.ICarHardwareResult r2;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r4;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        r2 := @parameter2: androidx.car.app.hardware.ICarHardwareResult;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.hardware.common.CarHardwareHostDispatcher,int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>(r0, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.CarHardwareHostDispatcher: java.lang.Object lambda$dispatchSubscribeCarHardwareResult$1(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>("subscribeCarHardwareResult", $r4);

        return;
    }

    public void dispatchUnsubscribeCarHardwareResult(int, androidx.car.app.serialization.Bundleable)
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r2;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        $r2 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.hardware.common.CarHardwareHostDispatcher,int,androidx.car.app.serialization.Bundleable)>(r0, i0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.CarHardwareHostDispatcher: java.lang.Object lambda$dispatchUnsubscribeCarHardwareResult$2(int,androidx.car.app.serialization.Bundleable)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>("unsubscribeCarHardwareResult", $r2);

        return;
    }

    private androidx.car.app.hardware.ICarHardwareHost getHost() throws android.os.RemoteException
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        androidx.car.app.HostDispatcher $r1;
        androidx.car.app.HostCall $r2;
        java.lang.Object $r3, $r5;
        androidx.car.app.hardware.ICarHardwareHost $r4, r6;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        r6 = r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost mICarHardwareHost>;

        if r6 != null goto label1;

        $r1 = r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.HostCall ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost lambda$getHost$3(androidx.car.app.ICarHost)>, methodtype: androidx.car.app.hardware.ICarHardwareHost __METHODTYPE__(androidx.car.app.ICarHost));

        $r3 = virtualinvoke $r1.<androidx.car.app.HostDispatcher: java.lang.Object dispatchForResult(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("car", "getHost(CarHardware)", $r2);

        $r4 = (androidx.car.app.hardware.ICarHardwareHost) $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r6 = (androidx.car.app.hardware.ICarHardwareHost) $r5;

        r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost mICarHardwareHost> = r6;

     label1:
        return r6;
    }

    private static androidx.car.app.hardware.ICarHardwareHost lambda$getHost$3(androidx.car.app.ICarHost) throws android.os.RemoteException
    {
        androidx.car.app.ICarHost r0;
        android.os.IBinder $r1;
        androidx.car.app.hardware.ICarHardwareHost $r2;

        r0 := @parameter0: androidx.car.app.ICarHost;

        $r1 = interfaceinvoke r0.<androidx.car.app.ICarHost: android.os.IBinder getHost(java.lang.String)>("hardware");

        $r2 = staticinvoke <androidx.car.app.hardware.ICarHardwareHost$Stub: androidx.car.app.hardware.ICarHardwareHost asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    private java.lang.Object lambda$dispatchUnsubscribeCarHardwareResult$2(int, androidx.car.app.serialization.Bundleable) throws android.os.RemoteException
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.hardware.ICarHardwareHost $r2;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        $r2 = specialinvoke r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost getHost()>();

        interfaceinvoke $r2.<androidx.car.app.hardware.ICarHardwareHost: void unsubscribeCarHardwareResult(int,androidx.car.app.serialization.Bundleable)>(i0, r1);

        return null;
    }

    private java.lang.Object lambda$dispatchSubscribeCarHardwareResult$1(int, androidx.car.app.serialization.Bundleable, androidx.car.app.hardware.ICarHardwareResult) throws android.os.RemoteException
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.hardware.ICarHardwareResult r2;
        androidx.car.app.hardware.ICarHardwareHost $r3;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        r2 := @parameter2: androidx.car.app.hardware.ICarHardwareResult;

        $r3 = specialinvoke r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost getHost()>();

        interfaceinvoke $r3.<androidx.car.app.hardware.ICarHardwareHost: void subscribeCarHardwareResult(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>(i0, r1, r2);

        return null;
    }

    private java.lang.Object lambda$dispatchGetCarHardwareResult$0(int, androidx.car.app.serialization.Bundleable, androidx.car.app.hardware.ICarHardwareResult) throws android.os.RemoteException
    {
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.hardware.ICarHardwareResult r2;
        androidx.car.app.hardware.ICarHardwareHost $r3;

        r0 := @this: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        r2 := @parameter2: androidx.car.app.hardware.ICarHardwareResult;

        $r3 = specialinvoke r0.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: androidx.car.app.hardware.ICarHardwareHost getHost()>();

        interfaceinvoke $r3.<androidx.car.app.hardware.ICarHardwareHost: void getCarHardwareResult(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>(i0, r1, r2);

        return null;
    }

