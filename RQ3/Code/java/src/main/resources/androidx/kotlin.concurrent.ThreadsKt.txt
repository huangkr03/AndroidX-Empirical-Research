kotlin.concurrent.ThreadsKt
    private static final java.lang.Object getOrSet(java.lang.ThreadLocal, kotlin.jvm.functions.Function0)
    {
        java.lang.ThreadLocal $r0;
        kotlin.jvm.functions.Function0 $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.ThreadLocal;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "default");

        $r2 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r2 != null goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

     label1:
        return $r2;
    }

    public static final java.lang.Thread thread(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0)
    {
        boolean $z0, $z1;
        java.lang.ClassLoader $r0;
        java.lang.String $r1;
        int $i0;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.concurrent.ThreadsKt$thread$thread$1 $r3;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 := @parameter2: java.lang.ClassLoader;

        $r1 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "block");

        $r3 = new kotlin.concurrent.ThreadsKt$thread$thread$1;

        specialinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void <init>(kotlin.jvm.functions.Function0)>($r2);

        if $z1 == 0 goto label1;

        virtualinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void setDaemon(boolean)>(1);

     label1:
        if $i0 <= 0 goto label2;

        virtualinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void setPriority(int)>($i0);

     label2:
        if $r1 == null goto label3;

        virtualinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void setName(java.lang.String)>($r1);

     label3:
        if $r0 == null goto label4;

        virtualinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void setContextClassLoader(java.lang.ClassLoader)>($r0);

     label4:
        if $z0 == 0 goto label5;

        virtualinvoke $r3.<kotlin.concurrent.ThreadsKt$thread$thread$1: void start()>();

     label5:
        return $r3;
    }

    public static java.lang.Thread thread$default(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        java.lang.ClassLoader $r0;
        java.lang.String $r1;
        kotlin.jvm.functions.Function0 $r2;
        int $i0, $i1, $i2;
        java.lang.Thread $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 := @parameter2: java.lang.ClassLoader;

        $r1 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r2 := @parameter5: kotlin.jvm.functions.Function0;

        $i0 := @parameter6: int;

        $r4 := @parameter7: java.lang.Object;

        $i2 = $i0 & 1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label1;

     label1:
        $i2 = $i0 & 2;

        if $i2 == 0 goto label2;

        $z1 = 0;

        goto label2;

     label2:
        $i2 = $i0 & 4;

        if $i2 == 0 goto label3;

        $r0 = null;

        goto label3;

     label3:
        $i2 = $i0 & 8;

        if $i2 == 0 goto label4;

        $r1 = null;

        goto label4;

     label4:
        $i0 = $i0 & 16;

        if $i0 == 0 goto label5;

        $i1 = -1;

        goto label5;

     label5:
        $r3 = staticinvoke <kotlin.concurrent.ThreadsKt: java.lang.Thread thread(boolean,boolean,java.lang.ClassLoader,java.lang.String,int,kotlin.jvm.functions.Function0)>($z0, $z1, $r0, $r1, $i1, $r2);

        return $r3;
    }

