io.grpc.okhttp.internal.proxy.HttpUrl
<io.grpc.okhttp.internal.proxy.HttpUrl: char[] HEX_DIGITS>
<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String host>
<io.grpc.okhttp.internal.proxy.HttpUrl: int port>
<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String scheme>
<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url>
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <io.grpc.okhttp.internal.proxy.HttpUrl: char[] HEX_DIGITS> = $r0;

        return;
    }

    private void <init>(io.grpc.okhttp.internal.proxy.HttpUrl$Builder)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r1;
        java.lang.String $r2;
        int $i0;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        $r1 := @parameter0: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String scheme> = $r2;

        $r2 = $r1.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String host> = $r2;

        $i0 = virtualinvoke $r1.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int effectivePort()>();

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: int port> = $i0;

        $r2 = virtualinvoke $r1.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String toString()>();

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url> = $r2;

        return;
    }

    void <init>(io.grpc.okhttp.internal.proxy.HttpUrl$Builder, io.grpc.okhttp.internal.proxy.HttpUrl-IA)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r1;
        io.grpc.okhttp.internal.proxy.HttpUrl-IA $r2;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        $r1 := @parameter0: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $r2 := @parameter1: io.grpc.okhttp.internal.proxy.HttpUrl-IA;

        specialinvoke $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: void <init>(io.grpc.okhttp.internal.proxy.HttpUrl$Builder)>($r1);

        return;
    }

    static int decodeHexDigit(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        $i1 = $c0 + -48;

        return $i1;

     label1:
        if $c0 < 97 goto label2;

        if $c0 > 102 goto label2;

        $i1 = $c0 + -87;

        return $i1;

     label2:
        if $c0 < 65 goto label3;

        if $c0 > 70 goto label3;

        $i1 = $c0 + -55;

        return $i1;

     label3:
        return -1;
    }

    public static int defaultPort(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        return 80;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z0 == 0 goto label2;

        return 443;

     label2:
        return -1;
    }

    static java.lang.String percentDecode(java.lang.String, int, int, boolean)
    {
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.String $r0;
        char $c3;
        okio.Buffer $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 = $i0;

     label1:
        if $i2 >= $i1 goto label4;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        if $c3 == 37 goto label3;

        if $c3 != 43 goto label2;

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r0, $i0, $i2);

        staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0);

        $r0 = virtualinvoke $r1.<okio.Buffer: java.lang.String readUtf8()>();

        return $r0;

     label4:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;
    }

    static void percentDecode(okio.Buffer, java.lang.String, int, int, boolean)
    {
        okio.Buffer $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;
        char $c5;

        $r0 := @parameter0: okio.Buffer;

        $r1 := @parameter1: java.lang.String;

        $i1 := @parameter2: int;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

     label1:
        if $i1 >= $i0 goto label5;

        $i2 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i1);

        if $i2 != 37 goto label2;

        $i3 = $i1 + 2;

        if $i3 >= $i0 goto label2;

        $i4 = $i1 + 1;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i6 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: int decodeHexDigit(char)>($c5);

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        $i4 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: int decodeHexDigit(char)>($c5);

        if $i6 == -1 goto label3;

        if $i4 == -1 goto label3;

        $i1 = $i6 << 4;

        $i1 = $i1 + $i4;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($i1);

        $i1 = $i3;

        goto label4;

     label2:
        if $i2 != 43 goto label3;

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(32);

        goto label4;

     label3:
        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i2);

     label4:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        $i1 = $i1 + $i2;

        goto label1;

     label5:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0, $r2;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof io.grpc.okhttp.internal.proxy.HttpUrl;

        if $z0 == 0 goto label1;

        $r2 = (io.grpc.okhttp.internal.proxy.HttpUrl) $r1;

        $r3 = $r2.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url>;

        $r4 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        $r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String host()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        java.lang.String r1;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String host>;

        return r1;
    }

    public int port()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        i0 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: int port>;

        return i0;
    }

    public java.lang.String toString()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl $r0;
        java.lang.String r1;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl;

        r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String url>;

        return r1;
    }

io.grpc.okhttp.internal.proxy.HttpUrl$Builder
<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>
<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int port>
<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>
    public void <init>()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int port> = -1;

        return;
    }

    private static java.lang.String canonicalizeHost(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        boolean $z0;
        java.net.InetAddress $r1;
        byte[] $r2;
        java.lang.AssertionError $r3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r1 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>($r0, 1, $i0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.net.InetAddress: byte[] getAddress()>();

        $i0 = lengthof $r2;

        if $i0 != 16 goto label2;

        $r0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String inet6AddressToAscii(byte[])>($r2);

        return $r0;

     label2:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $r0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String domainToAscii(java.lang.String)>($r0);

        return $r0;
    }

    private static boolean containsInvalidHostnameAsciiCodes(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label5;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 <= 31 goto label4;

        if $c2 < 127 goto label2;

        return 1;

     label2:
        $r1 = " #%/:?@[\\]";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c2);

        if $i1 == -1 goto label3;

        return 1;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static boolean decodeIpv4Suffix(java.lang.String, int, int, byte[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte[] $r0;
        java.lang.String $r1;
        char $c5;
        byte $b7;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r0 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = $i2;

     label01:
        if $i1 >= $i0 goto label11;

        $i4 = lengthof $r0;

        if $i3 != $i4 goto label02;

        return 0;

     label02:
        if $i3 == $i2 goto label04;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $c5 == 46 goto label03;

        return 0;

     label03:
        $i1 = $i1 + 1;

        goto label04;

     label04:
        $i4 = $i1;

        $i6 = 0;

     label05:
        if $i4 >= $i0 goto label09;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        if $c5 < 48 goto label09;

        if $c5 <= 57 goto label06;

        goto label09;

     label06:
        if $i6 != 0 goto label07;

        if $i1 == $i4 goto label07;

        return 0;

     label07:
        $i6 = $i6 * 10;

        $i6 = $i6 + $c5;

        $i6 = $i6 + -48;

        if $i6 <= 255 goto label08;

        return 0;

     label08:
        $i4 = $i4 + 1;

        goto label05;

     label09:
        $i1 = $i4 - $i1;

        if $i1 != 0 goto label10;

        return 0;

     label10:
        $b7 = (byte) $i6;

        $r0[$i3] = $b7;

        $i3 = $i3 + 1;

        $i1 = $i4;

        goto label01;

     label11:
        $i1 = $i2 + 4;

        if $i3 == $i1 goto label12;

        return 0;

     label12:
        return 1;
    }

    private static java.net.InetAddress decodeIpv6(java.lang.String, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        byte[] $r0;
        java.lang.String $r1;
        boolean $z0;
        char $c6;
        byte $b9;
        java.net.InetAddress $r2;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r0 = newarray (byte)[16];

        $i2 = 0;

        $i3 = -1;

        $i4 = -1;

     label01:
        if $i1 >= $i0 goto label16;

        if $i2 != 16 goto label02;

        return null;

     label02:
        $i5 = $i1 + 2;

        if $i5 > $i0 goto label05;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i1, "::", 0, 2);

        if $z0 == 0 goto label05;

        if $i3 == -1 goto label03;

        return null;

     label03:
        $i2 = $i2 + 2;

        if $i5 != $i0 goto label04;

        $i3 = $i2;

        goto label16;

     label04:
        $i3 = $i2;

        $i4 = $i5;

        goto label10;

     label05:
        if $i2 == 0 goto label09;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i1, ":", 0, 1);

        if $z0 == 0 goto label06;

        $i4 = $i1 + 1;

        goto label10;

     label06:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i1, ".", 0, 1);

        if $z0 == 0 goto label08;

        $i1 = $i2 + -2;

        $z0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)>($r1, $i4, $i0, $r0, $i1);

        if $z0 != 0 goto label07;

        return null;

     label07:
        $i2 = $i2 + 2;

        goto label16;

     label08:
        return null;

     label09:
        $i4 = $i1;

     label10:
        $i1 = $i4;

        $i5 = 0;

     label11:
        if $i1 >= $i0 goto label13;

        $c6 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $i7 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: int decodeHexDigit(char)>($c6);

        if $i7 != -1 goto label12;

        goto label13;

     label12:
        $i5 = $i5 << 4;

        $i5 = $i5 + $i7;

        $i1 = $i1 + 1;

        goto label11;

     label13:
        $i7 = $i1 - $i4;

        if $i7 == 0 goto label15;

        if $i7 <= 4 goto label14;

        return null;

     label14:
        $i7 = $i2 + 1;

        $i8 = $i5 >>> 8;

        $i8 = $i8 & 255;

        $b9 = (byte) $i8;

        $r0[$i2] = $b9;

        $i2 = $i7 + 1;

        $i5 = $i5 & 255;

        $b9 = (byte) $i5;

        $r0[$i7] = $b9;

        goto label01;

     label15:
        return null;

     label16:
        if $i2 == 16 goto label18;

        if $i3 != -1 goto label17;

        return null;

     label17:
        $i1 = $i2 - $i3;

        $i0 = 16 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i3, $r0, $i0, $i1);

        $i1 = 16 - $i2;

        $i1 = $i1 + $i3;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r0, $i3, $i1, 0);

     label18:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r0);

        return $r2;
    }

    private static java.lang.String domainToAscii(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Locale $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0);

        $r1 = <java.util.Locale: java.util.Locale US>;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>();

     label2:
        if $z0 == 0 goto label3;

        return null;

     label3:
        $z0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0);

        if $z0 == 0 goto label4;

        return null;

     label4:
        return $r0;

     label5:
        $r2 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
    }

    private static java.lang.String inet6AddressToAscii(byte[])
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5;
        okio.Buffer $r2;
        short $s7;
        long $l8;

        $r1 := @parameter0: byte[];

        $i0 = -1;

        $i1 = 0;

        $i2 = 0;

        $i3 = 0;

     label1:
        $i4 = lengthof $r1;

        if $i2 >= $i4 goto label5;

        $i4 = $i2;

     label2:
        if $i4 >= 16 goto label3;

        $b5 = $r1[$i4];

        if $b5 != 0 goto label3;

        $i6 = $i4 + 1;

        $b5 = $r1[$i6];

        if $b5 != 0 goto label3;

        $i4 = $i4 + 2;

        goto label2;

     label3:
        $i6 = $i4 - $i2;

        if $i6 <= $i3 goto label4;

        $i0 = $i2;

        $i3 = $i6;

        goto label4;

     label4:
        $i2 = $i4 + 2;

        goto label1;

     label5:
        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

     label6:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label9;

        if $i1 != $i0 goto label7;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeByte(int)>(58);

        $i1 = $i1 + $i3;

        if $i1 != 16 goto label6;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeByte(int)>(58);

        goto label6;

     label7:
        if $i1 <= 0 goto label8;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeByte(int)>(58);

     label8:
        $b5 = $r1[$i1];

        $s7 = $b5 & 255;

        $i2 = $s7 << 8;

        $i4 = $i1 + 1;

        $b5 = $r1[$i4];

        $s7 = $b5 & 255;

        $i2 = $i2 | $s7;

        $l8 = (long) $i2;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>($l8);

        $i1 = $i1 + 2;

        goto label6;

     label9:
        $r0 = virtualinvoke $r2.<okio.Buffer: java.lang.String readUtf8()>();

        return $r0;
    }

    public io.grpc.okhttp.internal.proxy.HttpUrl build()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        java.lang.String $r1;
        io.grpc.okhttp.internal.proxy.HttpUrl $r2;
        java.lang.IllegalStateException $r3;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>;

        if $r1 == null goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>;

        if $r1 == null goto label1;

        $r2 = new io.grpc.okhttp.internal.proxy.HttpUrl;

        specialinvoke $r2.<io.grpc.okhttp.internal.proxy.HttpUrl: void <init>(io.grpc.okhttp.internal.proxy.HttpUrl$Builder,io.grpc.okhttp.internal.proxy.HttpUrl-IA)>($r0, null);

        return $r2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("host == null");

        throw $r3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("scheme == null");

        throw $r3;
    }

    int effectivePort()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $i0 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int port>;

        if $i0 == -1 goto label1;

        return $i0;

     label1:
        $r1 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>;

        $i0 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: int defaultPort(java.lang.String)>($r1);

        return $i0;
    }

    public io.grpc.okhttp.internal.proxy.HttpUrl$Builder host(java.lang.String)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0);

        if $r2 == null goto label1;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host> = $r2;

        return $r0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected host: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host == null");

        throw $r3;
    }

    public io.grpc.okhttp.internal.proxy.HttpUrl$Builder port(int)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        if $i0 > 65535 goto label1;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int port> = $i0;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected port: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public io.grpc.okhttp.internal.proxy.HttpUrl$Builder scheme(java.lang.String)
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("http");

        if $z0 == 0 goto label1;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme> = "http";

        return $r0;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https");

        if $z0 == 0 goto label2;

        $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme> = "https";

        return $r0;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected scheme: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scheme == null");

        throw $r2;
    }

    public java.lang.String toString()
    {
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r2 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        if $i0 == -1 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        goto label2;

     label1:
        $r2 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String host>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label2:
        $i0 = virtualinvoke $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: int effectivePort()>();

        $r2 = $r0.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: java.lang.String scheme>;

        $i1 = staticinvoke <io.grpc.okhttp.internal.proxy.HttpUrl: int defaultPort(java.lang.String)>($r2);

        if $i0 == $i1 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

