kotlinx.coroutines.DebugKt
<kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED>
<kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID>
<kotlinx.coroutines.DebugKt: boolean DEBUG>
<kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES>
    static void <clinit>()
    {
        boolean $z0, $z1;
        java.lang.String $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.util.concurrent.atomic.AtomicLong $r3;

        $z0 = 0;

        <kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED> = 0;

        $r0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>("kotlinx.coroutines.debug");

        if $r0 == null goto label08;

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 0: goto label05;
            case 3551: goto label04;
            case 109935: goto label03;
            case 3005871: goto label02;
            default: goto label01;
        };

     label01:
        goto label07;

     label02:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z1 == 0 goto label01;

        goto label08;

     label03:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z1 == 0 goto label01;

        $z1 = 0;

        goto label09;

     label04:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z1 == 0 goto label01;

        goto label06;

     label05:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label01;

     label06:
        $z1 = 1;

        goto label09;

     label07:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System property \'kotlinx.coroutines.debug\' has unrecognized value \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label08:
        $z1 = 0;

     label09:
        <kotlinx.coroutines.DebugKt: boolean DEBUG> = $z1;

        if $z1 == 0 goto label10;

        $z1 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: boolean systemProp(java.lang.String,boolean)>("kotlinx.coroutines.stacktrace.recovery", 1);

        if $z1 == 0 goto label10;

        $z0 = 1;

        goto label10;

     label10:
        <kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES> = $z0;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID> = $r3;

        return;
    }

    public static final boolean getASSERTIONS_ENABLED()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED>;

        return z0;
    }

    public static final java.util.concurrent.atomic.AtomicLong getCOROUTINE_ID()
    {
        java.util.concurrent.atomic.AtomicLong r0;

        r0 = <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID>;

        return r0;
    }

    public static final boolean getDEBUG()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean DEBUG>;

        return z0;
    }

    public static final boolean getRECOVER_STACK_TRACES()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES>;

        return z0;
    }

