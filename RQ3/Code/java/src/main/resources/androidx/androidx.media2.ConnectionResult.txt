androidx.media2.ConnectionResult
<androidx.media2.ConnectionResult: int mVersion>
<androidx.media2.ConnectionResult: android.os.IBinder mSessionBinder>
<androidx.media2.ConnectionResult: androidx.media2.IMediaSession mSessionStub>
<androidx.media2.ConnectionResult: android.app.PendingIntent mSessionActivity>
<androidx.media2.ConnectionResult: int mPlayerState>
<androidx.media2.ConnectionResult: androidx.media2.MediaItem mCurrentMediaItem>
<androidx.media2.ConnectionResult: long mPositionEventTimeMs>
<androidx.media2.ConnectionResult: long mPositionMs>
<androidx.media2.ConnectionResult: float mPlaybackSpeed>
<androidx.media2.ConnectionResult: long mBufferedPositionMs>
<androidx.media2.ConnectionResult: androidx.media2.MediaController$PlaybackInfo mPlaybackInfo>
<androidx.media2.ConnectionResult: int mRepeatMode>
<androidx.media2.ConnectionResult: int mShuffleMode>
<androidx.media2.ConnectionResult: androidx.media2.ParcelImplListSlice mPlaylistSlice>
<androidx.media2.ConnectionResult: androidx.media2.SessionCommandGroup mAllowedCommands>
    void <init>()
    {
        androidx.media2.ConnectionResult r0;

        r0 := @this: androidx.media2.ConnectionResult;

        specialinvoke r0.<androidx.versionedparcelable.CustomVersionedParcelable: void <init>()>();

        return;
    }

    void <init>(androidx.media2.MediaSessionStub, androidx.media2.MediaSession$MediaSessionImpl, androidx.media2.SessionCommandGroup)
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.MediaSessionStub r1;
        androidx.media2.MediaSession$MediaSessionImpl r2;
        androidx.media2.SessionCommandGroup r3;
        java.util.List r4;
        int $i0, $i4, $i5;
        androidx.media2.MediaItem $r5;
        long $l1, $l2, $l3;
        float $f0;
        androidx.media2.MediaController$PlaybackInfo $r6;
        android.app.PendingIntent $r7;
        boolean $z0;
        androidx.media2.ParcelImplListSlice $r8;

        r0 := @this: androidx.media2.ConnectionResult;

        r1 := @parameter0: androidx.media2.MediaSessionStub;

        r2 := @parameter1: androidx.media2.MediaSession$MediaSessionImpl;

        r3 := @parameter2: androidx.media2.SessionCommandGroup;

        specialinvoke r0.<androidx.versionedparcelable.CustomVersionedParcelable: void <init>()>();

        r0.<androidx.media2.ConnectionResult: androidx.media2.IMediaSession mSessionStub> = r1;

        $i0 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: int getPlayerState()>();

        r0.<androidx.media2.ConnectionResult: int mPlayerState> = $i0;

        $r5 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: androidx.media2.MediaItem getCurrentMediaItem()>();

        r0.<androidx.media2.ConnectionResult: androidx.media2.MediaItem mCurrentMediaItem> = $r5;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<androidx.media2.ConnectionResult: long mPositionEventTimeMs> = $l1;

        $l2 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: long getCurrentPosition()>();

        r0.<androidx.media2.ConnectionResult: long mPositionMs> = $l2;

        $f0 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: float getPlaybackSpeed()>();

        r0.<androidx.media2.ConnectionResult: float mPlaybackSpeed> = $f0;

        $l3 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: long getBufferedPosition()>();

        r0.<androidx.media2.ConnectionResult: long mBufferedPositionMs> = $l3;

        $r6 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: androidx.media2.MediaController$PlaybackInfo getPlaybackInfo()>();

        r0.<androidx.media2.ConnectionResult: androidx.media2.MediaController$PlaybackInfo mPlaybackInfo> = $r6;

        $i4 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: int getRepeatMode()>();

        r0.<androidx.media2.ConnectionResult: int mRepeatMode> = $i4;

        $i5 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: int getShuffleMode()>();

        r0.<androidx.media2.ConnectionResult: int mShuffleMode> = $i5;

        $r7 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: android.app.PendingIntent getSessionActivity()>();

        r0.<androidx.media2.ConnectionResult: android.app.PendingIntent mSessionActivity> = $r7;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<androidx.media2.SessionCommandGroup: boolean hasCommand(int)>(10005);

        if $z0 == 0 goto label1;

        r4 = interfaceinvoke r2.<androidx.media2.MediaSession$MediaSessionImpl: java.util.List getPlaylist()>();

        $r8 = staticinvoke <androidx.media2.MediaUtils: androidx.media2.ParcelImplListSlice convertMediaItemListToParcelImplListSlice(java.util.List)>(r4);

        r0.<androidx.media2.ConnectionResult: androidx.media2.ParcelImplListSlice mPlaylistSlice> = $r8;

        goto label2;

     label1:
        r0.<androidx.media2.ConnectionResult: androidx.media2.ParcelImplListSlice mPlaylistSlice> = null;

     label2:
        r0.<androidx.media2.ConnectionResult: androidx.media2.SessionCommandGroup mAllowedCommands> = r3;

        r0.<androidx.media2.ConnectionResult: int mVersion> = 0;

        return;
    }

    public androidx.media2.IMediaSession getSessionStub()
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.IMediaSession $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.IMediaSession mSessionStub>;

        return $r1;
    }

    public android.app.PendingIntent getSessionActivity()
    {
        androidx.media2.ConnectionResult r0;
        android.app.PendingIntent $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: android.app.PendingIntent mSessionActivity>;

        return $r1;
    }

    public int getPlayerState()
    {
        androidx.media2.ConnectionResult r0;
        int $i0;

        r0 := @this: androidx.media2.ConnectionResult;

        $i0 = r0.<androidx.media2.ConnectionResult: int mPlayerState>;

        return $i0;
    }

    public androidx.media2.MediaItem getCurrentMediaItem()
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.MediaItem $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.MediaItem mCurrentMediaItem>;

        return $r1;
    }

    public long getPositionEventTimeMs()
    {
        androidx.media2.ConnectionResult r0;
        long $l0;

        r0 := @this: androidx.media2.ConnectionResult;

        $l0 = r0.<androidx.media2.ConnectionResult: long mPositionEventTimeMs>;

        return $l0;
    }

    public long getPositionMs()
    {
        androidx.media2.ConnectionResult r0;
        long $l0;

        r0 := @this: androidx.media2.ConnectionResult;

        $l0 = r0.<androidx.media2.ConnectionResult: long mPositionMs>;

        return $l0;
    }

    public float getPlaybackSpeed()
    {
        androidx.media2.ConnectionResult r0;
        float $f0;

        r0 := @this: androidx.media2.ConnectionResult;

        $f0 = r0.<androidx.media2.ConnectionResult: float mPlaybackSpeed>;

        return $f0;
    }

    public long getBufferedPositionMs()
    {
        androidx.media2.ConnectionResult r0;
        long $l0;

        r0 := @this: androidx.media2.ConnectionResult;

        $l0 = r0.<androidx.media2.ConnectionResult: long mBufferedPositionMs>;

        return $l0;
    }

    public androidx.media2.MediaController$PlaybackInfo getPlaybackInfo()
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.MediaController$PlaybackInfo $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.MediaController$PlaybackInfo mPlaybackInfo>;

        return $r1;
    }

    public int getRepeatMode()
    {
        androidx.media2.ConnectionResult r0;
        int $i0;

        r0 := @this: androidx.media2.ConnectionResult;

        $i0 = r0.<androidx.media2.ConnectionResult: int mRepeatMode>;

        return $i0;
    }

    public int getShuffleMode()
    {
        androidx.media2.ConnectionResult r0;
        int $i0;

        r0 := @this: androidx.media2.ConnectionResult;

        $i0 = r0.<androidx.media2.ConnectionResult: int mShuffleMode>;

        return $i0;
    }

    public androidx.media2.ParcelImplListSlice getPlaylistSlice()
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.ParcelImplListSlice $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.ParcelImplListSlice mPlaylistSlice>;

        return $r1;
    }

    public androidx.media2.SessionCommandGroup getAllowedCommands()
    {
        androidx.media2.ConnectionResult r0;
        androidx.media2.SessionCommandGroup $r1;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.SessionCommandGroup mAllowedCommands>;

        return $r1;
    }

    public int getVersion()
    {
        androidx.media2.ConnectionResult r0;
        int $i0;

        r0 := @this: androidx.media2.ConnectionResult;

        $i0 = r0.<androidx.media2.ConnectionResult: int mVersion>;

        return $i0;
    }

    public void onPreParceling(boolean)
    {
        androidx.media2.ConnectionResult r0;
        boolean z0;
        androidx.media2.IMediaSession $r1;
        android.os.IBinder $r2;

        r0 := @this: androidx.media2.ConnectionResult;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media2.ConnectionResult: androidx.media2.IMediaSession mSessionStub>;

        $r2 = (android.os.IBinder) $r1;

        r0.<androidx.media2.ConnectionResult: android.os.IBinder mSessionBinder> = $r2;

        return;
    }

    public void onPostParceling()
    {
        androidx.media2.ConnectionResult r0;
        android.os.IBinder $r1;
        androidx.media2.IMediaSession $r2;

        r0 := @this: androidx.media2.ConnectionResult;

        $r1 = r0.<androidx.media2.ConnectionResult: android.os.IBinder mSessionBinder>;

        $r2 = staticinvoke <androidx.media2.IMediaSession$Stub: androidx.media2.IMediaSession asInterface(android.os.IBinder)>($r1);

        r0.<androidx.media2.ConnectionResult: androidx.media2.IMediaSession mSessionStub> = $r2;

        r0.<androidx.media2.ConnectionResult: android.os.IBinder mSessionBinder> = null;

        return;
    }

