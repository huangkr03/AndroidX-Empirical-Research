androidx.camera.core.UseCase
<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>
<androidx.camera.core.UseCase: java.lang.Object mCameraLock>
<androidx.camera.core.UseCase: androidx.camera.core.UseCase$State mState>
<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mExtendedConfig>
<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>
<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>
<androidx.camera.core.UseCase: android.util.Size mAttachedResolution>
<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCameraConfig>
<androidx.camera.core.UseCase: android.graphics.Rect mViewPortCropRect>
<androidx.camera.core.UseCase: android.graphics.Matrix mSensorToBufferTransformMatrix>
<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>
<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig mAttachedSessionConfig>
    protected void <init>(androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.UseCaseConfig r1;
        java.util.HashSet $r2;
        java.lang.Object $r3;
        androidx.camera.core.UseCase$State $r4;
        android.graphics.Matrix $r5;
        androidx.camera.core.impl.SessionConfig $r6;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.UseCase: java.lang.Object mCameraLock> = $r3;

        $r4 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE>;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.UseCase$State mState> = $r4;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.camera.core.UseCase: android.graphics.Matrix mSensorToBufferTransformMatrix> = $r5;

        $r6 = staticinvoke <androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.SessionConfig defaultEmptySessionConfig()>();

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig mAttachedSessionConfig> = $r6;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig> = r1;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig> = r1;

        return;
    }

<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean,androidx.camera.core.impl.UseCaseConfigFactory)>
<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>
    public androidx.camera.core.impl.UseCaseConfig mergeConfigs(androidx.camera.core.impl.CameraInfoInternal, androidx.camera.core.impl.UseCaseConfig, androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.camera.core.impl.UseCaseConfig r2, r3, $r4, $r18, $r20, $r32;
        java.util.Set $r5, $r10;
        androidx.camera.core.impl.Config$Option $r6, $r7, $r8, $r13, $r22, r26, r27, r29, r30;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r11, $r16, $r17, $r21;
        java.lang.String $r12, $r14;
        androidx.camera.core.impl.Config$OptionPriority $r15, $r19;
        androidx.camera.core.impl.MutableOptionsBundle r24;
        java.util.Iterator r25, r28;
        androidx.camera.core.impl.UseCaseConfig$Builder $r31;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        r2 := @parameter1: androidx.camera.core.impl.UseCaseConfig;

        r3 := @parameter2: androidx.camera.core.impl.UseCaseConfig;

        if r3 == null goto label1;

        r24 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r3);

        $r22 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object removeOption(androidx.camera.core.impl.Config$Option)>($r22);

        goto label2;

     label1:
        r24 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

     label2:
        $r4 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        $r5 = interfaceinvoke $r4.<androidx.camera.core.impl.UseCaseConfig: java.util.Set listOptions()>();

        r25 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r17 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (androidx.camera.core.impl.Config$Option) $r17;

        r27 = r26;

        $r18 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        $r19 = interfaceinvoke $r18.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$OptionPriority getOptionPriority(androidx.camera.core.impl.Config$Option)>(r26);

        $r20 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        $r21 = interfaceinvoke $r20.<androidx.camera.core.impl.UseCaseConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>(r27);

        virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,androidx.camera.core.impl.Config$OptionPriority,java.lang.Object)>(r27, $r19, $r21);

        goto label3;

     label4:
        if r2 == null goto label7;

        $r10 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig: java.util.Set listOptions()>();

        r28 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r11 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (androidx.camera.core.impl.Config$Option) $r11;

        r30 = r29;

        $r12 = virtualinvoke r30.<androidx.camera.core.impl.Config$Option: java.lang.String getId()>();

        $r13 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        $r14 = virtualinvoke $r13.<androidx.camera.core.impl.Config$Option: java.lang.String getId()>();

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label6;

        goto label5;

     label6:
        $r15 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$OptionPriority getOptionPriority(androidx.camera.core.impl.Config$Option)>(r29);

        $r16 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>(r30);

        virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,androidx.camera.core.impl.Config$OptionPriority,java.lang.Object)>(r30, $r15, $r16);

        goto label5;

     label7:
        $r6 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        $z0 = virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r6);

        if $z0 == 0 goto label8;

        $r7 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $z1 = virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r7);

        if $z1 == 0 goto label8;

        $r8 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        virtualinvoke r24.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object removeOption(androidx.camera.core.impl.Config$Option)>($r8);

     label8:
        $r31 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>(r24);

        $r32 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal,androidx.camera.core.impl.UseCaseConfig$Builder)>(r1, $r31);

        return $r32;
    }

    protected androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal, androidx.camera.core.impl.UseCaseConfig$Builder)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.camera.core.impl.UseCaseConfig$Builder r2;
        androidx.camera.core.impl.UseCaseConfig $r3;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        r2 := @parameter1: androidx.camera.core.impl.UseCaseConfig$Builder;

        $r3 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        return $r3;
    }

    protected boolean setTargetRotationInternal(int)
    {
        androidx.camera.core.UseCase r0;
        int i0, i1;
        androidx.camera.core.impl.ImageOutputConfig r1;
        androidx.camera.core.impl.UseCaseConfig$Builder r2;
        androidx.camera.core.impl.CameraInternal r3;
        androidx.camera.core.impl.UseCaseConfig $r4, $r5, $r6, $r8, $r9, $r10, $r11;
        androidx.camera.core.impl.CameraInfoInternal $r7;

        r0 := @this: androidx.camera.core.UseCase;

        i0 := @parameter0: int;

        $r4 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r1 = (androidx.camera.core.impl.ImageOutputConfig) $r4;

        i1 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: int getTargetRotation(int)>(-1);

        if i1 == -1 goto label1;

        if i1 == i0 goto label4;

     label1:
        $r5 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        r2 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>($r5);

        staticinvoke <androidx.camera.core.internal.utils.UseCaseConfigUtil: void updateTargetRotationAndRelatedConfigs(androidx.camera.core.impl.UseCaseConfig$Builder,int)>(r2, i0);

        $r6 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig> = $r6;

        r3 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal getCamera()>();

        if r3 != null goto label2;

        $r11 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig> = $r11;

        goto label3;

     label2:
        $r7 = interfaceinvoke r3.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r9 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mExtendedConfig>;

        $r8 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCameraConfig>;

        $r10 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mergeConfigs(androidx.camera.core.impl.CameraInfoInternal,androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.UseCaseConfig)>($r7, $r9, $r8);

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig> = $r10;

     label3:
        return 1;

     label4:
        return 0;
    }

    protected int getTargetRotationInternal()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.UseCaseConfig $r1;
        androidx.camera.core.impl.ImageOutputConfig $r2;
        int $i0;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        $r2 = (androidx.camera.core.impl.ImageOutputConfig) $r1;

        $i0 = interfaceinvoke $r2.<androidx.camera.core.impl.ImageOutputConfig: int getTargetRotation(int)>(0);

        return $i0;
    }

    protected int getAppTargetRotation()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.UseCaseConfig $r1;
        androidx.camera.core.impl.ImageOutputConfig $r2;
        int $i0;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        $r2 = (androidx.camera.core.impl.ImageOutputConfig) $r1;

        $i0 = interfaceinvoke $r2.<androidx.camera.core.impl.ImageOutputConfig: int getAppTargetRotation(int)>(-1);

        return $i0;
    }

    protected int getRelativeRotation(androidx.camera.core.impl.CameraInternal)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInternal r1;
        androidx.camera.core.impl.CameraInfoInternal $r2;
        int $i0, $i1;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        $r2 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $i0 = virtualinvoke r0.<androidx.camera.core.UseCase: int getTargetRotationInternal()>();

        $i1 = interfaceinvoke $r2.<androidx.camera.core.impl.CameraInfoInternal: int getSensorRotationDegrees(int)>($i0);

        return $i1;
    }

    protected void updateSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.SessionConfig r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.DeferrableSurface r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Class $r6, $r7;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig mAttachedSessionConfig> = r1;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.DeferrableSurface) $r5;

        $r6 = virtualinvoke r3.<androidx.camera.core.impl.DeferrableSurface: java.lang.Class getContainerClass()>();

        if $r6 != null goto label2;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r3.<androidx.camera.core.impl.DeferrableSurface: void setContainerClass(java.lang.Class)>($r7);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addStateChangeCallback(androidx.camera.core.UseCase$StateChangeCallback)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.UseCase$StateChangeCallback r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.UseCase$StateChangeCallback;

        $r2 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void removeStateChangeCallback(androidx.camera.core.UseCase$StateChangeCallback)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.UseCase$StateChangeCallback r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.UseCase$StateChangeCallback;

        $r2 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public androidx.camera.core.impl.SessionConfig getSessionConfig()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.SessionConfig $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig mAttachedSessionConfig>;

        return $r1;
    }

    protected final void notifyActive()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.UseCase$State $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State ACTIVE>;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.UseCase$State mState> = $r1;

        virtualinvoke r0.<androidx.camera.core.UseCase: void notifyState()>();

        return;
    }

    protected final void notifyInactive()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.UseCase$State $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE>;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.UseCase$State mState> = $r1;

        virtualinvoke r0.<androidx.camera.core.UseCase: void notifyState()>();

        return;
    }

    protected final void notifyUpdated()
    {
        androidx.camera.core.UseCase r0;
        java.util.Iterator r1;
        androidx.camera.core.UseCase$StateChangeCallback r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.UseCase;

        $r3 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.UseCase$StateChangeCallback) $r4;

        interfaceinvoke r2.<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseUpdated(androidx.camera.core.UseCase)>(r0);

        goto label1;

     label2:
        return;
    }

    protected final void notifyReset()
    {
        androidx.camera.core.UseCase r0;
        java.util.Iterator r1;
        androidx.camera.core.UseCase$StateChangeCallback r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.UseCase;

        $r3 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.UseCase$StateChangeCallback) $r4;

        interfaceinvoke r2.<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseReset(androidx.camera.core.UseCase)>(r0);

        goto label1;

     label2:
        return;
    }

    public final void notifyState()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.UseCase$State $r1;
        int[] $r2;
        int $i0, $i1;
        java.util.Set $r3, $r5;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6;
        java.util.Iterator r7, r9;
        androidx.camera.core.UseCase$StateChangeCallback r8, r10;

        r0 := @this: androidx.camera.core.UseCase;

        $r2 = <androidx.camera.core.UseCase$1: int[] $SwitchMap$androidx$camera$core$UseCase$State>;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.UseCase$State mState>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.UseCase$State: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label6;
        };

     label1:
        $r5 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        r7 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.camera.core.UseCase$StateChangeCallback) $r6;

        interfaceinvoke r8.<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseInactive(androidx.camera.core.UseCase)>(r0);

        goto label2;

     label3:
        goto label6;

     label4:
        $r3 = r0.<androidx.camera.core.UseCase: java.util.Set mStateChangeCallbacks>;

        r9 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (androidx.camera.core.UseCase$StateChangeCallback) $r4;

        interfaceinvoke r10.<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseActive(androidx.camera.core.UseCase)>(r0);

        goto label5;

     label6:
        return;
    }

    protected java.lang.String getCameraId()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInternal $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r9;
        java.lang.Object $r6;
        androidx.camera.core.impl.CameraInfoInternal $r8;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal getCamera()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No camera attached to use case: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r7 = (androidx.camera.core.impl.CameraInternal) $r6;

        $r8 = interfaceinvoke $r7.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r9 = interfaceinvoke $r8.<androidx.camera.core.impl.CameraInfoInternal: java.lang.String getCameraId()>();

        return $r9;
    }

    protected boolean isCurrentCamera(java.lang.String)
    {
        androidx.camera.core.UseCase r0;
        java.lang.String r1, $r3;
        androidx.camera.core.impl.CameraInternal $r2;
        boolean $z0;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal getCamera()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<androidx.camera.core.UseCase: java.lang.String getCameraId()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $z0;
    }

    public java.lang.String getName()
    {
        androidx.camera.core.UseCase r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        androidx.camera.core.impl.UseCaseConfig $r2;
        int $i0;
        java.lang.String $r6, $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: androidx.camera.core.UseCase;

        $r2 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<UnknownUseCase-");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke $r2.<androidx.camera.core.impl.UseCaseConfig: java.lang.String getTargetName(java.lang.String)>($r6);

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r9 = (java.lang.String) $r8;

        return $r9;
    }

    public androidx.camera.core.impl.UseCaseConfig getCurrentConfig()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.UseCaseConfig $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        return $r1;
    }

    public androidx.camera.core.impl.CameraInternal getCamera()
    {
        androidx.camera.core.UseCase r0;
        java.lang.Object r1, $r2;
        androidx.camera.core.impl.CameraInternal $r3;

        r0 := @this: androidx.camera.core.UseCase;

        $r2 = r0.<androidx.camera.core.UseCase: java.lang.Object mCameraLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>;

        exitmonitor r1;

        return $r3;
    }

    public android.util.Size getAttachedSurfaceResolution()
    {
        androidx.camera.core.UseCase r0;
        android.util.Size $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: android.util.Size mAttachedResolution>;

        return $r1;
    }

    public void updateSuggestedResolution(android.util.Size)
    {
        androidx.camera.core.UseCase r0;
        android.util.Size r1, $r2;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.UseCase: android.util.Size onSuggestedResolutionUpdated(android.util.Size)>(r1);

        r0.<androidx.camera.core.UseCase: android.util.Size mAttachedResolution> = $r2;

        return;
    }

<androidx.camera.core.UseCase: android.util.Size onSuggestedResolutionUpdated(android.util.Size)>
    protected void onCameraControlReady()
    {
        androidx.camera.core.UseCase r0;

        r0 := @this: androidx.camera.core.UseCase;

        return;
    }

    public void onAttach(androidx.camera.core.impl.CameraInternal, androidx.camera.core.impl.UseCaseConfig, androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInternal r1;
        androidx.camera.core.impl.UseCaseConfig r2, r3, $r7, $r8, $r9, $r10;
        java.lang.Throwable r4, $r12;
        java.lang.Object $r5, r13;
        androidx.camera.core.impl.CameraInfoInternal $r6, $r11;
        androidx.camera.core.UseCase$EventCallback r14;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        r2 := @parameter1: androidx.camera.core.impl.UseCaseConfig;

        r3 := @parameter2: androidx.camera.core.impl.UseCaseConfig;

        $r5 = r0.<androidx.camera.core.UseCase: java.lang.Object mCameraLock>;

        r13 = $r5;

        entermonitor $r5;

     label1:
        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera> = r1;

        specialinvoke r0.<androidx.camera.core.UseCase: void addStateChangeCallback(androidx.camera.core.UseCase$StateChangeCallback)>(r1);

        exitmonitor r13;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r13;

     label4:
        throw r4;

     label5:
        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mExtendedConfig> = r2;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCameraConfig> = r3;

        $r6 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        $r8 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mExtendedConfig>;

        $r7 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCameraConfig>;

        $r9 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mergeConfigs(androidx.camera.core.impl.CameraInfoInternal,androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.UseCaseConfig)>($r6, $r8, $r7);

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig> = $r9;

        $r10 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        r14 = interfaceinvoke $r10.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.UseCase$EventCallback getUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(null);

        if r14 == null goto label6;

        $r11 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        interfaceinvoke r14.<androidx.camera.core.UseCase$EventCallback: void onAttach(androidx.camera.core.CameraInfo)>($r11);

     label6:
        virtualinvoke r0.<androidx.camera.core.UseCase: void onAttached()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onAttached()
    {
        androidx.camera.core.UseCase r0;

        r0 := @this: androidx.camera.core.UseCase;

        return;
    }

    public void onDetach(androidx.camera.core.impl.CameraInternal)
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInternal r1, $r7, $r8;
        androidx.camera.core.UseCase$EventCallback r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r10;
        androidx.camera.core.impl.UseCaseConfig $r5, $r9;
        boolean $z0;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        virtualinvoke r0.<androidx.camera.core.UseCase: void onDetached()>();

        $r5 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        r2 = interfaceinvoke $r5.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.UseCase$EventCallback getUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(null);

        if r2 == null goto label1;

        interfaceinvoke r2.<androidx.camera.core.UseCase$EventCallback: void onDetach()>();

     label1:
        $r6 = r0.<androidx.camera.core.UseCase: java.lang.Object mCameraLock>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>;

        if r1 != $r7 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z0);

        $r8 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>;

        specialinvoke r0.<androidx.camera.core.UseCase: void removeStateChangeCallback(androidx.camera.core.UseCase$StateChangeCallback)>($r8);

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera> = null;

        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label7:
        throw r4;

     label8:
        r0.<androidx.camera.core.UseCase: android.util.Size mAttachedResolution> = null;

        r0.<androidx.camera.core.UseCase: android.graphics.Rect mViewPortCropRect> = null;

        $r9 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mUseCaseConfig>;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig> = $r9;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mExtendedConfig> = null;

        r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCameraConfig> = null;

        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void onDetached()
    {
        androidx.camera.core.UseCase r0;

        r0 := @this: androidx.camera.core.UseCase;

        return;
    }

    public void onStateAttached()
    {
        androidx.camera.core.UseCase r0;

        r0 := @this: androidx.camera.core.UseCase;

        virtualinvoke r0.<androidx.camera.core.UseCase: void onCameraControlReady()>();

        return;
    }

    public void onStateDetached()
    {
        androidx.camera.core.UseCase r0;

        r0 := @this: androidx.camera.core.UseCase;

        return;
    }

    protected androidx.camera.core.impl.CameraControlInternal getCameraControl()
    {
        androidx.camera.core.UseCase r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        androidx.camera.core.impl.CameraInternal $r4, $r5;
        androidx.camera.core.impl.CameraControlInternal $r6, $r7;

        r0 := @this: androidx.camera.core.UseCase;

        $r3 = r0.<androidx.camera.core.UseCase: java.lang.Object mCameraLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>;

        if $r4 != null goto label3;

        $r7 = <androidx.camera.core.impl.CameraControlInternal: androidx.camera.core.impl.CameraControlInternal DEFAULT_EMPTY_INSTANCE>;

        exitmonitor r1;

     label2:
        return $r7;

     label3:
        $r5 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal mCamera>;

        $r6 = interfaceinvoke $r5.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraControlInternal getCameraControlInternal()>();

        exitmonitor r1;

     label4:
        return $r6;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setViewPortCropRect(android.graphics.Rect)
    {
        androidx.camera.core.UseCase r0;
        android.graphics.Rect r1;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: android.graphics.Rect;

        r0.<androidx.camera.core.UseCase: android.graphics.Rect mViewPortCropRect> = r1;

        return;
    }

    public android.graphics.Rect getViewPortCropRect()
    {
        androidx.camera.core.UseCase r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: android.graphics.Rect mViewPortCropRect>;

        return $r1;
    }

    public void setSensorToBufferTransformMatrix(android.graphics.Matrix)
    {
        androidx.camera.core.UseCase r0;
        android.graphics.Matrix r1, $r2;

        r0 := @this: androidx.camera.core.UseCase;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>(android.graphics.Matrix)>(r1);

        r0.<androidx.camera.core.UseCase: android.graphics.Matrix mSensorToBufferTransformMatrix> = $r2;

        return;
    }

    public android.graphics.Matrix getSensorToBufferTransformMatrix()
    {
        androidx.camera.core.UseCase r0;
        android.graphics.Matrix $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: android.graphics.Matrix mSensorToBufferTransformMatrix>;

        return $r1;
    }

    public int getImageFormat()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.UseCaseConfig $r1;
        int $i0;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig mCurrentConfig>;

        $i0 = interfaceinvoke $r1.<androidx.camera.core.impl.UseCaseConfig: int getInputFormat()>();

        return $i0;
    }

    public androidx.camera.core.ResolutionInfo getResolutionInfo()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.ResolutionInfo $r1;

        r0 := @this: androidx.camera.core.UseCase;

        $r1 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.ResolutionInfo getResolutionInfoInternal()>();

        return $r1;
    }

    protected androidx.camera.core.ResolutionInfo getResolutionInfoInternal()
    {
        androidx.camera.core.UseCase r0;
        androidx.camera.core.impl.CameraInternal r1;
        android.util.Size r2;
        int i0, $i1, $i2;
        androidx.camera.core.ResolutionInfo $r3;
        android.graphics.Rect $r4, r5;

        r0 := @this: androidx.camera.core.UseCase;

        r1 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.CameraInternal getCamera()>();

        r2 = virtualinvoke r0.<androidx.camera.core.UseCase: android.util.Size getAttachedSurfaceResolution()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        r5 = virtualinvoke r0.<androidx.camera.core.UseCase: android.graphics.Rect getViewPortCropRect()>();

        if r5 != null goto label3;

        $r4 = new android.graphics.Rect;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i2);

        r5 = $r4;

     label3:
        i0 = virtualinvoke r0.<androidx.camera.core.UseCase: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r1);

        $r3 = staticinvoke <androidx.camera.core.ResolutionInfo: androidx.camera.core.ResolutionInfo create(android.util.Size,android.graphics.Rect,int)>(r2, r5, i0);

        return $r3;
    }

androidx.camera.core.UseCase$1
<androidx.camera.core.UseCase$1: int[] $SwitchMap$androidx$camera$core$UseCase$State>
    static void <clinit>()
    {
        androidx.camera.core.UseCase$State[] $r0;
        int $i0, $i1, $i2;
        int[] $r1, $r3, $r5;
        androidx.camera.core.UseCase$State $r2, $r4;
        java.lang.Throwable $r6, $r7, r8, r9;

        $r0 = staticinvoke <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.core.UseCase$1: int[] $SwitchMap$androidx$camera$core$UseCase$State> = $r1;

     label1:
        $r3 = <androidx.camera.core.UseCase$1: int[] $SwitchMap$androidx$camera$core$UseCase$State>;

        $r2 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE>;

        $i1 = virtualinvoke $r2.<androidx.camera.core.UseCase$State: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

     label4:
        $r5 = <androidx.camera.core.UseCase$1: int[] $SwitchMap$androidx$camera$core$UseCase$State>;

        $r4 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State ACTIVE>;

        $i2 = virtualinvoke $r4.<androidx.camera.core.UseCase$State: int ordinal()>();

        $r5[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        r9 = $r6;

     label7:
        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.camera.core.UseCase$EventCallback
<androidx.camera.core.UseCase$EventCallback: void onAttach(androidx.camera.core.CameraInfo)>
<androidx.camera.core.UseCase$EventCallback: void onDetach()>
androidx.camera.core.UseCase$State
<androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State ACTIVE>
<androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE>
<androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State[] $VALUES>
    public static androidx.camera.core.UseCase$State[] values()
    {
        androidx.camera.core.UseCase$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.core.UseCase$State[]) $r1;

        return $r2;
    }

    public static androidx.camera.core.UseCase$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.core.UseCase$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/core/UseCase$State;", r0);

        $r2 = (androidx.camera.core.UseCase$State) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.core.UseCase$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.core.UseCase$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.UseCase$State $r0, $r1, $r3, $r4;
        androidx.camera.core.UseCase$State[] $r2;

        $r0 = new androidx.camera.core.UseCase$State;

        specialinvoke $r0.<androidx.camera.core.UseCase$State: void <init>(java.lang.String,int)>("ACTIVE", 0);

        <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State ACTIVE> = $r0;

        $r1 = new androidx.camera.core.UseCase$State;

        specialinvoke $r1.<androidx.camera.core.UseCase$State: void <init>(java.lang.String,int)>("INACTIVE", 1);

        <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE> = $r1;

        $r2 = newarray (androidx.camera.core.UseCase$State)[2];

        $r3 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State ACTIVE>;

        $r2[0] = $r3;

        $r4 = <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State INACTIVE>;

        $r2[1] = $r4;

        <androidx.camera.core.UseCase$State: androidx.camera.core.UseCase$State[] $VALUES> = $r2;

        return;
    }

androidx.camera.core.UseCase$StateChangeCallback
<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseActive(androidx.camera.core.UseCase)>
<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseInactive(androidx.camera.core.UseCase)>
<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseUpdated(androidx.camera.core.UseCase)>
<androidx.camera.core.UseCase$StateChangeCallback: void onUseCaseReset(androidx.camera.core.UseCase)>
