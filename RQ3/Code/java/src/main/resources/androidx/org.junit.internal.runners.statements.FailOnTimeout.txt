org.junit.internal.runners.statements.FailOnTimeout
<org.junit.internal.runners.statements.FailOnTimeout: boolean lookForStuckThread>
<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement originalStatement>
<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup>
<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit>
<org.junit.internal.runners.statements.FailOnTimeout: long timeout>
    private void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder, org.junit.runners.model.Statement)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r1;
        org.junit.runners.model.Statement $r2;
        long $l0;
        java.util.concurrent.TimeUnit $r3;
        boolean $z0;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$Builder;

        $r2 := @parameter1: org.junit.runners.model.Statement;

        specialinvoke $r0.<org.junit.runners.model.Statement: void <init>()>();

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup> = null;

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement originalStatement> = $r2;

        $l0 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$Builder: long access$100(org.junit.internal.runners.statements.FailOnTimeout$Builder)>($r1);

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout> = $l0;

        $r3 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$Builder: java.util.concurrent.TimeUnit access$200(org.junit.internal.runners.statements.FailOnTimeout$Builder)>($r1);

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit> = $r3;

        $z0 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$Builder: boolean access$300(org.junit.internal.runners.statements.FailOnTimeout$Builder)>($r1);

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: boolean lookForStuckThread> = $z0;

        return;
    }

    void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder, org.junit.runners.model.Statement, org.junit.internal.runners.statements.FailOnTimeout$1)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r1;
        org.junit.runners.model.Statement $r2;
        org.junit.internal.runners.statements.FailOnTimeout$1 $r3;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$Builder;

        $r2 := @parameter1: org.junit.runners.model.Statement;

        $r3 := @parameter2: org.junit.internal.runners.statements.FailOnTimeout$1;

        specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder,org.junit.runners.model.Statement)>($r1, $r2);

        return;
    }

    static org.junit.runners.model.Statement access$600(org.junit.internal.runners.statements.FailOnTimeout)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        org.junit.runners.model.Statement r1;

        $r0 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout;

        r1 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement originalStatement>;

        return r1;
    }

    public static org.junit.internal.runners.statements.FailOnTimeout$Builder builder()
    {
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r0;

        $r0 = new org.junit.internal.runners.statements.FailOnTimeout$Builder;

        specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout$Builder: void <init>(org.junit.internal.runners.statements.FailOnTimeout$1)>(null);

        return $r0;
    }

    private java.lang.Thread[] copyThreads(java.lang.Thread[], int)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Thread[] $r1, $r2;
        int $i0, $i1;
        java.lang.Thread $r3;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.Thread[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r2 = newarray (java.lang.Thread)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r1[$i1];

        $r2[$i1] = $r3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private long cpuTime(java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Thread $r1;
        org.junit.internal.management.ThreadMXBean $r2;
        boolean $z0;
        long $l0;
        java.lang.Throwable $r3;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.Thread;

        $r2 = staticinvoke <org.junit.internal.management.ManagementFactory: org.junit.internal.management.ThreadMXBean getThreadMXBean()>();

        $z0 = interfaceinvoke $r2.<org.junit.internal.management.ThreadMXBean: boolean isThreadCpuTimeSupported()>();

        if $z0 == 0 goto label4;

     label1:
        $l0 = virtualinvoke $r1.<java.lang.Thread: long getId()>();

        $l0 = interfaceinvoke $r2.<org.junit.internal.management.ThreadMXBean: long getThreadCpuTime(long)>($l0);

     label2:
        return $l0;

     label3:
        $r3 := @caughtexception;

     label4:
        return 0L;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    private java.lang.Exception createTimeoutException(java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Thread $r1, $r3;
        java.lang.StackTraceElement[] $r2;
        boolean $z0;
        org.junit.runners.model.TestTimedOutException $r4;
        long $l0;
        java.util.concurrent.TimeUnit $r5;
        java.lang.Exception $r6;
        java.lang.String $r7, $r8;
        int $i1;
        org.junit.runners.model.MultipleFailureException $r9;
        java.lang.Object[] $r10;
        java.util.List $r11;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.Thread;

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $z0 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: boolean lookForStuckThread>;

        if $z0 == 0 goto label4;

        $r3 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Thread getStuckThread(java.lang.Thread)>($r1);

     label1:
        $r4 = new org.junit.runners.model.TestTimedOutException;

        $l0 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $r5 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit>;

        specialinvoke $r4.<org.junit.runners.model.TestTimedOutException: void <init>(long,java.util.concurrent.TimeUnit)>($l0, $r5);

        if $r2 == null goto label2;

        virtualinvoke $r4.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r2);

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label2:
        if $r3 == null goto label6;

        $r6 = new java.lang.Exception;

        $r7 = "Appears to be stuck in thread ";

        $r8 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

     label3:
        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        $r2 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)>($r3);

        virtualinvoke $r6.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r2);

        $r9 = new org.junit.runners.model.MultipleFailureException;

        $r10 = newarray (java.lang.Throwable)[2];

        $r10[0] = $r4;

        $r10[1] = $r6;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        specialinvoke $r9.<org.junit.runners.model.MultipleFailureException: void <init>(java.util.List)>($r11);

        return $r9;

     label4:
        $r3 = null;

        goto label1;

     label5:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.String)>("Appears to be stuck in thread ");

        goto label3;

     label6:
        return $r4;
    }

    private java.lang.Throwable getResult(java.util.concurrent.FutureTask, java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.util.concurrent.FutureTask $r1;
        java.lang.Thread $r2;
        long $l0;
        byte $b1;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6, $r8;
        java.lang.Exception $r7;
        java.util.concurrent.ExecutionException r9;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.util.concurrent.FutureTask;

        $r2 := @parameter1: java.lang.Thread;

        $l0 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

        $l0 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $r3 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit>;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r3);

     label2:
        $r5 = (java.lang.Throwable) $r4;

        return $r5;

     label3:
        $r4 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label4:
        $r5 = (java.lang.Throwable) $r4;

        return $r5;

     label5:
        $r5 := @caughtexception;

        r9 = (java.util.concurrent.ExecutionException) $r5;

        $r5 = virtualinvoke r9.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        return $r5;

     label6:
        $r6 := @caughtexception;

        $r7 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Exception createTimeoutException(java.lang.Thread)>($r2);

        $r5 = (java.lang.Throwable) $r7;

        return $r5;

     label7:
        $r8 := @caughtexception;

        return $r8;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.InterruptedException from label3 to label4 with label7;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label5;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label6;
        catch java.util.concurrent.TimeoutException from label3 to label4 with label6;
    }

    private java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Thread $r1;
        java.lang.StackTraceElement[] $r2;
        java.lang.Throwable $r3;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.Thread;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r2 = newarray (java.lang.StackTraceElement)[0];

        return $r2;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private java.lang.Thread getStuckThread(java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Thread $r1, $r2, $r5;
        int $i0, $i2;
        byte $b1;
        java.lang.ThreadGroup $r3;
        java.lang.Thread[] $r4;
        long $l3, $l4;
        java.lang.Thread$State $r6, $r7;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.Thread;

        $r3 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup>;

        $r4 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Thread[] getThreadArray(java.lang.ThreadGroup)>($r3);

        if $r4 == null goto label8;

        $i0 = lengthof $r4;

        $i2 = 0;

        $r5 = null;

        $l3 = 0L;

     label2:
        if $i2 >= $i0 goto label5;

        $r2 = $r4[$i2];

        $r6 = virtualinvoke $r2.<java.lang.Thread: java.lang.Thread$State getState()>();

        $r7 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>;

        if $r6 != $r7 goto label7;

        $l4 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: long cpuTime(java.lang.Thread)>($r2);

        if $r5 == null goto label3;

        $b1 = $l4 cmp $l3;

        if $b1 <= 0 goto label7;

     label3:
        $l3 = $l4;

     label4:
        $i2 = $i2 + 1;

        $r5 = $r2;

        goto label2;

     label5:
        if $r5 != $r1 goto label6;

        $r5 = null;

     label6:
        return $r5;

     label7:
        $r2 = $r5;

        goto label4;

     label8:
        return null;
    }

    private java.lang.Thread[] getThreadArray(java.lang.ThreadGroup)
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.ThreadGroup $r1;
        int $i0, $i1, $i2;
        java.lang.Thread[] $r2;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 := @parameter0: java.lang.ThreadGroup;

        $i0 = virtualinvoke $r1.<java.lang.ThreadGroup: int activeCount()>();

        $i0 = $i0 * 2;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 100);

        $i1 = 0;

     label1:
        $r2 = newarray (java.lang.Thread)[$i0];

        $i2 = virtualinvoke $r1.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>($r2);

        if $i2 >= $i0 goto label2;

        $r2 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Thread[] copyThreads(java.lang.Thread[],int)>($r2, $i2);

        return $r2;

     label2:
        $i0 = $i0 + 100;

        $i1 = $i1 + 1;

        if $i1 < 5 goto label1;

        return null;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.internal.runners.statements.FailOnTimeout $r0;
        java.lang.Throwable $r1;
        org.junit.internal.runners.statements.FailOnTimeout$CallableStatement $r2, r6;
        java.util.concurrent.FutureTask $r3, r7;
        java.lang.ThreadGroup $r4, r8;
        java.lang.Thread $r5, r9;
        java.lang.Runnable r10;

        $r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r6 = new org.junit.internal.runners.statements.FailOnTimeout$CallableStatement;

        $r2 = r6;

        specialinvoke r6.<org.junit.internal.runners.statements.FailOnTimeout$CallableStatement: void <init>(org.junit.internal.runners.statements.FailOnTimeout,org.junit.internal.runners.statements.FailOnTimeout$1)>($r0, null);

        r7 = new java.util.concurrent.FutureTask;

        $r3 = r7;

        specialinvoke r7.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r2);

        r8 = new java.lang.ThreadGroup;

        specialinvoke r8.<java.lang.ThreadGroup: void <init>(java.lang.String)>("FailOnTimeoutGroup");

        $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup> = r8;

        r9 = new java.lang.Thread;

        $r5 = r9;

        $r4 = $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.ThreadGroup threadGroup>;

        r10 = (java.lang.Runnable) $r3;

        specialinvoke r9.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>($r4, r10, "Time-limited test");

        virtualinvoke $r5.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$CallableStatement: void awaitStarted()>();

        $r1 = specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Throwable getResult(java.util.concurrent.FutureTask,java.lang.Thread)>($r3, $r5);

        if $r1 == null goto label1;

        throw $r1;

     label1:
        return;
    }

