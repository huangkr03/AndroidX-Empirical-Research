androidx.benchmark.macro.MacrobenchmarkScope
<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>
<androidx.benchmark.macro.MacrobenchmarkScope: boolean launchWithClearTask>
<androidx.benchmark.macro.MacrobenchmarkScope: android.app.Instrumentation instrumentation>
<androidx.benchmark.macro.MacrobenchmarkScope: android.content.Context context>
<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.Integer iteration>
<androidx.benchmark.macro.MacrobenchmarkScope: androidx.test.uiautomator.UiDevice device>
    public void <init>(java.lang.String, boolean)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.String r1;
        boolean z0;
        androidx.test.uiautomator.UiDevice r2;
        android.app.Instrumentation $r3, $r4, $r6;
        android.content.Context $r5;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName> = r1;

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: boolean launchWithClearTask> = z0;

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: android.app.Instrumentation instrumentation> = $r3;

        $r4 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: android.app.Instrumentation instrumentation>;

        $r5 = virtualinvoke $r4.<android.app.Instrumentation: android.content.Context getContext()>();

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: android.content.Context context> = $r5;

        $r6 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: android.app.Instrumentation instrumentation>;

        r2 = staticinvoke <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice getInstance(android.app.Instrumentation)>($r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "getInstance(instrumentation)");

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: androidx.test.uiautomator.UiDevice device> = r2;

        return;
    }

    public final java.lang.String getPackageName()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r1 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        return $r1;
    }

    public final java.lang.Integer getIteration()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.Integer $r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r1 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.Integer iteration>;

        return $r1;
    }

    public final void setIteration$benchmark_macro_release(java.lang.Integer)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.Integer r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        r1 := @parameter0: java.lang.Integer;

        r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.Integer iteration> = r1;

        return;
    }

    public final androidx.test.uiautomator.UiDevice getDevice()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        androidx.test.uiautomator.UiDevice $r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r1 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: androidx.test.uiautomator.UiDevice device>;

        return $r1;
    }

    public final void startActivityAndWait(kotlin.jvm.functions.Function1)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        kotlin.jvm.functions.Function1 r1;
        android.content.Intent r2, r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        java.lang.String $r6, $r9, $r10;
        java.lang.IllegalStateException $r8;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r4 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: android.content.Context context>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        r3 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>($r6);

        if r3 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        $r9 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        $r10 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unable to acquire intent for package ", $r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label1:
        r2 = r3;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: void startActivityAndWait(android.content.Intent)>(r2);

        return;
    }

    public static void startActivityAndWait$default(androidx.benchmark.macro.MacrobenchmarkScope, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 $r2;
        kotlin.jvm.functions.Function1 r3;

        r0 := @parameter0: androidx.benchmark.macro.MacrobenchmarkScope;

        r3 := @parameter1: kotlin.jvm.functions.Function1;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = <androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 INSTANCE>;

        r3 = (kotlin.jvm.functions.Function1) $r2;

     label1:
        virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: void startActivityAndWait(kotlin.jvm.functions.Function1)>(r3);

        return;
    }

    public final void startActivityAndWait(android.content.Intent)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        android.content.Intent r1;
        java.lang.String r2, r3;
        kotlin.Unit r4;
        java.lang.Throwable r5, $r10;
        androidx.benchmark.macro.perfetto.ForceTracing $r6, $r8, $r11;
        boolean $z2;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        r1 := @parameter0: android.content.Intent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "intent");

        r2 = "startActivityAndWait";

        $r6 = <androidx.benchmark.macro.perfetto.ForceTracing: androidx.benchmark.macro.perfetto.ForceTracing INSTANCE>;

        virtualinvoke $r6.<androidx.benchmark.macro.perfetto.ForceTracing: void begin(java.lang.String)>(r2);

     label1:
        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $z2 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: boolean launchWithClearTask>;

        if $z2 == 0 goto label2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(32768);

     label2:
        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String toUri(int)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "intent.toUri(Intent.URI_INTENT_SCHEME)");

        specialinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: void startActivityImpl(java.lang.String)>(r3);

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        $r8 = <androidx.benchmark.macro.perfetto.ForceTracing: androidx.benchmark.macro.perfetto.ForceTracing INSTANCE>;

        virtualinvoke $r8.<androidx.benchmark.macro.perfetto.ForceTracing: void end()>();

        goto label6;

     label4:
        $r10 := @caughtexception;

        r5 = $r10;

     label5:
        $r11 = <androidx.benchmark.macro.perfetto.ForceTracing: androidx.benchmark.macro.perfetto.ForceTracing INSTANCE>;

        virtualinvoke $r11.<androidx.benchmark.macro.perfetto.ForceTracing: void end()>();

        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private final void startActivityImpl(java.lang.String)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.String r1, $r10, $r12, $r16, $r19, $r21, $r22, $r28, $r31, $r36, $r40, $r43, $r45, $r49, $r50, $r59, r67, $r73, $r77, r89;
        java.util.List r2, $r4, $r14, $r33, $r52, $r69, $r78;
        androidx.benchmark.macro.FrameStatsResult r3, r57, $r86;
        long l0, $l6, $l8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.util.ArrayList $r5, $r15, $r32;
        int $i1, $i2, $i3, $i4, i7;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r24, $r25, $r26, $r27, $r29, $r30, $r34, $r35, $r37, $r38;
        androidx.benchmark.Shell $r11;
        java.lang.CharSequence $r13, $r17, $r18, $r20, $r47, $r48;
        java.lang.IllegalStateException $r23, $r42, $r46;
        byte $b5;
        java.util.Collection $r39, $r41, r54, r58, $r64, r68, r80;
        java.lang.SecurityException $r44;
        java.lang.Throwable $r51;
        java.lang.Iterable $r53, $r62, r63, $r70, $r74, r79, r83;
        java.util.Iterator $r55, $r65, r71, r75, $r81, $r84;
        java.lang.Object r56, r66, $r72, $r76, r82, r85;
        androidx.benchmark.Shell$Output r60;
        java.lang.String[] $r61;
        java.lang.Long $r87, r88;
        kotlin.Unit $r90;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: boolean launchWithClearTask>;

        if $z0 != 0 goto label01;

        $r52 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label04;

     label01:
        $r4 = virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.util.List getFrameStats$benchmark_macro_release()>();

        $r53 = (java.lang.Iterable) $r4;

        $r5 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r53, 10);

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        r54 = (java.util.Collection) $r5;

        $r55 = interfaceinvoke $r53.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r55.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        r56 = interfaceinvoke $r55.<java.util.Iterator: java.lang.Object next()>();

        r57 = (androidx.benchmark.macro.FrameStatsResult) r56;

        r58 = r54;

        $r50 = virtualinvoke r57.<androidx.benchmark.macro.FrameStatsResult: java.lang.String getUniqueName()>();

        interfaceinvoke r58.<java.util.Collection: boolean add(java.lang.Object)>($r50);

        goto label02;

     label03:
        $r52 = (java.util.List) r54;

     label04:
        r2 = $r52;

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("am start -W \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r59 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Starting activity with command: ", $r59);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r10);

        $r11 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        r60 = staticinvoke <androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r11, $r59, null, 2, null);

        $r12 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStdout()>();

        $r13 = (java.lang.CharSequence) $r12;

        $r61 = newarray (java.lang.String)[1];

        $r61[0] = "\n";

        $r14 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r13, $r61, 0, 0, 6, null);

        $r62 = (java.lang.Iterable) $r14;

        r63 = $r62;

        $r15 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r62, 10);

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i2);

        $r64 = (java.util.Collection) $r15;

        $r65 = interfaceinvoke r63.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z11 = interfaceinvoke $r65.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label06;

        r66 = interfaceinvoke $r65.<java.util.Iterator: java.lang.Object next()>();

        r67 = (java.lang.String) r66;

        r68 = $r64;

        $r47 = (java.lang.CharSequence) r67;

        $r48 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r68.<java.util.Collection: boolean add(java.lang.Object)>($r49);

        goto label05;

     label06:
        $r69 = (java.util.List) $r64;

        $r70 = (java.lang.Iterable) $r69;

        r71 = interfaceinvoke $r70.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r72 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        $r73 = (java.lang.String) $r72;

        $z10 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r73, "Error:", 0, 2, null);

        if $z10 == 0 goto label08;

        $r46 = new java.lang.IllegalStateException;

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r73);

        throw $r46;

     label08:
        goto label07;

     label09:
        $r16 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        $r18 = (java.lang.CharSequence) $r16;

        $r17 = (java.lang.CharSequence) "java.lang.SecurityException";

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r18, $r17, 0, 2, null);

        if $z3 == 0 goto label10;

        $r44 = new java.lang.SecurityException;

        $r45 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        specialinvoke $r44.<java.lang.SecurityException: void <init>(java.lang.String)>($r45);

        throw $r44;

     label10:
        $r19 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        $r20 = (java.lang.CharSequence) $r19;

        $i3 = interfaceinvoke $r20.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        if $z12 == 0 goto label13;

        $r42 = new java.lang.IllegalStateException;

        $r43 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r43);

        throw $r42;

     label13:
        $r21 = virtualinvoke r60.<androidx.benchmark.Shell$Output: java.lang.String getStdout()>();

        $r22 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Result: ", $r21);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r22);

        $r74 = (java.lang.Iterable) $r69;

        $z4 = $r74 instanceof java.util.Collection;

        if $z4 == 0 goto label14;

        $r41 = (java.util.Collection) $r74;

        $z9 = interfaceinvoke $r41.<java.util.Collection: boolean isEmpty()>();

        if $z9 == 0 goto label14;

        $z13 = 0;

        goto label17;

     label14:
        r75 = interfaceinvoke $r74.<java.lang.Iterable: java.util.Iterator iterator()>();

     label15:
        $z14 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label16;

        $r76 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        $r77 = (java.lang.String) $r76;

        $z8 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r77, "Warning: Activity not started", 0, 2, null);

        if $z8 == 0 goto label15;

        $z13 = 1;

        goto label17;

     label16:
        $z13 = 0;

     label17:
        if $z13 == 0 goto label18;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "Unable to safely detect Activity launch, waiting 2s");

        staticinvoke <java.lang.Thread: void sleep(long)>(2000L);

        return;

     label18:
        $r78 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        i7 = 0;

     label19:
        if i7 >= 100 goto label40;

        i7 = i7 + 1;

        $r78 = virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.util.List getFrameStats$benchmark_macro_release()>();

        r79 = (java.lang.Iterable) $r78;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        r80 = (java.util.Collection) $r32;

        $r81 = interfaceinvoke r79.<java.lang.Iterable: java.util.Iterator iterator()>();

     label20:
        $z15 = interfaceinvoke $r81.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label23;

        r82 = interfaceinvoke $r81.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.benchmark.macro.FrameStatsResult) r82;

        $r40 = virtualinvoke r3.<androidx.benchmark.macro.FrameStatsResult: java.lang.String getUniqueName()>();

        $z7 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r40);

        if $z7 != 0 goto label21;

        $z16 = 1;

        goto label22;

     label21:
        $z16 = 0;

     label22:
        if $z16 == 0 goto label20;

        interfaceinvoke r80.<java.util.Collection: boolean add(java.lang.Object)>(r82);

        goto label20;

     label23:
        $r33 = (java.util.List) r80;

        r83 = (java.lang.Iterable) $r33;

        $z5 = r83 instanceof java.util.Collection;

        if $z5 == 0 goto label24;

        $r39 = (java.util.Collection) r83;

        $z6 = interfaceinvoke $r39.<java.util.Collection: boolean isEmpty()>();

        if $z6 == 0 goto label24;

        $z17 = 0;

        goto label33;

     label24:
        $r84 = interfaceinvoke r83.<java.lang.Iterable: java.util.Iterator iterator()>();

     label25:
        $z18 = interfaceinvoke $r84.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label32;

        r85 = interfaceinvoke $r84.<java.util.Iterator: java.lang.Object next()>();

        $r86 = (androidx.benchmark.macro.FrameStatsResult) r85;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 29 goto label26;

        $r87 = virtualinvoke $r86.<androidx.benchmark.macro.FrameStatsResult: java.lang.Long getLastLaunchNs()>();

        goto label27;

     label26:
        $r87 = virtualinvoke $r86.<androidx.benchmark.macro.FrameStatsResult: java.lang.Long getLastFrameNs()>();

     label27:
        r88 = $r87;

        if r88 != null goto label28;

        $l8 = -9223372036854775808L;

        goto label29;

     label28:
        $l8 = virtualinvoke r88.<java.lang.Long: long longValue()>();

     label29:
        l0 = $l8;

        $b5 = l0 cmp $l6;

        if $b5 <= 0 goto label30;

        $z19 = 1;

        goto label31;

     label30:
        $z19 = 0;

     label31:
        if $z19 == 0 goto label25;

        $z17 = 1;

        goto label33;

     label32:
        $z17 = 0;

     label33:
        if $z17 == 0 goto label34;

        return;

     label34:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wait for ");

        $r36 = virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String getPackageName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to draw");

        r89 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

     label35:
        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>(r89);

        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

        $r90 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label36:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label39;

     label37:
        $r51 := @caughtexception;

     label38:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw $r51;

     label39:
        goto label19;

     label40:
        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to confirm activity launch completion ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r78);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Please report a bug with the output of `adb shell dumpsys gfxinfo ");

        $r28 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" framestats`");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        throw $r23;

        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
    }

    public final java.util.List getFrameStats$benchmark_macro_release()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.Iterable $r1, r24;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.String r5, r6, $r7, $r17, r21, r22;
        androidx.benchmark.Shell $r8, $r13;
        java.util.List $r9, $r11, $r19;
        java.util.ArrayList $r10;
        boolean $z5;
        java.lang.StringBuilder $r12, $r14, $r15, $r16;
        androidx.benchmark.macro.FrameStatsResult$Companion $r18;
        java.lang.Throwable $r20, r23;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r8 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r7 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        $r9 = virtualinvoke $r8.<androidx.benchmark.Shell: java.util.List getRunningProcessesForPackage(java.lang.String)>($r7);

        $r1 = (java.lang.Iterable) $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r10;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) r4;

        r5 = "dumpsys gfxinfo framestats";

     label2:
        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>(r5);

        $r13 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dumpsys gfxinfo ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" framestats");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = virtualinvoke $r13.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r17);

     label3:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label6;

     label4:
        $r20 := @caughtexception;

        r23 = $r20;

     label5:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r23;

     label6:
        r6 = r22;

        $r18 = <androidx.benchmark.macro.FrameStatsResult: androidx.benchmark.macro.FrameStatsResult$Companion Companion>;

        $r19 = virtualinvoke $r18.<androidx.benchmark.macro.FrameStatsResult$Companion: java.util.List parse(java.lang.String)>(r6);

        r24 = (java.lang.Iterable) $r19;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r2, r24);

        goto label1;

     label7:
        $r11 = (java.util.List) r2;

        return $r11;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void pressHome(long)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        long l0;
        androidx.test.uiautomator.UiDevice $r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: androidx.test.uiautomator.UiDevice device>;

        virtualinvoke $r1.<androidx.test.uiautomator.UiDevice: boolean pressHome()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

        return;
    }

    public static void pressHome$default(androidx.benchmark.macro.MacrobenchmarkScope, long, int, java.lang.Object)
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        int i0, $i1;
        java.lang.Object r1;
        long l2;

        r0 := @parameter0: androidx.benchmark.macro.MacrobenchmarkScope;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        l2 = 0L;

     label1:
        virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: void pressHome(long)>(l2);

        return;
    }

    public final void killProcess()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.String $r1, $r2, $r3, $r5;
        androidx.test.uiautomator.UiDevice $r4;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r1 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Killing process ", $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r2);

        $r4 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: androidx.test.uiautomator.UiDevice device>;

        $r3 = r0.<androidx.benchmark.macro.MacrobenchmarkScope: java.lang.String packageName>;

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("am force-stop ", $r3);

        virtualinvoke $r4.<androidx.test.uiautomator.UiDevice: java.lang.String executeShellCommand(java.lang.String)>($r5);

        return;
    }

    private final void dropKernelPageCacheSetProp()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        androidx.benchmark.Shell$Output r1;
        byte b0;
        int i1, i2, $i3, $i4, $i5;
        java.lang.String r2, $r4, $r8, $r12, $r14, $r15, $r17;
        androidx.benchmark.Shell $r3, $r7;
        java.lang.CharSequence $r5, $r9, $r10, $r16;
        java.lang.IllegalStateException $r6, $r11, $r13;
        boolean $z1, $z2, $z3, $z4, $z5;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $r3 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        r1 = staticinvoke <androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r3, "setprop perf.drop_caches 3", null, 2, null);

        $r4 = virtualinvoke r1.<androidx.benchmark.Shell$Output: java.lang.String getStdout()>();

        $r5 = (java.lang.CharSequence) $r4;

        $i3 = interfaceinvoke $r5.<java.lang.CharSequence: int length()>();

        if $i3 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        if $z3 == 0 goto label05;

        $r15 = virtualinvoke r1.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        $r16 = (java.lang.CharSequence) $r15;

        $i4 = interfaceinvoke $r16.<java.lang.CharSequence: int length()>();

        if $i4 != 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        if $z4 == 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        if $z5 != 0 goto label07;

        $r17 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Failed to trigger drop cache via setprop: ", r1);

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label07:
        b0 = 50;

        $i5 = 0;

     label08:
        if $i5 >= b0 goto label12;

        i1 = $i5;

        $i5 = $i5 + 1;

        i2 = i1;

        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        $r7 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r8 = virtualinvoke $r7.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("getprop perf.drop_caches");

        $r9 = (java.lang.CharSequence) $r8;

        $r10 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r9);

        r2 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "0");

        if $z1 == 0 goto label09;

        return;

     label09:
        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "3");

        if $z2 == 0 goto label10;

        goto label11;

     label10:
        $r11 = new java.lang.IllegalStateException;

        $r12 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unable to drop caches: Failed to read drop cache via getprop: ", r2);

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label11:
        goto label08;

     label12:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to drop caches: Did not observe perf.drop_caches reset automatically");

        throw $r6;
    }

    public final void dropKernelPageCache()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;
        java.lang.String r1, $r3, $r11;
        int $i0;
        androidx.benchmark.Shell $r2, $r12;
        java.lang.CharSequence $r4, $r5;
        boolean $z0, $z1, $z2;
        androidx.benchmark.DeviceInfo $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        specialinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope: void dropKernelPageCacheSetProp()>();

        goto label3;

     label1:
        $r2 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r3 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r2, "echo 3 > /proc/sys/vm/drop_caches && echo Success || echo Failure", null, 2, null);

        $r4 = (java.lang.CharSequence) $r3;

        $r5 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r4);

        r1 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, "Success");

        if $z0 != 0 goto label3;

        $r6 = <androidx.benchmark.DeviceInfo: androidx.benchmark.DeviceInfo INSTANCE>;

        $z1 = virtualinvoke $r6.<androidx.benchmark.DeviceInfo: boolean isRooted()>();

        if $z1 == 0 goto label2;

        $r12 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $z2 = virtualinvoke $r12.<androidx.benchmark.Shell: boolean isSessionRooted()>();

        if $z2 != 0 goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to drop caches - run `adb root`");

        throw $r13;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to drop kernel page cache, result: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Benchmark", $r11);

     label3:
        return;
    }

    public final void startActivityAndWait()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        staticinvoke <androidx.benchmark.macro.MacrobenchmarkScope: void startActivityAndWait$default(androidx.benchmark.macro.MacrobenchmarkScope,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, null, 1, null);

        return;
    }

    public final void pressHome()
    {
        androidx.benchmark.macro.MacrobenchmarkScope r0;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope;

        staticinvoke <androidx.benchmark.macro.MacrobenchmarkScope: void pressHome$default(androidx.benchmark.macro.MacrobenchmarkScope,long,int,java.lang.Object)>(r0, 0L, 1, null);

        return;
    }

androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1
<androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 INSTANCE>
    void <init>()
    {
        androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 r0;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(android.content.Intent)
    {
        androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 r0;
        android.content.Intent r1;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1;

        r1 := @parameter0: android.content.Intent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 r0;
        java.lang.Object r1;
        android.content.Intent $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.content.Intent) r1;

        virtualinvoke r0.<androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1: void invoke(android.content.Intent)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 $r0;

        $r0 = new androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1;

        specialinvoke $r0.<androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1: void <init>()>();

        <androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1: androidx.benchmark.macro.MacrobenchmarkScope$startActivityAndWait$1 INSTANCE> = $r0;

        return;
    }

