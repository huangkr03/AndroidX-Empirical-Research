androidx.camera.core.impl.utils.TransformUtils
<androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT>
    private void <init>()
    {
        androidx.camera.core.impl.utils.TransformUtils r0;

        r0 := @this: androidx.camera.core.impl.utils.TransformUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.util.Size rectToSize(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        android.util.Size $r1;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Rect;

        $r1 = new android.util.Size;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        specialinvoke $r1.<android.util.Size: void <init>(int,int)>($i0, $i1);

        return $r1;
    }

    public static java.lang.String rectToString(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        java.lang.Object[] $r1;
        java.util.Locale $r2;
        int $i0, $i1;
        java.lang.Integer $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.graphics.Rect;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r3;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s(%dx%d)", $r1);

        return $r5;
    }

    public static android.graphics.Rect sizeToRect(android.util.Size)
    {
        android.util.Size r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.util.Size;

        $r1 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Rect sizeToRect(android.util.Size,int,int)>(r0, 0, 0);

        return $r1;
    }

    public static android.graphics.Rect sizeToRect(android.util.Size, int, int)
    {
        android.util.Size r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.graphics.Rect;

        $i2 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i3 = i0 + $i2;

        $i4 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i5 = i1 + $i4;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, $i3, $i5);

        return $r1;
    }

    public static boolean hasCropping(android.graphics.Rect, android.util.Size)
    {
        android.graphics.Rect r0;
        android.util.Size r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.util.Size;

        $i0 = r0.<android.graphics.Rect: int left>;

        if $i0 != 0 goto label1;

        $i1 = r0.<android.graphics.Rect: int top>;

        if $i1 != 0 goto label1;

        $i2 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i2 != $i3 goto label1;

        $i4 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i4 == $i5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static android.graphics.RectF sizeToRectF(android.util.Size)
    {
        android.util.Size r0;
        android.graphics.RectF $r1;

        r0 := @parameter0: android.util.Size;

        $r1 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF sizeToRectF(android.util.Size,int,int)>(r0, 0, 0);

        return $r1;
    }

    public static android.graphics.RectF sizeToRectF(android.util.Size, int, int)
    {
        android.util.Size r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.RectF $r1;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.graphics.RectF;

        $f0 = (float) i0;

        $f1 = (float) i1;

        $i2 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i3 = i0 + $i2;

        $f2 = (float) $i3;

        $i4 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i5 = i1 + $i4;

        $f3 = (float) $i5;

        specialinvoke $r1.<android.graphics.RectF: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        return $r1;
    }

    public static android.util.Size reverseSize(android.util.Size)
    {
        android.util.Size r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: android.util.Size;

        $r1 = new android.util.Size;

        $i0 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i1 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        specialinvoke $r1.<android.util.Size: void <init>(int,int)>($i0, $i1);

        return $r1;
    }

    public static android.util.Size rotateSize(android.util.Size, int)
    {
        android.util.Size r0, $r5;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        $i1 = i0 % 90;

        if $i1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation degrees: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r4);

        $i2 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: int within360(int)>(i0);

        $z0 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: boolean is90or270(int)>($i2);

        if $z0 == 0 goto label3;

        $r5 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.util.Size reverseSize(android.util.Size)>(r0);

        goto label4;

     label3:
        $r5 = r0;

     label4:
        return $r5;
    }

    public static int within360(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;

        $i1 = i0 % 360;

        $i2 = $i1 + 360;

        $i3 = $i2 % 360;

        return $i3;
    }

    public static android.graphics.RectF verticesToRect(float[])
    {
        float[] r0;
        android.graphics.RectF $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;

        r0 := @parameter0: float[];

        $r1 = new android.graphics.RectF;

        $f3 = r0[0];

        $f2 = r0[2];

        $f1 = r0[4];

        $f0 = r0[6];

        $f4 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: float min(float,float,float,float)>($f3, $f2, $f1, $f0);

        $f8 = r0[1];

        $f7 = r0[3];

        $f6 = r0[5];

        $f5 = r0[7];

        $f9 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: float min(float,float,float,float)>($f8, $f7, $f6, $f5);

        $f13 = r0[0];

        $f12 = r0[2];

        $f11 = r0[4];

        $f10 = r0[6];

        $f14 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: float max(float,float,float,float)>($f13, $f12, $f11, $f10);

        $f18 = r0[1];

        $f17 = r0[3];

        $f16 = r0[5];

        $f15 = r0[7];

        $f19 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: float max(float,float,float,float)>($f18, $f17, $f16, $f15);

        specialinvoke $r1.<android.graphics.RectF: void <init>(float,float,float,float)>($f4, $f9, $f14, $f19);

        return $r1;
    }

    public static float max(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f1);

        $f5 = staticinvoke <java.lang.Math: float max(float,float)>(f2, f3);

        $f6 = staticinvoke <java.lang.Math: float max(float,float)>($f4, $f5);

        return $f6;
    }

    public static float min(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $f4 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f1);

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>(f2, f3);

        $f6 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f5);

        return $f6;
    }

    public static boolean is90or270(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 90 goto label1;

        if i0 != 270 goto label2;

     label1:
        return 1;

     label2:
        if i0 == 0 goto label3;

        if i0 != 180 goto label4;

     label3:
        return 0;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation degrees: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public static float[] sizeToVertices(android.util.Size)
    {
        android.util.Size r0;
        float[] $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.util.Size;

        $r1 = newarray (float)[8];

        $r1[0] = 0.0F;

        $r1[1] = 0.0F;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f0 = (float) $i0;

        $r1[2] = $f0;

        $r1[3] = 0.0F;

        $i1 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f1 = (float) $i1;

        $r1[4] = $f1;

        $i2 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f2 = (float) $i2;

        $r1[5] = $f2;

        $r1[6] = 0.0F;

        $i3 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f3 = (float) $i3;

        $r1[7] = $f3;

        return $r1;
    }

    public static float[] rectToVertices(android.graphics.RectF)
    {
        android.graphics.RectF r0;
        float[] $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.graphics.RectF;

        $r1 = newarray (float)[8];

        $f0 = r0.<android.graphics.RectF: float left>;

        $r1[0] = $f0;

        $f1 = r0.<android.graphics.RectF: float top>;

        $r1[1] = $f1;

        $f2 = r0.<android.graphics.RectF: float right>;

        $r1[2] = $f2;

        $f3 = r0.<android.graphics.RectF: float top>;

        $r1[3] = $f3;

        $f4 = r0.<android.graphics.RectF: float right>;

        $r1[4] = $f4;

        $f5 = r0.<android.graphics.RectF: float bottom>;

        $r1[5] = $f5;

        $f6 = r0.<android.graphics.RectF: float left>;

        $r1[6] = $f6;

        $f7 = r0.<android.graphics.RectF: float bottom>;

        $r1[7] = $f7;

        return $r1;
    }

    public static boolean isAspectRatioMatchingWithRoundingError(android.util.Size, boolean, android.util.Size, boolean)
    {
        android.util.Size r0, r1;
        boolean z0, z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, f20, f21, f22, f23;
        byte $b8, $b9;

        r0 := @parameter0: android.util.Size;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.util.Size;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $i12 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f18 = (float) $i12;

        $i13 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f19 = (float) $i13;

        f20 = $f18 / $f19;

        f21 = f20;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f0 = (float) $i0;

        $f1 = $f0 + 1.0F;

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f2 = (float) $i1;

        $f3 = $f2 - 1.0F;

        f20 = $f1 / $f3;

        $i2 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f4 = (float) $i2;

        $f5 = $f4 - 1.0F;

        $i3 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f6 = (float) $i3;

        $f7 = $f6 + 1.0F;

        f21 = $f5 / $f7;

     label2:
        if z1 == 0 goto label3;

        $i10 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f16 = (float) $i10;

        $i11 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f17 = (float) $i11;

        f22 = $f16 / $f17;

        f23 = f22;

        goto label4;

     label3:
        $i4 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f8 = (float) $i4;

        $f9 = $f8 + 1.0F;

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f10 = (float) $i5;

        $f11 = $f10 - 1.0F;

        f22 = $f9 / $f11;

        $i6 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f12 = (float) $i6;

        $f13 = $f12 - 1.0F;

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f14 = (float) $i7;

        $f15 = $f14 + 1.0F;

        f23 = $f13 / $f15;

     label4:
        $b8 = f20 cmpl f23;

        if $b8 < 0 goto label5;

        $b9 = f22 cmpl f21;

        if $b9 < 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public static android.graphics.Matrix getRectToRect(android.graphics.RectF, android.graphics.RectF, int)
    {
        android.graphics.RectF r0, r1;
        int i0;
        android.graphics.Matrix $r2;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: android.graphics.RectF;

        i0 := @parameter2: int;

        $r2 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getRectToRect(android.graphics.RectF,android.graphics.RectF,int,boolean)>(r0, r1, i0, 0);

        return $r2;
    }

    public static android.graphics.Matrix getRectToRect(android.graphics.RectF, android.graphics.RectF, int, boolean)
    {
        android.graphics.RectF r0, r1, $r5;
        int i0;
        boolean z0;
        android.graphics.Matrix r2, $r3, $r6;
        android.graphics.Matrix$ScaleToFit $r4;
        float $f0;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: android.graphics.RectF;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>()>();

        r2 = $r3;

        $r5 = <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT>;

        $r4 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r2.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r0, $r5, $r4);

        $f0 = (float) i0;

        virtualinvoke r2.<android.graphics.Matrix: boolean postRotate(float)>($f0);

        if z0 == 0 goto label1;

        virtualinvoke r2.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

     label1:
        $r6 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getNormalizedToBuffer(android.graphics.RectF)>(r1);

        virtualinvoke r2.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r6);

        return r2;
    }

    public static android.graphics.Matrix getNormalizedToBuffer(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        android.graphics.RectF $r1;
        android.graphics.Matrix $r2;

        r0 := @parameter0: android.graphics.Rect;

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>(android.graphics.Rect)>(r0);

        $r2 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getNormalizedToBuffer(android.graphics.RectF)>($r1);

        return $r2;
    }

    public static android.graphics.Matrix updateSensorToBufferTransform(android.graphics.Matrix, android.graphics.Rect)
    {
        android.graphics.Matrix r0, r2, $r3;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @parameter0: android.graphics.Matrix;

        r1 := @parameter1: android.graphics.Rect;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>(android.graphics.Matrix)>(r0);

        r2 = $r3;

        $i0 = r1.<android.graphics.Rect: int left>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f0);

        return r2;
    }

    public static android.graphics.Matrix getNormalizedToBuffer(android.graphics.RectF)
    {
        android.graphics.RectF r0, $r4;
        android.graphics.Matrix r1, $r2;
        android.graphics.Matrix$ScaleToFit $r3;

        r0 := @parameter0: android.graphics.RectF;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r1 = $r2;

        $r4 = <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT>;

        $r3 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r1.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>($r4, r0, $r3);

        return r1;
    }

    public static android.graphics.Matrix getExifTransform(int, int, int)
    {
        int i0, i1, i2;
        android.graphics.Matrix r0, r3, $r4, $r8;
        android.graphics.RectF r1, r2, $r5, $r7, $r10, $r11;
        float $f0, $f1, $f2, $f3;
        android.graphics.Matrix$ScaleToFit $r6, $r9;
        boolean z12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        r0 = $r4;

        $r5 = new android.graphics.RectF;

        $f1 = (float) i1;

        $f0 = (float) i2;

        specialinvoke $r5.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f1, $f0);

        r1 = $r5;

        $r7 = <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT>;

        $r6 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r0.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r1, $r7, $r6);

        z12 = 0;

        tableswitch(i0)
        {
            case 0: goto label08;
            case 1: goto label08;
            case 2: goto label01;
            case 3: goto label02;
            case 4: goto label03;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            default: goto label08;
        };

     label01:
        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        goto label08;

     label02:
        virtualinvoke r0.<android.graphics.Matrix: boolean postRotate(float)>(180.0F);

        goto label08;

     label03:
        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(1.0F, -1.0F);

        goto label08;

     label04:
        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        virtualinvoke r0.<android.graphics.Matrix: boolean postRotate(float)>(270.0F);

        z12 = 1;

        goto label08;

     label05:
        virtualinvoke r0.<android.graphics.Matrix: boolean postRotate(float)>(90.0F);

        z12 = 1;

        goto label08;

     label06:
        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        virtualinvoke r0.<android.graphics.Matrix: boolean postRotate(float)>(90.0F);

        z12 = 1;

        goto label08;

     label07:
        virtualinvoke r0.<android.graphics.Matrix: boolean postRotate(float)>(270.0F);

        z12 = 1;

        goto label08;

     label08:
        if z12 == 0 goto label09;

        $r11 = new android.graphics.RectF;

        $f3 = (float) i2;

        $f2 = (float) i1;

        specialinvoke $r11.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f3, $f2);

        goto label10;

     label09:
        $r11 = r1;

     label10:
        r2 = $r11;

        $r8 = new android.graphics.Matrix;

        specialinvoke $r8.<android.graphics.Matrix: void <init>()>();

        r3 = $r8;

        $r10 = <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT>;

        $r9 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r3.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>($r10, r2, $r9);

        virtualinvoke r0.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>(r3);

        return r0;
    }

    static void <clinit>()
    {
        android.graphics.RectF $r0;

        $r0 = new android.graphics.RectF;

        specialinvoke $r0.<android.graphics.RectF: void <init>(float,float,float,float)>(-1.0F, -1.0F, 1.0F, 1.0F);

        <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF NORMALIZED_RECT> = $r0;

        return;
    }

