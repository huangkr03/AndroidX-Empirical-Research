androidx.ui.core.DrawNode
<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaintWithChildren>
<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaint>
<androidx.ui.core.DrawNode: boolean needsPaint>
    public void <init>()
    {
        androidx.ui.core.DrawNode r0;

        r0 := @this: androidx.ui.core.DrawNode;

        specialinvoke r0.<androidx.ui.core.ComponentNode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public final kotlin.jvm.functions.Function3 getOnPaintWithChildren()
    {
        androidx.ui.core.DrawNode r0;
        kotlin.jvm.functions.Function3 $r1;

        r0 := @this: androidx.ui.core.DrawNode;

        $r1 = r0.<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaintWithChildren>;

        return $r1;
    }

    public final void setOnPaintWithChildren(kotlin.jvm.functions.Function3)
    {
        androidx.ui.core.DrawNode r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.ui.core.DrawNode;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        r0.<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaintWithChildren> = r1;

        virtualinvoke r0.<androidx.ui.core.DrawNode: void invalidate()>();

        return;
    }

    public final kotlin.jvm.functions.Function3 getOnPaint()
    {
        androidx.ui.core.DrawNode r0;
        kotlin.jvm.functions.Function3 $r1;

        r0 := @this: androidx.ui.core.DrawNode;

        $r1 = r0.<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaint>;

        return $r1;
    }

    public final void setOnPaint(kotlin.jvm.functions.Function3)
    {
        androidx.ui.core.DrawNode r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.ui.core.DrawNode;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        r0.<androidx.ui.core.DrawNode: kotlin.jvm.functions.Function3 onPaint> = r1;

        virtualinvoke r0.<androidx.ui.core.DrawNode: void invalidate()>();

        return;
    }

    public final boolean getNeedsPaint()
    {
        androidx.ui.core.DrawNode r0;
        boolean $z0;

        r0 := @this: androidx.ui.core.DrawNode;

        $z0 = r0.<androidx.ui.core.DrawNode: boolean needsPaint>;

        return $z0;
    }

    public final void setNeedsPaint(boolean)
    {
        androidx.ui.core.DrawNode r0;
        boolean z0;

        r0 := @this: androidx.ui.core.DrawNode;

        z0 := @parameter0: boolean;

        r0.<androidx.ui.core.DrawNode: boolean needsPaint> = z0;

        return;
    }

    public void attach(androidx.ui.core.Owner)
    {
        androidx.ui.core.DrawNode r0;
        androidx.ui.core.Owner r1;

        r0 := @this: androidx.ui.core.DrawNode;

        r1 := @parameter0: androidx.ui.core.Owner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        specialinvoke r0.<androidx.ui.core.ComponentNode: void attach(androidx.ui.core.Owner)>(r1);

        virtualinvoke r0.<androidx.ui.core.DrawNode: void setNeedsPaint(boolean)>(1);

        interfaceinvoke r1.<androidx.ui.core.Owner: void onInvalidate(androidx.ui.core.DrawNode)>(r0);

        return;
    }

    public void detach()
    {
        androidx.ui.core.DrawNode r0;

        r0 := @this: androidx.ui.core.DrawNode;

        virtualinvoke r0.<androidx.ui.core.DrawNode: void invalidate()>();

        specialinvoke r0.<androidx.ui.core.ComponentNode: void detach()>();

        virtualinvoke r0.<androidx.ui.core.DrawNode: void setNeedsPaint(boolean)>(0);

        return;
    }

    public final void invalidate()
    {
        androidx.ui.core.DrawNode r0;
        androidx.ui.core.Owner r1;
        boolean $z0;

        r0 := @this: androidx.ui.core.DrawNode;

        $z0 = virtualinvoke r0.<androidx.ui.core.DrawNode: boolean getNeedsPaint()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<androidx.ui.core.DrawNode: void setNeedsPaint(boolean)>(1);

        r1 = virtualinvoke r0.<androidx.ui.core.DrawNode: androidx.ui.core.Owner getOwner()>();

        if r1 != null goto label1;

        goto label2;

     label1:
        interfaceinvoke r1.<androidx.ui.core.Owner: void onInvalidate(androidx.ui.core.DrawNode)>(r0);

     label2:
        return;
    }

    public static void getZIndexSortedChildren$annotations()
    {
        return;
    }

