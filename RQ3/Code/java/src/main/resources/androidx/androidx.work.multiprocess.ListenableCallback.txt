androidx.work.multiprocess.ListenableCallback
<androidx.work.multiprocess.ListenableCallback: java.util.concurrent.Executor mExecutor>
<androidx.work.multiprocess.ListenableCallback: androidx.work.multiprocess.IWorkManagerImplCallback mCallback>
<androidx.work.multiprocess.ListenableCallback: com.google.common.util.concurrent.ListenableFuture mFuture>
    public void <init>(java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.ListenableCallback r0;
        java.util.concurrent.Executor r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        com.google.common.util.concurrent.ListenableFuture r3;

        r0 := @this: androidx.work.multiprocess.ListenableCallback;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.ListenableCallback: java.util.concurrent.Executor mExecutor> = r1;

        r0.<androidx.work.multiprocess.ListenableCallback: androidx.work.multiprocess.IWorkManagerImplCallback mCallback> = r2;

        r0.<androidx.work.multiprocess.ListenableCallback: com.google.common.util.concurrent.ListenableFuture mFuture> = r3;

        return;
    }

<androidx.work.multiprocess.ListenableCallback: byte[] toByteArray(java.lang.Object)>
    public void dispatchCallbackSafely()
    {
        androidx.work.multiprocess.ListenableCallback r0;
        androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: androidx.work.multiprocess.ListenableCallback;

        $r2 = r0.<androidx.work.multiprocess.ListenableCallback: com.google.common.util.concurrent.ListenableFuture mFuture>;

        $r1 = new androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable;

        specialinvoke $r1.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void <init>(androidx.work.multiprocess.ListenableCallback)>(r0);

        $r3 = r0.<androidx.work.multiprocess.ListenableCallback: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r3);

        return;
    }

androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable
<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: java.lang.String TAG>
<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback>
    public void <init>(androidx.work.multiprocess.ListenableCallback)
    {
        androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable r0;
        androidx.work.multiprocess.ListenableCallback r1;

        r0 := @this: androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable;

        r1 := @parameter0: androidx.work.multiprocess.ListenableCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback> = r1;

        return;
    }

    public void run()
    {
        androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable r0;
        androidx.work.multiprocess.ListenableCallback $r1, $r3, $r4, $r8;
        com.google.common.util.concurrent.ListenableFuture $r2;
        androidx.work.multiprocess.IWorkManagerImplCallback $r5, $r9;
        byte[] $r6;
        java.lang.Throwable $r7, r11;
        java.lang.Object r10;

        r0 := @this: androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable;

     label1:
        $r1 = r0.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback>;

        $r2 = $r1.<androidx.work.multiprocess.ListenableCallback: com.google.common.util.concurrent.ListenableFuture mFuture>;

        r10 = interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r3 = r0.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback>;

        $r5 = $r3.<androidx.work.multiprocess.ListenableCallback: androidx.work.multiprocess.IWorkManagerImplCallback mCallback>;

        $r4 = r0.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback>;

        $r6 = virtualinvoke $r4.<androidx.work.multiprocess.ListenableCallback: byte[] toByteArray(java.lang.Object)>(r10);

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportSuccess(androidx.work.multiprocess.IWorkManagerImplCallback,byte[])>($r5, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r11 = $r7;

        $r8 = r0.<androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: androidx.work.multiprocess.ListenableCallback mCallback>;

        $r9 = $r8.<androidx.work.multiprocess.ListenableCallback: androidx.work.multiprocess.IWorkManagerImplCallback mCallback>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>($r9, r11);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void reportSuccess(androidx.work.multiprocess.IWorkManagerImplCallback, byte[])
    {
        androidx.work.multiprocess.IWorkManagerImplCallback r0;
        byte[] r1;
        java.lang.Throwable r2, $r3;
        androidx.work.Logger $r4;
        java.lang.String $r5;

        r0 := @parameter0: androidx.work.multiprocess.IWorkManagerImplCallback;

        r1 := @parameter1: byte[];

     label1:
        interfaceinvoke r0.<androidx.work.multiprocess.IWorkManagerImplCallback: void onSuccess(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r5 = <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: java.lang.String TAG>;

        virtualinvoke $r4.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to notify successful operation", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback, java.lang.Throwable)
    {
        androidx.work.multiprocess.IWorkManagerImplCallback r0;
        java.lang.Throwable r1, r2, $r4;
        java.lang.String $r3, $r6;
        androidx.work.Logger $r5;

        r0 := @parameter0: androidx.work.multiprocess.IWorkManagerImplCallback;

        r1 := @parameter1: java.lang.Throwable;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke r0.<androidx.work.multiprocess.IWorkManagerImplCallback: void onFailure(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r6 = <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: java.lang.String TAG>;

        virtualinvoke $r5.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Unable to notify failures in operation", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("ListenableCallbackRbl");

        <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: java.lang.String TAG> = $r0;

        return;
    }

