androidx.credentials.provider.PublicKeyCredentialEntry
<androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence username>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence displayName>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence typeDisplayName>
<androidx.credentials.provider.PublicKeyCredentialEntry: android.app.PendingIntent pendingIntent>
<androidx.credentials.provider.PublicKeyCredentialEntry: android.graphics.drawable.Icon icon>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.time.Instant lastUsedTime>
<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isAutoSelectAllowed>
<androidx.credentials.provider.PublicKeyCredentialEntry: boolean autoSelectAllowedFromOption>
<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isDefaultIcon>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String TAG>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_TYPE_DISPLAY_NAME>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_TITLE>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_SUBTITLE>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_LAST_USED_TIME_MILLIS>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_ICON>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_PENDING_INTENT>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_AUTO_ALLOWED>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_OPTION_ID>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_AUTO_SELECT_FROM_OPTION>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String SLICE_HINT_DEFAULT_ICON_RES_ID>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String AUTO_SELECT_TRUE_STRING>
<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.String AUTO_SELECT_FALSE_STRING>
<androidx.credentials.provider.PublicKeyCredentialEntry: android.os.Parcelable$Creator CREATOR>
    public void <init>(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent, android.graphics.drawable.Icon, java.time.Instant, boolean, androidx.credentials.provider.BeginGetPublicKeyCredentialOption, boolean, boolean)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.lang.CharSequence r1, r2, r3, $r11, $r12;
        android.app.PendingIntent r4;
        android.graphics.drawable.Icon r5;
        java.time.Instant r6;
        boolean z0, z1, z2, $z3, $z5;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r7;
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR $r8;
        android.service.credentials.BeginGetCredentialOption $r9;
        android.app.slice.Slice $r10;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r13, $r15;
        java.lang.String $r14, $r16, $r17, $r18;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.CharSequence;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.graphics.drawable.Icon;

        r6 := @parameter5: java.time.Instant;

        z0 := @parameter6: boolean;

        r7 := @parameter7: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "username");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "typeDisplayName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "icon");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "beginGetPublicKeyCredentialOption");

        $r9 = (android.service.credentials.BeginGetCredentialOption) r7;

        $r8 = <androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR>;

        $r10 = virtualinvoke $r8.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: android.app.slice.Slice toSlice$credentials_release(java.lang.String,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,java.lang.CharSequence,java.time.Instant,android.graphics.drawable.Icon,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption)>("androidx.credentials.TYPE_PUBLIC_KEY_CREDENTIAL", r1, r2, r4, r3, r6, r5, z0, r7);

        specialinvoke r0.<android.service.credentials.CredentialEntry: void <init>(android.service.credentials.BeginGetCredentialOption,android.app.slice.Slice)>($r9, $r10);

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence username> = r1;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence displayName> = r2;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence typeDisplayName> = r3;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: android.app.PendingIntent pendingIntent> = r4;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: android.graphics.drawable.Icon icon> = r5;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.time.Instant lastUsedTime> = r6;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isAutoSelectAllowed> = z0;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean autoSelectAllowedFromOption> = z1;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isDefaultIcon> = z2;

        $r11 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence username>;

        $i0 = interfaceinvoke $r11.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $r17 = "username must not be empty";

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r12 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence typeDisplayName>;

        $i1 = interfaceinvoke $r12.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        if $z5 != 0 goto label6;

        $r18 = "typeDisplayName must not be empty";

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label6:
        return;
    }

    public void <init>(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent, android.graphics.drawable.Icon, java.time.Instant, boolean, androidx.credentials.provider.BeginGetPublicKeyCredentialOption, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.lang.CharSequence r1, r2, r3;
        android.app.PendingIntent r4;
        android.graphics.drawable.Icon r5;
        java.time.Instant r6;
        boolean z0, z1, z2;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r7;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r8;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.CharSequence;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.graphics.drawable.Icon;

        r6 := @parameter5: java.time.Instant;

        z0 := @parameter6: boolean;

        r7 := @parameter7: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        i0 := @parameter10: int;

        r8 := @parameter11: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 256;

        if $i1 == 0 goto label1;

        z1 = 0;

     label1:
        $i2 = i0 & 512;

        if $i2 == 0 goto label2;

        z2 = 0;

     label2:
        specialinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.graphics.drawable.Icon,java.time.Instant,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption,boolean,boolean)>(r1, r2, r3, r4, r5, r6, z0, r7, z1, z2);

        return;
    }

    public final java.lang.CharSequence getUsername()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.lang.CharSequence $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence username>;

        return $r1;
    }

    public final java.lang.CharSequence getDisplayName()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.lang.CharSequence $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence displayName>;

        return $r1;
    }

    public final java.lang.CharSequence getTypeDisplayName()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.lang.CharSequence $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.lang.CharSequence typeDisplayName>;

        return $r1;
    }

    public final android.app.PendingIntent getPendingIntent()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        android.app.PendingIntent $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: android.app.PendingIntent pendingIntent>;

        return $r1;
    }

    public final android.graphics.drawable.Icon getIcon()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        android.graphics.drawable.Icon $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: android.graphics.drawable.Icon icon>;

        return $r1;
    }

    public final java.time.Instant getLastUsedTime()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        java.time.Instant $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $r1 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: java.time.Instant lastUsedTime>;

        return $r1;
    }

    public final boolean isAutoSelectAllowed()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        boolean $z0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $z0 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isAutoSelectAllowed>;

        return $z0;
    }

    public final boolean getAutoSelectAllowedFromOption()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        boolean $z0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $z0 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean autoSelectAllowedFromOption>;

        return $z0;
    }

    public final boolean isDefaultIcon()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        boolean $z0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        $z0 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry: boolean isDefaultIcon>;

        return $z0;
    }

    public void <init>(android.content.Context, java.lang.CharSequence, android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption, java.lang.CharSequence, java.time.Instant, android.graphics.drawable.Icon, boolean)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        android.content.Context r1;
        java.lang.CharSequence r2, r5, $r9;
        android.app.PendingIntent r3;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r4;
        java.time.Instant r6;
        android.graphics.drawable.Icon r7;
        boolean z0;
        int $i0;
        java.lang.String $r8;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        r5 := @parameter4: java.lang.CharSequence;

        r6 := @parameter5: java.time.Instant;

        r7 := @parameter6: android.graphics.drawable.Icon;

        z0 := @parameter7: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "username");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "beginGetPublicKeyCredentialOption");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "icon");

        $i0 = <androidx.credentials.R$string: int androidx_credentials_TYPE_PUBLIC_KEY_CREDENTIAL>;

        $r8 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>($i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "context.getString(\n     \u2026PE_PUBLIC_KEY_CREDENTIAL)");

        $r9 = (java.lang.CharSequence) $r8;

        specialinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.graphics.drawable.Icon,java.time.Instant,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r2, r5, $r9, r3, r7, r6, z0, r4, 0, 0, 768, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.CharSequence, android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption, java.lang.CharSequence, java.time.Instant, android.graphics.drawable.Icon, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        android.content.Context r1;
        java.lang.CharSequence r2, r7;
        android.app.PendingIntent r3;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        kotlin.jvm.internal.DefaultConstructorMarker r5;
        android.graphics.drawable.Icon $r6, r9;
        java.time.Instant r8;
        boolean z0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        r7 := @parameter4: java.lang.CharSequence;

        r8 := @parameter5: java.time.Instant;

        r9 := @parameter6: android.graphics.drawable.Icon;

        z0 := @parameter7: boolean;

        i0 := @parameter8: int;

        r5 := @parameter9: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 16;

        if $i1 == 0 goto label1;

        r7 = null;

     label1:
        $i2 = i0 & 32;

        if $i2 == 0 goto label2;

        r8 = null;

     label2:
        $i3 = i0 & 64;

        if $i3 == 0 goto label3;

        $i5 = <androidx.credentials.R$drawable: int ic_passkey>;

        $r6 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>(r1, $i5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "createWithResource(context, R.drawable.ic_passkey)");

        r9 = $r6;

     label3:
        $i4 = i0 & 128;

        if $i4 == 0 goto label4;

        z0 = 0;

     label4:
        specialinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry: void <init>(android.content.Context,java.lang.CharSequence,android.app.PendingIntent,androidx.credentials.provider.BeginGetPublicKeyCredentialOption,java.lang.CharSequence,java.time.Instant,android.graphics.drawable.Icon,boolean)>(r1, r2, r3, r4, r7, r8, r9, z0);

        return;
    }

    public int describeContents()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry r0;
        android.os.Parcel r1;
        int i0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "dest");

        specialinvoke r0.<android.service.credentials.CredentialEntry: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        return;
    }

    public static final android.app.slice.Slice toSlice$credentials_release(java.lang.String, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent, java.lang.CharSequence, java.time.Instant, android.graphics.drawable.Icon, boolean, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        java.lang.String r0;
        java.lang.CharSequence r1, r2, r4;
        android.app.PendingIntent r3;
        java.time.Instant r5;
        android.graphics.drawable.Icon r6;
        boolean z0;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r7;
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR $r8;
        android.app.slice.Slice $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence;

        r3 := @parameter3: android.app.PendingIntent;

        r4 := @parameter4: java.lang.CharSequence;

        r5 := @parameter5: java.time.Instant;

        r6 := @parameter6: android.graphics.drawable.Icon;

        z0 := @parameter7: boolean;

        r7 := @parameter8: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        $r8 = <androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR>;

        $r9 = virtualinvoke $r8.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: android.app.slice.Slice toSlice$credentials_release(java.lang.String,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,java.lang.CharSequence,java.time.Instant,android.graphics.drawable.Icon,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption)>(r0, r1, r2, r3, r4, r5, r6, z0, r7);

        return $r9;
    }

    public static final androidx.credentials.provider.PublicKeyCredentialEntry fromSlice(android.app.slice.Slice)
    {
        android.app.slice.Slice r0;
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR $r1;
        androidx.credentials.provider.PublicKeyCredentialEntry $r2;

        r0 := @parameter0: android.app.slice.Slice;

        $r1 = <androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR>;

        $r2 = virtualinvoke $r1.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: androidx.credentials.provider.PublicKeyCredentialEntry fromSlice(android.app.slice.Slice)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR $r0;
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 $r1;
        android.os.Parcelable$Creator $r2;

        $r0 = new androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR;

        specialinvoke $r0.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR> = $r0;

        $r1 = new androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        specialinvoke $r1.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1: void <init>()>();

        $r2 = (android.os.Parcelable$Creator) $r1;

        <androidx.credentials.provider.PublicKeyCredentialEntry: android.os.Parcelable$Creator CREATOR> = $r2;

        return;
    }

androidx.credentials.provider.PublicKeyCredentialEntry$Builder
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.content.Context context>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence username>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.app.PendingIntent pendingIntent>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: androidx.credentials.provider.BeginGetPublicKeyCredentialOption beginGetPublicKeyCredentialOption>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence displayName>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.time.Instant lastUsedTime>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.graphics.drawable.Icon icon>
<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: boolean autoSelectAllowed>
    public void <init>(android.content.Context, java.lang.CharSequence, android.app.PendingIntent, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        android.content.Context r1;
        java.lang.CharSequence r2;
        android.app.PendingIntent r3;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r4;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "username");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "beginGetPublicKeyCredentialOption");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.content.Context context> = r1;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence username> = r2;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.app.PendingIntent pendingIntent> = r3;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: androidx.credentials.provider.BeginGetPublicKeyCredentialOption beginGetPublicKeyCredentialOption> = r4;

        return;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry$Builder setDisplayName(java.lang.CharSequence)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        java.lang.CharSequence r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence displayName> = r1;

        return r0;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry$Builder setIcon(android.graphics.drawable.Icon)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        android.graphics.drawable.Icon r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        r1 := @parameter0: android.graphics.drawable.Icon;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "icon");

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.graphics.drawable.Icon icon> = r1;

        return r0;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry$Builder setAutoSelectAllowed(boolean)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        boolean z0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: boolean autoSelectAllowed> = z0;

        return r0;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry$Builder setLastUsedTime(java.time.Instant)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        java.time.Instant r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        r1 := @parameter0: java.time.Instant;

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.time.Instant lastUsedTime> = r1;

        return r0;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry build()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$Builder r0;
        java.lang.String r1, $r4;
        android.graphics.drawable.Icon $r2, $r6, $r14;
        int $i0, $i1;
        android.content.Context $r3, $r13;
        androidx.credentials.provider.PublicKeyCredentialEntry $r5;
        java.lang.CharSequence $r7, $r8, $r9;
        android.app.PendingIntent $r10;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption $r11;
        boolean $z0;
        java.time.Instant $r12;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$Builder;

        $r2 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.graphics.drawable.Icon icon>;

        if $r2 != null goto label1;

        $r13 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.content.Context context>;

        $i1 = <androidx.credentials.R$drawable: int ic_passkey>;

        $r14 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>($r13, $i1);

        r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.graphics.drawable.Icon icon> = $r14;

     label1:
        $r3 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.content.Context context>;

        $i0 = <androidx.credentials.R$string: int androidx_credentials_TYPE_PUBLIC_KEY_CREDENTIAL>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getString(int)>($i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "context.getString(\n     \u2026PE_PUBLIC_KEY_CREDENTIAL)");

        r1 = $r4;

        $r5 = new androidx.credentials.provider.PublicKeyCredentialEntry;

        $r7 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence username>;

        $r8 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.lang.CharSequence displayName>;

        $r9 = (java.lang.CharSequence) r1;

        $r10 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.app.PendingIntent pendingIntent>;

        $r6 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: android.graphics.drawable.Icon icon>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r12 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: java.time.Instant lastUsedTime>;

        $z0 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: boolean autoSelectAllowed>;

        $r11 = r0.<androidx.credentials.provider.PublicKeyCredentialEntry$Builder: androidx.credentials.provider.BeginGetPublicKeyCredentialOption beginGetPublicKeyCredentialOption>;

        specialinvoke $r5.<androidx.credentials.provider.PublicKeyCredentialEntry: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.graphics.drawable.Icon,java.time.Instant,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r7, $r8, $r9, $r10, $r6, $r12, $z0, $r11, 0, 0, 768, null);

        return $r5;
    }

androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1
    void <init>()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 r0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.credentials.provider.PublicKeyCredentialEntry createFromParcel(android.os.Parcel)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 r0;
        android.os.Parcel r1;
        android.service.credentials.CredentialEntry r2;
        android.os.Parcelable$Creator $r3;
        java.lang.Object $r4;
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR $r5;
        android.app.slice.Slice $r6;
        androidx.credentials.provider.PublicKeyCredentialEntry $r7;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        r1 := @parameter0: android.os.Parcel;

        $r3 = <android.service.credentials.CredentialEntry: android.os.Parcelable$Creator CREATOR>;

        $r4 = interfaceinvoke $r3.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r2 = (android.service.credentials.CredentialEntry) $r4;

        $r5 = <androidx.credentials.provider.PublicKeyCredentialEntry: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR CREATOR>;

        $r6 = virtualinvoke r2.<android.service.credentials.CredentialEntry: android.app.slice.Slice getSlice()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "credentialEntry.slice");

        $r7 = virtualinvoke $r5.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: androidx.credentials.provider.PublicKeyCredentialEntry fromSlice(android.app.slice.Slice)>($r6);

        return $r7;
    }

    public androidx.credentials.provider.PublicKeyCredentialEntry[] newArray(int)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 r0;
        int i0;
        androidx.credentials.provider.PublicKeyCredentialEntry[] $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.credentials.provider.PublicKeyCredentialEntry)[i0];

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 r0;
        android.os.Parcel r1;
        androidx.credentials.provider.PublicKeyCredentialEntry $r2;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1: androidx.credentials.provider.PublicKeyCredentialEntry createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1 r0;
        int i0;
        androidx.credentials.provider.PublicKeyCredentialEntry[] $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR$CREATOR$1: androidx.credentials.provider.PublicKeyCredentialEntry[] newArray(int)>(i0);

        return $r1;
    }

androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR
    private void <init>()
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR r0;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getSLICE_HINT_TYPE_DISPLAY_NAME$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_TITLE$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_SUBTITLE$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_LAST_USED_TIME_MILLIS$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_ICON$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_PENDING_INTENT$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_AUTO_ALLOWED$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_OPTION_ID$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_AUTO_SELECT_FROM_OPTION$credentials_release$annotations()
    {
        return;
    }

    public static void getSLICE_HINT_DEFAULT_ICON_RES_ID$credentials_release$annotations()
    {
        return;
    }

    public static void getAUTO_SELECT_TRUE_STRING$credentials_release$annotations()
    {
        return;
    }

    public static void getAUTO_SELECT_FALSE_STRING$credentials_release$annotations()
    {
        return;
    }

    public final android.app.slice.Slice toSlice$credentials_release(java.lang.String, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent, java.lang.CharSequence, java.time.Instant, android.graphics.drawable.Icon, boolean, androidx.credentials.provider.BeginGetPublicKeyCredentialOption)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR r0;
        java.lang.String r1, r9, $r24, $r42;
        java.lang.CharSequence r2, r3, r5, $r21, $r25;
        android.app.PendingIntent r4;
        java.time.Instant r6;
        android.graphics.drawable.Icon r7;
        boolean z0, $z1;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption r8;
        android.app.slice.Slice$Builder r10, $r12, $r16, $r18, $r20, $r23, $r27, $r29, $r31;
        java.lang.Throwable r11, $r41;
        android.app.slice.SliceSpec $r13;
        android.net.Uri $r14;
        java.util.List $r15, $r17, $r19, $r22, $r26, $r28, $r30, $r35, $r37, $r39;
        int $i0, $i1;
        android.app.slice.Slice $r32, $r34;
        long $l2;
        androidx.credentials.CredentialOption$Companion $r43;
        android.os.Bundle $r44;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.CharSequence;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: java.lang.CharSequence;

        r6 := @parameter5: java.time.Instant;

        r7 := @parameter6: android.graphics.drawable.Icon;

        z0 := @parameter7: boolean;

        r8 := @parameter8: androidx.credentials.provider.BeginGetPublicKeyCredentialOption;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "title");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "pendingIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "icon");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "beginGetPublicKeyCredentialOption");

        if z0 == 0 goto label1;

        $r42 = "true";

        goto label2;

     label1:
        $r42 = "false";

     label2:
        r9 = $r42;

        $r12 = new android.app.slice.Slice$Builder;

        $r14 = <android.net.Uri: android.net.Uri EMPTY>;

        $r13 = new android.app.slice.SliceSpec;

        specialinvoke $r13.<android.app.slice.SliceSpec: void <init>(java.lang.String,int)>(r1, 1);

        specialinvoke $r12.<android.app.slice.Slice$Builder: void <init>(android.net.Uri,android.app.slice.SliceSpec)>($r14, $r13);

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_TYPE_DISPLAY_NAME");

        $r16 = virtualinvoke $r12.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>(r5, null, $r15);

        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_USER_NAME");

        $r18 = virtualinvoke $r16.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>(r2, null, $r17);

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_CREDENTIAL_TYPE_DISPLAY_NAME");

        $r20 = virtualinvoke $r18.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>(r3, null, $r19);

        $r21 = (java.lang.CharSequence) r9;

        $r22 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_AUTO_ALLOWED");

        $r23 = virtualinvoke $r20.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>($r21, null, $r22);

        $r24 = virtualinvoke r8.<androidx.credentials.provider.BeginGetPublicKeyCredentialOption: java.lang.String getId()>();

        $r25 = (java.lang.CharSequence) $r24;

        $r26 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_OPTION_ID");

        $r27 = virtualinvoke $r23.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>($r25, null, $r26);

        $r28 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_PROFILE_ICON");

        r10 = virtualinvoke $r27.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addIcon(android.graphics.drawable.Icon,java.lang.String,java.util.List)>(r7, null, $r28);

     label3:
        $i0 = virtualinvoke r7.<android.graphics.drawable.Icon: int getResId()>();

        $i1 = <androidx.credentials.R$drawable: int ic_passkey>;

        if $i0 != $i1 goto label6;

        $r39 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_DEFAULT_ICON_RES_ID");

        virtualinvoke r10.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addInt(int,java.lang.String,java.util.List)>(1, null, $r39);

     label4:
        goto label6;

     label5:
        $r41 := @caughtexception;

        r11 = $r41;

     label6:
        $r43 = <androidx.credentials.CredentialOption: androidx.credentials.CredentialOption$Companion Companion>;

        $r44 = virtualinvoke r8.<androidx.credentials.provider.BeginGetPublicKeyCredentialOption: android.os.Bundle getCandidateQueryData()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r44, "beginGetPublicKeyCredent\u2026Option.candidateQueryData");

        $z1 = virtualinvoke $r43.<androidx.credentials.CredentialOption$Companion: boolean extractAutoSelectValue$credentials_release(android.os.Bundle)>($r44);

        if $z1 == 0 goto label7;

        $r37 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_AUTO_SELECT_FROM_OPTION");

        virtualinvoke r10.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addInt(int,java.lang.String,java.util.List)>(1, null, $r37);

     label7:
        if r6 == null goto label8;

        $l2 = virtualinvoke r6.<java.time.Instant: long toEpochMilli()>();

        $r35 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_LAST_USED_TIME_MILLIS");

        virtualinvoke r10.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addLong(long,java.lang.String,java.util.List)>($l2, null, $r35);

     label8:
        $r29 = new android.app.slice.Slice$Builder;

        specialinvoke $r29.<android.app.slice.Slice$Builder: void <init>(android.app.slice.Slice$Builder)>(r10);

        $r30 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_PENDING_INTENT");

        $r31 = virtualinvoke $r29.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addHints(java.util.List)>($r30);

        $r32 = virtualinvoke $r31.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        virtualinvoke r10.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>(r4, $r32, null);

        $r34 = virtualinvoke r10.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r34, "sliceBuilder.build()");

        return $r34;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public final androidx.credentials.provider.PublicKeyCredentialEntry fromSlice(android.app.slice.Slice)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR r0;
        android.app.slice.Slice r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        android.app.slice.SliceItem r4;
        java.lang.CharSequence r5, r18, r19, r20, r24;
        java.util.List $r6;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15;
        androidx.credentials.provider.PublicKeyCredentialEntry $r7, $r26;
        android.os.Bundle $r8;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion $r9;
        java.lang.String $r10, $r15, $r17;
        androidx.credentials.provider.BeginGetPublicKeyCredentialOption $r11;
        long $l0;
        java.lang.Throwable $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        android.graphics.drawable.Icon r21;
        android.app.PendingIntent r22;
        java.time.Instant r23;
        java.lang.Iterable $r25;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR;

        r1 := @parameter0: android.app.slice.Slice;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slice");

        r18 = null;

        r19 = null;

        r20 = null;

        r21 = null;

        r22 = null;

        r23 = null;

        z13 = 0;

        r24 = null;

        z14 = 0;

        z15 = 0;

        $r6 = virtualinvoke r1.<android.app.slice.Slice: java.util.List getItems()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "slice.items");

        $r25 = (java.lang.Iterable) $r6;

        r2 = interfaceinvoke $r25.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.app.slice.SliceItem) r3;

        $z2 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_TYPE_DISPLAY_NAME");

        if $z2 == 0 goto label02;

        r18 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

        goto label11;

     label02:
        $z3 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_USER_NAME");

        if $z3 == 0 goto label03;

        r19 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

        goto label11;

     label03:
        $z4 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_CREDENTIAL_TYPE_DISPLAY_NAME");

        if $z4 == 0 goto label04;

        r20 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

        goto label11;

     label04:
        $z5 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_PROFILE_ICON");

        if $z5 == 0 goto label05;

        r21 = virtualinvoke r4.<android.app.slice.SliceItem: android.graphics.drawable.Icon getIcon()>();

        goto label11;

     label05:
        $z6 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_PENDING_INTENT");

        if $z6 == 0 goto label06;

        r22 = virtualinvoke r4.<android.app.slice.SliceItem: android.app.PendingIntent getAction()>();

        goto label11;

     label06:
        $z7 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_OPTION_ID");

        if $z7 == 0 goto label07;

        r24 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

        goto label11;

     label07:
        $z8 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_LAST_USED_TIME_MILLIS");

        if $z8 == 0 goto label08;

        $l0 = virtualinvoke r4.<android.app.slice.SliceItem: long getLong()>();

        r23 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>($l0);

        goto label11;

     label08:
        $z9 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_AUTO_ALLOWED");

        if $z9 == 0 goto label09;

        r5 = virtualinvoke r4.<android.app.slice.SliceItem: java.lang.CharSequence getText()>();

        $z12 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, "true");

        if $z12 == 0 goto label11;

        z13 = 1;

        goto label11;

     label09:
        $z10 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_AUTO_SELECT_FROM_OPTION");

        if $z10 == 0 goto label10;

        z14 = 1;

        goto label11;

     label10:
        $z11 = virtualinvoke r4.<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>("androidx.credentials.provider.credentialEntry.SLICE_HINT_DEFAULT_ICON_RES_ID");

        if $z11 == 0 goto label11;

        z15 = 1;

     label11:
        goto label01;

     label12:
        $r7 = new androidx.credentials.provider.PublicKeyCredentialEntry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r19);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r22);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r21);

        $r9 = <androidx.credentials.provider.BeginGetPublicKeyCredentialOption: androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion Companion>;

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r24);

        $r10 = virtualinvoke r24.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<androidx.credentials.provider.BeginGetPublicKeyCredentialOption$Companion: androidx.credentials.provider.BeginGetPublicKeyCredentialOption createFromEntrySlice$credentials_release(android.os.Bundle,java.lang.String)>($r8, $r10);

        specialinvoke $r7.<androidx.credentials.provider.PublicKeyCredentialEntry: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.graphics.drawable.Icon,java.time.Instant,boolean,androidx.credentials.provider.BeginGetPublicKeyCredentialOption,boolean,boolean)>(r19, r20, r18, r22, r21, r23, z13, $r11, z14, z15);

        $r26 = $r7;

     label13:
        goto label15;

     label14:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromSlice failed with: ");

        $r15 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PublicKeyCredEntry", $r17);

        $r26 = null;

     label15:
        return $r26;

        catch java.lang.Exception from label12 to label13 with label14;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.credentials.provider.PublicKeyCredentialEntry$CREATOR: void <init>()>();

        return;
    }

