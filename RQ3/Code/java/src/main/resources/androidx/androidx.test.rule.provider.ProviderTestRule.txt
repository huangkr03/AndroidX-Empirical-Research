androidx.test.rule.provider.ProviderTestRule
<androidx.test.rule.provider.ProviderTestRule: java.lang.String TAG>
<androidx.test.rule.provider.ProviderTestRule: java.util.Set providersRef>
<androidx.test.rule.provider.ProviderTestRule: java.util.Set databaseArgsSet>
<androidx.test.rule.provider.ProviderTestRule: android.content.ContentResolver resolver>
<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>
    public android.content.ContentResolver getResolver()
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        android.content.ContentResolver $r1;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        $r1 = r0.<androidx.test.rule.provider.ProviderTestRule: android.content.ContentResolver resolver>;

        return $r1;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        androidx.test.rule.provider.ProviderTestRule$ProviderStatement $r3;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new androidx.test.rule.provider.ProviderTestRule$ProviderStatement;

        specialinvoke $r3.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: void <init>(androidx.test.rule.provider.ProviderTestRule,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    static volatile void '-$$Nest$mcleanUpProviders'(androidx.test.rule.provider.ProviderTestRule)
    {
        androidx.test.rule.provider.ProviderTestRule r0;

        r0 := @parameter0: androidx.test.rule.provider.ProviderTestRule;

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void cleanUpProviders()>();

        return;
    }

    static volatile void '-$$Nest$msetUpProviders'(androidx.test.rule.provider.ProviderTestRule)
    {
        androidx.test.rule.provider.ProviderTestRule r0;

        r0 := @parameter0: androidx.test.rule.provider.ProviderTestRule;

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void setUpProviders()>();

        return;
    }

    void <init>(java.util.Set, java.util.Set, android.content.ContentResolver, androidx.test.rule.provider.DelegatingContext)
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        java.util.Set r1, r2;
        android.content.ContentResolver r3;
        androidx.test.rule.provider.DelegatingContext r4;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: android.content.ContentResolver;

        r4 := @parameter3: androidx.test.rule.provider.DelegatingContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.rule.provider.ProviderTestRule: java.util.Set providersRef> = r1;

        r0.<androidx.test.rule.provider.ProviderTestRule: java.util.Set databaseArgsSet> = r2;

        r0.<androidx.test.rule.provider.ProviderTestRule: android.content.ContentResolver resolver> = r3;

        r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context> = r4;

        return;
    }

    protected void afterProviderCleanedUp()
    {
        androidx.test.rule.provider.ProviderTestRule r0;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        return;
    }

    protected void beforeProviderSetup()
    {
        androidx.test.rule.provider.ProviderTestRule r0;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        return;
    }

    private void cleanUpProviders()
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        int $i0;
        java.util.Set $r1, $r4;
        java.lang.Object $r2, $r5, $r6;
        androidx.test.rule.provider.DelegatingContext $r3;
        boolean $z1, $z2;
        java.util.Iterator r7, r10;
        java.lang.ref.WeakReference r8;
        android.content.ContentProvider r9;
        androidx.test.rule.provider.DatabaseArgs r11;
        java.lang.String r12;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label3;

        $r4 = r0.<androidx.test.rule.provider.ProviderTestRule: java.util.Set providersRef>;

        r7 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.ref.WeakReference) $r5;

        $r6 = virtualinvoke r8.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r9 = (android.content.ContentProvider) $r6;

        if r9 == null goto label2;

        virtualinvoke r9.<android.content.ContentProvider: void shutdown()>();

     label2:
        goto label1;

     label3:
        $r1 = r0.<androidx.test.rule.provider.ProviderTestRule: java.util.Set databaseArgsSet>;

        r10 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r2 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.test.rule.provider.DatabaseArgs) $r2;

        r12 = virtualinvoke r11.<androidx.test.rule.provider.DatabaseArgs: java.lang.String getDBName()>();

        if r12 == null goto label5;

        $r3 = r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>;

        virtualinvoke $r3.<androidx.test.rule.provider.DelegatingContext: boolean deleteDatabase(java.lang.String)>(r12);

     label5:
        goto label4;

     label6:
        virtualinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void afterProviderCleanedUp()>();

        return;
    }

    private void collectDBCmdsFromFile(androidx.test.rule.provider.DatabaseArgs) throws java.io.IOException
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        androidx.test.rule.provider.DatabaseArgs r1;
        java.io.File r2;
        java.util.ArrayList r3, $r5;
        java.lang.Throwable r4, $r13, $r14, r20;
        java.io.BufferedReader $r6, r17;
        java.io.InputStreamReader $r7;
        java.io.FileInputStream $r8;
        java.nio.charset.Charset $r9;
        int $i0;
        java.lang.String[] $r10, $r12;
        java.lang.Object[] $r11, $r15;
        boolean $z0;
        java.lang.String $r16, $r18, r19;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: androidx.test.rule.provider.DatabaseArgs;

        r17 = null;

        r2 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: java.io.File getDBCmdFile()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = $r5;

     label1:
        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.InputStreamReader;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        $r9 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r8, $r9);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

        r17 = $r6;

     label2:
        $r18 = virtualinvoke r17.<java.io.BufferedReader: java.lang.String readLine()>();

        r19 = $r18;

        if $r18 == null goto label3;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r19);

        if $z0 != 0 goto label2;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r19);

        goto label2;

     label3:
        if r17 == null goto label8;

        virtualinvoke r17.<java.io.BufferedReader: void close()>();

        goto label8;

     label4:
        $r14 := @caughtexception;

        r20 = $r14;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r2;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot open command file %s to read", $r15);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r16);

        throw r20;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

     label6:
        if r17 == null goto label7;

        virtualinvoke r17.<java.io.BufferedReader: void close()>();

     label7:
        throw r4;

     label8:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r10 = newarray (java.lang.String)[$i0];

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.String[]) $r11;

        virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: void addDBCmds(java.lang.String[])>($r12);

        return;

        catch java.io.IOException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    private void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        java.io.File r1, r2, r3;
        java.nio.channels.FileChannel r4, r16;
        java.lang.Throwable r5, r6, $r11, $r12;
        boolean $z0, $z1;
        java.io.FileInputStream $r7;
        java.io.FileOutputStream $r8;
        long $l0;
        java.lang.Object[] $r9, $r13;
        java.io.IOException $r10;
        java.lang.String $r14, r15;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label1;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("error happened creating parent dir for file %s", $r9);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", r15);

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>(r15);

        throw $r10;

     label1:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r16 = virtualinvoke $r7.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        r4 = virtualinvoke $r8.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

     label2:
        $l0 = virtualinvoke r16.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke r16.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, $l0, r4);

     label3:
        virtualinvoke r16.<java.nio.channels.FileChannel: void close()>();

        virtualinvoke r4.<java.nio.channels.FileChannel: void close()>();

        goto label7;

     label4:
        $r12 := @caughtexception;

        r5 = $r12;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r1;

        $r13[1] = r2;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("error happened copying file from %s to %s", $r13);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r14);

        throw r5;

     label5:
        $r11 := @caughtexception;

        r6 = $r11;

     label6:
        virtualinvoke r16.<java.nio.channels.FileChannel: void close()>();

        virtualinvoke r4.<java.nio.channels.FileChannel: void close()>();

        throw r6;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    private void restoreDBDataFromFile(androidx.test.rule.provider.DatabaseArgs) throws java.io.IOException
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        androidx.test.rule.provider.DatabaseArgs r1;
        java.io.File r2, $r7;
        java.lang.String r3, $r5;
        boolean $z0;
        java.lang.Object[] $r4;
        androidx.test.rule.provider.DelegatingContext $r6, $r8;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: androidx.test.rule.provider.DatabaseArgs;

        r2 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: java.io.File getDBDataFile()>();

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The database file %s doesn\'t exist!", $r4);

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, $r5);

        r3 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: java.lang.String getDBName()>();

        $r6 = r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>;

        $r7 = virtualinvoke $r6.<androidx.test.rule.provider.DelegatingContext: java.io.File getDatabasePath(java.lang.String)>(r3);

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void copyFile(java.io.File,java.io.File)>(r2, $r7);

        $r8 = r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>;

        virtualinvoke $r8.<androidx.test.rule.provider.DelegatingContext: boolean addDatabase(java.lang.String)>(r3);

        return;
    }

    public void revokePermission(java.lang.String)
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        java.lang.String r1;
        boolean $z0, $z1;
        androidx.test.rule.provider.DelegatingContext $r2;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "permission cannot be null or empty");

        $r2 = r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>;

        virtualinvoke $r2.<androidx.test.rule.provider.DelegatingContext: void addRevokedPermission(java.lang.String)>(r1);

        return;
    }

    public transient void runDatabaseCommands(java.lang.String, java.lang.String[])
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        java.lang.String r1, r5, $r12;
        java.lang.String[] r2, r4;
        android.database.sqlite.SQLiteDatabase r3;
        int i0, $i1, i3;
        java.lang.Throwable r6, $r10;
        androidx.test.rule.provider.DelegatingContext $r9;
        boolean $z0;
        java.lang.Object[] $r11;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $i1 = lengthof r2;

        if $i1 <= 0 goto label6;

        $r9 = r0.<androidx.test.rule.provider.ProviderTestRule: androidx.test.rule.provider.DelegatingContext context>;

        r3 = virtualinvoke $r9.<androidx.test.rule.provider.DelegatingContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>(r1, 0, null);

        r4 = r2;

        i0 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r5 = r4[i3];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label5;

     label2:
        virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(r5);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r6 = $r10;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r5;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error executing sql command %s, possibly wrong or duplicated commands (e.g. same table insertion command without checking current table existence).", $r11);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r12);

        throw r6;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;

        catch android.database.sqlite.SQLiteException from label2 to label3 with label4;
    }

    private void setUpProvider(androidx.test.rule.provider.DatabaseArgs) throws java.io.IOException
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        androidx.test.rule.provider.DatabaseArgs r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        java.lang.String[] $r3;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        r1 := @parameter0: androidx.test.rule.provider.DatabaseArgs;

        $z0 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: boolean hasDBDataFile()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void restoreDBDataFromFile(androidx.test.rule.provider.DatabaseArgs)>(r1);

     label1:
        $z1 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: boolean hasDBCmdFile()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void collectDBCmdsFromFile(androidx.test.rule.provider.DatabaseArgs)>(r1);

     label2:
        $z2 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: boolean hasDBCmds()>();

        if $z2 == 0 goto label3;

        $r2 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: java.lang.String getDBName()>();

        $r3 = virtualinvoke r1.<androidx.test.rule.provider.DatabaseArgs: java.lang.String[] getDBCmds()>();

        virtualinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void runDatabaseCommands(java.lang.String,java.lang.String[])>($r2, $r3);

     label3:
        return;
    }

    private void setUpProviders() throws java.io.IOException
    {
        androidx.test.rule.provider.ProviderTestRule r0;
        java.util.Iterator r1;
        androidx.test.rule.provider.DatabaseArgs r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule;

        virtualinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void beforeProviderSetup()>();

        $r3 = r0.<androidx.test.rule.provider.ProviderTestRule: java.util.Set databaseArgsSet>;

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.rule.provider.DatabaseArgs) $r4;

        specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule: void setUpProvider(androidx.test.rule.provider.DatabaseArgs)>(r2);

        goto label1;

     label2:
        return;
    }

androidx.test.rule.provider.ProviderTestRule$Builder
<androidx.test.rule.provider.ProviderTestRule$Builder: java.lang.String DEFAULT_PREFIX>
<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>
<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap>
<androidx.test.rule.provider.ProviderTestRule$Builder: java.lang.String prefix>
    private android.content.ContentProvider createProvider(java.lang.String, java.lang.Class, android.test.mock.MockContentResolver, android.content.Context)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1, $r11, $r16, $r22, $r28, $r34, r37, r39, r41, r43;
        java.lang.Class r2;
        android.test.mock.MockContentResolver r3;
        android.content.Context r4;
        android.content.ContentProvider r5;
        java.lang.Class[] $r6;
        java.lang.reflect.Constructor $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        android.content.pm.ProviderInfo $r10, r44;
        java.lang.Throwable $r12, $r18, $r24, $r30, r36, r38, r40, r42;
        java.lang.StringBuilder $r13, $r14, $r15, $r19, $r20, $r21, $r25, $r26, $r27, $r31, $r32, $r33;
        java.lang.RuntimeException $r17, $r23, $r29, $r35;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.test.mock.MockContentResolver;

        r4 := @parameter3: android.content.Context;

     label1:
        $r6 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        r5 = (android.content.ContentProvider) $r9;

     label2:
        goto label7;

     label3:
        $r30 := @caughtexception;

        r36 = $r30;

        r37 = virtualinvoke r2.<java.lang.Class: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NoSuchMethodException occurred when trying create new Instance for ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r34);

        $r35 = new java.lang.RuntimeException;

        specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r36);

        throw $r35;

     label4:
        $r12 := @caughtexception;

        r38 = $r12;

        r39 = virtualinvoke r2.<java.lang.Class: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvocationTargetException occurred when trying create new Instance for ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r16);

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r38);

        throw $r17;

     label5:
        $r24 := @caughtexception;

        r40 = $r24;

        r41 = virtualinvoke r2.<java.lang.Class: java.lang.String toString()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException occurred when trying create new Instance for ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r28);

        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r40);

        throw $r29;

     label6:
        $r18 := @caughtexception;

        r42 = $r18;

        r43 = virtualinvoke r2.<java.lang.Class: java.lang.String toString()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException occurred when trying create new Instance for ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ProviderTestRule", $r22);

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r42);

        throw $r23;

     label7:
        $r10 = new android.content.pm.ProviderInfo;

        specialinvoke $r10.<android.content.pm.ProviderInfo: void <init>()>();

        r44 = $r10;

        r44.<android.content.pm.ProviderInfo: java.lang.String authority> = r1;

        virtualinvoke r5.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(r4, r44);

        $r11 = r44.<android.content.pm.ProviderInfo: java.lang.String authority>;

        virtualinvoke r3.<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>($r11, r5);

        return r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label1 to label2 with label6;
    }

    private androidx.test.rule.provider.DatabaseArgs getDatabaseArgs(java.lang.String)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1;
        androidx.test.rule.provider.DatabaseArgs r2, $r4, $r9;
        java.util.Map $r3, $r5, $r7;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (androidx.test.rule.provider.DatabaseArgs) $r8;

        return $r9;

     label1:
        $r4 = new androidx.test.rule.provider.DatabaseArgs;

        specialinvoke $r4.<androidx.test.rule.provider.DatabaseArgs: void <init>(java.lang.String)>(r1);

        r2 = $r4;

        $r5 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    public androidx.test.rule.provider.ProviderTestRule$Builder addProvider(java.lang.Class, java.lang.String)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.Class r1;
        java.lang.String r2, $r8;
        java.util.Map $r5, $r6, $r9;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r7;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z1, "No existing provider yet while trying to add more");

        $r6 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ContentProvider with authority %s already exists.", $r7);

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z2, $r8);

        $r9 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return r0;
    }

    public transient androidx.test.rule.provider.ProviderTestRule$Builder setDatabaseCommands(java.lang.String, java.lang.String[])
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1;
        java.lang.String[] r2;
        androidx.test.rule.provider.DatabaseArgs $r5;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule$Builder: androidx.test.rule.provider.DatabaseArgs getDatabaseArgs(java.lang.String)>(r1);

        virtualinvoke $r5.<androidx.test.rule.provider.DatabaseArgs: void setDBCmds(java.lang.String[])>(r2);

        return r0;
    }

    public androidx.test.rule.provider.ProviderTestRule$Builder setDatabaseCommandsFile(java.lang.String, java.io.File)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1;
        java.io.File r2;
        androidx.test.rule.provider.DatabaseArgs $r5;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule$Builder: androidx.test.rule.provider.DatabaseArgs getDatabaseArgs(java.lang.String)>(r1);

        virtualinvoke $r5.<androidx.test.rule.provider.DatabaseArgs: void setDBCmdFile(java.io.File)>(r2);

        return r0;
    }

    public androidx.test.rule.provider.ProviderTestRule$Builder setDatabaseFile(java.lang.String, java.io.File)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1;
        java.io.File r2;
        androidx.test.rule.provider.DatabaseArgs $r5;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule$Builder: androidx.test.rule.provider.DatabaseArgs getDatabaseArgs(java.lang.String)>(r1);

        virtualinvoke $r5.<androidx.test.rule.provider.DatabaseArgs: void setDBDataFile(java.io.File)>(r2);

        return r0;
    }

    public androidx.test.rule.provider.ProviderTestRule$Builder setPrefix(java.lang.String)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "The prefix cannot be null or empty");

        r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.lang.String prefix> = r1;

        return r0;
    }

    public androidx.test.rule.provider.ProviderTestRule build()
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.util.HashSet r1, r25, r29;
        android.test.mock.MockContentResolver r2, r26;
        androidx.test.rule.provider.DelegatingContext r3, r27;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        android.content.ContentProvider r6;
        android.app.Instrumentation $r10;
        android.content.Context $r11, r31;
        java.lang.String $r12, $r21;
        java.util.Map $r13, $r17;
        java.util.Set $r14;
        boolean $z0;
        java.util.Collection $r18;
        java.lang.Object $r19, $r20, $r22;
        java.lang.Class $r23;
        java.lang.ref.WeakReference r28;
        androidx.test.rule.provider.ProviderTestRule r30;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r25 = new java.util.HashSet;

        specialinvoke r25.<java.util.HashSet: void <init>()>();

        r1 = r25;

        r26 = new android.test.mock.MockContentResolver;

        specialinvoke r26.<android.test.mock.MockContentResolver: void <init>()>();

        r2 = r26;

        r27 = new androidx.test.rule.provider.DelegatingContext;

        $r10 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r11 = virtualinvoke $r10.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r12 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.lang.String prefix>;

        specialinvoke r27.<androidx.test.rule.provider.DelegatingContext: void <init>(android.content.Context,java.lang.String,android.content.ContentResolver)>($r11, $r12, r2);

        r3 = r27;

        $r13 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (java.lang.String) $r20;

        $r22 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (java.lang.Class) $r22;

        r31 = (android.content.Context) r3;

        r6 = specialinvoke r0.<androidx.test.rule.provider.ProviderTestRule$Builder: android.content.ContentProvider createProvider(java.lang.String,java.lang.Class,android.test.mock.MockContentResolver,android.content.Context)>($r21, $r23, r2, r31);

        r28 = new java.lang.ref.WeakReference;

        specialinvoke r28.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r6);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r28);

        goto label1;

     label2:
        r30 = new androidx.test.rule.provider.ProviderTestRule;

        r29 = new java.util.HashSet;

        $r17 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Collection values()>();

        specialinvoke r29.<java.util.HashSet: void <init>(java.util.Collection)>($r18);

        specialinvoke r30.<androidx.test.rule.provider.ProviderTestRule: void <init>(java.util.Set,java.util.Set,android.content.ContentResolver,androidx.test.rule.provider.DelegatingContext)>(r1, r29, r2, r3);

        return r30;
    }

    public void <init>(java.lang.Class, java.lang.String)
    {
        androidx.test.rule.provider.ProviderTestRule$Builder r0;
        java.lang.Class r1;
        java.lang.String r2;
        java.util.HashMap $r3, $r4;
        java.util.Map $r7;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$Builder;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map databaseArgsMap> = $r4;

        r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.lang.String prefix> = "test.";

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = r0.<androidx.test.rule.provider.ProviderTestRule$Builder: java.util.Map providerClasses>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

androidx.test.rule.provider.ProviderTestRule$ProviderStatement
<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: org.junit.runners.model.Statement base>
<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: androidx.test.rule.provider.ProviderTestRule this$0>
    public void <init>(androidx.test.rule.provider.ProviderTestRule, org.junit.runners.model.Statement)
    {
        androidx.test.rule.provider.ProviderTestRule$ProviderStatement r0;
        androidx.test.rule.provider.ProviderTestRule r1;
        org.junit.runners.model.Statement r2;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$ProviderStatement;

        r1 := @parameter0: androidx.test.rule.provider.ProviderTestRule;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: androidx.test.rule.provider.ProviderTestRule this$0> = r1;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: org.junit.runners.model.Statement base> = r2;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        androidx.test.rule.provider.ProviderTestRule$ProviderStatement r0;
        java.lang.Throwable r1, $r5;
        androidx.test.rule.provider.ProviderTestRule $r2, $r4, $r6;
        org.junit.runners.model.Statement $r3;

        r0 := @this: androidx.test.rule.provider.ProviderTestRule$ProviderStatement;

     label1:
        $r2 = r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: androidx.test.rule.provider.ProviderTestRule this$0>;

        staticinvoke <androidx.test.rule.provider.ProviderTestRule: void '-$$Nest$msetUpProviders'(androidx.test.rule.provider.ProviderTestRule)>($r2);

        $r3 = r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: org.junit.runners.model.Statement base>;

        virtualinvoke $r3.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        $r4 = r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: androidx.test.rule.provider.ProviderTestRule this$0>;

        staticinvoke <androidx.test.rule.provider.ProviderTestRule: void '-$$Nest$mcleanUpProviders'(androidx.test.rule.provider.ProviderTestRule)>($r4);

        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = r0.<androidx.test.rule.provider.ProviderTestRule$ProviderStatement: androidx.test.rule.provider.ProviderTestRule this$0>;

        staticinvoke <androidx.test.rule.provider.ProviderTestRule: void '-$$Nest$mcleanUpProviders'(androidx.test.rule.provider.ProviderTestRule)>($r6);

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

