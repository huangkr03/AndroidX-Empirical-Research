androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory
<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.ImageCaptureConfigProvider mImageCaptureConfigProvider>
<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.PreviewConfigProvider mPreviewConfigProvider>
    public void <init>(int, androidx.camera.extensions.internal.VendorExtender, android.content.Context)
    {
        androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory r0;
        int i0;
        androidx.camera.extensions.internal.VendorExtender r1;
        android.content.Context r2;
        androidx.camera.extensions.internal.ImageCaptureConfigProvider $r3;
        androidx.camera.extensions.internal.PreviewConfigProvider $r4;

        r0 := @this: androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.extensions.internal.VendorExtender;

        r2 := @parameter2: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new androidx.camera.extensions.internal.ImageCaptureConfigProvider;

        specialinvoke $r3.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: void <init>(int,androidx.camera.extensions.internal.VendorExtender,android.content.Context)>(i0, r1, r2);

        r0.<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.ImageCaptureConfigProvider mImageCaptureConfigProvider> = $r3;

        $r4 = new androidx.camera.extensions.internal.PreviewConfigProvider;

        specialinvoke $r4.<androidx.camera.extensions.internal.PreviewConfigProvider: void <init>(int,androidx.camera.extensions.internal.VendorExtender,android.content.Context)>(i0, r1, r2);

        r0.<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.PreviewConfigProvider mPreviewConfigProvider> = $r4;

        return;
    }

    public androidx.camera.core.impl.Config getConfig(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType, int)
    {
        androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory r0;
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType r1;
        int i0, $i1, $i2;
        int[] $r2;
        java.lang.IllegalArgumentException $r3;
        androidx.camera.extensions.internal.PreviewConfigProvider $r4;
        androidx.camera.core.impl.PreviewConfig $r5;
        androidx.camera.core.impl.Config$Option $r6;
        java.lang.Boolean $r7;
        androidx.camera.core.impl.OptionsBundle $r8;
        androidx.camera.extensions.internal.ImageCaptureConfigProvider $r9;
        androidx.camera.core.impl.ImageCaptureConfig $r10;
        androidx.camera.core.impl.MutableOptionsBundle r11;

        r0 := @this: androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType;

        i0 := @parameter1: int;

        $r2 = <androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType>;

        $i1 = virtualinvoke r1.<androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: int ordinal()>();

        $i2 = $r2[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r9 = r0.<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.ImageCaptureConfigProvider mImageCaptureConfigProvider>;

        $r10 = virtualinvoke $r9.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.core.impl.ImageCaptureConfig getConfig()>();

        r11 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>($r10);

        goto label5;

     label2:
        $r4 = r0.<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory: androidx.camera.extensions.internal.PreviewConfigProvider mPreviewConfigProvider>;

        $r5 = virtualinvoke $r4.<androidx.camera.extensions.internal.PreviewConfigProvider: androidx.camera.core.impl.PreviewConfig getConfig()>();

        r11 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>($r5);

        goto label5;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CameraX Extensions doesn\'t support VideoCapture!");

        throw $r3;

     label4:
        return null;

     label5:
        $r6 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_ZSL_DISABLED>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r11.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, $r7);

        $r8 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>(r11);

        return $r8;
    }

androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1
<androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType>
    static void <clinit>()
    {
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r7;
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType $r2, $r4, $r6;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r0 = staticinvoke <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType> = $r1;

     label01:
        $r3 = <androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType>;

        $r2 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType IMAGE_CAPTURE>;

        $i1 = virtualinvoke $r2.<androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r11 = $r10;

     label04:
        $r5 = <androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType>;

        $r4 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType PREVIEW>;

        $i2 = virtualinvoke $r4.<androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r12 = $r9;

     label07:
        $r7 = <androidx.camera.extensions.internal.ExtensionsUseCaseConfigFactory$1: int[] $SwitchMap$androidx$camera$core$impl$UseCaseConfigFactory$CaptureType>;

        $r6 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType VIDEO_CAPTURE>;

        $i3 = virtualinvoke $r6.<androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r13 = $r8;

     label10:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

