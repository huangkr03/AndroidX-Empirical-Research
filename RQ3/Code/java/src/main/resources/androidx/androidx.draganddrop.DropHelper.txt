androidx.draganddrop.DropHelper
<androidx.draganddrop.DropHelper: java.lang.String TAG>
    private void <init>()
    {
        androidx.draganddrop.DropHelper r0;

        r0 := @this: androidx.draganddrop.DropHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void configureView(android.app.Activity, android.view.View, java.lang.String[], androidx.core.view.OnReceiveContentListener)
    {
        android.app.Activity r0;
        android.view.View r1;
        java.lang.String[] r2;
        androidx.core.view.OnReceiveContentListener r3;
        androidx.draganddrop.DropHelper$Options$Builder $r4;
        androidx.draganddrop.DropHelper$Options $r5;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: androidx.core.view.OnReceiveContentListener;

        $r4 = new androidx.draganddrop.DropHelper$Options$Builder;

        specialinvoke $r4.<androidx.draganddrop.DropHelper$Options$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<androidx.draganddrop.DropHelper$Options$Builder: androidx.draganddrop.DropHelper$Options build()>();

        staticinvoke <androidx.draganddrop.DropHelper: void configureView(android.app.Activity,android.view.View,java.lang.String[],androidx.draganddrop.DropHelper$Options,androidx.core.view.OnReceiveContentListener)>(r0, r1, r2, $r5, r3);

        return;
    }

    public static void configureView(android.app.Activity, android.view.View, java.lang.String[], androidx.draganddrop.DropHelper$Options, androidx.core.view.OnReceiveContentListener)
    {
        android.app.Activity r0;
        android.view.View r1;
        java.lang.String[] r2;
        androidx.draganddrop.DropHelper$Options r3;
        androidx.core.view.OnReceiveContentListener r4;
        androidx.draganddrop.DropAffordanceHighlighter$Builder r5;
        androidx.draganddrop.DropAffordanceHighlighter r6;
        java.util.List r7;
        java.util.Iterator r8;
        android.widget.EditText r9;
        androidx.core.util.Predicate $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.View$OnDragListener $r12;
        java.lang.Object $r13;
        int $i0, $i1;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: androidx.draganddrop.DropHelper$Options;

        r4 := @parameter4: androidx.core.view.OnReceiveContentListener;

        $r10 = dynamicinvoke "test" <androidx.core.util.Predicate (java.lang.String[])>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.draganddrop.DropHelper: boolean lambda$configureView$0(java.lang.String[],android.content.ClipDescription)>, methodtype: boolean __METHODTYPE__(android.content.ClipDescription));

        r5 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: androidx.draganddrop.DropAffordanceHighlighter$Builder forView(android.view.View,androidx.core.util.Predicate)>(r1, $r10);

        $z0 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: boolean hasHighlightColor()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: int getHighlightColor()>();

        virtualinvoke r5.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.draganddrop.DropAffordanceHighlighter$Builder setHighlightColor(int)>($i1);

     label1:
        $z1 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: boolean hasHighlightCornerRadiusPx()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: int getHighlightCornerRadiusPx()>();

        virtualinvoke r5.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.draganddrop.DropAffordanceHighlighter$Builder setHighlightCornerRadiusPx(int)>($i0);

     label2:
        $z2 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: boolean shouldAcceptDragsWithLocalState()>();

        virtualinvoke r5.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.draganddrop.DropAffordanceHighlighter$Builder shouldAcceptDragsWithLocalState(boolean)>($z2);

        r6 = virtualinvoke r5.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.draganddrop.DropAffordanceHighlighter build()>();

        r7 = virtualinvoke r3.<androidx.draganddrop.DropHelper$Options: java.util.List getInnerEditTexts()>();

        $z3 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label5;

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r13 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.widget.EditText) $r13;

        staticinvoke <androidx.draganddrop.DropHelper: void setHighlightingAndHandling(android.view.View,java.lang.String[],androidx.draganddrop.DropAffordanceHighlighter,androidx.core.view.OnReceiveContentListener,android.app.Activity)>(r9, r2, r6, r4, r0);

        goto label3;

     label4:
        $r12 = staticinvoke <androidx.draganddrop.DropHelper: android.view.View$OnDragListener createDelegatingHighlightingOnDragListener(android.app.Activity,androidx.draganddrop.DropAffordanceHighlighter,java.util.List)>(r0, r6, r7);

        virtualinvoke r1.<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>($r12);

        goto label6;

     label5:
        staticinvoke <androidx.draganddrop.DropHelper: void setHighlightingAndHandling(android.view.View,java.lang.String[],androidx.draganddrop.DropAffordanceHighlighter,androidx.core.view.OnReceiveContentListener,android.app.Activity)>(r1, r2, r6, r4, r0);

     label6:
        return;
    }

    private static void setHighlightingAndHandling(android.view.View, java.lang.String[], androidx.draganddrop.DropAffordanceHighlighter, androidx.core.view.OnReceiveContentListener, android.app.Activity)
    {
        android.view.View r0;
        java.lang.String[] r1;
        androidx.draganddrop.DropAffordanceHighlighter r2;
        androidx.core.view.OnReceiveContentListener r3;
        android.app.Activity r4;
        int $i0;
        android.view.View$OnDragListener $r6, $r7;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: androidx.draganddrop.DropAffordanceHighlighter;

        r3 := @parameter3: androidx.core.view.OnReceiveContentListener;

        r4 := @parameter4: android.app.Activity;

        staticinvoke <androidx.core.view.ViewCompat: void setOnReceiveContentListener(android.view.View,java.lang.String[],androidx.core.view.OnReceiveContentListener)>(r0, r1, r3);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 31 goto label1;

        $z0 = r0 instanceof androidx.appcompat.widget.AppCompatEditText;

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r6 = dynamicinvoke "onDrag" <android.view.View$OnDragListener (androidx.draganddrop.DropAffordanceHighlighter)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.draganddrop.DropAffordanceHighlighter: boolean onDrag(android.view.View,android.view.DragEvent)>, methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent));

        virtualinvoke r0.<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>($r6);

        goto label3;

     label2:
        $r7 = staticinvoke <androidx.draganddrop.DropHelper: android.view.View$OnDragListener createHighlightingOnDragListener(androidx.draganddrop.DropAffordanceHighlighter,android.app.Activity)>(r2, r4);

        virtualinvoke r0.<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>($r7);

     label3:
        return;
    }

    private static android.view.View$OnDragListener createHighlightingOnDragListener(androidx.draganddrop.DropAffordanceHighlighter, android.app.Activity)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.app.Activity r1;
        android.view.View$OnDragListener $r2;

        r0 := @parameter0: androidx.draganddrop.DropAffordanceHighlighter;

        r1 := @parameter1: android.app.Activity;

        $r2 = dynamicinvoke "onDrag" <android.view.View$OnDragListener (android.app.Activity,androidx.draganddrop.DropAffordanceHighlighter)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent), methodhandle: "REF_INVOKE_STATIC" <androidx.draganddrop.DropHelper: boolean lambda$createHighlightingOnDragListener$1(android.app.Activity,androidx.draganddrop.DropAffordanceHighlighter,android.view.View,android.view.DragEvent)>, methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent));

        return $r2;
    }

    private static void requestPermissionsIfNeeded(android.app.Activity, android.view.DragEvent) throws androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException
    {
        android.app.Activity r0;
        android.view.DragEvent r1;
        android.content.ClipData r2;
        android.view.DragAndDropPermissions r3;
        boolean $z0;
        androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException r5;
        java.lang.Throwable r6;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.view.DragEvent;

        r2 = virtualinvoke r1.<android.view.DragEvent: android.content.ClipData getClipData()>();

        if r2 == null goto label1;

        $z0 = staticinvoke <androidx.draganddrop.DropHelper: boolean hasUris(android.content.ClipData)>(r2);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>(r1);

        if r3 != null goto label1;

        r5 = new androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException;

        specialinvoke r5.<androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException: void <init>(java.lang.String)>("Couldn\'t get DragAndDropPermissions");

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label1:
        return;
    }

    private static boolean hasUris(android.content.ClipData)
    {
        android.content.ClipData r0;
        int $i0, i1;
        android.content.ClipData$Item $r1;
        android.net.Uri $r2;

        r0 := @parameter0: android.content.ClipData;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.content.ClipData: int getItemCount()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>(i1);

        $r2 = virtualinvoke $r1.<android.content.ClipData$Item: android.net.Uri getUri()>();

        if $r2 == null goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static android.view.View$OnDragListener createDelegatingHighlightingOnDragListener(android.app.Activity, androidx.draganddrop.DropAffordanceHighlighter, java.util.List)
    {
        android.app.Activity r0;
        androidx.draganddrop.DropAffordanceHighlighter r1;
        java.util.List r2;
        android.view.View$OnDragListener $r3;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: androidx.draganddrop.DropAffordanceHighlighter;

        r2 := @parameter2: java.util.List;

        $r3 = dynamicinvoke "onDrag" <android.view.View$OnDragListener (android.app.Activity,java.util.List,androidx.draganddrop.DropAffordanceHighlighter)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent), methodhandle: "REF_INVOKE_STATIC" <androidx.draganddrop.DropHelper: boolean lambda$createDelegatingHighlightingOnDragListener$2(android.app.Activity,java.util.List,androidx.draganddrop.DropAffordanceHighlighter,android.view.View,android.view.DragEvent)>, methodtype: boolean __METHODTYPE__(android.view.View,android.view.DragEvent));

        return $r3;
    }

    private static boolean lambda$createDelegatingHighlightingOnDragListener$2(android.app.Activity, java.util.List, androidx.draganddrop.DropAffordanceHighlighter, android.view.View, android.view.DragEvent)
    {
        android.app.Activity r0;
        java.util.List r1;
        androidx.draganddrop.DropAffordanceHighlighter r2;
        android.view.View r3, $r11;
        android.view.DragEvent r4;
        androidx.core.view.ContentInfoCompat r5;
        java.util.Iterator r6;
        android.widget.EditText r7;
        int $i0;
        boolean $z0, $z1, $z2;
        androidx.core.view.ContentInfoCompat$Builder $r8;
        android.content.ClipData $r9;
        java.lang.Object $r10, $r13;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: androidx.draganddrop.DropAffordanceHighlighter;

        r3 := @parameter3: android.view.View;

        r4 := @parameter4: android.view.DragEvent;

        $i0 = virtualinvoke r4.<android.view.DragEvent: int getAction()>();

        if $i0 != 3 goto label5;

        $r8 = new androidx.core.view.ContentInfoCompat$Builder;

        $r9 = virtualinvoke r4.<android.view.DragEvent: android.content.ClipData getClipData()>();

        specialinvoke $r8.<androidx.core.view.ContentInfoCompat$Builder: void <init>(android.content.ClipData,int)>($r9, 3);

        r5 = virtualinvoke $r8.<androidx.core.view.ContentInfoCompat$Builder: androidx.core.view.ContentInfoCompat build()>();

        staticinvoke <androidx.draganddrop.DropHelper: void requestPermissionsIfNeeded(android.app.Activity,android.view.DragEvent)>(r0, r4);

        goto label1;

     label1:
        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.widget.EditText) $r13;

        $z2 = virtualinvoke r7.<android.widget.EditText: boolean hasFocus()>();

        if $z2 == 0 goto label3;

        staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat)>(r7, r5);

        return 1;

     label3:
        goto label2;

     label4:
        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (android.view.View) $r10;

        staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat)>($r11, r5);

        return 1;

     label5:
        $z0 = virtualinvoke r2.<androidx.draganddrop.DropAffordanceHighlighter: boolean onDrag(android.view.View,android.view.DragEvent)>(r3, r4);

        return $z0;
    }

    private static boolean lambda$createHighlightingOnDragListener$1(android.app.Activity, androidx.draganddrop.DropAffordanceHighlighter, android.view.View, android.view.DragEvent)
    {
        android.app.Activity r0;
        androidx.draganddrop.DropAffordanceHighlighter r1;
        android.view.View r2;
        android.view.DragEvent r3;
        androidx.core.view.ContentInfoCompat r4;
        int $i0;
        boolean $z0;
        androidx.core.view.ContentInfoCompat$Builder $r5;
        android.content.ClipData $r6;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: androidx.draganddrop.DropAffordanceHighlighter;

        r2 := @parameter2: android.view.View;

        r3 := @parameter3: android.view.DragEvent;

        $i0 = virtualinvoke r3.<android.view.DragEvent: int getAction()>();

        if $i0 != 3 goto label2;

        $r5 = new androidx.core.view.ContentInfoCompat$Builder;

        $r6 = virtualinvoke r3.<android.view.DragEvent: android.content.ClipData getClipData()>();

        specialinvoke $r5.<androidx.core.view.ContentInfoCompat$Builder: void <init>(android.content.ClipData,int)>($r6, 3);

        r4 = virtualinvoke $r5.<androidx.core.view.ContentInfoCompat$Builder: androidx.core.view.ContentInfoCompat build()>();

        staticinvoke <androidx.draganddrop.DropHelper: void requestPermissionsIfNeeded(android.app.Activity,android.view.DragEvent)>(r0, r3);

        goto label1;

     label1:
        staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat)>(r2, r4);

     label2:
        $z0 = virtualinvoke r1.<androidx.draganddrop.DropAffordanceHighlighter: boolean onDrag(android.view.View,android.view.DragEvent)>(r2, r3);

        return $z0;
    }

    private static boolean lambda$configureView$0(java.lang.String[], android.content.ClipDescription)
    {
        java.lang.String[] r0, r2;
        android.content.ClipDescription r1;
        int i0, i1;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: android.content.ClipDescription;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>(r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException
    void <init>(java.lang.String)
    {
        androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException r0;
        java.lang.String r1;

        r0 := @this: androidx.draganddrop.DropHelper$CouldNotObtainPermissionsException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1);

        return;
    }

androidx.draganddrop.DropHelper$Options$Builder
<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightColor>
<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightColorHasBeenSupplied>
<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightCornerRadiusPx>
<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightCornerRadiusPxHasBeenSupplied>
<androidx.draganddrop.DropHelper$Options$Builder: boolean mAcceptDragsWithLocalState>
<androidx.draganddrop.DropHelper$Options$Builder: java.util.List mInnerEditTexts>
    public void <init>()
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightColorHasBeenSupplied> = 0;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightCornerRadiusPxHasBeenSupplied> = 0;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mAcceptDragsWithLocalState> = 0;

        return;
    }

    public androidx.draganddrop.DropHelper$Options build()
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;
        androidx.draganddrop.DropHelper$Options $r1;
        java.util.List $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        $r1 = new androidx.draganddrop.DropHelper$Options;

        $i1 = r0.<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightColor>;

        $z2 = r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightColorHasBeenSupplied>;

        $i0 = r0.<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightCornerRadiusPx>;

        $z1 = r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightCornerRadiusPxHasBeenSupplied>;

        $z0 = r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mAcceptDragsWithLocalState>;

        $r2 = r0.<androidx.draganddrop.DropHelper$Options$Builder: java.util.List mInnerEditTexts>;

        specialinvoke $r1.<androidx.draganddrop.DropHelper$Options: void <init>(int,boolean,int,boolean,boolean,java.util.List)>($i1, $z2, $i0, $z1, $z0, $r2);

        return $r1;
    }

    public transient androidx.draganddrop.DropHelper$Options$Builder addInnerEditTexts(android.widget.EditText[])
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;
        android.widget.EditText[] r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        r1 := @parameter0: android.widget.EditText[];

        $r2 = r0.<androidx.draganddrop.DropHelper$Options$Builder: java.util.List mInnerEditTexts>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.draganddrop.DropHelper$Options$Builder: java.util.List mInnerEditTexts> = $r4;

     label1:
        $r3 = r0.<androidx.draganddrop.DropHelper$Options$Builder: java.util.List mInnerEditTexts>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r1);

        return r0;
    }

    public androidx.draganddrop.DropHelper$Options$Builder setHighlightColor(int)
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;
        int i0;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        i0 := @parameter0: int;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightColor> = i0;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightColorHasBeenSupplied> = 1;

        return r0;
    }

    public androidx.draganddrop.DropHelper$Options$Builder setHighlightCornerRadiusPx(int)
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;
        int i0;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        i0 := @parameter0: int;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: int mHighlightCornerRadiusPx> = i0;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mHighlightCornerRadiusPxHasBeenSupplied> = 1;

        return r0;
    }

    public androidx.draganddrop.DropHelper$Options$Builder setAcceptDragsWithLocalState(boolean)
    {
        androidx.draganddrop.DropHelper$Options$Builder r0;
        boolean z0;

        r0 := @this: androidx.draganddrop.DropHelper$Options$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.draganddrop.DropHelper$Options$Builder: boolean mAcceptDragsWithLocalState> = z0;

        return r0;
    }

androidx.draganddrop.DropHelper$Options
<androidx.draganddrop.DropHelper$Options: int mHighlightColor>
<androidx.draganddrop.DropHelper$Options: boolean mHighlightColorHasBeenSupplied>
<androidx.draganddrop.DropHelper$Options: int mHighlightCornerRadiusPx>
<androidx.draganddrop.DropHelper$Options: boolean mHighlightCornerRadiusPxHasBeenSupplied>
<androidx.draganddrop.DropHelper$Options: boolean mAcceptDragsWithLocalState>
<androidx.draganddrop.DropHelper$Options: java.util.List mInnerEditTexts>
    void <init>(int, boolean, int, boolean, boolean, java.util.List)
    {
        androidx.draganddrop.DropHelper$Options r0;
        int i0, i1;
        boolean z0, z1, z2;
        java.util.List r1;
        java.util.ArrayList $r3;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r1 := @parameter5: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.draganddrop.DropHelper$Options: int mHighlightColor> = i0;

        r0.<androidx.draganddrop.DropHelper$Options: boolean mHighlightColorHasBeenSupplied> = z0;

        r0.<androidx.draganddrop.DropHelper$Options: int mHighlightCornerRadiusPx> = i1;

        r0.<androidx.draganddrop.DropHelper$Options: boolean mHighlightCornerRadiusPxHasBeenSupplied> = z1;

        r0.<androidx.draganddrop.DropHelper$Options: boolean mAcceptDragsWithLocalState> = z2;

        if r1 == null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label2:
        r0.<androidx.draganddrop.DropHelper$Options: java.util.List mInnerEditTexts> = $r3;

        return;
    }

    public int getHighlightColor()
    {
        androidx.draganddrop.DropHelper$Options r0;
        int $i0;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $i0 = r0.<androidx.draganddrop.DropHelper$Options: int mHighlightColor>;

        return $i0;
    }

    public boolean hasHighlightColor()
    {
        androidx.draganddrop.DropHelper$Options r0;
        boolean $z0;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $z0 = r0.<androidx.draganddrop.DropHelper$Options: boolean mHighlightColorHasBeenSupplied>;

        return $z0;
    }

    public int getHighlightCornerRadiusPx()
    {
        androidx.draganddrop.DropHelper$Options r0;
        int $i0;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $i0 = r0.<androidx.draganddrop.DropHelper$Options: int mHighlightCornerRadiusPx>;

        return $i0;
    }

    public boolean hasHighlightCornerRadiusPx()
    {
        androidx.draganddrop.DropHelper$Options r0;
        boolean $z0;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $z0 = r0.<androidx.draganddrop.DropHelper$Options: boolean mHighlightCornerRadiusPxHasBeenSupplied>;

        return $z0;
    }

    public boolean shouldAcceptDragsWithLocalState()
    {
        androidx.draganddrop.DropHelper$Options r0;
        boolean $z0;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $z0 = r0.<androidx.draganddrop.DropHelper$Options: boolean mAcceptDragsWithLocalState>;

        return $z0;
    }

    public java.util.List getInnerEditTexts()
    {
        androidx.draganddrop.DropHelper$Options r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.draganddrop.DropHelper$Options;

        $r1 = r0.<androidx.draganddrop.DropHelper$Options: java.util.List mInnerEditTexts>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

