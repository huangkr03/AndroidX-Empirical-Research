kotlin.random.KotlinRandom
<kotlin.random.KotlinRandom: kotlin.random.KotlinRandom$Companion Companion>
<kotlin.random.KotlinRandom: long serialVersionUID>
<kotlin.random.KotlinRandom: kotlin.random.Random impl>
<kotlin.random.KotlinRandom: boolean seedInitialized>
    static void <clinit>()
    {
        kotlin.random.KotlinRandom$Companion $r0;

        $r0 = new kotlin.random.KotlinRandom$Companion;

        specialinvoke $r0.<kotlin.random.KotlinRandom$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.random.KotlinRandom: kotlin.random.KotlinRandom$Companion Companion> = $r0;

        return;
    }

    public void <init>(kotlin.random.Random)
    {
        kotlin.random.KotlinRandom $r0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 := @parameter0: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "impl");

        specialinvoke $r0.<java.util.Random: void <init>()>();

        $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl> = $r1;

        return;
    }

    public final kotlin.random.Random getImpl()
    {
        kotlin.random.KotlinRandom $r0;
        kotlin.random.Random r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        return r1;
    }

    protected int next(int)
    {
        kotlin.random.KotlinRandom $r0;
        kotlin.random.Random $r1;
        int $i0;

        $r0 := @this: kotlin.random.KotlinRandom;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextBits(int)>($i0);

        return $i0;
    }

    public boolean nextBoolean()
    {
        kotlin.random.KotlinRandom $r0;
        boolean $z0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $z0 = virtualinvoke $r1.<kotlin.random.Random: boolean nextBoolean()>();

        return $z0;
    }

    public void nextBytes(byte[])
    {
        kotlin.random.KotlinRandom $r0;
        byte[] $r1;
        kotlin.random.Random $r2;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "bytes");

        $r2 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        virtualinvoke $r2.<kotlin.random.Random: byte[] nextBytes(byte[])>($r1);

        return;
    }

    public double nextDouble()
    {
        kotlin.random.KotlinRandom $r0;
        double $d0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $d0 = virtualinvoke $r1.<kotlin.random.Random: double nextDouble()>();

        return $d0;
    }

    public float nextFloat()
    {
        kotlin.random.KotlinRandom $r0;
        float $f0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $f0 = virtualinvoke $r1.<kotlin.random.Random: float nextFloat()>();

        return $f0;
    }

    public int nextInt()
    {
        kotlin.random.KotlinRandom $r0;
        int $i0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt()>();

        return $i0;
    }

    public int nextInt(int)
    {
        kotlin.random.KotlinRandom $r0;
        kotlin.random.Random $r1;
        int $i0;

        $r0 := @this: kotlin.random.KotlinRandom;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        return $i0;
    }

    public long nextLong()
    {
        kotlin.random.KotlinRandom $r0;
        long $l0;
        kotlin.random.Random $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $r1 = $r0.<kotlin.random.KotlinRandom: kotlin.random.Random impl>;

        $l0 = virtualinvoke $r1.<kotlin.random.Random: long nextLong()>();

        return $l0;
    }

    public void setSeed(long)
    {
        kotlin.random.KotlinRandom $r0;
        long $l0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.random.KotlinRandom;

        $l0 := @parameter0: long;

        $z0 = $r0.<kotlin.random.KotlinRandom: boolean seedInitialized>;

        if $z0 != 0 goto label1;

        $r0.<kotlin.random.KotlinRandom: boolean seedInitialized> = 1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting seed is not supported.");

        throw $r1;
    }

kotlin.random.KotlinRandom$Companion
    private void <init>()
    {
        kotlin.random.KotlinRandom$Companion $r0;

        $r0 := @this: kotlin.random.KotlinRandom$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.random.KotlinRandom$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.random.KotlinRandom$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.random.KotlinRandom$Companion: void <init>()>();

        return;
    }

