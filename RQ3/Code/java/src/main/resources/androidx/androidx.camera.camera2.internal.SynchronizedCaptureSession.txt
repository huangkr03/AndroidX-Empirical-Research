androidx.camera.camera2.internal.SynchronizedCaptureSession
<androidx.camera.camera2.internal.SynchronizedCaptureSession: android.hardware.camera2.CameraDevice getDevice()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback getStateCallback()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: android.view.Surface getInputSurface()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: com.google.common.util.concurrent.ListenableFuture getOpeningBlocker()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int captureBurstRequests(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int setRepeatingBurstRequests(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: void stopRepeating()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: void abortCaptures()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: void close()>
<androidx.camera.camera2.internal.SynchronizedCaptureSession: void finishClose()>
androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback
    public void <init>()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void onReady(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    void onActive(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    void onCaptureQueueEmpty(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    void onSurfacePrepared(androidx.camera.camera2.internal.SynchronizedCaptureSession, android.view.Surface)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        android.view.Surface r2;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        r2 := @parameter1: android.view.Surface;

        return;
    }

    void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    public void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    public void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

    void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        return;
    }

