androidx.leanback.widget.PlaybackTransportRowView
<androidx.leanback.widget.PlaybackTransportRowView: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener mOnUnhandledKeyListener>
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        return;
    }

    void setOnUnhandledKeyListener(androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener r1;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        r1 := @parameter0: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener;

        r0.<androidx.leanback.widget.PlaybackTransportRowView: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener mOnUnhandledKeyListener> = r1;

        return;
    }

    androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener getOnUnhandledKeyListener()
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener $r1;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        $r1 = r0.<androidx.leanback.widget.PlaybackTransportRowView: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        return $r1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2;
        androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener $r2, $r3;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.widget.LinearLayout: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<androidx.leanback.widget.PlaybackTransportRowView: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        if $r2 == null goto label2;

        $r3 = r0.<androidx.leanback.widget.PlaybackTransportRowView: androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        $z1 = interfaceinvoke $r3.<androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener: boolean onUnhandledKey(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean onRequestFocusInDescendants(int, android.graphics.Rect)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        int i0, $i1;
        android.graphics.Rect r1;
        android.view.View r2, r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        r2 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View findFocus()>();

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $i1 = <androidx.leanback.R$id: int playback_progress>;

        r3 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View findViewById(int)>($i1);

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<android.view.View: boolean isFocusable()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z3 = specialinvoke r0.<android.widget.LinearLayout: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>(i0, r1);

        return $z3;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;
        android.view.View r1, $r2, $r4, $r6, $r7, $r8, r9, r10, $r11;
        int i0, $i1, i2, i3, i4, i5;
        boolean $z0, $z1, $z2;
        android.view.FocusFinder $r3;
        android.view.ViewGroup $r5;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        if r1 == null goto label10;

        if i0 != 33 goto label04;

        $r8 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getFocusedChild()>();

        i2 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: int indexOfChild(android.view.View)>($r8);

        i3 = i2 - 1;

     label01:
        if i3 < 0 goto label03;

        r9 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getChildAt(int)>(i3);

        $z2 = virtualinvoke r9.<android.view.View: boolean hasFocusable()>();

        if $z2 == 0 goto label02;

        return r9;

     label02:
        i3 = i3 + -1;

        goto label01;

     label03:
        goto label10;

     label04:
        if i0 != 130 goto label08;

        $r7 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getFocusedChild()>();

        i4 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: int indexOfChild(android.view.View)>($r7);

        i5 = i4 + 1;

     label05:
        $i1 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: int getChildCount()>();

        if i5 >= $i1 goto label07;

        r10 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getChildAt(int)>(i5);

        $z1 = virtualinvoke r10.<android.view.View: boolean hasFocusable()>();

        if $z1 == 0 goto label06;

        return r10;

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        goto label10;

     label08:
        if i0 == 17 goto label09;

        if i0 != 66 goto label10;

     label09:
        $r2 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getFocusedChild()>();

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label10;

        $r3 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r4 = virtualinvoke r0.<androidx.leanback.widget.PlaybackTransportRowView: android.view.View getFocusedChild()>();

        $r5 = (android.view.ViewGroup) $r4;

        $r6 = virtualinvoke $r3.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>($r5, r1, i0);

        return $r6;

     label10:
        $r11 = specialinvoke r0.<android.widget.LinearLayout: android.view.View focusSearch(android.view.View,int)>(r1, i0);

        return $r11;
    }

    public boolean hasOverlappingRendering()
    {
        androidx.leanback.widget.PlaybackTransportRowView r0;

        r0 := @this: androidx.leanback.widget.PlaybackTransportRowView;

        return 0;
    }

androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener
<androidx.leanback.widget.PlaybackTransportRowView$OnUnhandledKeyListener: boolean onUnhandledKey(android.view.KeyEvent)>
