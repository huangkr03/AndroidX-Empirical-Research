kotlin.math.Constants
<kotlin.math.Constants: kotlin.math.Constants INSTANCE>
<kotlin.math.Constants: double LN2>
<kotlin.math.Constants: double epsilon>
<kotlin.math.Constants: double taylor_2_bound>
<kotlin.math.Constants: double taylor_n_bound>
<kotlin.math.Constants: double upper_taylor_2_bound>
<kotlin.math.Constants: double upper_taylor_n_bound>
    static void <clinit>()
    {
        kotlin.math.Constants $r0;
        double $d0, $d1;

        $r0 = new kotlin.math.Constants;

        specialinvoke $r0.<kotlin.math.Constants: void <init>()>();

        <kotlin.math.Constants: kotlin.math.Constants INSTANCE> = $r0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <kotlin.math.Constants: double LN2> = $d0;

        $d0 = staticinvoke <java.lang.Math: double ulp(double)>(1.0);

        <kotlin.math.Constants: double epsilon> = $d0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        <kotlin.math.Constants: double taylor_2_bound> = $d1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        <kotlin.math.Constants: double taylor_n_bound> = $d0;

        $d1 = 1.0 / $d1;

        <kotlin.math.Constants: double upper_taylor_2_bound> = $d1;

        $d0 = 1.0 / $d0;

        <kotlin.math.Constants: double upper_taylor_n_bound> = $d0;

        return;
    }

    private void <init>()
    {
        kotlin.math.Constants $r0;

        $r0 := @this: kotlin.math.Constants;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

