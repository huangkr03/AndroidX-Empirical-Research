com.google.common.util.concurrent.AbstractFuture
<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>
<com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>
<com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>
<com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>
<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners>
<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>
<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>
    static void <clinit>()
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.Class $r1;
        java.util.logging.Logger $r2;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r3;
        java.lang.Throwable $r4, $r5, $r11;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6, $r7, $r8, $r9, $r10;
        java.util.logging.Level $r12;
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper r13;
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper r14;
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper r15;
        java.lang.Object r16;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("guava.concurrent.generate_cancellation_cause", "false");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        goto label01;

     label01:
        <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES> = $z0;

        $r1 = class "Lcom/google/common/util/concurrent/AbstractFuture;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r0);

        <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log> = $r2;

     label02:
        r13 = new com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

     label03:
        $r3 = r13;

     label04:
        specialinvoke r13.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

     label05:
        $r4 = null;

        $r5 = null;

        goto label15;

     label06:
        $r4 := @caughtexception;

        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        r14 = new com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

     label09:
        $r6 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", class "Ljava/lang/Thread;", "thread");

        $r7 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", "next");

        $r8 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", "waiters");

        $r9 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Lcom/google/common/util/concurrent/AbstractFuture$Listener;", "listeners");

        $r10 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Ljava/lang/Object;", "value");

     label10:
        specialinvoke r14.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)>($r6, $r7, $r8, $r9, $r10);

     label11:
        $r3 = r14;

        $r5 = null;

        goto label15;

     label12:
        $r11 := @caughtexception;

        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        r15 = new com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        specialinvoke r15.<com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

        $r5 = $r11;

        $r3 = r15;

     label15:
        <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER> = $r3;

        if $r5 == null goto label16;

        $r2 = <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>;

        $r12 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r2.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "com.google.common.util.concurrent.AbstractFuture", "<clinit>", "UnsafeAtomicHelper is broken!", $r4);

        $r12 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r2.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "com.google.common.util.concurrent.AbstractFuture", "<clinit>", "SafeAtomicHelper is broken!", $r5);

     label16:
        r16 = new java.lang.Object;

        specialinvoke r16.<java.lang.Object: void <init>()>();

        <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL> = r16;

        return;

        catch java.lang.RuntimeException from label04 to label05 with label07;
        catch java.lang.Error from label02 to label03 with label06;
        catch java.lang.Error from label04 to label05 with label06;
        catch java.lang.RuntimeException from label10 to label11 with label13;
        catch java.lang.Error from label08 to label09 with label12;
        catch java.lang.Error from label09 to label11 with label12;
    }

    protected void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        specialinvoke $r0.<com.google.common.util.concurrent.internal.InternalFutureFailureAccess: void <init>()>();

        return;
    }

    static com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r0;

        r0 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        return r0;
    }

    static java.lang.Object access$300(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.Object r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        return r1;
    }

    static java.lang.Object access$302(com.google.common.util.concurrent.AbstractFuture, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: java.lang.Object;

        $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value> = $r1;

        return $r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Listener access$700(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners>;

        return r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Listener access$702(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners> = $r1;

        return $r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        return r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters> = $r1;

        return $r1;
    }

    private void addDoneString(java.lang.StringBuilder)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3, $r5, $r6;
        java.lang.Class $r4;
        java.util.concurrent.ExecutionException r7;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r0);

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SUCCESS, result=[");

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void appendResultObject(java.lang.StringBuilder,java.lang.Object)>($r1, $r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN, cause=[");

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thrown from get()]");

        return;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        return;

     label5:
        $r6 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FAILURE, cause=[");

        r7 = (java.util.concurrent.ExecutionException) $r6;

        $r3 = virtualinvoke r7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void addPendingString(java.lang.StringBuilder)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.StringBuilder $r1, $r7;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture$SetFuture $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        java.lang.Class $r8;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PENDING");

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = $r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setFuture=[");

        $r3 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) $r2;

        $r4 = $r3.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void appendUserObject(java.lang.StringBuilder,java.lang.Object)>($r1, $r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label7;

     label1:
        $r5 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.String pendingToString()>();

     label2:
        $r5 = staticinvoke <com.google.common.base.Strings: java.lang.String emptyToNull(java.lang.String)>($r5);

        goto label6;

     label3:
        $r6 := @caughtexception;

        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown from implementation: ");

        $r8 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        if $r5 == null goto label7;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", info=[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label7:
        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 == 0 goto label8;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i0, $i1);

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void addDoneString(java.lang.StringBuilder)>($r1);

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.StackOverflowError from label1 to label2 with label3;
    }

    private void appendResultObject(java.lang.StringBuilder, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        int $i0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;

     label1:
        if $r2 != $r0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this future");

        return;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;
    }

    private void appendUserObject(java.lang.StringBuilder, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.Class $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != $r0 goto label3;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this future");

     label2:
        return;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown from implementation: ");

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.StackOverflowError from label1 to label2 with label5;
        catch java.lang.StackOverflowError from label3 to label4 with label5;
    }

    private static java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.util.concurrent.CancellationException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = new java.util.concurrent.CancellationException;

        specialinvoke $r2.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>($r0);

        virtualinvoke $r2.<java.util.concurrent.CancellationException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

        return $r2;
    }

    private com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1, $r2, $r4;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r2 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r3 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r1 = <com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE>;

        $r1 = virtualinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener)>($r0, $r1);

     label1:
        if $r1 == null goto label2;

        $r4 = $r1.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next>;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next> = $r2;

        $r2 = $r1;

        $r1 = $r4;

        goto label1;

     label2:
        return $r2;
    }

    private static void complete(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture $r1;
        com.google.common.util.concurrent.AbstractFuture$Listener $r2, $r3;
        java.lang.Runnable $r4;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture$SetFuture $r5;
        java.lang.Object $r6;
        com.google.common.util.concurrent.ListenableFuture $r7;
        java.util.concurrent.Executor $r8;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r2 = null;

     label1:
        specialinvoke $r1.<com.google.common.util.concurrent.AbstractFuture: void releaseWaiters()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.AbstractFuture: void afterDone()>();

        $r3 = specialinvoke $r1.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)>($r2);

     label2:
        if $r3 == null goto label6;

        $r2 = $r3.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next>;

        $r4 = $r3.<com.google.common.util.concurrent.AbstractFuture$Listener: java.lang.Runnable task>;

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = $r4 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z0 == 0 goto label4;

        $r5 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) $r4;

        $r1 = $r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.AbstractFuture owner>;

        $r6 = $r1.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r6 != $r5 goto label3;

        $r7 = $r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $r6 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r7);

        $r0 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>($r1, $r5, $r6);

        if $z0 == 0 goto label3;

        goto label1;

     label3:
        goto label5;

     label4:
        $r8 = $r3.<com.google.common.util.concurrent.AbstractFuture$Listener: java.util.concurrent.Executor executor>;

        virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r8);

     label5:
        $r3 = $r2;

        goto label2;

     label6:
        return;
    }

    private static void executeListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        java.lang.Throwable $r3;
        java.lang.Runnable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r4 := @parameter0: java.lang.Runnable;

        $r0 := @parameter1: java.util.concurrent.Executor;

     label1:
        interfaceinvoke $r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r1 = <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while executing runnable ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with executor ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "com.google.common.util.concurrent.AbstractFuture", "executeListener", $r6, $r3);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private java.lang.Object getDoneValue(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.util.concurrent.ExecutionException $r3;
        com.google.common.util.concurrent.AbstractFuture$Failure $r4;
        java.lang.Throwable $r5;
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r6;
        java.util.concurrent.CancellationException $r7;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if $z0 != 0 goto label3;

        $z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Failure;

        if $z0 != 0 goto label2;

        $r2 = <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>;

        if $r1 != $r2 goto label1;

        $r1 = staticinvoke <com.google.common.util.concurrent.NullnessCasts: java.lang.Object uncheckedNull()>();

     label1:
        return $r1;

     label2:
        $r3 = new java.util.concurrent.ExecutionException;

        $r4 = (com.google.common.util.concurrent.AbstractFuture$Failure) $r1;

        $r5 = $r4.<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception>;

        specialinvoke $r3.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r5);

        throw $r3;

     label3:
        $r6 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) $r1;

        $r5 = $r6.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        $r7 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)>("Task was cancelled.", $r5);

        throw $r7;
    }

    private static java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture $r0;
        boolean $z0, $z1;
        com.google.common.util.concurrent.AbstractFuture $r1;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r3, r12;
        java.lang.Throwable $r4, $r9, $r10, $r11;
        com.google.common.util.concurrent.internal.InternalFutureFailureAccess $r5;
        java.lang.IllegalArgumentException $r6, r15;
        java.lang.StringBuilder $r7, r14;
        java.lang.String $r8;
        com.google.common.util.concurrent.AbstractFuture$Failure r13;
        java.util.concurrent.ExecutionException r16;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $z0 = $r0 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if $z0 == 0 goto label03;

        $r1 = (com.google.common.util.concurrent.AbstractFuture) $r0;

        $r2 = $r1.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = $r2 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if $z0 == 0 goto label02;

        $r3 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) $r2;

        $z0 = $r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted>;

        if $z0 == 0 goto label02;

        $r4 = $r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        if $r4 == null goto label01;

        r12 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        $r2 = r12;

        $r4 = $r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        specialinvoke r12.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r4);

        goto label02;

     label01:
        $r2 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label02:
        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r2;

     label03:
        $z0 = $r0 instanceof com.google.common.util.concurrent.internal.InternalFutureFailureAccess;

        if $z0 == 0 goto label04;

        $r5 = (com.google.common.util.concurrent.internal.InternalFutureFailureAccess) $r0;

        $r4 = staticinvoke <com.google.common.util.concurrent.internal.InternalFutures: java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess)>($r5);

        if $r4 == null goto label04;

        r13 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        specialinvoke r13.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r4);

        return r13;

     label04:
        $z0 = interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        $z1 = <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z1 != 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        $z1 = $z1 & $z0;

        if $z1 == 0 goto label07;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;

     label07:
        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r0);

     label08:
        if $z0 == 0 goto label16;

     label09:
        r12 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

     label10:
        r15 = new java.lang.IllegalArgumentException;

     label11:
        $r6 = r15;

     label12:
        r14 = new java.lang.StringBuilder;

     label13:
        $r7 = r14;

     label14:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() did not throw CancellationException, despite reporting isCancelled() == true: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        specialinvoke r12.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r6);

     label15:
        return r12;

     label16:
        if $r2 != null goto label26;

     label17:
        $r2 = <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>;

     label18:
        return $r2;

     label19:
        $r9 := @caughtexception;

        goto label21;

     label20:
        $r9 := @caughtexception;

     label21:
        r13 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        specialinvoke r13.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r9);

        return r13;

     label22:
        $r10 := @caughtexception;

        if $z0 != 0 goto label23;

        r13 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        r15 = new java.lang.IllegalArgumentException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() threw CancellationException, despite reporting isCancelled() == false: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r10);

        specialinvoke r13.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r15);

        return r13;

     label23:
        r12 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        specialinvoke r12.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r10);

        return r12;

     label24:
        $r11 := @caughtexception;

        if $z0 == 0 goto label25;

        r12 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        r15 = new java.lang.IllegalArgumentException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() did not throw CancellationException, despite reporting isCancelled() == true: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r11);

        specialinvoke r12.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, r15);

        return r12;

     label25:
        r13 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        r16 = (java.util.concurrent.ExecutionException) $r11;

        $r4 = virtualinvoke r16.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r13.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r4);

        return r13;

     label26:
        return $r2;

        catch java.util.concurrent.ExecutionException from label14 to label15 with label24;
        catch java.util.concurrent.CancellationException from label14 to label15 with label22;
        catch java.lang.RuntimeException from label14 to label15 with label20;
        catch java.lang.Error from label07 to label08 with label19;
        catch java.lang.Error from label09 to label10 with label19;
        catch java.lang.Error from label10 to label11 with label19;
        catch java.lang.Error from label12 to label13 with label19;
        catch java.lang.Error from label14 to label15 with label19;
        catch java.lang.Error from label17 to label18 with label19;
    }

    private static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.Future $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3, $r4;

        $r0 := @parameter0: java.util.concurrent.Future;

        $z0 = 0;

     label1:
        $r1 = interfaceinvoke $r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if $z0 == 0 goto label7;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $r1;

     label3:
        $r3 := @caughtexception;

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        $z0 = 1;

        goto label1;

     label7:
        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void releaseWaiters()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r2 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r1 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        $r1 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r0, $r1);

     label1:
        if $r1 == null goto label2;

        virtualinvoke $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: void unpark()>();

        $r1 = $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next>;

        goto label1;

     label2:
        return;
    }

    private void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2, $r3;
        boolean $z0;
        java.lang.Thread $r4;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r5;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r2 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread> = null;

     label1:
        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r1 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if $r2 == $r1 goto label6;

        $r3 = null;

     label2:
        if $r2 == null goto label6;

        $r1 = $r2.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next>;

        $r4 = $r2.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r4 == null goto label3;

        $r3 = $r2;

        goto label5;

     label3:
        if $r3 == null goto label4;

        $r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next> = $r1;

        $r4 = $r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r4 != null goto label5;

        goto label1;

     label4:
        $r5 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r5.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r0, $r2, $r1);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        $r2 = $r1;

        goto label2;

     label6:
        return;
    }

    protected void afterDone()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        return;
    }

    public boolean cancel(boolean)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r2;
        java.util.concurrent.CancellationException $r3;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r4;
        com.google.common.util.concurrent.AbstractFuture$SetFuture $r5;
        com.google.common.util.concurrent.ListenableFuture $r6;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r1 != null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z2 = $z2 | $z1;

        if $z2 == 0 goto label15;

        $z2 = <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z2 == 0 goto label03;

        $r2 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        $r3 = new java.util.concurrent.CancellationException;

        specialinvoke $r3.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Future.cancel() was called.");

        specialinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>($z0, $r3);

        goto label06;

     label03:
        if $z0 == 0 goto label04;

        $r2 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED>;

        goto label05;

     label04:
        $r2 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label05:
        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

     label06:
        $z2 = 0;

     label07:
        $r4 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z1 = virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        if $z1 == 0 goto label14;

        if $z0 == 0 goto label08;

        virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void interruptTask()>();

     label08:
        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>($r0);

        $z2 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z2 == 0 goto label13;

        $r5 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) $r1;

        $r6 = $r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $z2 = $r6 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if $z2 == 0 goto label12;

        $r0 = (com.google.common.util.concurrent.AbstractFuture) $r6;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r1 != null goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z2 = $z2 | $z1;

        if $z2 == 0 goto label11;

        $z2 = 1;

        goto label07;

     label11:
        goto label13;

     label12:
        interfaceinvoke $r6.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>($z0);

        return 1;

     label13:
        return 1;

     label14:
        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label07;

        return $z2;

     label15:
        return 0;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r2, $r3, $r6;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r4;
        java.lang.InterruptedException $r5;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label15;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label05;

        $r1 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r1);

        return $r1;

     label05:
        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if $r2 == $r3 goto label14;

        $r3 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>()>();

     label06:
        virtualinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)>($r2);

        $r4 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r0, $r2, $r3);

        if $z0 == 0 goto label13;

     label07:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>($r0);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label12;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r1 == null goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label07;

        $r1 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r1);

        return $r1;

     label12:
        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>($r3);

        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;

     label13:
        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r6 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if $r2 != $r6 goto label06;

     label14:
        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r1);

        return $r1;

     label15:
        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        goto label16;

     label16:
        throw $r5;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        long $l0, $l1, $l2, $l4;
        java.util.concurrent.TimeUnit $r1, $r14;
        boolean $z0, $z1;
        java.lang.Object $r2;
        byte $b3;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r3, $r4, $r7;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r5;
        java.lang.InterruptedException $r6;
        java.lang.String $r8, $r9, $r12, $r13;
        java.util.Locale $r10;
        java.lang.StringBuilder $r11;
        java.util.concurrent.TimeoutException $r15;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l2 = $l1;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label34;

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r2 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = $r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label05;

        $r2 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r2);

        return $r2;

     label05:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label06;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l4 + $l1;

        goto label07;

     label06:
        $l4 = 0L;

     label07:
        $b3 = $l1 cmp 1000L;

        if $b3 < 0 goto label18;

        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r4 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if $r3 == $r4 goto label17;

        $r4 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>()>();

     label08:
        virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$Waiter: void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)>($r3);

        $r5 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r5.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r0, $r3, $r4);

        if $z0 == 0 goto label16;

     label09:
        staticinvoke <com.google.common.util.concurrent.OverflowAvoidingLockSupport: void parkNanos(java.lang.Object,long)>($r0, $l2);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label15;

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r2 == null goto label10;

        $z0 = 1;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        $z1 = $r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label14;

        $r2 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r2);

        return $r2;

     label14:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l4 - $l2;

        $b3 = $l2 cmp 1000L;

        if $b3 >= 0 goto label09;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>($r4);

        goto label18;

     label15:
        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>($r4);

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label16:
        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r7 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if $r3 == $r7 goto label17;

        goto label08;

     label17:
        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r2);

        return $r2;

     label18:
        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label25;

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r2 == null goto label19;

        $z0 = 1;

        goto label20;

     label19:
        $z0 = 0;

     label20:
        $z1 = $r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label21;

        $z1 = 1;

        goto label22;

     label21:
        $z1 = 0;

     label22:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label23;

        $r2 = specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r2);

        return $r2;

     label23:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label24;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l4 - $l2;

        goto label18;

     label24:
        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label25:
        $r8 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>();

        $r9 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r10 = <java.util.Locale: java.util.Locale ROOT>;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waited ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r10 = <java.util.Locale: java.util.Locale ROOT>;

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r10);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = $r12;

        $l0 = $l2 + 1000L;

        $b3 = $l0 cmp 0L;

        if $b3 >= 0 goto label32;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (plus ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = $r12;

        $l2 = neg $l2;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l2, $r14);

        $l4 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l2 = $l2 - $l4;

        $b3 = $l0 cmp 0L;

        if $b3 == 0 goto label27;

        $b3 = $l2 cmp 1000L;

        if $b3 <= 0 goto label26;

        goto label27;

     label26:
        $z0 = 0;

        goto label28;

     label27:
        $z0 = 1;

     label28:
        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label30;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = $r9;

        if $z0 == 0 goto label29;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label29:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label30:
        if $z0 == 0 goto label31;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nanoseconds ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label31;

     label31:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delay)");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label32;

     label32:
        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 == 0 goto label33;

        $r15 = new java.util.concurrent.TimeoutException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but future completed as timeout expired");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r8);

        throw $r15;

     label33:
        $r15 = new java.util.concurrent.TimeoutException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r8);

        throw $r15;

     label34:
        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        goto label35;

     label35:
        throw $r6;
    }

    protected void interruptTask()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        return;
    }

    public boolean isCancelled()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        return $z0;
    }

    public boolean isDone()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z1 & $z0;

        return $z0;
    }

    protected java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.util.concurrent.ScheduledFuture $r3;
        long $l0;
        java.lang.String $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 = $r0 instanceof java.util.concurrent.ScheduledFuture;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remaining delay=[");

        $r3 = (java.util.concurrent.ScheduledFuture) $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = interfaceinvoke $r3.<java.util.concurrent.ScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return null;
    }

    public java.lang.String toString()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("com.google.common.util.concurrent.");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label2;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[status=");

        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: boolean isCancelled()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        goto label5;

     label3:
        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 == 0 goto label4;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void addDoneString(java.lang.StringBuilder)>($r1);

        goto label5;

     label4:
        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture: void addPendingString(java.lang.StringBuilder)>($r1);

     label5:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected final java.lang.Throwable tryInternalFastPathGetFailure()
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.google.common.util.concurrent.AbstractFuture$Failure $r2;
        java.lang.Throwable r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 = $r0 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Failure;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.util.concurrent.AbstractFuture$Failure) $r1;

        r3 = $r2.<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception>;

        return r3;

     label1:
        return null;
    }

com.google.common.util.concurrent.AbstractFuture$1
com.google.common.util.concurrent.AbstractFuture$AtomicHelper
    private void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$AtomicHelper;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(com.google.common.util.concurrent.AbstractFuture$1)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$1 $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$AtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$1;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void <init>()>();

        return;
    }

<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>
<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>
<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener)>
<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)>
<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>
<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)>
com.google.common.util.concurrent.AbstractFuture$Cancellation
<com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>
<com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED>
<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>
<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted>
    static void <clinit>()
    {
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r0;

        $z0 = <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z0 == 0 goto label1;

        <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED> = null;

        <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED> = null;

        return;

     label1:
        $r0 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, null);

        <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED> = $r0;

        $r0 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(1, null);

        <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED> = $r0;

        return;
    }

    void <init>(boolean, java.lang.Throwable)
    {
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Cancellation;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.Throwable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted> = $z0;

        $r0.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause> = $r1;

        return;
    }

com.google.common.util.concurrent.AbstractFuture$Failure$1
    void <init>(java.lang.String)
    {
        com.google.common.util.concurrent.AbstractFuture$Failure$1 $r0;
        java.lang.String $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Failure$1;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Throwable: void <init>(java.lang.String)>($r1);

        return;
    }

    public java.lang.Throwable fillInStackTrace()
    {
        com.google.common.util.concurrent.AbstractFuture$Failure$1 $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Failure$1;

        entermonitor $r0;

        exitmonitor $r0;

        return $r0;
    }

com.google.common.util.concurrent.AbstractFuture$Failure
<com.google.common.util.concurrent.AbstractFuture$Failure: com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE>
<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception>
    static void <clinit>()
    {
        com.google.common.util.concurrent.AbstractFuture$Failure $r0;
        com.google.common.util.concurrent.AbstractFuture$Failure$1 $r1;

        $r0 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        $r1 = new com.google.common.util.concurrent.AbstractFuture$Failure$1;

        specialinvoke $r1.<com.google.common.util.concurrent.AbstractFuture$Failure$1: void <init>(java.lang.String)>("Failure occurred while trying to finish a future.");

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r1);

        <com.google.common.util.concurrent.AbstractFuture$Failure: com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE> = $r0;

        return;
    }

    void <init>(java.lang.Throwable)
    {
        com.google.common.util.concurrent.AbstractFuture$Failure $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Failure;

        $r2 := @parameter0: java.lang.Throwable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = (java.lang.Throwable) $r1;

        $r0.<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception> = $r2;

        return;
    }

com.google.common.util.concurrent.AbstractFuture$Listener
<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE>
<com.google.common.util.concurrent.AbstractFuture$Listener: java.util.concurrent.Executor executor>
<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next>
<com.google.common.util.concurrent.AbstractFuture$Listener: java.lang.Runnable task>
    static void <clinit>()
    {
        com.google.common.util.concurrent.AbstractFuture$Listener $r0;

        $r0 = new com.google.common.util.concurrent.AbstractFuture$Listener;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Listener: void <init>()>();

        <com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$Listener $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Listener;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.util.concurrent.AbstractFuture$Listener: java.lang.Runnable task> = null;

        $r0.<com.google.common.util.concurrent.AbstractFuture$Listener: java.util.concurrent.Executor executor> = null;

        return;
    }

com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;

        $r3 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

     label1:
        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        if $r4 == $r1 goto label1;

        return 0;
    }

com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper
<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater>
<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater>
<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater>
<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater>
<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater>
    void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1, $r2, $r3, $r4, $r5;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r3 := @parameter2: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r4 := @parameter3: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r5 := @parameter4: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

        $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater> = $r1;

        $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater> = $r2;

        $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater> = $r3;

        $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater> = $r4;

        $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater> = $r5;

        return;
    }

    boolean casValue(com.google.common.util.concurrent.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        java.lang.Object $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater>;

        $z0 = staticinvoke <com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r1, $r2);

        return $z0;
    }

    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter2: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater>;

        $z0 = staticinvoke <com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r1, $r2);

        return $z0;
    }

    com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>($r4, $r1);

        $r1 = (com.google.common.util.concurrent.AbstractFuture$Listener) $r3;

        return $r1;
    }

    com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>($r4, $r1);

        $r1 = (com.google.common.util.concurrent.AbstractFuture$Waiter) $r3;

        return $r1;
    }

    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter, java.lang.Thread)
    {
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        java.lang.Thread $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: java.lang.Thread;

        $r3 = $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

com.google.common.util.concurrent.AbstractFuture$SetFuture
<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>
<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.AbstractFuture owner>
    public void run()
    {
        com.google.common.util.concurrent.AbstractFuture$SetFuture $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SetFuture;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper
    private void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

        return;
    }

    void <init>(com.google.common.util.concurrent.AbstractFuture$1)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$1 $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$1;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: void <init>()>();

        return;
    }

    boolean casValue(com.google.common.util.concurrent.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        java.lang.Object $r1, $r2, $r4;
        com.google.common.util.concurrent.AbstractFuture $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r3 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r4 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        entermonitor $r3;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object access$300(com.google.common.util.concurrent.AbstractFuture)>($r3);

        if $r2 != $r4 goto label1;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object access$302(com.google.common.util.concurrent.AbstractFuture,java.lang.Object)>($r3, $r1);

        exitmonitor $r3;

        return 1;

     label1:
        exitmonitor $r3;

        return 0;
    }

    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2, $r4;
        com.google.common.util.concurrent.AbstractFuture $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r3 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r4 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1 := @parameter2: com.google.common.util.concurrent.AbstractFuture$Waiter;

        entermonitor $r3;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)>($r3);

        if $r2 != $r4 goto label1;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r3, $r1);

        exitmonitor $r3;

        return 1;

     label1:
        exitmonitor $r3;

        return 0;
    }

    com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture $r1;
        com.google.common.util.concurrent.AbstractFuture$Listener $r2, $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r3 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

        entermonitor $r1;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener access$700(com.google.common.util.concurrent.AbstractFuture)>($r1);

        if $r2 == $r3 goto label1;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener access$702(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener)>($r1, $r3);

     label1:
        exitmonitor $r1;

        return $r2;
    }

    com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture $r1;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r2, $r3;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r3 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        entermonitor $r1;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)>($r1);

        if $r2 == $r3 goto label1;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r1, $r3);

     label1:
        exitmonitor $r1;

        return $r2;
    }

    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next> = $r2;

        return;
    }

    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter, java.lang.Thread)
    {
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        java.lang.Thread $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: java.lang.Thread;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread> = $r2;

        return;
    }

com.google.common.util.concurrent.AbstractFuture$Trusted
com.google.common.util.concurrent.AbstractFuture$TrustedFuture
    public final boolean cancel(boolean)
    {
        com.google.common.util.concurrent.AbstractFuture$TrustedFuture $r0;
        boolean $z0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$TrustedFuture;

        $z0 := @parameter0: boolean;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture$TrustedFuture $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$TrustedFuture;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        com.google.common.util.concurrent.AbstractFuture$TrustedFuture $r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        java.lang.NullPointerException r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$TrustedFuture;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        r2 = new java.lang.NullPointerException;

        specialinvoke r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r2;
    }

    public final boolean isCancelled()
    {
        com.google.common.util.concurrent.AbstractFuture$TrustedFuture $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$TrustedFuture;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public final boolean isDone()
    {
        com.google.common.util.concurrent.AbstractFuture$TrustedFuture $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$TrustedFuture;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(sun.misc.Unsafe, java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2, $r4;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        $r3 := @parameter0: sun.misc.Unsafe;

        $r0 := @parameter1: java.lang.Object;

        $l0 := @parameter2: long;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Object;

     label1:
        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>($r0, $l0, $r1, $r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke $r3.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r0, $l0);

        if $r4 == $r1 goto label1;

        return 0;
    }

com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1
    void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile java.lang.Object run() throws java.lang.Exception
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 $r0;
        sun.misc.Unsafe $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1;

        $r1 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1: sun.misc.Unsafe run()>();

        return $r1;
    }

    public sun.misc.Unsafe run() throws java.lang.Exception
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 $r0;
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.reflect.Field[] $r2;
        java.lang.reflect.Field $r3;
        java.lang.Object $r4;
        boolean $z0;
        sun.misc.Unsafe $r5;
        java.lang.NoSuchFieldError $r6;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1;

        $r1 = class "Lsun/misc/Unsafe;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r2[$i1];

        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

        $r5 = (sun.misc.Unsafe) $r4;

        return $r5;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r6 = new java.lang.NoSuchFieldError;

        specialinvoke $r6.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>("the Unsafe");

        goto label4;

     label4:
        throw $r6;
    }

com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET>
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET>
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET>
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET>
<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET>
    static void <clinit>()
    {
        sun.misc.Unsafe $r0;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        long $l0;
        java.lang.Throwable $r3, $r4;
        java.lang.RuntimeException r5;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        goto label01;

     label01:
        $r1 = class "Lcom/google/common/util/concurrent/AbstractFuture;";

     label02:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiters");

        $l0 = virtualinvoke $r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

     label03:
        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET> = $l0;

     label04:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("listeners");

        $l0 = virtualinvoke $r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

     label05:
        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET> = $l0;

     label06:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

     label07:
        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET> = $l0;

        $r1 = class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;";

     label08:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("thread");

        $l0 = virtualinvoke $r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

     label09:
        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET> = $l0;

        $r1 = class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;";

     label10:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l0 = virtualinvoke $r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

     label11:
        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET> = $l0;

        <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE> = $r0;

        return;

     label12:
        $r3 := @caughtexception;

        throw $r3;

     label13:
        $r4 := @caughtexception;

        r5 = new java.lang.RuntimeException;

        specialinvoke r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        $r3 = (java.lang.Throwable) r5;

        throw $r3;

        catch java.lang.NoSuchFieldException from label02 to label03 with label13;
        catch java.lang.NoSuchFieldException from label04 to label05 with label13;
        catch java.lang.NoSuchFieldException from label06 to label07 with label13;
        catch java.lang.NoSuchFieldException from label08 to label09 with label13;
        catch java.lang.NoSuchFieldException from label10 to label11 with label13;
        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.RuntimeException from label04 to label05 with label12;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.RuntimeException from label08 to label09 with label12;
        catch java.lang.RuntimeException from label10 to label11 with label12;
    }

    private void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

        return;
    }

    void <init>(com.google.common.util.concurrent.AbstractFuture$1)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$1 $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$1;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: void <init>()>();

        return;
    }

    boolean casListeners(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1, $r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r2 := @parameter2: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET>;

        $z0 = staticinvoke <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object,java.lang.Object)>($r3, $r4, $l0, $r1, $r2);

        return $z0;
    }

    boolean casValue(com.google.common.util.concurrent.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        java.lang.Object $r1, $r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET>;

        $z0 = staticinvoke <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object,java.lang.Object)>($r3, $r4, $l0, $r1, $r2);

        return $z0;
    }

    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture $r4;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter2: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET>;

        $z0 = staticinvoke <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object,java.lang.Object)>($r3, $r4, $l0, $r1, $r2);

        return $z0;
    }

    com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture $r1;
        com.google.common.util.concurrent.AbstractFuture$Listener $r2, $r3;
        boolean $z0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

     label1:
        $r3 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener access$700(com.google.common.util.concurrent.AbstractFuture)>($r1);

        if $r2 != $r3 goto label2;

        return $r3;

     label2:
        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener)>($r1, $r3, $r2);

        if $z0 == 0 goto label1;

        return $r3;
    }

    com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture $r1;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r2, $r3;
        boolean $z0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

     label1:
        $r3 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)>($r1);

        if $r2 != $r3 goto label2;

        return $r3;

     label2:
        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r1, $r3, $r2);

        if $z0 == 0 goto label1;

        return $r3;
    }

    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, $r2;
        sun.misc.Unsafe $r3;
        long $l0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>($r1, $l0, $r2);

        return;
    }

    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter, java.lang.Thread)
    {
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        java.lang.Thread $r2;
        sun.misc.Unsafe $r3;
        long $l0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 := @parameter1: java.lang.Thread;

        $r3 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>($r1, $l0, $r2);

        return;
    }

com.google.common.util.concurrent.AbstractFuture$Waiter
<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>
<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next>
<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>
    static void <clinit>()
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0;

        $r0 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>(boolean)>(0);

        <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r1;
        java.lang.Thread $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()>();

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)>($r0, $r2);

        return;
    }

    void <init>(boolean)
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0;
        boolean $z0;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0, $r1;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r2;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>($r0, $r1);

        return;
    }

    void unpark()
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0;
        java.lang.Thread $r1;

        $r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1 = $r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r1 == null goto label1;

        $r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

     label1:
        return;
    }

