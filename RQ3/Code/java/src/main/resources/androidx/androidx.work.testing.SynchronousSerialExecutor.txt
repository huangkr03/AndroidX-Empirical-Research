androidx.work.testing.SynchronousSerialExecutor
<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock>
<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks>
<androidx.work.testing.SynchronousSerialExecutor: boolean isRunning>
    public void <init>()
    {
        androidx.work.testing.SynchronousSerialExecutor r0;
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque $r2;

        r0 := @this: androidx.work.testing.SynchronousSerialExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock> = $r1;

        $r2 = new kotlin.collections.ArrayDeque;

        specialinvoke $r2.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks> = $r2;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        androidx.work.testing.SynchronousSerialExecutor r0;
        java.lang.Runnable r1, $r15;
        kotlin.collections.ArrayDeque $r2, $r3, $r5;
        boolean $z1, $z2, $z3, $z7;
        java.lang.Object $r4, r11, $r14, r17;
        java.util.Collection $r6;
        java.lang.Throwable $r8, $r9, $r10;
        kotlin.Unit $r12, $r18;

        r0 := @this: androidx.work.testing.SynchronousSerialExecutor;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "command");

        r11 = r0.<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock>;

        entermonitor r11;

     label01:
        $r2 = r0.<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks>;

        virtualinvoke $r2.<kotlin.collections.ArrayDeque: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<androidx.work.testing.SynchronousSerialExecutor: boolean isRunning>;

        if $z1 == 0 goto label03;

     label02:
        exitmonitor r11;

        return;

     label03:
        r0.<androidx.work.testing.SynchronousSerialExecutor: boolean isRunning> = 1;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        exitmonitor r11;

        goto label07;

     label05:
        $r9 := @caughtexception;

     label06:
        exitmonitor r11;

        throw $r9;

     label07:
        $r14 = r0.<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock>;

        entermonitor $r14;

     label08:
        $r3 = r0.<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks>;

        $r4 = virtualinvoke $r3.<kotlin.collections.ArrayDeque: java.lang.Object removeFirstOrNull()>();

        $r15 = (java.lang.Runnable) $r4;

     label09:
        exitmonitor $r14;

        goto label12;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor $r14;

        throw $r10;

     label12:
        if $r15 == null goto label13;

        interfaceinvoke $r15.<java.lang.Runnable: void run()>();

        goto label13;

     label13:
        r17 = r0.<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock>;

        entermonitor r17;

     label14:
        $r5 = r0.<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks>;

        $r6 = (java.util.Collection) $r5;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label15;

        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        r0.<androidx.work.testing.SynchronousSerialExecutor: boolean isRunning> = $z7;

        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        exitmonitor r17;

        goto label20;

     label18:
        $r8 := @caughtexception;

     label19:
        exitmonitor r17;

        throw $r8;

     label20:
        $z3 = r0.<androidx.work.testing.SynchronousSerialExecutor: boolean isRunning>;

        if $z3 != 0 goto label07;

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label14 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public boolean hasPendingTasks()
    {
        androidx.work.testing.SynchronousSerialExecutor r0;
        java.lang.Object r1;
        kotlin.collections.ArrayDeque $r2;
        java.util.Collection $r3;
        boolean $z0, $z2;
        java.lang.Throwable $r4;

        r0 := @this: androidx.work.testing.SynchronousSerialExecutor;

        r1 = r0.<androidx.work.testing.SynchronousSerialExecutor: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $r2 = r0.<androidx.work.testing.SynchronousSerialExecutor: kotlin.collections.ArrayDeque tasks>;

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor r1;

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

        throw $r4;

     label6:
        return $z2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

