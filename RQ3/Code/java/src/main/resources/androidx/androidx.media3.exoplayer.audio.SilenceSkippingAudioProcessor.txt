androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long DEFAULT_MINIMUM_SILENCE_DURATION_US>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long DEFAULT_PADDING_SILENCE_US>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: short DEFAULT_SILENCE_THRESHOLD_LEVEL>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int STATE_NOISY>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int STATE_MAYBE_SILENT>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int STATE_SILENT>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long minimumSilenceDurationUs>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long paddingSilenceUs>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: short silenceThresholdLevel>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise>
<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void <init>(long,long,short)>(150000L, 20000L, 1024);

        return;
    }

    public void <init>(long, long, short)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        long l0, l1;
        short s2;
        byte $b3;
        byte[] $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        s2 := @parameter2: short;

        specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void <init>()>();

        $b3 = l1 cmp l0;

        if $b3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long minimumSilenceDurationUs> = l0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long paddingSilenceUs> = l1;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: short silenceThresholdLevel> = s2;

        $r1 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer> = $r1;

        $r2 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer> = $r2;

        return;
    }

    public void setEnabled(boolean)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled> = z0;

        return;
    }

    public long getSkippedFrames()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        $l0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>;

        return $l0;
    }

    public androidx.media3.common.audio.AudioProcessor$AudioFormat onConfigure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r3;
        int $i0;
        boolean $z0;
        androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException $r2;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i0 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int encoding>;

        if $i0 == 2 goto label1;

        $r2 = new androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException;

        specialinvoke $r2.<androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException: void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        throw $r2;

     label1:
        $z0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled>;

        if $z0 == 0 goto label2;

        $r3 = r1;

        goto label3;

     label2:
        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

     label3:
        return $r3;
    }

    public boolean isActive()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled>;

        return $z0;
    }

    public void queueInput(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        boolean $z0, $z1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label6;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasPendingOutput()>();

        if $z0 != 0 goto label6;

        $i0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void processNoisy(java.nio.ByteBuffer)>(r1);

        goto label1;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void processMaybeSilence(java.nio.ByteBuffer)>(r1);

        goto label1;

     label4:
        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void processSilence(java.nio.ByteBuffer)>(r1);

        goto label1;

     label5:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    protected void onQueueEndOfStream()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        int $i0, $i1, $i2, $i3, $i7;
        boolean $z0;
        long $l4, $l5, $l6;
        byte[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        $i0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i7 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void output(byte[],int)>($r1, $i7);

     label1:
        $z0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise>;

        if $z0 != 0 goto label2;

        $l5 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>;

        $i2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        $i1 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i3 = $i2 / $i1;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames> = $l6;

     label2:
        return;
    }

    protected void onFlush()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        int i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean $z0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1;
        long $l2, $l6;
        byte[] $r2, $r3, $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled>;

        if $z0 == 0 goto label2;

        $r1 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i1 = $r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame> = $i1;

        $l2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long minimumSilenceDurationUs>;

        $i3 = specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int durationUsToFrames(long)>($l2);

        $i4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        i0 = $i3 * $i4;

        $r2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i5 = lengthof $r2;

        if $i5 == i0 goto label1;

        $r5 = newarray (byte)[i0];

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer> = $r5;

     label1:
        $l6 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long paddingSilenceUs>;

        $i7 = specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int durationUsToFrames(long)>($l6);

        $i8 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i9 = $i7 * $i8;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize> = $i9;

        $r3 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>;

        $i11 = lengthof $r3;

        $i10 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        if $i11 == $i10 goto label2;

        $i12 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        $r4 = newarray (byte)[$i12];

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer> = $r4;

     label2:
        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state> = 0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames> = 0L;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize> = 0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise> = 0;

        return;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        byte[] $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean enabled> = 0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize> = 0;

        $r1 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer> = $r1;

        $r2 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer> = $r2;

        return;
    }

    private void processNoisy(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i3 = lengthof $r2;

        $i4 = $i2 + $i3;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i4);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i5);

        i1 = specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int findNoiseLimit(java.nio.ByteBuffer)>(r1);

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        if i1 != $i6 goto label1;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state> = 1;

        goto label2;

     label1:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void output(java.nio.ByteBuffer)>(r1);

     label2:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

        return;
    }

    private void processMaybeSilence(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i34;
        byte[] $r2, $r4, $r6, $r8, $r9, $r11;
        boolean $z0;
        long $l20, $l21, $l22, $l31, $l32, $l33;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i1 = specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int findNoisePosition(java.nio.ByteBuffer)>(r1);

        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = i1 - $i5;

        $r2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i7 = lengthof $r2;

        $i6 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        i3 = $i7 - $i6;

        if i1 >= i0 goto label1;

        if i2 >= i3 goto label1;

        $r11 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i34 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void output(byte[],int)>($r11, $i34);

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize> = 0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state> = 0;

        goto label5;

     label1:
        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i3);

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i9 = $i8 + i4;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i9);

        $r4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i10 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r4, $i10, i4);

        $i11 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        $i12 = $i11 + i4;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize> = $i12;

        $i14 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        $r6 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i13 = lengthof $r6;

        if $i14 != $i13 goto label4;

        $z0 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise>;

        if $z0 == 0 goto label2;

        $r9 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i24 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void output(byte[],int)>($r9, $i24);

        $l32 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>;

        $i27 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        $i25 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        $i26 = $i25 * 2;

        $i29 = $i27 - $i26;

        $i28 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i30 = $i29 / $i28;

        $l31 = (long) $i30;

        $l33 = $l32 + $l31;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames> = $l33;

        goto label3;

     label2:
        $l21 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>;

        $i16 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        $i15 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        $i18 = $i16 - $i15;

        $i17 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i19 = $i18 / $i17;

        $l20 = (long) $i19;

        $l22 = $l21 + $l20;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames> = $l22;

     label3:
        $r8 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] maybeSilenceBuffer>;

        $i23 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void updatePaddingBuffer(java.nio.ByteBuffer,byte[],int)>(r1, $r8, $i23);

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int maybeSilenceBufferSize> = 0;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state> = 2;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

     label5:
        return;
    }

    private void processSilence(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i3, $i4, $i5, $i8, $i9;
        long $l2, $l6, $l7;
        byte[] $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i1 = specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int findNoisePosition(java.nio.ByteBuffer)>(r1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        $l2 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames>;

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i5 = $i3 / $i4;

        $l6 = (long) $i5;

        $l7 = $l2 + $l6;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: long skippedFrames> = $l7;

        $r3 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>;

        $i8 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void updatePaddingBuffer(java.nio.ByteBuffer,byte[],int)>(r1, $r3, $i8);

        if i1 >= i0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>;

        $i9 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: void output(byte[],int)>($r4, $i9);

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int state> = 0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

     label1:
        return;
    }

    private void output(byte[], int)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        byte[] r1;
        int i0;
        java.nio.ByteBuffer $r2, $r3;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: java.nio.ByteBuffer replaceOutputBuffer(int)>(i0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, i0);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        if i0 <= 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise> = 1;

     label1:
        return;
    }

    private void output(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1, $r2, $r3;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: java.nio.ByteBuffer replaceOutputBuffer(int)>(i0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        if i0 <= 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: boolean hasOutputNoise> = 1;

     label1:
        return;
    }

    private void updatePaddingBuffer(java.nio.ByteBuffer, byte[], int)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        byte[] r2, $r3, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        $i5 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int paddingSize>;

        i2 = $i5 - i1;

        $i6 = i0 - i2;

        $r3 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i6, $r3, 0, i2);

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i8 = $i7 - i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        $r5 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: byte[] paddingBuffer>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r5, i2, i1);

        return;
    }

    private int durationUsToFrames(long)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        long l0, $l2, $l3, $l4;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1;
        int $i1, $i5;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i1 = $r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $l2 = (long) $i1;

        $l3 = l0 * $l2;

        $l4 = $l3 / 1000000L;

        $i5 = (int) $l4;

        return $i5;
    }

    private int findNoisePosition(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i3, $i5, $i6, $i7, $i8, i9;
        short $s2, $s4;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

     label1:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        if i9 >= $i0 goto label3;

        $s2 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort(int)>(i9);

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($s2);

        $s4 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: short silenceThresholdLevel>;

        if $i3 <= $s4 goto label2;

        $i7 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i5 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i6 = i9 / $i5;

        $i8 = $i7 * $i6;

        return $i8;

     label2:
        i9 = i9 + 2;

        goto label1;

     label3:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        return $i1;
    }

    private int findNoiseLimit(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        short $s3, $s5;

        r0 := @this: androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i12 = $i0 - 2;

     label1:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        if i12 < $i1 goto label3;

        $s3 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort(int)>(i12);

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($s3);

        $s5 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: short silenceThresholdLevel>;

        if $i4 <= $s5 goto label2;

        $i8 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i6 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i7 = i12 / $i6;

        $i10 = $i8 * $i7;

        $i9 = r0.<androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor: int bytesPerFrame>;

        $i11 = $i10 + $i9;

        return $i11;

     label2:
        i12 = i12 + -2;

        goto label1;

     label3:
        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        return $i2;
    }

