androidx.core.content.res.ResourcesCompat
<androidx.core.content.res.ResourcesCompat: java.lang.String TAG>
<androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue>
<androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches>
<androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock>
<androidx.core.content.res.ResourcesCompat: int ID_NULL>
    public static void clearCachesForTheme(android.content.res.Resources$Theme)
    {
        android.content.res.Resources$Theme r0, $r9;
        java.lang.Object r1, $r5, $r8;
        java.util.Iterator r2;
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey r3;
        java.lang.Throwable r4, $r10;
        java.util.WeakHashMap $r6;
        java.util.Set $r7;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.res.Resources$Theme;

        $r5 = <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches>;

        $r7 = virtualinvoke $r6.<java.util.WeakHashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey) $r8;

        if r3 == null goto label3;

        $r9 = r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources$Theme mTheme>;

        $z1 = virtualinvoke r0.<android.content.res.Resources$Theme: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.res.Resources, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Resources$Theme;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 21 goto label1;

        $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r0, i0, r1);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        return $r2;
    }

    public static android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources, int, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1, $i2, $i3;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.Drawable $r2, $r3, $r4;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.content.res.Resources$Theme;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 21 goto label1;

        $r4 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)>(r0, i0, i1, r1);

        return $r4;

     label1:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 15 goto label2;

        $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api15Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int)>(r0, i0, i1);

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        return $r2;
    }

    public static int getColor(android.content.res.Resources, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2, $i3;
        android.content.res.Resources$Theme r1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Resources$Theme;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label1;

        $i3 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api23Impl: int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r0, i0, r1);

        return $i3;

     label1:
        $i2 = virtualinvoke r0.<android.content.res.Resources: int getColor(int)>(i0);

        return $i2;
    }

    public static android.content.res.ColorStateList getColorStateList(android.content.res.Resources, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1;
        android.content.res.Resources$Theme r1;
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey r2, $r3;
        android.content.res.ColorStateList $r4, $r5, r6, r7;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Resources$Theme;

        $r3 = new androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey;

        specialinvoke $r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: void <init>(android.content.res.Resources,android.content.res.Resources$Theme)>(r0, r1);

        r2 = $r3;

        r6 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)>(r2, i0);

        if r6 == null goto label1;

        return r6;

     label1:
        r7 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r0, i0, r1);

        if r7 == null goto label2;

        staticinvoke <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)>(r2, i0, r7, r1);

        return r7;

     label2:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label3;

        $r5 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r0, i0, r1);

        return $r5;

     label3:
        $r4 = virtualinvoke r0.<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>(i0);

        return $r4;
    }

    private static android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.Resources$Theme r1;
        android.content.res.XmlResourceParser r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        android.content.res.ColorStateList $r4;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Resources$Theme;

        $z0 = staticinvoke <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)>(r0, i0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

     label2:
        $r4 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>(r0, r2, r1);

     label3:
        return $r4;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ResourcesCompat", "Failed to inflate ColorStateList, leaving it to the framework", r3);

        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey, int)
    {
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r5, $r7, $r8;
        android.util.SparseArray r2;
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry r3;
        java.lang.Throwable r4, $r16;
        java.util.WeakHashMap $r6;
        android.content.res.Resources $r9;
        android.content.res.Configuration $r10, $r11;
        boolean $z0;
        android.content.res.Resources$Theme $r12, $r13, $r14;
        android.content.res.ColorStateList $r15;

        r0 := @parameter0: androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey;

        i0 := @parameter1: int;

        $r5 = <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = <androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches>;

        $r7 = virtualinvoke $r6.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (android.util.SparseArray) $r7;

        if r2 == null goto label06;

        $i1 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        if $i1 <= 0 goto label06;

        $r8 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry) $r8;

        if r3 == null goto label06;

        $r10 = r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: android.content.res.Configuration mConfiguration>;

        $r9 = r0.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources mResources>;

        $r11 = virtualinvoke $r9.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z0 = virtualinvoke $r10.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r11);

        if $z0 == 0 goto label05;

        $r12 = r0.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources$Theme mTheme>;

        if $r12 != null goto label02;

        $i4 = r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: int mThemeHash>;

        if $i4 == 0 goto label03;

     label02:
        $r13 = r0.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources$Theme mTheme>;

        if $r13 == null goto label05;

        $i2 = r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: int mThemeHash>;

        $r14 = r0.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources$Theme mTheme>;

        $i3 = virtualinvoke $r14.<android.content.res.Resources$Theme: int hashCode()>();

        if $i2 != $i3 goto label05;

     label03:
        $r15 = r3.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: android.content.res.ColorStateList mValue>;

        exitmonitor r1;

     label04:
        return $r15;

     label05:
        virtualinvoke r2.<android.util.SparseArray: void remove(int)>(i0);

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r1;

     label09:
        throw r4;

     label10:
        return null;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private static void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey, int, android.content.res.ColorStateList, android.content.res.Resources$Theme)
    {
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey r0;
        int i0;
        android.content.res.ColorStateList r1;
        android.content.res.Resources$Theme r2;
        java.lang.Object r3, $r5, $r7;
        java.lang.Throwable r4, $r14;
        java.util.WeakHashMap $r6, $r12;
        androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry $r8;
        android.content.res.Resources $r9;
        android.content.res.Configuration $r10;
        android.util.SparseArray $r11, r15;

        r0 := @parameter0: androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.ColorStateList;

        r2 := @parameter3: android.content.res.Resources$Theme;

        $r5 = <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches>;

        $r7 = virtualinvoke $r6.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r15 = (android.util.SparseArray) $r7;

        if r15 != null goto label2;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r15 = $r11;

        $r12 = <androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches>;

        virtualinvoke $r12.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15);

     label2:
        $r8 = new androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry;

        $r9 = r0.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: android.content.res.Resources mResources>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        specialinvoke $r8.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration,android.content.res.Resources$Theme)>(r1, $r10, r2);

        virtualinvoke r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, $r8);

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static boolean isColorInt(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2;
        android.util.TypedValue r1;
        boolean $z0;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()>();

        virtualinvoke r0.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i1 = r1.<android.util.TypedValue: int type>;

        if $i1 < 28 goto label1;

        $i2 = r1.<android.util.TypedValue: int type>;

        if $i2 > 31 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static android.util.TypedValue getTypedValue()
    {
        java.lang.ThreadLocal $r0, $r3;
        java.lang.Object $r1;
        android.util.TypedValue $r2, r4;

        $r0 = <androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (android.util.TypedValue) $r1;

        if r4 != null goto label1;

        $r2 = new android.util.TypedValue;

        specialinvoke $r2.<android.util.TypedValue: void <init>()>();

        r4 = $r2;

        $r3 = <androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>(r4);

     label1:
        return r4;
    }

    public static float getFloat(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2, $i3;
        android.util.TypedValue r1;
        android.content.res.Resources$NotFoundException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r5, $r8, $r11;
        float $f0, $f1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label1;

        $f1 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api29Impl: float getFloat(android.content.res.Resources,int)>(r0, i0);

        return $f1;

     label1:
        r1 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()>();

        virtualinvoke r0.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i2 = r1.<android.util.TypedValue: int type>;

        if $i2 != 4 goto label2;

        $f0 = virtualinvoke r1.<android.util.TypedValue: float getFloat()>();

        return $f0;

     label2:
        $r2 = new android.content.res.Resources$NotFoundException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i3 = r1.<android.util.TypedValue: int type>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        throw $r2;
    }

    public static android.graphics.Typeface getFont(android.content.Context, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        int i0;
        boolean $z0;
        android.util.TypedValue $r1;
        android.graphics.Typeface $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new android.util.TypedValue;

        specialinvoke $r1.<android.util.TypedValue: void <init>()>();

        $r2 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean)>(r0, i0, $r1, 0, null, null, 0, 0);

        return $r2;
    }

    public static android.graphics.Typeface getCachedFont(android.content.Context, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        int i0;
        boolean $z0;
        android.util.TypedValue $r1;
        android.graphics.Typeface $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new android.util.TypedValue;

        specialinvoke $r1.<android.util.TypedValue: void <init>()>();

        $r2 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean)>(r0, i0, $r1, 0, null, null, 0, 1);

        return $r2;
    }

    public static void getFont(android.content.Context, int, androidx.core.content.res.ResourcesCompat$FontCallback, android.os.Handler) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        int i0;
        androidx.core.content.res.ResourcesCompat$FontCallback r1;
        android.os.Handler r2;
        boolean $z0;
        android.util.TypedValue $r4;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.core.content.res.ResourcesCompat$FontCallback;

        r2 := @parameter3: android.os.Handler;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>(-4, r2);

        return;

     label1:
        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean)>(r0, i0, $r4, 0, r1, r2, 0, 0);

        return;
    }

    public static android.graphics.Typeface getFont(android.content.Context, int, android.util.TypedValue, int, androidx.core.content.res.ResourcesCompat$FontCallback) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context r0;
        int i0, i1;
        android.util.TypedValue r1;
        androidx.core.content.res.ResourcesCompat$FontCallback r2;
        boolean $z0;
        android.graphics.Typeface $r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.util.TypedValue;

        i1 := @parameter3: int;

        r2 := @parameter4: androidx.core.content.res.ResourcesCompat$FontCallback;

        $z0 = virtualinvoke r0.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean)>(r0, i0, r1, i1, r2, null, 1, 0);

        return $r3;
    }

    private static android.graphics.Typeface loadFont(android.content.Context, int, android.util.TypedValue, int, androidx.core.content.res.ResourcesCompat$FontCallback, android.os.Handler, boolean, boolean)
    {
        android.content.Context r0;
        int i0, i1;
        android.util.TypedValue r1;
        androidx.core.content.res.ResourcesCompat$FontCallback r2;
        android.os.Handler r3;
        boolean z0, z1;
        android.content.res.Resources r4;
        android.graphics.Typeface r5;
        android.content.res.Resources$NotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r9, $r12;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.util.TypedValue;

        i1 := @parameter3: int;

        r2 := @parameter4: androidx.core.content.res.ResourcesCompat$FontCallback;

        r3 := @parameter5: android.os.Handler;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        r4 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        virtualinvoke r4.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        r5 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean)>(r0, r4, r1, i0, i1, r2, r3, z0, z1);

        if r5 != null goto label1;

        if r2 != null goto label1;

        if z1 != 0 goto label1;

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font resource ID #0x");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be retrieved.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        return r5;
    }

    private static android.graphics.Typeface loadFont(android.content.Context, android.content.res.Resources, android.util.TypedValue, int, int, androidx.core.content.res.ResourcesCompat$FontCallback, android.os.Handler, boolean, boolean)
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.util.TypedValue r2;
        int i0, i1, $i2, $i3, $i4;
        androidx.core.content.res.ResourcesCompat$FontCallback r3;
        android.os.Handler r4;
        boolean z0, z1, $z2, $z3;
        java.lang.String r5, $r9, $r14, $r17, $r21, $r26, $r31;
        androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry r6;
        java.lang.CharSequence $r7, $r8;
        android.graphics.Typeface $r10, r32, r34;
        android.content.res.Resources$NotFoundException $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r23, $r24, $r25, $r28, $r29, $r30;
        java.lang.Throwable $r22, $r27, r36, r37;
        android.content.res.XmlResourceParser r33;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.util.TypedValue;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r3 := @parameter5: androidx.core.content.res.ResourcesCompat$FontCallback;

        r4 := @parameter6: android.os.Handler;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        $r7 = r2.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r7 != null goto label01;

        $r11 = new android.content.res.Resources$NotFoundException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \"");

        $r14 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a Font: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r21);

        throw $r11;

     label01:
        $r8 = r2.<android.util.TypedValue: java.lang.CharSequence string>;

        r5 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("res/");

        if $z2 != 0 goto label03;

        if r3 == null goto label02;

        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>(-3, r4);

     label02:
        return null;

     label03:
        $i2 = r2.<android.util.TypedValue: int assetCookie>;

        r32 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface findFromCache(android.content.res.Resources,int,java.lang.String,int,int)>(r1, i0, r5, $i2, i1);

        if r32 == null goto label05;

        if r3 == null goto label04;

        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler)>(r32, r4);

     label04:
        return r32;

     label05:
        if z1 == 0 goto label06;

        return null;

     label06:
        $r9 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z3 == 0 goto label10;

        r33 = virtualinvoke r1.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

        r6 = staticinvoke <androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>(r33, r1);

        if r6 != null goto label08;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ResourcesCompat", "Failed to find font-family tag");

        if r3 == null goto label07;

        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>(-3, r4);

     label07:
        return null;

     label08:
        $i4 = r2.<android.util.TypedValue: int assetCookie>;

        $r10 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFamilyXml(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry,android.content.res.Resources,int,java.lang.String,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>(r0, r6, r1, i0, r5, $i4, i1, r3, r4, z0);

     label09:
        return $r10;

     label10:
        $i3 = r2.<android.util.TypedValue: int assetCookie>;

        r34 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int,int)>(r0, r1, i0, r5, $i3, i1);

        if r3 == null goto label12;

        if r34 == null goto label11;

        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler)>(r34, r4);

        goto label12;

     label11:
        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>(-3, r4);

     label12:
        return r34;

     label13:
        $r22 := @caughtexception;

        r36 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse xml resource ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ResourcesCompat", $r26, r36);

        goto label15;

     label14:
        $r27 := @caughtexception;

        r37 = $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read xml resource ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ResourcesCompat", $r31, r37);

     label15:
        if r3 == null goto label16;

        virtualinvoke r3.<androidx.core.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>(-3, r4);

     label16:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label12 with label13;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.io.IOException from label10 to label12 with label14;
    }

    private void <init>()
    {
        androidx.core.content.res.ResourcesCompat r0;

        r0 := @this: androidx.core.content.res.ResourcesCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;
        java.util.WeakHashMap $r1;
        java.lang.Object $r2;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue> = $r0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>(int)>(0);

        <androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock> = $r2;

        return;
    }

