androidx.test.services.shellexecutor.ShellMain
<androidx.test.services.shellexecutor.ShellMain: java.lang.String TAG>
<androidx.test.services.shellexecutor.ShellMain: androidx.test.services.shellexecutor.ShellCommandExecutorServer server>
    static void <clinit>()
    {
        androidx.test.services.shellexecutor.ShellCommandExecutorServer $r0;

        $r0 = new androidx.test.services.shellexecutor.ShellCommandExecutorServer;

        specialinvoke $r0.<androidx.test.services.shellexecutor.ShellCommandExecutorServer: void <init>()>();

        <androidx.test.services.shellexecutor.ShellMain: androidx.test.services.shellexecutor.ShellCommandExecutorServer server> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.services.shellexecutor.ShellMain $r0;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.lang.String[] $r0, $r6;
        java.lang.String $r1, $r2;
        boolean $z0;
        androidx.test.services.shellexecutor.ShellCommandExecutorServer $r3;
        java.util.ArrayList $r4, r11;
        java.util.List $r5;
        int $i0, $i1;
        java.lang.Process $r7;
        java.util.concurrent.FutureTask $r8, $r9, r15;
        java.lang.Thread $r10, r17;
        java.lang.ProcessBuilder r12;
        androidx.test.services.shellexecutor.ShellMain$1 r13;
        androidx.test.services.shellexecutor.ShellMain$2 r14;
        androidx.test.services.shellexecutor.ShellMain$3 r16;
        java.util.Collection r18;
        java.lang.Runnable r19;

        $r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SM_EXIT");

        $r2 = "1";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        $r3 = <androidx.test.services.shellexecutor.ShellMain: androidx.test.services.shellexecutor.ShellCommandExecutorServer server>;

        $r1 = virtualinvoke $r3.<androidx.test.services.shellexecutor.ShellCommandExecutorServer: java.lang.String start()>();

        r11 = new java.util.ArrayList;

        $r4 = r11;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

        $r5 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        r18 = (java.util.Collection) $r5;

        specialinvoke r11.<java.util.ArrayList: void <init>(java.util.Collection)>(r18);

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = "-e";

        $r6[1] = "shellExecKey";

        $r6[2] = $r1;

        r18 = (java.util.Collection) $r4;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r18, $r6);

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

        $r1 = $r0[$i0];

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        r12 = new java.lang.ProcessBuilder;

        $r5 = (java.util.List) $r4;

        specialinvoke r12.<java.lang.ProcessBuilder: void <init>(java.util.List)>($r5);

        $r7 = virtualinvoke r12.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r9 = new java.util.concurrent.FutureTask;

        $r8 = $r9;

        r13 = new androidx.test.services.shellexecutor.ShellMain$1;

        specialinvoke r13.<androidx.test.services.shellexecutor.ShellMain$1: void <init>(java.lang.Process)>($r7);

        specialinvoke $r9.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r13, null);

        r15 = new java.util.concurrent.FutureTask;

        $r9 = r15;

        r14 = new androidx.test.services.shellexecutor.ShellMain$2;

        specialinvoke r14.<androidx.test.services.shellexecutor.ShellMain$2: void <init>(java.lang.Process)>($r7);

        specialinvoke r15.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r14, null);

        r16 = new androidx.test.services.shellexecutor.ShellMain$3;

        specialinvoke r16.<androidx.test.services.shellexecutor.ShellMain$3: void <init>(java.lang.Process)>($r7);

        r17 = new java.lang.Thread;

        $r10 = r17;

        specialinvoke r17.<java.lang.Thread: void <init>(java.lang.Runnable)>(r16);

        virtualinvoke $r10.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        r17 = new java.lang.Thread;

        $r10 = r17;

        r19 = (java.lang.Runnable) $r8;

        specialinvoke r17.<java.lang.Thread: void <init>(java.lang.Runnable)>(r19);

        virtualinvoke $r10.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        r17 = new java.lang.Thread;

        $r10 = r17;

        r19 = (java.lang.Runnable) $r9;

        specialinvoke r17.<java.lang.Thread: void <init>(java.lang.Runnable)>(r19);

        virtualinvoke $r10.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        $i0 = virtualinvoke $r7.<java.lang.Process: int waitFor()>();

        virtualinvoke $r8.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        virtualinvoke $r9.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i1);

     label1:
        staticinvoke <java.lang.System: void exit(int)>($i0);

        return;
    }

androidx.test.services.shellexecutor.ShellMain$1
<androidx.test.services.shellexecutor.ShellMain$1: java.lang.Process val$p>
    void <init>(java.lang.Process)
    {
        androidx.test.services.shellexecutor.ShellMain$1 $r0;
        java.lang.Process $r1;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$1;

        $r1 := @parameter0: java.lang.Process;

        $r0.<androidx.test.services.shellexecutor.ShellMain$1: java.lang.Process val$p> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellMain$1 $r0;
        byte[] $r1;
        java.lang.Process $r2;
        java.io.InputStream $r3;
        int $i0;
        java.io.PrintStream $r4;
        java.lang.Throwable $r5;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$1;

        $r1 = newarray (byte)[1024];

        $r2 = $r0.<androidx.test.services.shellexecutor.ShellMain$1: java.lang.Process val$p>;

        $r3 = virtualinvoke $r2.<java.lang.Process: java.io.InputStream getInputStream()>();

     label1:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r1);

     label2:
        if $i0 != -1 goto label5;

        $r4 = <java.lang.System: java.io.PrintStream out>;

     label3:
        virtualinvoke $r4.<java.io.PrintStream: void close()>();

     label4:
        return;

     label5:
        $r4 = <java.lang.System: java.io.PrintStream out>;

     label6:
        virtualinvoke $r4.<java.io.PrintStream: void write(byte[],int,int)>($r1, 0, $i0);

     label7:
        goto label1;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ShellMain", "IOException on stdout, terminating", $r5);

        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

androidx.test.services.shellexecutor.ShellMain$2
<androidx.test.services.shellexecutor.ShellMain$2: java.lang.Process val$p>
    void <init>(java.lang.Process)
    {
        androidx.test.services.shellexecutor.ShellMain$2 $r0;
        java.lang.Process $r1;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$2;

        $r1 := @parameter0: java.lang.Process;

        $r0.<androidx.test.services.shellexecutor.ShellMain$2: java.lang.Process val$p> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellMain$2 $r0;
        byte[] $r1;
        java.lang.Process $r2;
        java.io.InputStream $r3;
        int $i0;
        java.io.PrintStream $r4;
        java.lang.Throwable $r5;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$2;

        $r1 = newarray (byte)[1024];

        $r2 = $r0.<androidx.test.services.shellexecutor.ShellMain$2: java.lang.Process val$p>;

        $r3 = virtualinvoke $r2.<java.lang.Process: java.io.InputStream getErrorStream()>();

     label1:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r1);

     label2:
        if $i0 != -1 goto label5;

        $r4 = <java.lang.System: java.io.PrintStream err>;

     label3:
        virtualinvoke $r4.<java.io.PrintStream: void close()>();

     label4:
        return;

     label5:
        $r4 = <java.lang.System: java.io.PrintStream err>;

     label6:
        virtualinvoke $r4.<java.io.PrintStream: void write(byte[],int,int)>($r1, 0, $i0);

     label7:
        goto label1;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ShellMain", "IOException on stderr, terminating", $r5);

        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

androidx.test.services.shellexecutor.ShellMain$3
<androidx.test.services.shellexecutor.ShellMain$3: java.lang.Process val$p>
    void <init>(java.lang.Process)
    {
        androidx.test.services.shellexecutor.ShellMain$3 $r0;
        java.lang.Process $r1;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$3;

        $r1 := @parameter0: java.lang.Process;

        $r0.<androidx.test.services.shellexecutor.ShellMain$3: java.lang.Process val$p> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.services.shellexecutor.ShellMain$3 $r0;
        byte[] $r1;
        java.lang.Process $r2;
        java.io.OutputStream $r3;
        java.io.InputStream $r4;
        int $i0;
        java.lang.Throwable $r5;

        $r0 := @this: androidx.test.services.shellexecutor.ShellMain$3;

        $r1 = newarray (byte)[1024];

        $r2 = $r0.<androidx.test.services.shellexecutor.ShellMain$3: java.lang.Process val$p>;

        $r3 = virtualinvoke $r2.<java.lang.Process: java.io.OutputStream getOutputStream()>();

     label1:
        $r4 = <java.lang.System: java.io.InputStream in>;

     label2:
        $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r1);

     label3:
        if $i0 != -1 goto label6;

     label4:
        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label5:
        return;

     label6:
        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

     label7:
        goto label1;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ShellMain", "IOException on stdin, terminating", $r5);

        return;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

