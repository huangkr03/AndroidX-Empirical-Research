androidx.room.migration.bundle.DatabaseBundle
<androidx.room.migration.bundle.DatabaseBundle: int version>
<androidx.room.migration.bundle.DatabaseBundle: java.lang.String identityHash>
<androidx.room.migration.bundle.DatabaseBundle: java.util.List entities>
<androidx.room.migration.bundle.DatabaseBundle: java.util.List views>
<androidx.room.migration.bundle.DatabaseBundle: java.util.List setupQueries>
<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy entitiesByTableName$delegate>
<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy viewsByName$delegate>
    public void <init>(int, java.lang.String, java.util.List, java.util.List, java.util.List)
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        int i0;
        java.lang.String r1;
        java.util.List r2, r3, r4;
        androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2 $r5;
        kotlin.jvm.functions.Function0 $r6, $r9;
        kotlin.Lazy $r7, $r10;
        androidx.room.migration.bundle.DatabaseBundle$viewsByName$2 $r8;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "identityHash");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "entities");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "views");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "setupQueries");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.migration.bundle.DatabaseBundle: int version> = i0;

        r0.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String identityHash> = r1;

        r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List entities> = r2;

        r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List views> = r3;

        r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List setupQueries> = r4;

        $r5 = new androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2;

        specialinvoke $r5.<androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2: void <init>(androidx.room.migration.bundle.DatabaseBundle)>(r0);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        $r7 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r6);

        r0.<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy entitiesByTableName$delegate> = $r7;

        $r8 = new androidx.room.migration.bundle.DatabaseBundle$viewsByName$2;

        specialinvoke $r8.<androidx.room.migration.bundle.DatabaseBundle$viewsByName$2: void <init>(androidx.room.migration.bundle.DatabaseBundle)>(r0);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        $r10 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r9);

        r0.<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy viewsByName$delegate> = $r10;

        return;
    }

    public int getVersion()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        int $i0;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        $i0 = r0.<androidx.room.migration.bundle.DatabaseBundle: int version>;

        return $i0;
    }

    public java.lang.String getIdentityHash()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        $r1 = r0.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String identityHash>;

        return $r1;
    }

    public java.util.List getEntities()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        java.util.List $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        $r1 = r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List entities>;

        return $r1;
    }

    public java.util.List getViews()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        java.util.List $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        $r1 = r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List views>;

        return $r1;
    }

    public void <init>()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        java.util.List $r1, $r2, $r3;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: void <init>(int,java.lang.String,java.util.List,java.util.List,java.util.List)>(0, "", $r1, $r2, $r3);

        return;
    }

    public java.util.Map getEntitiesByTableName()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        r1 = r0.<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy entitiesByTableName$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r2;

        return $r3;
    }

    public final java.util.Map getViewsByName()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        r1 = r0.<androidx.room.migration.bundle.DatabaseBundle: kotlin.Lazy viewsByName$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r2;

        return $r3;
    }

    public java.util.List buildCreateQueries()
    {
        androidx.room.migration.bundle.DatabaseBundle r0;
        java.util.List r1, $r3, $r7, $r8, $r9, $r11;
        androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator $r4;
        java.lang.Iterable $r5, $r14, $r18;
        java.util.Comparator $r6;
        boolean $z1, $z2;
        java.util.Collection $r10, $r13;
        java.lang.String $r12;
        java.util.Iterator r15, r19;
        java.lang.Object r16, r20;
        androidx.room.migration.bundle.EntityBundle r17;
        androidx.room.migration.bundle.DatabaseViewBundle r21;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        $r3 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List getEntities()>();

        $r5 = (java.lang.Iterable) $r3;

        $r4 = new androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator;

        specialinvoke $r4.<androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator: void <init>()>();

        $r6 = (java.util.Comparator) $r4;

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>($r5, $r6);

        $r14 = (java.lang.Iterable) $r7;

        r15 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (androidx.room.migration.bundle.EntityBundle) r16;

        $r13 = virtualinvoke r17.<androidx.room.migration.bundle.EntityBundle: java.util.Collection buildCreateQueries()>();

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        goto label1;

     label2:
        $r8 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List getViews()>();

        $r18 = (java.lang.Iterable) $r8;

        r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        r20 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (androidx.room.migration.bundle.DatabaseViewBundle) r20;

        $r12 = virtualinvoke r21.<androidx.room.migration.bundle.DatabaseViewBundle: java.lang.String createView()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label3;

     label4:
        $r9 = r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.List setupQueries>;

        $r10 = (java.util.Collection) $r9;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r1);

        return $r11;
    }

    public boolean isSchemaEqual(androidx.room.migration.bundle.DatabaseBundle)
    {
        androidx.room.migration.bundle.DatabaseBundle r0, r1;
        androidx.room.migration.bundle.SchemaEqualityUtil $r2, $r5;
        java.util.Map $r3, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $r2 = <androidx.room.migration.bundle.SchemaEqualityUtil: androidx.room.migration.bundle.SchemaEqualityUtil INSTANCE>;

        $r3 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.Map getEntitiesByTableName()>();

        $r4 = virtualinvoke r1.<androidx.room.migration.bundle.DatabaseBundle: java.util.Map getEntitiesByTableName()>();

        $z0 = virtualinvoke $r2.<androidx.room.migration.bundle.SchemaEqualityUtil: boolean checkSchemaEquality(java.util.Map,java.util.Map)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r5 = <androidx.room.migration.bundle.SchemaEqualityUtil: androidx.room.migration.bundle.SchemaEqualityUtil INSTANCE>;

        $r6 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: java.util.Map getViewsByName()>();

        $r7 = virtualinvoke r1.<androidx.room.migration.bundle.DatabaseBundle: java.util.Map getViewsByName()>();

        $z1 = virtualinvoke $r5.<androidx.room.migration.bundle.SchemaEqualityUtil: boolean checkSchemaEquality(java.util.Map,java.util.Map)>($r6, $r7);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public volatile boolean isSchemaEqual(java.lang.Object)
    {
        androidx.room.migration.bundle.DatabaseBundle r0, $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.room.migration.bundle.DatabaseBundle) r1;

        $z0 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle: boolean isSchemaEqual(androidx.room.migration.bundle.DatabaseBundle)>($r2);

        return $z0;
    }

androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2
<androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2: androidx.room.migration.bundle.DatabaseBundle this$0>
    void <init>(androidx.room.migration.bundle.DatabaseBundle)
    {
        androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2 r0;
        androidx.room.migration.bundle.DatabaseBundle $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2;

        $r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        r0.<androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2: androidx.room.migration.bundle.DatabaseBundle this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.Map invoke()
    {
        androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2 r0;
        java.lang.Iterable $r1;
        int i0, $i1, $i2;
        java.util.Map r2, r6;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.room.migration.bundle.EntityBundle r5;
        androidx.room.migration.bundle.DatabaseBundle $r7;
        java.util.List $r8;
        java.util.LinkedHashMap $r9;
        boolean $z3;
        java.lang.String $r10;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2;

        $r7 = r0.<androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2: androidx.room.migration.bundle.DatabaseBundle this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.migration.bundle.DatabaseBundle: java.util.List getEntities()>();

        $r1 = (java.lang.Iterable) $r8;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        $i2 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i1);

        i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, 16);

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(int)>(i0);

        r2 = (java.util.Map) $r9;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.room.migration.bundle.EntityBundle) r4;

        r6 = r2;

        $r10 = virtualinvoke r5.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r4);

        goto label1;

     label2:
        return r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2 r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2;

        $r1 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle$entitiesByTableName$2: java.util.Map invoke()>();

        return $r1;
    }

androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator
    public void <init>()
    {
        androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator r0;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(androidx.room.migration.bundle.EntityBundle, androidx.room.migration.bundle.EntityBundle)
    {
        androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator r0;
        androidx.room.migration.bundle.EntityBundle r1, r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.room.migration.bundle.FtsEntityBundle $r3, $r6;
        androidx.room.migration.bundle.FtsOptionsBundle $r4, $r7;
        java.lang.String $r5, $r8, r9, r10;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator;

        r1 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        r2 := @parameter1: androidx.room.migration.bundle.EntityBundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "firstEntity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "secondEntity");

        $z0 = r1 instanceof androidx.room.migration.bundle.FtsEntityBundle;

        if $z0 == 0 goto label1;

        $r6 = (androidx.room.migration.bundle.FtsEntityBundle) r1;

        $r7 = virtualinvoke $r6.<androidx.room.migration.bundle.FtsEntityBundle: androidx.room.migration.bundle.FtsOptionsBundle getFtsOptions()>();

        r9 = virtualinvoke $r7.<androidx.room.migration.bundle.FtsOptionsBundle: java.lang.String getContentTable()>();

        $r8 = virtualinvoke r2.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r9, $r8);

        if $z3 == 0 goto label2;

        return 1;

     label1:
        $z1 = r2 instanceof androidx.room.migration.bundle.FtsEntityBundle;

        if $z1 == 0 goto label2;

        $r3 = (androidx.room.migration.bundle.FtsEntityBundle) r2;

        $r4 = virtualinvoke $r3.<androidx.room.migration.bundle.FtsEntityBundle: androidx.room.migration.bundle.FtsOptionsBundle getFtsOptions()>();

        r10 = virtualinvoke $r4.<androidx.room.migration.bundle.FtsOptionsBundle: java.lang.String getContentTable()>();

        $r5 = virtualinvoke r1.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r10, $r5);

        if $z2 == 0 goto label2;

        return -1;

     label2:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator r0;
        java.lang.Object r1, r2;
        androidx.room.migration.bundle.EntityBundle $r3, $r4;
        int $i0;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.room.migration.bundle.EntityBundle) r1;

        $r3 = (androidx.room.migration.bundle.EntityBundle) r2;

        $i0 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle$FtsEntityCreateComparator: int compare(androidx.room.migration.bundle.EntityBundle,androidx.room.migration.bundle.EntityBundle)>($r4, $r3);

        return $i0;
    }

androidx.room.migration.bundle.DatabaseBundle$viewsByName$2
<androidx.room.migration.bundle.DatabaseBundle$viewsByName$2: androidx.room.migration.bundle.DatabaseBundle this$0>
    void <init>(androidx.room.migration.bundle.DatabaseBundle)
    {
        androidx.room.migration.bundle.DatabaseBundle$viewsByName$2 r0;
        androidx.room.migration.bundle.DatabaseBundle $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$viewsByName$2;

        $r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        r0.<androidx.room.migration.bundle.DatabaseBundle$viewsByName$2: androidx.room.migration.bundle.DatabaseBundle this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.Map invoke()
    {
        androidx.room.migration.bundle.DatabaseBundle$viewsByName$2 r0;
        java.lang.Iterable $r1;
        int i0, $i1, $i2;
        java.util.Map r2, r6;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.room.migration.bundle.DatabaseViewBundle r5;
        androidx.room.migration.bundle.DatabaseBundle $r7;
        java.util.List $r8;
        java.util.LinkedHashMap $r9;
        boolean $z3;
        java.lang.String $r10;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$viewsByName$2;

        $r7 = r0.<androidx.room.migration.bundle.DatabaseBundle$viewsByName$2: androidx.room.migration.bundle.DatabaseBundle this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.migration.bundle.DatabaseBundle: java.util.List getViews()>();

        $r1 = (java.lang.Iterable) $r8;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        $i2 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i1);

        i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, 16);

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(int)>(i0);

        r2 = (java.util.Map) $r9;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.room.migration.bundle.DatabaseViewBundle) r4;

        r6 = r2;

        $r10 = virtualinvoke r5.<androidx.room.migration.bundle.DatabaseViewBundle: java.lang.String getViewName()>();

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r4);

        goto label1;

     label2:
        return r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.migration.bundle.DatabaseBundle$viewsByName$2 r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.migration.bundle.DatabaseBundle$viewsByName$2;

        $r1 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseBundle$viewsByName$2: java.util.Map invoke()>();

        return $r1;
    }

