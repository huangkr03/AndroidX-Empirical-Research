androidx.media3.test.utils.Action
<androidx.media3.test.utils.Action: java.lang.String tag>
<androidx.media3.test.utils.Action: java.lang.String description>
    public void <init>(java.lang.String, java.lang.String)
    {
        androidx.media3.test.utils.Action r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.media3.test.utils.Action;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.Action: java.lang.String tag> = r1;

        r0.<androidx.media3.test.utils.Action: java.lang.String description> = r2;

        return;
    }

<androidx.media3.test.utils.Action: void doActionImpl(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface)>
    final void doActionAndScheduleNext(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        java.lang.String $r6, $r7, $r8;

        r0 := @this: androidx.media3.test.utils.Action;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r6 = r0.<androidx.media3.test.utils.Action: java.lang.String description>;

        if $r6 == null goto label1;

        $r8 = r0.<androidx.media3.test.utils.Action: java.lang.String tag>;

        $r7 = r0.<androidx.media3.test.utils.Action: java.lang.String description>;

        staticinvoke <androidx.media3.common.util.Log: void i(java.lang.String,java.lang.String)>($r8, $r7);

     label1:
        virtualinvoke r0.<androidx.media3.test.utils.Action: void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$ActionNode)>(r1, r2, r3, r4, r5);

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;

        r0 := @this: androidx.media3.test.utils.Action;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        virtualinvoke r0.<androidx.media3.test.utils.Action: void doActionImpl(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface)>(r1, r2, r3);

        if r5 == null goto label1;

        virtualinvoke r5.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

     label1:
        return;
    }

androidx.media3.test.utils.Action$AddMediaItems
<androidx.media3.test.utils.Action$AddMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources>
    public transient void <init>(java.lang.String, androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.Action$AddMediaItems r0;
        java.lang.String r1;
        androidx.media3.exoplayer.source.MediaSource[] r2;

        r0 := @this: androidx.media3.test.utils.Action$AddMediaItems;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.source.MediaSource[];

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "AddMediaItems");

        r0.<androidx.media3.test.utils.Action$AddMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$AddMediaItems r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.source.MediaSource[] $r4;
        java.util.List $r5;

        r0 := @this: androidx.media3.test.utils.Action$AddMediaItems;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$AddMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addMediaSources(java.util.List)>($r5);

        return;
    }

androidx.media3.test.utils.Action$ClearMediaItems
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$ClearMediaItems r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$ClearMediaItems;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "ClearMediaItems");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$ClearMediaItems r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$ClearMediaItems;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void clearMediaItems()>();

        return;
    }

androidx.media3.test.utils.Action$ClearVideoSurface
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$ClearVideoSurface r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$ClearVideoSurface;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "ClearVideoSurface");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$ClearVideoSurface r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$ClearVideoSurface;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void clearVideoSurface()>();

        return;
    }

androidx.media3.test.utils.Action$ExecuteRunnable
<androidx.media3.test.utils.Action$ExecuteRunnable: java.lang.Runnable runnable>
    public void <init>(java.lang.String, java.lang.Runnable)
    {
        androidx.media3.test.utils.Action$ExecuteRunnable r0;
        java.lang.String r1;
        java.lang.Runnable r2;

        r0 := @this: androidx.media3.test.utils.Action$ExecuteRunnable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "ExecuteRunnable");

        r0.<androidx.media3.test.utils.Action$ExecuteRunnable: java.lang.Runnable runnable> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$ExecuteRunnable r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        java.lang.Runnable $r4, $r5, $r6;
        boolean $z0;
        androidx.media3.test.utils.ActionSchedule$PlayerRunnable $r7;

        r0 := @this: androidx.media3.test.utils.Action$ExecuteRunnable;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$ExecuteRunnable: java.lang.Runnable runnable>;

        $z0 = $r4 instanceof androidx.media3.test.utils.ActionSchedule$PlayerRunnable;

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.media3.test.utils.Action$ExecuteRunnable: java.lang.Runnable runnable>;

        $r7 = (androidx.media3.test.utils.ActionSchedule$PlayerRunnable) $r6;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: void setPlayer(androidx.media3.exoplayer.ExoPlayer)>(r1);

     label1:
        $r5 = r0.<androidx.media3.test.utils.Action$ExecuteRunnable: java.lang.Runnable runnable>;

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

        return;
    }

androidx.media3.test.utils.Action$MoveMediaItem
<androidx.media3.test.utils.Action$MoveMediaItem: int currentIndex>
<androidx.media3.test.utils.Action$MoveMediaItem: int newIndex>
    public void <init>(java.lang.String, int, int)
    {
        androidx.media3.test.utils.Action$MoveMediaItem r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.Action$MoveMediaItem;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "MoveMediaItem");

        r0.<androidx.media3.test.utils.Action$MoveMediaItem: int currentIndex> = i0;

        r0.<androidx.media3.test.utils.Action$MoveMediaItem: int newIndex> = i1;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$MoveMediaItem r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        int $i0, $i1;

        r0 := @this: androidx.media3.test.utils.Action$MoveMediaItem;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $i1 = r0.<androidx.media3.test.utils.Action$MoveMediaItem: int currentIndex>;

        $i0 = r0.<androidx.media3.test.utils.Action$MoveMediaItem: int newIndex>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void moveMediaItem(int,int)>($i1, $i0);

        return;
    }

androidx.media3.test.utils.Action$PlayUntilPosition
<androidx.media3.test.utils.Action$PlayUntilPosition: int mediaItemIndex>
<androidx.media3.test.utils.Action$PlayUntilPosition: long positionMs>
    public void <init>(java.lang.String, int, long)
    {
        androidx.media3.test.utils.Action$PlayUntilPosition r0;
        java.lang.String r1, $r7;
        int i0;
        long l1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @this: androidx.media3.test.utils.Action$PlayUntilPosition;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlayUntilPosition:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r7);

        r0.<androidx.media3.test.utils.Action$PlayUntilPosition: int mediaItemIndex> = i0;

        r0.<androidx.media3.test.utils.Action$PlayUntilPosition: long positionMs> = l1;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$PlayUntilPosition r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$PlayUntilPosition;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$PlayUntilPosition r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        android.os.Looper r6;
        androidx.media3.exoplayer.PlayerMessage$Target $r7, $r11;
        androidx.media3.exoplayer.PlayerMessage $r8, $r9, $r12, $r13, $r14;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @this: androidx.media3.test.utils.Action$PlayUntilPosition;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r6 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        $r7 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (androidx.media3.exoplayer.ExoPlayer,android.os.Looper)>(r1, r6) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.Action$PlayUntilPosition: void lambda$doActionAndScheduleNextImpl$1(androidx.media3.exoplayer.ExoPlayer,android.os.Looper,int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r8 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r7);

        $i1 = r0.<androidx.media3.test.utils.Action$PlayUntilPosition: int mediaItemIndex>;

        $l0 = r0.<androidx.media3.test.utils.Action$PlayUntilPosition: long positionMs>;

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setPosition(int,long)>($i1, $l0);

        virtualinvoke $r9.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        if r5 == null goto label1;

        $r11 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r5, r1, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.Action$PlayUntilPosition: void lambda$doActionAndScheduleNextImpl$2(androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r12 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r11);

        $i3 = r0.<androidx.media3.test.utils.Action$PlayUntilPosition: int mediaItemIndex>;

        $l2 = r0.<androidx.media3.test.utils.Action$PlayUntilPosition: long positionMs>;

        $r13 = virtualinvoke $r12.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setPosition(int,long)>($i3, $l2);

        $r14 = virtualinvoke $r13.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setLooper(android.os.Looper)>(r6);

        virtualinvoke $r14.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

     label1:
        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void play()>();

        return;
    }

    private static void lambda$doActionAndScheduleNextImpl$2(androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        int i0;
        java.lang.Object r5;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter2: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter3: android.view.Surface;

        r4 := @parameter4: androidx.media3.common.util.HandlerWrapper;

        i0 := @parameter5: int;

        r5 := @parameter6: java.lang.Object;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        return;
    }

    private static void lambda$doActionAndScheduleNextImpl$1(androidx.media3.exoplayer.ExoPlayer, android.os.Looper, int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        android.os.Looper r1;
        int i0;
        java.lang.Object r2;
        androidx.media3.common.util.ConditionVariable r3, $r5;
        java.lang.Throwable r4, $r10;
        androidx.media3.common.util.Clock $r6, $r9;
        androidx.media3.common.util.HandlerWrapper $r7;
        java.lang.Runnable $r8;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r1 := @parameter1: android.os.Looper;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $r5 = new androidx.media3.common.util.ConditionVariable;

        specialinvoke $r5.<androidx.media3.common.util.ConditionVariable: void <init>()>();

        r3 = $r5;

        $r6 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.common.util.Clock getClock()>();

        $r7 = interfaceinvoke $r6.<androidx.media3.common.util.Clock: androidx.media3.common.util.HandlerWrapper createHandler(android.os.Looper,android.os.Handler$Callback)>(r1, null);

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.ExoPlayer,androidx.media3.common.util.ConditionVariable)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.Action$PlayUntilPosition: void lambda$doActionAndScheduleNextImpl$0(androidx.media3.exoplayer.ExoPlayer,androidx.media3.common.util.ConditionVariable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r7.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r8);

     label1:
        $r9 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.common.util.Clock getClock()>();

        interfaceinvoke $r9.<androidx.media3.common.util.Clock: void onThreadBlocked()>();

        virtualinvoke r3.<androidx.media3.common.util.ConditionVariable: void block()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void lambda$doActionAndScheduleNextImpl$0(androidx.media3.exoplayer.ExoPlayer, androidx.media3.common.util.ConditionVariable)
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        androidx.media3.common.util.ConditionVariable r1;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r1 := @parameter1: androidx.media3.common.util.ConditionVariable;

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void pause()>();

        virtualinvoke r1.<androidx.media3.common.util.ConditionVariable: boolean open()>();

        return;
    }

androidx.media3.test.utils.Action$Prepare
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$Prepare r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$Prepare;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "Prepare");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$Prepare r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$Prepare;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void prepare()>();

        return;
    }

androidx.media3.test.utils.Action$RemoveMediaItem
<androidx.media3.test.utils.Action$RemoveMediaItem: int index>
    public void <init>(java.lang.String, int)
    {
        androidx.media3.test.utils.Action$RemoveMediaItem r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.media3.test.utils.Action$RemoveMediaItem;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "RemoveMediaItem");

        r0.<androidx.media3.test.utils.Action$RemoveMediaItem: int index> = i0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$RemoveMediaItem r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        int $i0;

        r0 := @this: androidx.media3.test.utils.Action$RemoveMediaItem;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $i0 = r0.<androidx.media3.test.utils.Action$RemoveMediaItem: int index>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void removeMediaItem(int)>($i0);

        return;
    }

androidx.media3.test.utils.Action$RemoveMediaItems
<androidx.media3.test.utils.Action$RemoveMediaItems: int fromIndex>
<androidx.media3.test.utils.Action$RemoveMediaItems: int toIndex>
    public void <init>(java.lang.String, int, int)
    {
        androidx.media3.test.utils.Action$RemoveMediaItems r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.Action$RemoveMediaItems;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "RemoveMediaItem");

        r0.<androidx.media3.test.utils.Action$RemoveMediaItems: int fromIndex> = i0;

        r0.<androidx.media3.test.utils.Action$RemoveMediaItems: int toIndex> = i1;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$RemoveMediaItems r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        int $i0, $i1;

        r0 := @this: androidx.media3.test.utils.Action$RemoveMediaItems;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $i1 = r0.<androidx.media3.test.utils.Action$RemoveMediaItems: int fromIndex>;

        $i0 = r0.<androidx.media3.test.utils.Action$RemoveMediaItems: int toIndex>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void removeMediaItems(int,int)>($i1, $i0);

        return;
    }

androidx.media3.test.utils.Action$Seek
<androidx.media3.test.utils.Action$Seek: java.lang.Integer mediaItemIndex>
<androidx.media3.test.utils.Action$Seek: long positionMs>
<androidx.media3.test.utils.Action$Seek: boolean catchIllegalSeekException>
    public void <init>(java.lang.String, long)
    {
        androidx.media3.test.utils.Action$Seek r0;
        java.lang.String r1, $r5;
        long l0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: androidx.media3.test.utils.Action$Seek;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Seek:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r5);

        r0.<androidx.media3.test.utils.Action$Seek: java.lang.Integer mediaItemIndex> = null;

        r0.<androidx.media3.test.utils.Action$Seek: long positionMs> = l0;

        r0.<androidx.media3.test.utils.Action$Seek: boolean catchIllegalSeekException> = 0;

        return;
    }

    public void <init>(java.lang.String, int, long, boolean)
    {
        androidx.media3.test.utils.Action$Seek r0;
        java.lang.String r1, $r5;
        int i0;
        long l1;
        boolean z0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Integer $r6;

        r0 := @this: androidx.media3.test.utils.Action$Seek;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Seek:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<androidx.media3.test.utils.Action$Seek: java.lang.Integer mediaItemIndex> = $r6;

        r0.<androidx.media3.test.utils.Action$Seek: long positionMs> = l1;

        r0.<androidx.media3.test.utils.Action$Seek: boolean catchIllegalSeekException> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$Seek r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        java.lang.Throwable r4, $r7;
        java.lang.Integer $r5, $r6;
        int $i0;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$Seek;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

     label1:
        $r5 = r0.<androidx.media3.test.utils.Action$Seek: java.lang.Integer mediaItemIndex>;

        if $r5 != null goto label2;

        $l2 = r0.<androidx.media3.test.utils.Action$Seek: long positionMs>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void seekTo(long)>($l2);

        goto label3;

     label2:
        $r6 = r0.<androidx.media3.test.utils.Action$Seek: java.lang.Integer mediaItemIndex>;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l1 = r0.<androidx.media3.test.utils.Action$Seek: long positionMs>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void seekTo(int,long)>($i0, $l1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

        $z0 = r0.<androidx.media3.test.utils.Action$Seek: boolean catchIllegalSeekException>;

        if $z0 != 0 goto label5;

        throw r4;

     label5:
        return;

        catch androidx.media3.common.IllegalSeekPositionException from label1 to label3 with label4;
    }

androidx.media3.test.utils.Action$SendMessages
<androidx.media3.test.utils.Action$SendMessages: androidx.media3.exoplayer.PlayerMessage$Target target>
<androidx.media3.test.utils.Action$SendMessages: int mediaItemIndex>
<androidx.media3.test.utils.Action$SendMessages: long positionMs>
<androidx.media3.test.utils.Action$SendMessages: boolean deleteAfterDelivery>
    public void <init>(java.lang.String, androidx.media3.exoplayer.PlayerMessage$Target, long)
    {
        androidx.media3.test.utils.Action$SendMessages r0;
        java.lang.String r1;
        androidx.media3.exoplayer.PlayerMessage$Target r2;
        long l0;

        r0 := @this: androidx.media3.test.utils.Action$SendMessages;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.PlayerMessage$Target;

        l0 := @parameter2: long;

        specialinvoke r0.<androidx.media3.test.utils.Action$SendMessages: void <init>(java.lang.String,androidx.media3.exoplayer.PlayerMessage$Target,int,long,boolean)>(r1, r2, -1, l0, 1);

        return;
    }

    public void <init>(java.lang.String, androidx.media3.exoplayer.PlayerMessage$Target, int, long, boolean)
    {
        androidx.media3.test.utils.Action$SendMessages r0;
        java.lang.String r1;
        androidx.media3.exoplayer.PlayerMessage$Target r2;
        int i0;
        long l1;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.Action$SendMessages;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.PlayerMessage$Target;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SendMessages");

        r0.<androidx.media3.test.utils.Action$SendMessages: androidx.media3.exoplayer.PlayerMessage$Target target> = r2;

        r0.<androidx.media3.test.utils.Action$SendMessages: int mediaItemIndex> = i0;

        r0.<androidx.media3.test.utils.Action$SendMessages: long positionMs> = l1;

        r0.<androidx.media3.test.utils.Action$SendMessages: boolean deleteAfterDelivery> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SendMessages r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.PlayerMessage r4;
        androidx.media3.exoplayer.PlayerMessage$Target $r5, $r6, $r13;
        boolean $z0, $z1;
        int $i0, $i3;
        long $l1, $l2;
        android.os.Looper $r8;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget $r14;

        r0 := @this: androidx.media3.test.utils.Action$SendMessages;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r5 = r0.<androidx.media3.test.utils.Action$SendMessages: androidx.media3.exoplayer.PlayerMessage$Target target>;

        $z0 = $r5 instanceof androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        if $z0 == 0 goto label1;

        $r13 = r0.<androidx.media3.test.utils.Action$SendMessages: androidx.media3.exoplayer.PlayerMessage$Target target>;

        $r14 = (androidx.media3.test.utils.ActionSchedule$PlayerTarget) $r13;

        virtualinvoke $r14.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: void setPlayer(androidx.media3.exoplayer.ExoPlayer)>(r1);

     label1:
        $r6 = r0.<androidx.media3.test.utils.Action$SendMessages: androidx.media3.exoplayer.PlayerMessage$Target target>;

        r4 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r6);

        $i0 = r0.<androidx.media3.test.utils.Action$SendMessages: int mediaItemIndex>;

        if $i0 == -1 goto label2;

        $i3 = r0.<androidx.media3.test.utils.Action$SendMessages: int mediaItemIndex>;

        $l2 = r0.<androidx.media3.test.utils.Action$SendMessages: long positionMs>;

        virtualinvoke r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setPosition(int,long)>($i3, $l2);

        goto label3;

     label2:
        $l1 = r0.<androidx.media3.test.utils.Action$SendMessages: long positionMs>;

        virtualinvoke r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setPosition(long)>($l1);

     label3:
        $r8 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        virtualinvoke r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setLooper(android.os.Looper)>($r8);

        $z1 = r0.<androidx.media3.test.utils.Action$SendMessages: boolean deleteAfterDelivery>;

        virtualinvoke r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setDeleteAfterDelivery(boolean)>($z1);

        virtualinvoke r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        return;
    }

androidx.media3.test.utils.Action$SetAudioAttributes
<androidx.media3.test.utils.Action$SetAudioAttributes: androidx.media3.common.AudioAttributes audioAttributes>
<androidx.media3.test.utils.Action$SetAudioAttributes: boolean handleAudioFocus>
    public void <init>(java.lang.String, androidx.media3.common.AudioAttributes, boolean)
    {
        androidx.media3.test.utils.Action$SetAudioAttributes r0;
        java.lang.String r1;
        androidx.media3.common.AudioAttributes r2;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.Action$SetAudioAttributes;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.common.AudioAttributes;

        z0 := @parameter2: boolean;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SetAudioAttributes");

        r0.<androidx.media3.test.utils.Action$SetAudioAttributes: androidx.media3.common.AudioAttributes audioAttributes> = r2;

        r0.<androidx.media3.test.utils.Action$SetAudioAttributes: boolean handleAudioFocus> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetAudioAttributes r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        boolean $z0;
        androidx.media3.common.AudioAttributes $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetAudioAttributes;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$SetAudioAttributes: androidx.media3.common.AudioAttributes audioAttributes>;

        $z0 = r0.<androidx.media3.test.utils.Action$SetAudioAttributes: boolean handleAudioFocus>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setAudioAttributes(androidx.media3.common.AudioAttributes,boolean)>($r4, $z0);

        return;
    }

androidx.media3.test.utils.Action$SetMediaItems
<androidx.media3.test.utils.Action$SetMediaItems: int mediaItemIndex>
<androidx.media3.test.utils.Action$SetMediaItems: long positionMs>
<androidx.media3.test.utils.Action$SetMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources>
    public transient void <init>(java.lang.String, int, long, androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.Action$SetMediaItems r0;
        java.lang.String r1;
        int i0;
        long l1;
        androidx.media3.exoplayer.source.MediaSource[] r2;

        r0 := @this: androidx.media3.test.utils.Action$SetMediaItems;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 := @parameter3: androidx.media3.exoplayer.source.MediaSource[];

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SetMediaItems");

        r0.<androidx.media3.test.utils.Action$SetMediaItems: int mediaItemIndex> = i0;

        r0.<androidx.media3.test.utils.Action$SetMediaItems: long positionMs> = l1;

        r0.<androidx.media3.test.utils.Action$SetMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetMediaItems r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.source.MediaSource[] $r4;
        java.util.List $r5;
        long $l0;
        int $i1;

        r0 := @this: androidx.media3.test.utils.Action$SetMediaItems;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$SetMediaItems: androidx.media3.exoplayer.source.MediaSource[] mediaSources>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $i1 = r0.<androidx.media3.test.utils.Action$SetMediaItems: int mediaItemIndex>;

        $l0 = r0.<androidx.media3.test.utils.Action$SetMediaItems: long positionMs>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setMediaSources(java.util.List,int,long)>($r5, $i1, $l0);

        return;
    }

androidx.media3.test.utils.Action$SetMediaItemsResetPosition
<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: boolean resetPosition>
<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: androidx.media3.exoplayer.source.MediaSource[] mediaSources>
    public transient void <init>(java.lang.String, boolean, androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.Action$SetMediaItemsResetPosition r0;
        java.lang.String r1;
        boolean z0;
        androidx.media3.exoplayer.source.MediaSource[] r2;

        r0 := @this: androidx.media3.test.utils.Action$SetMediaItemsResetPosition;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.media3.exoplayer.source.MediaSource[];

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SetMediaItems");

        r0.<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: boolean resetPosition> = z0;

        r0.<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: androidx.media3.exoplayer.source.MediaSource[] mediaSources> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetMediaItemsResetPosition r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.source.MediaSource[] $r4;
        java.util.List $r5;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$SetMediaItemsResetPosition;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: androidx.media3.exoplayer.source.MediaSource[] mediaSources>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = r0.<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: boolean resetPosition>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setMediaSources(java.util.List,boolean)>($r5, $z0);

        return;
    }

androidx.media3.test.utils.Action$SetPlaybackParameters
<androidx.media3.test.utils.Action$SetPlaybackParameters: androidx.media3.common.PlaybackParameters playbackParameters>
    public void <init>(java.lang.String, androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.test.utils.Action$SetPlaybackParameters r0;
        java.lang.String r1, $r6;
        androidx.media3.common.PlaybackParameters r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: androidx.media3.test.utils.Action$SetPlaybackParameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.common.PlaybackParameters;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SetPlaybackParameters:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r6);

        r0.<androidx.media3.test.utils.Action$SetPlaybackParameters: androidx.media3.common.PlaybackParameters playbackParameters> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetPlaybackParameters r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.PlaybackParameters $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetPlaybackParameters;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$SetPlaybackParameters: androidx.media3.common.PlaybackParameters playbackParameters>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setPlaybackParameters(androidx.media3.common.PlaybackParameters)>($r4);

        return;
    }

androidx.media3.test.utils.Action$SetPlayWhenReady
<androidx.media3.test.utils.Action$SetPlayWhenReady: boolean playWhenReady>
    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.Action$SetPlayWhenReady r0;
        java.lang.String r1, $r4;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.Action$SetPlayWhenReady;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r4 = "Play";

        goto label2;

     label1:
        $r4 = "Pause";

     label2:
        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r4);

        r0.<androidx.media3.test.utils.Action$SetPlayWhenReady: boolean playWhenReady> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetPlayWhenReady r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$SetPlayWhenReady;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $z0 = r0.<androidx.media3.test.utils.Action$SetPlayWhenReady: boolean playWhenReady>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setPlayWhenReady(boolean)>($z0);

        return;
    }

androidx.media3.test.utils.Action$SetRendererDisabled
<androidx.media3.test.utils.Action$SetRendererDisabled: int rendererIndex>
<androidx.media3.test.utils.Action$SetRendererDisabled: boolean disabled>
    public void <init>(java.lang.String, int, boolean)
    {
        androidx.media3.test.utils.Action$SetRendererDisabled r0;
        java.lang.String r1, $r7;
        int i0;
        boolean z0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @this: androidx.media3.test.utils.Action$SetRendererDisabled;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SetRendererDisabled:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r7);

        r0.<androidx.media3.test.utils.Action$SetRendererDisabled: int rendererIndex> = i0;

        r0.<androidx.media3.test.utils.Action$SetRendererDisabled: boolean disabled> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetRendererDisabled r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder $r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.media3.test.utils.Action$SetRendererDisabled;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = virtualinvoke r2.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUponParameters()>();

        $i0 = r0.<androidx.media3.test.utils.Action$SetRendererDisabled: int rendererIndex>;

        $z0 = r0.<androidx.media3.test.utils.Action$SetRendererDisabled: boolean disabled>;

        $r5 = virtualinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setRendererDisabled(int,boolean)>($i0, $z0);

        virtualinvoke r2.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void setParameters(androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder)>($r5);

        return;
    }

androidx.media3.test.utils.Action$SetRepeatMode
<androidx.media3.test.utils.Action$SetRepeatMode: int repeatMode>
    public void <init>(java.lang.String, int)
    {
        androidx.media3.test.utils.Action$SetRepeatMode r0;
        java.lang.String r1, $r5;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetRepeatMode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SetRepeatMode:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r5);

        r0.<androidx.media3.test.utils.Action$SetRepeatMode: int repeatMode> = i0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetRepeatMode r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        int $i0;

        r0 := @this: androidx.media3.test.utils.Action$SetRepeatMode;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $i0 = r0.<androidx.media3.test.utils.Action$SetRepeatMode: int repeatMode>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setRepeatMode(int)>($i0);

        return;
    }

androidx.media3.test.utils.Action$SetShuffleModeEnabled
<androidx.media3.test.utils.Action$SetShuffleModeEnabled: boolean shuffleModeEnabled>
    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.Action$SetShuffleModeEnabled r0;
        java.lang.String r1, $r5;
        boolean z0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetShuffleModeEnabled;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SetShuffleModeEnabled:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r5);

        r0.<androidx.media3.test.utils.Action$SetShuffleModeEnabled: boolean shuffleModeEnabled> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetShuffleModeEnabled r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$SetShuffleModeEnabled;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $z0 = r0.<androidx.media3.test.utils.Action$SetShuffleModeEnabled: boolean shuffleModeEnabled>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setShuffleModeEnabled(boolean)>($z0);

        return;
    }

androidx.media3.test.utils.Action$SetShuffleOrder
<androidx.media3.test.utils.Action$SetShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder>
    public void <init>(java.lang.String, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.test.utils.Action$SetShuffleOrder r0;
        java.lang.String r1;
        androidx.media3.exoplayer.source.ShuffleOrder r2;

        r0 := @this: androidx.media3.test.utils.Action$SetShuffleOrder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.source.ShuffleOrder;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SetShufflerOrder");

        r0.<androidx.media3.test.utils.Action$SetShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetShuffleOrder r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.source.ShuffleOrder $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetShuffleOrder;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$SetShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder>;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setShuffleOrder(androidx.media3.exoplayer.source.ShuffleOrder)>($r4);

        return;
    }

androidx.media3.test.utils.Action$SetVideoSurface
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$SetVideoSurface r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$SetVideoSurface;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "SetVideoSurface");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$SetVideoSurface r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3, $r5;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.test.utils.Action$SetVideoSurface;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (android.view.Surface) $r4;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void setVideoSurface(android.view.Surface)>($r5);

        return;
    }

androidx.media3.test.utils.Action$Stop
<androidx.media3.test.utils.Action$Stop: java.lang.String STOP_ACTION_TAG>
<androidx.media3.test.utils.Action$Stop: java.lang.Boolean reset>
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$Stop r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$Stop;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "Stop");

        r0.<androidx.media3.test.utils.Action$Stop: java.lang.Boolean reset> = null;

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.Action$Stop r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.media3.test.utils.Action$Stop;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "Stop");

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<androidx.media3.test.utils.Action$Stop: java.lang.Boolean reset> = $r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$Stop r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        java.lang.Boolean $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$Stop;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = r0.<androidx.media3.test.utils.Action$Stop: java.lang.Boolean reset>;

        if $r4 != null goto label1;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void stop()>();

        goto label2;

     label1:
        $r5 = r0.<androidx.media3.test.utils.Action$Stop: java.lang.Boolean reset>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void stop(boolean)>($z0);

     label2:
        return;
    }

androidx.media3.test.utils.Action$ThrowPlaybackException
<androidx.media3.test.utils.Action$ThrowPlaybackException: androidx.media3.exoplayer.ExoPlaybackException exception>
    public void <init>(java.lang.String, androidx.media3.exoplayer.ExoPlaybackException)
    {
        androidx.media3.test.utils.Action$ThrowPlaybackException r0;
        java.lang.String r1, $r6;
        androidx.media3.exoplayer.ExoPlaybackException r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: androidx.media3.test.utils.Action$ThrowPlaybackException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlaybackException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ThrowPlaybackException:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, $r6);

        r0.<androidx.media3.test.utils.Action$ThrowPlaybackException: androidx.media3.exoplayer.ExoPlaybackException exception> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$ThrowPlaybackException r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.exoplayer.PlayerMessage$Target $r4;
        androidx.media3.exoplayer.PlayerMessage $r5;

        r0 := @this: androidx.media3.test.utils.Action$ThrowPlaybackException;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        $r4 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (androidx.media3.test.utils.Action$ThrowPlaybackException)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.Action$ThrowPlaybackException: void lambda$doActionImpl$0(int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r5 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r4);

        virtualinvoke $r5.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        return;
    }

    private void lambda$doActionImpl$0(int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.test.utils.Action$ThrowPlaybackException r0;
        int i0;
        java.lang.Object r1;
        androidx.media3.exoplayer.ExoPlaybackException $r2;

        r0 := @this: androidx.media3.test.utils.Action$ThrowPlaybackException;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.media3.test.utils.Action$ThrowPlaybackException: androidx.media3.exoplayer.ExoPlaybackException exception>;

        throw $r2;
    }

androidx.media3.test.utils.Action$WaitForIsLoading$1
<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.ExoPlayer val$player>
<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>
<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>
<androidx.media3.test.utils.Action$WaitForIsLoading$1: android.view.Surface val$surface>
<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.common.util.HandlerWrapper val$handler>
<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.Action$WaitForIsLoading this$0>
    void <init>(androidx.media3.test.utils.Action$WaitForIsLoading, androidx.media3.exoplayer.ExoPlayer, androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading$1 r0;
        androidx.media3.test.utils.Action$WaitForIsLoading r1;
        androidx.media3.exoplayer.ExoPlayer r2;
        androidx.media3.test.utils.ActionSchedule$ActionNode r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r4;
        android.view.Surface r5;
        androidx.media3.common.util.HandlerWrapper r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForIsLoading$1;

        r1 := @parameter0: androidx.media3.test.utils.Action$WaitForIsLoading;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r4 := @parameter3: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r5 := @parameter4: android.view.Surface;

        r6 := @parameter5: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.Action$WaitForIsLoading this$0> = r1;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.ExoPlayer val$player> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction> = r3;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector> = r4;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: android.view.Surface val$surface> = r5;

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.common.util.HandlerWrapper val$handler> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onIsLoadingChanged(boolean)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading$1 r0;
        boolean z0, $z1;
        androidx.media3.test.utils.Action$WaitForIsLoading $r1;
        androidx.media3.exoplayer.ExoPlayer $r2, $r6;
        androidx.media3.common.util.HandlerWrapper $r3;
        android.view.Surface $r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r5;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r7;

        r0 := @this: androidx.media3.test.utils.Action$WaitForIsLoading$1;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.Action$WaitForIsLoading this$0>;

        $z1 = staticinvoke <androidx.media3.test.utils.Action$WaitForIsLoading: boolean access$500(androidx.media3.test.utils.Action$WaitForIsLoading)>($r1);

        if $z1 != z0 goto label1;

        $r2 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r0);

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>;

        $r6 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        $r5 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>;

        $r4 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: android.view.Surface val$surface>;

        $r3 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading$1: androidx.media3.common.util.HandlerWrapper val$handler>;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>($r6, $r5, $r4, $r3);

     label1:
        return;
    }

androidx.media3.test.utils.Action$WaitForIsLoading
<androidx.media3.test.utils.Action$WaitForIsLoading: boolean targetIsLoading>
    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.Action$WaitForIsLoading;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForIsLoading");

        r0.<androidx.media3.test.utils.Action$WaitForIsLoading: boolean targetIsLoading> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForIsLoading;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        boolean $z0, $z1;
        androidx.media3.test.utils.Action$WaitForIsLoading$1 $r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForIsLoading;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $z0 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading: boolean targetIsLoading>;

        $z1 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: boolean isLoading()>();

        if $z0 != $z1 goto label2;

        virtualinvoke r5.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        goto label3;

     label2:
        $r6 = new androidx.media3.test.utils.Action$WaitForIsLoading$1;

        specialinvoke $r6.<androidx.media3.test.utils.Action$WaitForIsLoading$1: void <init>(androidx.media3.test.utils.Action$WaitForIsLoading,androidx.media3.exoplayer.ExoPlayer,androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r0, r1, r5, r2, r3, r4);

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>($r6);

     label3:
        return;
    }

    static boolean access$500(androidx.media3.test.utils.Action$WaitForIsLoading)
    {
        androidx.media3.test.utils.Action$WaitForIsLoading r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForIsLoading;

        $z0 = r0.<androidx.media3.test.utils.Action$WaitForIsLoading: boolean targetIsLoading>;

        return $z0;
    }

androidx.media3.test.utils.Action$WaitForMessage
<androidx.media3.test.utils.Action$WaitForMessage: androidx.media3.test.utils.ActionSchedule$PlayerTarget playerTarget>
    public void <init>(java.lang.String, androidx.media3.test.utils.ActionSchedule$PlayerTarget)
    {
        androidx.media3.test.utils.Action$WaitForMessage r0;
        java.lang.String r1;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r2;

        r0 := @this: androidx.media3.test.utils.Action$WaitForMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForMessage");

        r0.<androidx.media3.test.utils.Action$WaitForMessage: androidx.media3.test.utils.ActionSchedule$PlayerTarget playerTarget> = r2;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForMessage r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForMessage;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForMessage r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback r6;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget $r7;

        r0 := @this: androidx.media3.test.utils.Action$WaitForMessage;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        r6 = dynamicinvoke "onMessageArrived" <androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback (androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r5, r1, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.Action$WaitForMessage: void lambda$doActionAndScheduleNextImpl$0(androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>, methodtype: void __METHODTYPE__());

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForMessage: androidx.media3.test.utils.ActionSchedule$PlayerTarget playerTarget>;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: void setCallback(androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback)>(r6);

        return;
    }

    private static void lambda$doActionAndScheduleNextImpl$0(androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter2: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter3: android.view.Surface;

        r4 := @parameter4: androidx.media3.common.util.HandlerWrapper;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        return;
    }

androidx.media3.test.utils.Action$WaitForPendingPlayerCommands
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$WaitForPendingPlayerCommands r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPendingPlayerCommands;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForPendingPlayerCommands");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForPendingPlayerCommands r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPendingPlayerCommands;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForPendingPlayerCommands r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        androidx.media3.exoplayer.PlayerMessage$Target $r6;
        androidx.media3.exoplayer.PlayerMessage $r7, $r9;
        android.os.Looper $r8;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPendingPlayerCommands;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $r6 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r5, r1, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.Action$WaitForPendingPlayerCommands: void lambda$doActionAndScheduleNextImpl$0(androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r7 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r6);

        $r8 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        $r9 = virtualinvoke $r7.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setLooper(android.os.Looper)>($r8);

        virtualinvoke $r9.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        return;
    }

    private static void lambda$doActionAndScheduleNextImpl$0(androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        int i0;
        java.lang.Object r5;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter2: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter3: android.view.Surface;

        r4 := @parameter4: androidx.media3.common.util.HandlerWrapper;

        i0 := @parameter5: int;

        r5 := @parameter6: java.lang.Object;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        return;
    }

androidx.media3.test.utils.Action$WaitForPlaybackState$1
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.ExoPlayer val$player>
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: android.view.Surface val$surface>
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.common.util.HandlerWrapper val$handler>
<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.Action$WaitForPlaybackState this$0>
    void <init>(androidx.media3.test.utils.Action$WaitForPlaybackState, androidx.media3.exoplayer.ExoPlayer, androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState$1 r0;
        androidx.media3.test.utils.Action$WaitForPlaybackState r1;
        androidx.media3.exoplayer.ExoPlayer r2;
        androidx.media3.test.utils.ActionSchedule$ActionNode r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r4;
        android.view.Surface r5;
        androidx.media3.common.util.HandlerWrapper r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlaybackState$1;

        r1 := @parameter0: androidx.media3.test.utils.Action$WaitForPlaybackState;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r4 := @parameter3: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r5 := @parameter4: android.view.Surface;

        r6 := @parameter5: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.Action$WaitForPlaybackState this$0> = r1;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.ExoPlayer val$player> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction> = r3;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector> = r4;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: android.view.Surface val$surface> = r5;

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.common.util.HandlerWrapper val$handler> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPlaybackStateChanged(int)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState$1 r0;
        int i0, $i1;
        androidx.media3.test.utils.Action$WaitForPlaybackState $r1;
        androidx.media3.exoplayer.ExoPlayer $r2, $r6;
        androidx.media3.common.util.HandlerWrapper $r3;
        android.view.Surface $r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r5;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r7;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlaybackState$1;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.Action$WaitForPlaybackState this$0>;

        $i1 = staticinvoke <androidx.media3.test.utils.Action$WaitForPlaybackState: int access$400(androidx.media3.test.utils.Action$WaitForPlaybackState)>($r1);

        if $i1 != i0 goto label1;

        $r2 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r0);

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>;

        $r6 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        $r5 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>;

        $r4 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: android.view.Surface val$surface>;

        $r3 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: androidx.media3.common.util.HandlerWrapper val$handler>;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>($r6, $r5, $r4, $r3);

     label1:
        return;
    }

androidx.media3.test.utils.Action$WaitForPlaybackState
<androidx.media3.test.utils.Action$WaitForPlaybackState: int targetPlaybackState>
    public void <init>(java.lang.String, int)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlaybackState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForPlaybackState");

        r0.<androidx.media3.test.utils.Action$WaitForPlaybackState: int targetPlaybackState> = i0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlaybackState;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        int $i0, $i1;
        androidx.media3.test.utils.Action$WaitForPlaybackState$1 $r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlaybackState;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $i0 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState: int targetPlaybackState>;

        $i1 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: int getPlaybackState()>();

        if $i0 != $i1 goto label2;

        virtualinvoke r5.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        goto label3;

     label2:
        $r6 = new androidx.media3.test.utils.Action$WaitForPlaybackState$1;

        specialinvoke $r6.<androidx.media3.test.utils.Action$WaitForPlaybackState$1: void <init>(androidx.media3.test.utils.Action$WaitForPlaybackState,androidx.media3.exoplayer.ExoPlayer,androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r0, r1, r5, r2, r3, r4);

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>($r6);

     label3:
        return;
    }

    static int access$400(androidx.media3.test.utils.Action$WaitForPlaybackState)
    {
        androidx.media3.test.utils.Action$WaitForPlaybackState r0;
        int $i0;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForPlaybackState;

        $i0 = r0.<androidx.media3.test.utils.Action$WaitForPlaybackState: int targetPlaybackState>;

        return $i0;
    }

androidx.media3.test.utils.Action$WaitForPlayWhenReady$1
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.ExoPlayer val$player>
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: android.view.Surface val$surface>
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.common.util.HandlerWrapper val$handler>
<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.Action$WaitForPlayWhenReady this$0>
    void <init>(androidx.media3.test.utils.Action$WaitForPlayWhenReady, androidx.media3.exoplayer.ExoPlayer, androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady$1 r0;
        androidx.media3.test.utils.Action$WaitForPlayWhenReady r1;
        androidx.media3.exoplayer.ExoPlayer r2;
        androidx.media3.test.utils.ActionSchedule$ActionNode r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r4;
        android.view.Surface r5;
        androidx.media3.common.util.HandlerWrapper r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlayWhenReady$1;

        r1 := @parameter0: androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r4 := @parameter3: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r5 := @parameter4: android.view.Surface;

        r6 := @parameter5: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.Action$WaitForPlayWhenReady this$0> = r1;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.ExoPlayer val$player> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction> = r3;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector> = r4;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: android.view.Surface val$surface> = r5;

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.common.util.HandlerWrapper val$handler> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPlayWhenReadyChanged(boolean, int)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady$1 r0;
        boolean z0, $z1;
        int i0;
        androidx.media3.test.utils.Action$WaitForPlayWhenReady $r1;
        androidx.media3.exoplayer.ExoPlayer $r2, $r6;
        androidx.media3.common.util.HandlerWrapper $r3;
        android.view.Surface $r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r5;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r7;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlayWhenReady$1;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.Action$WaitForPlayWhenReady this$0>;

        $z1 = staticinvoke <androidx.media3.test.utils.Action$WaitForPlayWhenReady: boolean access$300(androidx.media3.test.utils.Action$WaitForPlayWhenReady)>($r1);

        if $z1 != z0 goto label1;

        $r2 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r0);

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>;

        $r6 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        $r5 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>;

        $r4 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: android.view.Surface val$surface>;

        $r3 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: androidx.media3.common.util.HandlerWrapper val$handler>;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>($r6, $r5, $r4, $r3);

     label1:
        return;
    }

androidx.media3.test.utils.Action$WaitForPlayWhenReady
<androidx.media3.test.utils.Action$WaitForPlayWhenReady: boolean targetPlayWhenReady>
    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForPlayWhenReady");

        r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady: boolean targetPlayWhenReady> = z0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        boolean $z0, $z1;
        androidx.media3.test.utils.Action$WaitForPlayWhenReady$1 $r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $z0 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady: boolean targetPlayWhenReady>;

        $z1 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: boolean getPlayWhenReady()>();

        if $z0 != $z1 goto label2;

        virtualinvoke r5.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        goto label3;

     label2:
        $r6 = new androidx.media3.test.utils.Action$WaitForPlayWhenReady$1;

        specialinvoke $r6.<androidx.media3.test.utils.Action$WaitForPlayWhenReady$1: void <init>(androidx.media3.test.utils.Action$WaitForPlayWhenReady,androidx.media3.exoplayer.ExoPlayer,androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r0, r1, r5, r2, r3, r4);

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>($r6);

     label3:
        return;
    }

    static boolean access$300(androidx.media3.test.utils.Action$WaitForPlayWhenReady)
    {
        androidx.media3.test.utils.Action$WaitForPlayWhenReady r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        $z0 = r0.<androidx.media3.test.utils.Action$WaitForPlayWhenReady: boolean targetPlayWhenReady>;

        return $z0;
    }

androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1
<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.ExoPlayer val$player>
<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>
<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>
<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: android.view.Surface val$surface>
<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.common.util.HandlerWrapper val$handler>
    void <init>(androidx.media3.test.utils.Action$WaitForPositionDiscontinuity, androidx.media3.exoplayer.ExoPlayer, androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1 r0;
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity r1;
        androidx.media3.exoplayer.ExoPlayer r2;
        androidx.media3.test.utils.ActionSchedule$ActionNode r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r4;
        android.view.Surface r5;
        androidx.media3.common.util.HandlerWrapper r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1;

        r1 := @parameter0: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r4 := @parameter3: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r5 := @parameter4: android.view.Surface;

        r6 := @parameter5: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.ExoPlayer val$player> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction> = r3;

        r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector> = r4;

        r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: android.view.Surface val$surface> = r5;

        r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.common.util.HandlerWrapper val$handler> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPositionDiscontinuity(androidx.media3.common.Player$PositionInfo, androidx.media3.common.Player$PositionInfo, int)
    {
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1 r0;
        androidx.media3.common.Player$PositionInfo r1, r2;
        int i0;
        androidx.media3.exoplayer.ExoPlayer $r3, $r7;
        androidx.media3.common.util.HandlerWrapper $r4;
        android.view.Surface $r5;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r6;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r8;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1;

        r1 := @parameter0: androidx.media3.common.Player$PositionInfo;

        r2 := @parameter1: androidx.media3.common.Player$PositionInfo;

        i0 := @parameter2: int;

        $r3 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r0);

        $r8 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>;

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        $r6 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>;

        $r5 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: android.view.Surface val$surface>;

        $r4 = r0.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: androidx.media3.common.util.HandlerWrapper val$handler>;

        virtualinvoke $r8.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>($r7, $r6, $r5, $r4);

        return;
    }

androidx.media3.test.utils.Action$WaitForPositionDiscontinuity
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForPositionDiscontinuity");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1 $r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForPositionDiscontinuity;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $r6 = new androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1;

        specialinvoke $r6.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity$1: void <init>(androidx.media3.test.utils.Action$WaitForPositionDiscontinuity,androidx.media3.exoplayer.ExoPlayer,androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r0, r1, r5, r2, r3, r4);

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>($r6);

        return;
    }

androidx.media3.test.utils.Action$WaitForTimelineChanged$1
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.ExoPlayer val$player>
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: android.view.Surface val$surface>
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.common.util.HandlerWrapper val$handler>
<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0>
    void <init>(androidx.media3.test.utils.Action$WaitForTimelineChanged, androidx.media3.exoplayer.ExoPlayer, androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged$1 r0;
        androidx.media3.test.utils.Action$WaitForTimelineChanged r1;
        androidx.media3.exoplayer.ExoPlayer r2;
        androidx.media3.test.utils.ActionSchedule$ActionNode r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r4;
        android.view.Surface r5;
        androidx.media3.common.util.HandlerWrapper r6;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged$1;

        r1 := @parameter0: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        r2 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r4 := @parameter3: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r5 := @parameter4: android.view.Surface;

        r6 := @parameter5: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0> = r1;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.ExoPlayer val$player> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction> = r3;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector> = r4;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: android.view.Surface val$surface> = r5;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.common.util.HandlerWrapper val$handler> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onTimelineChanged(androidx.media3.common.Timeline, int)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged$1 r0;
        androidx.media3.common.Timeline r1, $r3, $r13;
        int i0, $i1;
        androidx.media3.test.utils.Action$WaitForTimelineChanged $r2, $r4, $r11, $r12;
        boolean $z0, $z1;
        androidx.media3.exoplayer.ExoPlayer $r5, $r9;
        androidx.media3.common.util.HandlerWrapper $r6;
        android.view.Surface $r7;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r8;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r10;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged$1;

        r1 := @parameter0: androidx.media3.common.Timeline;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0>;

        $r3 = staticinvoke <androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline access$000(androidx.media3.test.utils.Action$WaitForTimelineChanged)>($r2);

        if $r3 == null goto label1;

        $r12 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0>;

        $r13 = staticinvoke <androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline access$000(androidx.media3.test.utils.Action$WaitForTimelineChanged)>($r12);

        $z1 = staticinvoke <androidx.media3.test.utils.TestUtil: boolean timelinesAreSame(androidx.media3.common.Timeline,androidx.media3.common.Timeline)>(r1, $r13);

        if $z1 == 0 goto label3;

     label1:
        $r4 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0>;

        $z0 = staticinvoke <androidx.media3.test.utils.Action$WaitForTimelineChanged: boolean access$100(androidx.media3.test.utils.Action$WaitForTimelineChanged)>($r4);

        if $z0 != 0 goto label2;

        $r11 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.Action$WaitForTimelineChanged this$0>;

        $i1 = staticinvoke <androidx.media3.test.utils.Action$WaitForTimelineChanged: int access$200(androidx.media3.test.utils.Action$WaitForTimelineChanged)>($r11);

        if $i1 != i0 goto label3;

     label2:
        $r5 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        interfaceinvoke $r5.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r0);

        $r10 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.test.utils.ActionSchedule$ActionNode val$nextAction>;

        $r9 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.ExoPlayer val$player>;

        $r8 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector val$trackSelector>;

        $r7 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: android.view.Surface val$surface>;

        $r6 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: androidx.media3.common.util.HandlerWrapper val$handler>;

        virtualinvoke $r10.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>($r9, $r8, $r7, $r6);

     label3:
        return;
    }

androidx.media3.test.utils.Action$WaitForTimelineChanged
<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline>
<androidx.media3.test.utils.Action$WaitForTimelineChanged: boolean ignoreExpectedReason>
<androidx.media3.test.utils.Action$WaitForTimelineChanged: int expectedReason>
    public void <init>(java.lang.String, androidx.media3.common.Timeline, int)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        java.lang.String r1;
        androidx.media3.common.Timeline r2;
        int i0;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.common.Timeline;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForTimelineChanged");

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline> = r2;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: boolean ignoreExpectedReason> = 0;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: int expectedReason> = i0;

        return;
    }

    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "WaitForTimelineChanged");

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline> = null;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: boolean ignoreExpectedReason> = 1;

        r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: int expectedReason> = 0;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        androidx.media3.test.utils.Action$WaitForTimelineChanged$1 r6, $r7;
        androidx.media3.common.Timeline $r8, $r9, $r10;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        return;

     label1:
        $r7 = new androidx.media3.test.utils.Action$WaitForTimelineChanged$1;

        specialinvoke $r7.<androidx.media3.test.utils.Action$WaitForTimelineChanged$1: void <init>(androidx.media3.test.utils.Action$WaitForTimelineChanged,androidx.media3.exoplayer.ExoPlayer,androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r0, r1, r5, r2, r3, r4);

        r6 = $r7;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>(r6);

        $r8 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline>;

        if $r8 == null goto label2;

        $r9 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.common.Timeline getCurrentTimeline()>();

        $r10 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline>;

        $z0 = staticinvoke <androidx.media3.test.utils.TestUtil: boolean timelinesAreSame(androidx.media3.common.Timeline,androidx.media3.common.Timeline)>($r9, $r10);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r6);

        virtualinvoke r5.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

     label2:
        return;
    }

    static androidx.media3.common.Timeline access$000(androidx.media3.test.utils.Action$WaitForTimelineChanged)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        androidx.media3.common.Timeline $r1;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        $r1 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: androidx.media3.common.Timeline expectedTimeline>;

        return $r1;
    }

    static boolean access$100(androidx.media3.test.utils.Action$WaitForTimelineChanged)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        $z0 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: boolean ignoreExpectedReason>;

        return $z0;
    }

    static int access$200(androidx.media3.test.utils.Action$WaitForTimelineChanged)
    {
        androidx.media3.test.utils.Action$WaitForTimelineChanged r0;
        int $i0;

        r0 := @parameter0: androidx.media3.test.utils.Action$WaitForTimelineChanged;

        $i0 = r0.<androidx.media3.test.utils.Action$WaitForTimelineChanged: int expectedReason>;

        return $i0;
    }

