androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>
    void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl> = r1;

        return;
    }

    com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat, java.util.List)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        android.hardware.camera2.CameraDevice r1;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r2;
        java.util.List r3;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        r3 := @parameter2: java.util.List;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>;

        $r5 = interfaceinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List)>(r1, r2, r3);

        return $r5;
    }

    androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat createSessionConfigurationCompat(int, java.util.List, androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        int i0;
        java.util.List r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl $r3;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>;

        $r4 = interfaceinvoke $r3.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat createSessionConfigurationCompat(int,java.util.List,androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)>(i0, r1, r2);

        return $r4;
    }

    com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List, long)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        java.util.List r1;
        long l0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        r1 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>;

        $r3 = interfaceinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List,long)>(r1, l0);

        return $r3;
    }

    boolean stop()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl $r1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>;

        $z0 = interfaceinvoke $r1.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: boolean stop()>();

        return $z0;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl $r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl mImpl>;

        $r2 = interfaceinvoke $r1.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: java.util.concurrent.Executor getExecutor()>();

        return $r2;
    }

androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: android.os.Handler mCompatHandler>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mCameraQuirks>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mDeviceQuirks>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: boolean mQuirkExist>
    void <init>(java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService, android.os.Handler, androidx.camera.camera2.internal.CaptureSessionRepository, androidx.camera.core.impl.Quirks, androidx.camera.core.impl.Quirks)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder r0;
        java.util.concurrent.Executor r1;
        java.util.concurrent.ScheduledExecutorService r2;
        android.os.Handler r3;
        androidx.camera.camera2.internal.CaptureSessionRepository r4;
        androidx.camera.core.impl.Quirks r5, r6, $r8, $r9, $r11, $r13;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface $r7;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r10;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession $r12;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.camera.camera2.internal.CaptureSessionRepository;

        r5 := @parameter4: androidx.camera.core.impl.Quirks;

        r6 := @parameter5: androidx.camera.core.impl.Quirks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.Executor mExecutor> = r1;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = r2;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: android.os.Handler mCompatHandler> = r3;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository> = r4;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mCameraQuirks> = r5;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mDeviceQuirks> = r6;

        $r7 = new androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface;

        $r9 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mCameraQuirks>;

        $r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mDeviceQuirks>;

        specialinvoke $r7.<androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface: void <init>(androidx.camera.core.impl.Quirks,androidx.camera.core.impl.Quirks)>($r9, $r8);

        $z0 = virtualinvoke $r7.<androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface: boolean shouldForceClose()>();

        if $z0 != 0 goto label1;

        $r10 = new androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart;

        $r11 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mCameraQuirks>;

        specialinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: void <init>(androidx.camera.core.impl.Quirks)>($r11);

        $z1 = virtualinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: boolean shouldWaitRepeatingSubmit()>();

        if $z1 != 0 goto label1;

        $r12 = new androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        $r13 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mDeviceQuirks>;

        specialinvoke $r12.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: void <init>(androidx.camera.core.impl.Quirks)>($r13);

        $z2 = virtualinvoke $r12.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: boolean shouldForceClose()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: boolean mQuirkExist> = $z3;

        return;
    }

    androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener build()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder r0;
        boolean $z0;
        android.os.Handler $r2, $r6;
        java.util.concurrent.ScheduledExecutorService $r3, $r7;
        java.util.concurrent.Executor $r4, $r8;
        androidx.camera.camera2.internal.CaptureSessionRepository $r5, $r9;
        androidx.camera.core.impl.Quirks $r10, $r11;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r12, r14;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r13;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r15;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder;

        r15 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        $z0 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: boolean mQuirkExist>;

        if $z0 == 0 goto label1;

        r13 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        $r12 = r13;

        $r11 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mCameraQuirks>;

        $r10 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.core.impl.Quirks mDeviceQuirks>;

        $r9 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.Executor mExecutor>;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: android.os.Handler mCompatHandler>;

        specialinvoke r13.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void <init>(androidx.camera.core.impl.Quirks,androidx.camera.core.impl.Quirks,androidx.camera.camera2.internal.CaptureSessionRepository,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService,android.os.Handler)>($r11, $r10, $r9, $r8, $r7, $r6);

        goto label2;

     label1:
        r14 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r12 = r14;

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.Executor mExecutor>;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: android.os.Handler mCompatHandler>;

        specialinvoke r14.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void <init>(androidx.camera.camera2.internal.CaptureSessionRepository,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService,android.os.Handler)>($r5, $r4, $r3, $r2);

     label2:
        specialinvoke r15.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl)>($r12);

        return r15;
    }

androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List)>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat createSessionConfigurationCompat(int,java.util.List,androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: java.util.concurrent.Executor getExecutor()>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List,long)>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$OpenerImpl: boolean stop()>
