androidx.compose.runtime.SlotWriter
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotWriter$Companion Companion>
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>
<androidx.compose.runtime.SlotWriter: int[] groups>
<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>
<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>
<androidx.compose.runtime.SlotWriter: int groupGapStart>
<androidx.compose.runtime.SlotWriter: int groupGapLen>
<androidx.compose.runtime.SlotWriter: int currentGroupEnd>
<androidx.compose.runtime.SlotWriter: int currentSlot>
<androidx.compose.runtime.SlotWriter: int currentSlotEnd>
<androidx.compose.runtime.SlotWriter: int slotsGapStart>
<androidx.compose.runtime.SlotWriter: int slotsGapLen>
<androidx.compose.runtime.SlotWriter: int slotsGapOwner>
<androidx.compose.runtime.SlotWriter: int insertCount>
<androidx.compose.runtime.SlotWriter: int nodeCount>
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack endStack>
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack>
<androidx.compose.runtime.SlotWriter: int currentGroup>
<androidx.compose.runtime.SlotWriter: int parent>
<androidx.compose.runtime.SlotWriter: boolean closed>
<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.PrioritySet pendingRecalculateMarks>
    public void <init>(androidx.compose.runtime.SlotTable)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.SlotTable r1, $r2, $r4, $r6, $r8, $r10, $r11, $r12, $r14, $r15;
        int[] $r3, $r9;
        java.lang.Object[] $r5, $r13;
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        androidx.compose.runtime.IntStack $r16, $r17, $r18;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table> = r1;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SlotTable: int[] getGroups()>();

        r0.<androidx.compose.runtime.SlotWriter: int[] groups> = $r3;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.SlotTable: java.lang.Object[] getSlots()>();

        r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots> = $r5;

        $r6 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.SlotTable: java.util.ArrayList getAnchors$runtime_release()>();

        r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors> = $r7;

        $r8 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i0 = virtualinvoke $r8.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        r0.<androidx.compose.runtime.SlotWriter: int groupGapStart> = $i0;

        $r9 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = lengthof $r9;

        $i2 = $i1 / 5;

        $r10 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i3 = virtualinvoke $r10.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        $i4 = $i2 - $i3;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapLen> = $i4;

        $r11 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i5 = virtualinvoke $r11.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = $i5;

        $r12 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i6 = virtualinvoke $r12.<androidx.compose.runtime.SlotTable: int getSlotsSize()>();

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart> = $i6;

        $r13 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i7 = lengthof $r13;

        $r14 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i8 = virtualinvoke $r14.<androidx.compose.runtime.SlotTable: int getSlotsSize()>();

        $i9 = $i7 - $i8;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen> = $i9;

        $r15 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i10 = virtualinvoke $r15.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = $i10;

        $r16 = new androidx.compose.runtime.IntStack;

        specialinvoke $r16.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack> = $r16;

        $r17 = new androidx.compose.runtime.IntStack;

        specialinvoke $r17.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack endStack> = $r17;

        $r18 = new androidx.compose.runtime.IntStack;

        specialinvoke $r18.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack> = $r18;

        r0.<androidx.compose.runtime.SlotWriter: int parent> = -1;

        return;
    }

    public final androidx.compose.runtime.SlotTable getTable$runtime_release()
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.SlotTable $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        return $r1;
    }

    public final int getCurrentGroup()
    {
        androidx.compose.runtime.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        return $i0;
    }

    public final boolean isGroupEnd()
    {
        androidx.compose.runtime.SlotWriter r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isNode()
    {
        androidx.compose.runtime.SlotWriter r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if $i1 >= $i0 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i2);

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r1, $i3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean isNode(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r1, $i1);

        return $z0;
    }

    public final int nodeCount(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r1, $i1);

        return $i2;
    }

    public final int groupKey(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$key(int[],int)>($r1, $i1);

        return $i2;
    }

    public final java.lang.Object groupObjectKey(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2;
        int[] $r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasObjectKey(int[],int)>($r1, i1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$objectKeyIndex(int[],int)>($r2, i1);

        $r4 = $r3[$i2];

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public final int groupSize(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r1, $i1);

        return $i2;
    }

    public final java.lang.Object groupAux(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2;
        int[] $r1, $r3;
        boolean $z0;
        androidx.compose.runtime.Composer$Companion $r2;
        java.lang.Object[] $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasAux(int[],int)>($r1, i1);

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int auxIndex(int[],int)>($r3, i1);

        $r5 = $r4[$i2];

        goto label2;

     label1:
        $r2 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r2.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

     label2:
        return $r5;
    }

    public final boolean indexInParent(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if i0 <= $i1 goto label1;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if i0 < $i3 goto label2;

     label1:
        $i2 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if $i2 != 0 goto label3;

        if i0 != 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public final boolean indexInCurrentGroup(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean indexInGroup(int,int)>(i0, $i1);

        return $z0;
    }

    public final boolean indexInGroup(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        androidx.compose.runtime.IntStack $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if i1 != $i4 goto label1;

        $i12 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        goto label4;

     label1:
        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        $i5 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: int peekOr(int)>(0);

        if i1 <= $i5 goto label2;

        $i11 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i1);

        $i12 = i1 + $i11;

        goto label4;

     label2:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        i3 = virtualinvoke $r2.<androidx.compose.runtime.IntStack: int indexOf(int)>(i1);

        if i3 >= 0 goto label3;

        $i10 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i1);

        $i12 = i1 + $i10;

        goto label4;

     label3:
        $i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        $i7 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i8 = $i6 - $i7;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack endStack>;

        $i9 = virtualinvoke $r3.<androidx.compose.runtime.IntStack: int peek(int)>(i3);

        $i12 = $i8 - $i9;

     label4:
        i2 = $i12;

        if i0 <= i1 goto label5;

        if i0 >= i2 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public final java.lang.Object node(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r1, i1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int nodeIndex(int[],int)>($r2, i1);

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i2);

        $r4 = $r3[$i3];

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public final java.lang.Object node(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotWriter)>(r0);

        $r2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: java.lang.Object node(int)>($i0);

        return $r2;
    }

    public final int getParent()
    {
        androidx.compose.runtime.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        return $i0;
    }

    public final int parent(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r1, i0);

        return $i1;
    }

    public final int parent(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        boolean $z0;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $z0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: boolean getValid()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r1);

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r2, $i0);

        goto label2;

     label1:
        $i1 = -1;

     label2:
        return $i1;
    }

    public final boolean getClosed()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $z0 = r0.<androidx.compose.runtime.SlotWriter: boolean closed>;

        return $z0;
    }

    public final void close()
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.IntStack $r1;
        boolean $z0;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r3, $r6;
        int[] $r4;
        androidx.compose.runtime.SlotTable $r5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r0.<androidx.compose.runtime.SlotWriter: boolean closed> = 1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveGroupGapTo(int)>($i2);

        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i4 = lengthof $r6;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $i6 = $i4 - $i3;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveSlotGapTo(int,int)>($i6, $i5);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void recalculateMarks()>();

     label1:
        $r5 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        virtualinvoke $r5.<androidx.compose.runtime.SlotTable: void close$runtime_release(androidx.compose.runtime.SlotWriter,int[],int,java.lang.Object[],int,java.util.ArrayList)>(r0, $r4, $i1, $r3, $i0, $r2);

        return;
    }

    public final void reset()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean z0, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r4;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 != 0 goto label3;

        $r4 = "Cannot reset when inserting";

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r1);

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;

     label3:
        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void recalculateMarks()>();

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = 0;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i3 = $i1 - $i2;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = $i3;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = 0;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = 0;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = 0;

        return;
    }

    public final java.lang.Object update(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: java.lang.Object skip()>();

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void set(java.lang.Object)>(r1);

        return r2;
    }

    public final void updateAux(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        boolean z0;
        int[] $r2, $r3;
        java.lang.Object[] $r4;
        java.lang.String $r5, $r8;
        kotlin.KotlinNothingValueException $r7;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i1);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasAux(int[],int)>($r2, i0);

        if z0 != 0 goto label1;

        $r8 = "Updating the data of a group that was not created with a data slot";

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label1:
        $r4 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int auxIndex(int[],int)>($r3, i0);

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i2);

        $r4[$i3] = r1;

        return;
    }

    public final void insertAux(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] $r2, $r3, $r21;
        boolean $z0, $z1, z2, $z5, $z8;
        java.lang.Object[] $r4, $r6, $r7, $r9, $r22;
        java.lang.String $r11, $r12, $r15, $r18, $r19, $r20;
        kotlin.KotlinNothingValueException r23, r24;
        java.lang.IllegalStateException r25;
        java.lang.Throwable r26;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z2 = $z1;

        if z2 != 0 goto label03;

        $r18 = "Cannot insert auxiliary data when not inserting";

        $r15 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r15);

        r23 = new kotlin.KotlinNothingValueException;

        specialinvoke r23.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r23;

     label03:
        i6 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $i7 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i6);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasAux(int[],int)>($r2, $i7);

        if $z0 != 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        if $z5 != 0 goto label06;

        $r19 = "Group already has auxiliary data";

        $r12 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r12);

        r24 = new kotlin.KotlinNothingValueException;

        specialinvoke r24.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r24;

     label06:
        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertSlots(int,int)>(1, i6);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i8 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int auxIndex(int[],int)>($r3, $i7);

        $i9 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i8);

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        if $i1 <= $i8 goto label11;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i10 = $i2 - $i8;

        if $i10 >= 3 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        if $z8 != 0 goto label09;

        $r20 = "Moving more than two slot not supported";

        r25 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        r26 = (java.lang.Throwable) r25;

        throw r26;

     label09:
        if $i10 <= 1 goto label10;

        $r9 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i5 = $i9 + 2;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i4 = $i9 + 1;

        $r8 = $r7[$i4];

        $r9[$i5] = $r8;

     label10:
        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i3 = $i9 + 1;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r5 = $r4[$i9];

        $r6[$i3] = $r5;

     label11:
        $r21 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$addAux(int[],int)>($r21, $i7);

        $r22 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r22[$i9] = r1;

        $i11 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i12 = $i11 + 1;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i12;

        return;
    }

    public final void updateNode(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateNodeOfGroup(int,java.lang.Object)>($i0, r1);

        return;
    }

    public final void updateNode(androidx.compose.runtime.Anchor, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        java.lang.Object r2;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotWriter)>(r0);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateNodeOfGroup(int,java.lang.Object)>($i0, r2);

        return;
    }

    public final void updateParentNode(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateNodeOfGroup(int,java.lang.Object)>($i0, r1);

        return;
    }

    public final void set(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1;
        boolean z0, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r6;
        kotlin.KotlinNothingValueException $r5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd>;

        if $i1 > $i0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 != 0 goto label3;

        $r6 = "Writing to an invalid slot";

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i3 = $i2 - 1;

        $i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i3);

        $r2[$i4] = r1;

        return;
    }

    public final java.lang.Object set(int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object r1, $r15;
        java.lang.String r2, $r12;
        int[] $r3, $r4;
        java.lang.Object[] $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        kotlin.KotlinNothingValueException $r14;
        boolean $z1, z2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i5);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int slotIndex(int[],int)>($r3, i1);

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i7 = $i6 + 1;

        $i8 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i7);

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r4, $i8);

        i4 = i2 + i0;

        if i4 < i2 goto label1;

        if i4 >= i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        if z2 != 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write to an invalid slot index ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for group ");

        $i9 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r12);

        $r14 = new kotlin.KotlinNothingValueException;

        specialinvoke $r14.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r14;

     label3:
        i10 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>(i4);

        $r5 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r15 = $r5[i10];

        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r6[i10] = r1;

        return $r15;
    }

    public final java.lang.Object skip()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i1 <= 0 goto label1;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertSlots(int,int)>(1, $i4);

     label1:
        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i2 = i0 + 1;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i2;

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>(i0);

        $r2 = $r1[$i3];

        return $r2;
    }

    public final java.lang.Object slot(androidx.compose.runtime.Anchor, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r1);

        $r2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: java.lang.Object slot(int,int)>($i1, i0);

        return $r2;
    }

    public final java.lang.Object slot(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;
        int[] $r1, $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4, $r6;
        androidx.compose.runtime.Composer$Companion $r5;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int slotIndex(int[],int)>($r1, i2);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i7 = i0 + 1;

        $i8 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i7);

        i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r2, $i8);

        i5 = i3 + i1;

        if i3 > i5 goto label2;

        if i5 >= i4 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r5 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        return $r6;

     label4:
        i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>(i5);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r4 = $r3[i6];

        return $r4;
    }

    public final void advanceBy(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        java.lang.String r1, $r9, $r13, $r14, $r17, $r18;
        int[] $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, r21;
        boolean $z1, z2, $z5, $z7;
        kotlin.KotlinNothingValueException r19, r22;
        java.lang.IllegalStateException r20;
        java.lang.Throwable r23;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z2 = $z1;

        if z2 != 0 goto label03;

        $r17 = "Cannot seek backwards";

        $r14 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r14);

        r19 = new kotlin.KotlinNothingValueException;

        specialinvoke r19.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r19;

     label03:
        $i1 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i1 > 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        if $z5 != 0 goto label06;

        $r18 = "Cannot call seek() while inserting";

        r20 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        r23 = (java.lang.Throwable) r20;

        throw r23;

     label06:
        if i0 != 0 goto label07;

        return;

     label07:
        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i8 = $i2 + i0;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if i8 < $i3 goto label08;

        $i7 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if i8 > $i7 goto label08;

        $z7 = 1;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        if $z7 != 0 goto label10;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot seek outside the current group (");

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r9);

        r22 = new kotlin.KotlinNothingValueException;

        specialinvoke r22.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r22;

     label10:
        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i8;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i8);

        $i9 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r2, $i4);

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i9;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i9;

        return;
    }

    public final void seek(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotWriter)>(r0);

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i2 = $i0 - $i1;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void advanceBy(int)>($i2);

        return;
    }

    public final void skipToGroupEnd()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i0;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, $i1);

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i2;

        return;
    }

    public final void beginInsert()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.SlotWriter: int insertCount> = $i1;

        if i0 != 0 goto label1;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void saveCurrentGroupEnd()>();

     label1:
        return;
    }

    public final void endInsert()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean z0, $z1, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.compose.runtime.IntStack $r1, $r2;
        java.lang.String $r3, $r7, $r8, $r9;
        java.lang.IllegalStateException r10;
        kotlin.KotlinNothingValueException r11;
        java.lang.Throwable r12;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r8 = "Unbalanced begin/end insert";

        r10 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        r12 = (java.lang.Throwable) r10;

        throw r12;

     label3:
        $i1 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        $i2 = $i1 + -1;

        r0.<androidx.compose.runtime.SlotWriter: int insertCount> = $i2;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i3 != 0 goto label7;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack>;

        $i4 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: int getSize()>();

        $r2 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        $i5 = virtualinvoke $r2.<androidx.compose.runtime.IntStack: int getSize()>();

        if $i4 != $i5 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z0 = $z3;

        if z0 != 0 goto label6;

        $r9 = "startGroup/endGroup mismatch while inserting";

        $r3 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        r11 = new kotlin.KotlinNothingValueException;

        specialinvoke r11.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r11;

     label6:
        specialinvoke r0.<androidx.compose.runtime.SlotWriter: int restoreCurrentGroupEnd()>();

     label7:
        return;
    }

    public final void startGroup()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean z0, $z2;
        int $i0;
        androidx.compose.runtime.Composer$Companion $r1, $r3;
        java.lang.Object $r2, $r4;
        java.lang.String $r5, $r8;
        kotlin.KotlinNothingValueException $r7;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 != 0 goto label3;

        $r8 = "Key must be supplied when inserting";

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label3:
        $r1 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $r3 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(0, $r2, 0, $r4);

        return;
    }

    public final void startGroup(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0;
        androidx.compose.runtime.Composer$Companion $r1, $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $r3 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(i0, $r2, 0, $r4);

        return;
    }

    public final void startGroup(int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0;
        java.lang.Object r1, $r3;
        androidx.compose.runtime.Composer$Companion $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, $r3);

        return;
    }

    public final void startNode(java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1, $r3;
        androidx.compose.runtime.Composer$Companion $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $r2 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(125, r1, 1, $r3);

        return;
    }

    public final void startNode(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(125, r1, 1, r2);

        return;
    }

    public final void startData(int, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, r2);

        return;
    }

    public final void startData(int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0;
        java.lang.Object r1, $r3;
        androidx.compose.runtime.Composer$Companion $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object,boolean,java.lang.Object)>(i0, $r3, 0, r1);

        return;
    }

    private final void startGroup(int, java.lang.Object, boolean, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, i16, i17, $i18, i19, i20, i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.lang.Object r1, r2, $r6, $r8, $r10;
        boolean z0, z1, z2, $z3, $z4, $z5, z6, $z7;
        androidx.compose.runtime.IntStack $r3, $r4;
        androidx.compose.runtime.Composer$Companion $r5, $r7, $r9;
        int[] $r12, $r14, $r15, $r16, $r17;
        byte $b13, $b14, $b15;
        java.lang.Object[] r13;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i2 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z1 = $z4;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack>;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        virtualinvoke $r3.<androidx.compose.runtime.IntStack: void push(int)>($i3);

        if z1 == 0 goto label17;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertGroups(int)>(1);

        i8 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i9 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i8);

        $r7 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r8 = virtualinvoke $r7.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        if r1 == $r8 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z6 = $z5;

        if z0 != 0 goto label05;

        $r9 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r10 = virtualinvoke $r9.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        if r2 == $r10 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        z2 = $z7;

        $r12 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $i11 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$initGroup(int[],int,int,boolean,boolean,boolean,int,int)>($r12, i9, i0, z0, z6, z2, $i10, $i11);

        $i12 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i12;

        if z0 == 0 goto label07;

        $b13 = 1;

        goto label08;

     label07:
        $b13 = 0;

     label08:
        if z6 == 0 goto label09;

        $b14 = 1;

        goto label10;

     label09:
        $b14 = 0;

     label10:
        $i4 = $b13 + $b14;

        if z2 == 0 goto label11;

        $b15 = 1;

        goto label12;

     label11:
        $b15 = 0;

     label12:
        i1 = $i4 + $b15;

        if i1 <= 0 goto label16;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertSlots(int,int)>(i1, i8);

        r13 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        i16 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        if z0 == 0 goto label13;

        $i7 = i16;

        i16 = i16 + 1;

        r13[$i7] = r2;

     label13:
        if z6 == 0 goto label14;

        $i6 = i16;

        i16 = i16 + 1;

        r13[$i6] = r1;

     label14:
        if z2 == 0 goto label15;

        $i5 = i16;

        i16 = i16 + 1;

        r13[$i5] = r2;

     label15:
        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = i16;

     label16:
        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = 0;

        i17 = i8 + 1;

        r0.<androidx.compose.runtime.SlotWriter: int parent> = i8;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i17;

        $i18 = i17;

        goto label20;

     label17:
        i19 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        virtualinvoke $r4.<androidx.compose.runtime.IntStack: void push(int)>(i19);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void saveCurrentGroupEnd()>();

        i20 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i21 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i20);

        $r5 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r6);

        if $z3 != 0 goto label19;

        if z0 == 0 goto label18;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void updateNode(java.lang.Object)>(r2);

        goto label19;

     label18:
        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void updateAux(java.lang.Object)>(r2);

     label19:
        $r14 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i22 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int slotIndex(int[],int)>($r14, i21);

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i22;

        $r15 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i23 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i24 = $i23 + 1;

        $i25 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i24);

        $i26 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r15, $i25);

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i26;

        $r16 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i27 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r16, i21);

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i27;

        r0.<androidx.compose.runtime.SlotWriter: int parent> = i20;

        $i28 = i20 + 1;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = $i28;

        $r17 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i29 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r17, i21);

        $i18 = i20 + $i29;

     label20:
        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = $i18;

        return;
    }

    public final int endGroup()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean z0, z1, $z2, $z3, $z4, z5;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, i27, i28, $i29, $i30;
        int[] $r1, $r2, $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r20, $r22;
        androidx.compose.runtime.IntStack $r6, $r8, $r21;
        java.lang.String $r16, $r24;
        kotlin.KotlinNothingValueException $r18;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i10 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z0 = $z3;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i2);

        i4 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        i5 = i0 - i2;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r1, i3);

        if z0 == 0 goto label05;

        $r19 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r19, i3, i5);

        $r20 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateNodeCount(int[],int,int)>($r20, i3, i4);

        $r21 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack>;

        $i18 = virtualinvoke $r21.<androidx.compose.runtime.IntStack: int pop()>();

        if z1 == 0 goto label03;

        $i21 = 1;

        goto label04;

     label03:
        $i21 = i4;

     label04:
        $i19 = $i18 + $i21;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i19;

        $r22 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i20 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r22, i2);

        r0.<androidx.compose.runtime.SlotWriter: int parent> = $i20;

        goto label21;

     label05:
        if i0 != i1 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        z5 = $z4;

        if z5 != 0 goto label08;

        $r24 = "Expected to be at the end of a group";

        $r16 = virtualinvoke $r24.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r16);

        $r18 = new kotlin.KotlinNothingValueException;

        specialinvoke $r18.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r18;

     label08:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i22 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r2, i3);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i23 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r3, i3);

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r4, i3, i5);

        $r5 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateNodeCount(int[],int,int)>($r5, i3, i4);

        $r6 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        $i24 = virtualinvoke $r6.<androidx.compose.runtime.IntStack: int pop()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: int restoreCurrentGroupEnd()>();

        r0.<androidx.compose.runtime.SlotWriter: int parent> = $i24;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r7, i2);

        $r8 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack nodeCountStack>;

        $i12 = virtualinvoke $r8.<androidx.compose.runtime.IntStack: int pop()>();

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i12;

        if i6 != $i24 goto label11;

        $i16 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        if z1 == 0 goto label09;

        $i25 = 0;

        goto label10;

     label09:
        $i25 = i4 - $i23;

     label10:
        $i17 = $i16 + $i25;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i17;

        goto label21;

     label11:
        i7 = i5 - i22;

        if z1 == 0 goto label12;

        $i26 = 0;

        goto label13;

     label12:
        $i26 = i4 - $i23;

     label13:
        i27 = $i26;

        if i7 != 0 goto label14;

        if i27 == 0 goto label20;

     label14:
        i28 = i6;

     label15:
        if i28 == 0 goto label20;

        if i28 == $i24 goto label20;

        if i27 != 0 goto label16;

        if i7 == 0 goto label20;

     label16:
        i8 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i28);

        if i7 == 0 goto label17;

        $r13 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i15 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r13, i8);

        i9 = $i15 + i7;

        $r14 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r14, i8, i9);

     label17:
        if i27 == 0 goto label18;

        $r12 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $r11 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i13 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r11, i8);

        $i14 = $i13 + i27;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateNodeCount(int[],int,int)>($r12, i8, $i14);

     label18:
        $r9 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z2 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r9, i8);

        if $z2 == 0 goto label19;

        i27 = 0;

     label19:
        $r10 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i28 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r10, i28);

        goto label15;

     label20:
        $i29 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        $i30 = $i29 + i27;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i30;

     label21:
        return i4;
    }

    public final void bashGroup$runtime_release()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup()>();

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isGroupEnd()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void insertParentGroup(int)>(-3);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int skipGroup()>();

        goto label1;

     label2:
        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        return;
    }

    public final void ensureStarted(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String r1, $r7, $r10, $r13;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        kotlin.KotlinNothingValueException $r9, $r12;
        boolean $z0, z1, $z4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        z1 = $z0;

        if z1 != 0 goto label3;

        $r13 = "Cannot call ensureStarted() while inserting";

        $r10 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r10);

        $r12 = new kotlin.KotlinNothingValueException;

        specialinvoke $r12.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r12;

     label3:
        i3 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if i3 == i0 goto label7;

        if i0 < i3 goto label4;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if i0 >= $i2 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        if $z4 != 0 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started group at ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a subgroup of the group at ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r7);

        $r9 = new kotlin.KotlinNothingValueException;

        specialinvoke $r9.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r9;

     label6:
        $i4 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd>;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i0;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup()>();

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = $i4;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i5;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i6;

     label7:
        return;
    }

    public final void ensureStarted(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotWriter)>(r0);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void ensureStarted(int)>($i0);

        return;
    }

    public final int skipGroup()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i2);

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i4 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r1, i0);

        i1 = $i3 + $i4;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i1;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i1);

        $i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r2, $i5);

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i6;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r3, i0);

        if $z0 == 0 goto label1;

        $i7 = 1;

        goto label2;

     label1:
        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i7 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r4, i0);

     label2:
        return $i7;
    }

    public final boolean removeGroup()
    {
        androidx.compose.runtime.SlotWriter r0;
        boolean z0, $z2, $z3, z4;
        androidx.compose.runtime.PrioritySet r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, $i11, $i12;
        java.lang.String $r3, $r6;
        kotlin.KotlinNothingValueException $r5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z4 = $z3;

        if z4 != 0 goto label3;

        $r6 = "Cannot remove group while inserting";

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        i10 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i11 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i12 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int skipGroup()>();

        $r2 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.PrioritySet pendingRecalculateMarks>;

        if $r2 == null goto label6;

        r1 = $r2;

     label4:
        $z2 = virtualinvoke r1.<androidx.compose.runtime.PrioritySet: boolean isNotEmpty()>();

        if $z2 == 0 goto label5;

        $i8 = virtualinvoke r1.<androidx.compose.runtime.PrioritySet: int peek()>();

        if $i8 < i10 goto label5;

        virtualinvoke r1.<androidx.compose.runtime.PrioritySet: int takeMax()>();

        goto label4;

     label5:
        goto label6;

     label6:
        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i2 = $i1 - i10;

        z0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: boolean removeGroups(int,int)>(i10, $i2);

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $i5 = $i3 - $i11;

        $i4 = i10 - 1;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void removeSlots(int,int,int)>($i11, $i5, $i4);

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i10;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = $i11;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        $i7 = $i6 - $i12;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i7;

        return z0;
    }

    public final java.util.Iterator groupSlots()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1, $r2;
        androidx.compose.runtime.SlotWriter$groupSlots$1 $r3;
        java.util.Iterator $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i2);

        i0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, $i3);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i6 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>($i4);

        $i7 = $i5 + $i6;

        $i8 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i7);

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r2, $i8);

        $r3 = new androidx.compose.runtime.SlotWriter$groupSlots$1;

        specialinvoke $r3.<androidx.compose.runtime.SlotWriter$groupSlots$1: void <init>(int,int,androidx.compose.runtime.SlotWriter)>(i0, i1, r0);

        $r4 = (java.util.Iterator) $r3;

        return $r4;
    }

    public final void moveGroup(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, i38, $i39, $i40, i41, i42, i43, $i44, $i45, i46, i47, i48, i49, i50, $i51;
        int[] r1, $r2, $r3, $r4, $r12;
        java.lang.Object[] $r6, r25;
        java.lang.String $r7, $r13, $r16, $r19, $r22, $r23, $r24, r26;
        kotlin.KotlinNothingValueException $r9, $r15, $r18, $r21;
        boolean $z0, z1, $z4, z5, $z8, z9, z12, $z13, z14, z15, z16;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i12 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i12 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        z1 = $z0;

        if z1 != 0 goto label03;

        $r22 = "Cannot move a group while inserting";

        $r19 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r19);

        $r21 = new kotlin.KotlinNothingValueException;

        specialinvoke $r21.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r21;

     label03:
        if i0 < 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z5 = $z4;

        if z5 != 0 goto label06;

        $r23 = "Parameter offset is out of bounds";

        $r16 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r16);

        $r18 = new kotlin.KotlinNothingValueException;

        specialinvoke $r18.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r18;

     label06:
        if i0 != 0 goto label07;

        return;

     label07:
        i38 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i39 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $i40 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        i41 = i0;

        i42 = i38;

     label08:
        if i41 <= 0 goto label12;

        $r12 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i36 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i42);

        $i37 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r12, $i36);

        i42 = i42 + $i37;

        if i42 > $i40 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        z9 = $z8;

        if z9 != 0 goto label11;

        $r24 = "Parameter offset is out of bounds";

        $r13 = virtualinvoke $r24.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r13);

        $r15 = new kotlin.KotlinNothingValueException;

        specialinvoke $r15.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r15;

     label11:
        i41 = i41 + -1;

        goto label08;

     label12:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i13 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i42);

        i43 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r2, $i13);

        $i44 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i14 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i42);

        $i45 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r3, $i14);

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i15 = i42 + i43;

        $i16 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i15);

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r4, $i16);

        i2 = i1 - $i45;

        $i17 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i18 = $i17 - 1;

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>($i18, 0);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertSlots(int,int)>(i2, $i19);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertGroups(int)>(i43);

        r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i20 = i42 + i43;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i20);

        i4 = i3 * 5;

        i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i38);

        $i23 = i5 * 5;

        $i21 = i43 * 5;

        $i22 = i4 + $i21;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>(r1, r1, $i23, i4, $i22);

        if i2 <= 0 goto label13;

        r25 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i32 = $i45 + i2;

        $i33 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i32);

        $i34 = i1 + i2;

        $i35 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i34);

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r25, r25, $i44, $i33, $i35);

     label13:
        $i24 = $i45 + i2;

        i46 = $i24 - $i44;

        i6 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        i7 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        i8 = lengthof $r6;

        i9 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        i47 = i38;

        i48 = i38 + i43;

     label14:
        if i47 >= i48 goto label17;

        i49 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i47);

        i50 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>(r1, i49);

        i10 = i50 - i46;

        if i9 >= i49 goto label15;

        $i51 = 0;

        goto label16;

     label15:
        $i51 = i6;

     label16:
        i11 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAnchor(int,int,int,int)>(i10, $i51, i7, i8);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateDataIndex(int[],int,int)>(r1, i49, i11);

        i47 = i47 + 1;

        goto label14;

     label17:
        $i25 = i42 + i43;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveAnchors(int,int,int)>($i25, i38, i43);

        $i26 = i42 + i43;

        z12 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: boolean removeGroups(int,int)>($i26, i43);

        if z12 != 0 goto label18;

        $z13 = 1;

        goto label19;

     label18:
        $z13 = 0;

     label19:
        z14 = $z13;

        z15 = 0;

        if z14 != 0 goto label20;

        z16 = 0;

        r26 = "Unexpectedly removed anchors";

        $r7 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r7);

        $r9 = new kotlin.KotlinNothingValueException;

        specialinvoke $r9.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r9;

     label20:
        $i27 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void fixParentAnchorsFor(int,int,int)>($i39, $i27, i38);

        if i2 <= 0 goto label21;

        $i30 = $i45 + i2;

        $i28 = i42 + i43;

        $i29 = $i28 - 1;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void removeSlots(int,int,int)>($i30, i2, $i29);

     label21:
        return;
    }

    public final java.util.List moveTo(androidx.compose.runtime.Anchor, int, androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter r0, r2;
        androidx.compose.runtime.Anchor r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        java.util.List r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        androidx.compose.runtime.SlotWriter$Companion $r4;
        int[] $r5, $r6, $r7, $r8, $r9;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.runtime.SlotWriter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "writer");

        $i7 = r2.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i7 <= 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z2);

        $i8 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i8 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z3);

        $z0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: boolean getValid()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z0);

        $i9 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r1);

        i1 = $i9 + i0;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        if i2 > i1 goto label06;

        $i17 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if i1 >= $i17 goto label05;

        $z4 = 1;

        goto label07;

     label05:
        $z4 = 0;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z4);

        i3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i1);

        i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i1);

        $z5 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode(int)>(i1);

        if $z5 == 0 goto label08;

        $i18 = 1;

        goto label09;

     label08:
        $i18 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int nodeCount(int)>(i1);

     label09:
        i5 = $i18;

        $r4 = <androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotWriter$Companion Companion>;

        r3 = staticinvoke <androidx.compose.runtime.SlotWriter$Companion: java.util.List access$moveGroup(androidx.compose.runtime.SlotWriter$Companion,androidx.compose.runtime.SlotWriter,int,androidx.compose.runtime.SlotWriter,boolean,boolean)>($r4, r0, i1, r2, 0, 0);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateContainsMark(int)>(i3);

        i19 = i3;

        if i5 <= 0 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        z7 = $z6;

     label12:
        if i19 < i2 goto label15;

        i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i19);

        $r6 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $r5 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i13 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r5, i6);

        $i14 = $i13 - i4;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r6, i6, $i14);

        if z7 == 0 goto label14;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r7, i6);

        if $z1 == 0 goto label13;

        z7 = 0;

        goto label14;

     label13:
        $r9 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $r8 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i15 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r8, i6);

        $i16 = $i15 - i5;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateNodeCount(int[],int,int)>($r9, i6, $i16);

     label14:
        i19 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i19);

        goto label12;

     label15:
        if z7 == 0 goto label18;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        if $i10 < i5 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z8);

        $i11 = r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        $i12 = $i11 - i5;

        r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = $i12;

     label18:
        return r3;
    }

    public final java.util.List moveFrom(androidx.compose.runtime.SlotTable, int)
    {
        androidx.compose.runtime.SlotWriter r0, r14, r15;
        androidx.compose.runtime.SlotTable r1, $r3, r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.Throwable r2, $r7;
        java.util.ArrayList $r4, $r5, r10;
        java.util.List $r6, r17;
        boolean $z0, z1, z2, z3;
        int[] r8, r11;
        java.lang.Object[] r9, r12;
        androidx.compose.runtime.SlotWriter$Companion $r16;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z0);

        if i0 != 0 goto label3;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        if $i2 != 0 goto label3;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable table>;

        $i3 = virtualinvoke $r3.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        if $i3 != 0 goto label3;

        r8 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        r9 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        r10 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        r11 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: int[] getGroups()>();

        i9 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        r12 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: java.lang.Object[] getSlots()>();

        i10 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: int getSlotsSize()>();

        r0.<androidx.compose.runtime.SlotWriter: int[] groups> = r11;

        r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots> = r12;

        $r4 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: java.util.ArrayList getAnchors$runtime_release()>();

        r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors> = $r4;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapStart> = i9;

        $i4 = lengthof r11;

        $i5 = $i4 / 5;

        $i6 = $i5 - i9;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapLen> = $i6;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart> = i10;

        $i7 = lengthof r12;

        $i8 = $i7 - i10;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen> = $i8;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = i9;

        virtualinvoke r1.<androidx.compose.runtime.SlotTable: void setTo$runtime_release(int[],int,java.lang.Object[],int,java.util.ArrayList)>(r8, 0, r9, 0, r10);

        $r5 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r6 = (java.util.List) $r5;

        return $r6;

     label3:
        r13 = r1;

        z1 = 0;

        r14 = virtualinvoke r13.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

        z2 = 0;

     label4:
        r15 = r14;

        z3 = 0;

        $r16 = <androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotWriter$Companion Companion>;

        r17 = staticinvoke <androidx.compose.runtime.SlotWriter$Companion: java.util.List access$moveGroup(androidx.compose.runtime.SlotWriter$Companion,androidx.compose.runtime.SlotWriter,int,androidx.compose.runtime.SlotWriter,boolean,boolean)>($r16, r15, i0, r0, 1, 1);

     label5:
        virtualinvoke r14.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label8;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

     label7:
        virtualinvoke r14.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r2;

     label8:
        return r17;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void insertParentGroup(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, $i12, $i13, i14, i15, i16, i17;
        boolean $z0, $z1, z2;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8, $r11;
        kotlin.KotlinNothingValueException $r10;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i4 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        if z2 != 0 goto label3;

        $r11 = "Writer cannot be inserting";

        $r8 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r8);

        $r10 = new kotlin.KotlinNothingValueException;

        specialinvoke $r10.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r10;

     label3:
        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isGroupEnd()>();

        if $z0 == 0 goto label4;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup(int)>(i0);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        goto label7;

     label4:
        i11 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i12 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int[],int)>($r1, i11);

        $i5 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>($i12);

        $i13 = $i12 + $i5;

        i1 = $i13 - i11;

        i14 = 0;

        i15 = i11;

     label5:
        if i15 >= $i13 goto label6;

        i16 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i15);

        $r6 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r6, i16);

        i14 = i14 + $i8;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i9 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r7, i16);

        i15 = i15 + $i9;

        goto label5;

     label6:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i11);

        i17 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r2, $i6);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void insertGroups(int)>(1);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i11);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$initGroup(int[],int,int,boolean,boolean,boolean,int,int)>($r3, i2, i0, 0, 0, 0, $i12, i17);

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i7 = i1 + 1;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r4, i2, $i7);

        $r5 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateNodeCount(int[],int,int)>($r5, i2, i14);

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>($i12);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void addToGroupSizeAlongSpine(int,int)>(i3, 1);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void fixParentAnchorsFor(int,int,int)>($i12, $i13, i11);

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = $i13;

     label7:
        return;
    }

    public final void addToGroupSizeAlongSpine(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7;
        int[] $r1, $r2, $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i7 = i0;

     label1:
        if i7 <= 0 goto label2;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i5 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r1, i7);

        $i6 = $i5 + i1;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateGroupSize(int[],int,int)>($r2, i7, $i6);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r3, i7);

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentAnchorToIndex(int)>(i2);

        i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i3);

        i7 = i4;

        goto label1;

     label2:
        return;
    }

    public final java.util.List moveIntoGroupFrom(int, androidx.compose.runtime.SlotTable, int)
    {
        androidx.compose.runtime.SlotWriter r0, r4, r5;
        int i0, i1, i2, i3, i4, $i5, $i7, $i8, $i9;
        androidx.compose.runtime.SlotTable r1, r3;
        java.util.List r2, r6;
        java.lang.Throwable r7, $r8;
        boolean $z3;
        androidx.compose.runtime.SlotWriter$Companion $r9;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.SlotTable;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int insertCount>;

        if $i5 > 0 goto label1;

        $i7 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $i8 = $i7 + i0;

        $i9 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>($i8);

        if $i9 != 1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z3);

        i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        i3 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        i4 = r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd>;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void advanceBy(int)>(i0);

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup()>();

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        r3 = r1;

        r4 = virtualinvoke r3.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label3:
        r5 = r4;

        $r9 = <androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotWriter$Companion Companion>;

        r6 = staticinvoke <androidx.compose.runtime.SlotWriter$Companion: java.util.List access$moveGroup(androidx.compose.runtime.SlotWriter$Companion,androidx.compose.runtime.SlotWriter,int,androidx.compose.runtime.SlotWriter,boolean,boolean)>($r9, r5, i1, r0, 0, 1);

     label4:
        virtualinvoke r4.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

        r7 = $r8;

     label6:
        virtualinvoke r4.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r7;

     label7:
        r2 = r6;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i2;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = i3;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = i4;

        return r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final androidx.compose.runtime.Anchor anchor(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.ArrayList $r1;
        androidx.compose.runtime.Anchor r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$search(java.util.ArrayList,int,int)>($r1, i0, i1);

        if i2 >= 0 goto label3;

        $r4 = new androidx.compose.runtime.Anchor;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i0 > $i3 goto label1;

        $i8 = i0;

        goto label2;

     label1:
        $i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $i5 = $i4 - i0;

        $i8 = neg $i5;

     label2:
        specialinvoke $r4.<androidx.compose.runtime.Anchor: void <init>(int)>($i8);

        r2 = $r4;

        $i6 = i2 + 1;

        $i7 = neg $i6;

        virtualinvoke $r1.<java.util.ArrayList: void add(int,java.lang.Object)>($i7, r2);

        $r5 = r2;

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "get(location)");

        $r5 = (androidx.compose.runtime.Anchor) $r3;

     label4:
        return $r5;
    }

    public static androidx.compose.runtime.Anchor anchor$default(androidx.compose.runtime.SlotWriter, int, int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        androidx.compose.runtime.Anchor $r2;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.Anchor anchor(int)>(i2);

        return $r2;
    }

    public final void markGroup(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2;
        int[] $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasMark(int[],int)>($r1, i1);

        if $z0 != 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateMark(int[],int,boolean)>($r2, i1, 1);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r3, i1);

        if $z1 != 0 goto label1;

        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i0);

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateContainsMark(int)>($i2);

     label1:
        return;
    }

    public static void markGroup$default(androidx.compose.runtime.SlotWriter, int, int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, i2;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

     label1:
        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void markGroup(int)>(i2);

        return;
    }

    private final boolean containsGroupMark(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r1, $i1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private final boolean containsAnyGroupMarks(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsAnyMark(int[],int)>($r1, $i1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private final void recalculateMarks()
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.PrioritySet r1, $r2;
        boolean $z1;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.PrioritySet pendingRecalculateMarks>;

        if $r2 == null goto label3;

        r1 = $r2;

     label1:
        $z1 = virtualinvoke r1.<androidx.compose.runtime.PrioritySet: boolean isNotEmpty()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r1.<androidx.compose.runtime.PrioritySet: int takeMax()>();

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateContainsMarkNow(int,androidx.compose.runtime.PrioritySet)>($i0, r1);

        goto label1;

     label2:
        goto label3;

     label3:
        return;
    }

    private final void updateContainsMark(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0;
        androidx.compose.runtime.PrioritySet r1, r2, $r3, $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.PrioritySet pendingRecalculateMarks>;

        if $r4 != null goto label1;

        $r3 = new androidx.compose.runtime.PrioritySet;

        specialinvoke $r3.<androidx.compose.runtime.PrioritySet: void <init>(java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r1 = $r3;

        r2 = r1;

        r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.PrioritySet pendingRecalculateMarks> = r2;

        $r4 = r1;

     label1:
        virtualinvoke $r4.<androidx.compose.runtime.PrioritySet: void add(int)>(i0);

     label2:
        return;
    }

    private final void updateContainsMarkNow(int, androidx.compose.runtime.PrioritySet)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2;
        androidx.compose.runtime.PrioritySet r1;
        boolean z0, z1, $z2, $z3;
        int[] $r2, $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.PrioritySet;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        z0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: boolean childContainsAnyMarks(int)>(i0);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z2 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r2, i1);

        if $z2 == z0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z1 = $z3;

        if z1 == 0 goto label3;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateContainsMark(int[],int,boolean)>($r3, i1, z0);

        i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i0);

        if i2 < 0 goto label3;

        virtualinvoke r1.<androidx.compose.runtime.PrioritySet: void add(int)>(i2);

     label3:
        return;
    }

    private final boolean childContainsAnyMarks(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, i5;
        int[] $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i5 = i0 + 1;

        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i0);

        i1 = i0 + $i2;

     label1:
        if i5 >= i1 goto label3;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i5);

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsAnyMark(int[],int)>($r1, $i3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i5);

        i5 = i5 + $i4;

        goto label1;

     label3:
        return 0;
    }

    public final int anchorIndex(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        int i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        if i0 >= 0 goto label1;

        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $i2 = $i1 + i0;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    public java.lang.String toString()
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r13;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SlotWriter(current = ");

        $i0 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end=");

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size = ");

        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" gap=");

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i6 = $i5 + $i4;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private final void saveCurrentGroupEnd()
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.IntStack $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack endStack>;

        $i0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i3 = $i0 - $i1;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        $i4 = $i3 - $i2;

        virtualinvoke $r1.<androidx.compose.runtime.IntStack: void push(int)>($i4);

        return;
    }

    private final int restoreCurrentGroupEnd()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.runtime.IntStack $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i3 = $i1 - $i2;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack endStack>;

        $i4 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: int pop()>();

        i0 = $i3 - $i4;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = i0;

        return i0;
    }

    private final void fixParentAnchorsFor(int, int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10;
        int[] $r1, $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentIndexToAnchor(int,int)>(i0, $i5);

        i10 = i2;

     label1:
        if i10 >= i1 goto label2;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i6 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i10);

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateParentAnchor(int[],int,int)>($r1, $i6, i3);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i7 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i10);

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r2, $i7);

        i4 = i10 + $i8;

        $i9 = i10 + 1;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void fixParentAnchorsFor(int,int,int)>(i10, i4, $i9);

        i10 = i4;

        goto label1;

     label2:
        return;
    }

    private final void moveGroupGapTo(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9, $i10, i11, i12, i13, i14;
        java.util.ArrayList $r1;
        java.util.Collection $r2;
        boolean $z0, $z1, $z2;
        int[] $r3, $r4, r7;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i2 == i0 goto label12;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateAnchors(int,int)>(i2, i0);

     label03:
        if i1 <= 0 goto label05;

        r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i7 = i0 * 5;

        i8 = i1 * 5;

        i9 = i2 * 5;

        if i0 >= i2 goto label04;

        $i6 = i7 + i8;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>(r7, r7, $i6, i7, i9);

        goto label05;

     label04:
        $i5 = i9 + i8;

        $i4 = i7 + i8;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>(r7, r7, i9, $i5, $i4);

     label05:
        if i0 >= i2 goto label06;

        $i10 = i0 + i1;

        goto label07;

     label06:
        $i10 = i2;

     label07:
        i11 = $i10;

        i12 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        if i11 >= i12 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z2);

     label10:
        if i11 >= i12 goto label12;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i13 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r3, i11);

        i14 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentAnchorToIndex(int)>(i13);

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentIndexToAnchor(int,int)>(i14, i0);

        if i3 == i13 goto label11;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateParentAnchor(int[],int,int)>($r4, i11, i3);

     label11:
        i11 = i11 + 1;

        if i11 != i0 goto label10;

        i11 = i11 + i1;

        goto label10;

     label12:
        r0.<androidx.compose.runtime.SlotWriter: int groupGapStart> = i0;

        return;
    }

    private final void moveSlotGapTo(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28;
        java.lang.Object[] $r1, r14;
        int[] $r2, $r3, $r7, $r8;
        java.lang.String $r4, $r9, $r15, $r16;
        kotlin.KotlinNothingValueException $r6, $r11;
        boolean $z0, z1, $z4, z5, z6;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        i3 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        i4 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        if i3 == i0 goto label03;

        r14 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        if i0 >= i3 goto label01;

        $i18 = i0 + i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r14, r14, $i18, i0, i3);

        goto label02;

     label01:
        $i16 = i3 + i2;

        $i15 = i0 + i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r14, r14, i3, $i16, $i15);

     label02:
        $i17 = i0 + i2;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>(r14, null, i0, $i17);

     label03:
        $i19 = i1 + 1;

        $i20 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        i21 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i20);

        if i4 == i21 goto label14;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i6 = lengthof $r1;

        i5 = $i6 - i2;

        if i21 >= i4 goto label08;

        i22 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i21);

        i23 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i4);

        i24 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

     label04:
        if i22 >= i23 goto label13;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i25 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r7, i22);

        if i25 < 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        z1 = $z0;

        if z1 != 0 goto label07;

        $r15 = "Unexpected anchor value, expected a positive anchor";

        $r9 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r9);

        $r11 = new kotlin.KotlinNothingValueException;

        specialinvoke $r11.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r11;

     label07:
        $r8 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i11 = i5 - i25;

        $i12 = $i11 + 1;

        $i13 = neg $i12;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateDataAnchor(int[],int,int)>($r8, i22, $i13);

        i22 = i22 + 1;

        if i22 != i24 goto label04;

        $i14 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i22 = i22 + $i14;

        goto label04;

     label08:
        i26 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i4);

        i27 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i21);

     label09:
        if i26 >= i27 goto label13;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i28 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r2, i26);

        if i28 >= 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        z5 = $z4;

        z6 = 0;

        if z5 != 0 goto label12;

        $r16 = "Unexpected anchor value, expected a negative anchor";

        $r4 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r4);

        $r6 = new kotlin.KotlinNothingValueException;

        specialinvoke $r6.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r6;

     label12:
        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i7 = i5 + i28;

        $i8 = $i7 + 1;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateDataAnchor(int[],int,int)>($r3, i26, $i8);

        i26 = i26 + 1;

        $i9 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i26 != $i9 goto label09;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i26 = i26 + $i10;

        goto label09;

     label13:
        r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = i21;

     label14:
        r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart> = i0;

        return;
    }

    private final void insertGroups(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, $i29, i30, $i31, i32, i33, i34, i35;
        int[] $r1, $r3, r7, r8;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 <= 0 goto label9;

        i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveGroupGapTo(int)>(i1);

        i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        i24 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i6 = lengthof $r1;

        i3 = $i6 / 5;

        i4 = i3 - i24;

        if i24 >= i0 goto label1;

        r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i17 = i3 * 2;

        $i16 = i4 + i0;

        $i18 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i16);

        i25 = staticinvoke <java.lang.Math: int max(int,int)>($i18, 32);

        $i19 = i25 * 5;

        r8 = newarray (int)[$i19];

        i26 = i25 - i4;

        i27 = i2 + i24;

        i5 = i2 + i26;

        $i20 = i2 * 5;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>(r7, r8, 0, 0, $i20);

        $i23 = i5 * 5;

        $i22 = i27 * 5;

        $i21 = i3 * 5;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>(r7, r8, $i23, $i22, $i21);

        r0.<androidx.compose.runtime.SlotWriter: int[] groups> = r8;

        i24 = i26;

     label1:
        i28 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        if i28 < i2 goto label2;

        $i15 = i28 + i0;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = $i15;

     label2:
        $i7 = i2 + i0;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapStart> = $i7;

        $i8 = i24 - i0;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapLen> = $i8;

        if i4 <= 0 goto label3;

        $i14 = i1 + i0;

        $i29 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int)>($i14);

        goto label4;

     label3:
        $i29 = 0;

     label4:
        i30 = $i29;

        $i9 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        if $i9 >= i2 goto label5;

        $i31 = 0;

        goto label6;

     label5:
        $i31 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

     label6:
        $i11 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i10 = lengthof $r2;

        i32 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAnchor(int,int,int,int)>(i30, $i31, $i11, $i10);

        i33 = i2;

        i34 = i2 + i0;

     label7:
        if i33 >= i34 goto label8;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateDataAnchor(int[],int,int)>($r3, i33, i32);

        i33 = i33 + 1;

        goto label7;

     label8:
        i35 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        if i35 < i2 goto label9;

        $i12 = i35 + i0;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = $i12;

     label9:
        return;
    }

    private final void insertSlots(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.Object[] r1, r4, r5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label5;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveSlotGapTo(int,int)>($i6, i1);

        i2 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        i13 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        if i13 >= i0 goto label3;

        r4 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        i3 = lengthof r4;

        i4 = i3 - i13;

        $i11 = i3 * 2;

        $i10 = i4 + i0;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i10);

        i5 = staticinvoke <java.lang.Math: int max(int,int)>($i12, 32);

        i14 = 0;

        r5 = newarray (java.lang.Object)[i5];

     label1:
        if i14 >= i5 goto label2;

        i15 = i14;

        r5[i15] = null;

        i14 = i14 + 1;

        goto label1;

     label2:
        r1 = r5;

        i16 = i5 - i4;

        i17 = i2 + i13;

        i18 = i2 + i16;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, r1, 0, 0, i2);

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, r1, i18, i17, i3);

        r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots> = r1;

        i13 = i16;

     label3:
        i19 = r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd>;

        if i19 < i2 goto label4;

        $i9 = i19 + i0;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i9;

     label4:
        $i7 = i2 + i0;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart> = $i7;

        $i8 = i13 - i0;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen> = $i8;

     label5:
        return;
    }

    private final boolean removeGroups(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.ArrayList r1;
        java.util.Collection $r2;
        boolean $z0, $z1, z2, $z3, $z4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label7;

        z2 = 0;

        r1 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveGroupGapTo(int)>(i0);

        $r2 = (java.util.Collection) r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        z2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: boolean removeAnchors(int,int)>(i0, i1);

     label3:
        r0.<androidx.compose.runtime.SlotWriter: int groupGapStart> = i0;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i3 = i2 + i1;

        r0.<androidx.compose.runtime.SlotWriter: int groupGapLen> = i3;

        i4 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        if i4 <= i0 goto label4;

        $i11 = i4 - i1;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i11);

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = $i12;

     label4:
        $i6 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if $i6 < $i5 goto label5;

        $i9 = r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd>;

        $i10 = $i9 - i1;

        r0.<androidx.compose.runtime.SlotWriter: int currentGroupEnd> = $i10;

     label5:
        $i7 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        $z1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: boolean containsGroupMark(int)>($i7);

        if $z1 == 0 goto label6;

        $i8 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void updateContainsMark(int)>($i8);

     label6:
        $z4 = z2;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        return $z4;
    }

    private final void removeSlots(int, int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 <= 0 goto label1;

        i3 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        i4 = i0 + i1;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void moveSlotGapTo(int,int)>(i4, i2);

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart> = i0;

        $i6 = i3 + i1;

        r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen> = $i6;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i7 = i0 + i1;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, i0, $i7);

        i5 = r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd>;

        if i5 < i0 goto label1;

        $i8 = i5 - i1;

        r0.<androidx.compose.runtime.SlotWriter: int currentSlotEnd> = $i8;

     label1:
        return;
    }

    private final void updateNodeOfGroup(int, java.lang.Object)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r1;
        boolean z0, $z3, $z4;
        java.lang.String r2, $r10;
        int[] $r3, $r4, $r13;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        kotlin.KotlinNothingValueException $r12;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i2 = lengthof $r3;

        if i1 >= $i2 goto label1;

        $r13 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z3 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r13, i1);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 != 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating the node of a group at ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that was not created with as a node group");

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r10);

        $r12 = new kotlin.KotlinNothingValueException;

        specialinvoke $r12.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r12;

     label3:
        $r5 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r4 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int nodeIndex(int[],int)>($r4, i1);

        $i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i3);

        $r5[$i4] = r1;

        return;
    }

    private final void updateAnchors(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        java.util.ArrayList $r1, $r2, $r3, $r5, $r6, $r7;
        java.lang.Object $r4, $r8;
        androidx.compose.runtime.Anchor r9, r10;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        i3 = $i5 - i2;

        if i0 >= i1 goto label4;

        $r5 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        i11 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r5, i0, i3);

     label1:
        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $i9 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i11 >= $i9 goto label7;

        $r7 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "anchors[index]");

        r9 = (androidx.compose.runtime.Anchor) $r8;

        i12 = virtualinvoke r9.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        if i12 >= 0 goto label3;

        i4 = i3 + i12;

        if i4 >= i1 goto label2;

        $i10 = i3 + i12;

        virtualinvoke r9.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>($i10);

        i11 = i11 + 1;

        goto label1;

     label2:
        goto label7;

     label3:
        goto label7;

     label4:
        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        i13 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r1, i1, i3);

     label5:
        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $i6 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i13 >= $i6 goto label7;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "anchors[index]");

        r10 = (androidx.compose.runtime.Anchor) $r4;

        i14 = virtualinvoke r10.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        if i14 < 0 goto label6;

        $i7 = i3 - i14;

        $i8 = neg $i7;

        virtualinvoke r10.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>($i8);

        i13 = i13 + 1;

        goto label5;

     label6:
        goto label7;

     label7:
        return;
    }

    private final boolean removeAnchors(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8, $i9, i10, i11, i12, i13;
        java.util.ArrayList $r1, $r2, $r3, $r5;
        java.util.List $r4;
        java.lang.Object $r6;
        boolean z2, $z3, $z4, z5;
        androidx.compose.runtime.Anchor $r7;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i3 = i0 + i1;

        $i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        i4 = $i5 - i2;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $i6 = i0 + i1;

        i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r1, $i6, i4);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $i7 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i8 < $i7 goto label1;

        $i9 = i8 - 1;

        goto label2;

     label1:
        $i9 = i8;

     label2:
        i10 = $i9;

        i11 = 0;

        z2 = 0;

        i12 = i10 + 1;

     label3:
        if i10 < 0 goto label6;

        $r5 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "anchors[index]");

        $r7 = (androidx.compose.runtime.Anchor) $r6;

        i13 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>($r7);

        if i13 < i0 goto label5;

        if i13 >= i3 goto label4;

        virtualinvoke $r7.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>(-2147483648);

        i12 = i10;

        if i11 != 0 goto label4;

        i11 = i10 + 1;

     label4:
        i10 = i10 + -1;

        goto label3;

     label5:
        goto label6;

     label6:
        if i12 >= i11 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        $z4 = $z3;

        z5 = $z3;

        if z5 == 0 goto label9;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.List subList(int,int)>(i12, i11);

        interfaceinvoke $r4.<java.util.List: void clear()>();

     label9:
        return $z4;
    }

    private final void moveAnchors(int, int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.util.List r1, r14;
        java.lang.Object r2, $r10;
        androidx.compose.runtime.Anchor r3, r13;
        java.util.ArrayList $r4, $r5, $r6, $r7, $r8, $r9, $r11;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i0 + i2;

        i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $r4 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        i5 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r4, i0, i4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r5;

        if i5 < 0 goto label3;

     label1:
        $r8 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $i13 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i5 >= $i13 goto label3;

        $r9 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "anchors[index]");

        r13 = (androidx.compose.runtime.Anchor) $r10;

        i14 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r13);

        if i14 < i0 goto label2;

        if i14 >= i3 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r13);

        $r11 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        virtualinvoke $r11.<java.util.ArrayList: java.lang.Object remove(int)>(i5);

        goto label1;

     label2:
        goto label3;

     label3:
        i15 = i1 - i0;

        r14 = r1;

        i16 = 0;

        i6 = interfaceinvoke r14.<java.util.List: int size()>();

     label4:
        if i16 >= i6 goto label7;

        r2 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(i16);

        r3 = (androidx.compose.runtime.Anchor) r2;

        i7 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r3);

        i8 = i7 + i15;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i8 < $i10 goto label5;

        $i11 = i4 - i8;

        $i12 = neg $i11;

        virtualinvoke r3.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>($i12);

        goto label6;

     label5:
        virtualinvoke r3.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>(i8);

     label6:
        $r6 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        i9 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r6, i8, i4);

        $r7 = r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(i9, r3);

        i16 = i16 + 1;

        goto label4;

     label7:
        return;
    }

    public final java.lang.String groupsAsString()
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.StringBuilder r1, $r3;
        int i0, i1;
        java.lang.String $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        i1 = 0;

        i0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

     label1:
        if i1 >= i0 goto label2;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter: void groupAsString(java.lang.StringBuilder,int)>(r1, i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "StringBuilder().apply(builderAction).toString()");

        return $r4;
    }

    private final void groupAsString(java.lang.StringBuilder, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        java.lang.StringBuilder $r1, $r33, $r34, $r38;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        boolean z0, $z1;
        int[] $r5, $r8, $r11, $r14, $r17, $r20, $r22, $r23, $r24, $r35;
        java.lang.Object[] $r28, $r36;
        java.lang.Object $r29, $r37;
        java.lang.String $r30, $r39;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group(");

        if i0 >= 10 goto label01;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label01:
        if i0 >= 100 goto label02;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label02:
        if i0 >= 1000 goto label03;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label03:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        if i1 == i0 goto label04;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label04:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r5 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i5 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r5, i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        z0 = staticinvoke <androidx.compose.runtime.SlotWriter: boolean groupAsString$isStarted(androidx.compose.runtime.SlotWriter,int)>(r0, i0);

        if z0 == 0 goto label05;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label05:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

        $r8 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i6 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r8, i1);

        $i7 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentAnchorToIndex(int)>($i6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": key=");

        $r11 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$key(int[],int)>($r11, i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nodes=");

        $r14 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i9 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r14, i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        if z0 == 0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label06:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dataAnchor=");

        $r17 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i10 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r17, i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parentAnchor=");

        $r20 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i11 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r20, i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r22 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r22, i1);

        if $z1 == 0 goto label07;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", node=");

        $r36 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r35 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i13 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int nodeIndex(int[],int)>($r35, i1);

        $i14 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>($i13);

        $r37 = $r36[$i14];

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

     label07:
        $r23 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int slotIndex(int[],int)>($r23, i1);

        $r24 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i12 = i1 + 1;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r24, $i12);

        if i3 <= i2 goto label11;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", [");

        i15 = i2;

     label08:
        if i15 >= i3 goto label10;

        if i15 == i2 goto label09;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label09:
        i4 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>(i15);

        $r28 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $r29 = $r28[i4];

        $r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r29);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        i15 = i15 + 1;

        goto label08;

     label10:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label11:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    public final void verifyDataAnchors$runtime_release()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, i8, i9;
        java.lang.Object[] $r1;
        int[] $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, r30, r32, r34;
        java.lang.String $r10, $r17, $r26, $r27, $r28, $r29;
        boolean z0, $z1, $z3, $z5;
        java.lang.IllegalStateException r31, r33, r35;
        java.lang.Throwable r36, r37, r38;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i8 = 0;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        z0 = 0;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i7 = lengthof $r1;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        i1 = $i7 - $i6;

        i9 = 0;

        i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

     label01:
        if i9 >= i2 goto label12;

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i9);

        $r2 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i4 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r2, i3);

        $r3 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r3, i3);

        if i5 < i8 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 != 0 goto label04;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data index out of order at ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", previous = ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", current = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = new java.lang.IllegalStateException;

        $r26 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        r36 = (java.lang.Throwable) r31;

        throw r36;

     label04:
        if i5 > i1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        if $z3 != 0 goto label07;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data index, ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", out of bound at ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r28 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r33 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        r37 = (java.lang.Throwable) r33;

        throw r37;

     label07:
        if i4 >= 0 goto label11;

        if z0 != 0 goto label11;

        if i0 != i9 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        if $z5 != 0 goto label10;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected the slot gap owner to be ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found gap at ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r35 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r29.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        r38 = (java.lang.Throwable) r35;

        throw r38;

     label10:
        z0 = 1;

     label11:
        i8 = i5;

        i9 = i9 + 1;

        goto label01;

     label12:
        return;
    }

    public final void verifyParentAnchors$runtime_release()
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        int[] $r1, $r12;
        java.lang.StringBuilder $r3, $r4, $r8, $r9, $r14, $r15, r21, r23, r25;
        java.lang.String $r6, $r11, $r17, $r18, $r19, $r20;
        boolean $z0, $z2, $z4;
        java.lang.IllegalStateException r22, r24, r26;
        java.lang.Throwable r27, r28, r29;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        i4 = 0;

     label01:
        if i4 >= i0 goto label05;

        $r12 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i5 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r12, i4);

        if i5 <= -2 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 != 0 goto label04;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a start relative anchor at ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        r27 = (java.lang.Throwable) r22;

        throw r27;

     label04:
        i4 = i4 + 1;

        goto label01;

     label05:
        i6 = i0 + i1;

     label06:
        if i6 >= i2 goto label13;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        i7 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r1, i6);

        i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentAnchorToIndex(int)>(i7);

        if i3 >= i0 goto label09;

        if i7 <= -2 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        if $z2 != 0 goto label12;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a start relative anchor at ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r19 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        r28 = (java.lang.Throwable) r24;

        throw r28;

     label09:
        if i7 > -2 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        if $z4 != 0 goto label12;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected an end relative anchor at ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r20 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r26 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        r29 = (java.lang.Throwable) r26;

        throw r29;

     label12:
        i6 = i6 + 1;

        goto label06;

     label13:
        return;
    }

    public final int getSize$runtime_release()
    {
        androidx.compose.runtime.SlotWriter r0;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $i0 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    private final int getCapacity()
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i0 = lengthof $r1;

        $i1 = $i0 / 5;

        return $i1;
    }

    private final int groupIndexToAddress(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i0 >= $i1 goto label1;

        $i3 = i0;

        goto label2;

     label1:
        $i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i3 = i0 + $i2;

     label2:
        return $i3;
    }

    private final int dataIndexToDataAddress(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        if i0 >= $i1 goto label1;

        $i3 = i0;

        goto label2;

     label1:
        $i2 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $i3 = i0 + $i2;

     label2:
        return $i3;
    }

    private final int parent(int[], int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r1, $i1);

        $i3 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int parentAnchorToIndex(int)>($i2);

        return $i3;
    }

    private final int dataIndex(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int groupIndexToAddress(int)>(i0);

        $i2 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, $i1);

        return $i2;
    }

    private final int dataIndex(int[], int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r2, $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        if i0 < $i1 goto label1;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i6 = lengthof $r3;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $i7 = $i6 - $i5;

        goto label2;

     label1:
        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r1, i0);

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i3 = lengthof $r2;

        $i7 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataAnchorToDataIndex(int,int,int)>($i2, $i4, $i3);

     label2:
        return $i7;
    }

    private final int slotIndex(int[], int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r2, $r3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int getCapacity()>();

        if i0 < $i1 goto label1;

        $r3 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i6 = lengthof $r3;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $i7 = $i6 - $i5;

        goto label2;

     label1:
        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$slotAnchor(int[],int)>($r1, i0);

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i3 = lengthof $r2;

        $i7 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataAnchorToDataIndex(int,int,int)>($i2, $i4, $i3);

     label2:
        return $i7;
    }

    private final void updateDataIndex(int[], int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r2 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i2 = lengthof $r2;

        $i5 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAnchor(int,int,int,int)>(i1, $i4, $i3, $i2);

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateDataAnchor(int[],int,int)>($r1, i0, $i5);

        return;
    }

    private final int nodeIndex(int[], int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, i0);

        return $i1;
    }

    private final int auxIndex(int[], int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, i0);

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupInfo(int[],int)>($r1, i0);

        $i3 = $i2 >> 29;

        $i4 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$countOneBits(int)>($i3);

        $i5 = $i1 + $i4;

        return $i5;
    }

    private final java.util.List dataIndexes(int[])
    {
        androidx.compose.runtime.SlotWriter r0;
        int[] $r1, $r7;
        java.util.List $r2, $r9, $r12, $r15, r19;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.lang.Object r4, r5;
        java.util.Collection r6, $r10;
        kotlin.ranges.IntRange $r8, $r11;
        java.lang.Iterable $r13;
        java.util.ArrayList $r14;
        java.lang.Number $r16;
        java.lang.Object[] $r17;
        java.lang.Integer $r18;
        boolean z5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter0: int[];

        $r7 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        r19 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List dataAnchors$default(int[],int,int,java.lang.Object)>($r7, 0, 1, null);

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $r8 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List slice(java.util.List,kotlin.ranges.IntRange)>(r19, $r8);

        $r10 = (java.util.Collection) $r9;

        $i4 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $i3 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i7 = $i4 + $i3;

        $i5 = lengthof $r1;

        $i6 = $i5 / 5;

        $r11 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i7, $i6);

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List slice(java.util.List,kotlin.ranges.IntRange)>(r19, $r11);

        $r13 = (java.lang.Iterable) $r12;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r10, $r13);

        z5 = 0;

        $r14 = new java.util.ArrayList;

        $i8 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i8);

        i12 = 0;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i12 >= i0 goto label2;

        r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i12);

        r5 = r4;

        $r16 = (java.lang.Number) r5;

        i1 = virtualinvoke $r16.<java.lang.Number: int intValue()>();

        r6 = (java.util.Collection) $r14;

        $i10 = r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        $r17 = r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        $i9 = lengthof $r17;

        $i11 = specialinvoke r0.<androidx.compose.runtime.SlotWriter: int dataAnchorToDataIndex(int,int,int)>(i1, $i10, $i9);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        i12 = i12 + 1;

        goto label1;

     label2:
        $r15 = (java.util.List) $r14;

        return $r15;
    }

    private final java.util.List keys()
    {
        androidx.compose.runtime.SlotWriter r0;
        java.util.List $r1, $r8;
        java.util.ArrayList r2, $r7;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, i9;
        java.lang.Object r4, r5;
        int[] $r6;
        java.lang.Number $r9;
        java.util.Collection $r10;
        boolean $z5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        $r6 = r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List keys$default(int[],int,int,java.lang.Object)>($r6, 0, 1, null);

        $r7 = new java.util.ArrayList;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = $r7;

        i9 = 0;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i9 >= i0 goto label6;

        r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i9);

        r5 = r4;

        i1 = i9;

        $r9 = (java.lang.Number) r5;

        virtualinvoke $r9.<java.lang.Number: int intValue()>();

        i2 = i1;

        $i5 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        if i2 < $i5 goto label2;

        $i7 = r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        $i6 = r0.<androidx.compose.runtime.SlotWriter: int groupGapLen>;

        $i8 = $i7 + $i6;

        if i2 < $i8 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        if $z5 == 0 goto label5;

        $r10 = (java.util.Collection) r2;

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(r5);

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r8 = (java.util.List) r2;

        return $r8;
    }

    private final int dataIndexToDataAnchor(int, int, int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 <= i1 goto label1;

        $i4 = i3 - i2;

        $i5 = $i4 - i0;

        $i6 = $i5 + 1;

        $i7 = neg $i6;

        goto label2;

     label1:
        $i7 = i0;

     label2:
        return $i7;
    }

    private final int dataAnchorToDataIndex(int, int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 >= 0 goto label1;

        $i3 = i2 - i1;

        $i4 = $i3 + i0;

        $i5 = $i4 + 1;

        goto label2;

     label1:
        $i5 = i0;

     label2:
        return $i5;
    }

    private final int parentIndexToAnchor(int, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $i5 = i0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $i3 = $i2 - i0;

        $i4 = $i3 - -2;

        $i5 = neg $i4;

     label2:
        return $i5;
    }

    private final int parentAnchorToIndex(int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.runtime.SlotWriter;

        i0 := @parameter0: int;

        if i0 <= -2 goto label1;

        $i3 = i0;

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        $i2 = $i1 + i0;

        $i3 = $i2 - -2;

     label2:
        return $i3;
    }

    private static final boolean groupAsString$isStarted(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.runtime.IntStack $r1;
        boolean $z0, $z1;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $i1 = r0.<androidx.compose.runtime.SlotWriter: int currentGroup>;

        if i0 >= $i1 goto label2;

        $i2 = r0.<androidx.compose.runtime.SlotWriter: int parent>;

        if i0 == $i2 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.IntStack startStack>;

        $i3 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: int indexOf(int)>(i0);

        if $i3 >= 0 goto label1;

        $i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i0);

        $z0 = staticinvoke <androidx.compose.runtime.SlotWriter: boolean groupAsString$isStarted(androidx.compose.runtime.SlotWriter,int)>(r0, $i4);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static final java.lang.Object[] access$getSlots$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $r1 = $r0.<androidx.compose.runtime.SlotWriter: java.lang.Object[] slots>;

        return $r1;
    }

    public static final int access$dataIndexToDataAddress(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, $i1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $i1 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAddress(int)>(i0);

        return $i1;
    }

    public static final int access$dataIndex(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, $i1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $i1 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int)>(i0);

        return $i1;
    }

    public static final boolean access$containsAnyGroupMarks(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: boolean containsAnyGroupMarks(int)>(i0);

        return $z0;
    }

    public static final void access$insertGroups(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void insertGroups(int)>(i0);

        return;
    }

    public static final void access$insertSlots(androidx.compose.runtime.SlotWriter, int, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, i1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void insertSlots(int,int)>(i0, i1);

        return;
    }

    public static final int access$getGroupGapStart$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int groupGapStart>;

        return $i0;
    }

    public static final void access$moveGroupGapTo(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void moveGroupGapTo(int)>(i0);

        return;
    }

    public static final int access$getSlotsGapStart$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int slotsGapStart>;

        return $i0;
    }

    public static final void access$moveSlotGapTo(androidx.compose.runtime.SlotWriter, int, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, i1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void moveSlotGapTo(int,int)>(i0, i1);

        return;
    }

    public static final int[] access$getGroups$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int[] $r1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $r1 = $r0.<androidx.compose.runtime.SlotWriter: int[] groups>;

        return $r1;
    }

    public static final int access$getCurrentSlot$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int currentSlot>;

        return $i0;
    }

    public static final int access$getSlotsGapOwner$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner>;

        return $i0;
    }

    public static final int access$getSlotsGapLen$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int slotsGapLen>;

        return $i0;
    }

    public static final void access$setSlotsGapOwner$p(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.SlotWriter: int slotsGapOwner> = i0;

        return;
    }

    public static final java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $r1 = $r0.<androidx.compose.runtime.SlotWriter: java.util.ArrayList anchors>;

        return $r1;
    }

    public static final boolean access$removeGroups(androidx.compose.runtime.SlotWriter, int, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, i1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: boolean removeGroups(int,int)>(i0, i1);

        return $z0;
    }

    public static final void access$removeSlots(androidx.compose.runtime.SlotWriter, int, int, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, i1, i2;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void removeSlots(int,int,int)>(i0, i1, i2);

        return;
    }

    public static final void access$setNodeCount$p(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.SlotWriter: int nodeCount> = i0;

        return;
    }

    public static final int access$getNodeCount$p(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $i0 = $r0.<androidx.compose.runtime.SlotWriter: int nodeCount>;

        return $i0;
    }

    public static final void access$setCurrentGroup$p(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.SlotWriter: int currentGroup> = i0;

        return;
    }

    public static final void access$setCurrentSlot$p(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.SlotWriter: int currentSlot> = i0;

        return;
    }

    public static final void access$updateContainsMark(androidx.compose.runtime.SlotWriter, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter: void updateContainsMark(int)>(i0);

        return;
    }

    public static final int access$dataIndex(androidx.compose.runtime.SlotWriter, int[], int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int[] $r1;
        int i0, $i1;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        $r1 := @parameter1: int[];

        i0 := @parameter2: int;

        $i1 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: int dataIndex(int[],int)>($r1, i0);

        return $i1;
    }

    public static final int access$dataIndexToDataAnchor(androidx.compose.runtime.SlotWriter, int, int, int, int)
    {
        androidx.compose.runtime.SlotWriter $r0;
        int i0, i1, i2, i3, $i4;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter: int dataIndexToDataAnchor(int,int,int,int)>(i0, i1, i2, i3);

        return $i4;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.SlotWriter$Companion $r0;

        $r0 = new androidx.compose.runtime.SlotWriter$Companion;

        specialinvoke $r0.<androidx.compose.runtime.SlotWriter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotWriter$Companion Companion> = $r0;

        return;
    }

androidx.compose.runtime.SlotWriter$Companion
    private void <init>()
    {
        androidx.compose.runtime.SlotWriter$Companion r0;

        r0 := @this: androidx.compose.runtime.SlotWriter$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.util.List moveGroup(androidx.compose.runtime.SlotWriter, int, androidx.compose.runtime.SlotWriter, boolean, boolean)
    {
        androidx.compose.runtime.SlotWriter$Companion r0;
        androidx.compose.runtime.SlotWriter r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, i45, i46, i47, $i48, i49, i50, i51, i52, i53, $i54, $i55;
        boolean z0, z1, z2, $z3, $z10, z11, z12, $z13, z14, $z15, z16, z17, z18;
        int[] r3, $r5;
        java.lang.Object[] r4, $r7;
        java.util.ArrayList $r9, $r10, $r15, $r16, $r17, $r23;
        java.lang.String $r12, r28;
        kotlin.KotlinNothingValueException $r14;
        java.util.Collection $r18;
        java.util.List $r19, $r26, $r27;
        java.lang.Object $r20;
        androidx.compose.runtime.Anchor r25;

        r0 := @this: androidx.compose.runtime.SlotWriter$Companion;

        r1 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.runtime.SlotWriter;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i1 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i0);

        i2 = i0 + i1;

        i3 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndex(androidx.compose.runtime.SlotWriter,int)>(r1, i0);

        i4 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndex(androidx.compose.runtime.SlotWriter,int)>(r1, i2);

        i5 = i4 - i3;

        z2 = staticinvoke <androidx.compose.runtime.SlotWriter: boolean access$containsAnyGroupMarks(androidx.compose.runtime.SlotWriter,int)>(r1, i0);

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$insertGroups(androidx.compose.runtime.SlotWriter,int)>(r2, i1);

        $i15 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$insertSlots(androidx.compose.runtime.SlotWriter,int,int)>(r2, i5, $i15);

        $i16 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getGroupGapStart$p(androidx.compose.runtime.SlotWriter)>(r1);

        if $i16 >= i2 goto label01;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$moveGroupGapTo(androidx.compose.runtime.SlotWriter,int)>(r1, i2);

     label01:
        $i17 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getSlotsGapStart$p(androidx.compose.runtime.SlotWriter)>(r1);

        if $i17 >= i4 goto label02;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$moveSlotGapTo(androidx.compose.runtime.SlotWriter,int,int)>(r1, i4, i2);

     label02:
        r3 = staticinvoke <androidx.compose.runtime.SlotWriter: int[] access$getGroups$p(androidx.compose.runtime.SlotWriter)>(r2);

        i6 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        $r5 = staticinvoke <androidx.compose.runtime.SlotWriter: int[] access$getGroups$p(androidx.compose.runtime.SlotWriter)>(r1);

        $i20 = i6 * 5;

        $i19 = i0 * 5;

        $i18 = i2 * 5;

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>($r5, r3, $i20, $i19, $i18);

        r4 = staticinvoke <androidx.compose.runtime.SlotWriter: java.lang.Object[] access$getSlots$p(androidx.compose.runtime.SlotWriter)>(r2);

        i7 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getCurrentSlot$p(androidx.compose.runtime.SlotWriter)>(r2);

        $r7 = staticinvoke <androidx.compose.runtime.SlotWriter: java.lang.Object[] access$getSlots$p(androidx.compose.runtime.SlotWriter)>(r1);

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r7, r4, i7, i3, i4);

        i8 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int getParent()>();

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateParentAnchor(int[],int,int)>(r3, i6, i8);

        i9 = i6 - i0;

        i10 = i6 + i1;

        i13 = i7;

        i14 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndex(androidx.compose.runtime.SlotWriter,int[],int)>(r2, r3, i6);

        i11 = i13 - i14;

        $i43 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getSlotsGapOwner$p(androidx.compose.runtime.SlotWriter)>(r2);

        $i44 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getSlotsGapLen$p(androidx.compose.runtime.SlotWriter)>(r2);

        i12 = lengthof r4;

        i45 = i6;

     label03:
        if i45 >= i10 goto label08;

        if i45 == i6 goto label04;

        i46 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>(r3, i45);

        $i42 = i46 + i9;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateParentAnchor(int[],int,int)>(r3, i45, $i42);

     label04:
        $i39 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndex(androidx.compose.runtime.SlotWriter,int[],int)>(r2, r3, i45);

        i47 = $i39 + i11;

        if $i43 >= i45 goto label05;

        $i48 = 0;

        goto label06;

     label05:
        $i48 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getSlotsGapStart$p(androidx.compose.runtime.SlotWriter)>(r2);

     label06:
        $i41 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndexToDataAnchor(androidx.compose.runtime.SlotWriter,int,int,int,int)>(r2, i47, $i48, $i44, i12);

        staticinvoke <androidx.compose.runtime.SlotTableKt: void access$updateDataAnchor(int[],int,int)>(r3, i45, $i41);

        if i45 != $i43 goto label07;

        $i43 = $i43 + 1;

     label07:
        i45 = i45 + 1;

        goto label03;

     label08:
        staticinvoke <androidx.compose.runtime.SlotWriter: void access$setSlotsGapOwner$p(androidx.compose.runtime.SlotWriter,int)>(r2, $i43);

        $r9 = staticinvoke <androidx.compose.runtime.SlotWriter: java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)>(r1);

        $i21 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        i49 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r9, i0, $i21);

        $r10 = staticinvoke <androidx.compose.runtime.SlotWriter: java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)>(r1);

        $i22 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        i50 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r10, i2, $i22);

        if i49 >= i50 goto label11;

        $r23 = staticinvoke <androidx.compose.runtime.SlotWriter: java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)>(r1);

        $r15 = new java.util.ArrayList;

        $i34 = i50 - i49;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i34);

        i51 = i6 - i0;

        i52 = i49;

     label09:
        if i52 >= i50 goto label10;

        $r20 = virtualinvoke $r23.<java.util.ArrayList: java.lang.Object get(int)>(i52);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "sourceAnchors[anchorIndex]");

        r25 = (androidx.compose.runtime.Anchor) $r20;

        $i37 = virtualinvoke r25.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        $i38 = $i37 + i51;

        virtualinvoke r25.<androidx.compose.runtime.Anchor: void setLocation$runtime_release(int)>($i38);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r25);

        i52 = i52 + 1;

        goto label09;

     label10:
        $r16 = staticinvoke <androidx.compose.runtime.SlotWriter: java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)>(r2);

        $i35 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        $i36 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int getSize$runtime_release()>();

        i53 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$locationOf(java.util.ArrayList,int,int)>($r16, $i35, $i36);

        $r17 = staticinvoke <androidx.compose.runtime.SlotWriter: java.util.ArrayList access$getAnchors$p(androidx.compose.runtime.SlotWriter)>(r2);

        $r18 = (java.util.Collection) $r15;

        virtualinvoke $r17.<java.util.ArrayList: boolean addAll(int,java.util.Collection)>(i53, $r18);

        $r19 = virtualinvoke $r23.<java.util.ArrayList: java.util.List subList(int,int)>(i49, i50);

        interfaceinvoke $r19.<java.util.List: void clear()>();

        $r26 = (java.util.List) $r15;

        goto label12;

     label11:
        $r26 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label12:
        $r27 = $r26;

        $i54 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int parent(int)>(i0);

        if z0 == 0 goto label17;

        if $i54 < 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        z11 = $z10;

        if z11 == 0 goto label15;

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void startGroup()>();

        $i32 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        $i33 = $i54 - $i32;

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void advanceBy(int)>($i33);

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void startGroup()>();

     label15:
        $i28 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        $i29 = i0 - $i28;

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void advanceBy(int)>($i29);

        z12 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: boolean removeGroup()>();

        if z11 == 0 goto label16;

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void skipToGroupEnd()>();

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: void skipToGroupEnd()>();

        virtualinvoke r1.<androidx.compose.runtime.SlotWriter: int endGroup()>();

     label16:
        $z13 = z12;

        goto label18;

     label17:
        z14 = staticinvoke <androidx.compose.runtime.SlotWriter: boolean access$removeGroups(androidx.compose.runtime.SlotWriter,int,int)>(r1, i0, i1);

        $i23 = i0 - 1;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$removeSlots(androidx.compose.runtime.SlotWriter,int,int,int)>(r1, i3, i5, $i23);

        $z13 = z14;

     label18:
        if $z13 != 0 goto label19;

        $z15 = 1;

        goto label20;

     label19:
        $z15 = 0;

     label20:
        z16 = $z15;

        z17 = 0;

        if z16 != 0 goto label21;

        z18 = 0;

        r28 = "Unexpectedly removed anchors";

        $r12 = virtualinvoke r28.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r12);

        $r14 = new kotlin.KotlinNothingValueException;

        specialinvoke $r14.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r14;

     label21:
        $i24 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$getNodeCount$p(androidx.compose.runtime.SlotWriter)>(r2);

        $z3 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>(r3, i6);

        if $z3 == 0 goto label22;

        $i55 = 1;

        goto label23;

     label22:
        $i55 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>(r3, i6);

     label23:
        $i25 = $i24 + $i55;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$setNodeCount$p(androidx.compose.runtime.SlotWriter,int)>(r2, $i25);

        if z1 == 0 goto label24;

        $i26 = i6 + i1;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$setCurrentGroup$p(androidx.compose.runtime.SlotWriter,int)>(r2, $i26);

        $i27 = i7 + i5;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$setCurrentSlot$p(androidx.compose.runtime.SlotWriter,int)>(r2, $i27);

     label24:
        if z2 == 0 goto label25;

        staticinvoke <androidx.compose.runtime.SlotWriter: void access$updateContainsMark(androidx.compose.runtime.SlotWriter,int)>(r2, i8);

     label25:
        return $r27;
    }

    public static final java.util.List access$moveGroup(androidx.compose.runtime.SlotWriter$Companion, androidx.compose.runtime.SlotWriter, int, androidx.compose.runtime.SlotWriter, boolean, boolean)
    {
        androidx.compose.runtime.SlotWriter$Companion $r0;
        androidx.compose.runtime.SlotWriter r1, r2;
        int i0;
        boolean z0, z1;
        java.util.List $r3;

        $r0 := @parameter0: androidx.compose.runtime.SlotWriter$Companion;

        r1 := @parameter1: androidx.compose.runtime.SlotWriter;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.compose.runtime.SlotWriter;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r3 = specialinvoke $r0.<androidx.compose.runtime.SlotWriter$Companion: java.util.List moveGroup(androidx.compose.runtime.SlotWriter,int,androidx.compose.runtime.SlotWriter,boolean,boolean)>(r1, i0, r2, z0, z1);

        return $r3;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.runtime.SlotWriter$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.runtime.SlotWriter$Companion: void <init>()>();

        return;
    }

androidx.compose.runtime.SlotWriter$groupSlots$1
<androidx.compose.runtime.SlotWriter$groupSlots$1: int current>
<androidx.compose.runtime.SlotWriter$groupSlots$1: int $end>
<androidx.compose.runtime.SlotWriter$groupSlots$1: androidx.compose.runtime.SlotWriter this$0>
    void <init>(int, int, androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        int $i0, $i1;
        androidx.compose.runtime.SlotWriter $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: androidx.compose.runtime.SlotWriter;

        r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int $end> = $i1;

        r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: androidx.compose.runtime.SlotWriter this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current> = $i0;

        return;
    }

    public final int getCurrent()
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        $i0 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current>;

        return $i0;
    }

    public final void setCurrent(int)
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        int i0;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        i0 := @parameter0: int;

        r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current> = i0;

        return;
    }

    public boolean hasNext()
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        $i1 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current>;

        $i0 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int $end>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        int i0, $i1, $i2;
        boolean $z0;
        androidx.compose.runtime.SlotWriter $r1, $r3;
        java.lang.Object[] $r2;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: androidx.compose.runtime.SlotWriter this$0>;

        $r2 = staticinvoke <androidx.compose.runtime.SlotWriter: java.lang.Object[] access$getSlots$p(androidx.compose.runtime.SlotWriter)>($r1);

        $r3 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: androidx.compose.runtime.SlotWriter this$0>;

        i0 = r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.SlotWriter$groupSlots$1: int current> = $i1;

        $i2 = staticinvoke <androidx.compose.runtime.SlotWriter: int access$dataIndexToDataAddress(androidx.compose.runtime.SlotWriter,int)>($r3, i0);

        $r4 = $r2[$i2];

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public void remove()
    {
        androidx.compose.runtime.SlotWriter$groupSlots$1 r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.runtime.SlotWriter$groupSlots$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

