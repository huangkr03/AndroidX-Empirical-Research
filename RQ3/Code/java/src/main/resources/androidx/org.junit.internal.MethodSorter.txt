org.junit.internal.MethodSorter
<org.junit.internal.MethodSorter: java.util.Comparator DEFAULT>
<org.junit.internal.MethodSorter: java.util.Comparator NAME_ASCENDING>
    static void <clinit>()
    {
        org.junit.internal.MethodSorter$1 $r0;
        org.junit.internal.MethodSorter$2 $r1;

        $r0 = new org.junit.internal.MethodSorter$1;

        specialinvoke $r0.<org.junit.internal.MethodSorter$1: void <init>()>();

        <org.junit.internal.MethodSorter: java.util.Comparator DEFAULT> = $r0;

        $r1 = new org.junit.internal.MethodSorter$2;

        specialinvoke $r1.<org.junit.internal.MethodSorter$2: void <init>()>();

        <org.junit.internal.MethodSorter: java.util.Comparator NAME_ASCENDING> = $r1;

        return;
    }

    public static java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.'annotation'.Annotation $r1;
        org.junit.FixMethodOrder $r2;
        java.util.Comparator $r3;
        java.lang.reflect.Method[] $r4;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/FixMethodOrder;");

        $r2 = (org.junit.FixMethodOrder) $r1;

        $r3 = staticinvoke <org.junit.internal.MethodSorter: java.util.Comparator getSorter(org.junit.FixMethodOrder)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        if $r3 == null goto label1;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r4, $r3);

     label1:
        return $r4;
    }

    private static java.util.Comparator getSorter(org.junit.FixMethodOrder)
    {
        org.junit.FixMethodOrder $r0;
        boolean $z0;
        org.junit.runners.MethodSorters $r1;
        java.util.Comparator $r2;

        $r0 := @parameter0: org.junit.FixMethodOrder;

        if $r0 != null goto label2;

        $z0 = <org.junit.internal.MethodSorter$ConfigHolder: boolean USE_JDK_ORDERING>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = <org.junit.internal.MethodSorter: java.util.Comparator DEFAULT>;

        return $r2;

     label2:
        $r1 = interfaceinvoke $r0.<org.junit.FixMethodOrder: org.junit.runners.MethodSorters value()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.MethodSorters: java.util.Comparator getComparator()>();

        return $r2;
    }

org.junit.internal.MethodSorter$1
    void <init>()
    {
        org.junit.internal.MethodSorter$1 $r0;

        $r0 := @this: org.junit.internal.MethodSorter$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.internal.MethodSorter$1 $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.reflect.Method $r3, $r4;

        $r0 := @this: org.junit.internal.MethodSorter$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.reflect.Method) $r1;

        $r4 = (java.lang.reflect.Method) $r2;

        $i0 = virtualinvoke $r0.<org.junit.internal.MethodSorter$1: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r3, $r4);

        return $i0;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        org.junit.internal.MethodSorter$1 $r0;
        java.lang.reflect.Method $r1, $r2;
        java.lang.String $r3;
        int $i0, $i1;
        java.util.Comparator $r4;

        $r0 := @this: org.junit.internal.MethodSorter$1;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        if $i0 == $i1 goto label2;

        if $i0 >= $i1 goto label1;

        return -1;

     label1:
        return 1;

     label2:
        $r4 = <org.junit.internal.MethodSorter: java.util.Comparator NAME_ASCENDING>;

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $i0;
    }

org.junit.internal.MethodSorter$2
    void <init>()
    {
        org.junit.internal.MethodSorter$2 $r0;

        $r0 := @this: org.junit.internal.MethodSorter$2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.internal.MethodSorter$2 $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.reflect.Method $r3, $r4;

        $r0 := @this: org.junit.internal.MethodSorter$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.reflect.Method) $r1;

        $r4 = (java.lang.reflect.Method) $r2;

        $i0 = virtualinvoke $r0.<org.junit.internal.MethodSorter$2: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r3, $r4);

        return $i0;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        org.junit.internal.MethodSorter$2 $r0;
        java.lang.reflect.Method $r1, $r2;
        java.lang.String $r3, $r4;
        int $i0;

        $r0 := @this: org.junit.internal.MethodSorter$2;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4);

        return $i0;
    }

org.junit.internal.MethodSorter$ConfigHolder
<org.junit.internal.MethodSorter$ConfigHolder: boolean USE_JDK_ORDERING>
    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("org.junit.use_jdk_ordering");

        <org.junit.internal.MethodSorter$ConfigHolder: boolean USE_JDK_ORDERING> = $z0;

        return;
    }

