androidx.datastore.core.SingleProcessDataStore
<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.Storage storage>
<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.CorruptionHandler corruptionHandler>
<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope>
<androidx.datastore.core.SingleProcessDataStore: kotlin.Lazy connection$delegate>
<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data>
<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>
<androidx.datastore.core.SingleProcessDataStore: java.util.List initTasks>
<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.SimpleActor actor>
    public void <init>(androidx.datastore.core.Storage, java.util.List, androidx.datastore.core.CorruptionHandler, kotlinx.coroutines.CoroutineScope)
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        androidx.datastore.core.Storage r1;
        java.util.List r2, $r15;
        androidx.datastore.core.CorruptionHandler r3;
        kotlinx.coroutines.CoroutineScope r4, $r18;
        androidx.datastore.core.SingleProcessDataStore$connection$2 $r5;
        kotlin.jvm.functions.Function0 $r6;
        kotlin.Lazy $r7;
        androidx.datastore.core.SingleProcessDataStore$data$1 $r8;
        kotlin.jvm.functions.Function2 $r9, $r22, $r23;
        kotlinx.coroutines.flow.Flow $r10;
        androidx.datastore.core.UnInitialized $r11;
        androidx.datastore.core.State $r12;
        kotlinx.coroutines.flow.MutableStateFlow $r13;
        java.lang.Iterable $r14;
        androidx.datastore.core.SimpleActor $r16;
        androidx.datastore.core.SingleProcessDataStore$actor$1 $r17;
        androidx.datastore.core.SingleProcessDataStore$actor$2 $r19;
        androidx.datastore.core.SingleProcessDataStore$actor$3 $r20;
        kotlin.jvm.functions.Function1 $r21;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Storage;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.datastore.core.CorruptionHandler;

        r4 := @parameter3: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "storage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "initTasksList");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "corruptionHandler");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "scope");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.Storage storage> = r1;

        r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.CorruptionHandler corruptionHandler> = r3;

        r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope> = r4;

        $r5 = new androidx.datastore.core.SingleProcessDataStore$connection$2;

        specialinvoke $r5.<androidx.datastore.core.SingleProcessDataStore$connection$2: void <init>(androidx.datastore.core.SingleProcessDataStore)>(r0);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        $r7 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r6);

        r0.<androidx.datastore.core.SingleProcessDataStore: kotlin.Lazy connection$delegate> = $r7;

        $r8 = new androidx.datastore.core.SingleProcessDataStore$data$1;

        specialinvoke $r8.<androidx.datastore.core.SingleProcessDataStore$data$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r9 = (kotlin.jvm.functions.Function2) $r8;

        $r10 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r9);

        r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data> = $r10;

        $r11 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r11, "null cannot be cast to non-null type androidx.datastore.core.State<T of androidx.datastore.core.SingleProcessDataStore>");

        $r12 = (androidx.datastore.core.State) $r11;

        $r13 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r12);

        r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow> = $r13;

        $r14 = (java.lang.Iterable) r2;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r14);

        r0.<androidx.datastore.core.SingleProcessDataStore: java.util.List initTasks> = $r15;

        $r16 = new androidx.datastore.core.SimpleActor;

        $r18 = r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        $r17 = new androidx.datastore.core.SingleProcessDataStore$actor$1;

        specialinvoke $r17.<androidx.datastore.core.SingleProcessDataStore$actor$1: void <init>(androidx.datastore.core.SingleProcessDataStore)>(r0);

        $r21 = (kotlin.jvm.functions.Function1) $r17;

        $r19 = <androidx.datastore.core.SingleProcessDataStore$actor$2: androidx.datastore.core.SingleProcessDataStore$actor$2 INSTANCE>;

        $r22 = (kotlin.jvm.functions.Function2) $r19;

        $r20 = new androidx.datastore.core.SingleProcessDataStore$actor$3;

        specialinvoke $r20.<androidx.datastore.core.SingleProcessDataStore$actor$3: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r23 = (kotlin.jvm.functions.Function2) $r20;

        specialinvoke $r16.<androidx.datastore.core.SimpleActor: void <init>(kotlinx.coroutines.CoroutineScope,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function2)>($r18, $r21, $r22, $r23);

        r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.SimpleActor actor> = $r16;

        return;
    }

    public void <init>(androidx.datastore.core.Storage, java.util.List, androidx.datastore.core.CorruptionHandler, kotlinx.coroutines.CoroutineScope, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        androidx.datastore.core.Storage r1;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlinx.coroutines.CompletableJob $r4;
        kotlin.coroutines.CoroutineContext $r5, $r6;
        androidx.datastore.core.handlers.NoOpCorruptionHandler $r7;
        java.util.List r8;
        androidx.datastore.core.CorruptionHandler r9;
        kotlinx.coroutines.CoroutineScope r10;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Storage;

        r8 := @parameter1: java.util.List;

        r9 := @parameter2: androidx.datastore.core.CorruptionHandler;

        r10 := @parameter3: kotlinx.coroutines.CoroutineScope;

        i0 := @parameter4: int;

        r2 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        $r7 = new androidx.datastore.core.handlers.NoOpCorruptionHandler;

        specialinvoke $r7.<androidx.datastore.core.handlers.NoOpCorruptionHandler: void <init>()>();

        r9 = (androidx.datastore.core.CorruptionHandler) $r7;

     label2:
        $i3 = i0 & 8;

        if $i3 == 0 goto label3;

        $r3 = staticinvoke <androidx.datastore.core.Actual_jvmKt: kotlinx.coroutines.CoroutineDispatcher ioDispatcher()>();

        $r4 = staticinvoke <kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r5 = (kotlin.coroutines.CoroutineContext) $r4;

        $r6 = virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r5);

        r10 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r6);

     label3:
        specialinvoke r0.<androidx.datastore.core.SingleProcessDataStore: void <init>(androidx.datastore.core.Storage,java.util.List,androidx.datastore.core.CorruptionHandler,kotlinx.coroutines.CoroutineScope)>(r1, r8, r9, r10);

        return;
    }

    public final androidx.datastore.core.StorageConnection getConnection()
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.datastore.core.StorageConnection $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r1 = r0.<androidx.datastore.core.SingleProcessDataStore: kotlin.Lazy connection$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.datastore.core.StorageConnection) $r2;

        return $r3;
    }

    public kotlinx.coroutines.flow.Flow getData()
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        kotlinx.coroutines.flow.Flow $r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        $r1 = r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data>;

        return $r1;
    }

    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.CompletableDeferred r3;
        androidx.datastore.core.State r4;
        androidx.datastore.core.Message$Update r5, $r8;
        kotlinx.coroutines.flow.MutableStateFlow $r6;
        java.lang.Object $r7, $r11;
        kotlin.coroutines.CoroutineContext $r9;
        androidx.datastore.core.SimpleActor $r10;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = staticinvoke <kotlinx.coroutines.CompletableDeferredKt: kotlinx.coroutines.CompletableDeferred CompletableDeferred$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r6 = r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r4 = (androidx.datastore.core.State) $r7;

        $r8 = new androidx.datastore.core.Message$Update;

        $r9 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r8.<androidx.datastore.core.Message$Update: void <init>(kotlin.jvm.functions.Function2,kotlinx.coroutines.CompletableDeferred,androidx.datastore.core.State,kotlin.coroutines.CoroutineContext)>(r1, r3, r4, $r9);

        r5 = $r8;

        $r10 = r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.SimpleActor actor>;

        virtualinvoke $r10.<androidx.datastore.core.SimpleActor: void offer(java.lang.Object)>(r5);

        $r11 = interfaceinvoke r3.<kotlinx.coroutines.CompletableDeferred: java.lang.Object await(kotlin.coroutines.Continuation)>($r2);

        return $r11;
    }

    private static void getDownstreamFlow$annotations()
    {
        return;
    }

    private final java.lang.Object handleRead(androidx.datastore.core.Message$Read, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore r0;
        androidx.datastore.core.Message$Read r1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.State r3, $r13;
        java.lang.String r4, $r9;
        kotlinx.coroutines.flow.MutableStateFlow $r5;
        java.lang.Object $r6, $r10, $r11, $r14, $r15;
        boolean $z0, $z1, $z2, $z3;
        androidx.datastore.core.UnInitialized $r7;
        java.lang.IllegalStateException $r8;
        kotlin.Unit $r12, $r16, $r17;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Message$Read;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r6 = interfaceinvoke $r5.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.datastore.core.State) $r6;

        $z0 = r3 instanceof androidx.datastore.core.Data;

        if $z0 != 0 goto label5;

        $z1 = r3 instanceof androidx.datastore.core.ReadException;

        if $z1 == 0 goto label2;

        $r13 = virtualinvoke r1.<androidx.datastore.core.Message$Read: androidx.datastore.core.State getLastState()>();

        if r3 != $r13 goto label5;

        $r14 = specialinvoke r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r2);

        $r15 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r14 != $r15 goto label1;

        return $r14;

     label1:
        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r16;

     label2:
        $r7 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r7);

        if $z2 == 0 goto label4;

        $r10 = specialinvoke r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r2);

        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r10 != $r11 goto label3;

        return $r10;

     label3:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label4:
        $z3 = r3 instanceof androidx.datastore.core.Final;

        if $z3 == 0 goto label5;

        r4 = "Can\'t read in final state.";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r17;
    }

    private final java.lang.Object handleUpdate(androidx.datastore.core.Message$Update, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore r0, r2, $r35;
        kotlin.coroutines.Continuation r1, r41, r42, r43;
        androidx.datastore.core.State r3, $r21;
        java.lang.Object $r4, r5, $r7, $r9, $r10, $r11, $r14, $r17, $r24, $r27, $r31, $r36, $r37;
        boolean $z0, $z2, $z3, $z4, $z7;
        kotlin.Unit $r8;
        kotlin.jvm.functions.Function2 $r12, $r25;
        kotlin.coroutines.CoroutineContext $r13, $r26;
        kotlin.Result$Companion $r15, $r30;
        kotlinx.coroutines.flow.MutableStateFlow $r16;
        androidx.datastore.core.Final $r19;
        java.lang.Throwable $r20, $r23, $r29;
        androidx.datastore.core.ReadException $r22;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.Message$Update r32;
        androidx.datastore.core.SingleProcessDataStore$handleUpdate$1 $r33, r38;
        kotlinx.coroutines.CompletableDeferred r34;
        kotlin.NoWhenBranchMatchedException r39;
        java.lang.IllegalStateException r40;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore;

        r32 := @parameter0: androidx.datastore.core.Message$Update;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r1 instanceof androidx.datastore.core.SingleProcessDataStore$handleUpdate$1;

        if $z0 == 0 goto label01;

        $r33 = (androidx.datastore.core.SingleProcessDataStore$handleUpdate$1) r1;

        $i0 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label>;

        $i3 = $i2 - -2147483648;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label> = $i3;

        goto label02;

     label01:
        r38 = new androidx.datastore.core.SingleProcessDataStore$handleUpdate$1;

        specialinvoke r38.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r0, r1);

        $r33 = r38;

     label02:
        $r4 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object result>;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            case 2: goto label13;
            case 3: goto label17;
            default: goto label27;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r2 = r0;

        r34 = virtualinvoke r32.<androidx.datastore.core.Message$Update: kotlinx.coroutines.CompletableDeferred getAck()>();

     label04:
        $r15 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r35 = (androidx.datastore.core.SingleProcessDataStore) r2;

        $r16 = $r35.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r17 = interfaceinvoke $r16.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.datastore.core.State) $r17;

        $z2 = r3 instanceof androidx.datastore.core.Data;

        if $z2 == 0 goto label09;

        $r25 = virtualinvoke r32.<androidx.datastore.core.Message$Update: kotlin.jvm.functions.Function2 getTransform()>();

        $r26 = virtualinvoke r32.<androidx.datastore.core.Message$Update: kotlin.coroutines.CoroutineContext getCallerContext()>();

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r34;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label> = 1;

        r41 = (kotlin.coroutines.Continuation) $r33;

        $r27 = specialinvoke $r35.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r25, $r26, r41);

        $r36 = $r27;

     label05:
        if $r27 != r5 goto label08;

        return r5;

     label06:
        $r14 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r34 = (kotlinx.coroutines.CompletableDeferred) $r14;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r36 = $r4;

     label08:
        goto label23;

     label09:
        $z3 = r3 instanceof androidx.datastore.core.ReadException;

        if $z3 == 0 goto label10;

        $z7 = 1;

        goto label11;

     label10:
        $z7 = r3 instanceof androidx.datastore.core.UnInitialized;

     label11:
        if $z7 == 0 goto label21;

        $r21 = virtualinvoke r32.<androidx.datastore.core.Message$Update: androidx.datastore.core.State getLastState()>();

        if r3 != $r21 goto label20;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r32;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$1> = $r35;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$2> = r34;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label> = 2;

        r42 = (kotlin.coroutines.Continuation) $r33;

        $r24 = specialinvoke $r35.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)>(r42);

     label12:
        if $r24 != r5 goto label15;

        return r5;

     label13:
        $r9 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$2>;

        r34 = (kotlinx.coroutines.CompletableDeferred) $r9;

        $r10 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$1>;

        $r35 = (androidx.datastore.core.SingleProcessDataStore) $r10;

        $r11 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r32 = (androidx.datastore.core.Message$Update) $r11;

     label14:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label15:
        $r12 = virtualinvoke r32.<androidx.datastore.core.Message$Update: kotlin.jvm.functions.Function2 getTransform()>();

        $r13 = virtualinvoke r32.<androidx.datastore.core.Message$Update: kotlin.coroutines.CoroutineContext getCallerContext()>();

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r34;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$1> = null;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$2> = null;

        $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label> = 3;

        r43 = (kotlin.coroutines.Continuation) $r33;

        $r36 = specialinvoke $r35.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r12, $r13, r43);

     label16:
        if $r36 != r5 goto label19;

        return r5;

     label17:
        $r7 = $r33.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r34 = (kotlinx.coroutines.CompletableDeferred) $r7;

     label18:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r36 = $r4;

     label19:
        goto label23;

     label20:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type androidx.datastore.core.ReadException<T of androidx.datastore.core.SingleProcessDataStore.handleUpdate$lambda$0>");

        $r22 = (androidx.datastore.core.ReadException) r3;

        $r23 = virtualinvoke $r22.<androidx.datastore.core.ReadException: java.lang.Throwable getReadException()>();

        throw $r23;

     label21:
        $z4 = r3 instanceof androidx.datastore.core.Final;

        if $z4 == 0 goto label22;

        $r19 = (androidx.datastore.core.Final) r3;

        $r20 = virtualinvoke $r19.<androidx.datastore.core.Final: java.lang.Throwable getFinalException()>();

        throw $r20;

     label22:
        r39 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r39.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw r39;

     label23:
        $r37 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r36);

     label24:
        goto label26;

     label25:
        $r29 := @caughtexception;

        $r30 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r31 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r29);

        $r37 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r31);

     label26:
        staticinvoke <kotlinx.coroutines.CompletableDeferredKt: boolean completeWith(kotlinx.coroutines.CompletableDeferred,java.lang.Object)>(r34, $r37);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label27:
        r40 = new java.lang.IllegalStateException;

        specialinvoke r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r40;

        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label07 to label12 with label25;
        catch java.lang.Throwable from label14 to label16 with label25;
        catch java.lang.Throwable from label18 to label24 with label25;
    }

    private final java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r17;
        java.lang.Throwable r1, $r9;
        java.lang.Object $r2, r3, $r5, $r7;
        boolean $z0;
        kotlin.Unit $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kotlinx.coroutines.flow.MutableStateFlow $r11;
        androidx.datastore.core.SingleProcessDataStore r12;
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 $r13, r14;
        androidx.datastore.core.ReadException r15;
        java.lang.IllegalStateException r16;

        r12 := @this: androidx.datastore.core.SingleProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        if $z0 == 0 goto label01;

        $r13 = (androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1) r0;

        $i0 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i3 = $i2 - -2147483648;

        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = $i3;

        goto label02;

     label01:
        r14 = new androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        specialinvoke r14.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r12, r0);

        $r13 = r14;

     label02:
        $r2 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label04:
        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0> = r12;

        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r13;

        $r7 = specialinvoke r12.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>(r17);

     label05:
        if $r7 != r3 goto label08;

        return r3;

     label06:
        $r5 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0>;

        r12 = (androidx.datastore.core.SingleProcessDataStore) $r5;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r1 = $r9;

        $r11 = r12.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r15 = new androidx.datastore.core.ReadException;

        specialinvoke r15.<androidx.datastore.core.ReadException: void <init>(java.lang.Throwable)>(r1);

        interfaceinvoke $r11.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r15);

        throw r1;

     label10:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label11:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private final java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r17;
        java.lang.Throwable r1, $r9;
        java.lang.Object $r2, r3, $r5, $r7;
        boolean $z0;
        kotlin.Unit $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kotlinx.coroutines.flow.MutableStateFlow $r11;
        androidx.datastore.core.SingleProcessDataStore r12;
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1 $r13, r14;
        androidx.datastore.core.ReadException r15;
        java.lang.IllegalStateException r16;

        r12 := @this: androidx.datastore.core.SingleProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1;

        if $z0 == 0 goto label01;

        $r13 = (androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1) r0;

        $i0 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i3 = $i2 - -2147483648;

        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label> = $i3;

        goto label02;

     label01:
        r14 = new androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1;

        specialinvoke r14.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r12, r0);

        $r13 = r14;

     label02:
        $r2 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label04:
        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0> = r12;

        $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r13;

        $r7 = specialinvoke r12.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>(r17);

     label05:
        if $r7 != r3 goto label08;

        return r3;

     label06:
        $r5 = $r13.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0>;

        r12 = (androidx.datastore.core.SingleProcessDataStore) $r5;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r1 = $r9;

        $r11 = r12.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r15 = new androidx.datastore.core.ReadException;

        specialinvoke r15.<androidx.datastore.core.ReadException: void <init>(java.lang.Throwable)>(r1);

        interfaceinvoke $r11.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r15);

     label10:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label11:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private final java.lang.Object readAndInit(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r59, r60;
        kotlin.jvm.functions.Function2 r1;
        java.lang.Object $r2, r3, $r5, $r6, $r7, $r8, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r30, $r36, $r44, r49;
        boolean $z0, $z1, $z2, $z3, $z4;
        kotlinx.coroutines.flow.MutableStateFlow $r12, $r29, $r35;
        kotlin.Unit $r13, r51;
        java.util.List $r28;
        androidx.datastore.core.UnInitialized $r31;
        java.lang.String $r34, r40;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.datastore.core.SingleProcessDataStore r38;
        androidx.datastore.core.SingleProcessDataStore$readAndInit$1 $r39, r52;
        kotlinx.coroutines.sync.Mutex r41, $r50;
        kotlin.jvm.internal.Ref$ObjectRef r42, r43, r54;
        kotlin.jvm.internal.Ref$BooleanRef r45, r55;
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 r46, r56;
        java.lang.Iterable $r47;
        java.util.Iterator $r48;
        java.lang.IllegalStateException r53, r58;
        androidx.datastore.core.Data r57;

        r38 := @this: androidx.datastore.core.SingleProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.SingleProcessDataStore$readAndInit$1;

        if $z0 == 0 goto label01;

        $r39 = (androidx.datastore.core.SingleProcessDataStore$readAndInit$1) r0;

        $i0 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label>;

        $i3 = $i2 - -2147483648;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label> = $i3;

        goto label02;

     label01:
        r52 = new androidx.datastore.core.SingleProcessDataStore$readAndInit$1;

        specialinvoke r52.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r38, r0);

        $r39 = r52;

     label02:
        $r2 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label08;
            case 2: goto label11;
            case 3: goto label15;
            default: goto label20;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r29 = r38.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r30 = interfaceinvoke $r29.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r31 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r30, $r31);

        if $z2 != 0 goto label04;

        $r35 = r38.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r36 = interfaceinvoke $r35.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $z3 = $r36 instanceof androidx.datastore.core.ReadException;

        if $z3 == 0 goto label05;

     label04:
        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        if $z4 != 0 goto label07;

        r40 = "Check failed.";

        r53 = new java.lang.IllegalStateException;

        $r34 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw r53;

     label07:
        r41 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        r54 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke r54.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r42 = r54;

        r43 = r42;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0> = r38;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1> = r41;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2> = r42;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3> = r43;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label> = 1;

        r59 = (kotlin.coroutines.Continuation) $r39;

        $r44 = specialinvoke r38.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)>(r59);

        if $r44 != r3 goto label09;

        return r3;

     label08:
        $r22 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3>;

        r43 = (kotlin.jvm.internal.Ref$ObjectRef) $r22;

        $r23 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2>;

        r42 = (kotlin.jvm.internal.Ref$ObjectRef) $r23;

        $r24 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        r41 = (kotlinx.coroutines.sync.Mutex) $r24;

        $r25 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r38 = (androidx.datastore.core.SingleProcessDataStore) $r25;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r44 = $r2;

     label09:
        r43.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r44;

        r55 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke r55.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r45 = r55;

        r56 = new androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1;

        specialinvoke r56.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: void <init>(kotlinx.coroutines.sync.Mutex,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,androidx.datastore.core.SingleProcessDataStore)>(r41, r45, r42, r38);

        r46 = r56;

        $r28 = r38.<androidx.datastore.core.SingleProcessDataStore: java.util.List initTasks>;

        if $r28 == null goto label14;

        $r47 = (java.lang.Iterable) $r28;

        $r48 = interfaceinvoke $r47.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r1 = (kotlin.jvm.functions.Function2) r49;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0> = r38;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1> = r41;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2> = r42;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3> = r45;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$4> = r46;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$5> = $r48;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label> = 2;

        $r21 = interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r46, $r39);

        if $r21 != r3 goto label12;

        return r3;

     label11:
        $r14 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$5>;

        $r48 = (java.util.Iterator) $r14;

        $r15 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$4>;

        r46 = (androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1) $r15;

        $r16 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3>;

        r45 = (kotlin.jvm.internal.Ref$BooleanRef) $r16;

        $r17 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2>;

        r42 = (kotlin.jvm.internal.Ref$ObjectRef) $r17;

        $r18 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        r41 = (kotlinx.coroutines.sync.Mutex) $r18;

        $r19 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r38 = (androidx.datastore.core.SingleProcessDataStore) $r19;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label12:
        goto label10;

     label13:
        goto label14;

     label14:
        r38.<androidx.datastore.core.SingleProcessDataStore: java.util.List initTasks> = null;

        $r50 = r41;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0> = r38;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1> = r42;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2> = r45;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3> = r41;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$4> = null;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$5> = null;

        $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label> = 3;

        r60 = (kotlin.coroutines.Continuation) $r39;

        $r20 = interfaceinvoke r41.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r60);

        if $r20 != r3 goto label16;

        return r3;

     label15:
        $r5 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3>;

        $r50 = (kotlinx.coroutines.sync.Mutex) $r5;

        $r6 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2>;

        r45 = (kotlin.jvm.internal.Ref$BooleanRef) $r6;

        $r7 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        r42 = (kotlin.jvm.internal.Ref$ObjectRef) $r7;

        $r8 = $r39.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r38 = (androidx.datastore.core.SingleProcessDataStore) $r8;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label16:
        r45.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        r51 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r50.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label17;

     label17:
        $r12 = r38.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r57 = new androidx.datastore.core.Data;

        $r11 = r42.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r10 = r42.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        if $r10 == null goto label18;

        $i5 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();

        goto label19;

     label18:
        $i5 = 0;

     label19:
        specialinvoke r57.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r11, $i5, 0, 4, null);

        interfaceinvoke $r12.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r57);

        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label20:
        r58 = new java.lang.IllegalStateException;

        specialinvoke r58.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r58;
    }

    private final java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r25, r26;
        java.lang.Throwable r1, $r13, $r14, $r15, r27;
        java.lang.Object $r2, r3, $r5, $r6, $r7, $r9, $r10, $r18, r22;
        boolean $z0;
        androidx.datastore.core.StorageConnection $r8, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.SingleProcessDataStore r16, r19, r21;
        androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1 $r17, r23;
        androidx.datastore.core.CorruptionException r20;
        java.lang.IllegalStateException r24;

        r16 := @this: androidx.datastore.core.SingleProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1;

        if $z0 == 0 goto label01;

        $r17 = (androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1) r0;

        $i0 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i3 = $i2 - -2147483648;

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = $i3;

        goto label02;

     label01:
        r23 = new androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1;

        specialinvoke r23.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r16, r0);

        $r17 = r23;

     label02:
        $r2 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label09;
            default: goto label14;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r11 = virtualinvoke r16.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.StorageConnection getConnection()>();

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r16;

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = 1;

        r25 = (kotlin.coroutines.Continuation) $r17;

        $r18 = staticinvoke <androidx.datastore.core.StorageConnectionKt: java.lang.Object readData(androidx.datastore.core.StorageConnection,kotlin.coroutines.Continuation)>($r11, r25);

        if $r18 != r3 goto label05;

        return r3;

     label04:
        $r10 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r19 = (androidx.datastore.core.SingleProcessDataStore) $r10;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r18 = $r2;

     label05:
        return $r18;

     label06:
        $r6 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>;

        r20 = (androidx.datastore.core.CorruptionException) $r6;

        $r7 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r21 = (androidx.datastore.core.SingleProcessDataStore) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        r22 = $r2;

     label07:
        $r8 = virtualinvoke r21.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.StorageConnection getConnection()>();

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r20;

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1> = r22;

        $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = 3;

        r26 = (kotlin.coroutines.Continuation) $r17;

        $r9 = staticinvoke <androidx.datastore.core.StorageConnectionKt: java.lang.Object writeData(androidx.datastore.core.StorageConnection,java.lang.Object,kotlin.coroutines.Continuation)>($r8, r22, r26);

     label08:
        if $r9 != r3 goto label11;

        return r3;

     label09:
        r22 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>;

        $r5 = $r17.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r20 = (androidx.datastore.core.CorruptionException) $r5;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        r1 = $r13;

        $r15 = (java.lang.Throwable) r20;

        $r14 = (java.lang.Throwable) r1;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>($r15, $r14);

        r27 = (java.lang.Throwable) r20;

        throw r27;

     label13:
        return r22;

     label14:
        r24 = new java.lang.IllegalStateException;

        specialinvoke r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r24;

        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label10 to label11 with label12;
    }

    private final java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        kotlin.jvm.functions.Function2 r0, $r18;
        kotlin.coroutines.CoroutineContext r1;
        kotlin.coroutines.Continuation r2, r31, r32;
        java.lang.Object $r3, r4, $r6, $r9, $r10, $r11, $r13, $r16, r23, $r24, r25, $r26;
        boolean $z0, $z1;
        kotlinx.coroutines.flow.MutableStateFlow $r8, $r15;
        androidx.datastore.core.StorageConnection $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.datastore.core.SingleProcessDataStore r20;
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1 $r21, r27;
        androidx.datastore.core.Data r22, r29;
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r28;
        java.lang.IllegalStateException r30;

        r20 := @this: androidx.datastore.core.SingleProcessDataStore;

        r0 := @parameter0: kotlin.jvm.functions.Function2;

        r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = r2 instanceof androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1;

        if $z0 == 0 goto label01;

        $r21 = (androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1) r2;

        $i0 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i3 = $i2 - -2147483648;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label> = $i3;

        goto label02;

     label01:
        r27 = new androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1;

        specialinvoke r27.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r20, r2);

        $r21 = r27;

     label02:
        $r3 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label07;
            default: goto label12;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r15 = r20.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r16 = interfaceinvoke $r15.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r16, "null cannot be cast to non-null type androidx.datastore.core.Data<T of androidx.datastore.core.SingleProcessDataStore>");

        r22 = (androidx.datastore.core.Data) $r16;

        virtualinvoke r22.<androidx.datastore.core.Data: void checkHashCode()>();

        r23 = virtualinvoke r22.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        r28 = new androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        specialinvoke r28.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>(r0, r23, null);

        $r18 = (kotlin.jvm.functions.Function2) r28;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0> = r20;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1> = r22;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2> = r23;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label> = 1;

        r31 = (kotlin.coroutines.Continuation) $r21;

        $r24 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(r1, $r18, r31);

        if $r24 != r4 goto label05;

        return r4;

     label04:
        r23 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2>;

        $r10 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1>;

        r22 = (androidx.datastore.core.Data) $r10;

        $r11 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0>;

        r20 = (androidx.datastore.core.SingleProcessDataStore) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r24 = $r3;

     label05:
        r25 = $r24;

        virtualinvoke r22.<androidx.datastore.core.Data: void checkHashCode()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r23, r25);

        if $z1 == 0 goto label06;

        $r26 = r23;

        goto label11;

     label06:
        $r12 = virtualinvoke r20.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.StorageConnection getConnection()>();

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0> = r20;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1> = r25;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2> = null;

        $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label> = 2;

        r32 = (kotlin.coroutines.Continuation) $r21;

        $r13 = staticinvoke <androidx.datastore.core.StorageConnectionKt: java.lang.Object writeData(androidx.datastore.core.StorageConnection,java.lang.Object,kotlin.coroutines.Continuation)>($r12, r25, r32);

        if $r13 != r4 goto label08;

        return r4;

     label07:
        r25 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1>;

        $r6 = $r21.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0>;

        r20 = (androidx.datastore.core.SingleProcessDataStore) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label08:
        $r8 = r20.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r29 = new androidx.datastore.core.Data;

        $r9 = r25;

        if r25 == null goto label09;

        $i5 = virtualinvoke r25.<java.lang.Object: int hashCode()>();

        goto label10;

     label09:
        $i5 = 0;

     label10:
        specialinvoke r29.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r9, $i5, 0, 4, null);

        interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r29);

        $r26 = r25;

     label11:
        return $r26;

     label12:
        r30 = new java.lang.IllegalStateException;

        specialinvoke r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r30;
    }

    public static final java.lang.Object access$handleRead(androidx.datastore.core.SingleProcessDataStore, androidx.datastore.core.Message$Read, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        androidx.datastore.core.Message$Read r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter1: androidx.datastore.core.Message$Read;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object handleRead(androidx.datastore.core.Message$Read,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$handleUpdate(androidx.datastore.core.SingleProcessDataStore, androidx.datastore.core.Message$Update, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        androidx.datastore.core.Message$Update r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter1: androidx.datastore.core.Message$Update;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object handleUpdate(androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$readAndInitOrPropagateAndThrowFailure(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readAndInitOrPropagateFailure(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readAndInit(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readDataOrHandleCorruption(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$transformAndWrite(androidx.datastore.core.SingleProcessDataStore, kotlin.jvm.functions.Function2, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.CoroutineContext r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        r1 := @parameter1: kotlin.jvm.functions.Function2;

        r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>(r1, r2, $r3);

        return $r4;
    }

    public static final androidx.datastore.core.Storage access$getStorage$p(androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        androidx.datastore.core.Storage $r1;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.Storage storage>;

        return $r1;
    }

    public static final kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        return $r1;
    }

    public static final androidx.datastore.core.SimpleActor access$getActor$p(androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore $r0;
        androidx.datastore.core.SimpleActor $r1;

        $r0 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.SimpleActor actor>;

        return $r1;
    }

androidx.datastore.core.SingleProcessDataStore$actor$1
<androidx.datastore.core.SingleProcessDataStore$actor$1: androidx.datastore.core.SingleProcessDataStore this$0>
    void <init>(androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$1 r0;
        androidx.datastore.core.SingleProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$1;

        $r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        r0.<androidx.datastore.core.SingleProcessDataStore$actor$1: androidx.datastore.core.SingleProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Throwable)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$1 r0;
        java.lang.Throwable r1, r2, r4;
        androidx.datastore.core.SingleProcessDataStore r3, $r5;
        androidx.datastore.core.StorageConnection $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r7;
        androidx.datastore.core.Final $r8;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$1;

        r1 := @parameter0: java.lang.Throwable;

        if r1 == null goto label1;

        r2 = r1;

        r3 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        r4 = r2;

        $r7 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.SingleProcessDataStore)>(r3);

        $r8 = new androidx.datastore.core.Final;

        specialinvoke $r8.<androidx.datastore.core.Final: void <init>(java.lang.Throwable)>(r4);

        interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r8);

        goto label1;

     label1:
        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.StorageConnection getConnection()>();

        interfaceinvoke $r6.<androidx.datastore.core.StorageConnection: void close()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$1 r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$actor$1: void invoke(java.lang.Throwable)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.datastore.core.SingleProcessDataStore$actor$2
<androidx.datastore.core.SingleProcessDataStore$actor$2: androidx.datastore.core.SingleProcessDataStore$actor$2 INSTANCE>
    void <init>()
    {
        androidx.datastore.core.SingleProcessDataStore$actor$2 r0;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.datastore.core.Message, java.lang.Throwable)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$2 r0;
        androidx.datastore.core.Message r1;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        androidx.datastore.core.Message$Update $r3;
        kotlinx.coroutines.CompletableDeferred $r4;
        java.util.concurrent.CancellationException $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$2;

        r1 := @parameter0: androidx.datastore.core.Message;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "msg");

        $z0 = r1 instanceof androidx.datastore.core.Message$Update;

        if $z0 == 0 goto label2;

        $r3 = (androidx.datastore.core.Message$Update) r1;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.Message$Update: kotlinx.coroutines.CompletableDeferred getAck()>();

        $r6 = r2;

        if r2 != null goto label1;

        $r5 = new java.util.concurrent.CancellationException;

        specialinvoke $r5.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("DataStore scope was cancelled before updateData could complete");

        $r6 = (java.lang.Throwable) $r5;

     label1:
        interfaceinvoke $r4.<kotlinx.coroutines.CompletableDeferred: boolean completeExceptionally(java.lang.Throwable)>($r6);

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$2 r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3;
        androidx.datastore.core.Message $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message) r1;

        $r3 = (java.lang.Throwable) r2;

        virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$actor$2: void invoke(androidx.datastore.core.Message,java.lang.Throwable)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.datastore.core.SingleProcessDataStore$actor$2 $r0;

        $r0 = new androidx.datastore.core.SingleProcessDataStore$actor$2;

        specialinvoke $r0.<androidx.datastore.core.SingleProcessDataStore$actor$2: void <init>()>();

        <androidx.datastore.core.SingleProcessDataStore$actor$2: androidx.datastore.core.SingleProcessDataStore$actor$2 INSTANCE> = $r0;

        return;
    }

androidx.datastore.core.SingleProcessDataStore$actor$3
<androidx.datastore.core.SingleProcessDataStore$actor$3: int label>
<androidx.datastore.core.SingleProcessDataStore$actor$3: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$actor$3: androidx.datastore.core.SingleProcessDataStore this$0>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$3 r0;
        androidx.datastore.core.SingleProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$3;

        $r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: androidx.datastore.core.SingleProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$3 r0;
        java.lang.Object $r1, r4, $r5, $r9, $r13;
        androidx.datastore.core.Message r2, r3;
        int $i0;
        boolean $z0, $z1;
        androidx.datastore.core.SingleProcessDataStore $r6, $r10;
        androidx.datastore.core.Message$Update $r7;
        kotlin.coroutines.Continuation $r8, $r12;
        androidx.datastore.core.Message$Read $r11;
        java.lang.IllegalStateException $r14;
        kotlin.Unit $r15;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$3;

        $r1 := @parameter0: java.lang.Object;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label5;
            default: goto label7;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: java.lang.Object L$0>;

        r2 = (androidx.datastore.core.Message) $r5;

        r3 = r2;

        $z0 = r3 instanceof androidx.datastore.core.Message$Read;

        if $z0 == 0 goto label4;

        $r10 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r11 = (androidx.datastore.core.Message$Read) r2;

        $r12 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: int label> = 1;

        $r13 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$handleRead(androidx.datastore.core.SingleProcessDataStore,androidx.datastore.core.Message$Read,kotlin.coroutines.Continuation)>($r10, $r11, $r12);

        if $r13 != r4 goto label3;

        return r4;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        goto label6;

     label4:
        $z1 = r3 instanceof androidx.datastore.core.Message$Update;

        if $z1 == 0 goto label6;

        $r6 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r7 = (androidx.datastore.core.Message$Update) r2;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: int label> = 2;

        $r9 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$handleUpdate(androidx.datastore.core.SingleProcessDataStore,androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>($r6, $r7, $r8);

        if $r9 != r4 goto label6;

        return r4;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label6:
        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r15;

     label7:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r14;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$3 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.SingleProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$3;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.SingleProcessDataStore$actor$3;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: androidx.datastore.core.SingleProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.SingleProcessDataStore$actor$3: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.SingleProcessDataStore$actor$3: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.datastore.core.Message, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$3 r0, $r5;
        androidx.datastore.core.Message r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$3;

        r1 := @parameter0: androidx.datastore.core.Message;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.SingleProcessDataStore$actor$3) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.SingleProcessDataStore$actor$3: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$actor$3 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.Message $r4;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$actor$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$actor$3: java.lang.Object invoke(androidx.datastore.core.Message,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.SingleProcessDataStore$connection$2
<androidx.datastore.core.SingleProcessDataStore$connection$2: androidx.datastore.core.SingleProcessDataStore this$0>
    void <init>(androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore$connection$2 r0;
        androidx.datastore.core.SingleProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$connection$2;

        $r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        r0.<androidx.datastore.core.SingleProcessDataStore$connection$2: androidx.datastore.core.SingleProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.datastore.core.StorageConnection invoke()
    {
        androidx.datastore.core.SingleProcessDataStore$connection$2 r0;
        androidx.datastore.core.SingleProcessDataStore $r1;
        androidx.datastore.core.Storage $r2;
        androidx.datastore.core.StorageConnection $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$connection$2;

        $r1 = r0.<androidx.datastore.core.SingleProcessDataStore$connection$2: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.Storage access$getStorage$p(androidx.datastore.core.SingleProcessDataStore)>($r1);

        $r3 = interfaceinvoke $r2.<androidx.datastore.core.Storage: androidx.datastore.core.StorageConnection createConnection()>();

        return $r3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.SingleProcessDataStore$connection$2 r0;
        androidx.datastore.core.StorageConnection $r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$connection$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$connection$2: androidx.datastore.core.StorageConnection invoke()>();

        return $r1;
    }

androidx.datastore.core.SingleProcessDataStore$data$1$1
<androidx.datastore.core.SingleProcessDataStore$data$1$1: int label>
<androidx.datastore.core.SingleProcessDataStore$data$1$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>
    void <init>(androidx.datastore.core.State, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$1 r0;
        androidx.datastore.core.State $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$1;

        $r1 := @parameter0: androidx.datastore.core.State;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$1 r0;
        java.lang.Object $r1, $r4;
        androidx.datastore.core.State r2, $r5, $r6, $r7;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r8;
        java.lang.Boolean $r9;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label6;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: java.lang.Object L$0>;

        r2 = (androidx.datastore.core.State) $r4;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        $z0 = $r5 instanceof androidx.datastore.core.Data;

        if $z0 != 0 goto label2;

        $r6 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        $z1 = $r6 instanceof androidx.datastore.core.Final;

        if $z1 == 0 goto label3;

     label2:
        $z2 = 0;

        goto label5;

     label3:
        $r7 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        if r2 != $r7 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r9 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z2);

        return $r9;

     label6:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.State $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.SingleProcessDataStore$data$1$1;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        specialinvoke $r4.<androidx.datastore.core.SingleProcessDataStore$data$1$1: void <init>(androidx.datastore.core.State,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.SingleProcessDataStore$data$1$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.datastore.core.State, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$1 r0, $r5;
        androidx.datastore.core.State r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$1;

        r1 := @parameter0: androidx.datastore.core.State;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.SingleProcessDataStore$data$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.SingleProcessDataStore$data$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.State $r4;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.State) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$data$1$1: java.lang.Object invoke(androidx.datastore.core.State,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>
    public void <init>(androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>
    public void <init>(kotlinx.coroutines.flow.FlowCollector)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r0;
        kotlinx.coroutines.flow.FlowCollector $r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r0;
        java.lang.Object r1, $r3, r4, r5, $r17, $r18;
        kotlin.coroutines.Continuation r2, $r11, r29;
        kotlinx.coroutines.flow.FlowCollector r6;
        androidx.datastore.core.State r7, r8;
        boolean $z1, $z2, $z3, $z4, $z5;
        kotlin.Unit $r10;
        java.lang.String $r14, $r15;
        androidx.datastore.core.Data $r16;
        androidx.datastore.core.Final $r19;
        java.lang.Throwable $r20, $r22;
        androidx.datastore.core.ReadException $r21;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 $r24, r25;
        java.lang.IllegalStateException r26, r28;
        kotlin.NoWhenBranchMatchedException r27;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $z1 = r2 instanceof androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        if $z1 == 0 goto label01;

        $r24 = (androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1) r2;

        $i0 = $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i3 = $i2 - -2147483648;

        $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i3;

        goto label02;

     label01:
        r25 = new androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        specialinvoke r25.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: void <init>(androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)>(r0, r2);

        $r24 = r25;

     label02:
        $r3 = $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label09;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r5 = r1;

        r6 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>;

        $r11 = (kotlin.coroutines.Continuation) $r24;

        r7 = (androidx.datastore.core.State) r5;

        r8 = r7;

        $z2 = r8 instanceof androidx.datastore.core.ReadException;

        if $z2 == 0 goto label04;

        $r21 = (androidx.datastore.core.ReadException) r7;

        $r22 = virtualinvoke $r21.<androidx.datastore.core.ReadException: java.lang.Throwable getReadException()>();

        throw $r22;

     label04:
        $z3 = r8 instanceof androidx.datastore.core.Final;

        if $z3 == 0 goto label05;

        $r19 = (androidx.datastore.core.Final) r7;

        $r20 = virtualinvoke $r19.<androidx.datastore.core.Final: java.lang.Throwable getFinalException()>();

        throw $r20;

     label05:
        $z4 = r8 instanceof androidx.datastore.core.Data;

        if $z4 == 0 goto label06;

        $r16 = (androidx.datastore.core.Data) r7;

        $r17 = virtualinvoke $r16.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        goto label08;

     label06:
        $z5 = r8 instanceof androidx.datastore.core.UnInitialized;

        if $z5 == 0 goto label07;

        r26 = new java.lang.IllegalStateException;

        $r14 = "This is a bug in DataStore. Please file a bug at: https://issuetracker.google.com/issues/new?component=907884&template=1466542";

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r26;

     label07:
        r27 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r27.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw r27;

     label08:
        $r24.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = 1;

        r29 = (kotlin.coroutines.Continuation) $r24;

        $r18 = interfaceinvoke r6.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r17, r29);

        if $r18 != r4 goto label10;

        return r4;

     label09:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label10:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label11:
        r28 = new java.lang.IllegalStateException;

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r28;
    }

androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1
<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>
    public void <init>(kotlinx.coroutines.flow.Flow)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.Flow r1;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.FlowCollector r1, $r6;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r4;
        kotlinx.coroutines.flow.Flow $r5;
        java.lang.Object $r7, $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>;

        $r4 = new androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        specialinvoke $r4.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: void <init>(kotlinx.coroutines.flow.FlowCollector)>(r1);

        $r6 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        $r7 = interfaceinvoke $r5.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r6, $r2);

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r8 goto label1;

        return $r7;

     label1:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r9;
    }

androidx.datastore.core.SingleProcessDataStore$data$1
<androidx.datastore.core.SingleProcessDataStore$data$1: int label>
<androidx.datastore.core.SingleProcessDataStore$data$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1 r0;
        androidx.datastore.core.SingleProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1;

        $r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1 r0;
        java.lang.Object $r1, r4, $r6, $r9, $r18;
        kotlinx.coroutines.flow.FlowCollector $r2;
        androidx.datastore.core.State r3;
        int $i0;
        kotlin.Unit $r5;
        androidx.datastore.core.SingleProcessDataStore $r7, $r10, $r19;
        kotlinx.coroutines.flow.MutableStateFlow $r8, $r11;
        boolean $z3;
        androidx.datastore.core.SingleProcessDataStore$data$1$1 $r12;
        kotlinx.coroutines.flow.Flow $r13, $r16, $r22;
        kotlin.jvm.functions.Function2 $r14;
        androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 $r15;
        kotlin.coroutines.Continuation $r17;
        androidx.datastore.core.SimpleActor $r20;
        androidx.datastore.core.Message$Read $r21;
        java.lang.IllegalStateException $r23;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1;

        $r1 := @parameter0: java.lang.Object;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label3;
            default: goto label5;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r6 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r7 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r8 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.SingleProcessDataStore)>($r7);

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.datastore.core.State) $r9;

        $z3 = r3 instanceof androidx.datastore.core.Data;

        if $z3 != 0 goto label2;

        $r19 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r20 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.SimpleActor access$getActor$p(androidx.datastore.core.SingleProcessDataStore)>($r19);

        $r21 = new androidx.datastore.core.Message$Read;

        specialinvoke $r21.<androidx.datastore.core.Message$Read: void <init>(androidx.datastore.core.State)>(r3);

        virtualinvoke $r20.<androidx.datastore.core.SimpleActor: void offer(java.lang.Object)>($r21);

     label2:
        $r10 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r11 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.SingleProcessDataStore)>($r10);

        $r13 = (kotlinx.coroutines.flow.Flow) $r11;

        $r12 = new androidx.datastore.core.SingleProcessDataStore$data$1$1;

        specialinvoke $r12.<androidx.datastore.core.SingleProcessDataStore$data$1$1: void <init>(androidx.datastore.core.State,kotlin.coroutines.Continuation)>(r3, null);

        $r14 = (kotlin.jvm.functions.Function2) $r12;

        $r15 = new androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        $r22 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow dropWhile(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r13, $r14);

        specialinvoke $r15.<androidx.datastore.core.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow)>($r22);

        $r16 = (kotlinx.coroutines.flow.Flow) $r15;

        $r17 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.SingleProcessDataStore$data$1: int label> = 1;

        $r18 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object emitAll(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r2, $r16, $r17);

        if $r18 != r4 goto label4;

        return r4;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label4:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;

     label5:
        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r23;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.SingleProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.SingleProcessDataStore$data$1;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$data$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.SingleProcessDataStore$data$1: void <init>(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.SingleProcessDataStore$data$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1 r0, $r5;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$data$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.SingleProcessDataStore$data$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.SingleProcessDataStore$data$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$data$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$data$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.SingleProcessDataStore$handleUpdate$1
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$1>
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object L$2>
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$handleUpdate$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$handleUpdate$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$handleUpdate$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$handleUpdate$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$handleUpdate$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$handleUpdate(androidx.datastore.core.SingleProcessDataStore,androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$readAndInit$1
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$1>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$2>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$3>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$4>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object L$5>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$readAndInit(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$3>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$4>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 this$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1 r0;
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: java.lang.Object updateData(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlinx.coroutines.sync.Mutex $updateLock>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>
<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: androidx.datastore.core.SingleProcessDataStore this$0>
    void <init>(kotlinx.coroutines.sync.Mutex, kotlin.jvm.internal.Ref$BooleanRef, kotlin.jvm.internal.Ref$ObjectRef, androidx.datastore.core.SingleProcessDataStore)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 r0;
        kotlinx.coroutines.sync.Mutex $r1;
        kotlin.jvm.internal.Ref$BooleanRef $r2;
        kotlin.jvm.internal.Ref$ObjectRef $r3;
        androidx.datastore.core.SingleProcessDataStore $r4;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1;

        $r1 := @parameter0: kotlinx.coroutines.sync.Mutex;

        $r2 := @parameter1: kotlin.jvm.internal.Ref$BooleanRef;

        $r3 := @parameter2: kotlin.jvm.internal.Ref$ObjectRef;

        $r4 := @parameter3: androidx.datastore.core.SingleProcessDataStore;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlinx.coroutines.sync.Mutex $updateLock> = $r1;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete> = $r2;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData> = $r3;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: androidx.datastore.core.SingleProcessDataStore this$0> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1 r0;
        kotlin.coroutines.Continuation r1, r36, r37;
        java.lang.Object $r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r29, r30, r31;
        boolean $z0, $z1, $z2;
        androidx.datastore.core.StorageConnection $r11;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r22, r32;
        kotlin.jvm.functions.Function2 r23;
        androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1 $r24, r33;
        kotlinx.coroutines.sync.Mutex $r25;
        kotlin.jvm.internal.Ref$BooleanRef r26;
        kotlin.jvm.internal.Ref$ObjectRef r27;
        androidx.datastore.core.SingleProcessDataStore r28;
        java.lang.IllegalStateException r34, r35;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1;

        r23 := @parameter0: kotlin.jvm.functions.Function2;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r1 instanceof androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1;

        if $z0 == 0 goto label01;

        $r24 = (androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1) r1;

        $i0 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label>;

        $i3 = $i2 - -2147483648;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label> = $i3;

        goto label02;

     label01:
        r33 = new androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1;

        specialinvoke r33.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: void <init>(androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1,kotlin.coroutines.Continuation)>(r0, r1);

        $r24 = r33;

     label02:
        $r2 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label08;
            case 3: goto label12;
            default: goto label20;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r25 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlinx.coroutines.sync.Mutex $updateLock>;

        r26 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>;

        r27 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>;

        r28 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0> = r23;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1> = $r25;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2> = r26;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$3> = r27;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$4> = r28;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label> = 1;

        r36 = (kotlin.coroutines.Continuation) $r24;

        $r20 = interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r36);

        if $r20 != r3 goto label05;

        return r3;

     label04:
        $r13 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$4>;

        r28 = (androidx.datastore.core.SingleProcessDataStore) $r13;

        $r14 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$3>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r14;

        $r15 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2>;

        r26 = (kotlin.jvm.internal.Ref$BooleanRef) $r15;

        $r16 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r16;

        $r17 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0>;

        r23 = (kotlin.jvm.functions.Function2) $r17;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $z2 = r26.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z2 == 0 goto label06;

        r34 = new java.lang.IllegalStateException;

        specialinvoke r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("InitializerApi.updateData should not be called after initialization is complete.");

        throw r34;

     label06:
        $r18 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0> = $r25;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1> = r27;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2> = r28;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$3> = null;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$4> = null;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label> = 2;

        $r29 = interfaceinvoke r23.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r18, $r24);

     label07:
        if $r29 != r3 goto label10;

        return r3;

     label08:
        $r7 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2>;

        r28 = (androidx.datastore.core.SingleProcessDataStore) $r7;

        $r8 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r8;

        $r9 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r9;

     label09:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r29 = $r2;

     label10:
        r30 = $r29;

        $r10 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r30, $r10);

        if $z1 != 0 goto label15;

        $r11 = virtualinvoke r28.<androidx.datastore.core.SingleProcessDataStore: androidx.datastore.core.StorageConnection getConnection()>();

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0> = $r25;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1> = r27;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2> = r30;

        $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: int label> = 3;

        r37 = (kotlin.coroutines.Continuation) $r24;

        $r12 = staticinvoke <androidx.datastore.core.StorageConnectionKt: java.lang.Object writeData(androidx.datastore.core.StorageConnection,java.lang.Object,kotlin.coroutines.Continuation)>($r11, r30, r37);

     label11:
        if $r12 != r3 goto label14;

        return r3;

     label12:
        r30 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$2>;

        $r5 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$1>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r5;

        $r6 = $r24.<androidx.datastore.core.SingleProcessDataStore$readAndInit$api$1$updateData$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r6;

     label13:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label14:
        r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r30;

     label15:
        r31 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

     label16:
        interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label19;

     label17:
        $r22 := @caughtexception;

        r32 = $r22;

     label18:
        interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r32;

     label19:
        return r31;

     label20:
        r35 = new java.lang.IllegalStateException;

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r35;

        catch java.lang.Throwable from label05 to label07 with label17;
        catch java.lang.Throwable from label09 to label11 with label17;
        catch java.lang.Throwable from label13 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$readAndInitOrPropagateAndThrowFailure(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$readAndInitOrPropagateFailure(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1
<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>
<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$readDataOrHandleCorruption(androidx.datastore.core.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.core.SingleProcessDataStore this$0>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label>
    void <init>(androidx.datastore.core.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1 r0;
        androidx.datastore.core.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1;

        r1 := @parameter0: androidx.datastore.core.SingleProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.core.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.SingleProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.core.SingleProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.SingleProcessDataStore: java.lang.Object access$transformAndWrite(androidx.datastore.core.SingleProcessDataStore,kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r3, null, null, $r2);

        return $r4;
    }

androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: int label>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: kotlin.jvm.functions.Function2 $transform>
<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object $curData>
    void <init>(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: kotlin.jvm.functions.Function2 $transform> = $r1;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object $curData> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r0;
        java.lang.Object $r1, r2, $r4, $r6;
        int $i0;
        kotlin.jvm.functions.Function2 $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: kotlin.jvm.functions.Function2 $transform>;

        $r4 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object $curData>;

        r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: int label> = 1;

        $r6 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, r0);

        if $r6 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r6 = $r1;

     label3:
        return $r6;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r0, $r3;
        java.lang.Object r1, $r4;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        $r5 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: kotlin.jvm.functions.Function2 $transform>;

        $r4 = r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object $curData>;

        specialinvoke $r3.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.SingleProcessDataStore$transformAndWrite$newData$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

