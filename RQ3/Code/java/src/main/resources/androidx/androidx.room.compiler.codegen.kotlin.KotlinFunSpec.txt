androidx.room.compiler.codegen.kotlin.KotlinFunSpec
<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: com.squareup.kotlinpoet.FunSpec actual>
    public void <init>(com.squareup.kotlinpoet.FunSpec)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec r0;
        com.squareup.kotlinpoet.FunSpec r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec;

        r1 := @parameter0: com.squareup.kotlinpoet.FunSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "actual");

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: com.squareup.kotlinpoet.FunSpec actual> = r1;

        return;
    }

    public final com.squareup.kotlinpoet.FunSpec getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec r0;
        com.squareup.kotlinpoet.FunSpec $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: com.squareup.kotlinpoet.FunSpec actual>;

        return $r1;
    }

androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder
<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>
    public void <init>(com.squareup.kotlinpoet.FunSpec$Builder)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0;
        com.squareup.kotlinpoet.FunSpec$Builder r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: com.squareup.kotlinpoet.FunSpec$Builder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "actual");

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual> = r1;

        return;
    }

    public final com.squareup.kotlinpoet.FunSpec$Builder getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0;
        com.squareup.kotlinpoet.FunSpec$Builder $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        return $r1;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder addCode(androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, r2, $r3, $r9;
        androidx.room.compiler.codegen.XCodeBlock r1;
        java.lang.String r4, $r11;
        boolean $z1;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r5;
        com.squareup.kotlinpoet.FunSpec$Builder $r6;
        com.squareup.kotlinpoet.CodeBlock $r7;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "code");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        $z1 = r1 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        if $z1 != 0 goto label1;

        r4 = "Failed requirement.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        $r6 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r1;

        $r7 = virtualinvoke $r5.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        virtualinvoke $r6.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addCode(com.squareup.kotlinpoet.CodeBlock)>($r7);

        $r9 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        return $r9;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder addParameter(androidx.room.compiler.codegen.XTypeName, java.lang.String, java.util.List)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, r4, $r5, $r15;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2;
        java.util.List r3;
        com.squareup.kotlinpoet.ParameterSpec$Builder r6;
        com.squareup.kotlinpoet.FunSpec$Builder r8, $r9;
        com.squareup.kotlinpoet.ParameterSpec$Companion $r10;
        com.squareup.kotlinpoet.TypeName $r11;
        com.squareup.kotlinpoet.KModifier[] $r12;
        com.squareup.kotlinpoet.ParameterSpec $r13;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "annotations");

        r4 = r0;

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r4;

        $r9 = $r5.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        $r10 = <com.squareup.kotlinpoet.ParameterSpec: com.squareup.kotlinpoet.ParameterSpec$Companion Companion>;

        $r11 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        $r12 = newarray (com.squareup.kotlinpoet.KModifier)[0];

        r6 = virtualinvoke $r10.<com.squareup.kotlinpoet.ParameterSpec$Companion: com.squareup.kotlinpoet.ParameterSpec$Builder builder(java.lang.String,com.squareup.kotlinpoet.TypeName,com.squareup.kotlinpoet.KModifier[])>(r2, $r11, $r12);

        r8 = $r9;

        $r13 = virtualinvoke r6.<com.squareup.kotlinpoet.ParameterSpec$Builder: com.squareup.kotlinpoet.ParameterSpec build()>();

        virtualinvoke r8.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addParameter(com.squareup.kotlinpoet.ParameterSpec)>($r13);

        $r15 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r4;

        return $r15;
    }

    public transient androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder callSuperConstructor(androidx.room.compiler.codegen.XCodeBlock[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, r2, $r3, $r15;
        androidx.room.compiler.codegen.XCodeBlock[] r1;
        com.squareup.kotlinpoet.FunSpec$Builder r5;
        java.util.Collection r7, r10;
        int i0, $i1, i2;
        androidx.room.compiler.codegen.XCodeBlock r8, r9;
        java.lang.String r11, $r19;
        java.util.ArrayList $r12;
        java.util.List $r13;
        boolean $z4;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r16;
        com.squareup.kotlinpoet.CodeBlock $r17;
        java.lang.IllegalStateException $r18;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "args");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        r5 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        $r12 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i1);

        r7 = (java.util.Collection) $r12;

        i2 = 0;

        i0 = lengthof r1;

     label1:
        if i2 >= i0 goto label3;

        r8 = r1[i2];

        r9 = r8;

        r10 = r7;

        $z4 = r9 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        if $z4 != 0 goto label2;

        r11 = "Check failed.";

        $r18 = new java.lang.IllegalStateException;

        $r19 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label2:
        $r16 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r9;

        $r17 = virtualinvoke $r16.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r13 = (java.util.List) r7;

        virtualinvoke r5.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder callSuperConstructor(java.util.List)>($r13);

        $r15 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        return $r15;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder returns(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, r2, $r3, $r9;
        androidx.room.compiler.codegen.XTypeName r1;
        com.squareup.kotlinpoet.TypeName $r4, $r7;
        com.squareup.kotlinpoet.ClassName $r5;
        boolean $z1;
        com.squareup.kotlinpoet.FunSpec$Builder $r6;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        $r4 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        $r5 = <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.ClassName UNIT>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r6 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        $r7 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        staticinvoke <com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder returns$default(com.squareup.kotlinpoet.FunSpec$Builder,com.squareup.kotlinpoet.TypeName,com.squareup.kotlinpoet.CodeBlock,int,java.lang.Object)>($r6, $r7, null, 2, null);

     label2:
        $r9 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder) r2;

        return $r9;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinFunSpec build()
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec $r1;
        com.squareup.kotlinpoet.FunSpec$Builder $r2;
        com.squareup.kotlinpoet.FunSpec $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        $r1 = new androidx.room.compiler.codegen.kotlin.KotlinFunSpec;

        $r2 = r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder actual>;

        $r3 = virtualinvoke $r2.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec build()>();

        specialinvoke $r1.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: void <init>(com.squareup.kotlinpoet.FunSpec)>($r3);

        return $r1;
    }

    public volatile androidx.room.compiler.codegen.XFunSpec$Builder addCode(androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, $r2;
        androidx.room.compiler.codegen.XCodeBlock r1;
        androidx.room.compiler.codegen.XFunSpec$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock;

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder addCode(androidx.room.compiler.codegen.XCodeBlock)>(r1);

        $r3 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.codegen.XFunSpec$Builder addParameter(androidx.room.compiler.codegen.XTypeName, java.lang.String, java.util.List)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, $r4;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2;
        java.util.List r3;
        androidx.room.compiler.codegen.XFunSpec$Builder $r5;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $r4 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder addParameter(androidx.room.compiler.codegen.XTypeName,java.lang.String,java.util.List)>(r1, r2, r3);

        $r5 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r4;

        return $r5;
    }

    public volatile androidx.room.compiler.codegen.XFunSpec$Builder callSuperConstructor(androidx.room.compiler.codegen.XCodeBlock[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, $r2;
        androidx.room.compiler.codegen.XCodeBlock[] r1;
        androidx.room.compiler.codegen.XFunSpec$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock[];

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder callSuperConstructor(androidx.room.compiler.codegen.XCodeBlock[])>(r1);

        $r3 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.codegen.XFunSpec$Builder returns(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0, $r2;
        androidx.room.compiler.codegen.XTypeName r1;
        androidx.room.compiler.codegen.XFunSpec$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder returns(androidx.room.compiler.codegen.XTypeName)>(r1);

        $r3 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.codegen.XFunSpec build()
    {
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder r0;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec $r1;
        androidx.room.compiler.codegen.XFunSpec $r2;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        $r1 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinFunSpec build()>();

        $r2 = (androidx.room.compiler.codegen.XFunSpec) $r1;

        return $r2;
    }

