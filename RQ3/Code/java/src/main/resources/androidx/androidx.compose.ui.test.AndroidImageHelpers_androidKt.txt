androidx.compose.ui.test.AndroidImageHelpers_androidKt
    public static final androidx.compose.ui.graphics.ImageBitmap captureToImage(androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.graphics.ImageBitmap $r1;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.graphics.ImageBitmap captureToImage(androidx.compose.ui.test.SemanticsNodeInteraction,boolean)>($r0, 0);

        return $r1;
    }

    public static final androidx.compose.ui.graphics.ImageBitmap captureToImage(androidx.compose.ui.test.SemanticsNodeInteraction, boolean)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        boolean z0;
        androidx.compose.ui.semantics.SemanticsNode r1;
        androidx.compose.ui.test.TestContext $r2, $r3;
        androidx.compose.ui.graphics.ImageBitmap $r4;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to capture a node to bitmap.");

        if z0 == 0 goto label1;

        $r3 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r4 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.graphics.ImageBitmap processMultiWindowScreenshot(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r1, $r3);

        goto label2;

     label1:
        $r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r4 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.graphics.ImageBitmap processSingleWindowScreenshot(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r1, $r2);

     label2:
        return $r4;
    }

    public static androidx.compose.ui.graphics.ImageBitmap captureToImage$default(androidx.compose.ui.test.SemanticsNodeInteraction, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.graphics.ImageBitmap $r2;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $r2 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.graphics.ImageBitmap captureToImage(androidx.compose.ui.test.SemanticsNodeInteraction,boolean)>(r0, z0);

        return $r2;
    }

    private static final androidx.compose.ui.graphics.ImageBitmap processSingleWindowScreenshot(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.test.TestContext)
    {
        androidx.compose.ui.semantics.SemanticsNode r0, r2, r4;
        androidx.compose.ui.test.TestContext r1;
        android.view.View r3;
        android.view.Window r5, $r20, r23, $r24;
        androidx.compose.ui.geometry.Rect r6;
        android.graphics.Rect r7, $r15;
        int[] r8, r25;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$popupParentMaybe$1 $r9;
        kotlin.jvm.functions.Function1 $r10, $r14;
        androidx.compose.ui.node.RootForTest $r11;
        androidx.compose.ui.platform.ViewRootForTest $r12;
        androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$dialogParentNodeMaybe$1 $r13;
        float $f0, $f1, $f2, $f3;
        androidx.compose.ui.graphics.ImageBitmap $r16;
        android.content.Context $r17;
        androidx.compose.ui.window.DialogWindowProvider $r18;
        java.lang.IllegalArgumentException $r19, $r21, $r22;

        r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r1 := @parameter1: androidx.compose.ui.test.TestContext;

        $r9 = <androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$popupParentMaybe$1: androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$popupParentMaybe$1 INSTANCE>;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        r2 = staticinvoke <androidx.compose.ui.test.UtilsKt: androidx.compose.ui.semantics.SemanticsNode findClosestParentNode(androidx.compose.ui.semantics.SemanticsNode,boolean,kotlin.jvm.functions.Function1)>(r0, 1, $r10);

        if r2 == null goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The node that is being captured to bitmap is in a popup or is a popup itself. Popups currently cannot be captured to bitmap.");

        throw $r22;

     label1:
        $r11 = virtualinvoke r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.RootForTest getRoot()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r11, "null cannot be cast to non-null type androidx.compose.ui.platform.ViewRootForTest");

        $r12 = (androidx.compose.ui.platform.ViewRootForTest) $r11;

        r3 = interfaceinvoke $r12.<androidx.compose.ui.platform.ViewRootForTest: android.view.View getView()>();

        $r13 = <androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$dialogParentNodeMaybe$1: androidx.compose.ui.test.AndroidImageHelpers_androidKt$processSingleWindowScreenshot$dialogParentNodeMaybe$1 INSTANCE>;

        $r14 = (kotlin.jvm.functions.Function1) $r13;

        r4 = staticinvoke <androidx.compose.ui.test.UtilsKt: androidx.compose.ui.semantics.SemanticsNode findClosestParentNode(androidx.compose.ui.semantics.SemanticsNode,boolean,kotlin.jvm.functions.Function1)>(r0, 1, $r14);

        r23 = null;

        if r4 == null goto label5;

        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        if $i5 >= 28 goto label2;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot currently capture dialogs on API lower than 28!");

        throw $r21;

     label2:
        $r18 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.window.DialogWindowProvider findDialogWindowProviderInParent(android.view.View)>(r3);

        if $r18 == null goto label3;

        $r20 = interfaceinvoke $r18.<androidx.compose.ui.window.DialogWindowProvider: android.view.Window getWindow()>();

        if $r20 != null goto label4;

     label3:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not find a dialog window provider to capture its bitmap");

        throw $r19;

     label4:
        r23 = $r20;

     label5:
        $r24 = r23;

        if r23 != null goto label6;

        $r17 = virtualinvoke r3.<android.view.View: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "view.context");

        $r24 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: android.view.Window getActivityWindow(android.content.Context)>($r17);

     label6:
        r5 = $r24;

        r6 = virtualinvoke r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $r15 = new android.graphics.Rect;

        $f0 = virtualinvoke r6.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f0);

        $f1 = virtualinvoke r6.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $f2 = virtualinvoke r6.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

        $f3 = virtualinvoke r6.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $i4 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        specialinvoke $r15.<android.graphics.Rect: void <init>(int,int,int,int)>($i1, $i2, $i3, $i4);

        r7 = $r15;

        r25 = newarray (int)[2];

        r25[0] = 0;

        r25[1] = 0;

        r8 = r25;

        virtualinvoke r3.<android.view.View: void getLocationInWindow(int[])>(r8);

        i6 = r8[0];

        i0 = r8[1];

        virtualinvoke r7.<android.graphics.Rect: void offset(int,int)>(i6, i0);

        $r16 = staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: androidx.compose.ui.graphics.ImageBitmap captureRegionToImage(android.view.Window,androidx.compose.ui.test.TestContext,android.graphics.Rect)>(r5, r1, r7);

        return $r16;
    }

    private static final androidx.compose.ui.graphics.ImageBitmap processMultiWindowScreenshot(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.test.TestContext)
    {
        androidx.compose.ui.semantics.SemanticsNode r0;
        androidx.compose.ui.test.TestContext r1;
        long l0;
        androidx.compose.ui.geometry.Rect r2;
        android.graphics.Bitmap r3, r4;
        androidx.compose.ui.node.RootForTest $r5;
        androidx.compose.ui.platform.ViewRootForTest $r6;
        android.view.View $r7;
        android.app.Instrumentation $r8;
        android.app.UiAutomation $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i1, $i2, $i3, $i4;
        androidx.compose.ui.graphics.ImageBitmap $r10;

        r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r1 := @parameter1: androidx.compose.ui.test.TestContext;

        $r5 = virtualinvoke r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.RootForTest getRoot()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type androidx.compose.ui.platform.ViewRootForTest");

        $r6 = (androidx.compose.ui.platform.ViewRootForTest) $r5;

        $r7 = interfaceinvoke $r6.<androidx.compose.ui.platform.ViewRootForTest: android.view.View getView()>();

        staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: void forceRedraw(android.view.View,androidx.compose.ui.test.TestContext)>($r7, r1);

        l0 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: long findNodePosition(androidx.compose.ui.semantics.SemanticsNode)>(r0);

        r2 = virtualinvoke r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $r8 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r9 = virtualinvoke $r8.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        r3 = virtualinvoke $r9.<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>();

        $f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        $f1 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f2 = $f0 + $f1;

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $f4 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f5 = $f3 + $f4;

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f5);

        $f6 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getWidth()>();

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f6);

        $f7 = virtualinvoke r2.<androidx.compose.ui.geometry.Rect: float getHeight()>();

        $i4 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f7);

        r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r3, $i1, $i2, $i3, $i4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "finalBitmap");

        $r10 = staticinvoke <androidx.compose.ui.graphics.AndroidImageBitmap_androidKt: androidx.compose.ui.graphics.ImageBitmap asImageBitmap(android.graphics.Bitmap)>(r4);

        return $r10;
    }

    private static final long findNodePosition(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode r0;
        android.view.View r1;
        int[] r2, r5;
        int i0, i2;
        androidx.compose.ui.node.RootForTest $r3;
        androidx.compose.ui.platform.ViewRootForTest $r4;
        float $f0, $f1;
        long $l1;

        r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r3 = virtualinvoke r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.RootForTest getRoot()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type androidx.compose.ui.platform.ViewRootForTest");

        $r4 = (androidx.compose.ui.platform.ViewRootForTest) $r3;

        r1 = interfaceinvoke $r4.<androidx.compose.ui.platform.ViewRootForTest: android.view.View getView()>();

        r5 = newarray (int)[2];

        r5[0] = 0;

        r5[1] = 0;

        r2 = r5;

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i2 = r2[0];

        i0 = r2[1];

        $f1 = (float) i2;

        $f0 = (float) i0;

        $l1 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f1, $f0);

        return $l1;
    }

    public static final androidx.compose.ui.window.DialogWindowProvider findDialogWindowProviderInParent(android.view.View)
    {
        android.view.View r0, $r3;
        android.view.ViewParent r1, $r2;
        boolean $z0, $z1;
        androidx.compose.ui.window.DialogWindowProvider $r4, $r5;

        r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "view");

        $z0 = r0 instanceof androidx.compose.ui.window.DialogWindowProvider;

        if $z0 == 0 goto label1;

        $r5 = (androidx.compose.ui.window.DialogWindowProvider) r0;

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if $r2 != null goto label2;

        return null;

     label2:
        r1 = $r2;

        $z1 = r1 instanceof android.view.View;

        if $z1 == 0 goto label3;

        $r3 = (android.view.View) r1;

        $r4 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: androidx.compose.ui.window.DialogWindowProvider findDialogWindowProviderInParent(android.view.View)>($r3);

        return $r4;

     label3:
        return null;
    }

    private static final android.view.Window getActivityWindow(android.content.Context)
    {
        android.content.Context $r0;
        android.app.Activity $r1;
        android.view.Window $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: android.app.Activity getActivityWindow$getActivity(android.content.Context)>($r0);

        $r2 = virtualinvoke $r1.<android.app.Activity: android.view.Window getWindow()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "getActivity().window");

        return $r2;
    }

    private static final android.app.Activity getActivityWindow$getActivity(android.content.Context)
    {
        android.content.Context $r0, r1, $r11;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;
        android.content.ContextWrapper $r10;
        android.app.Activity $r12;

        $r0 := @parameter0: android.content.Context;

        r1 = $r0;

        $z0 = r1 instanceof android.app.Activity;

        if $z0 == 0 goto label1;

        $r12 = (android.app.Activity) $r0;

        goto label3;

     label1:
        $z1 = r1 instanceof android.content.ContextWrapper;

        if $z1 == 0 goto label2;

        $r10 = (android.content.ContextWrapper) $r0;

        $r11 = virtualinvoke $r10.<android.content.ContextWrapper: android.content.Context getBaseContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "this.baseContext");

        $r12 = staticinvoke <androidx.compose.ui.test.AndroidImageHelpers_androidKt: android.app.Activity getActivityWindow$getActivity(android.content.Context)>($r11);

        goto label3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Context is not an Activity context, but a ");

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" context. An Activity context is required to get a Window instance");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label3:
        return $r12;
    }

