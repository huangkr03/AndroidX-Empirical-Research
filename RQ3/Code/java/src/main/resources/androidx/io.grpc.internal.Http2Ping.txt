io.grpc.internal.Http2Ping
<io.grpc.internal.Http2Ping: java.util.logging.Logger log>
<io.grpc.internal.Http2Ping: java.util.Map callbacks>
<io.grpc.internal.Http2Ping: boolean completed>
<io.grpc.internal.Http2Ping: long data>
<io.grpc.internal.Http2Ping: java.lang.Throwable failureCause>
<io.grpc.internal.Http2Ping: long roundTripTimeNanos>
<io.grpc.internal.Http2Ping: com.google.common.base.Stopwatch stopwatch>
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lio/grpc/internal/Http2Ping;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.internal.Http2Ping: java.util.logging.Logger log> = $r2;

        return;
    }

    public void <init>(long, com.google.common.base.Stopwatch)
    {
        io.grpc.internal.Http2Ping $r0;
        long $l0;
        com.google.common.base.Stopwatch $r1;
        java.util.LinkedHashMap r2;
        java.util.Map r3;

        $r0 := @this: io.grpc.internal.Http2Ping;

        $l0 := @parameter0: long;

        $r1 := @parameter1: com.google.common.base.Stopwatch;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks> = r3;

        $r0.<io.grpc.internal.Http2Ping: long data> = $l0;

        $r0.<io.grpc.internal.Http2Ping: com.google.common.base.Stopwatch stopwatch> = $r1;

        return;
    }

    private static java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback, long)
    {
        io.grpc.internal.ClientTransport$PingCallback $r0;
        long $l0;
        io.grpc.internal.Http2Ping$1 $r1;

        $r0 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $l0 := @parameter1: long;

        $r1 = new io.grpc.internal.Http2Ping$1;

        specialinvoke $r1.<io.grpc.internal.Http2Ping$1: void <init>(io.grpc.internal.ClientTransport$PingCallback,long)>($r0, $l0);

        return $r1;
    }

    private static java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback, java.lang.Throwable)
    {
        io.grpc.internal.ClientTransport$PingCallback $r0;
        java.lang.Throwable $r1;
        io.grpc.internal.Http2Ping$2 $r2;

        $r0 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = new io.grpc.internal.Http2Ping$2;

        specialinvoke $r2.<io.grpc.internal.Http2Ping$2: void <init>(io.grpc.internal.ClientTransport$PingCallback,java.lang.Throwable)>($r0, $r1);

        return $r2;
    }

    private static void doExecute(java.util.concurrent.Executor, java.lang.Runnable)
    {
        java.util.concurrent.Executor $r0;
        java.lang.Runnable $r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 := @parameter1: java.lang.Runnable;

     label1:
        interfaceinvoke $r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r2 = <io.grpc.internal.Http2Ping: java.util.logging.Logger log>;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r2.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "io.grpc.internal.Http2Ping", "doExecute", "Failed to execute PingCallback", $r4);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void notifyFailed(io.grpc.internal.ClientTransport$PingCallback, java.util.concurrent.Executor, java.lang.Throwable)
    {
        java.util.concurrent.Executor $r0;
        java.lang.Throwable $r1;
        java.lang.Runnable $r2;
        io.grpc.internal.ClientTransport$PingCallback $r3;

        $r3 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $r0 := @parameter1: java.util.concurrent.Executor;

        $r1 := @parameter2: java.lang.Throwable;

        $r2 = staticinvoke <io.grpc.internal.Http2Ping: java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback,java.lang.Throwable)>($r3, $r1);

        staticinvoke <io.grpc.internal.Http2Ping: void doExecute(java.util.concurrent.Executor,java.lang.Runnable)>($r0, $r2);

        return;
    }

    public void addCallback(io.grpc.internal.ClientTransport$PingCallback, java.util.concurrent.Executor)
    {
        io.grpc.internal.Http2Ping $r0;
        java.util.concurrent.Executor $r1;
        io.grpc.internal.ClientTransport$PingCallback $r2;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Throwable $r4;
        java.lang.Runnable $r5;
        long $l0;

        $r0 := @this: io.grpc.internal.Http2Ping;

        $r2 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $r1 := @parameter1: java.util.concurrent.Executor;

        entermonitor $r0;

     label1:
        $z0 = $r0.<io.grpc.internal.Http2Ping: boolean completed>;

        if $z0 != 0 goto label3;

        $r3 = $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r4 = $r0.<io.grpc.internal.Http2Ping: java.lang.Throwable failureCause>;

        if $r4 == null goto label4;

        $r5 = staticinvoke <io.grpc.internal.Http2Ping: java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback,java.lang.Throwable)>($r2, $r4);

        goto label5;

     label4:
        $l0 = $r0.<io.grpc.internal.Http2Ping: long roundTripTimeNanos>;

        $r5 = staticinvoke <io.grpc.internal.Http2Ping: java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback,long)>($r2, $l0);

     label5:
        exitmonitor $r0;

        staticinvoke <io.grpc.internal.Http2Ping: void doExecute(java.util.concurrent.Executor,java.lang.Runnable)>($r1, $r5);

        return;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }

    public boolean complete()
    {
        io.grpc.internal.Http2Ping $r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;
        com.google.common.base.Stopwatch $r2;
        long $l0;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        java.util.Map$Entry $r7;
        java.util.concurrent.Executor $r8;
        io.grpc.internal.ClientTransport$PingCallback $r9;
        java.lang.Runnable $r10;
        java.lang.Throwable $r11;

        $r0 := @this: io.grpc.internal.Http2Ping;

        entermonitor $r0;

     label1:
        $z0 = $r0.<io.grpc.internal.Http2Ping: boolean completed>;

        if $z0 == 0 goto label3;

     label2:
        exitmonitor $r0;

        return 0;

     label3:
        $r0.<io.grpc.internal.Http2Ping: boolean completed> = 1;

        $r2 = $r0.<io.grpc.internal.Http2Ping: com.google.common.base.Stopwatch stopwatch>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r2.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r1);

        $r0.<io.grpc.internal.Http2Ping: long roundTripTimeNanos> = $l0;

        $r3 = $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks>;

        $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks> = null;

     label4:
        exitmonitor $r0;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.concurrent.Executor) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (io.grpc.internal.ClientTransport$PingCallback) $r6;

        $r10 = staticinvoke <io.grpc.internal.Http2Ping: java.lang.Runnable asRunnable(io.grpc.internal.ClientTransport$PingCallback,long)>($r9, $l0);

        staticinvoke <io.grpc.internal.Http2Ping: void doExecute(java.util.concurrent.Executor,java.lang.Runnable)>($r8, $r10);

        goto label5;

     label6:
        return 1;

     label7:
        $r11 := @caughtexception;

        exitmonitor $r0;

        goto label8;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public void failed(java.lang.Throwable)
    {
        io.grpc.internal.Http2Ping $r0;
        java.lang.Throwable $r1;
        boolean $z0;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.util.Map$Entry $r6;
        io.grpc.internal.ClientTransport$PingCallback $r7;
        java.util.concurrent.Executor $r8;

        $r0 := @this: io.grpc.internal.Http2Ping;

        $r1 := @parameter0: java.lang.Throwable;

        entermonitor $r0;

        $z0 = $r0.<io.grpc.internal.Http2Ping: boolean completed>;

        if $z0 == 0 goto label1;

        exitmonitor $r0;

        return;

     label1:
        $r0.<io.grpc.internal.Http2Ping: boolean completed> = 1;

        $r0.<io.grpc.internal.Http2Ping: java.lang.Throwable failureCause> = $r1;

        $r2 = $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks>;

        $r0.<io.grpc.internal.Http2Ping: java.util.Map callbacks> = null;

        exitmonitor $r0;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (io.grpc.internal.ClientTransport$PingCallback) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.concurrent.Executor) $r5;

        staticinvoke <io.grpc.internal.Http2Ping: void notifyFailed(io.grpc.internal.ClientTransport$PingCallback,java.util.concurrent.Executor,java.lang.Throwable)>($r7, $r8, $r1);

        goto label2;

     label3:
        return;
    }

    public long payload()
    {
        io.grpc.internal.Http2Ping $r0;
        long l0;

        $r0 := @this: io.grpc.internal.Http2Ping;

        l0 = $r0.<io.grpc.internal.Http2Ping: long data>;

        return l0;
    }

io.grpc.internal.Http2Ping$1
<io.grpc.internal.Http2Ping$1: io.grpc.internal.ClientTransport$PingCallback val$callback>
<io.grpc.internal.Http2Ping$1: long val$roundTripTimeNanos>
    void <init>(io.grpc.internal.ClientTransport$PingCallback, long)
    {
        io.grpc.internal.Http2Ping$1 $r0;
        io.grpc.internal.ClientTransport$PingCallback $r1;
        long $l0;

        $r0 := @this: io.grpc.internal.Http2Ping$1;

        $r1 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $l0 := @parameter1: long;

        $r0.<io.grpc.internal.Http2Ping$1: io.grpc.internal.ClientTransport$PingCallback val$callback> = $r1;

        $r0.<io.grpc.internal.Http2Ping$1: long val$roundTripTimeNanos> = $l0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.Http2Ping$1 $r0;
        io.grpc.internal.ClientTransport$PingCallback $r1;
        long $l0;

        $r0 := @this: io.grpc.internal.Http2Ping$1;

        $r1 = $r0.<io.grpc.internal.Http2Ping$1: io.grpc.internal.ClientTransport$PingCallback val$callback>;

        $l0 = $r0.<io.grpc.internal.Http2Ping$1: long val$roundTripTimeNanos>;

        interfaceinvoke $r1.<io.grpc.internal.ClientTransport$PingCallback: void onSuccess(long)>($l0);

        return;
    }

io.grpc.internal.Http2Ping$2
<io.grpc.internal.Http2Ping$2: io.grpc.internal.ClientTransport$PingCallback val$callback>
<io.grpc.internal.Http2Ping$2: java.lang.Throwable val$failureCause>
    void <init>(io.grpc.internal.ClientTransport$PingCallback, java.lang.Throwable)
    {
        io.grpc.internal.Http2Ping$2 $r0;
        io.grpc.internal.ClientTransport$PingCallback $r1;
        java.lang.Throwable $r2;

        $r0 := @this: io.grpc.internal.Http2Ping$2;

        $r1 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $r2 := @parameter1: java.lang.Throwable;

        $r0.<io.grpc.internal.Http2Ping$2: io.grpc.internal.ClientTransport$PingCallback val$callback> = $r1;

        $r0.<io.grpc.internal.Http2Ping$2: java.lang.Throwable val$failureCause> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.Http2Ping$2 $r0;
        io.grpc.internal.ClientTransport$PingCallback $r1;
        java.lang.Throwable $r2;

        $r0 := @this: io.grpc.internal.Http2Ping$2;

        $r1 = $r0.<io.grpc.internal.Http2Ping$2: io.grpc.internal.ClientTransport$PingCallback val$callback>;

        $r2 = $r0.<io.grpc.internal.Http2Ping$2: java.lang.Throwable val$failureCause>;

        interfaceinvoke $r1.<io.grpc.internal.ClientTransport$PingCallback: void onFailure(java.lang.Throwable)>($r2);

        return;
    }

