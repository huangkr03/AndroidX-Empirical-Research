androidx.compose.runtime.LaunchedEffectImpl
<androidx.compose.runtime.LaunchedEffectImpl: kotlin.jvm.functions.Function2 task>
<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.CoroutineScope scope>
<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job>
    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.LaunchedEffectImpl r0;
        kotlin.coroutines.CoroutineContext r1;
        kotlin.jvm.functions.Function2 r2;
        kotlinx.coroutines.CoroutineScope $r3;

        r0 := @this: androidx.compose.runtime.LaunchedEffectImpl;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "parentCoroutineContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "task");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlin.jvm.functions.Function2 task> = r2;

        $r3 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>(r1);

        r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.CoroutineScope scope> = $r3;

        return;
    }

    public void onRemembered()
    {
        androidx.compose.runtime.LaunchedEffectImpl r0;
        kotlinx.coroutines.Job $r1, $r4;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.CoroutineScope $r3;

        r0 := @this: androidx.compose.runtime.LaunchedEffectImpl;

        $r1 = r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job>;

        if $r1 == null goto label1;

        staticinvoke <kotlinx.coroutines.JobKt: void cancel$default(kotlinx.coroutines.Job,java.lang.String,java.lang.Throwable,int,java.lang.Object)>($r1, "Old job was still running!", null, 2, null);

        goto label1;

     label1:
        $r3 = r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.CoroutineScope scope>;

        $r2 = r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlin.jvm.functions.Function2 task>;

        $r4 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r3, null, null, $r2, 3, null);

        r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job> = $r4;

        return;
    }

    public void onForgotten()
    {
        androidx.compose.runtime.LaunchedEffectImpl r0;
        kotlinx.coroutines.Job $r1;

        r0 := @this: androidx.compose.runtime.LaunchedEffectImpl;

        $r1 = r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job>;

        if $r1 == null goto label1;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r1, null, 1, null);

        goto label1;

     label1:
        r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job> = null;

        return;
    }

    public void onAbandoned()
    {
        androidx.compose.runtime.LaunchedEffectImpl r0;
        kotlinx.coroutines.Job $r1;

        r0 := @this: androidx.compose.runtime.LaunchedEffectImpl;

        $r1 = r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job>;

        if $r1 == null goto label1;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r1, null, 1, null);

        goto label1;

     label1:
        r0.<androidx.compose.runtime.LaunchedEffectImpl: kotlinx.coroutines.Job job> = null;

        return;
    }

