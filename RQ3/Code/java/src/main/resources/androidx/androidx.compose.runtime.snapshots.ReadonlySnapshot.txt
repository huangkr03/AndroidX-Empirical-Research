androidx.compose.runtime.snapshots.ReadonlySnapshot
<androidx.compose.runtime.snapshots.ReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver>
<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots>
    public void <init>(int, androidx.compose.runtime.snapshots.SnapshotIdSet, kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        int i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;
        kotlin.jvm.functions.Function1 r2;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.snapshots.SnapshotIdSet;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalid");

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, r1, null);

        r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver> = r2;

        r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots> = 1;

        return;
    }

    public kotlin.jvm.functions.Function1 getReadObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver>;

        return $r1;
    }

    public boolean getReadOnly()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        return 1;
    }

    public androidx.compose.runtime.snapshots.Snapshot getRoot()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        $r1 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        return $r1;
    }

    public boolean hasPendingChanges()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        return 0;
    }

    public kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        return null;
    }

    public java.util.HashSet getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        return null;
    }

    public void setModified(java.util.HashSet)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        java.util.HashSet r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        r1 := @parameter0: java.util.HashSet;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.snapshots.Snapshot $r2, $r5, $r6;
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot $r3;
        int $i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r4;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: void access$validateOpen(androidx.compose.runtime.snapshots.Snapshot)>($r2);

        $r3 = new androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int getId()>();

        $r4 = virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $r5 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        specialinvoke $r3.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.functions.Function1,androidx.compose.runtime.snapshots.Snapshot)>($i0, $r4, r1, $r5);

        $r6 = (androidx.compose.runtime.snapshots.Snapshot) $r3;

        return $r6;
    }

    public void notifyObjectsInitialized$runtime_release()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        return;
    }

    public void dispose()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        boolean $z0;
        androidx.compose.runtime.snapshots.Snapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: boolean getDisposed$runtime_release()>();

        if $z0 != 0 goto label1;

        $r1 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>($r1);

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

     label1:
        return;
    }

    public void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        i0 = r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots> = $i1;

        return;
    }

    public void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        $i0 = r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots>;

        $i1 = $i0 + -1;

        r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots> = $i1;

        $i2 = r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: int snapshots>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: void closeAndReleasePinning$runtime_release()>();

     label1:
        return;
    }

    public void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.StateObject r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.StateObject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Void access$reportReadonlySnapshotWrite()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public volatile java.util.Set getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.ReadonlySnapshot r0;
        java.util.HashSet $r1;
        java.util.Set $r2;

        r0 := @this: androidx.compose.runtime.snapshots.ReadonlySnapshot;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.ReadonlySnapshot: java.util.HashSet getModified$runtime_release()>();

        $r2 = (java.util.Set) $r1;

        return $r2;
    }

