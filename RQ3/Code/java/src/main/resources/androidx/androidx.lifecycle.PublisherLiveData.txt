androidx.lifecycle.PublisherLiveData
<androidx.lifecycle.PublisherLiveData: org.reactivestreams.Publisher publisher>
<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference subscriber>
    public void <init>(org.reactivestreams.Publisher)
    {
        androidx.lifecycle.PublisherLiveData r0;
        org.reactivestreams.Publisher r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: androidx.lifecycle.PublisherLiveData;

        r1 := @parameter0: org.reactivestreams.Publisher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "publisher");

        specialinvoke r0.<androidx.lifecycle.LiveData: void <init>()>();

        r0.<androidx.lifecycle.PublisherLiveData: org.reactivestreams.Publisher publisher> = r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference subscriber> = $r2;

        return;
    }

    public final java.util.concurrent.atomic.AtomicReference getSubscriber()
    {
        androidx.lifecycle.PublisherLiveData r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: androidx.lifecycle.PublisherLiveData;

        $r1 = r0.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference subscriber>;

        return $r1;
    }

    protected void onActive()
    {
        androidx.lifecycle.PublisherLiveData r0;
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r1, $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        org.reactivestreams.Subscriber $r4;
        org.reactivestreams.Publisher $r5;

        r0 := @this: androidx.lifecycle.PublisherLiveData;

        specialinvoke r0.<androidx.lifecycle.LiveData: void onActive()>();

        $r2 = new androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        specialinvoke $r2.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: void <init>(androidx.lifecycle.PublisherLiveData)>(r0);

        r1 = $r2;

        $r3 = r0.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference subscriber>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        $r5 = r0.<androidx.lifecycle.PublisherLiveData: org.reactivestreams.Publisher publisher>;

        $r4 = (org.reactivestreams.Subscriber) r1;

        interfaceinvoke $r5.<org.reactivestreams.Publisher: void subscribe(org.reactivestreams.Subscriber)>($r4);

        return;
    }

    protected void onInactive()
    {
        androidx.lifecycle.PublisherLiveData r0;
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.lifecycle.PublisherLiveData;

        specialinvoke r0.<androidx.lifecycle.LiveData: void onInactive()>();

        $r2 = r0.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference subscriber>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r1 = (androidx.lifecycle.PublisherLiveData$LiveDataSubscriber) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: void cancelSubscription()>();

        goto label1;

     label1:
        return;
    }

androidx.lifecycle.PublisherLiveData$LiveDataSubscriber
<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: androidx.lifecycle.PublisherLiveData this$0>
    public void <init>(androidx.lifecycle.PublisherLiveData)
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        androidx.lifecycle.PublisherLiveData r1;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        r1 := @parameter0: androidx.lifecycle.PublisherLiveData;

        r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: androidx.lifecycle.PublisherLiveData this$0> = r1;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        return;
    }

    public void onSubscribe(org.reactivestreams.Subscription)
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        org.reactivestreams.Subscription r1;
        boolean $z0;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        r1 := @parameter0: org.reactivestreams.Subscription;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "s");

        $z0 = virtualinvoke r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r1);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.reactivestreams.Subscription: void request(long)>(9223372036854775807L);

        goto label2;

     label1:
        interfaceinvoke r1.<org.reactivestreams.Subscription: void cancel()>();

     label2:
        return;
    }

    public void onNext(java.lang.Object)
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        java.lang.Object r1;
        androidx.lifecycle.PublisherLiveData $r2;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: androidx.lifecycle.PublisherLiveData this$0>;

        virtualinvoke $r2.<androidx.lifecycle.PublisherLiveData: void postValue(java.lang.Object)>(r1);

        return;
    }

    public void onError(java.lang.Throwable)
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        java.lang.Throwable r1;
        androidx.lifecycle.PublisherLiveData $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        androidx.arch.core.executor.ArchTaskExecutor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ex");

        $r2 = r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: androidx.lifecycle.PublisherLiveData this$0>;

        $r3 = virtualinvoke $r2.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference getSubscriber()>();

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        $r4 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r5 = dynamicinvoke "run" <java.lang.Runnable (java.lang.Throwable)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: void onError$lambda$0(java.lang.Throwable)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r4.<androidx.arch.core.executor.ArchTaskExecutor: void executeOnMainThread(java.lang.Runnable)>($r5);

        return;
    }

    public void onComplete()
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        androidx.lifecycle.PublisherLiveData $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        $r1 = r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: androidx.lifecycle.PublisherLiveData this$0>;

        $r2 = virtualinvoke $r1.<androidx.lifecycle.PublisherLiveData: java.util.concurrent.atomic.AtomicReference getSubscriber()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        return;
    }

    public final void cancelSubscription()
    {
        androidx.lifecycle.PublisherLiveData$LiveDataSubscriber r0;
        org.reactivestreams.Subscription r1;
        java.lang.Object $r2;

        r0 := @this: androidx.lifecycle.PublisherLiveData$LiveDataSubscriber;

        $r2 = virtualinvoke r0.<androidx.lifecycle.PublisherLiveData$LiveDataSubscriber: java.lang.Object get()>();

        r1 = (org.reactivestreams.Subscription) $r2;

        if r1 == null goto label1;

        interfaceinvoke r1.<org.reactivestreams.Subscription: void cancel()>();

        goto label1;

     label1:
        return;
    }

    private static final void onError$lambda$0(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.RuntimeException $r1;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$ex");

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("LiveData does not handle errors. Errors from publishers should be handled upstream and propagated as state", $r0);

        throw $r1;
    }

