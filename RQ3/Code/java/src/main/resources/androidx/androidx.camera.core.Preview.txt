androidx.camera.core.Preview
<androidx.camera.core.Preview: androidx.camera.core.Preview$Defaults DEFAULT_CONFIG>
<androidx.camera.core.Preview: java.lang.String TAG>
<androidx.camera.core.Preview: java.util.concurrent.Executor DEFAULT_SURFACE_PROVIDER_EXECUTOR>
<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>
<androidx.camera.core.Preview: java.util.concurrent.Executor mSurfaceProviderExecutor>
<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface>
<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest>
<androidx.camera.core.Preview: android.util.Size mSurfaceSize>
<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor>
<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorNode mNode>
    void <init>(androidx.camera.core.impl.PreviewConfig)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.PreviewConfig r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.impl.PreviewConfig;

        specialinvoke r0.<androidx.camera.core.UseCase: void <init>(androidx.camera.core.impl.UseCaseConfig)>(r1);

        $r2 = <androidx.camera.core.Preview: java.util.concurrent.Executor DEFAULT_SURFACE_PROVIDER_EXECUTOR>;

        r0.<androidx.camera.core.Preview: java.util.concurrent.Executor mSurfaceProviderExecutor> = $r2;

        return;
    }

    androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String, androidx.camera.core.impl.PreviewConfig, android.util.Size)
    {
        androidx.camera.core.Preview r0;
        java.lang.String r1, r8;
        androidx.camera.core.impl.PreviewConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.SessionConfig$Builder r4, $r31;
        androidx.camera.core.impl.CaptureProcessor r5;
        boolean z0;
        androidx.camera.core.SurfaceRequest r6, $r11;
        android.os.HandlerThread r7, $r18;
        androidx.camera.core.ProcessingSurface r9, $r19;
        androidx.camera.core.processing.SurfaceProcessorInternal $r10;
        androidx.camera.core.impl.CameraInternal $r12;
        androidx.camera.core.Preview$SurfaceProvider $r13;
        androidx.camera.core.impl.DeferrableSurface $r14, $r22;
        androidx.camera.core.Preview$1 $r15;
        androidx.camera.core.impl.CaptureStage$DefaultCaptureStage $r17, r32;
        int $i0, $i1, $i2, $i3, $i4;
        android.os.Handler $r20;
        android.os.Looper $r21;
        androidx.camera.core.impl.CameraCaptureCallback $r23;
        com.google.common.util.concurrent.ListenableFuture $r25;
        java.lang.Runnable $r27;
        java.util.concurrent.Executor $r28;
        java.lang.Integer $r29;
        androidx.camera.core.impl.ImageInfoProcessor r33;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.PreviewConfig;

        r3 := @parameter2: android.util.Size;

        $r10 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor>;

        if $r10 == null goto label1;

        $r31 = specialinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.SessionConfig$Builder createPipelineWithNode(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r1, r2, r3);

        return $r31;

     label1:
        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r4 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r2);

        r5 = virtualinvoke r2.<androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.CaptureProcessor getCaptureProcessor(androidx.camera.core.impl.CaptureProcessor)>(null);

        specialinvoke r0.<androidx.camera.core.Preview: void clearPipeline()>();

        z0 = virtualinvoke r2.<androidx.camera.core.impl.PreviewConfig: boolean isRgba8888SurfaceRequired(boolean)>(0);

        $r11 = new androidx.camera.core.SurfaceRequest;

        $r12 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.CameraInternal getCamera()>();

        specialinvoke $r11.<androidx.camera.core.SurfaceRequest: void <init>(android.util.Size,androidx.camera.core.impl.CameraInternal,boolean)>(r3, $r12, z0);

        r6 = $r11;

        r0.<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest> = r6;

        $r13 = r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        if $r13 == null goto label2;

        specialinvoke r0.<androidx.camera.core.Preview: void sendSurfaceRequest()>();

     label2:
        if r5 == null goto label3;

        $r17 = new androidx.camera.core.impl.CaptureStage$DefaultCaptureStage;

        specialinvoke $r17.<androidx.camera.core.impl.CaptureStage$DefaultCaptureStage: void <init>()>();

        r32 = $r17;

        $r18 = new android.os.HandlerThread;

        specialinvoke $r18.<android.os.HandlerThread: void <init>(java.lang.String)>("CameraX-preview_processing");

        r7 = $r18;

        virtualinvoke r7.<android.os.HandlerThread: void start()>();

        $i0 = virtualinvoke r32.<java.lang.Object: int hashCode()>();

        r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r19 = new androidx.camera.core.ProcessingSurface;

        $i1 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i3 = virtualinvoke r2.<androidx.camera.core.impl.PreviewConfig: int getInputFormat()>();

        $r20 = new android.os.Handler;

        $r21 = virtualinvoke r7.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r20.<android.os.Handler: void <init>(android.os.Looper)>($r21);

        $r22 = virtualinvoke r6.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.DeferrableSurface getDeferrableSurface()>();

        specialinvoke $r19.<androidx.camera.core.ProcessingSurface: void <init>(int,int,int,android.os.Handler,androidx.camera.core.impl.CaptureStage,androidx.camera.core.impl.CaptureProcessor,androidx.camera.core.impl.DeferrableSurface,java.lang.String)>($i1, $i2, $i3, $r20, r32, r5, $r22, r8);

        r9 = $r19;

        $r23 = virtualinvoke r9.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r23);

        $r25 = virtualinvoke r9.<androidx.camera.core.ProcessingSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        $r27 = dynamicinvoke "run" <java.lang.Runnable (android.os.HandlerThread)>(r7) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <android.os.HandlerThread: boolean quitSafely()>, methodtype: void __METHODTYPE__());

        $r28 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r25.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r27, $r28);

        r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface> = r9;

        $i4 = interfaceinvoke r32.<androidx.camera.core.impl.CaptureStage: int getId()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addTag(java.lang.String,java.lang.Object)>(r8, $r29);

        goto label5;

     label3:
        r33 = virtualinvoke r2.<androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.ImageInfoProcessor getImageInfoProcessor(androidx.camera.core.impl.ImageInfoProcessor)>(null);

        if r33 == null goto label4;

        $r15 = new androidx.camera.core.Preview$1;

        specialinvoke $r15.<androidx.camera.core.Preview$1: void <init>(androidx.camera.core.Preview,androidx.camera.core.impl.ImageInfoProcessor)>(r0, r33);

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r15);

     label4:
        $r14 = virtualinvoke r6.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.DeferrableSurface getDeferrableSurface()>();

        r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface> = $r14;

     label5:
        specialinvoke r0.<androidx.camera.core.Preview: void addCameraSurfaceAndErrorListener(androidx.camera.core.impl.SessionConfig$Builder,java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r4, r1, r2, r3);

        return r4;
    }

    private androidx.camera.core.impl.SessionConfig$Builder createPipelineWithNode(java.lang.String, androidx.camera.core.impl.PreviewConfig, android.util.Size)
    {
        androidx.camera.core.Preview r0;
        java.lang.String r1;
        androidx.camera.core.impl.PreviewConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.CameraInternal r4;
        androidx.camera.core.processing.SettableSurface r5, r8, $r16;
        androidx.camera.core.processing.SurfaceEdge r6, r7;
        androidx.camera.core.impl.SessionConfig$Builder r9;
        androidx.camera.core.processing.SurfaceProcessorInternal $r10, $r14;
        androidx.camera.core.processing.SurfaceProcessorNode $r13, $r22;
        androidx.camera.core.SurfaceOutput$GlTransformOptions $r15;
        android.graphics.Matrix $r17;
        android.graphics.Rect $r18, $r20;
        java.lang.Object $r19, $r24;
        int $i0;
        java.util.List $r21, $r23;
        androidx.camera.core.SurfaceRequest $r25;
        androidx.camera.core.Preview$SurfaceProvider $r26;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.PreviewConfig;

        r3 := @parameter2: android.util.Size;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r10 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r10);

        r4 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.CameraInternal getCamera()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        specialinvoke r0.<androidx.camera.core.Preview: void clearPipeline()>();

        $r13 = new androidx.camera.core.processing.SurfaceProcessorNode;

        $r15 = <androidx.camera.core.SurfaceOutput$GlTransformOptions: androidx.camera.core.SurfaceOutput$GlTransformOptions USE_SURFACE_TEXTURE_TRANSFORM>;

        $r14 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor>;

        specialinvoke $r13.<androidx.camera.core.processing.SurfaceProcessorNode: void <init>(androidx.camera.core.impl.CameraInternal,androidx.camera.core.SurfaceOutput$GlTransformOptions,androidx.camera.core.processing.SurfaceProcessorInternal)>(r4, $r15, $r14);

        r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorNode mNode> = $r13;

        $r16 = new androidx.camera.core.processing.SettableSurface;

        $r17 = new android.graphics.Matrix;

        specialinvoke $r17.<android.graphics.Matrix: void <init>()>();

        $r18 = specialinvoke r0.<androidx.camera.core.Preview: android.graphics.Rect getCropRect(android.util.Size)>(r3);

        $r19 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r18);

        $r20 = (android.graphics.Rect) $r19;

        $i0 = virtualinvoke r0.<androidx.camera.core.Preview: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r4);

        specialinvoke $r16.<androidx.camera.core.processing.SettableSurface: void <init>(int,android.util.Size,int,android.graphics.Matrix,boolean,android.graphics.Rect,int,boolean)>(1, r3, 34, $r17, 1, $r20, $i0, 0);

        r5 = $r16;

        $r21 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5);

        r6 = staticinvoke <androidx.camera.core.processing.SurfaceEdge: androidx.camera.core.processing.SurfaceEdge create(java.util.List)>($r21);

        $r22 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorNode mNode>;

        r7 = virtualinvoke $r22.<androidx.camera.core.processing.SurfaceProcessorNode: androidx.camera.core.processing.SurfaceEdge transform(androidx.camera.core.processing.SurfaceEdge)>(r6);

        $r23 = virtualinvoke r7.<androidx.camera.core.processing.SurfaceEdge: java.util.List getSurfaces()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (androidx.camera.core.processing.SettableSurface) $r24;

        r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface> = r5;

        $r25 = virtualinvoke r8.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest createSurfaceRequest(androidx.camera.core.impl.CameraInternal)>(r4);

        r0.<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest> = $r25;

        $r26 = r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        if $r26 == null goto label1;

        specialinvoke r0.<androidx.camera.core.Preview: void sendSurfaceRequest()>();

     label1:
        r9 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r2);

        specialinvoke r0.<androidx.camera.core.Preview: void addCameraSurfaceAndErrorListener(androidx.camera.core.impl.SessionConfig$Builder,java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r9, r1, r2, r3);

        return r9;
    }

    public void setProcessor(androidx.camera.core.processing.SurfaceProcessorInternal)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.processing.SurfaceProcessorInternal r1;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.processing.SurfaceProcessorInternal;

        r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor> = r1;

        return;
    }

    public androidx.camera.core.processing.SurfaceProcessorInternal getProcessor()
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.processing.SurfaceProcessorInternal $r1;

        r0 := @this: androidx.camera.core.Preview;

        $r1 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorInternal mSurfaceProcessor>;

        return $r1;
    }

    private void clearPipeline()
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        androidx.camera.core.processing.SurfaceProcessorNode r2;

        r0 := @this: androidx.camera.core.Preview;

        r1 = r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface>;

        if r1 == null goto label1;

        virtualinvoke r1.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface> = null;

     label1:
        r2 = r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorNode mNode>;

        if r2 == null goto label2;

        virtualinvoke r2.<androidx.camera.core.processing.SurfaceProcessorNode: void release()>();

        r0.<androidx.camera.core.Preview: androidx.camera.core.processing.SurfaceProcessorNode mNode> = null;

     label2:
        r0.<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest> = null;

        return;
    }

    private void addCameraSurfaceAndErrorListener(androidx.camera.core.impl.SessionConfig$Builder, java.lang.String, androidx.camera.core.impl.PreviewConfig, android.util.Size)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.SessionConfig$Builder r1;
        java.lang.String r2;
        androidx.camera.core.impl.PreviewConfig r3;
        android.util.Size r4;
        androidx.camera.core.Preview$SurfaceProvider $r5;
        androidx.camera.core.impl.SessionConfig$ErrorListener $r6;
        androidx.camera.core.impl.DeferrableSurface $r8;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$Builder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.camera.core.impl.PreviewConfig;

        r4 := @parameter3: android.util.Size;

        $r5 = r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        if $r5 == null goto label1;

        $r8 = r0.<androidx.camera.core.Preview: androidx.camera.core.impl.DeferrableSurface mSessionDeferrableSurface>;

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)>($r8);

     label1:
        $r6 = dynamicinvoke "onError" <androidx.camera.core.impl.SessionConfig$ErrorListener (androidx.camera.core.Preview,java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r0, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.Preview: void lambda$addCameraSurfaceAndErrorListener$0(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError));

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addErrorListener(androidx.camera.core.impl.SessionConfig$ErrorListener)>($r6);

        return;
    }

    public void setTargetRotation(int)
    {
        androidx.camera.core.Preview r0;
        int i0;
        boolean $z0;

        r0 := @this: androidx.camera.core.Preview;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.camera.core.Preview: boolean setTargetRotationInternal(int)>(i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.camera.core.Preview: void sendTransformationInfoIfReady()>();

     label1:
        return;
    }

    private void sendTransformationInfoIfReady()
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.CameraInternal r1;
        androidx.camera.core.Preview$SurfaceProvider r2;
        android.graphics.Rect r3;
        androidx.camera.core.SurfaceRequest r4;
        android.util.Size $r5;
        int $i0, $i1;
        androidx.camera.core.SurfaceRequest$TransformationInfo $r6;

        r0 := @this: androidx.camera.core.Preview;

        r1 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.CameraInternal getCamera()>();

        r2 = r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        $r5 = r0.<androidx.camera.core.Preview: android.util.Size mSurfaceSize>;

        r3 = specialinvoke r0.<androidx.camera.core.Preview: android.graphics.Rect getCropRect(android.util.Size)>($r5);

        r4 = r0.<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest>;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 == null goto label1;

        if r4 == null goto label1;

        $i0 = virtualinvoke r0.<androidx.camera.core.Preview: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r1);

        $i1 = virtualinvoke r0.<androidx.camera.core.Preview: int getAppTargetRotation()>();

        $r6 = staticinvoke <androidx.camera.core.SurfaceRequest$TransformationInfo: androidx.camera.core.SurfaceRequest$TransformationInfo of(android.graphics.Rect,int,int)>(r3, $i0, $i1);

        virtualinvoke r4.<androidx.camera.core.SurfaceRequest: void updateTransformationInfo(androidx.camera.core.SurfaceRequest$TransformationInfo)>($r6);

     label1:
        return;
    }

    private android.graphics.Rect getCropRect(android.util.Size)
    {
        androidx.camera.core.Preview r0;
        android.util.Size r1;
        android.graphics.Rect $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview: android.graphics.Rect getViewPortCropRect()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<androidx.camera.core.Preview: android.graphics.Rect getViewPortCropRect()>();

        return $r4;

     label1:
        if r1 == null goto label2;

        $r3 = new android.graphics.Rect;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r3;

     label2:
        return null;
    }

    public void setSurfaceProvider(java.util.concurrent.Executor, androidx.camera.core.Preview$SurfaceProvider)
    {
        androidx.camera.core.Preview r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.Preview$SurfaceProvider r2;
        android.util.Size $r3, $r7;
        java.lang.String $r4;
        androidx.camera.core.impl.UseCaseConfig $r5;
        androidx.camera.core.impl.PreviewConfig $r6;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.Preview$SurfaceProvider;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        if r2 != null goto label1;

        r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider> = null;

        virtualinvoke r0.<androidx.camera.core.Preview: void notifyInactive()>();

        goto label2;

     label1:
        r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider> = r2;

        r0.<androidx.camera.core.Preview: java.util.concurrent.Executor mSurfaceProviderExecutor> = r1;

        virtualinvoke r0.<androidx.camera.core.Preview: void notifyActive()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.Preview: android.util.Size getAttachedSurfaceResolution()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<androidx.camera.core.Preview: java.lang.String getCameraId()>();

        $r5 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r6 = (androidx.camera.core.impl.PreviewConfig) $r5;

        $r7 = virtualinvoke r0.<androidx.camera.core.Preview: android.util.Size getAttachedSurfaceResolution()>();

        specialinvoke r0.<androidx.camera.core.Preview: void updateConfigAndOutput(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>($r4, $r6, $r7);

        virtualinvoke r0.<androidx.camera.core.Preview: void notifyReset()>();

     label2:
        return;
    }

    private void sendSurfaceRequest()
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.Preview$SurfaceProvider r1, $r3;
        androidx.camera.core.SurfaceRequest r2, $r5;
        java.lang.Object $r4, $r6;
        java.util.concurrent.Executor $r7;
        java.lang.Runnable $r8;

        r0 := @this: androidx.camera.core.Preview;

        $r3 = r0.<androidx.camera.core.Preview: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        $r4 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        r1 = (androidx.camera.core.Preview$SurfaceProvider) $r4;

        $r5 = r0.<androidx.camera.core.Preview: androidx.camera.core.SurfaceRequest mCurrentSurfaceRequest>;

        $r6 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r2 = (androidx.camera.core.SurfaceRequest) $r6;

        $r7 = r0.<androidx.camera.core.Preview: java.util.concurrent.Executor mSurfaceProviderExecutor>;

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.Preview$SurfaceProvider,androidx.camera.core.SurfaceRequest)>(r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.Preview: void lambda$sendSurfaceRequest$1(androidx.camera.core.Preview$SurfaceProvider,androidx.camera.core.SurfaceRequest)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

        specialinvoke r0.<androidx.camera.core.Preview: void sendTransformationInfoIfReady()>();

        return;
    }

    public void setSurfaceProvider(androidx.camera.core.Preview$SurfaceProvider)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.Preview$SurfaceProvider r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.Preview$SurfaceProvider;

        $r2 = <androidx.camera.core.Preview: java.util.concurrent.Executor DEFAULT_SURFACE_PROVIDER_EXECUTOR>;

        virtualinvoke r0.<androidx.camera.core.Preview: void setSurfaceProvider(java.util.concurrent.Executor,androidx.camera.core.Preview$SurfaceProvider)>($r2, r1);

        return;
    }

    private void updateConfigAndOutput(java.lang.String, androidx.camera.core.impl.PreviewConfig, android.util.Size)
    {
        androidx.camera.core.Preview r0;
        java.lang.String r1;
        androidx.camera.core.impl.PreviewConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.SessionConfig$Builder $r4;
        androidx.camera.core.impl.SessionConfig $r5;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.PreviewConfig;

        r3 := @parameter2: android.util.Size;

        $r4 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r1, r2, r3);

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.Preview: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r5);

        return;
    }

    public int getTargetRotation()
    {
        androidx.camera.core.Preview r0;
        int $i0;

        r0 := @this: androidx.camera.core.Preview;

        $i0 = virtualinvoke r0.<androidx.camera.core.Preview: int getTargetRotationInternal()>();

        return $i0;
    }

    public androidx.camera.core.ResolutionInfo getResolutionInfo()
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.ResolutionInfo $r1;

        r0 := @this: androidx.camera.core.Preview;

        $r1 = specialinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.ResolutionInfo getResolutionInfo()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        androidx.camera.core.Preview r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: androidx.camera.core.Preview;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preview:");

        $r3 = virtualinvoke r0.<androidx.camera.core.Preview: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean, androidx.camera.core.impl.UseCaseConfigFactory)
    {
        androidx.camera.core.Preview r0;
        boolean z0;
        androidx.camera.core.impl.UseCaseConfigFactory r1;
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType $r2;
        androidx.camera.core.impl.UseCaseConfig$Builder $r3;
        androidx.camera.core.Preview$Defaults $r4;
        androidx.camera.core.impl.PreviewConfig $r5;
        androidx.camera.core.impl.Config r6;
        androidx.camera.core.impl.UseCaseConfig $r7;

        r0 := @this: androidx.camera.core.Preview;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.camera.core.impl.UseCaseConfigFactory;

        $r2 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType PREVIEW>;

        r6 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfigFactory: androidx.camera.core.impl.Config getConfig(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType,int)>($r2, 1);

        if z0 == 0 goto label1;

        $r4 = <androidx.camera.core.Preview: androidx.camera.core.Preview$Defaults DEFAULT_CONFIG>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.Preview$Defaults: androidx.camera.core.impl.PreviewConfig getConfig()>();

        r6 = staticinvoke <androidx.camera.core.impl.Config: androidx.camera.core.impl.Config mergeConfigs(androidx.camera.core.impl.Config,androidx.camera.core.impl.Config)>(r6, $r5);

     label1:
        if r6 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>(r6);

        $r7 = interfaceinvoke $r3.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

     label3:
        return $r7;
    }

    protected androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal, androidx.camera.core.impl.UseCaseConfig$Builder)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.camera.core.impl.UseCaseConfig$Builder r2;
        androidx.camera.core.impl.MutableConfig $r3, $r6, $r10;
        androidx.camera.core.impl.Config$Option $r4, $r7, $r11;
        java.lang.Object $r5;
        java.lang.Integer $r8, $r12;
        androidx.camera.core.impl.UseCaseConfig $r9;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        r2 := @parameter1: androidx.camera.core.impl.UseCaseConfig$Builder;

        $r3 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r4 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_PREVIEW_CAPTURE_PROCESSOR>;

        $r5 = interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r4, null);

        if $r5 == null goto label1;

        $r10 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r11 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(35);

        interfaceinvoke $r10.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r11, $r12);

        goto label2;

     label1:
        $r6 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r7 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        interfaceinvoke $r6.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r7, $r8);

     label2:
        $r9 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        return $r9;
    }

    public androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.Preview r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.Preview$Builder $r2;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = staticinvoke <androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder fromConfig(androidx.camera.core.impl.Config)>(r1);

        return $r2;
    }

    public void onDetached()
    {
        androidx.camera.core.Preview r0;

        r0 := @this: androidx.camera.core.Preview;

        specialinvoke r0.<androidx.camera.core.Preview: void clearPipeline()>();

        return;
    }

    protected android.util.Size onSuggestedResolutionUpdated(android.util.Size)
    {
        androidx.camera.core.Preview r0;
        android.util.Size r1, $r4;
        java.lang.String $r2;
        androidx.camera.core.impl.UseCaseConfig $r3;
        androidx.camera.core.impl.PreviewConfig $r5;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: android.util.Size;

        r0.<androidx.camera.core.Preview: android.util.Size mSurfaceSize> = r1;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview: java.lang.String getCameraId()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r5 = (androidx.camera.core.impl.PreviewConfig) $r3;

        $r4 = r0.<androidx.camera.core.Preview: android.util.Size mSurfaceSize>;

        specialinvoke r0.<androidx.camera.core.Preview: void updateConfigAndOutput(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>($r2, $r5, $r4);

        return r1;
    }

    public void setViewPortCropRect(android.graphics.Rect)
    {
        androidx.camera.core.Preview r0;
        android.graphics.Rect r1;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<androidx.camera.core.UseCase: void setViewPortCropRect(android.graphics.Rect)>(r1);

        specialinvoke r0.<androidx.camera.core.Preview: void sendTransformationInfoIfReady()>();

        return;
    }

    private static void lambda$sendSurfaceRequest$1(androidx.camera.core.Preview$SurfaceProvider, androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.core.Preview$SurfaceProvider r0;
        androidx.camera.core.SurfaceRequest r1;

        r0 := @parameter0: androidx.camera.core.Preview$SurfaceProvider;

        r1 := @parameter1: androidx.camera.core.SurfaceRequest;

        interfaceinvoke r0.<androidx.camera.core.Preview$SurfaceProvider: void onSurfaceRequested(androidx.camera.core.SurfaceRequest)>(r1);

        return;
    }

    private void lambda$addCameraSurfaceAndErrorListener$0(java.lang.String, androidx.camera.core.impl.PreviewConfig, android.util.Size, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.SessionConfig$SessionError)
    {
        androidx.camera.core.Preview r0;
        java.lang.String r1;
        androidx.camera.core.impl.PreviewConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.SessionConfig r4, $r7;
        androidx.camera.core.impl.SessionConfig$SessionError r5;
        androidx.camera.core.impl.SessionConfig$Builder r6;
        boolean $z0;

        r0 := @this: androidx.camera.core.Preview;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.PreviewConfig;

        r3 := @parameter2: android.util.Size;

        r4 := @parameter3: androidx.camera.core.impl.SessionConfig;

        r5 := @parameter4: androidx.camera.core.impl.SessionConfig$SessionError;

        $z0 = virtualinvoke r0.<androidx.camera.core.Preview: boolean isCurrentCamera(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r6 = virtualinvoke r0.<androidx.camera.core.Preview: androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String,androidx.camera.core.impl.PreviewConfig,android.util.Size)>(r1, r2, r3);

        $r7 = virtualinvoke r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.Preview: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r7);

        virtualinvoke r0.<androidx.camera.core.Preview: void notifyReset()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        androidx.camera.core.Preview$Defaults r2;
        java.util.concurrent.Executor r3;

        r2 = new androidx.camera.core.Preview$Defaults;

        specialinvoke r2.<androidx.camera.core.Preview$Defaults: void <init>()>();

        <androidx.camera.core.Preview: androidx.camera.core.Preview$Defaults DEFAULT_CONFIG> = r2;

        $r1 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r3 = (java.util.concurrent.Executor) $r1;

        <androidx.camera.core.Preview: java.util.concurrent.Executor DEFAULT_SURFACE_PROVIDER_EXECUTOR> = r3;

        return;
    }

androidx.camera.core.Preview$1
<androidx.camera.core.Preview$1: androidx.camera.core.impl.ImageInfoProcessor val$processor>
<androidx.camera.core.Preview$1: androidx.camera.core.Preview this$0>
    void <init>(androidx.camera.core.Preview, androidx.camera.core.impl.ImageInfoProcessor)
    {
        androidx.camera.core.Preview$1 r0;
        androidx.camera.core.Preview r1;
        androidx.camera.core.impl.ImageInfoProcessor r2;

        r0 := @this: androidx.camera.core.Preview$1;

        r1 := @parameter0: androidx.camera.core.Preview;

        r2 := @parameter1: androidx.camera.core.impl.ImageInfoProcessor;

        r0.<androidx.camera.core.Preview$1: androidx.camera.core.Preview this$0> = r1;

        r0.<androidx.camera.core.Preview$1: androidx.camera.core.impl.ImageInfoProcessor val$processor> = r2;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.core.Preview$1 r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        androidx.camera.core.internal.CameraCaptureResultImageInfo $r2;
        androidx.camera.core.impl.ImageInfoProcessor $r3;
        boolean $z0;
        androidx.camera.core.Preview $r4;

        r0 := @this: androidx.camera.core.Preview$1;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)>(r1);

        $r3 = r0.<androidx.camera.core.Preview$1: androidx.camera.core.impl.ImageInfoProcessor val$processor>;

        $r2 = new androidx.camera.core.internal.CameraCaptureResultImageInfo;

        specialinvoke $r2.<androidx.camera.core.internal.CameraCaptureResultImageInfo: void <init>(androidx.camera.core.impl.CameraCaptureResult)>(r1);

        $z0 = interfaceinvoke $r3.<androidx.camera.core.impl.ImageInfoProcessor: boolean process(androidx.camera.core.ImageInfo)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.camera.core.Preview$1: androidx.camera.core.Preview this$0>;

        virtualinvoke $r4.<androidx.camera.core.Preview: void notifyUpdated()>();

     label1:
        return;
    }

androidx.camera.core.Preview$Builder
<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>
    public void <init>()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        specialinvoke r0.<androidx.camera.core.Preview$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r1);

        return;
    }

    private void <init>(androidx.camera.core.impl.MutableOptionsBundle)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        java.lang.Class r2;
        androidx.camera.core.impl.Config$Option $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.MutableOptionsBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig> = r1;

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, null);

        r2 = (java.lang.Class) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Landroidx/camera/core/Preview;");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target class configuration for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetClass(java.lang.Class)>(class "Landroidx/camera/core/Preview;");

        return;
    }

    static androidx.camera.core.Preview$Builder fromConfig(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.Config r0;
        androidx.camera.core.Preview$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.Config;

        $r1 = new androidx.camera.core.Preview$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.Preview$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public static androidx.camera.core.Preview$Builder fromConfig(androidx.camera.core.impl.PreviewConfig)
    {
        androidx.camera.core.impl.PreviewConfig r0;
        androidx.camera.core.Preview$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.PreviewConfig;

        $r1 = new androidx.camera.core.Preview$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.Preview$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public androidx.camera.core.impl.MutableConfig getMutableConfig()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        return $r1;
    }

    public androidx.camera.core.impl.PreviewConfig getUseCaseConfig()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.PreviewConfig $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;
        androidx.camera.core.impl.OptionsBundle $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = new androidx.camera.core.impl.PreviewConfig;

        $r2 = r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        $r3 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>($r2);

        specialinvoke $r1.<androidx.camera.core.impl.PreviewConfig: void <init>(androidx.camera.core.impl.OptionsBundle)>($r3);

        return $r1;
    }

    public androidx.camera.core.Preview build()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.MutableConfig $r1, $r6;
        androidx.camera.core.impl.Config$Option $r2, $r7;
        java.lang.Object $r3, $r8;
        androidx.camera.core.Preview $r4;
        androidx.camera.core.impl.PreviewConfig $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r3 = interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, null);

        if $r3 == null goto label1;

        $r6 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r7 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        $r8 = interfaceinvoke $r6.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r7, null);

        if $r8 == null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use both setTargetResolution and setTargetAspectRatio on the same config.");

        throw $r9;

     label1:
        $r4 = new androidx.camera.core.Preview;

        $r5 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.PreviewConfig getUseCaseConfig()>();

        specialinvoke $r4.<androidx.camera.core.Preview: void <init>(androidx.camera.core.impl.PreviewConfig)>($r5);

        return $r4;
    }

    public androidx.camera.core.Preview$Builder setTargetClass(java.lang.Class)
    {
        androidx.camera.core.Preview$Builder r0;
        java.lang.Class r1;
        java.lang.String r2, $r9;
        androidx.camera.core.impl.MutableConfig $r3, $r5;
        androidx.camera.core.impl.Config$Option $r4, $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;
        java.util.UUID $r12;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r4 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r4, r1);

        $r5 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r6 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        $r7 = interfaceinvoke $r5.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, null);

        if null != $r7 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetName(java.lang.String)>(r2);

     label1:
        return r0;
    }

    public androidx.camera.core.Preview$Builder setTargetName(java.lang.String)
    {
        androidx.camera.core.Preview$Builder r0;
        java.lang.String r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setTargetAspectRatio(int)
    {
        androidx.camera.core.Preview$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setTargetRotation(int)
    {
        androidx.camera.core.Preview$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1, $r4;
        androidx.camera.core.impl.Config$Option $r2, $r5;
        java.lang.Integer $r3, $r6;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ROTATION>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        $r4 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r5 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_APP_TARGET_ROTATION>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r5, $r6);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setTargetResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setMaxResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.Preview$Builder r0;
        java.util.List r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_SUPPORTED_RESOLUTIONS>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.Preview$Builder r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_BACKGROUND_EXECUTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_SESSION_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.CaptureConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_CAPTURE_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_SESSION_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.Preview$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_SURFACE_OCCUPANCY_PRIORITY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.CameraSelector r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_SELECTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.UseCase$EventCallback r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_USE_CASE_EVENT_CALLBACK>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setIsRgba8888SurfaceRequired(boolean)
    {
        androidx.camera.core.Preview$Builder r0;
        boolean z0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_RGBA8888_SURFACE_REQUIRED>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setImageInfoProcessor(androidx.camera.core.impl.ImageInfoProcessor)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.ImageInfoProcessor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.ImageInfoProcessor;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option IMAGE_INFO_PROCESSOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setCaptureProcessor(androidx.camera.core.impl.CaptureProcessor)
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.CaptureProcessor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureProcessor;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.PreviewConfig: androidx.camera.core.impl.Config$Option OPTION_PREVIEW_CAPTURE_PROCESSOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.Preview$Builder setZslDisabled(boolean)
    {
        androidx.camera.core.Preview$Builder r0;
        boolean z0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.camera.core.Preview$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_ZSL_DISABLED>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public volatile androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.impl.PreviewConfig $r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.PreviewConfig getUseCaseConfig()>();

        return $r1;
    }

    public volatile java.lang.Object setZslDisabled(boolean)
    {
        androidx.camera.core.Preview$Builder r0, $r1;
        boolean z0;

        r0 := @this: androidx.camera.core.Preview$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setZslDisabled(boolean)>(z0);

        return $r1;
    }

    public volatile java.lang.Object setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.CameraSelector r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setCameraSelector(androidx.camera.core.CameraSelector)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.Preview$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setSurfaceOccupancyPriority(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetName(java.lang.String)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        java.lang.String r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetName(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetClass(java.lang.Class)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        java.lang.Class r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetClass(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build()
    {
        androidx.camera.core.Preview$Builder r0;
        androidx.camera.core.Preview $r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview build()>();

        return $r1;
    }

    public volatile java.lang.Object setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        androidx.camera.core.UseCase$EventCallback r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        java.util.List r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setSupportedResolutions(java.util.List)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setMaxResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setMaxResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setDefaultResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetResolution(android.util.Size)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetRotation(int)
    {
        androidx.camera.core.Preview$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetRotation(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setTargetAspectRatio(int)
    {
        androidx.camera.core.Preview$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.Preview$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetAspectRatio(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.Preview$Builder r0, $r2;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.camera.core.Preview$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setBackgroundExecutor(java.util.concurrent.Executor)>(r1);

        return $r2;
    }

androidx.camera.core.Preview$Defaults
<androidx.camera.core.Preview$Defaults: int DEFAULT_SURFACE_OCCUPANCY_PRIORITY>
<androidx.camera.core.Preview$Defaults: int DEFAULT_ASPECT_RATIO>
<androidx.camera.core.Preview$Defaults: androidx.camera.core.impl.PreviewConfig DEFAULT_CONFIG>
    public void <init>()
    {
        androidx.camera.core.Preview$Defaults r0;

        r0 := @this: androidx.camera.core.Preview$Defaults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.core.impl.PreviewConfig getConfig()
    {
        androidx.camera.core.Preview$Defaults r0;
        androidx.camera.core.impl.PreviewConfig $r1;

        r0 := @this: androidx.camera.core.Preview$Defaults;

        $r1 = <androidx.camera.core.Preview$Defaults: androidx.camera.core.impl.PreviewConfig DEFAULT_CONFIG>;

        return $r1;
    }

    public volatile androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.core.Preview$Defaults r0;
        androidx.camera.core.impl.PreviewConfig $r1;

        r0 := @this: androidx.camera.core.Preview$Defaults;

        $r1 = virtualinvoke r0.<androidx.camera.core.Preview$Defaults: androidx.camera.core.impl.PreviewConfig getConfig()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.Preview$Builder r0, $r1, $r2;
        androidx.camera.core.impl.PreviewConfig $r3;

        $r1 = new androidx.camera.core.Preview$Builder;

        specialinvoke $r1.<androidx.camera.core.Preview$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setSurfaceOccupancyPriority(int)>(2);

        r0 = virtualinvoke $r2.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview$Builder setTargetAspectRatio(int)>(0);

        $r3 = virtualinvoke r0.<androidx.camera.core.Preview$Builder: androidx.camera.core.impl.PreviewConfig getUseCaseConfig()>();

        <androidx.camera.core.Preview$Defaults: androidx.camera.core.impl.PreviewConfig DEFAULT_CONFIG> = $r3;

        return;
    }

androidx.camera.core.Preview$SurfaceProvider
<androidx.camera.core.Preview$SurfaceProvider: void onSurfaceRequested(androidx.camera.core.SurfaceRequest)>
