androidx.camera.viewfinder.SurfaceViewImplementation
<androidx.camera.viewfinder.SurfaceViewImplementation: java.lang.String TAG>
<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>
<androidx.camera.viewfinder.SurfaceViewImplementation: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback mSurfaceRequestCallback>
    void <init>(android.widget.FrameLayout, androidx.camera.viewfinder.ViewfinderTransformation)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        android.widget.FrameLayout r1;
        androidx.camera.viewfinder.ViewfinderTransformation r2;
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback $r3;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        r1 := @parameter0: android.widget.FrameLayout;

        r2 := @parameter1: androidx.camera.viewfinder.ViewfinderTransformation;

        specialinvoke r0.<androidx.camera.viewfinder.ViewfinderImplementation: void <init>(android.widget.FrameLayout,androidx.camera.viewfinder.ViewfinderTransformation)>(r1, r2);

        $r3 = new androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        specialinvoke $r3.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void <init>(androidx.camera.viewfinder.SurfaceViewImplementation)>(r0);

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback mSurfaceRequestCallback> = $r3;

        return;
    }

    void initializeViewfinder()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        android.widget.FrameLayout $r1, $r6, $r12, $r14;
        android.util.Size $r3, $r9, $r11;
        android.view.SurfaceView $r5, $r10, $r13, $r15;
        android.content.Context $r7;
        android.widget.FrameLayout$LayoutParams $r8;
        int $i0, $i1;
        android.view.SurfaceHolder $r16;
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback $r17;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        $r1 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.widget.FrameLayout mParent>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.util.Size mResolution>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = new android.view.SurfaceView;

        $r6 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.widget.FrameLayout mParent>;

        $r7 = virtualinvoke $r6.<android.widget.FrameLayout: android.content.Context getContext()>();

        specialinvoke $r5.<android.view.SurfaceView: void <init>(android.content.Context)>($r7);

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView> = $r5;

        $r10 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r8 = new android.widget.FrameLayout$LayoutParams;

        $r9 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.util.Size mResolution>;

        $i0 = virtualinvoke $r9.<android.util.Size: int getWidth()>();

        $r11 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.util.Size mResolution>;

        $i1 = virtualinvoke $r11.<android.util.Size: int getHeight()>();

        specialinvoke $r8.<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>($i0, $i1);

        virtualinvoke $r10.<android.view.SurfaceView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r8);

        $r12 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.widget.FrameLayout mParent>;

        virtualinvoke $r12.<android.widget.FrameLayout: void removeAllViews()>();

        $r14 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.widget.FrameLayout mParent>;

        $r13 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r14.<android.widget.FrameLayout: void addView(android.view.View)>($r13);

        $r15 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r16 = virtualinvoke $r15.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r17 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback mSurfaceRequestCallback>;

        interfaceinvoke $r16.<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r17);

        return;
    }

    void onSurfaceRequested(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1;
        android.util.Size $r2;
        android.view.SurfaceView $r3, $r7;
        android.content.Context $r4;
        java.util.concurrent.Executor $r5;
        java.lang.Runnable $r6, $r8;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        r1 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r2 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size getResolution()>();

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.util.Size mResolution> = $r2;

        virtualinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation: void initializeViewfinder()>();

        $r3 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r4 = virtualinvoke $r3.<android.view.SurfaceView: android.content.Context getContext()>();

        $r5 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r4);

        $r6 = dynamicinvoke "run" <java.lang.Runnable ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.SurfaceViewImplementation: void lambda$onSurfaceRequested$0()>, methodtype: void __METHODTYPE__());

        virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: void addRequestCancellationListener(java.util.concurrent.Executor,java.lang.Runnable)>($r5, $r6);

        $r7 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.viewfinder.SurfaceViewImplementation,androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.viewfinder.SurfaceViewImplementation: void lambda$onSurfaceRequested$1(androidx.camera.viewfinder.ViewfinderSurfaceRequest)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<android.view.SurfaceView: boolean post(java.lang.Runnable)>($r8);

        return;
    }

    void onAttachedToWindow()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        return;
    }

    void onDetachedFromWindow()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        return;
    }

    android.graphics.Bitmap getViewfinderBitmap()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        android.graphics.Bitmap r1;
        android.view.SurfaceView $r2, $r3, $r6, $r9, $r10, $r12, $r14;
        android.view.SurfaceHolder $r4, $r7;
        android.view.Surface $r5, $r8;
        boolean $z0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r11;
        android.view.PixelCopy$OnPixelCopyFinishedListener $r13;
        android.os.Handler $r15;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        $r2 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r4 = virtualinvoke $r3.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r5 = interfaceinvoke $r4.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        if $r5 == null goto label1;

        $r6 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r7 = virtualinvoke $r6.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r8 = interfaceinvoke $r7.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $z0 = virtualinvoke $r8.<android.view.Surface: boolean isValid()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r9 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $i0 = virtualinvoke $r9.<android.view.SurfaceView: int getWidth()>();

        $r10 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $i1 = virtualinvoke $r10.<android.view.SurfaceView: int getHeight()>();

        $r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r11);

        $r12 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r13 = dynamicinvoke "onPixelCopyFinished" <android.view.PixelCopy$OnPixelCopyFinishedListener ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.SurfaceViewImplementation: void lambda$getViewfinderBitmap$2(int)>, methodtype: void __METHODTYPE__(int));

        $r14 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r15 = virtualinvoke $r14.<android.view.SurfaceView: android.os.Handler getHandler()>();

        staticinvoke <androidx.camera.viewfinder.SurfaceViewImplementation$Api24Impl: void pixelCopyRequest(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r12, r1, $r13, $r15);

        return r1;
    }

    android.view.View getViewfinder()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        android.view.SurfaceView $r1;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        $r1 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        return $r1;
    }

    private static void lambda$getViewfinderBitmap$2(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", "CameraViewfinder.SurfaceViewImplementation.getBitmap() succeeded");

        goto label2;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraViewfinder.SurfaceViewImplementation.getBitmap() failed with error ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void e(java.lang.String,java.lang.String)>("SurfaceViewImpl", $r3);

     label2:
        return;
    }

    private void lambda$onSurfaceRequested$1(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1;
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback $r2;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation;

        r1 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r2 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback mSurfaceRequestCallback>;

        virtualinvoke $r2.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void setSurfaceRequest(androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r1);

        return;
    }

    private static void lambda$onSurfaceRequested$0()
    {
        return;
    }

androidx.camera.viewfinder.SurfaceViewImplementation$Api24Impl
    private void <init>()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$Api24Impl r0;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$Api24Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void pixelCopyRequest(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.SurfaceView r0;
        android.graphics.Bitmap r1;
        android.view.PixelCopy$OnPixelCopyFinishedListener r2;
        android.os.Handler r3;

        r0 := @parameter0: android.view.SurfaceView;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r3 := @parameter3: android.os.Handler;

        staticinvoke <android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>(r0, r1, r2, r3);

        return;
    }

androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback
<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mTargetSize>
<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>
<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mCurrentSurfaceSize>
<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided>
<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>
    void <init>(androidx.camera.viewfinder.SurfaceViewImplementation)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        androidx.camera.viewfinder.SurfaceViewImplementation r1;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        r1 := @parameter0: androidx.camera.viewfinder.SurfaceViewImplementation;

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided> = 0;

        return;
    }

    public void surfaceCreated(android.view.SurfaceHolder)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", "Surface created.");

        return;
    }

    public void surfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        android.util.Size $r8;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface changed. Size: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", $r7);

        $r8 = new android.util.Size;

        specialinvoke $r8.<android.util.Size: void <init>(int,int)>(i1, i2);

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mCurrentSurfaceSize> = $r8;

        specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean tryToComplete()>();

        return;
    }

    public void surfaceDestroyed(android.view.SurfaceHolder)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        android.view.SurfaceHolder r1;
        boolean $z0;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", "Surface destroyed.");

        $z0 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void invalidateSurface()>();

        goto label2;

     label1:
        specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void cancelPreviousRequest()>();

     label2:
        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided> = 0;

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest> = null;

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mCurrentSurfaceSize> = null;

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mTargetSize> = null;

        return;
    }

    void setSurfaceRequest(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r1;
        android.util.Size r2;
        boolean $z0;
        androidx.camera.viewfinder.SurfaceViewImplementation $r3;
        android.view.SurfaceView $r4;
        android.view.SurfaceHolder $r5;
        int $i0, $i1;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        r1 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void cancelPreviousRequest()>();

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest> = r1;

        r2 = virtualinvoke r1.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size getResolution()>();

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mTargetSize> = r2;

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided> = 0;

        $z0 = specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean tryToComplete()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", "Wait for new Surface creation.");

        $r3 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>;

        $r4 = $r3.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r5 = virtualinvoke $r4.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $i0 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        interfaceinvoke $r5.<android.view.SurfaceHolder: void setFixedSize(int,int)>($i0, $i1);

     label1:
        return;
    }

    private boolean tryToComplete()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        android.view.Surface r1;
        androidx.camera.viewfinder.SurfaceViewImplementation $r2, $r5, $r8, $r14;
        android.view.SurfaceView $r3, $r6, $r9;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest $r4, $r10;
        android.view.SurfaceHolder $r7;
        boolean $z0;
        android.content.Context $r11;
        java.util.concurrent.Executor $r12;
        androidx.core.util.Consumer $r13;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        $r2 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>;

        $r3 = $r2.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        if $r3 == null goto label1;

        $r4 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        if $r4 != null goto label2;

     label1:
        return 0;

     label2:
        $r5 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>;

        $r6 = $r5.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r7 = virtualinvoke $r6.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        r1 = interfaceinvoke $r7.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $z0 = specialinvoke r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean canProvideSurface()>();

        if $z0 == 0 goto label3;

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", "Surface set on viewfinder.");

        $r10 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        $r8 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>;

        $r9 = $r8.<androidx.camera.viewfinder.SurfaceViewImplementation: android.view.SurfaceView mSurfaceView>;

        $r11 = virtualinvoke $r9.<android.view.SurfaceView: android.content.Context getContext()>();

        $r12 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r11);

        $r13 = dynamicinvoke "accept" <androidx.core.util.Consumer ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: void lambda$tryToComplete$0(androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result)>, methodtype: void __METHODTYPE__(androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result));

        virtualinvoke $r10.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: void provideSurface(android.view.Surface,java.util.concurrent.Executor,androidx.core.util.Consumer)>(r1, $r12, $r13);

        r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided> = 1;

        $r14 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.SurfaceViewImplementation this$0>;

        virtualinvoke $r14.<androidx.camera.viewfinder.SurfaceViewImplementation: void onSurfaceProvided()>();

        return 1;

     label3:
        return 0;
    }

    private boolean canProvideSurface()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        boolean $z0, $z1, $z2;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest $r1;
        android.util.Size $r2, $r3, $r4;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        $z0 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: boolean mWasSurfaceProvided>;

        if $z0 != 0 goto label1;

        $r1 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mTargetSize>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mTargetSize>;

        $r3 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: android.util.Size mCurrentSurfaceSize>;

        $z1 = virtualinvoke $r4.<android.util.Size: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void cancelPreviousRequest()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest $r1, $r4, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        $r1 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request canceled: ");

        $r4 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", $r6);

        $r7 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        virtualinvoke $r7.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: boolean willNotProvideSurface()>();

     label1:
        return;
    }

    private void invalidateSurface()
    {
        androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback r0;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest $r1, $r4, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r8;

        r0 := @this: androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback;

        $r1 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface invalidated ");

        $r4 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", $r6);

        $r7 = r0.<androidx.camera.viewfinder.SurfaceViewImplementation$SurfaceRequestCallback: androidx.camera.viewfinder.ViewfinderSurfaceRequest mSurfaceRequest>;

        $r8 = virtualinvoke $r7.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface getViewfinderSurface()>();

        virtualinvoke $r8.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: void close()>();

     label1:
        return;
    }

    private static void lambda$tryToComplete$0(androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result)
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provide surface result = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("SurfaceViewImpl", $r4);

        return;
    }

