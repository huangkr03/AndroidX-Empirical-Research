androidx.lifecycle.ComputableLiveData
<androidx.lifecycle.ComputableLiveData: java.util.concurrent.Executor executor>
<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData _liveData>
<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData liveData>
<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>
<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing>
<androidx.lifecycle.ComputableLiveData: java.lang.Runnable refreshRunnable>
<androidx.lifecycle.ComputableLiveData: java.lang.Runnable invalidationRunnable>
    public void <init>(java.util.concurrent.Executor)
    {
        androidx.lifecycle.ComputableLiveData r0;
        java.util.concurrent.Executor r1;
        androidx.lifecycle.ComputableLiveData$_liveData$1 $r2;
        androidx.lifecycle.LiveData $r3, $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5, $r6;
        java.lang.Runnable $r7, $r8;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "executor");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.Executor executor> = r1;

        $r2 = new androidx.lifecycle.ComputableLiveData$_liveData$1;

        specialinvoke $r2.<androidx.lifecycle.ComputableLiveData$_liveData$1: void <init>(androidx.lifecycle.ComputableLiveData)>(r0);

        $r3 = (androidx.lifecycle.LiveData) $r2;

        r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData _liveData> = $r3;

        $r4 = r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData _liveData>;

        r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData liveData> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing> = $r6;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.lifecycle.ComputableLiveData)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.lifecycle.ComputableLiveData: void refreshRunnable$lambda$0(androidx.lifecycle.ComputableLiveData)>, methodtype: void __METHODTYPE__());

        r0.<androidx.lifecycle.ComputableLiveData: java.lang.Runnable refreshRunnable> = $r7;

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.lifecycle.ComputableLiveData)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.lifecycle.ComputableLiveData: void invalidationRunnable$lambda$1(androidx.lifecycle.ComputableLiveData)>, methodtype: void __METHODTYPE__());

        r0.<androidx.lifecycle.ComputableLiveData: java.lang.Runnable invalidationRunnable> = $r8;

        return;
    }

    public void <init>(java.util.concurrent.Executor, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.lifecycle.ComputableLiveData r0;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        java.util.concurrent.Executor $r2, r3;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        r3 := @parameter0: java.util.concurrent.Executor;

        i0 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "getIOThreadExecutor()");

        r3 = $r2;

     label1:
        specialinvoke r0.<androidx.lifecycle.ComputableLiveData: void <init>(java.util.concurrent.Executor)>(r3);

        return;
    }

    public final java.util.concurrent.Executor getExecutor$lifecycle_livedata_release()
    {
        androidx.lifecycle.ComputableLiveData r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.Executor executor>;

        return $r1;
    }

    public androidx.lifecycle.LiveData getLiveData()
    {
        androidx.lifecycle.ComputableLiveData r0;
        androidx.lifecycle.LiveData $r1;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData liveData>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getInvalid$lifecycle_livedata_release()
    {
        androidx.lifecycle.ComputableLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getComputing$lifecycle_livedata_release()
    {
        androidx.lifecycle.ComputableLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        return $r1;
    }

    public static void getRefreshRunnable$lifecycle_livedata_release$annotations()
    {
        return;
    }

    public static void getInvalidationRunnable$lifecycle_livedata_release$annotations()
    {
        return;
    }

    public void invalidate()
    {
        androidx.lifecycle.ComputableLiveData r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r2 = r0.<androidx.lifecycle.ComputableLiveData: java.lang.Runnable invalidationRunnable>;

        virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: void executeOnMainThread(java.lang.Runnable)>($r2);

        return;
    }

<androidx.lifecycle.ComputableLiveData: java.lang.Object compute()>
    public void <init>()
    {
        androidx.lifecycle.ComputableLiveData r0;

        r0 := @this: androidx.lifecycle.ComputableLiveData;

        specialinvoke r0.<androidx.lifecycle.ComputableLiveData: void <init>(java.util.concurrent.Executor,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        return;
    }

    private static final void refreshRunnable$lambda$0(androidx.lifecycle.ComputableLiveData)
    {
        androidx.lifecycle.ComputableLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r3, $r4, $r7;
        boolean $z0, $z1, $z2, z3, z4;
        androidx.lifecycle.LiveData $r5;
        java.lang.Throwable $r6, r9;
        java.lang.Object r8;

        r0 := @parameter0: androidx.lifecycle.ComputableLiveData;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        z3 = 0;

     label1:
        z4 = 0;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label8;

     label2:
        r8 = null;

     label3:
        $r3 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        if $z2 == 0 goto label4;

        z4 = 1;

        r8 = virtualinvoke r0.<androidx.lifecycle.ComputableLiveData: java.lang.Object compute()>();

        goto label3;

     label4:
        if z4 == 0 goto label5;

        $r5 = virtualinvoke r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData getLiveData()>();

        virtualinvoke $r5.<androidx.lifecycle.LiveData: void postValue(java.lang.Object)>(r8);

     label5:
        $r4 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        goto label8;

     label6:
        $r6 := @caughtexception;

        r9 = $r6;

     label7:
        $r7 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        throw r9;

     label8:
        if z4 == 0 goto label9;

        $r2 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label1;

     label9:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static final void invalidationRunnable$lambda$1(androidx.lifecycle.ComputableLiveData)
    {
        androidx.lifecycle.ComputableLiveData r0;
        boolean z0, $z1;
        androidx.lifecycle.LiveData $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.lang.Runnable $r3;
        java.util.concurrent.Executor $r4;

        r0 := @parameter0: androidx.lifecycle.ComputableLiveData;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = virtualinvoke r0.<androidx.lifecycle.ComputableLiveData: androidx.lifecycle.LiveData getLiveData()>();

        z0 = virtualinvoke $r1.<androidx.lifecycle.LiveData: boolean hasActiveObservers()>();

        $r2 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $r4 = r0.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.Executor executor>;

        $r3 = r0.<androidx.lifecycle.ComputableLiveData: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

     label1:
        return;
    }

androidx.lifecycle.ComputableLiveData$_liveData$1
<androidx.lifecycle.ComputableLiveData$_liveData$1: androidx.lifecycle.ComputableLiveData this$0>
    void <init>(androidx.lifecycle.ComputableLiveData)
    {
        androidx.lifecycle.ComputableLiveData$_liveData$1 r0;
        androidx.lifecycle.ComputableLiveData $r1;

        r0 := @this: androidx.lifecycle.ComputableLiveData$_liveData$1;

        $r1 := @parameter0: androidx.lifecycle.ComputableLiveData;

        r0.<androidx.lifecycle.ComputableLiveData$_liveData$1: androidx.lifecycle.ComputableLiveData this$0> = $r1;

        specialinvoke r0.<androidx.lifecycle.LiveData: void <init>()>();

        return;
    }

    protected void onActive()
    {
        androidx.lifecycle.ComputableLiveData$_liveData$1 r0;
        androidx.lifecycle.ComputableLiveData $r1, $r3;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r4;

        r0 := @this: androidx.lifecycle.ComputableLiveData$_liveData$1;

        $r1 = r0.<androidx.lifecycle.ComputableLiveData$_liveData$1: androidx.lifecycle.ComputableLiveData this$0>;

        $r2 = virtualinvoke $r1.<androidx.lifecycle.ComputableLiveData: java.util.concurrent.Executor getExecutor$lifecycle_livedata_release()>();

        $r3 = r0.<androidx.lifecycle.ComputableLiveData$_liveData$1: androidx.lifecycle.ComputableLiveData this$0>;

        $r4 = $r3.<androidx.lifecycle.ComputableLiveData: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

