androidx.test.espresso.base.EspressoExceptionHandler
    public void <init>(java.lang.Class)
    {
        androidx.test.espresso.base.EspressoExceptionHandler r0;
        java.lang.Class r1;
        java.lang.Class[] r2;

        r0 := @this: androidx.test.espresso.base.EspressoExceptionHandler;

        r1 := @parameter0: java.lang.Class;

        r2 = newarray (java.lang.Class)[1];

        r2[0] = r1;

        specialinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: void <init>(java.lang.Class[])>(r2);

        return;
    }

    public volatile void handleSafely(java.lang.Object, org.hamcrest.Matcher)
    {
        androidx.test.espresso.base.EspressoExceptionHandler r0;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;
        java.lang.Throwable $r3;

        r0 := @this: androidx.test.espresso.base.EspressoExceptionHandler;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Matcher;

        $r3 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.test.espresso.base.EspressoExceptionHandler: void handleSafely(java.lang.Throwable,org.hamcrest.Matcher)>($r3, r2);

        return;
    }

    public void handleSafely(java.lang.Throwable, org.hamcrest.Matcher)
    {
        java.lang.Throwable r0, r7;
        org.hamcrest.Matcher r1;
        java.lang.Thread $r2;
        java.lang.StackTraceElement[] $r3;
        androidx.test.espresso.base.EspressoExceptionHandler r4;
        java.lang.RuntimeException r5, r6;

        r4 := @this: androidx.test.espresso.base.EspressoExceptionHandler;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: org.hamcrest.Matcher;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r3);

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(r0);

        r6 = new java.lang.RuntimeException;

        r5 = r6;

        specialinvoke r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        r7 = (java.lang.Throwable) r5;

        throw r7;
    }

