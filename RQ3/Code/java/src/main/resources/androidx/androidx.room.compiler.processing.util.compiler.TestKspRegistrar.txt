androidx.room.compiler.processing.util.compiler.TestKspRegistrar
<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>
<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions>
<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.util.List processorProviders>
<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>
    public void <init>(java.io.File, com.google.devtools.ksp.KspOptions$Builder, java.util.List, org.jetbrains.kotlin.cli.common.messages.MessageCollector)
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        java.io.File r1;
        com.google.devtools.ksp.KspOptions$Builder r2;
        java.util.List r3;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector r4;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: com.google.devtools.ksp.KspOptions$Builder;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: org.jetbrains.kotlin.cli.common.messages.MessageCollector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "kspWorkingDir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "baseOptions");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "processorProviders");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "messageCollector");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir> = r1;

        r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions> = r2;

        r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.util.List processorProviders> = r3;

        r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector> = r4;

        return;
    }

    public final java.io.File getKspWorkingDir()
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        java.io.File $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

        return $r1;
    }

    public final com.google.devtools.ksp.KspOptions$Builder getBaseOptions()
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        com.google.devtools.ksp.KspOptions$Builder $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions>;

        return $r1;
    }

    public final java.util.List getProcessorProviders()
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.util.List processorProviders>;

        return $r1;
    }

    public final org.jetbrains.kotlin.cli.common.messages.MessageCollector getMessageCollector()
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>;

        return $r1;
    }

    public void registerProjectComponents(org.jetbrains.kotlin.com.intellij.mock.MockProject, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar r0;
        org.jetbrains.kotlin.com.intellij.mock.MockProject r1;
        org.jetbrains.kotlin.config.CompilerConfiguration r2;
        java.util.List r3, $r8, $r10, $r13, $r15, $r24, $r60, $r61, r62, r68, r75, r81;
        java.lang.String $r4, $r30, $r35, $r40, $r44, $r48, r53;
        org.jetbrains.kotlin.config.CompilerConfigurationKey $r5;
        java.lang.Object $r6, r66, r72, r79, r85;
        java.util.ArrayList $r7, $r9, $r12, $r14;
        int $i0, $i1;
        boolean $z1, $z3, $z5, $z7, $z10, $z15, $z21;
        java.util.Collection $r11, $r16, $r64, $r70, r74, $r77, $r83, r87;
        com.google.devtools.ksp.processing.impl.MessageCollectorBasedKSPLogger $r17, r88;
        com.google.devtools.ksp.KspOptions$Builder $r18, $r21, r50, $r52, r54;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r19, $r20;
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension $r22;
        com.google.devtools.ksp.processing.KSPLogger $r23;
        org.jetbrains.kotlin.resolve.extensions.AnalysisHandlerExtension$Companion $r25;
        org.jetbrains.kotlin.com.intellij.openapi.project.Project $r26;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.impl.ExtensionsAreaImpl $r27;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.ProjectExtensionPointName $r28;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea $r29;
        java.io.File $r31, $r32, $r34, $r39, $r43, $r47, $r55, $r56, $r57, $r58, $r59;
        com.google.devtools.ksp.KspCliOption $r33, $r38, $r42, $r46;
        java.lang.Iterable r63, $r67, r69, r76, $r80, r82;
        java.util.Iterator r65, r71, r78, r84;
        org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot r73;
        org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot r86;
        com.google.devtools.ksp.KspOptions $r89;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.mock.MockProject;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "configuration");

        r50 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions>;

        $r52 = r50;

        $r4 = virtualinvoke r1.<org.jetbrains.kotlin.com.intellij.mock.MockProject: java.lang.String getBasePath()>();

        if $r4 == null goto label01;

        r53 = $r4;

        r54 = r50;

        $r55 = new java.io.File;

        specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>(r53);

        $r52 = r54;

        goto label02;

     label01:
        $r55 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

     label02:
        virtualinvoke $r52.<com.google.devtools.ksp.KspOptions$Builder: void setProjectBaseDir(java.io.File)>($r55);

        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setIncremental(boolean)>(0);

        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setIncrementalLog(boolean)>(0);

        $r56 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.io.File getClassOutputDir()>();

        if $r56 != null goto label03;

        $r47 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

        $r46 = <com.google.devtools.ksp.KspCliOption: com.google.devtools.ksp.KspCliOption CLASS_OUTPUT_DIR_OPTION>;

        $r48 = virtualinvoke $r46.<com.google.devtools.ksp.KspCliOption: java.lang.String getOptionName()>();

        $r56 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r47, $r48);

     label03:
        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setClassOutputDir(java.io.File)>($r56);

        $r57 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.io.File getResourceOutputDir()>();

        if $r57 != null goto label04;

        $r43 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

        $r42 = <com.google.devtools.ksp.KspCliOption: com.google.devtools.ksp.KspCliOption RESOURCE_OUTPUT_DIR_OPTION>;

        $r44 = virtualinvoke $r42.<com.google.devtools.ksp.KspCliOption: java.lang.String getOptionName()>();

        $r57 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r43, $r44);

     label04:
        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setResourceOutputDir(java.io.File)>($r57);

        $r58 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.io.File getCachesDir()>();

        if $r58 != null goto label05;

        $r39 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

        $r38 = <com.google.devtools.ksp.KspCliOption: com.google.devtools.ksp.KspCliOption CACHES_DIR_OPTION>;

        $r40 = virtualinvoke $r38.<com.google.devtools.ksp.KspCliOption: java.lang.String getOptionName()>();

        $r58 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r39, $r40);

     label05:
        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setCachesDir(java.io.File)>($r58);

        $r59 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.io.File getKspOutputDir()>();

        if $r59 != null goto label06;

        $r34 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.io.File kspWorkingDir>;

        $r33 = <com.google.devtools.ksp.KspCliOption: com.google.devtools.ksp.KspCliOption KSP_OUTPUT_DIR_OPTION>;

        $r35 = virtualinvoke $r33.<com.google.devtools.ksp.KspCliOption: java.lang.String getOptionName()>();

        $r59 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r34, $r35);

     label06:
        virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: void setKspOutputDir(java.io.File)>($r59);

        $r5 = <org.jetbrains.kotlin.cli.common.CLIConfigurationKeys: org.jetbrains.kotlin.config.CompilerConfigurationKey CONTENT_ROOTS>;

        $r6 = virtualinvoke r2.<org.jetbrains.kotlin.config.CompilerConfiguration: java.lang.Object get(org.jetbrains.kotlin.config.CompilerConfigurationKey)>($r5);

        $r60 = (java.util.List) $r6;

        if $r60 != null goto label07;

        $r61 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label08;

     label07:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r60, "configuration[CLIConfigu\u2026ENT_ROOTS] ?: emptyList()");

        $r61 = $r60;

     label08:
        r3 = $r61;

        r62 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.util.List getCompileClasspath()>();

        r63 = (java.lang.Iterable) r3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r64 = (java.util.Collection) $r7;

        r65 = interfaceinvoke r63.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z15 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label10;

        r66 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        $z10 = r66 instanceof org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot;

        if $z10 == 0 goto label09;

        interfaceinvoke $r64.<java.util.Collection: boolean add(java.lang.Object)>(r66);

        goto label09;

     label10:
        $r8 = (java.util.List) $r64;

        $r67 = (java.lang.Iterable) $r8;

        r68 = r62;

        r69 = $r67;

        $r9 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r67, 10);

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        $r70 = (java.util.Collection) $r9;

        r71 = interfaceinvoke r69.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        r72 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        r73 = (org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot) r72;

        r74 = $r70;

        $r32 = virtualinvoke r73.<org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot: java.io.File getFile()>();

        interfaceinvoke r74.<java.util.Collection: boolean add(java.lang.Object)>($r32);

        goto label11;

     label12:
        $r10 = (java.util.List) $r70;

        $r11 = (java.util.Collection) $r10;

        interfaceinvoke r68.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        r75 = virtualinvoke r50.<com.google.devtools.ksp.KspOptions$Builder: java.util.List getJavaSourceRoots()>();

        r76 = (java.lang.Iterable) r3;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r77 = (java.util.Collection) $r12;

        r78 = interfaceinvoke r76.<java.lang.Iterable: java.util.Iterator iterator()>();

     label13:
        $z21 = interfaceinvoke r78.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label14;

        r79 = interfaceinvoke r78.<java.util.Iterator: java.lang.Object next()>();

        $z7 = r79 instanceof org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot;

        if $z7 == 0 goto label13;

        interfaceinvoke $r77.<java.util.Collection: boolean add(java.lang.Object)>(r79);

        goto label13;

     label14:
        $r13 = (java.util.List) $r77;

        $r80 = (java.lang.Iterable) $r13;

        r81 = r75;

        r82 = $r80;

        $r14 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r80, 10);

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i1);

        $r83 = (java.util.Collection) $r14;

        r84 = interfaceinvoke r82.<java.lang.Iterable: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        r85 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>();

        r86 = (org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot) r85;

        r87 = $r83;

        $r31 = virtualinvoke r86.<org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot: java.io.File getFile()>();

        interfaceinvoke r87.<java.util.Collection: boolean add(java.lang.Object)>($r31);

        goto label15;

     label16:
        $r15 = (java.util.List) $r83;

        $r16 = (java.util.Collection) $r15;

        interfaceinvoke r81.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        $r17 = new com.google.devtools.ksp.processing.impl.MessageCollectorBasedKSPLogger;

        $r19 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>;

        $r20 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>;

        $r18 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions>;

        $z5 = virtualinvoke $r18.<com.google.devtools.ksp.KspOptions$Builder: boolean getAllWarningsAsErrors()>();

        specialinvoke $r17.<com.google.devtools.ksp.processing.impl.MessageCollectorBasedKSPLogger: void <init>(org.jetbrains.kotlin.cli.common.messages.MessageCollector,org.jetbrains.kotlin.cli.common.messages.MessageCollector,boolean)>($r19, $r20, $z5);

        r88 = $r17;

        $r21 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: com.google.devtools.ksp.KspOptions$Builder baseOptions>;

        $r89 = virtualinvoke $r21.<com.google.devtools.ksp.KspOptions$Builder: com.google.devtools.ksp.KspOptions build()>();

        $r25 = <org.jetbrains.kotlin.resolve.extensions.AnalysisHandlerExtension: org.jetbrains.kotlin.resolve.extensions.AnalysisHandlerExtension$Companion Companion>;

        $r26 = (org.jetbrains.kotlin.com.intellij.openapi.project.Project) r1;

        $r22 = new androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension;

        $r24 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: java.util.List processorProviders>;

        $r23 = (com.google.devtools.ksp.processing.KSPLogger) r88;

        specialinvoke $r22.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension: void <init>(com.google.devtools.ksp.KspOptions,java.util.List,com.google.devtools.ksp.processing.KSPLogger)>($r89, $r24, $r23);

        virtualinvoke $r25.<org.jetbrains.kotlin.resolve.extensions.AnalysisHandlerExtension$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>($r26, $r22);

        $r27 = virtualinvoke r1.<org.jetbrains.kotlin.com.intellij.mock.MockProject: org.jetbrains.kotlin.com.intellij.openapi.extensions.impl.ExtensionsAreaImpl getExtensionArea()>();

        $r29 = (org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea) $r27;

        $r28 = <org.jetbrains.kotlin.com.intellij.psi.PsiTreeChangeListener: org.jetbrains.kotlin.com.intellij.openapi.extensions.ProjectExtensionPointName EP>;

        $r30 = virtualinvoke $r28.<org.jetbrains.kotlin.com.intellij.openapi.extensions.ProjectExtensionPointName: java.lang.String getName()>();

        staticinvoke <org.jetbrains.kotlin.com.intellij.core.CoreApplicationEnvironment: void registerExtensionPoint(org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea,java.lang.String,java.lang.Class)>($r29, $r30, class "Lorg/jetbrains/kotlin/com/intellij/psi/PsiTreeChangeAdapter;");

        return;
    }

androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension
<androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension: java.util.List loadedProviders>
    public void <init>(com.google.devtools.ksp.KspOptions, java.util.List, com.google.devtools.ksp.processing.KSPLogger)
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension r0;
        com.google.devtools.ksp.KspOptions r1;
        java.util.List r2;
        com.google.devtools.ksp.processing.KSPLogger r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension;

        r1 := @parameter0: com.google.devtools.ksp.KspOptions;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.google.devtools.ksp.processing.KSPLogger;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "processorProviders");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "logger");

        specialinvoke r0.<com.google.devtools.ksp.AbstractKotlinSymbolProcessingExtension: void <init>(com.google.devtools.ksp.KspOptions,com.google.devtools.ksp.processing.KSPLogger,boolean)>(r1, r3, 0);

        r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension: java.util.List loadedProviders> = r2;

        return;
    }

    public java.util.List loadProviders()
    {
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar$TestKspExtension: java.util.List loadedProviders>;

        return $r1;
    }

