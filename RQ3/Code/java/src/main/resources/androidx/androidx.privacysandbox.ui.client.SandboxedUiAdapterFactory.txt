androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory INSTANCE>
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory: java.lang.String UI_ADAPTER_BINDER>
    private void <init>()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory r0;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.privacysandbox.ui.core.SandboxedUiAdapter createFromCoreLibInfo(android.os.Bundle)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory r0;
        android.os.Bundle r1;
        android.os.IBinder r2, $r4;
        androidx.privacysandbox.ui.core.ISandboxedUiAdapter r3;
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter $r5;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8, $r9;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coreLibInfo");

        $r4 = virtualinvoke r1.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("uiAdapterBinder");

        if $r4 != null goto label1;

        $r9 = "Invalid bundle, missing uiAdapterBinder.";

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "requireNotNull(coreLibIn\u2026DAPTER_BINDER.\"\n        }");

        r2 = $r4;

        r3 = staticinvoke <androidx.privacysandbox.ui.core.ISandboxedUiAdapter$Stub: androidx.privacysandbox.ui.core.ISandboxedUiAdapter asInterface(android.os.IBinder)>(r2);

        $r5 = new androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "adapterInterface");

        specialinvoke $r5.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter: void <init>(androidx.privacysandbox.ui.core.ISandboxedUiAdapter)>(r3);

        $r6 = (androidx.privacysandbox.ui.core.SandboxedUiAdapter) $r5;

        return $r6;
    }

    static void <clinit>()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory $r0;

        $r0 = new androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory;

        specialinvoke $r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory: void <init>()>();

        <androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory INSTANCE> = $r0;

        return;
    }

androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: android.content.Context context>
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client>
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor>
    public void <init>(android.content.Context, androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient, java.util.concurrent.Executor)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        android.content.Context r1;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient r2;
        java.util.concurrent.Executor r3;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient;

        r3 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "client");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "clientExecutor");

        specialinvoke r0.<androidx.privacysandbox.ui.core.IRemoteSessionClient$Stub: void <init>()>();

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: android.content.Context context> = r1;

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client> = r2;

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor> = r3;

        return;
    }

    public final android.content.Context getContext()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        android.content.Context $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: android.content.Context context>;

        return $r1;
    }

    public final androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient getClient()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client>;

        return $r1;
    }

    public final java.util.concurrent.Executor getClientExecutor()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor>;

        return $r1;
    }

    public void onRemoteSessionOpened(android.view.SurfaceControlViewHost$SurfacePackage, androidx.privacysandbox.ui.core.IRemoteSessionController, boolean)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        android.view.SurfaceControlViewHost$SurfacePackage r1;
        androidx.privacysandbox.ui.core.IRemoteSessionController r2;
        boolean z0;
        android.view.SurfaceView r3, $r4;
        android.content.Context $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        r1 := @parameter0: android.view.SurfaceControlViewHost$SurfacePackage;

        r2 := @parameter1: androidx.privacysandbox.ui.core.IRemoteSessionController;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "surfacePackage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "remoteSessionController");

        $r4 = new android.view.SurfaceView;

        $r5 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: android.content.Context context>;

        specialinvoke $r4.<android.view.SurfaceView: void <init>(android.content.Context)>($r5);

        r3 = $r4;

        virtualinvoke r3.<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>(r1);

        virtualinvoke r3.<android.view.SurfaceView: void setZOrderOnTop(boolean)>(z0);

        $r6 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,android.view.SurfaceView,androidx.privacysandbox.ui.core.IRemoteSessionController)>(r0, r3, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: void onRemoteSessionOpened$lambda$0(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,android.view.SurfaceView,androidx.privacysandbox.ui.core.IRemoteSessionController)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    public void onRemoteSessionError(java.lang.String)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        java.lang.String r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "errorString");

        $r2 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,java.lang.String)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: void onRemoteSessionError$lambda$1(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,java.lang.String)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public void onResizeRequested(int, int)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        int i0, i1;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: java.util.concurrent.Executor clientExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,int,int)>(r0, i0, i1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: void onResizeRequested$lambda$2(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient,int,int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private static final void onRemoteSessionOpened$lambda$0(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient, android.view.SurfaceView, androidx.privacysandbox.ui.core.IRemoteSessionController)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        android.view.SurfaceView $r1;
        androidx.privacysandbox.ui.core.IRemoteSessionController $r2;
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl $r3;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient $r4;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$Session $r5;

        r0 := @parameter0: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $r1 := @parameter1: android.view.SurfaceView;

        $r2 := @parameter2: androidx.privacysandbox.ui.core.IRemoteSessionController;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$surfaceView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$remoteSessionController");

        $r4 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client>;

        $r3 = new androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        specialinvoke $r3.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: void <init>(android.view.SurfaceView,androidx.privacysandbox.ui.core.IRemoteSessionController)>($r1, $r2);

        $r5 = (androidx.privacysandbox.ui.core.SandboxedUiAdapter$Session) $r3;

        interfaceinvoke $r4.<androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient: void onSessionOpened(androidx.privacysandbox.ui.core.SandboxedUiAdapter$Session)>($r5);

        return;
    }

    private static final void onRemoteSessionError$lambda$1(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient, java.lang.String)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient $r3;

        r0 := @parameter0: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$errorString");

        $r3 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client>;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>(java.lang.String)>($r1);

        interfaceinvoke $r3.<androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient: void onSessionError(java.lang.Throwable)>($r2);

        return;
    }

    private static final void onResizeRequested$lambda$2(androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient, int, int)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient r0;
        int $i0, $i1;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient $r1;

        r0 := @parameter0: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient client>;

        interfaceinvoke $r1.<androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient: void onResizeRequested(int,int)>($i0, $i1);

        return;
    }

androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.SurfaceView surfaceView>
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController>
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.View view>
    public void <init>(android.view.SurfaceView, androidx.privacysandbox.ui.core.IRemoteSessionController)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        android.view.SurfaceView r1, $r3;
        androidx.privacysandbox.ui.core.IRemoteSessionController r2;
        android.view.View $r4;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        r1 := @parameter0: android.view.SurfaceView;

        r2 := @parameter1: androidx.privacysandbox.ui.core.IRemoteSessionController;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "surfaceView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "remoteSessionController");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.SurfaceView surfaceView> = r1;

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController> = r2;

        $r3 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.SurfaceView surfaceView>;

        $r4 = (android.view.View) $r3;

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.View view> = $r4;

        return;
    }

    public final android.view.SurfaceView getSurfaceView()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        android.view.SurfaceView $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.SurfaceView surfaceView>;

        return $r1;
    }

    public final androidx.privacysandbox.ui.core.IRemoteSessionController getRemoteSessionController()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        androidx.privacysandbox.ui.core.IRemoteSessionController $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController>;

        return $r1;
    }

    public android.view.View getView()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        android.view.View $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.View view>;

        return $r1;
    }

    public void notifyConfigurationChanged(android.content.res.Configuration)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        android.content.res.Configuration r1;
        androidx.privacysandbox.ui.core.IRemoteSessionController $r2;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        r1 := @parameter0: android.content.res.Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        $r2 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController>;

        interfaceinvoke $r2.<androidx.privacysandbox.ui.core.IRemoteSessionController: void notifyConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    public void notifyResized(int, int)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        int i0, i1;
        androidx.privacysandbox.ui.core.IRemoteSessionController $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController>;

        interfaceinvoke $r1.<androidx.privacysandbox.ui.core.IRemoteSessionController: void notifyResized(int,int)>(i0, i1);

        return;
    }

    public void notifyZOrderChanged(boolean)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        boolean z0;
        android.view.SurfaceView $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: android.view.SurfaceView surfaceView>;

        virtualinvoke $r1.<android.view.SurfaceView: void setZOrderOnTop(boolean)>(z0);

        return;
    }

    public void close()
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl r0;
        androidx.privacysandbox.ui.core.IRemoteSessionController $r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl;

        $r1 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$SessionImpl: androidx.privacysandbox.ui.core.IRemoteSessionController remoteSessionController>;

        interfaceinvoke $r1.<androidx.privacysandbox.ui.core.IRemoteSessionController: void close()>();

        return;
    }

androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter
<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter: androidx.privacysandbox.ui.core.ISandboxedUiAdapter adapterInterface>
    public void <init>(androidx.privacysandbox.ui.core.ISandboxedUiAdapter)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter r0;
        androidx.privacysandbox.ui.core.ISandboxedUiAdapter r1;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter;

        r1 := @parameter0: androidx.privacysandbox.ui.core.ISandboxedUiAdapter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "adapterInterface");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter: androidx.privacysandbox.ui.core.ISandboxedUiAdapter adapterInterface> = r1;

        return;
    }

    public void openSession(android.content.Context, int, int, boolean, java.util.concurrent.Executor, androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient)
    {
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter r0;
        android.content.Context r1;
        int i0, i1, i2;
        boolean z0;
        java.util.concurrent.Executor r2;
        androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient r3;
        android.hardware.display.DisplayManager r4;
        java.lang.Object $r5;
        android.view.Display $r6;
        android.os.Binder $r7;
        androidx.privacysandbox.ui.core.ISandboxedUiAdapter $r8;
        androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient $r9;
        android.os.IBinder $r10;
        androidx.privacysandbox.ui.core.IRemoteSessionClient $r11;

        r0 := @this: androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.util.concurrent.Executor;

        r3 := @parameter5: androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "clientExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "client");

        $r5 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type android.hardware.display.DisplayManager");

        r4 = (android.hardware.display.DisplayManager) $r5;

        $r6 = virtualinvoke r4.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        i2 = virtualinvoke $r6.<android.view.Display: int getDisplayId()>();

        $r8 = r0.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter: androidx.privacysandbox.ui.core.ISandboxedUiAdapter adapterInterface>;

        $r7 = new android.os.Binder;

        specialinvoke $r7.<android.os.Binder: void <init>()>();

        $r10 = (android.os.IBinder) $r7;

        $r9 = new androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient;

        specialinvoke $r9.<androidx.privacysandbox.ui.client.SandboxedUiAdapterFactory$RemoteAdapter$RemoteSessionClient: void <init>(android.content.Context,androidx.privacysandbox.ui.core.SandboxedUiAdapter$SessionClient,java.util.concurrent.Executor)>(r1, r3, r2);

        $r11 = (androidx.privacysandbox.ui.core.IRemoteSessionClient) $r9;

        interfaceinvoke $r8.<androidx.privacysandbox.ui.core.ISandboxedUiAdapter: void openRemoteSession(android.os.IBinder,int,int,int,boolean,androidx.privacysandbox.ui.core.IRemoteSessionClient)>($r10, i2, i0, i1, z0, $r11);

        return;
    }

