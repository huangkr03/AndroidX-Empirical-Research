androidx.biometric.FingerprintDialogFragment
<androidx.biometric.FingerprintDialogFragment: java.lang.String TAG>
<androidx.biometric.FingerprintDialogFragment: int STATE_NONE>
<androidx.biometric.FingerprintDialogFragment: int STATE_FINGERPRINT>
<androidx.biometric.FingerprintDialogFragment: int STATE_FINGERPRINT_ERROR>
<androidx.biometric.FingerprintDialogFragment: int STATE_FINGERPRINT_AUTHENTICATED>
<androidx.biometric.FingerprintDialogFragment: int MESSAGE_DISPLAY_TIME_MS>
<androidx.biometric.FingerprintDialogFragment: android.os.Handler mHandler>
<androidx.biometric.FingerprintDialogFragment: java.lang.Runnable mResetDialogRunnable>
<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>
<androidx.biometric.FingerprintDialogFragment: int mErrorTextColor>
<androidx.biometric.FingerprintDialogFragment: int mNormalTextColor>
<androidx.biometric.FingerprintDialogFragment: android.widget.ImageView mFingerprintIcon>
<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView>
    public void <init>()
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.os.Handler $r1;
        android.os.Looper $r2;
        androidx.biometric.FingerprintDialogFragment$1 $r3;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        specialinvoke r0.<androidx.fragment.app.DialogFragment: void <init>()>();

        $r1 = new android.os.Handler;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r2);

        r0.<androidx.biometric.FingerprintDialogFragment: android.os.Handler mHandler> = $r1;

        $r3 = new androidx.biometric.FingerprintDialogFragment$1;

        specialinvoke $r3.<androidx.biometric.FingerprintDialogFragment$1: void <init>(androidx.biometric.FingerprintDialogFragment)>(r0);

        r0.<androidx.biometric.FingerprintDialogFragment: java.lang.Runnable mResetDialogRunnable> = $r3;

        return;
    }

    static androidx.biometric.FingerprintDialogFragment newInstance()
    {
        androidx.biometric.FingerprintDialogFragment $r0;

        $r0 = new androidx.biometric.FingerprintDialogFragment;

        specialinvoke $r0.<androidx.biometric.FingerprintDialogFragment: void <init>()>();

        return $r0;
    }

    public void onCreate(android.os.Bundle)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.os.Bundle r1;
        android.content.Context r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<androidx.fragment.app.DialogFragment: void onCreate(android.os.Bundle)>(r1);

        specialinvoke r0.<androidx.biometric.FingerprintDialogFragment: void connectViewModel()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $i2 = staticinvoke <androidx.biometric.FingerprintDialogFragment$Api26Impl: int getColorErrorAttr()>();

        $i3 = specialinvoke r0.<androidx.biometric.FingerprintDialogFragment: int getThemedColorFor(int)>($i2);

        r0.<androidx.biometric.FingerprintDialogFragment: int mErrorTextColor> = $i3;

        goto label4;

     label1:
        r2 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.content.Context getContext()>();

        if r2 == null goto label2;

        $i1 = <androidx.biometric.R$color: int biometric_error_color>;

        $i4 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>(r2, $i1);

        goto label3;

     label2:
        $i4 = 0;

     label3:
        r0.<androidx.biometric.FingerprintDialogFragment: int mErrorTextColor> = $i4;

     label4:
        $i5 = specialinvoke r0.<androidx.biometric.FingerprintDialogFragment: int getThemedColorFor(int)>(16842808);

        r0.<androidx.biometric.FingerprintDialogFragment: int mNormalTextColor> = $i5;

        return;
    }

    public android.app.Dialog onCreateDialog(android.os.Bundle)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.os.Bundle r1;
        androidx.appcompat.app.AlertDialog$Builder r2, r31;
        android.view.View r3, $r13, $r21, $r24, $r26;
        android.widget.TextView r4, r22, $r27;
        androidx.appcompat.app.AlertDialog r5;
        android.content.Context $r7, $r11;
        androidx.biometric.BiometricViewModel $r8, $r14, $r18, $r19, $r28;
        java.lang.CharSequence $r9, r20, r23, r33;
        android.view.LayoutInflater $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        android.widget.ImageView $r25;
        java.lang.Object $r29, r30;
        androidx.biometric.FingerprintDialogFragment$2 r32;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 := @parameter0: android.os.Bundle;

        r31 = new androidx.appcompat.app.AlertDialog$Builder;

        $r7 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.content.Context requireContext()>();

        specialinvoke r31.<androidx.appcompat.app.AlertDialog$Builder: void <init>(android.content.Context)>($r7);

        r2 = r31;

        $r8 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $r9 = virtualinvoke $r8.<androidx.biometric.BiometricViewModel: java.lang.CharSequence getTitle()>();

        virtualinvoke r2.<androidx.appcompat.app.AlertDialog$Builder: androidx.appcompat.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>($r9);

        $r11 = virtualinvoke r2.<androidx.appcompat.app.AlertDialog$Builder: android.content.Context getContext()>();

        $r12 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>($r11);

        $i0 = <androidx.biometric.R$layout: int fingerprint_dialog_layout>;

        r3 = virtualinvoke $r12.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>($i0, null);

        $i1 = <androidx.biometric.R$id: int fingerprint_subtitle>;

        $r13 = virtualinvoke r3.<android.view.View: android.view.View findViewById(int)>($i1);

        r4 = (android.widget.TextView) $r13;

        if r4 == null goto label2;

        $r19 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        r20 = virtualinvoke $r19.<androidx.biometric.BiometricViewModel: java.lang.CharSequence getSubtitle()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z1 == 0 goto label1;

        virtualinvoke r4.<android.widget.TextView: void setVisibility(int)>(8);

        goto label2;

     label1:
        virtualinvoke r4.<android.widget.TextView: void setVisibility(int)>(0);

        virtualinvoke r4.<android.widget.TextView: void setText(java.lang.CharSequence)>(r20);

     label2:
        $i3 = <androidx.biometric.R$id: int fingerprint_description>;

        $r21 = virtualinvoke r3.<android.view.View: android.view.View findViewById(int)>($i3);

        r22 = (android.widget.TextView) $r21;

        if r22 == null goto label4;

        $r18 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        r23 = virtualinvoke $r18.<androidx.biometric.BiometricViewModel: java.lang.CharSequence getDescription()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r23);

        if $z0 == 0 goto label3;

        virtualinvoke r22.<android.widget.TextView: void setVisibility(int)>(8);

        goto label4;

     label3:
        virtualinvoke r22.<android.widget.TextView: void setVisibility(int)>(0);

        virtualinvoke r22.<android.widget.TextView: void setText(java.lang.CharSequence)>(r23);

     label4:
        $i4 = <androidx.biometric.R$id: int fingerprint_icon>;

        $r24 = virtualinvoke r3.<android.view.View: android.view.View findViewById(int)>($i4);

        $r25 = (android.widget.ImageView) $r24;

        r0.<androidx.biometric.FingerprintDialogFragment: android.widget.ImageView mFingerprintIcon> = $r25;

        $i5 = <androidx.biometric.R$id: int fingerprint_error>;

        $r26 = virtualinvoke r3.<android.view.View: android.view.View findViewById(int)>($i5);

        $r27 = (android.widget.TextView) $r26;

        r0.<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView> = $r27;

        $r28 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $i6 = virtualinvoke $r28.<androidx.biometric.BiometricViewModel: int getAllowedAuthenticators()>();

        $z2 = staticinvoke <androidx.biometric.AuthenticatorUtils: boolean isDeviceCredentialAllowed(int)>($i6);

        if $z2 == 0 goto label5;

        $i2 = <androidx.biometric.R$string: int confirm_device_credential_password>;

        $r29 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: java.lang.String getString(int)>($i2);

        goto label6;

     label5:
        $r14 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $r29 = virtualinvoke $r14.<androidx.biometric.BiometricViewModel: java.lang.CharSequence getNegativeButtonText()>();

     label6:
        r30 = $r29;

        r32 = new androidx.biometric.FingerprintDialogFragment$2;

        specialinvoke r32.<androidx.biometric.FingerprintDialogFragment$2: void <init>(androidx.biometric.FingerprintDialogFragment)>(r0);

        r33 = (java.lang.CharSequence) r30;

        virtualinvoke r2.<androidx.appcompat.app.AlertDialog$Builder: androidx.appcompat.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>(r33, r32);

        virtualinvoke r2.<androidx.appcompat.app.AlertDialog$Builder: androidx.appcompat.app.AlertDialog$Builder setView(android.view.View)>(r3);

        r5 = virtualinvoke r2.<androidx.appcompat.app.AlertDialog$Builder: androidx.appcompat.app.AlertDialog create()>();

        virtualinvoke r5.<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>(0);

        return r5;
    }

    public void onResume()
    {
        androidx.biometric.FingerprintDialogFragment r0;
        androidx.biometric.BiometricViewModel $r1, $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        specialinvoke r0.<androidx.fragment.app.DialogFragment: void onResume()>();

        $r1 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        virtualinvoke $r1.<androidx.biometric.BiometricViewModel: void setFingerprintDialogPreviousState(int)>(0);

        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        virtualinvoke $r2.<androidx.biometric.BiometricViewModel: void setFingerprintDialogState(int)>(1);

        $r3 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $i0 = <androidx.biometric.R$string: int fingerprint_dialog_touch_sensor>;

        $r4 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: java.lang.String getString(int)>($i0);

        virtualinvoke $r3.<androidx.biometric.BiometricViewModel: void setFingerprintDialogHelpMessage(java.lang.CharSequence)>($r4);

        return;
    }

    public void onPause()
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.os.Handler $r1;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        specialinvoke r0.<androidx.fragment.app.DialogFragment: void onPause()>();

        $r1 = r0.<androidx.biometric.FingerprintDialogFragment: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

    public void onCancel(android.content.DialogInterface)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.content.DialogInterface r1;
        androidx.biometric.BiometricViewModel $r2;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 := @parameter0: android.content.DialogInterface;

        specialinvoke r0.<androidx.fragment.app.DialogFragment: void onCancel(android.content.DialogInterface)>(r1);

        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        virtualinvoke $r2.<androidx.biometric.BiometricViewModel: void setFingerprintDialogCancelPending(boolean)>(1);

        return;
    }

    private void connectViewModel()
    {
        androidx.biometric.FingerprintDialogFragment r0;
        androidx.fragment.app.FragmentActivity r1;
        androidx.lifecycle.ViewModel $r3;
        androidx.biometric.BiometricViewModel $r4, $r5, $r8;
        androidx.lifecycle.LiveData $r6, $r9;
        androidx.lifecycle.ViewModelProvider r11;
        androidx.biometric.FingerprintDialogFragment$3 r12;
        androidx.biometric.FingerprintDialogFragment$4 r13;
        androidx.lifecycle.LifecycleOwner r14, r15;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: androidx.fragment.app.FragmentActivity getActivity()>();

        if r1 != null goto label1;

        return;

     label1:
        r11 = new androidx.lifecycle.ViewModelProvider;

        specialinvoke r11.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner)>(r1);

        $r3 = virtualinvoke r11.<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>(class "Landroidx/biometric/BiometricViewModel;");

        $r4 = (androidx.biometric.BiometricViewModel) $r3;

        r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel> = $r4;

        $r5 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $r6 = virtualinvoke $r5.<androidx.biometric.BiometricViewModel: androidx.lifecycle.LiveData getFingerprintDialogState()>();

        r12 = new androidx.biometric.FingerprintDialogFragment$3;

        specialinvoke r12.<androidx.biometric.FingerprintDialogFragment$3: void <init>(androidx.biometric.FingerprintDialogFragment)>(r0);

        r14 = (androidx.lifecycle.LifecycleOwner) r0;

        virtualinvoke $r6.<androidx.lifecycle.LiveData: void observe(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)>(r14, r12);

        $r8 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $r9 = virtualinvoke $r8.<androidx.biometric.BiometricViewModel: androidx.lifecycle.LiveData getFingerprintDialogHelpMessage()>();

        r13 = new androidx.biometric.FingerprintDialogFragment$4;

        specialinvoke r13.<androidx.biometric.FingerprintDialogFragment$4: void <init>(androidx.biometric.FingerprintDialogFragment)>(r0);

        r15 = (androidx.lifecycle.LifecycleOwner) r0;

        virtualinvoke $r9.<androidx.lifecycle.LiveData: void observe(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)>(r15, r13);

        return;
    }

    void updateFingerprintIcon(int)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        int i0, i1, $i2;
        android.graphics.drawable.Drawable r1;
        android.widget.ImageView $r2, $r4;
        androidx.biometric.BiometricViewModel $r3, $r5;
        boolean $z0;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.ImageView mFingerprintIcon>;

        if $r2 != null goto label1;

        return;

     label1:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 23 goto label4;

        $r3 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        i1 = virtualinvoke $r3.<androidx.biometric.BiometricViewModel: int getFingerprintDialogPreviousState()>();

        r1 = specialinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.graphics.drawable.Drawable getAssetForTransition(int,int)>(i1, i0);

        if r1 != null goto label2;

        return;

     label2:
        $r4 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.ImageView mFingerprintIcon>;

        virtualinvoke $r4.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r1);

        $z0 = specialinvoke r0.<androidx.biometric.FingerprintDialogFragment: boolean shouldAnimateForTransition(int,int)>(i1, i0);

        if $z0 == 0 goto label3;

        staticinvoke <androidx.biometric.FingerprintDialogFragment$Api21Impl: void startAnimation(android.graphics.drawable.Drawable)>(r1);

     label3:
        $r5 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        virtualinvoke $r5.<androidx.biometric.BiometricViewModel: void setFingerprintDialogPreviousState(int)>(i0);

     label4:
        return;
    }

    void updateHelpMessageColor(int)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        int i0, $i1;
        boolean z0, $z1;
        android.widget.TextView $r1, $r2;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView>;

        if $r1 == null goto label5;

        if i0 != 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView>;

        if z0 == 0 goto label3;

        $i1 = r0.<androidx.biometric.FingerprintDialogFragment: int mErrorTextColor>;

        goto label4;

     label3:
        $i1 = r0.<androidx.biometric.FingerprintDialogFragment: int mNormalTextColor>;

     label4:
        virtualinvoke $r2.<android.widget.TextView: void setTextColor(int)>($i1);

     label5:
        return;
    }

    void updateHelpMessageText(java.lang.CharSequence)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        java.lang.CharSequence r1;
        android.widget.TextView $r2, $r3;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.biometric.FingerprintDialogFragment: android.widget.TextView mHelpMessageView>;

        virtualinvoke $r3.<android.widget.TextView: void setText(java.lang.CharSequence)>(r1);

     label1:
        return;
    }

    void resetDialog()
    {
        androidx.biometric.FingerprintDialogFragment r0;
        android.content.Context r1;
        androidx.biometric.BiometricViewModel $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        r1 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.content.Context getContext()>();

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintFragment", "Not resetting the dialog. Context is null.");

        return;

     label1:
        $r2 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        virtualinvoke $r2.<androidx.biometric.BiometricViewModel: void setFingerprintDialogState(int)>(1);

        $r3 = r0.<androidx.biometric.FingerprintDialogFragment: androidx.biometric.BiometricViewModel mViewModel>;

        $i0 = <androidx.biometric.R$string: int fingerprint_dialog_touch_sensor>;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>($i0);

        virtualinvoke $r3.<androidx.biometric.BiometricViewModel: void setFingerprintDialogHelpMessage(java.lang.CharSequence)>($r4);

        return;
    }

    private int getThemedColorFor(int)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        int i0, i1, $i3;
        android.content.Context r1;
        androidx.fragment.app.FragmentActivity r2;
        android.util.TypedValue r3, $r6;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r7;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.content.Context getContext()>();

        r2 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: androidx.fragment.app.FragmentActivity getActivity()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintFragment", "Unable to get themed color. Context or activity is null.");

        return 0;

     label2:
        $r6 = new android.util.TypedValue;

        specialinvoke $r6.<android.util.TypedValue: void <init>()>();

        r3 = $r6;

        r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(i0, r3, 1);

        $i3 = r3.<android.util.TypedValue: int data>;

        $r7 = newarray (int)[1];

        $r7[0] = i0;

        r5 = virtualinvoke r2.<androidx.fragment.app.FragmentActivity: android.content.res.TypedArray obtainStyledAttributes(int,int[])>($i3, $r7);

        i1 = virtualinvoke r5.<android.content.res.TypedArray: int getColor(int,int)>(0, 0);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return i1;
    }

    private boolean shouldAnimateForTransition(int, int)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        int i0, i1;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        if i1 != 1 goto label1;

        return 0;

     label1:
        if i0 != 1 goto label2;

        if i1 != 2 goto label2;

        return 1;

     label2:
        if i0 != 2 goto label3;

        if i1 != 1 goto label3;

        return 1;

     label3:
        if i0 != 1 goto label4;

        if i1 != 3 goto label4;

        return 0;

     label4:
        return 0;
    }

    private android.graphics.drawable.Drawable getAssetForTransition(int, int)
    {
        androidx.biometric.FingerprintDialogFragment r0;
        int i0, i1, i3;
        android.content.Context r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: androidx.biometric.FingerprintDialogFragment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<androidx.biometric.FingerprintDialogFragment: android.content.Context getContext()>();

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintFragment", "Unable to get asset. Context is null.");

        return null;

     label1:
        if i0 != 0 goto label2;

        if i1 != 1 goto label2;

        i3 = <androidx.biometric.R$drawable: int fingerprint_dialog_fp_icon>;

        goto label6;

     label2:
        if i0 != 1 goto label3;

        if i1 != 2 goto label3;

        i3 = <androidx.biometric.R$drawable: int fingerprint_dialog_error>;

        goto label6;

     label3:
        if i0 != 2 goto label4;

        if i1 != 1 goto label4;

        i3 = <androidx.biometric.R$drawable: int fingerprint_dialog_fp_icon>;

        goto label6;

     label4:
        if i0 != 1 goto label5;

        if i1 != 3 goto label5;

        i3 = <androidx.biometric.R$drawable: int fingerprint_dialog_fp_icon>;

        goto label6;

     label5:
        return null;

     label6:
        $r2 = staticinvoke <androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>(r1, i3);

        return $r2;
    }

