org.junit.runners.model.TestClass
<org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$FieldComparator FIELD_COMPARATOR>
<org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR>
<org.junit.runners.model.TestClass: java.lang.Class clazz>
<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations>
<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations>
    static void <clinit>()
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        org.junit.runners.model.TestClass$MethodComparator $r1;

        $r0 = new org.junit.runners.model.TestClass$FieldComparator;

        specialinvoke $r0.<org.junit.runners.model.TestClass$FieldComparator: void <init>(org.junit.runners.model.TestClass$1)>(null);

        <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$FieldComparator FIELD_COMPARATOR> = $r0;

        $r1 = new org.junit.runners.model.TestClass$MethodComparator;

        specialinvoke $r1.<org.junit.runners.model.TestClass$MethodComparator: void <init>(org.junit.runners.model.TestClass$1)>(null);

        <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1;
        java.lang.reflect.Constructor[] $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.util.LinkedHashMap $r4, $r5;
        java.util.Map $r6;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz> = $r1;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r2;

        if $i0 <= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Test class can only have one constructor");

        throw $r3;

     label1:
        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        virtualinvoke $r0.<org.junit.runners.model.TestClass: void scanAnnotatedMembers(java.util.Map,java.util.Map)>($r4, $r5);

        $r6 = staticinvoke <org.junit.runners.model.TestClass: java.util.Map makeDeeplyUnmodifiable(java.util.Map)>($r4);

        $r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations> = $r6;

        $r6 = staticinvoke <org.junit.runners.model.TestClass: java.util.Map makeDeeplyUnmodifiable(java.util.Map)>($r5);

        $r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations> = $r6;

        return;
    }

    protected static void addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)
    {
        org.junit.runners.model.FrameworkMember $r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.'annotation'.Annotation[] $r2;
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class $r4;
        java.util.List $r5;
        boolean $z0;

        $r0 := @parameter0: org.junit.runners.model.FrameworkMember;

        $r1 := @parameter1: java.util.Map;

        $r2 = virtualinvoke $r0.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $r3 = $r2[$i1];

        $r4 = interfaceinvoke $r3.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r5 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>($r1, $r4, 1);

        $z0 = virtualinvoke $r0.<org.junit.runners.model.FrameworkMember: boolean isShadowedBy(java.util.List)>($r5);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = staticinvoke <org.junit.runners.model.TestClass: boolean runsTopToBottom(java.lang.Class)>($r4);

        if $z0 == 0 goto label4;

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, $r0);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r0);

        goto label3;

     label5:
        return;
    }

    private java.util.List collectValues(java.util.Map)
    {
        org.junit.runners.model.TestClass $r0;
        java.util.Map $r1;
        java.util.LinkedHashSet $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.List $r6;
        java.util.ArrayList $r7;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.List) $r5;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        goto label1;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r7;
    }

    private static java.util.List getAnnotatedMembers(java.util.Map, java.lang.Class, boolean)
    {
        java.util.Map $r0;
        java.lang.Class $r1;
        boolean $z0, $z1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        java.util.List $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Class;

        $z0 := @parameter2: boolean;

        $z1 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label1:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.util.List) $r3;

        if $r4 != null goto label2;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r4;
    }

    private static java.lang.reflect.Field[] getSortedDeclaredFields(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.reflect.Field[] $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        return $r1;
    }

    private static java.util.List getSuperClasses(java.lang.Class)
    {
        java.util.ArrayList $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        if $r1 == null goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r0;
    }

    private static java.util.Map makeDeeplyUnmodifiable(java.util.Map)
    {
        java.util.Map $r0;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        java.lang.Class $r6;
        java.util.List $r7;

        $r0 := @parameter0: java.util.Map;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.Class) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.util.List) $r4;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        virtualinvoke $r1.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        $r0 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r0;
    }

    private static boolean runsTopToBottom(java.lang.Class)
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/Before;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/BeforeClass;");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.junit.runners.model.TestClass $r0, $r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $r4 = (org.junit.runners.model.TestClass) $r1;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r3 = $r4.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r2 == $r3 goto label4;

        return 0;

     label4:
        return 1;
    }

    public java.util.List getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Object $r1, $r7;
        java.lang.Class $r2, $r3;
        java.util.ArrayList $r4, r10;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        org.junit.runners.model.FrameworkField $r8;
        java.lang.Throwable $r9;
        java.lang.RuntimeException r11;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Class;

        r10 = new java.util.ArrayList;

        $r4 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke $r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>($r2);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.junit.runners.model.FrameworkField) $r7;

     label2:
        $r7 = virtualinvoke $r8.<org.junit.runners.model.FrameworkField: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r7);

     label3:
        if $z0 == 0 goto label1;

     label4:
        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        goto label1;

     label6:
        $r9 := @caughtexception;

        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("How did getFields return a field we couldn\'t access?", $r9);

        $r9 = (java.lang.Throwable) r11;

        throw $r9;

     label7:
        return $r4;

        catch java.lang.IllegalAccessException from label2 to label3 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
    }

    public java.util.List getAnnotatedFields()
    {
        org.junit.runners.model.TestClass $r0;
        java.util.List $r1;
        java.util.Map $r2;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations>;

        $r1 = specialinvoke $r0.<org.junit.runners.model.TestClass: java.util.List collectValues(java.util.Map)>($r2);

        return $r1;
    }

    public java.util.List getAnnotatedFields(java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1;
        java.util.Map $r2;
        java.util.List $r3;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Class;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations>;

        $r3 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>($r2, $r1, 0);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;
    }

    public java.util.List getAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Object $r1, $r7;
        java.lang.Class $r2, $r3;
        java.util.ArrayList $r4, r14;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        org.junit.runners.model.FrameworkMethod $r8;
        java.lang.Object[] $r9;
        java.lang.Throwable $r10;
        java.lang.RuntimeException $r11, r15;
        java.lang.String $r12, $r13;
        int $i0;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Class;

        r14 = new java.util.ArrayList;

        $r4 = r14;

        specialinvoke r14.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke $r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>($r2);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.junit.runners.model.FrameworkMethod) $r7;

     label2:
        $r2 = virtualinvoke $r8.<org.junit.runners.model.FrameworkMethod: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

     label3:
        if $z0 == 0 goto label1;

        $r9 = newarray (java.lang.Object)[0];

     label4:
        $r7 = virtualinvoke $r8.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>($r1, $r9);

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        goto label1;

     label6:
        $r10 := @caughtexception;

        r15 = new java.lang.RuntimeException;

        $r11 = r15;

        $r12 = "Exception in ";

        $r13 = virtualinvoke $r8.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i0 == 0 goto label8;

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String concat(java.lang.String)>($r13);

     label7:
        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r10);

        $r10 = (java.lang.Throwable) $r11;

        throw $r10;

     label8:
        $r13 = new java.lang.String;

        $r12 = $r13;

        specialinvoke $r13.<java.lang.String: void <init>(java.lang.String)>("Exception in ");

        goto label7;

     label9:
        return $r4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.util.List getAnnotatedMethods()
    {
        org.junit.runners.model.TestClass $r0;
        org.junit.runners.model.TestClass$MethodComparator $r1;
        java.util.List $r2;
        java.util.Map $r3;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r3 = $r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations>;

        $r2 = specialinvoke $r0.<org.junit.runners.model.TestClass: java.util.List collectValues(java.util.Map)>($r3);

        $r1 = <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r1);

        return $r2;
    }

    public java.util.List getAnnotatedMethods(java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1;
        java.util.Map $r2;
        java.util.List $r3;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Class;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations>;

        $r3 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>($r2, $r1, 0);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1, $r3;
        java.lang.'annotation'.Annotation $r2;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.lang.Class;

        $r3 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r1);

        return $r2;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.'annotation'.Annotation[] $r1;
        java.lang.Class $r2;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r2 != null goto label1;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        return $r1;

     label1:
        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r1;
    }

    public java.lang.Class getJavaClass()
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class r1;

        $r0 := @this: org.junit.runners.model.TestClass;

        r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        return r1;
    }

    public java.lang.String getName()
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.String $r1;
        java.lang.Class $r2;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r2 != null goto label1;

        return "null";

     label1:
        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.reflect.Constructor getOnlyConstructor()
    {
        org.junit.runners.model.TestClass $r0;
        long $l0;
        java.lang.reflect.Constructor[] $r1;
        java.lang.Class $r2;
        int $i1;
        java.lang.reflect.Constructor $r3;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r2 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i1 = lengthof $r1;

        $l0 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

        $r3 = $r1[0];

        return $r3;
    }

    public int hashCode()
    {
        org.junit.runners.model.TestClass $r0;
        int $i0;
        java.lang.Class $r1;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isANonStaticInnerClass()
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isPublic()
    {
        org.junit.runners.model.TestClass $r0;
        java.lang.Class $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    protected void scanAnnotatedMembers(java.util.Map, java.util.Map)
    {
        org.junit.runners.model.TestClass $r0;
        java.util.Map $r1, $r2;
        org.junit.runners.model.FrameworkMethod $r3;
        java.lang.Class $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.reflect.Method[] $r8;
        int $i0, $i1;
        java.lang.reflect.Method $r9;
        java.lang.reflect.Field[] $r10;
        java.lang.reflect.Field $r11;
        org.junit.runners.model.FrameworkField $r12;

        $r0 := @this: org.junit.runners.model.TestClass;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.util.Map;

        $r4 = $r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r5 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getSuperClasses(java.lang.Class)>($r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Class) $r7;

        $r8 = staticinvoke <org.junit.internal.MethodSorter: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r4);

        $i0 = lengthof $r8;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r9 = $r8[$i1];

        $r3 = new org.junit.runners.model.FrameworkMethod;

        specialinvoke $r3.<org.junit.runners.model.FrameworkMethod: void <init>(java.lang.reflect.Method)>($r9);

        staticinvoke <org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r3, $r1);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r10 = staticinvoke <org.junit.runners.model.TestClass: java.lang.reflect.Field[] getSortedDeclaredFields(java.lang.Class)>($r4);

        $i0 = lengthof $r10;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label1;

        $r11 = $r10[$i1];

        $r12 = new org.junit.runners.model.FrameworkField;

        specialinvoke $r12.<org.junit.runners.model.FrameworkField: void <init>(java.lang.reflect.Field)>($r11);

        staticinvoke <org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r12, $r2);

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return;
    }

org.junit.runners.model.TestClass$1
org.junit.runners.model.TestClass$FieldComparator-IA
org.junit.runners.model.TestClass$FieldComparator
    private void <init>()
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;

        $r0 := @this: org.junit.runners.model.TestClass$FieldComparator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(org.junit.runners.model.TestClass$1)
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        org.junit.runners.model.TestClass$1 $r1;

        $r0 := @this: org.junit.runners.model.TestClass$FieldComparator;

        $r1 := @parameter0: org.junit.runners.model.TestClass$1;

        specialinvoke $r0.<org.junit.runners.model.TestClass$FieldComparator: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.reflect.Field $r3, $r4;

        $r0 := @this: org.junit.runners.model.TestClass$FieldComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.reflect.Field) $r1;

        $r4 = (java.lang.reflect.Field) $r2;

        $i0 = virtualinvoke $r0.<org.junit.runners.model.TestClass$FieldComparator: int compare(java.lang.reflect.Field,java.lang.reflect.Field)>($r3, $r4);

        return $i0;
    }

    public int compare(java.lang.reflect.Field, java.lang.reflect.Field)
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        java.lang.reflect.Field $r1, $r2;
        java.lang.String $r3, $r4;
        int $i0;

        $r0 := @this: org.junit.runners.model.TestClass$FieldComparator;

        $r1 := @parameter0: java.lang.reflect.Field;

        $r2 := @parameter1: java.lang.reflect.Field;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4);

        return $i0;
    }

org.junit.runners.model.TestClass$MethodComparator-IA
org.junit.runners.model.TestClass$MethodComparator
    private void <init>()
    {
        org.junit.runners.model.TestClass$MethodComparator $r0;

        $r0 := @this: org.junit.runners.model.TestClass$MethodComparator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(org.junit.runners.model.TestClass$1)
    {
        org.junit.runners.model.TestClass$MethodComparator $r0;
        org.junit.runners.model.TestClass$1 $r1;

        $r0 := @this: org.junit.runners.model.TestClass$MethodComparator;

        $r1 := @parameter0: org.junit.runners.model.TestClass$1;

        specialinvoke $r0.<org.junit.runners.model.TestClass$MethodComparator: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.runners.model.TestClass$MethodComparator $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.junit.runners.model.FrameworkMethod $r3, $r4;

        $r0 := @this: org.junit.runners.model.TestClass$MethodComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.junit.runners.model.FrameworkMethod) $r1;

        $r4 = (org.junit.runners.model.FrameworkMethod) $r2;

        $i0 = virtualinvoke $r0.<org.junit.runners.model.TestClass$MethodComparator: int compare(org.junit.runners.model.FrameworkMethod,org.junit.runners.model.FrameworkMethod)>($r3, $r4);

        return $i0;
    }

    public int compare(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.model.TestClass$MethodComparator $r0;
        org.junit.runners.model.FrameworkMethod $r1, $r2;
        java.util.Comparator $r3;
        java.lang.reflect.Method $r4, $r5;
        int $i0;

        $r0 := @this: org.junit.runners.model.TestClass$MethodComparator;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: org.junit.runners.model.FrameworkMethod;

        $r3 = <org.junit.internal.MethodSorter: java.util.Comparator NAME_ASCENDING>;

        $r4 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r2.<org.junit.runners.model.FrameworkMethod: java.lang.reflect.Method getMethod()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $i0;
    }

