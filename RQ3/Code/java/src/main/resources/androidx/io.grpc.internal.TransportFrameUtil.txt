io.grpc.internal.TransportFrameUtil
<io.grpc.internal.TransportFrameUtil: byte[] binaryHeaderSuffixBytes>
<io.grpc.internal.TransportFrameUtil: java.util.logging.Logger logger>
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.util.logging.Logger $r2;
        java.nio.charset.Charset $r3;
        byte[] $r4;

        $r1 = class "Lio/grpc/internal/TransportFrameUtil;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r0);

        <io.grpc.internal.TransportFrameUtil: java.util.logging.Logger logger> = $r2;

        $r3 = <com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        $r0 = "-bin";

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        <io.grpc.internal.TransportFrameUtil: byte[] binaryHeaderSuffixBytes> = $r4;

        return;
    }

    private void <init>()
    {
        io.grpc.internal.TransportFrameUtil $r0;

        $r0 := @this: io.grpc.internal.TransportFrameUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean endsWith(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;
        byte $b3, $b4;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r0;

        $i0 = $i0 - $i1;

        if $i0 < 0 goto label4;

        $i1 = $i0;

     label1:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $b3 = $r1[$i1];

        $i2 = $i1 - $i0;

        $b4 = $r0[$i2];

        if $b3 == $b4 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private static boolean isSpecCompliantAscii(byte[])
    {
        int $i0, $i2;
        byte $b1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label4;

        $b1 = $r0[$i2];

        if $b1 < 32 goto label3;

        if $b1 <= 126 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;

     label4:
        return 1;
    }

    private static byte[][] serializeHeadersWithCommasInBin(byte[][], int)
    {
        java.util.ArrayList $r0, r8;
        int $i0, $i1, $i2, $i3;
        java.nio.charset.Charset $r1;
        byte[][] $r2;
        byte[] $r3, $r4, $r5;
        boolean $z0;
        byte $b4;
        com.google.common.io.BaseEncoding $r6;
        java.lang.Object[] $r7;
        java.lang.String r9;
        java.util.List r10;

        $r2 := @parameter0: byte[][];

        $i1 := @parameter1: int;

        r8 = new java.util.ArrayList;

        $r0 = r8;

        $i2 = lengthof $r2;

        $i2 = $i2 + 10;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i2);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = $r2[$i2];

        r10 = (java.util.List) $r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label8;

        $r3 = $r2[$i1];

        $i2 = $i1 + 1;

        $r4 = $r2[$i2];

        $r5 = <io.grpc.internal.TransportFrameUtil: byte[] binaryHeaderSuffixBytes>;

        $z0 = staticinvoke <io.grpc.internal.TransportFrameUtil: boolean endsWith(byte[],byte[])>($r3, $r5);

        if $z0 != 0 goto label3;

        r10 = (java.util.List) $r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r3);

        r10 = (java.util.List) $r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label7;

     label3:
        $i2 = 0;

        $i3 = 0;

     label4:
        $i0 = lengthof $r4;

        if $i2 > $i0 goto label7;

        $i0 = lengthof $r4;

        if $i2 == $i0 goto label5;

        $b4 = $r4[$i2];

        if $b4 != 44 goto label6;

     label5:
        $r6 = staticinvoke <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding base64()>();

        r9 = new java.lang.String;

        $i0 = $i2 - $i3;

        $r1 = <com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke r9.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r4, $i3, $i0, $r1);

        $r5 = virtualinvoke $r6.<com.google.common.io.BaseEncoding: byte[] decode(java.lang.CharSequence)>(r9);

        r10 = (java.util.List) $r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r3);

        r10 = (java.util.List) $r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i3 = $i2 + 1;

     label6:
        $i2 = $i2 + 1;

        goto label4;

     label7:
        $i1 = $i1 + 2;

        goto label2;

     label8:
        $r2 = newarray (byte[])[0];

        r10 = (java.util.List) $r0;

        $r7 = interfaceinvoke r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (byte[][]) $r7;

        return $r2;
    }

    public static byte[][] toHttp2Headers(io.grpc.Metadata)
    {
        io.grpc.Metadata $r0;
        byte[][] $r1;
        int $i0, $i1, $i2;
        byte[] $r2, $r3, $r4;
        boolean $z0;
        com.google.common.io.BaseEncoding $r5;
        java.lang.String $r6;
        java.nio.charset.Charset $r7;
        java.util.logging.Logger $r8;
        java.util.logging.Level $r9;
        java.lang.StringBuilder $r10;
        java.lang.Object[] $r11;

        $r0 := @parameter0: io.grpc.Metadata;

        $r1 = staticinvoke <io.grpc.InternalMetadata: byte[][] serialize(io.grpc.Metadata)>($r0);

        if $r1 != null goto label1;

        $r1 = newarray (byte[])[0];

        return $r1;

     label1:
        $i0 = 0;

        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i0 >= $i2 goto label6;

        $r2 = $r1[$i0];

        $i2 = $i0 + 1;

        $r3 = $r1[$i2];

        $r4 = <io.grpc.internal.TransportFrameUtil: byte[] binaryHeaderSuffixBytes>;

        $z0 = staticinvoke <io.grpc.internal.TransportFrameUtil: boolean endsWith(byte[],byte[])>($r2, $r4);

        if $z0 == 0 goto label3;

        $r1[$i1] = $r2;

        $i2 = $i1 + 1;

        $r5 = <io.grpc.InternalMetadata: com.google.common.io.BaseEncoding BASE64_ENCODING_OMIT_PADDING>;

        $r6 = virtualinvoke $r5.<com.google.common.io.BaseEncoding: java.lang.String encode(byte[])>($r3);

        $r7 = <com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        $r2 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r1[$i2] = $r2;

        $i1 = $i1 + 2;

        goto label5;

     label3:
        $z0 = staticinvoke <io.grpc.internal.TransportFrameUtil: boolean isSpecCompliantAscii(byte[])>($r3);

        if $z0 == 0 goto label4;

        $r1[$i1] = $r2;

        $i2 = $i1 + 1;

        $r1[$i2] = $r3;

        $i1 = $i1 + 2;

        goto label5;

     label4:
        $r6 = new java.lang.String;

        $r7 = <com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r2, $r7);

        $r8 = <io.grpc.internal.TransportFrameUtil: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Metadata key=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", value=");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains invalid ASCII characters");

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r9, "io.grpc.internal.TransportFrameUtil", "toHttp2Headers", $r6);

     label5:
        $i0 = $i0 + 2;

        goto label2;

     label6:
        $i0 = lengthof $r1;

        if $i1 != $i0 goto label7;

        return $r1;

     label7:
        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r1, 0, $i1);

        $r1 = (byte[][]) $r11;

        return $r1;
    }

    public static byte[][] toRawSerializedHeaders(byte[][])
    {
        int $i0, $i1, $i2, $i3;
        byte[] $r0, $r2, $r3;
        byte[][] $r1;
        boolean $z0;
        byte $b4;
        com.google.common.io.BaseEncoding $r4;
        java.lang.String $r5;
        java.nio.charset.Charset $r6;

        $r1 := @parameter0: byte[][];

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label6;

        $r2 = $r1[$i1];

        $i0 = $i1 + 1;

        $r0 = $r1[$i0];

        $r3 = <io.grpc.internal.TransportFrameUtil: byte[] binaryHeaderSuffixBytes>;

        $z0 = staticinvoke <io.grpc.internal.TransportFrameUtil: boolean endsWith(byte[],byte[])>($r2, $r3);

        if $z0 == 0 goto label5;

        $i2 = 0;

     label2:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label4;

        $b4 = $r0[$i2];

        if $b4 != 44 goto label3;

        $r1 = staticinvoke <io.grpc.internal.TransportFrameUtil: byte[][] serializeHeadersWithCommasInBin(byte[][],int)>($r1, $i1);

        return $r1;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $r4 = staticinvoke <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding base64()>();

        $r5 = new java.lang.String;

        $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r6);

        $r0 = virtualinvoke $r4.<com.google.common.io.BaseEncoding: byte[] decode(java.lang.CharSequence)>($r5);

        $r1[$i0] = $r0;

     label5:
        $i1 = $i1 + 2;

        goto label1;

     label6:
        return $r1;
    }

