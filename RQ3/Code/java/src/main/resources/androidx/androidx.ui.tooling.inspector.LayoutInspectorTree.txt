androidx.ui.tooling.inspector.LayoutInspectorTree
<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InlineClassConverter inlineClassConverter>
<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.ParameterFactory parameterFactory>
<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache>
<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId>
<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap claimedNodes>
<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>
<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap ownerMap>
<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set stitched>
<androidx.ui.tooling.inspector.LayoutInspectorTree: int $stable>
    public void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.InlineClassConverter $r1, $r3;
        androidx.ui.tooling.inspector.ParameterFactory $r2;
        java.util.ArrayDeque $r4;
        java.util.IdentityHashMap $r5, $r6, $r7, $r8;
        java.util.Map $r9;
        java.util.Set $r10;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.ui.tooling.inspector.InlineClassConverter;

        specialinvoke $r1.<androidx.ui.tooling.inspector.InlineClassConverter: void <init>()>();

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InlineClassConverter inlineClassConverter> = $r1;

        $r2 = new androidx.ui.tooling.inspector.ParameterFactory;

        $r3 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InlineClassConverter inlineClassConverter>;

        specialinvoke $r2.<androidx.ui.tooling.inspector.ParameterFactory: void <init>(androidx.ui.tooling.inspector.InlineClassConverter)>($r3);

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.ParameterFactory parameterFactory> = $r2;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache> = $r4;

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId> = -1L;

        $r5 = new java.util.IdentityHashMap;

        specialinvoke $r5.<java.util.IdentityHashMap: void <init>()>();

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap claimedNodes> = $r5;

        $r6 = new java.util.IdentityHashMap;

        specialinvoke $r6.<java.util.IdentityHashMap: void <init>()>();

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap> = $r6;

        $r7 = new java.util.IdentityHashMap;

        specialinvoke $r7.<java.util.IdentityHashMap: void <init>()>();

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap ownerMap> = $r7;

        $r8 = new java.util.IdentityHashMap;

        specialinvoke $r8.<java.util.IdentityHashMap: void <init>()>();

        $r9 = (java.util.Map) $r8;

        $r10 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r9);

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set stitched> = $r10;

        return;
    }

    public final java.util.List convert(android.view.View)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        android.view.View r1;
        java.lang.Object r2;
        androidx.ui.tooling.inspector.ParameterFactory $r3;
        androidx.compose.ui.unit.Density $r4;
        int $i0;
        boolean $z0;
        java.util.List $r5, r10;
        android.content.Context r6;
        java.util.Set $r7, r8, r9;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $r3 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.ParameterFactory parameterFactory>;

        r6 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r6, "view.context");

        $r4 = staticinvoke <androidx.compose.ui.unit.AndroidDensityKt: androidx.compose.ui.unit.Density Density(android.content.Context)>(r6);

        virtualinvoke $r3.<androidx.ui.tooling.inspector.ParameterFactory: void setDensity(androidx.compose.ui.unit.Density)>($r4);

        $i0 = <androidx.ui.tooling.R$id: int inspection_slot_table_set>;

        r2 = virtualinvoke r1.<android.view.View: java.lang.Object getTag(int)>($i0);

        $z0 = r2 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $r7 = (java.util.Set) r2;

        goto label2;

     label1:
        $r7 = null;

     label2:
        r8 = $r7;

        if r8 != null goto label3;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r5;

     label3:
        r9 = r8;

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void clear()>();

        r10 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.List convert(java.util.Set)>(r9);

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void clear()>();

        return r10;
    }

    public final java.util.List convertParameters(androidx.ui.tooling.inspector.InspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.InspectorNode r1;
        java.util.Collection r2;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5, r6, $r15;
        androidx.ui.tooling.inspector.RawParameter r7;
        androidx.ui.tooling.inspector.NodeParameter r8, r9, $r16;
        boolean z5, z6, $z8;
        java.util.List $r10, $r12;
        java.util.ArrayList $r11;
        androidx.ui.tooling.inspector.ParameterFactory $r13;
        java.lang.String $r14;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.InspectorNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        $r10 = virtualinvoke r1.<androidx.ui.tooling.inspector.InspectorNode: java.util.List getParameters()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r11;

        $r3 = (java.lang.Iterable) $r10;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z8 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = r5;

        r7 = (androidx.ui.tooling.inspector.RawParameter) r6;

        $r13 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.ParameterFactory parameterFactory>;

        $r14 = virtualinvoke r7.<androidx.ui.tooling.inspector.RawParameter: java.lang.String getName()>();

        $r15 = virtualinvoke r7.<androidx.ui.tooling.inspector.RawParameter: java.lang.Object getValue()>();

        $r16 = virtualinvoke $r13.<androidx.ui.tooling.inspector.ParameterFactory: androidx.ui.tooling.inspector.NodeParameter create(androidx.ui.tooling.inspector.InspectorNode,java.lang.String,java.lang.Object)>(r1, $r14, $r15);

        if $r16 == null goto label2;

        r8 = $r16;

        z5 = 0;

        z6 = 0;

        r9 = r8;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r9);

        goto label2;

     label2:
        goto label1;

     label3:
        $r12 = (java.util.List) r2;

        return $r12;
    }

    public final void resetGeneratedId()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId> = -1L;

        return;
    }

    private final void clear()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        java.util.ArrayDeque $r1;
        androidx.ui.tooling.inspector.InlineClassConverter $r2;
        java.util.IdentityHashMap $r3, $r4, $r5;
        java.util.Set $r6;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        $r1 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache>;

        virtualinvoke $r1.<java.util.ArrayDeque: void clear()>();

        $r2 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InlineClassConverter inlineClassConverter>;

        virtualinvoke $r2.<androidx.ui.tooling.inspector.InlineClassConverter: void clear()>();

        $r3 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap claimedNodes>;

        virtualinvoke $r3.<java.util.IdentityHashMap: void clear()>();

        $r4 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>;

        virtualinvoke $r4.<java.util.IdentityHashMap: void clear()>();

        $r5 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap ownerMap>;

        virtualinvoke $r5.<java.util.IdentityHashMap: void clear()>();

        $r6 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set stitched>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        return;
    }

    private final java.util.List convert(java.util.Set)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        java.util.Set r1;
        java.util.List r2, $r13;
        java.util.Collection r3, r7;
        java.util.Iterator r4;
        java.lang.Object r5, $r10;
        androidx.compose.runtime.SlotTable r6;
        androidx.ui.tooling.inspector.MutableInspectorNode r8, $r11;
        java.util.ArrayList $r9;
        int $i0, $i1;
        boolean $z2;
        java.lang.Iterable $r12;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: java.util.Set;

        $r12 = (java.lang.Iterable) r1;

        $r9 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r12, 10);

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = (java.util.Collection) $r9;

        r4 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.compose.runtime.SlotTable) r5;

        r7 = r3;

        r8 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode convert(androidx.compose.runtime.SlotTable)>(r6);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r8);

        goto label1;

     label2:
        r2 = (java.util.List) r3;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        tableswitch($i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label5;
        };

     label3:
        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label6;

     label4:
        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>(r2);

        $r11 = (androidx.ui.tooling.inspector.MutableInspectorNode) $r10;

        $r13 = virtualinvoke $r11.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        goto label6;

     label5:
        $r13 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.List stitchTreesByLayoutNode(java.util.List)>(r2);

     label6:
        return $r13;
    }

    private final java.util.List stitchTreesByLayoutNode(java.util.List)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        java.util.List r1, $r13, $r16, $r24, $r26, $r32, $r58, $r62;
        java.util.IdentityHashMap r2, $r4, $r14, $r20, $r23, $r25;
        androidx.compose.ui.node.LayoutNode r3, r41, $r47, $r51;
        boolean $z0, $z1, $z2, $z5, $z6, z11, $z16, z17, z19, z20, z22;
        java.lang.Iterable $r5, $r34, $r38, $r43;
        kotlin.sequences.Sequence $r6, $r9, $r12, $r48;
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3 $r7;
        kotlin.jvm.functions.Function1 $r8, $r11, $r19;
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 $r10;
        java.lang.Object $r17, $r21, $r22, $r31, r36, r40, r45, r50, $r53, $r57, $r59, $r61, $r63;
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 $r18;
        java.util.ArrayList $r27, $r29;
        java.util.Iterator r35, $r39, r44, r49;
        androidx.ui.tooling.inspector.MutableInspectorNode r37, r46, r52, $r55, $r64;
        java.util.Map $r42, r56, r60;
        androidx.ui.tooling.inspector.InspectorNode $r54;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: java.util.List;

        $r4 = new java.util.IdentityHashMap;

        specialinvoke $r4.<java.util.IdentityHashMap: void <init>()>();

        r2 = $r4;

        $r34 = (java.lang.Iterable) r1;

        r35 = interfaceinvoke $r34.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        r36 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r37 = (androidx.ui.tooling.inspector.MutableInspectorNode) r36;

        $r32 = virtualinvoke r37.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        $r38 = (java.lang.Iterable) $r32;

        $r39 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label03;

        r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r41 = (androidx.compose.ui.node.LayoutNode) r40;

        $r42 = (java.util.Map) r2;

        z11 = 0;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r41, r37);

        goto label02;

     label03:
        goto label01;

     label04:
        $r43 = (java.lang.Iterable) r1;

        r44 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r46 = (androidx.ui.tooling.inspector.MutableInspectorNode) r45;

        $r16 = virtualinvoke r46.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object lastOrNull(java.util.List)>($r16);

        $r47 = (androidx.compose.ui.node.LayoutNode) $r17;

        $r18 = <androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 INSTANCE>;

        $r19 = (kotlin.jvm.functions.Function1) $r18;

        $r48 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence generateSequence(java.lang.Object,kotlin.jvm.functions.Function1)>($r47, $r19);

        r49 = interfaceinvoke $r48.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        r50 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r51 = (androidx.compose.ui.node.LayoutNode) r50;

        $r31 = virtualinvoke r2.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r51);

        r52 = (androidx.ui.tooling.inspector.MutableInspectorNode) $r31;

        if r52 == null goto label07;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r52, r46);

        if $z5 != 0 goto label07;

        $z16 = 1;

        goto label08;

     label07:
        $z16 = 0;

     label08:
        if $z16 == 0 goto label06;

        $r53 = r50;

        goto label10;

     label09:
        $r53 = null;

     label10:
        r3 = (androidx.compose.ui.node.LayoutNode) $r53;

        if r3 == null goto label15;

        $r20 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap claimedNodes>;

        $r21 = virtualinvoke $r20.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r54 = (androidx.ui.tooling.inspector.InspectorNode) $r21;

        $r22 = virtualinvoke r2.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r55 = (androidx.ui.tooling.inspector.MutableInspectorNode) $r22;

        if $r54 == null goto label15;

        if $r55 == null goto label15;

        $r23 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap ownerMap>;

        r56 = (java.util.Map) $r23;

        z17 = 0;

        $r57 = interfaceinvoke r56.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54);

        if $r57 != null goto label11;

        z19 = 0;

        $r29 = new java.util.ArrayList;

        specialinvoke $r29.<java.util.ArrayList: void <init>()>();

        $r58 = (java.util.List) $r29;

        interfaceinvoke r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, $r58);

        $r59 = $r58;

        goto label12;

     label11:
        $r59 = $r57;

     label12:
        $r24 = (java.util.List) $r59;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r46);

        $r25 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>;

        r60 = (java.util.Map) $r25;

        z20 = 0;

        $r61 = interfaceinvoke r60.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        if $r61 != null goto label13;

        z22 = 0;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $r62 = (java.util.List) $r27;

        interfaceinvoke r60.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, $r62);

        $r63 = $r62;

        goto label14;

     label13:
        $r63 = $r61;

     label14:
        $r26 = (java.util.List) $r63;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r46);

     label15:
        goto label05;

     label16:
        $r64 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode findDeepParentTree()>();

     label17:
        if $r64 == null goto label18;

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void addSubTrees(androidx.ui.tooling.inspector.MutableInspectorNode)>($r64);

        $r14 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>;

        virtualinvoke $r14.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>($r64);

        $r64 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode findDeepParentTree()>();

        goto label17;

     label18:
        $r5 = (java.lang.Iterable) r1;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r5);

        $r7 = new androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3;

        specialinvoke $r7.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3: void <init>(androidx.ui.tooling.inspector.LayoutInspectorTree)>(r0);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r10 = <androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 INSTANCE>;

        $r11 = (kotlin.jvm.functions.Function1) $r10;

        $r12 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatMapIterable(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r9, $r11);

        $r13 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r12);

        return $r13;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode findDeepParentTree()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        java.util.Map$Entry r1;
        java.util.Set r2;
        java.util.IdentityHashMap $r3;
        java.lang.Iterable $r4;
        kotlin.sequences.Sequence $r5, $r8;
        androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1 $r6;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Object $r9, $r10;
        androidx.ui.tooling.inspector.MutableInspectorNode $r11;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        $r3 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>;

        r2 = virtualinvoke $r3.<java.util.IdentityHashMap: java.util.Set entrySet()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "treeMap.entries");

        $r4 = (java.lang.Iterable) r2;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r4);

        $r6 = new androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1;

        specialinvoke $r6.<androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1: void <init>(androidx.ui.tooling.inspector.LayoutInspectorTree)>(r0);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r8 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r5, $r7);

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object firstOrNull(kotlin.sequences.Sequence)>($r8);

        r1 = (java.util.Map$Entry) $r9;

        if r1 != null goto label1;

        $r11 = (androidx.ui.tooling.inspector.MutableInspectorNode) null;

        goto label2;

     label1:
        $r10 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (androidx.ui.tooling.inspector.MutableInspectorNode) $r10;

     label2:
        return $r11;
    }

    private final void addSubTrees(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        java.util.Iterator r2;
        int i0, i2;
        androidx.ui.tooling.inspector.InspectorNode r3, r4, $r9;
        java.util.List $r5, $r7;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        $r5 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        i2 = 0;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        i0 = i2;

        i2 = i2 + 1;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.ui.tooling.inspector.InspectorNode) $r6;

        $r7 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        r4 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InspectorNode addSubTrees(androidx.ui.tooling.inspector.InspectorNode)>(r3);

        if r4 != null goto label2;

        $r9 = r3;

        goto label3;

     label2:
        $r9 = r4;

     label3:
        interfaceinvoke $r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r9);

        goto label1;

     label4:
        return;
    }

    private final androidx.ui.tooling.inspector.InspectorNode addSubTrees(androidx.ui.tooling.inspector.InspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.InspectorNode r1, $r5, $r10, r16, r17;
        java.util.List $r2, $r6, $r9, $r12, r21;
        java.util.IdentityHashMap $r3;
        java.lang.Object $r4, $r11, r28;
        boolean $z1, $z4, z5;
        java.util.Collection $r7, r26;
        java.util.Set $r8;
        androidx.ui.tooling.inspector.MutableInspectorNode r14, r18, $r19, r20, r22, $r23, r24, r29;
        java.util.Iterator r15, r27;
        int i0, i1;
        java.lang.Iterable r25, r30;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.InspectorNode;

        r14 = (androidx.ui.tooling.inspector.MutableInspectorNode) null;

        $r2 = virtualinvoke r1.<androidx.ui.tooling.inspector.InspectorNode: java.util.List getChildren()>();

        r15 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        i0 = 0;

     label01:
        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        i1 = i0;

        i0 = i0 + 1;

        $r11 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (androidx.ui.tooling.inspector.InspectorNode) $r11;

        r17 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InspectorNode addSubTrees(androidx.ui.tooling.inspector.InspectorNode)>(r16);

        if r17 == null goto label01;

        r18 = r14;

        if r18 != null goto label02;

        $r19 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode newNode(androidx.ui.tooling.inspector.InspectorNode)>(r1);

        goto label03;

     label02:
        $r19 = r18;

     label03:
        r20 = $r19;

        $r12 = virtualinvoke r20.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        interfaceinvoke $r12.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r17);

        r14 = r20;

        goto label01;

     label04:
        $r3 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap ownerMap>;

        $r4 = virtualinvoke $r3.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r21 = (java.util.List) $r4;

        if r21 != null goto label05;

        if r14 != null goto label05;

        $r10 = (androidx.ui.tooling.inspector.InspectorNode) null;

        return $r10;

     label05:
        r22 = r14;

        if r22 != null goto label06;

        $r23 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode newNode(androidx.ui.tooling.inspector.InspectorNode)>(r1);

        goto label07;

     label06:
        $r23 = r22;

     label07:
        r24 = $r23;

        if r21 == null goto label10;

        r25 = (java.lang.Iterable) r21;

        $r6 = virtualinvoke r24.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        r26 = (java.util.Collection) $r6;

        z5 = 0;

        r27 = interfaceinvoke r25.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r29 = (androidx.ui.tooling.inspector.MutableInspectorNode) r28;

        $r9 = virtualinvoke r29.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        r30 = (java.lang.Iterable) $r9;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r26, r30);

        goto label08;

     label09:
        $r8 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set stitched>;

        $r7 = (java.util.Collection) r21;

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

     label10:
        $r5 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InspectorNode buildAndRelease(androidx.ui.tooling.inspector.MutableInspectorNode)>(r24);

        return $r5;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode convert(androidx.compose.runtime.SlotTable)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.compose.runtime.SlotTable r1;
        androidx.ui.tooling.inspector.MutableInspectorNode r2, $r4;
        androidx.ui.tooling.Group $r3;
        java.util.List $r5;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        r2 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode newNode()>();

        $r3 = staticinvoke <androidx.ui.tooling.SlotTreeKt: androidx.ui.tooling.Group asTree(androidx.compose.runtime.SlotTable)>(r1);

        $r4 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode convert(androidx.ui.tooling.Group)>($r3);

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r4);

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void addToParent(androidx.ui.tooling.inspector.MutableInspectorNode,java.util.List)>(r2, $r5);

        return r2;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode convert(androidx.ui.tooling.Group)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.Group r1;
        java.util.List r2;
        androidx.ui.tooling.inspector.MutableInspectorNode r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.Group;

        r2 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.List convertChildren(androidx.ui.tooling.Group)>(r1);

        r3 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode parse(androidx.ui.tooling.Group)>(r1);

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void addToParent(androidx.ui.tooling.inspector.MutableInspectorNode,java.util.List)>(r3, r2);

        return r3;
    }

    private final java.util.List convertChildren(androidx.ui.tooling.Group)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.Group r1, r3;
        java.util.List r2, $r10, $r11, $r12;
        androidx.ui.tooling.inspector.MutableInspectorNode r4;
        java.util.Collection $r5, $r7, r15, r16;
        boolean $z0, $z1, $z3, $z4, z5, z6, $z7, z8, $z9, z10, $z11;
        java.util.ArrayList $r6;
        java.lang.Object $r8;
        java.lang.String $r9;
        int $i0;
        long $l1;
        byte $b2;
        java.util.Iterator r13;
        java.lang.CharSequence r14;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.Group;

        $r5 = virtualinvoke r1.<androidx.ui.tooling.Group: java.util.Collection getChildren()>();

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r12;

     label01:
        z5 = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r6;

        $r7 = virtualinvoke r1.<androidx.ui.tooling.Group: java.util.Collection getChildren()>();

        r13 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.ui.tooling.Group) $r8;

        r4 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode convert(androidx.ui.tooling.Group)>(r3);

        $r9 = virtualinvoke r4.<androidx.ui.tooling.inspector.MutableInspectorNode: java.lang.String getName()>();

        r14 = (java.lang.CharSequence) $r9;

        z6 = 0;

        $i0 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        if $z7 != 0 goto label09;

        $r10 = virtualinvoke r4.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        r15 = (java.util.Collection) $r10;

        z8 = 0;

        $z3 = interfaceinvoke r15.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        if $z9 != 0 goto label09;

        $l1 = virtualinvoke r4.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label09;

        $r11 = virtualinvoke r4.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        r16 = (java.util.Collection) $r11;

        z10 = 0;

        $z4 = interfaceinvoke r16.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label07;

        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        if $z11 == 0 goto label10;

     label09:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label11;

     label10:
        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void release(androidx.ui.tooling.inspector.MutableInspectorNode)>(r4);

     label11:
        goto label02;

     label12:
        return r2;
    }

    private final void addToParent(androidx.ui.tooling.inspector.MutableInspectorNode, java.util.List)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0, r25;
        androidx.ui.tooling.inspector.MutableInspectorNode r1, r5;
        java.util.List r2, $r12, $r13, $r18, $r19, $r27, $r28;
        java.util.Iterator r3, r6;
        java.lang.Object r4, r7, r10;
        androidx.compose.ui.node.LayoutNode r8;
        java.util.Map $r9;
        boolean $z5, $z10, $z11;
        long $l0, $l3, $l5, $l6, $l7, $l9, $l10, $l11;
        byte $b1, $b4, $b8;
        java.lang.String $r11;
        int $i2;
        java.util.IdentityHashMap $r14;
        java.lang.Iterable $r17, $r22;
        java.util.Collection $r20, $r29;
        java.lang.Long r21, $r24;
        java.lang.CharSequence r23;
        androidx.ui.tooling.inspector.InspectorNode r26;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        r2 := @parameter1: java.util.List;

        r21 = null;

        $r22 = (java.lang.Iterable) r2;

        r3 = interfaceinvoke $r22.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.ui.tooling.inspector.MutableInspectorNode) r4;

        $r11 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: java.lang.String getName()>();

        r23 = (java.lang.CharSequence) $r11;

        $i2 = interfaceinvoke r23.<java.lang.CharSequence: int length()>();

        if $i2 != 0 goto label02;

        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        if $z10 == 0 goto label06;

        $r18 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        $r19 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        $r20 = (java.util.Collection) $r19;

        interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>($r20);

        $l7 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label12;

        if r21 != null goto label04;

        $l9 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        goto label05;

     label04:
        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

     label05:
        r21 = $r24;

        goto label12;

     label06:
        $l3 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label07;

        $l10 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        goto label08;

     label07:
        r25 = r0;

        $l5 = r25.<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId>;

        $l6 = $l5 + -1L;

        r25.<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId> = $l6;

        $l10 = r25.<androidx.ui.tooling.inspector.LayoutInspectorTree: long generatedId>;

     label08:
        virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: void setId(long)>($l10);

        r26 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: androidx.ui.tooling.inspector.InspectorNode build()>();

        $r12 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        $r17 = (java.lang.Iterable) $r12;

        r6 = interfaceinvoke $r17.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z11 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label11;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.compose.ui.node.LayoutNode) r7;

        $r14 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap claimedNodes>;

        $r9 = (java.util.Map) $r14;

        r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        if r10 != null goto label10;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r26);

        goto label10;

     label10:
        goto label09;

     label11:
        $r13 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r26);

     label12:
        $r27 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        $r28 = virtualinvoke r5.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        $r29 = (java.util.Collection) $r28;

        interfaceinvoke $r27.<java.util.List: boolean addAll(java.util.Collection)>($r29);

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void release(androidx.ui.tooling.inspector.MutableInspectorNode)>(r5);

        goto label01;

     label13:
        $l0 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label14;

        if r21 == null goto label14;

        $l11 = virtualinvoke r21.<java.lang.Long: long longValue()>();

        goto label15;

     label14:
        $l11 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: long getId()>();

     label15:
        virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: void setId(long)>($l11);

        return;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode parse(androidx.ui.tooling.Group)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.Group r1, r10;
        androidx.ui.tooling.inspector.MutableInspectorNode r2, $r5, $r6, $r8;
        long $l0;
        boolean $z0, $z1, $z3, $z4, z5, z6, z8, z9, $z10, z11, z12;
        java.util.List $r3, $r4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r7, r20, r21, r22;
        androidx.ui.tooling.NodeGroup $r11, r12;
        java.lang.Object $r13, r14;
        androidx.compose.ui.node.LayoutNode $r15, r16, r17, r18;
        java.lang.CharSequence r19;
        androidx.compose.ui.unit.IntBounds r23;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.Group;

        r2 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode newNode()>();

        $l0 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: long getRenderNode(androidx.ui.tooling.Group)>(r1);

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setId(long)>($l0);

        r10 = r1;

        $z0 = r10 instanceof androidx.ui.tooling.NodeGroup;

        if $z0 == 0 goto label01;

        $r11 = (androidx.ui.tooling.NodeGroup) r10;

        goto label02;

     label01:
        $r11 = null;

     label02:
        r12 = $r11;

        if r12 != null goto label03;

        $r13 = null;

        goto label04;

     label03:
        $r13 = virtualinvoke r12.<androidx.ui.tooling.NodeGroup: java.lang.Object getNode()>();

     label04:
        r14 = $r13;

        $z1 = r14 instanceof androidx.compose.ui.node.LayoutNode;

        if $z1 == 0 goto label05;

        $r15 = (androidx.compose.ui.node.LayoutNode) r14;

        goto label06;

     label05:
        $r15 = null;

     label06:
        r16 = $r15;

        if r16 != null goto label07;

        goto label08;

     label07:
        r17 = r16;

        z5 = 0;

        z6 = 0;

        r18 = r17;

        $r3 = virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getLayoutNodes()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r18);

     label08:
        $z3 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: boolean parseCallLocation(androidx.ui.tooling.Group,androidx.ui.tooling.inspector.MutableInspectorNode)>(r1, r2);

        if $z3 != 0 goto label12;

        $r7 = virtualinvoke r1.<androidx.ui.tooling.Group: java.lang.String getName()>();

        r19 = (java.lang.CharSequence) $r7;

        z8 = 0;

        z9 = 0;

        if r19 == null goto label09;

        $i11 = interfaceinvoke r19.<java.lang.CharSequence: int length()>();

        if $i11 != 0 goto label10;

     label09:
        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        if $z10 == 0 goto label12;

        $r8 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode markUnwanted(androidx.ui.tooling.inspector.MutableInspectorNode)>(r2);

        return $r8;

     label12:
        r20 = virtualinvoke r1.<androidx.ui.tooling.Group: java.lang.String getName()>();

        if r20 != null goto label13;

        goto label14;

     label13:
        r21 = r20;

        z11 = 0;

        z12 = 0;

        r22 = r21;

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setName(java.lang.String)>(r22);

     label14:
        $z4 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: boolean unwantedGroup(androidx.ui.tooling.inspector.MutableInspectorNode)>(r2);

        if $z4 == 0 goto label15;

        $r6 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode markUnwanted(androidx.ui.tooling.inspector.MutableInspectorNode)>(r2);

        return $r6;

     label15:
        r23 = virtualinvoke r1.<androidx.ui.tooling.Group: androidx.compose.ui.unit.IntBounds getBox()>();

        $i1 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getTop()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setTop(int)>($i1);

        $i2 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getLeft()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setLeft(int)>($i2);

        $i3 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getBottom()>();

        $i4 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getTop()>();

        $i5 = $i3 - $i4;

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setHeight(int)>($i5);

        $i6 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getRight()>();

        $i7 = virtualinvoke r23.<androidx.compose.ui.unit.IntBounds: int getLeft()>();

        $i8 = $i6 - $i7;

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setWidth(int)>($i8);

        $i9 = virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: int getHeight()>();

        if $i9 > 0 goto label16;

        $i10 = virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: int getWidth()>();

        if $i10 > 0 goto label16;

        $r5 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode markUnwanted(androidx.ui.tooling.inspector.MutableInspectorNode)>(r2);

        return $r5;

     label16:
        $r4 = virtualinvoke r1.<androidx.ui.tooling.Group: java.util.List getParameters()>();

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void addParameters(java.util.List,androidx.ui.tooling.inspector.MutableInspectorNode)>($r4, r2);

        return r2;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode markUnwanted(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: void resetExceptIdLayoutNodesAndChildren()>();

        return r1;
    }

    private final boolean parseCallLocation(androidx.ui.tooling.Group, androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.Group r1;
        androidx.ui.tooling.inspector.MutableInspectorNode r2;
        androidx.ui.tooling.SourceLocation r3, r5;
        java.lang.String r4, r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.Group;

        r2 := @parameter1: androidx.ui.tooling.inspector.MutableInspectorNode;

        r5 = virtualinvoke r1.<androidx.ui.tooling.Group: androidx.ui.tooling.SourceLocation getLocation()>();

        if r5 != null goto label1;

        return 0;

     label1:
        r3 = r5;

        r4 = virtualinvoke r3.<androidx.ui.tooling.SourceLocation: java.lang.String getSourceFile()>();

        if r4 != null goto label2;

        return 0;

     label2:
        r6 = r4;

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setFileName(java.lang.String)>(r6);

        $i0 = virtualinvoke r3.<androidx.ui.tooling.SourceLocation: int getPackageHash()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setPackageHash(int)>($i0);

        $i1 = virtualinvoke r3.<androidx.ui.tooling.SourceLocation: int getLineNumber()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setLineNumber(int)>($i1);

        $i2 = virtualinvoke r3.<androidx.ui.tooling.SourceLocation: int getOffset()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setOffset(int)>($i2);

        $i3 = virtualinvoke r3.<androidx.ui.tooling.SourceLocation: int getLength()>();

        virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: void setLength(int)>($i3);

        return 1;
    }

    private final long getRenderNode(androidx.ui.tooling.Group)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.Group r1;
        java.lang.Long r2;
        kotlin.sequences.Sequence $r3, $r6, $r11, $r14;
        java.util.List $r4;
        java.lang.Iterable $r5;
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 $r7;
        kotlin.jvm.functions.Function1 $r8, $r10, $r13;
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 $r9;
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 $r12;
        java.lang.Object $r15;
        java.lang.NullPointerException $r16;
        long $l0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.Group;

        $r4 = virtualinvoke r1.<androidx.ui.tooling.Group: java.util.List getModifierInfo()>();

        $r5 = (java.lang.Iterable) $r4;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r5);

        $r7 = <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r9 = <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 INSTANCE>;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        $r11 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r3, $r10);

        if $r11 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");

        throw $r16;

     label1:
        $r12 = <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 INSTANCE>;

        $r13 = (kotlin.jvm.functions.Function1) $r12;

        $r14 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r11, $r13);

        $r15 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object firstOrNull(kotlin.sequences.Sequence)>($r14);

        r2 = (java.lang.Long) $r15;

        if r2 != null goto label2;

        $l0 = 0L;

        goto label3;

     label2:
        $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

     label3:
        return $l0;
    }

    private final void addParameters(java.util.List, androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        java.util.List r1;
        androidx.ui.tooling.inspector.MutableInspectorNode r2;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5;
        androidx.ui.tooling.ParameterInformation r6;
        boolean $z2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.ui.tooling.inspector.MutableInspectorNode;

        $r3 = (java.lang.Iterable) r1;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.ui.tooling.ParameterInformation) r5;

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void addParameter(androidx.ui.tooling.ParameterInformation,androidx.ui.tooling.inspector.MutableInspectorNode)>(r6, r2);

        goto label1;

     label2:
        return;
    }

    private final void addParameter(androidx.ui.tooling.ParameterInformation, androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.ParameterInformation r1;
        androidx.ui.tooling.inspector.MutableInspectorNode r2;
        java.lang.Object r3;
        java.util.List $r4;
        androidx.ui.tooling.inspector.RawParameter $r5;
        java.lang.String $r6;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.ParameterInformation;

        r2 := @parameter1: androidx.ui.tooling.inspector.MutableInspectorNode;

        r3 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.lang.Object castValue(androidx.ui.tooling.ParameterInformation)>(r1);

        $r4 = virtualinvoke r2.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getParameters()>();

        $r5 = new androidx.ui.tooling.inspector.RawParameter;

        $r6 = virtualinvoke r1.<androidx.ui.tooling.ParameterInformation: java.lang.String getName()>();

        specialinvoke $r5.<androidx.ui.tooling.inspector.RawParameter: void <init>(java.lang.String,java.lang.Object)>($r6, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private final java.lang.Object castValue(androidx.ui.tooling.ParameterInformation)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.ParameterInformation r1;
        java.lang.Object r2, r3, $r7;
        java.lang.String $r4, $r6;
        androidx.ui.tooling.inspector.InlineClassConverter $r5;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.ParameterInformation;

        r3 = virtualinvoke r1.<androidx.ui.tooling.ParameterInformation: java.lang.Object getValue()>();

        if r3 != null goto label1;

        return null;

     label1:
        r2 = r3;

        $r4 = virtualinvoke r1.<androidx.ui.tooling.ParameterInformation: java.lang.String getInlineClass()>();

        if $r4 != null goto label2;

        return r2;

     label2:
        $r5 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.InlineClassConverter inlineClassConverter>;

        $r6 = virtualinvoke r1.<androidx.ui.tooling.ParameterInformation: java.lang.String getInlineClass()>();

        $r7 = virtualinvoke $r5.<androidx.ui.tooling.inspector.InlineClassConverter: java.lang.Object castParameterValue(java.lang.String,java.lang.Object)>($r6, r2);

        return $r7;
    }

    private final boolean unwantedGroup(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        java.util.Set $r2, $r4;
        int $i0;
        java.lang.Integer $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r5;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        $r2 = staticinvoke <androidx.ui.tooling.inspector.LayoutInspectorTreeKt: java.util.Set access$getUnwantedPackages$p$s-901057836()>();

        $i0 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: int getPackageHash()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <androidx.ui.tooling.inspector.LayoutInspectorTreeKt: java.util.Set access$getUnwantedCalls$p$s-901057836()>();

        $r5 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.lang.String getName()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode newNode()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        boolean z0, $z1, $z2;
        java.util.ArrayDeque $r1, $r2;
        java.lang.Object $r3;
        java.util.Collection r4;
        androidx.ui.tooling.inspector.MutableInspectorNode r5, $r6;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        $r1 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache>;

        r4 = (java.util.Collection) $r1;

        z0 = 0;

        $z1 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label3;

        $r2 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object pop()>();

        r5 = (androidx.ui.tooling.inspector.MutableInspectorNode) $r3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "cache.pop()");

        $r6 = r5;

        goto label4;

     label3:
        $r6 = new androidx.ui.tooling.inspector.MutableInspectorNode;

        specialinvoke $r6.<androidx.ui.tooling.inspector.MutableInspectorNode: void <init>()>();

     label4:
        return $r6;
    }

    private final androidx.ui.tooling.inspector.MutableInspectorNode newNode(androidx.ui.tooling.inspector.InspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.InspectorNode r1;
        androidx.ui.tooling.inspector.MutableInspectorNode $r2, $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.InspectorNode;

        $r2 = specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: androidx.ui.tooling.inspector.MutableInspectorNode newNode()>();

        $r3 = virtualinvoke $r2.<androidx.ui.tooling.inspector.MutableInspectorNode: androidx.ui.tooling.inspector.MutableInspectorNode shallowCopy(androidx.ui.tooling.inspector.InspectorNode)>(r1);

        return $r3;
    }

    private final void release(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        java.util.ArrayDeque $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: void reset()>();

        $r2 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.ArrayDeque cache>;

        virtualinvoke $r2.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final androidx.ui.tooling.inspector.InspectorNode buildAndRelease(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        androidx.ui.tooling.inspector.InspectorNode r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        r2 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: androidx.ui.tooling.inspector.InspectorNode build()>();

        specialinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: void release(androidx.ui.tooling.inspector.MutableInspectorNode)>(r1);

        return r2;
    }

    public static final java.util.Set access$getStitched$p(androidx.ui.tooling.inspector.LayoutInspectorTree)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree $r0;
        java.util.Set $r1;

        $r0 := @parameter0: androidx.ui.tooling.inspector.LayoutInspectorTree;

        $r1 = $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set stitched>;

        return $r1;
    }

    public static final java.util.IdentityHashMap access$getTreeMap$p(androidx.ui.tooling.inspector.LayoutInspectorTree)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree $r0;
        java.util.IdentityHashMap $r1;

        $r0 := @parameter0: androidx.ui.tooling.inspector.LayoutInspectorTree;

        $r1 = $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap treeMap>;

        return $r1;
    }

    static void <clinit>()
    {
        <androidx.ui.tooling.inspector.LayoutInspectorTree: int $stable> = 8;

        return;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1
<androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1: androidx.ui.tooling.inspector.LayoutInspectorTree $this>
    void <init>(androidx.ui.tooling.inspector.LayoutInspectorTree)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1 r0;
        androidx.ui.tooling.inspector.LayoutInspectorTree $r1;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1;

        $r1 := @parameter0: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1: androidx.ui.tooling.inspector.LayoutInspectorTree $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final boolean invoke(java.util.Map$Entry)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1 r0;
        java.util.Map$Entry $r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r6;
        androidx.ui.tooling.inspector.MutableInspectorNode r5;
        boolean $z2, $z3, $z4, z5, $z6, $z7;
        java.util.IdentityHashMap $r7;
        java.util.Collection $r8;
        java.lang.Iterable $r9;
        androidx.ui.tooling.inspector.LayoutInspectorTree r10;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1;

        $r1 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$dstr$_u24__u24$children");

        z5 = 0;

        $r6 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (java.util.List) $r6;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "children");

        $r9 = (java.lang.Iterable) r2;

        r10 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1: androidx.ui.tooling.inspector.LayoutInspectorTree $this>;

        $z2 = $r9 instanceof java.util.Collection;

        if $z2 == 0 goto label1;

        $r8 = (java.util.Collection) $r9;

        $z4 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $z6 = 1;

        goto label4;

     label1:
        r3 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.ui.tooling.inspector.MutableInspectorNode) r4;

        $r7 = staticinvoke <androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.IdentityHashMap access$getTreeMap$p(androidx.ui.tooling.inspector.LayoutInspectorTree)>(r10);

        $z3 = virtualinvoke $r7.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>(r5);

        if $z3 == 0 goto label2;

        $z6 = 0;

        goto label4;

     label3:
        $z6 = 1;

     label4:
        return $z6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1 r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $z0 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$findDeepParentTree$1: boolean invoke(java.util.Map$Entry)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1
<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 INSTANCE>
    public void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1: boolean invoke(java.lang.Object)>(r1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public final boolean invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.compose.ui.node.OwnedLayer;

        return $z0;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 $r0;

        $r0 = new androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1;

        specialinvoke $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1: void <init>()>();

        <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$$inlined$filterIsInstance$1 INSTANCE> = $r0;

        return;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1
<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 INSTANCE>
    void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.compose.ui.node.ModifierInfo)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 r0;
        androidx.compose.ui.node.ModifierInfo r1;
        java.lang.Object $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1;

        r1 := @parameter0: androidx.compose.ui.node.ModifierInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.ModifierInfo: java.lang.Object getExtra()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 r0;
        java.lang.Object r1, $r3;
        androidx.compose.ui.node.ModifierInfo $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.ModifierInfo) r1;

        $r3 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1: java.lang.Object invoke(androidx.compose.ui.node.ModifierInfo)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 $r0;

        $r0 = new androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1;

        specialinvoke $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1: void <init>()>();

        <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$1 INSTANCE> = $r0;

        return;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2
<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 INSTANCE>
    void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final long invoke(androidx.compose.ui.node.OwnedLayer)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 r0;
        androidx.compose.ui.node.OwnedLayer r1;
        long $l0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2;

        r1 := @parameter0: androidx.compose.ui.node.OwnedLayer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $l0 = interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: long getLayerId()>();

        return $l0;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.OwnedLayer $r2;
        long $l0;
        java.lang.Long $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.OwnedLayer) r1;

        $l0 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2: long invoke(androidx.compose.ui.node.OwnedLayer)>($r2);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 $r0;

        $r0 = new androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2;

        specialinvoke $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2: void <init>()>();

        <androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2: androidx.ui.tooling.inspector.LayoutInspectorTree$getRenderNode$2 INSTANCE> = $r0;

        return;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1
<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 INSTANCE>
    void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.ui.node.LayoutNode invoke(androidx.compose.ui.node.LayoutNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 r0;
        androidx.compose.ui.node.LayoutNode r1, $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode $r2, $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1: androidx.compose.ui.node.LayoutNode invoke(androidx.compose.ui.node.LayoutNode)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 $r0;

        $r0 = new androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1;

        specialinvoke $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1: void <init>()>();

        <androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$2$parentLayout$1 INSTANCE> = $r0;

        return;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3
<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3: androidx.ui.tooling.inspector.LayoutInspectorTree $this>
    void <init>(androidx.ui.tooling.inspector.LayoutInspectorTree)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3 r0;
        androidx.ui.tooling.inspector.LayoutInspectorTree $r1;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3;

        $r1 := @parameter0: androidx.ui.tooling.inspector.LayoutInspectorTree;

        r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3: androidx.ui.tooling.inspector.LayoutInspectorTree $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final boolean invoke(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3 r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        androidx.ui.tooling.inspector.LayoutInspectorTree $r2;
        java.util.Set $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3: androidx.ui.tooling.inspector.LayoutInspectorTree $this>;

        $r3 = staticinvoke <androidx.ui.tooling.inspector.LayoutInspectorTree: java.util.Set access$getStitched$p(androidx.ui.tooling.inspector.LayoutInspectorTree)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3 r0;
        java.lang.Object r1;
        androidx.ui.tooling.inspector.MutableInspectorNode $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.ui.tooling.inspector.MutableInspectorNode) r1;

        $z0 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$3: boolean invoke(androidx.ui.tooling.inspector.MutableInspectorNode)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4
<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 INSTANCE>
    void <init>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 r0;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.util.List invoke(androidx.ui.tooling.inspector.MutableInspectorNode)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 r0;
        androidx.ui.tooling.inspector.MutableInspectorNode r1;
        java.util.List $r2;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4;

        r1 := @parameter0: androidx.ui.tooling.inspector.MutableInspectorNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.ui.tooling.inspector.MutableInspectorNode: java.util.List getChildren()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 r0;
        java.lang.Object r1;
        androidx.ui.tooling.inspector.MutableInspectorNode $r2;
        java.util.List $r3;

        r0 := @this: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.ui.tooling.inspector.MutableInspectorNode) r1;

        $r3 = virtualinvoke r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4: java.util.List invoke(androidx.ui.tooling.inspector.MutableInspectorNode)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 $r0;

        $r0 = new androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4;

        specialinvoke $r0.<androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4: void <init>()>();

        <androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4: androidx.ui.tooling.inspector.LayoutInspectorTree$stitchTreesByLayoutNode$4 INSTANCE> = $r0;

        return;
    }

