androidx.car.app.model.ModelUtils
    public static void validateAllNonBrowsableRowsHaveDistance(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        androidx.car.app.model.Item r2;
        androidx.car.app.model.Row r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4, $r6;
        java.lang.Object $r5;
        int i0, i1;

        r0 := @parameter0: java.util.List;

        i0 = 0;

        i1 = 0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.car.app.model.Item) $r5;

        $z1 = r2 instanceof androidx.car.app.model.Row;

        if $z1 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item in the list is not a Row");

        throw $r6;

     label2:
        r3 = (androidx.car.app.model.Row) r2;

        $z2 = virtualinvoke r3.<androidx.car.app.model.Row: boolean isBrowsable()>();

        if $z2 != 0 goto label3;

        i1 = i1 + 1;

     label3:
        $z3 = staticinvoke <androidx.car.app.model.ModelUtils: boolean checkRowHasSpanType(androidx.car.app.model.Row,java.lang.Class)>(r3, class "Landroidx/car/app/model/DistanceSpan;");

        if $z3 == 0 goto label4;

        i0 = i0 + 1;

     label4:
        goto label1;

     label5:
        if i1 <= i0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All non-browsable rows must have a distance span attached to either its title or texts");

        throw $r4;

     label6:
        return;
    }

    public static void validateAllRowsHaveDistanceOrDuration(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        androidx.car.app.model.Item r2;
        androidx.car.app.model.Row r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.car.app.model.Item) $r4;

        $z1 = r2 instanceof androidx.car.app.model.Row;

        if $z1 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item in the list is not a Row");

        throw $r6;

     label2:
        r3 = (androidx.car.app.model.Row) r2;

        $z2 = staticinvoke <androidx.car.app.model.ModelUtils: boolean checkRowHasSpanType(androidx.car.app.model.Row,java.lang.Class)>(r3, class "Landroidx/car/app/model/DistanceSpan;");

        if $z2 != 0 goto label3;

        $z3 = staticinvoke <androidx.car.app.model.ModelUtils: boolean checkRowHasSpanType(androidx.car.app.model.Row,java.lang.Class)>(r3, class "Landroidx/car/app/model/DurationSpan;");

        if $z3 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All rows must have either a distance or duration span attached to either its title or texts");

        throw $r5;

     label3:
        goto label1;

     label4:
        return;
    }

    public static void validateAllRowsHaveOnlySmallImages(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        androidx.car.app.model.Item r2;
        androidx.car.app.model.Row r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        androidx.car.app.model.CarIcon $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6, $r7;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.car.app.model.Item) $r4;

        $z1 = r2 instanceof androidx.car.app.model.Row;

        if $z1 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item in the list is not a Row");

        throw $r7;

     label2:
        r3 = (androidx.car.app.model.Row) r2;

        $r5 = virtualinvoke r3.<androidx.car.app.model.Row: androidx.car.app.model.CarIcon getImage()>();

        if $r5 == null goto label3;

        $i0 = virtualinvoke r3.<androidx.car.app.model.Row: int getRowImageType()>();

        if $i0 != 2 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Rows must only use small-sized images");

        throw $r6;

     label3:
        goto label1;

     label4:
        return;
    }

    public static void validateNoRowsHaveBothMarkersAndImages(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        androidx.car.app.model.Item r2;
        androidx.car.app.model.Row r3;
        androidx.car.app.model.Metadata r4;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        androidx.car.app.model.Place r5;
        java.lang.Object $r6;
        androidx.car.app.model.CarIcon $r7;
        java.lang.IllegalArgumentException $r8, $r10;
        androidx.car.app.model.PlaceMarker $r9;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.car.app.model.Item) $r6;

        $z3 = r2 instanceof androidx.car.app.model.Row;

        if $z3 != 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item in the list is not a Row");

        throw $r10;

     label2:
        r3 = (androidx.car.app.model.Row) r2;

        r4 = virtualinvoke r3.<androidx.car.app.model.Row: androidx.car.app.model.Metadata getMetadata()>();

        if r4 == null goto label7;

        $r7 = virtualinvoke r3.<androidx.car.app.model.Row: androidx.car.app.model.CarIcon getImage()>();

        if $r7 == null goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z0 = $z4;

        r5 = virtualinvoke r4.<androidx.car.app.model.Metadata: androidx.car.app.model.Place getPlace()>();

        if r5 == null goto label5;

        $r9 = virtualinvoke r5.<androidx.car.app.model.Place: androidx.car.app.model.PlaceMarker getMarker()>();

        if $r9 == null goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        z1 = $z5;

        if z0 == 0 goto label7;

        if z1 == 0 goto label7;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Rows can\'t have both a marker and an image");

        throw $r8;

     label7:
        goto label1;

     label8:
        return;
    }

    private static boolean checkRowHasSpanType(androidx.car.app.model.Row, java.lang.Class)
    {
        androidx.car.app.model.Row r0;
        java.lang.Class r1;
        androidx.car.app.model.CarText r2, r4, $r5;
        java.util.List r3;
        java.lang.Object $r6, $r7;
        boolean $z0, $z1;
        int $i0, i1;

        r0 := @parameter0: androidx.car.app.model.Row;

        r1 := @parameter1: java.lang.Class;

        $r5 = virtualinvoke r0.<androidx.car.app.model.Row: androidx.car.app.model.CarText getTitle()>();

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        r2 = (androidx.car.app.model.CarText) $r6;

        $z0 = staticinvoke <androidx.car.app.model.ModelUtils: boolean checkCarTextHasSpanType(androidx.car.app.model.CarText,java.lang.Class)>(r2, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r0.<androidx.car.app.model.Row: java.util.List getTexts()>();

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (androidx.car.app.model.CarText) $r7;

        $z1 = staticinvoke <androidx.car.app.model.ModelUtils: boolean checkCarTextHasSpanType(androidx.car.app.model.CarText,java.lang.Class)>(r4, r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private static boolean checkCarTextHasSpanType(androidx.car.app.model.CarText, java.lang.Class)
    {
        androidx.car.app.model.CarText r0;
        java.lang.Class r1;
        android.text.Spanned r2;
        java.lang.Object[] r3;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.Object r4;
        boolean $z0, $z1;
        java.lang.CharSequence $r5;

        r0 := @parameter0: androidx.car.app.model.CarText;

        r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<androidx.car.app.model.CarText: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke r0.<androidx.car.app.model.CarText: java.lang.CharSequence toCharSequence()>();

        r2 = (android.text.Spanned) $r5;

        $i3 = interfaceinvoke r2.<android.text.Spanned: int length()>();

        r3 = interfaceinvoke r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i3, class "Ljava/lang/Object;");

        i0 = lengthof r3;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        r4 = r3[i5];

        i1 = interfaceinvoke r2.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r4);

        i2 = interfaceinvoke r2.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r4);

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        if i1 < 0 goto label3;

        if i1 == i2 goto label3;

        $i4 = interfaceinvoke r2.<android.text.Spanned: int length()>();

        if i1 >= $i4 goto label3;

        return 1;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 0;
    }

    private void <init>()
    {
        androidx.car.app.model.ModelUtils r0;

        r0 := @this: androidx.car.app.model.ModelUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

