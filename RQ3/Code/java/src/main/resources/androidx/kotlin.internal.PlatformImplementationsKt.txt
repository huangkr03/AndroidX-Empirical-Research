kotlin.internal.PlatformImplementationsKt
<kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS>
    static void <clinit>()
    {
        int $i0;
        java.lang.Class $r0;
        java.lang.Object $r1;
        kotlin.internal.PlatformImplementations $r2;
        java.lang.Throwable $r3, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.NullPointerException $r4;
        java.lang.ClassLoader $r5, $r6;
        boolean $z0;
        java.lang.ClassNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        $i0 = staticinvoke <kotlin.internal.PlatformImplementationsKt: int getJavaVersion()>();

        if $i0 >= 65544 goto label01;

        if $i0 >= 65536 goto label32;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.jdk8.JDK8PlatformImplementations");

     label02:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label03:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

        if $r1 == null goto label07;

     label04:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label05:
        goto label65;

     label06:
        $r3 := @caughtexception;

        goto label10;

     label07:
        $r4 = new java.lang.NullPointerException;

     label08:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label09:
        throw $r4;

     label10:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label11:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label12:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label13:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label15;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r7;

     label15:
        throw $r3;

     label16:
        $r10 := @caughtexception;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE8PlatformImplementations");

     label17:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label18:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

        if $r1 == null goto label22;

     label19:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label20:
        goto label65;

     label21:
        $r11 := @caughtexception;

        goto label25;

     label22:
        $r4 = new java.lang.NullPointerException;

     label23:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label24:
        throw $r4;

     label25:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label26:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label27:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label28:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label30;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label29:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r11);

        throw $r7;

     label30:
        throw $r11;

     label31:
        $r12 := @caughtexception;

     label32:
        if $i0 >= 65543 goto label33;

        if $i0 >= 65536 goto label64;

     label33:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.jdk7.JDK7PlatformImplementations");

     label34:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label35:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

        if $r1 == null goto label39;

     label36:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label37:
        goto label65;

     label38:
        $r13 := @caughtexception;

        goto label42;

     label39:
        $r4 = new java.lang.NullPointerException;

     label40:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label41:
        throw $r4;

     label42:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label43:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label44:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label45:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label47;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label46:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r13);

        throw $r7;

     label47:
        throw $r13;

     label48:
        $r14 := @caughtexception;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE7PlatformImplementations");

     label49:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label50:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

        if $r1 == null goto label54;

     label51:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label52:
        goto label65;

     label53:
        $r15 := @caughtexception;

        goto label57;

     label54:
        $r4 = new java.lang.NullPointerException;

     label55:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label56:
        throw $r4;

     label57:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label58:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label59:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label60:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label62;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label61:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r15);

        throw $r7;

     label62:
        throw $r15;

     label63:
        $r16 := @caughtexception;

     label64:
        $r2 = new kotlin.internal.PlatformImplementations;

        specialinvoke $r2.<kotlin.internal.PlatformImplementations: void <init>()>();

     label65:
        <kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS> = $r2;

        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label16;
        catch java.lang.ClassCastException from label04 to label05 with label06;
        catch java.lang.ClassCastException from label08 to label09 with label06;
        catch java.lang.ClassNotFoundException from label08 to label09 with label16;
        catch java.lang.ClassNotFoundException from label10 to label11 with label16;
        catch java.lang.ClassNotFoundException from label12 to label13 with label16;
        catch java.lang.ClassNotFoundException from label14 to label16 with label16;
        catch java.lang.ClassNotFoundException from label17 to label18 with label31;
        catch java.lang.ClassCastException from label19 to label20 with label21;
        catch java.lang.ClassCastException from label23 to label24 with label21;
        catch java.lang.ClassNotFoundException from label23 to label24 with label31;
        catch java.lang.ClassNotFoundException from label25 to label26 with label31;
        catch java.lang.ClassNotFoundException from label27 to label28 with label31;
        catch java.lang.ClassNotFoundException from label29 to label31 with label31;
        catch java.lang.ClassNotFoundException from label34 to label35 with label48;
        catch java.lang.ClassCastException from label36 to label37 with label38;
        catch java.lang.ClassCastException from label40 to label41 with label38;
        catch java.lang.ClassNotFoundException from label40 to label41 with label48;
        catch java.lang.ClassNotFoundException from label42 to label43 with label48;
        catch java.lang.ClassNotFoundException from label44 to label45 with label48;
        catch java.lang.ClassNotFoundException from label46 to label48 with label48;
        catch java.lang.ClassNotFoundException from label49 to label50 with label63;
        catch java.lang.ClassCastException from label51 to label52 with label53;
        catch java.lang.ClassCastException from label55 to label56 with label53;
        catch java.lang.ClassNotFoundException from label55 to label56 with label63;
        catch java.lang.ClassNotFoundException from label57 to label58 with label63;
        catch java.lang.ClassNotFoundException from label59 to label60 with label63;
        catch java.lang.ClassNotFoundException from label61 to label63 with label63;
    }

    public static final boolean apiVersionIsAtLeast(int, int, int)
    {
        int $i0, $i1, $i2;
        kotlin.KotlinVersion $r0;
        boolean $z0;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = <kotlin.KotlinVersion: kotlin.KotlinVersion CURRENT>;

        $z0 = virtualinvoke $r0.<kotlin.KotlinVersion: boolean isAtLeast(int,int,int)>($i2, $i0, $i1);

        return $z0;
    }

    private static final java.lang.Object castToBaseType(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(1, "T");

        return $r0;
    }

    private static final int getJavaVersion()
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0, $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

        if $r0 != null goto label1;

        return 65542;

     label1:
        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, 46, 0, 0, 6, null);

        if $i1 >= 0 goto label2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        $i0 = $i0 * 65536;

        return $i0;

     label2:
        $i0 = $i1 + 1;

        $i2 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, 46, $i0, 0, 4, null);

        $i3 = $i2;

        if $i2 >= 0 goto label3;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

     label3:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $i0 = $i0 * 65536;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        $i0 = $i0 + $i1;

        return $i0;
    }

