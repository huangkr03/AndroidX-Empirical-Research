androidx.ui.material.SliderPosition
<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange valueRange>
<androidx.ui.material.SliderPosition: kotlin.jvm.functions.Function1 onValueChange>
<androidx.ui.material.SliderPosition: float startValue>
<androidx.ui.material.SliderPosition: float endValue>
<androidx.ui.material.SliderPosition: float scaledValue>
<androidx.ui.material.SliderPosition: float floatPointMistakeCorrection>
<androidx.ui.material.SliderPosition: float endPx>
<androidx.ui.material.SliderPosition: float startPx>
<androidx.ui.material.SliderPosition: java.util.List tickFractions>
<androidx.ui.material.SliderPosition: java.util.List anchorsPx>
<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat holder>
    public void <init>(float, kotlin.ranges.ClosedFloatingPointRange, int, androidx.animation.AnimationClockObservable, kotlin.jvm.functions.Function1)
    {
        androidx.ui.material.SliderPosition r0, r4, $r29;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        kotlin.ranges.ClosedFloatingPointRange r1, $r6, $r9, $r12, $r15;
        int i0, i1, i2, i3, $i4, i5, i6;
        androidx.animation.AnimationClockObservable r2;
        kotlin.jvm.functions.Function1 r3, $r24;
        boolean z0, z1, $z4, z5, z6, z7, z9, z10, z11;
        java.lang.Float r5;
        java.lang.Comparable $r7, $r10, $r13, $r16;
        java.lang.Number $r8, $r11, $r14, $r17;
        kotlin.jvm.internal.FloatCompanionObject $r18, $r19;
        java.util.ArrayList $r20, r32;
        java.util.List $r21, $r30, r33;
        androidx.ui.material.CallbackBasedAnimatedFloat $r22;
        androidx.ui.material.SliderPosition$holder$1 $r23;
        java.lang.IllegalArgumentException $r25;
        java.lang.String $r26, r28;
        java.lang.Throwable $r27;

        r0 := @this: androidx.ui.material.SliderPosition;

        f0 := @parameter0: float;

        r1 := @parameter1: kotlin.ranges.ClosedFloatingPointRange;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.animation.AnimationClockObservable;

        r3 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "valueRange");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "animatedClock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "onValueChange");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange valueRange> = r1;

        r0.<androidx.ui.material.SliderPosition: kotlin.jvm.functions.Function1 onValueChange> = r3;

        $r6 = virtualinvoke r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange getValueRange()>();

        $r7 = interfaceinvoke $r6.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $r8 = (java.lang.Number) $r7;

        $f1 = virtualinvoke $r8.<java.lang.Number: float floatValue()>();

        r0.<androidx.ui.material.SliderPosition: float startValue> = $f1;

        $r9 = virtualinvoke r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange getValueRange()>();

        $r10 = interfaceinvoke $r9.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $r11 = (java.lang.Number) $r10;

        $f2 = virtualinvoke $r11.<java.lang.Number: float floatValue()>();

        r0.<androidx.ui.material.SliderPosition: float endValue> = $f2;

        if i0 < 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z5 = $z4;

        z6 = 0;

        z7 = 0;

        if z5 != 0 goto label3;

        r28 = "steps should be >= 0";

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = virtualinvoke r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        $r27 = (java.lang.Throwable) $r25;

        throw $r27;

     label3:
        r0.<androidx.ui.material.SliderPosition: float scaledValue> = f0;

        $r12 = virtualinvoke r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange getValueRange()>();

        $r13 = interfaceinvoke $r12.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $r14 = (java.lang.Number) $r13;

        $f3 = virtualinvoke $r14.<java.lang.Number: float floatValue()>();

        $r15 = virtualinvoke r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange getValueRange()>();

        $r16 = interfaceinvoke $r15.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $r17 = (java.lang.Number) $r16;

        $f4 = virtualinvoke $r17.<java.lang.Number: float floatValue()>();

        $f6 = $f3 - $f4;

        $f5 = (float) 100;

        $f7 = $f6 / $f5;

        r0.<androidx.ui.material.SliderPosition: float floatPointMistakeCorrection> = $f7;

        $r18 = <kotlin.jvm.internal.FloatCompanionObject: kotlin.jvm.internal.FloatCompanionObject INSTANCE>;

        $f8 = virtualinvoke $r18.<kotlin.jvm.internal.FloatCompanionObject: float getMAX_VALUE()>();

        r0.<androidx.ui.material.SliderPosition: float endPx> = $f8;

        $r19 = <kotlin.jvm.internal.FloatCompanionObject: kotlin.jvm.internal.FloatCompanionObject INSTANCE>;

        $f9 = virtualinvoke $r19.<kotlin.jvm.internal.FloatCompanionObject: float getMIN_VALUE()>();

        r0.<androidx.ui.material.SliderPosition: float startPx> = $f9;

        $r29 = r0;

        if i0 != 0 goto label4;

        $r30 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label7;

     label4:
        i5 = i0 + 2;

        r4 = r0;

        z9 = 0;

        z10 = 0;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>(i5);

        z0 = 0;

        z11 = 0;

        i6 = 0;

        i1 = i5;

     label5:
        if i6 >= i1 goto label6;

        i2 = i6;

        z1 = 0;

        i3 = i2;

        r32 = $r20;

        $f16 = (float) i3;

        $i4 = i0 + 1;

        $f15 = (float) $i4;

        $f17 = $f16 / $f15;

        r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f17);

        virtualinvoke r32.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        i6 = i6 + 1;

        goto label5;

     label6:
        r33 = (java.util.List) $r20;

        $r29 = r4;

        $r30 = r33;

     label7:
        $r29.<androidx.ui.material.SliderPosition: java.util.List tickFractions> = $r30;

        $r21 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r0.<androidx.ui.material.SliderPosition: java.util.List anchorsPx> = $r21;

        $r22 = new androidx.ui.material.CallbackBasedAnimatedFloat;

        $f10 = virtualinvoke r0.<androidx.ui.material.SliderPosition: float getStartValue$ui_material_release()>();

        $f11 = virtualinvoke r0.<androidx.ui.material.SliderPosition: float getEndValue$ui_material_release()>();

        $f13 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        $f12 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        $f14 = staticinvoke <androidx.ui.material.SliderKt: float access$scale(float,float,float,float,float)>($f10, $f11, f0, $f13, $f12);

        $r23 = new androidx.ui.material.SliderPosition$holder$1;

        specialinvoke $r23.<androidx.ui.material.SliderPosition$holder$1: void <init>(androidx.ui.material.SliderPosition)>(r0);

        $r24 = (kotlin.jvm.functions.Function1) $r23;

        specialinvoke $r22.<androidx.ui.material.CallbackBasedAnimatedFloat: void <init>(float,androidx.animation.AnimationClockObservable,kotlin.jvm.functions.Function1)>($f14, r2, $r24);

        r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat holder> = $r22;

        return;
    }

    public void <init>(float, kotlin.ranges.ClosedFloatingPointRange, int, androidx.animation.AnimationClockObservable, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.ui.material.SliderPosition r0;
        androidx.animation.AnimationClockObservable r1;
        kotlin.jvm.functions.Function1 r2;
        int i0, $i1, $i2, $i3, i4;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        float f0;
        kotlin.ranges.ClosedFloatingPointRange r4;

        r0 := @this: androidx.ui.material.SliderPosition;

        f0 := @parameter0: float;

        r4 := @parameter1: kotlin.ranges.ClosedFloatingPointRange;

        i4 := @parameter2: int;

        r1 := @parameter3: androidx.animation.AnimationClockObservable;

        r2 := @parameter4: kotlin.jvm.functions.Function1;

        i0 := @parameter5: int;

        r3 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 0.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.ClosedFloatingPointRange rangeTo(float,float)>(0.0F, 1.0F);

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        i4 = 0;

     label3:
        specialinvoke r0.<androidx.ui.material.SliderPosition: void <init>(float,kotlin.ranges.ClosedFloatingPointRange,int,androidx.animation.AnimationClockObservable,kotlin.jvm.functions.Function1)>(f0, r4, i4, r1, r2);

        return;
    }

    public final kotlin.ranges.ClosedFloatingPointRange getValueRange()
    {
        androidx.ui.material.SliderPosition r0;
        kotlin.ranges.ClosedFloatingPointRange $r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        $r1 = r0.<androidx.ui.material.SliderPosition: kotlin.ranges.ClosedFloatingPointRange valueRange>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getOnValueChange()
    {
        androidx.ui.material.SliderPosition r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        $r1 = r0.<androidx.ui.material.SliderPosition: kotlin.jvm.functions.Function1 onValueChange>;

        return $r1;
    }

    public final void setOnValueChange(kotlin.jvm.functions.Function1)
    {
        androidx.ui.material.SliderPosition r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.material.SliderPosition: kotlin.jvm.functions.Function1 onValueChange> = r1;

        return;
    }

    public final float getStartValue$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        float $f0;

        r0 := @this: androidx.ui.material.SliderPosition;

        $f0 = r0.<androidx.ui.material.SliderPosition: float startValue>;

        return $f0;
    }

    public final float getEndValue$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        float $f0;

        r0 := @this: androidx.ui.material.SliderPosition;

        $f0 = r0.<androidx.ui.material.SliderPosition: float endValue>;

        return $f0;
    }

    public final float getScaledValue$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        float $f0;

        r0 := @this: androidx.ui.material.SliderPosition;

        $f0 = r0.<androidx.ui.material.SliderPosition: float scaledValue>;

        return $f0;
    }

    public final void setScaledValue$ui_material_release(float)
    {
        androidx.ui.material.SliderPosition r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        androidx.ui.material.CallbackBasedAnimatedFloat $r1, $r3;
        java.lang.Float $r2;
        byte $b0;

        r0 := @this: androidx.ui.material.SliderPosition;

        f0 := @parameter0: float;

        $f2 = virtualinvoke r0.<androidx.ui.material.SliderPosition: float getStartValue$ui_material_release()>();

        $f3 = virtualinvoke r0.<androidx.ui.material.SliderPosition: float getEndValue$ui_material_release()>();

        $f5 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        $f4 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        f1 = staticinvoke <androidx.ui.material.SliderKt: float access$scale(float,float,float,float,float)>($f2, $f3, f0, $f5, $f4);

        $r1 = virtualinvoke r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()>();

        $r2 = virtualinvoke $r1.<androidx.ui.material.CallbackBasedAnimatedFloat: java.lang.Float getValue()>();

        $f6 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        $f8 = f1 - $f6;

        $f7 = r0.<androidx.ui.material.SliderPosition: float floatPointMistakeCorrection>;

        $b0 = $f8 cmpl $f7;

        if $b0 <= 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()>();

        virtualinvoke $r3.<androidx.ui.material.CallbackBasedAnimatedFloat: void snapTo(float)>(f1);

     label1:
        return;
    }

    public final void setBounds$ui_material_release(float, float)
    {
        androidx.ui.material.SliderPosition r0, r5;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        java.lang.Iterable $r1;
        java.util.Collection r2, r14;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.Float r6, $r8;
        byte $b0, $b2;
        androidx.ui.material.CallbackBasedAnimatedFloat $r7, $r9, $r12;
        java.util.List $r10, r15;
        java.util.ArrayList $r11;
        int $i1;
        java.lang.Number $r13;
        boolean $z4, $z5, $z6;

        r0 := @this: androidx.ui.material.SliderPosition;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f4 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        $b0 = $f4 cmpg f0;

        if $b0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        if $z4 == 0 goto label5;

        $f11 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        $b2 = $f11 cmpg f1;

        if $b2 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        if $z5 == 0 goto label5;

        return;

     label5:
        $f5 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        $f6 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        $r7 = virtualinvoke r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()>();

        $r8 = virtualinvoke $r7.<androidx.ui.material.CallbackBasedAnimatedFloat: java.lang.Float getValue()>();

        $f7 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        f2 = staticinvoke <androidx.ui.material.SliderKt: float access$scale(float,float,float,float,float)>($f5, $f6, $f7, f0, f1);

        r0.<androidx.ui.material.SliderPosition: float startPx> = f0;

        r0.<androidx.ui.material.SliderPosition: float endPx> = f1;

        $r9 = virtualinvoke r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()>();

        virtualinvoke $r9.<androidx.ui.material.CallbackBasedAnimatedFloat: void setBounds(float,float)>(f0, f1);

        $r10 = virtualinvoke r0.<androidx.ui.material.SliderPosition: java.util.List getTickFractions$ui_material_release()>();

        $r1 = (java.lang.Iterable) $r10;

        r5 = r0;

        $r11 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = (java.util.Collection) $r11;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label7;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.Number) r4;

        f3 = virtualinvoke $r13.<java.lang.Number: float floatValue()>();

        r14 = r2;

        $f9 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        $f8 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        $f10 = staticinvoke <androidx.ui.util.MathHelpersKt: float lerp(float,float,float)>($f9, $f8, f3);

        r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        goto label6;

     label7:
        r15 = (java.util.List) r2;

        r5.<androidx.ui.material.SliderPosition: java.util.List anchorsPx> = r15;

        $r12 = virtualinvoke r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()>();

        virtualinvoke $r12.<androidx.ui.material.CallbackBasedAnimatedFloat: void snapTo(float)>(f2);

        return;
    }

    public final java.util.List getTickFractions$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        java.util.List $r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        $r1 = r0.<androidx.ui.material.SliderPosition: java.util.List tickFractions>;

        return $r1;
    }

    public final java.util.List getAnchorsPx$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        java.util.List $r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        $r1 = r0.<androidx.ui.material.SliderPosition: java.util.List anchorsPx>;

        return $r1;
    }

    public final androidx.ui.material.CallbackBasedAnimatedFloat getHolder$ui_material_release()
    {
        androidx.ui.material.SliderPosition r0;
        androidx.ui.material.CallbackBasedAnimatedFloat $r1;

        r0 := @this: androidx.ui.material.SliderPosition;

        $r1 = r0.<androidx.ui.material.SliderPosition: androidx.ui.material.CallbackBasedAnimatedFloat holder>;

        return $r1;
    }

    public static final float access$getStartPx$p(androidx.ui.material.SliderPosition)
    {
        androidx.ui.material.SliderPosition r0;
        float $f0;

        r0 := @parameter0: androidx.ui.material.SliderPosition;

        $f0 = r0.<androidx.ui.material.SliderPosition: float startPx>;

        return $f0;
    }

    public static final float access$getEndPx$p(androidx.ui.material.SliderPosition)
    {
        androidx.ui.material.SliderPosition r0;
        float $f0;

        r0 := @parameter0: androidx.ui.material.SliderPosition;

        $f0 = r0.<androidx.ui.material.SliderPosition: float endPx>;

        return $f0;
    }

androidx.ui.material.SliderPosition$holder$1
<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>
    void <init>(androidx.ui.material.SliderPosition)
    {
        androidx.ui.material.SliderPosition$holder$1 r0;
        androidx.ui.material.SliderPosition $r1;

        r0 := @this: androidx.ui.material.SliderPosition$holder$1;

        $r1 := @parameter0: androidx.ui.material.SliderPosition;

        r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(float)
    {
        androidx.ui.material.SliderPosition$holder$1 r0;
        float f0, $f1, $f2, $f3, $f4, $f5;
        androidx.ui.material.SliderPosition $r1, $r3, $r4, $r5, $r6;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Float $r7;

        r0 := @this: androidx.ui.material.SliderPosition$holder$1;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>;

        $r2 = virtualinvoke $r1.<androidx.ui.material.SliderPosition: kotlin.jvm.functions.Function1 getOnValueChange()>();

        $r3 = r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>;

        $f1 = staticinvoke <androidx.ui.material.SliderPosition: float access$getStartPx$p(androidx.ui.material.SliderPosition)>($r3);

        $r4 = r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>;

        $f2 = staticinvoke <androidx.ui.material.SliderPosition: float access$getEndPx$p(androidx.ui.material.SliderPosition)>($r4);

        $r5 = r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>;

        $f3 = virtualinvoke $r5.<androidx.ui.material.SliderPosition: float getStartValue$ui_material_release()>();

        $r6 = r0.<androidx.ui.material.SliderPosition$holder$1: androidx.ui.material.SliderPosition $this>;

        $f4 = virtualinvoke $r6.<androidx.ui.material.SliderPosition: float getEndValue$ui_material_release()>();

        $f5 = staticinvoke <androidx.ui.material.SliderKt: float access$scale(float,float,float,float,float)>($f1, $f2, f0, $f3, $f4);

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.material.SliderPosition$holder$1 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        float $f0;
        kotlin.Unit $r3;

        r0 := @this: androidx.ui.material.SliderPosition$holder$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        virtualinvoke r0.<androidx.ui.material.SliderPosition$holder$1: void invoke(float)>($f0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

