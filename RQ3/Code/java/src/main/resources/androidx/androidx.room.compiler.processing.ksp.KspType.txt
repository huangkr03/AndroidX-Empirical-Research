androidx.room.compiler.processing.ksp.KspType
<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>
<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>
<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver jvmTypeResolver>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy rawType$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeName$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy xTypeName$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy jvmWildcardType$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy nullability$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy superTypes$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeElement$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeArguments$delegate>
<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy equalityItems$delegate>
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSType, androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSType r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r3;
        androidx.room.compiler.processing.ksp.KspType$rawType$2 $r4;
        kotlin.jvm.functions.Function0 $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        kotlin.Lazy $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30;
        androidx.room.compiler.processing.ksp.KspType$typeName$2 $r7;
        androidx.room.compiler.processing.ksp.KspType$xTypeName$2 $r10;
        androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2 $r13;
        androidx.room.compiler.processing.ksp.KspType$nullability$2 $r16;
        androidx.room.compiler.processing.ksp.KspType$superTypes$2 $r19;
        androidx.room.compiler.processing.ksp.KspType$typeElement$2 $r22;
        androidx.room.compiler.processing.ksp.KspType$typeArguments$2 $r25;
        androidx.room.compiler.processing.ksp.KspType$equalityItems$2 $r28;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSType;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksType");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv env> = r1;

        r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType> = r2;

        r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver jvmTypeResolver> = r3;

        $r4 = new androidx.room.compiler.processing.ksp.KspType$rawType$2;

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspType$rawType$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        $r6 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r5);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy rawType$delegate> = $r6;

        $r7 = new androidx.room.compiler.processing.ksp.KspType$typeName$2;

        specialinvoke $r7.<androidx.room.compiler.processing.ksp.KspType$typeName$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        $r9 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r8);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeName$delegate> = $r9;

        $r10 = new androidx.room.compiler.processing.ksp.KspType$xTypeName$2;

        specialinvoke $r10.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r11 = (kotlin.jvm.functions.Function0) $r10;

        $r12 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r11);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy xTypeName$delegate> = $r12;

        $r13 = new androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2;

        specialinvoke $r13.<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r14 = (kotlin.jvm.functions.Function0) $r13;

        $r15 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r14);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy jvmWildcardType$delegate> = $r15;

        $r16 = new androidx.room.compiler.processing.ksp.KspType$nullability$2;

        specialinvoke $r16.<androidx.room.compiler.processing.ksp.KspType$nullability$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r17 = (kotlin.jvm.functions.Function0) $r16;

        $r18 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r17);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy nullability$delegate> = $r18;

        $r19 = new androidx.room.compiler.processing.ksp.KspType$superTypes$2;

        specialinvoke $r19.<androidx.room.compiler.processing.ksp.KspType$superTypes$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r20 = (kotlin.jvm.functions.Function0) $r19;

        $r21 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r20);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy superTypes$delegate> = $r21;

        $r22 = new androidx.room.compiler.processing.ksp.KspType$typeElement$2;

        specialinvoke $r22.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r23 = (kotlin.jvm.functions.Function0) $r22;

        $r24 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r23);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeElement$delegate> = $r24;

        $r25 = new androidx.room.compiler.processing.ksp.KspType$typeArguments$2;

        specialinvoke $r25.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r26 = (kotlin.jvm.functions.Function0) $r25;

        $r27 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r26);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeArguments$delegate> = $r27;

        $r28 = new androidx.room.compiler.processing.ksp.KspType$equalityItems$2;

        specialinvoke $r28.<androidx.room.compiler.processing.ksp.KspType$equalityItems$2: void <init>(androidx.room.compiler.processing.ksp.KspType)>(r0);

        $r29 = (kotlin.jvm.functions.Function0) $r28;

        $r30 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r29);

        r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy equalityItems$delegate> = $r30;

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>;

        return $r1;
    }

    public final com.google.devtools.ksp.symbol.KSType getKsType()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        com.google.devtools.ksp.symbol.KSType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        return $r1;
    }

    protected final androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver jvmTypeResolver>;

        return $r1;
    }

    public androidx.room.compiler.processing.ksp.KspRawType getRawType()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.ksp.KspRawType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy rawType$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KspRawType) $r2;

        return $r3;
    }

    public final com.squareup.javapoet.TypeName getTypeName()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        com.squareup.javapoet.TypeName $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeName$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (com.squareup.javapoet.TypeName) $r2;

        return $r3;
    }

    private final androidx.room.compiler.codegen.XTypeName getXTypeName()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.codegen.XTypeName $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy xTypeName$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.codegen.XTypeName) $r2;

        return $r3;
    }

    public androidx.room.compiler.codegen.XTypeName asTypeName()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.codegen.XTypeName $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName getXTypeName()>();

        return $r1;
    }

    private final androidx.room.compiler.processing.ksp.KspType getJvmWildcardType()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r3;
        kotlin.Lazy r1;
        java.lang.Object $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy jvmWildcardType$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r3;
    }

    public final androidx.room.compiler.processing.ksp.KspType getJvmWildcardTypeOrSelf$room_compiler_processing()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType getJvmWildcardType()>();

        if $r1 != null goto label1;

        $r1 = r0;

     label1:
        return $r1;
    }

<androidx.room.compiler.processing.ksp.KspType: com.squareup.javapoet.TypeName resolveJTypeName()>
<androidx.room.compiler.processing.ksp.KspType: com.squareup.kotlinpoet.TypeName resolveKTypeName()>
    public androidx.room.compiler.processing.XNullability getNullability()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.XNullability $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy nullability$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.XNullability) $r2;

        return $r3;
    }

    public java.util.List getSuperTypes()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy superTypes$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public androidx.room.compiler.processing.ksp.KspTypeElement getTypeElement()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.ksp.KspTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeElement$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KspTypeElement) $r2;

        return $r3;
    }

    public java.util.List getTypeArguments()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy typeArguments$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public static void getTypeArguments$annotations()
    {
        return;
    }

    public boolean isAssignableFrom(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r3;
        androidx.room.compiler.processing.XType r1;
        java.lang.String r2, $r7;
        boolean $z0, $z1;
        com.google.devtools.ksp.symbol.KSType $r4, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $z0 = r1 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z0 != 0 goto label1;

        r2 = "Check failed.";

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        $r5 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $r3 = (androidx.room.compiler.processing.ksp.KspType) r1;

        $r4 = $r3.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $z1 = interfaceinvoke $r5.<com.google.devtools.ksp.symbol.KSType: boolean isAssignableFrom(com.google.devtools.ksp.symbol.KSType)>($r4);

        return $z1;
    }

    public boolean isError()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $z0 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSType: boolean isError()>();

        return $z0;
    }

    public java.lang.String defaultValue()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        com.google.devtools.ksp.processing.KSBuiltIns r1;
        com.google.devtools.ksp.symbol.KSType r2, $r3, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        com.google.devtools.ksp.symbol.Nullability $r4, $r5;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r6;
        com.google.devtools.ksp.processing.Resolver $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r16;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r3 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.Nullability getNullability()>();

        $r5 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NULLABLE>;

        if $r4 != $r5 goto label01;

        return "null";

     label01:
        $r6 = r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>;

        $r7 = virtualinvoke $r6.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        r1 = interfaceinvoke $r7.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.processing.KSBuiltIns getBuiltIns()>();

        r2 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $r8 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getBooleanType()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r8);

        if $z0 == 0 goto label02;

        $r16 = "false";

        goto label13;

     label02:
        $r9 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getByteType()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r9);

        if $z1 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $r10 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getShortType()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r10);

     label04:
        if $z5 == 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $r11 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getIntType()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r11);

     label06:
        if $z6 == 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $r12 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getCharType()>();

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r12);

     label08:
        if $z7 == 0 goto label09;

        $r16 = "0";

        goto label13;

     label09:
        $r13 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getLongType()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r13);

        if $z2 == 0 goto label10;

        $r16 = "0L";

        goto label13;

     label10:
        $r14 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getFloatType()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r14);

        if $z3 == 0 goto label11;

        $r16 = "0f";

        goto label13;

     label11:
        $r15 = interfaceinvoke r1.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getDoubleType()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r15);

        if $z4 == 0 goto label12;

        $r16 = "0.0";

        goto label13;

     label12:
        $r16 = "null";

     label13:
        return $r16;
    }

    public boolean isNone()
    {
        androidx.room.compiler.processing.ksp.KspType r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        return 0;
    }

    public boolean isTypeOf(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.reflect.KClass r1;
        androidx.room.compiler.processing.ksp.KspRawType $r2, $r8;
        com.squareup.javapoet.TypeName $r3, $r4, $r9, $r10;
        java.lang.String $r5, $r7, $r11, $r13;
        java.lang.Class $r6, $r12;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspRawType getRawType()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspRawType: com.squareup.javapoet.TypeName getTypeName()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.JavaPoetExtKt: com.squareup.javapoet.TypeName tryBox(com.squareup.javapoet.TypeName)>($r3);

        $r5 = virtualinvoke $r4.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        $r6 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getCanonicalName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r7);

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspRawType getRawType()>();

        $r9 = virtualinvoke $r8.<androidx.room.compiler.processing.ksp.KspRawType: com.squareup.javapoet.TypeName getTypeName()>();

        $r10 = staticinvoke <androidx.room.compiler.processing.JavaPoetExtKt: com.squareup.javapoet.TypeName tryUnbox(com.squareup.javapoet.TypeName)>($r9);

        $r11 = virtualinvoke $r10.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        $r12 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r13);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isSameType(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r11;
        androidx.room.compiler.processing.XType r1;
        java.lang.String r2, $r15;
        boolean $z0, $z1, $z2;
        androidx.room.compiler.processing.XNullability $r3, $r4, $r9, $r10;
        androidx.room.compiler.codegen.XTypeName $r5, $r7;
        com.squareup.javapoet.TypeName $r6, $r8;
        com.google.devtools.ksp.symbol.KSType $r12, $r13;
        java.lang.IllegalStateException $r14;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $z0 = r1 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z0 != 0 goto label1;

        r2 = "Check failed.";

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label1:
        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r4 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability UNKNOWN>;

        if $r3 == $r4 goto label2;

        $r9 = interfaceinvoke r1.<androidx.room.compiler.processing.XType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r10 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability UNKNOWN>;

        if $r9 != $r10 goto label3;

     label2:
        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName asTypeName()>();

        $r6 = virtualinvoke $r5.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        $r7 = interfaceinvoke r1.<androidx.room.compiler.processing.XType: androidx.room.compiler.codegen.XTypeName asTypeName()>();

        $r8 = virtualinvoke $r7.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r8);

        return $z1;

     label3:
        $r13 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $r11 = (androidx.room.compiler.processing.ksp.KspType) r1;

        $r12 = $r11.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r12);

        return $z2;
    }

    public androidx.room.compiler.processing.XType extendsBound()
    {
        androidx.room.compiler.processing.ksp.KspType r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        return null;
    }

    public java.lang.Object[] getEqualityItems()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspType: kotlin.Lazy equalityItems$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        java.lang.Object r1;
        androidx.room.compiler.processing.XEquality$Companion $r2;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: java.lang.Object;

        $r2 = <androidx.room.compiler.processing.XEquality: androidx.room.compiler.processing.XEquality$Companion Companion>;

        $z0 = virtualinvoke $r2.<androidx.room.compiler.processing.XEquality$Companion: boolean equals(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public int hashCode()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.XEquality$Companion $r1;
        java.lang.Object[] $r2;
        int $i0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = <androidx.room.compiler.processing.XEquality: androidx.room.compiler.processing.XEquality$Companion Companion>;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: java.lang.Object[] getEqualityItems()>();

        $i0 = virtualinvoke $r1.<androidx.room.compiler.processing.XEquality$Companion: int hashCode(java.lang.Object[])>($r2);

        return $i0;
    }

    public java.lang.String toString()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType ksType>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType boxed()>
    public final androidx.room.compiler.processing.ksp.KspType withJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope)
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r3;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope r1;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jvmTypeResolver");

        $r2 = new androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: void <init>(androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope,androidx.room.compiler.processing.ksp.KspType)>(r1, r0);

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r2);

        return $r3;
    }

<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>
<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)>
    public final androidx.room.compiler.processing.ksp.KspType makeNullable()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r4;
        androidx.room.compiler.processing.XNullability $r1, $r2, $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r2 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        if $r1 != $r2 goto label1;

        return r0;

     label1:
        $r3 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)>($r3);

        return $r4;
    }

    public final androidx.room.compiler.processing.ksp.KspType makeNonNullable()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r4;
        androidx.room.compiler.processing.XNullability $r1, $r2, $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r2 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        if $r1 != $r2 goto label1;

        return r0;

     label1:
        $r3 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)>($r3);

        return $r4;
    }

    public volatile androidx.room.compiler.processing.XRawType getRawType()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.ksp.KspRawType $r1;
        androidx.room.compiler.processing.XRawType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspRawType getRawType()>();

        $r2 = (androidx.room.compiler.processing.XRawType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XTypeElement getTypeElement()
    {
        androidx.room.compiler.processing.ksp.KspType r0;
        androidx.room.compiler.processing.ksp.KspTypeElement $r1;
        androidx.room.compiler.processing.XTypeElement $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspTypeElement getTypeElement()>();

        $r2 = (androidx.room.compiler.processing.XTypeElement) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XType makeNullable()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType makeNullable()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XType makeNonNullable()
    {
        androidx.room.compiler.processing.ksp.KspType r0, $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType makeNonNullable()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

    public static final androidx.room.compiler.codegen.XTypeName access$getXTypeName(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType $r0;
        androidx.room.compiler.codegen.XTypeName $r1;

        $r0 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        $r1 = specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName getXTypeName()>();

        return $r1;
    }

    public static final androidx.room.compiler.processing.ksp.KspType access$getJvmWildcardType(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType $r0, $r1;

        $r0 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        $r1 = specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType getJvmWildcardType()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$equalityItems$2
<androidx.room.compiler.processing.ksp.KspType$equalityItems$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$equalityItems$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$equalityItems$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$equalityItems$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final com.google.devtools.ksp.symbol.KSType[] invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$equalityItems$2 r0;
        com.google.devtools.ksp.symbol.KSType[] r1;
        androidx.room.compiler.processing.ksp.KspType $r2;
        com.google.devtools.ksp.symbol.KSType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$equalityItems$2;

        r1 = newarray (com.google.devtools.ksp.symbol.KSType)[1];

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspType$equalityItems$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        r1[0] = $r3;

        return r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$equalityItems$2 r0;
        com.google.devtools.ksp.symbol.KSType[] $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$equalityItems$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$equalityItems$2: com.google.devtools.ksp.symbol.KSType[] invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2
<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspType invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1, $r3, $r5;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r2;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()>();

        if $r2 == null goto label1;

        $r3 = r0.<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r5 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType resolveJvmType$room_compiler_processing(androidx.room.compiler.processing.ksp.KspProcessingEnv)>($r4);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$jvmWildcardType$2: androidx.room.compiler.processing.ksp.KspType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$nullability$2$WhenMappings
<androidx.room.compiler.processing.ksp.KspType$nullability$2$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        com.google.devtools.ksp.symbol.Nullability[] $r1;
        int $i0, $i1, $i2;
        com.google.devtools.ksp.symbol.Nullability $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NULLABLE>;

        $i1 = virtualinvoke $r2.<com.google.devtools.ksp.symbol.Nullability: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

     label4:
        $r3 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NOT_NULL>;

        $i2 = virtualinvoke $r3.<com.google.devtools.ksp.symbol.Nullability: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r7 = $r5;

     label7:
        <androidx.room.compiler.processing.ksp.KspType$nullability$2$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.processing.ksp.KspType$nullability$2
<androidx.room.compiler.processing.ksp.KspType$nullability$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$nullability$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$nullability$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$nullability$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.XNullability invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$nullability$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;
        com.google.devtools.ksp.symbol.KSType $r2;
        com.google.devtools.ksp.symbol.Nullability $r3;
        int[] $r4;
        int $i0, $i1;
        androidx.room.compiler.processing.XNullability $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$nullability$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType$nullability$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.Nullability getNullability()>();

        $r4 = <androidx.room.compiler.processing.ksp.KspType$nullability$2$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r3.<com.google.devtools.ksp.symbol.Nullability: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        goto label4;

     label2:
        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        goto label4;

     label3:
        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability UNKNOWN>;

     label4:
        return $r5;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$nullability$2 r0;
        androidx.room.compiler.processing.XNullability $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$nullability$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$nullability$2: androidx.room.compiler.processing.XNullability invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$rawType$2
<androidx.room.compiler.processing.ksp.KspType$rawType$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$rawType$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$rawType$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$rawType$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspRawType invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$rawType$2 r0;
        androidx.room.compiler.processing.ksp.KspRawType $r1;
        androidx.room.compiler.processing.ksp.KspType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$rawType$2;

        $r1 = new androidx.room.compiler.processing.ksp.KspRawType;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspType$rawType$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KspRawType: void <init>(androidx.room.compiler.processing.ksp.KspType)>($r2);

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$rawType$2 r0;
        androidx.room.compiler.processing.ksp.KspRawType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$rawType$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$rawType$2: androidx.room.compiler.processing.ksp.KspRawType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$superTypes$2
<androidx.room.compiler.processing.ksp.KspType$superTypes$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$superTypes$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$superTypes$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$superTypes$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.List invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$superTypes$2 r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1, $r19;
        com.google.devtools.ksp.symbol.KSDeclaration r2;
        java.lang.Iterable $r3;
        androidx.room.compiler.processing.ksp.KspType r4, $r10, $r17;
        java.util.Collection r5, r9;
        java.util.Iterator r6;
        java.lang.Object r7;
        com.google.devtools.ksp.symbol.KSTypeReference r8;
        com.google.devtools.ksp.symbol.KSType $r11, $r16;
        boolean $z3, $z4;
        kotlin.sequences.Sequence $r12;
        java.util.List $r13, $r20;
        java.util.ArrayList $r14;
        int $i0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r15;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$superTypes$2;

        $r10 = r0.<androidx.room.compiler.processing.ksp.KspType$superTypes$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r11 = virtualinvoke $r10.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        r2 = interfaceinvoke $r11.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $z3 = r2 instanceof com.google.devtools.ksp.symbol.KSClassDeclaration;

        if $z3 == 0 goto label1;

        $r19 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r2;

        goto label2;

     label1:
        $r19 = null;

     label2:
        r1 = $r19;

        if r1 == null goto label5;

        $r12 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSClassDeclaration: kotlin.sequences.Sequence getSuperTypes()>();

        if $r12 == null goto label5;

        $r13 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r12);

        if $r13 == null goto label5;

        $r3 = (java.lang.Iterable) $r13;

        r4 = r0.<androidx.room.compiler.processing.ksp.KspType$superTypes$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r14 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r14;

        r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.devtools.ksp.symbol.KSTypeReference) r7;

        r9 = r5;

        $r15 = virtualinvoke r4.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r16 = interfaceinvoke r8.<com.google.devtools.ksp.symbol.KSTypeReference: com.google.devtools.ksp.symbol.KSType resolve()>();

        $r17 = virtualinvoke $r15.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r16, 0);

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        goto label3;

     label4:
        $r20 = (java.util.List) r5;

        goto label6;

     label5:
        $r20 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label6:
        return $r20;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$superTypes$2 r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$superTypes$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$superTypes$2: java.util.List invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$typeArguments$2
<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$typeArguments$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeArguments$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.List invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeArguments$2 r0;
        java.lang.Iterable $r1;
        androidx.room.compiler.processing.ksp.KspType r2, $r8, $r11, $r13, $r23;
        java.util.Collection r3, r7;
        java.util.Iterator r4;
        java.lang.Object r5, $r21;
        int i0, i1, $i2, $i3, i4;
        com.google.devtools.ksp.symbol.KSTypeArgument r6;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r9, $r17;
        com.google.devtools.ksp.processing.Resolver $r10;
        com.google.devtools.ksp.symbol.KSType $r12, $r14, $r18;
        boolean $z3, $z4;
        java.util.List $r15, $r20, $r25;
        java.util.ArrayList $r16;
        com.google.devtools.ksp.symbol.KSDeclaration $r19;
        com.google.devtools.ksp.symbol.KSTypeParameter $r22;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeArguments$2;

        $r8 = r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r9 = virtualinvoke $r8.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r10 = virtualinvoke $r9.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r11 = r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r12 = virtualinvoke $r11.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $z3 = interfaceinvoke $r10.<com.google.devtools.ksp.processing.Resolver: boolean isJavaRawType(com.google.devtools.ksp.symbol.KSType)>($r12);

        if $z3 == 0 goto label1;

        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label5;

     label1:
        $r13 = r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r14 = virtualinvoke $r13.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r15 = interfaceinvoke $r14.<com.google.devtools.ksp.symbol.KSType: java.util.List getArguments()>();

        $r1 = (java.lang.Iterable) $r15;

        r2 = r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r16 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i2);

        r3 = (java.util.Collection) $r16;

        i4 = 0;

        r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i4;

        i4 = i4 + 1;

        i0 = $i3;

        if i0 >= 0 goto label3;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label3:
        r6 = (com.google.devtools.ksp.symbol.KSTypeArgument) r5;

        i1 = i0;

        r7 = r3;

        $r17 = virtualinvoke r2.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r18 = virtualinvoke r2.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r19 = interfaceinvoke $r18.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $r20 = interfaceinvoke $r19.<com.google.devtools.ksp.symbol.KSDeclaration: java.util.List getTypeParameters()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i1);

        $r22 = (com.google.devtools.ksp.symbol.KSTypeParameter) $r21;

        $r23 = virtualinvoke $r17.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.symbol.KSTypeArgument)>($r22, r6);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        goto label2;

     label4:
        $r25 = (java.util.List) r3;

     label5:
        return $r25;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeArguments$2 r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeArguments$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$typeArguments$2: java.util.List invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$typeElement$2
<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$typeElement$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeElement$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspTypeElement invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeElement$2 r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1, r3, $r12, r13;
        androidx.room.compiler.processing.ksp.KspType r2, $r4, $r6, $r7;
        androidx.room.compiler.processing.XType $r5;
        boolean $z1, $z2, $z3;
        com.google.devtools.ksp.symbol.KSType $r8;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r9;
        com.google.devtools.ksp.symbol.KSDeclaration r11;
        androidx.room.compiler.processing.ksp.KspTypeElement $r14;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeElement$2;

        $r4 = r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r5 = (androidx.room.compiler.processing.XType) $r4;

        $z1 = staticinvoke <androidx.room.compiler.processing.XTypeKt: boolean isArray(androidx.room.compiler.processing.XType)>($r5);

        if $z1 == 0 goto label1;

        return null;

     label1:
        $r6 = r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $z2 = $r6 instanceof androidx.room.compiler.processing.ksp.KspPrimitiveType;

        if $z2 == 0 goto label2;

        return null;

     label2:
        $r7 = r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        r11 = interfaceinvoke $r8.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $z3 = r11 instanceof com.google.devtools.ksp.symbol.KSClassDeclaration;

        if $z3 == 0 goto label3;

        $r12 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r11;

        goto label4;

     label3:
        $r12 = null;

     label4:
        r1 = $r12;

        if r1 == null goto label5;

        r13 = r1;

        r2 = r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        r3 = r13;

        $r9 = virtualinvoke r2.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r14 = virtualinvoke $r9.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspTypeElement wrapClassDeclaration(com.google.devtools.ksp.symbol.KSClassDeclaration)>(r3);

        goto label6;

     label5:
        $r14 = null;

     label6:
        return $r14;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeElement$2 r0;
        androidx.room.compiler.processing.ksp.KspTypeElement $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeElement$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$typeElement$2: androidx.room.compiler.processing.ksp.KspTypeElement invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$typeName$2
<androidx.room.compiler.processing.ksp.KspType$typeName$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$typeName$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeName$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$typeName$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final com.squareup.javapoet.TypeName invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeName$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;
        androidx.room.compiler.codegen.XTypeName $r2;
        com.squareup.javapoet.TypeName $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeName$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType$typeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r2 = staticinvoke <androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName access$getXTypeName(androidx.room.compiler.processing.ksp.KspType)>($r1);

        $r3 = virtualinvoke $r2.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        return $r3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$typeName$2 r0;
        com.squareup.javapoet.TypeName $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$typeName$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$typeName$2: com.squareup.javapoet.TypeName invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspType$xTypeName$2
<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspType$xTypeName$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$xTypeName$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.codegen.XTypeName invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$xTypeName$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1, $r2, $r12, $r13, $r14, $r17, $r18;
        androidx.room.compiler.codegen.XTypeName $r3, $r5, $r20;
        com.squareup.kotlinpoet.TypeName $r4, $r16;
        com.squareup.javapoet.TypeName $r6, $r11;
        androidx.room.compiler.codegen.XTypeName$Companion $r7;
        androidx.room.compiler.processing.XNullability $r19;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$xTypeName$2;

        $r7 = <androidx.room.compiler.codegen.XTypeName: androidx.room.compiler.codegen.XTypeName$Companion Companion>;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r2 = staticinvoke <androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType access$getJvmWildcardType(androidx.room.compiler.processing.ksp.KspType)>($r1);

        if $r2 == null goto label1;

        $r5 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName asTypeName()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke $r5.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        $r11 = $r6;

        if $r6 != null goto label2;

     label1:
        $r12 = r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r11 = virtualinvoke $r12.<androidx.room.compiler.processing.ksp.KspType: com.squareup.javapoet.TypeName resolveJTypeName()>();

     label2:
        $r13 = r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r14 = staticinvoke <androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType access$getJvmWildcardType(androidx.room.compiler.processing.ksp.KspType)>($r13);

        if $r14 == null goto label3;

        $r3 = virtualinvoke $r14.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.codegen.XTypeName asTypeName()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        $r16 = $r4;

        if $r4 != null goto label4;

     label3:
        $r17 = r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r16 = virtualinvoke $r17.<androidx.room.compiler.processing.ksp.KspType: com.squareup.kotlinpoet.TypeName resolveKTypeName()>();

     label4:
        $r18 = r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.processing.ksp.KspType this$0>;

        $r19 = virtualinvoke $r18.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r20 = virtualinvoke $r7.<androidx.room.compiler.codegen.XTypeName$Companion: androidx.room.compiler.codegen.XTypeName invoke(com.squareup.javapoet.TypeName,com.squareup.kotlinpoet.TypeName,androidx.room.compiler.processing.XNullability)>($r11, $r16, $r19);

        return $r20;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspType$xTypeName$2 r0;
        androidx.room.compiler.codegen.XTypeName $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspType$xTypeName$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspType$xTypeName$2: androidx.room.compiler.codegen.XTypeName invoke()>();

        return $r1;
    }

