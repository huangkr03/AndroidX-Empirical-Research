androidx.animation.DefaultAnimationClock
<androidx.animation.DefaultAnimationClock: android.view.Choreographer mainChoreographer>
<androidx.animation.DefaultAnimationClock: boolean subscribedToChoreographer>
<androidx.animation.DefaultAnimationClock: android.view.Choreographer$FrameCallback frameCallback>
    public void subscribe(androidx.animation.AnimationClockObserver)
    {
        androidx.animation.DefaultAnimationClock r0;
        androidx.animation.AnimationClockObserver r1;
        boolean $z0;
        android.view.Choreographer$FrameCallback $r2;
        android.view.Choreographer $r3;

        r0 := @this: androidx.animation.DefaultAnimationClock;

        r1 := @parameter0: androidx.animation.AnimationClockObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        $z0 = r0.<androidx.animation.DefaultAnimationClock: boolean subscribedToChoreographer>;

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer mainChoreographer>;

        $r2 = r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer$FrameCallback frameCallback>;

        virtualinvoke $r3.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r2);

        r0.<androidx.animation.DefaultAnimationClock: boolean subscribedToChoreographer> = 1;

     label1:
        specialinvoke r0.<androidx.animation.BaseAnimationClock: void subscribe(androidx.animation.AnimationClockObserver)>(r1);

        return;
    }

    public void dispatchTime$ui_animation_core_release(long)
    {
        androidx.animation.DefaultAnimationClock r0;
        long l0;
        boolean $z0, $z1;
        android.view.Choreographer$FrameCallback $r1;
        android.view.Choreographer $r2;

        r0 := @this: androidx.animation.DefaultAnimationClock;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.animation.BaseAnimationClock: void dispatchTime$ui_animation_core_release(long)>(l0);

        $z0 = virtualinvoke r0.<androidx.animation.DefaultAnimationClock: boolean hasObservers$ui_animation_core_release()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer mainChoreographer>;

        $r1 = r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer$FrameCallback frameCallback>;

        virtualinvoke $r2.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r1);

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<androidx.animation.DefaultAnimationClock: boolean subscribedToChoreographer> = $z1;

        return;
    }

    public void <init>()
    {
        androidx.animation.DefaultAnimationClock r0;
        java.util.concurrent.CountDownLatch r1, $r5;
        kotlin.jvm.internal.Ref$ObjectRef r2, $r6;
        android.os.Looper $r3, $r4, $r9;
        boolean $z0;
        android.view.Choreographer $r7, $r13, $r16;
        android.os.Handler $r8;
        androidx.animation.DefaultAnimationClock$1 $r10;
        java.lang.Runnable $r11;
        java.lang.Object $r12;
        androidx.animation.DefaultAnimationClock$frameCallback$1 $r14;
        android.view.Choreographer$FrameCallback $r15;

        r0 := @this: androidx.animation.DefaultAnimationClock;

        specialinvoke r0.<androidx.animation.BaseAnimationClock: void <init>()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r16 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "Choreographer.getInstance()");

        r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer mainChoreographer> = $r16;

        goto label2;

     label1:
        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r1 = $r5;

        $r6 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r6.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r2 = $r6;

        $r7 = (android.view.Choreographer) null;

        r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r7;

        $r8 = new android.os.Handler;

        $r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r9);

        $r10 = new androidx.animation.DefaultAnimationClock$1;

        specialinvoke $r10.<androidx.animation.DefaultAnimationClock$1: void <init>(kotlin.jvm.internal.Ref$ObjectRef,java.util.concurrent.CountDownLatch)>(r2, r1);

        $r11 = (java.lang.Runnable) $r10;

        virtualinvoke $r8.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r11);

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void await()>();

        $r12 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r13 = (android.view.Choreographer) $r12;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer mainChoreographer> = $r13;

     label2:
        $r14 = new androidx.animation.DefaultAnimationClock$frameCallback$1;

        specialinvoke $r14.<androidx.animation.DefaultAnimationClock$frameCallback$1: void <init>(androidx.animation.DefaultAnimationClock)>(r0);

        $r15 = (android.view.Choreographer$FrameCallback) $r14;

        r0.<androidx.animation.DefaultAnimationClock: android.view.Choreographer$FrameCallback frameCallback> = $r15;

        return;
    }

androidx.animation.DefaultAnimationClock$1
<androidx.animation.DefaultAnimationClock$1: kotlin.jvm.internal.Ref$ObjectRef $choreographer>
<androidx.animation.DefaultAnimationClock$1: java.util.concurrent.CountDownLatch $latch>
    public final void run()
    {
        androidx.animation.DefaultAnimationClock$1 r0;
        java.lang.Throwable r1, $r5;
        kotlin.jvm.internal.Ref$ObjectRef $r2;
        android.view.Choreographer $r3;
        java.util.concurrent.CountDownLatch $r4, $r6;

        r0 := @this: androidx.animation.DefaultAnimationClock$1;

     label1:
        $r2 = r0.<androidx.animation.DefaultAnimationClock$1: kotlin.jvm.internal.Ref$ObjectRef $choreographer>;

        $r3 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        $r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r3;

     label2:
        $r4 = r0.<androidx.animation.DefaultAnimationClock$1: java.util.concurrent.CountDownLatch $latch>;

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        $r6 = r0.<androidx.animation.DefaultAnimationClock$1: java.util.concurrent.CountDownLatch $latch>;

        virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void <init>(kotlin.jvm.internal.Ref$ObjectRef, java.util.concurrent.CountDownLatch)
    {
        androidx.animation.DefaultAnimationClock$1 r0;
        kotlin.jvm.internal.Ref$ObjectRef r1;
        java.util.concurrent.CountDownLatch r2;

        r0 := @this: androidx.animation.DefaultAnimationClock$1;

        r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        r2 := @parameter1: java.util.concurrent.CountDownLatch;

        r0.<androidx.animation.DefaultAnimationClock$1: kotlin.jvm.internal.Ref$ObjectRef $choreographer> = r1;

        r0.<androidx.animation.DefaultAnimationClock$1: java.util.concurrent.CountDownLatch $latch> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.animation.DefaultAnimationClock$frameCallback$1
<androidx.animation.DefaultAnimationClock$frameCallback$1: androidx.animation.DefaultAnimationClock this$0>
    public final void doFrame(long)
    {
        androidx.animation.DefaultAnimationClock$frameCallback$1 r0;
        long l0, $l1, $l2;
        androidx.animation.DefaultAnimationClock $r1;

        r0 := @this: androidx.animation.DefaultAnimationClock$frameCallback$1;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.animation.DefaultAnimationClock$frameCallback$1: androidx.animation.DefaultAnimationClock this$0>;

        $l1 = (long) 1000000;

        $l2 = l0 / $l1;

        virtualinvoke $r1.<androidx.animation.DefaultAnimationClock: void dispatchTime$ui_animation_core_release(long)>($l2);

        return;
    }

    void <init>(androidx.animation.DefaultAnimationClock)
    {
        androidx.animation.DefaultAnimationClock$frameCallback$1 r0;
        androidx.animation.DefaultAnimationClock r1;

        r0 := @this: androidx.animation.DefaultAnimationClock$frameCallback$1;

        r1 := @parameter0: androidx.animation.DefaultAnimationClock;

        r0.<androidx.animation.DefaultAnimationClock$frameCallback$1: androidx.animation.DefaultAnimationClock this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

