androidx.camera.core.ProcessingSurface
<androidx.camera.core.ProcessingSurface: java.lang.String TAG>
<androidx.camera.core.ProcessingSurface: java.lang.Object mLock>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mTransformedListener>
<androidx.camera.core.ProcessingSurface: boolean mReleased>
<androidx.camera.core.ProcessingSurface: android.util.Size mResolution>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>
<androidx.camera.core.ProcessingSurface: android.view.Surface mInputSurface>
<androidx.camera.core.ProcessingSurface: android.os.Handler mImageReaderHandler>
<androidx.camera.core.ProcessingSurface: int MAX_IMAGES>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureStage mCaptureStage>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback>
<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.DeferrableSurface mOutputDeferrableSurface>
<androidx.camera.core.ProcessingSurface: java.lang.String mTagBundleKey>
    void <init>(int, int, int, android.os.Handler, androidx.camera.core.impl.CaptureStage, androidx.camera.core.impl.CaptureProcessor, androidx.camera.core.impl.DeferrableSurface, java.lang.String)
    {
        androidx.camera.core.ProcessingSurface r0;
        int i0, i1, i2;
        android.os.Handler r1, $r11, r34;
        androidx.camera.core.impl.CaptureStage r2;
        androidx.camera.core.impl.CaptureProcessor r3, $r20;
        androidx.camera.core.impl.DeferrableSurface r4;
        java.lang.String r5;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r8, $r13;
        androidx.camera.core.MetadataImageReader $r14, $r15, $r17, r35;
        android.view.Surface $r16;
        androidx.camera.core.impl.CameraCaptureCallback $r18;
        android.util.Size $r19, r30, r32;
        com.google.common.util.concurrent.ListenableFuture $r21, $r24;
        java.util.concurrent.Executor $r23, $r26, r37;
        java.lang.Runnable $r25;
        android.os.Looper r28;
        java.util.concurrent.ScheduledExecutorService r29;
        java.lang.Object r31;
        java.lang.IllegalStateException r33;
        androidx.camera.core.ProcessingSurface$1 r36;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.os.Handler;

        r2 := @parameter4: androidx.camera.core.impl.CaptureStage;

        r3 := @parameter5: androidx.camera.core.impl.CaptureProcessor;

        r4 := @parameter6: androidx.camera.core.impl.DeferrableSurface;

        r5 := @parameter7: java.lang.String;

        r30 = new android.util.Size;

        specialinvoke r30.<android.util.Size: void <init>(int,int)>(i0, i1);

        specialinvoke r0.<androidx.camera.core.impl.DeferrableSurface: void <init>(android.util.Size,int)>(r30, i2);

        r31 = new java.lang.Object;

        specialinvoke r31.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ProcessingSurface: java.lang.Object mLock> = r31;

        $r8 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener (androidx.camera.core.ProcessingSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ProcessingSurface: void lambda$new$0(androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mTransformedListener> = $r8;

        r0.<androidx.camera.core.ProcessingSurface: boolean mReleased> = 0;

        r32 = new android.util.Size;

        specialinvoke r32.<android.util.Size: void <init>(int,int)>(i0, i1);

        r0.<androidx.camera.core.ProcessingSurface: android.util.Size mResolution> = r32;

        if r1 == null goto label1;

        r0.<androidx.camera.core.ProcessingSurface: android.os.Handler mImageReaderHandler> = r1;

        goto label3;

     label1:
        r28 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r28 != null goto label2;

        r33 = new java.lang.IllegalStateException;

        specialinvoke r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Creating a ProcessingSurface requires a non-null Handler, or be created  on a thread with a Looper.");

        throw r33;

     label2:
        r34 = new android.os.Handler;

        specialinvoke r34.<android.os.Handler: void <init>(android.os.Looper)>(r28);

        r0.<androidx.camera.core.ProcessingSurface: android.os.Handler mImageReaderHandler> = r34;

     label3:
        $r11 = r0.<androidx.camera.core.ProcessingSurface: android.os.Handler mImageReaderHandler>;

        r29 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService newHandlerExecutor(android.os.Handler)>($r11);

        r35 = new androidx.camera.core.MetadataImageReader;

        specialinvoke r35.<androidx.camera.core.MetadataImageReader: void <init>(int,int,int,int)>(i0, i1, i2, 2);

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader> = r35;

        $r14 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>;

        $r13 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mTransformedListener>;

        r37 = (java.util.concurrent.Executor) r29;

        virtualinvoke $r14.<androidx.camera.core.MetadataImageReader: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r13, r37);

        $r15 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>;

        $r16 = virtualinvoke $r15.<androidx.camera.core.MetadataImageReader: android.view.Surface getSurface()>();

        r0.<androidx.camera.core.ProcessingSurface: android.view.Surface mInputSurface> = $r16;

        $r17 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>;

        $r18 = virtualinvoke $r17.<androidx.camera.core.MetadataImageReader: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback> = $r18;

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor> = r3;

        $r20 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        $r19 = r0.<androidx.camera.core.ProcessingSurface: android.util.Size mResolution>;

        interfaceinvoke $r20.<androidx.camera.core.impl.CaptureProcessor: void onResolutionUpdate(android.util.Size)>($r19);

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureStage mCaptureStage> = r2;

        r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.DeferrableSurface mOutputDeferrableSurface> = r4;

        r0.<androidx.camera.core.ProcessingSurface: java.lang.String mTagBundleKey> = r5;

        $r21 = virtualinvoke r4.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        r36 = new androidx.camera.core.ProcessingSurface$1;

        specialinvoke r36.<androidx.camera.core.ProcessingSurface$1: void <init>(androidx.camera.core.ProcessingSurface)>(r0);

        $r23 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r21, r36, $r23);

        $r24 = virtualinvoke r0.<androidx.camera.core.ProcessingSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r25 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ProcessingSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ProcessingSurface: void release()>, methodtype: void __METHODTYPE__());

        $r26 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r24.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r25, $r26);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture provideSurface()
    {
        androidx.camera.core.ProcessingSurface r0;
        androidx.camera.core.impl.DeferrableSurface $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        androidx.camera.core.impl.utils.futures.FutureChain $r3, $r6;
        androidx.arch.core.util.Function $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        $r1 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.DeferrableSurface mOutputDeferrableSurface>;

        $r2 = virtualinvoke $r1.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r2);

        $r4 = dynamicinvoke "apply" <androidx.arch.core.util.Function (androidx.camera.core.ProcessingSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ProcessingSurface: android.view.Surface lambda$provideSurface$1(android.view.Surface)>, methodtype: android.view.Surface __METHODTYPE__(android.view.Surface));

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r6 = virtualinvoke $r3.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transform(androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r4, $r5);

        return $r6;
    }

    androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()
    {
        androidx.camera.core.ProcessingSurface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        androidx.camera.core.impl.CameraCaptureCallback $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        $r3 = r0.<androidx.camera.core.ProcessingSurface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<androidx.camera.core.ProcessingSurface: boolean mReleased>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ProcessingSurface already released!");

        throw $r5;

     label2:
        $r4 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback>;

        exitmonitor r1;

     label3:
        return $r4;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void release()
    {
        androidx.camera.core.ProcessingSurface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        androidx.camera.core.MetadataImageReader $r4, $r5;
        android.view.Surface $r6;
        androidx.camera.core.impl.DeferrableSurface $r7;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        $r3 = r0.<androidx.camera.core.ProcessingSurface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<androidx.camera.core.ProcessingSurface: boolean mReleased>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>;

        virtualinvoke $r4.<androidx.camera.core.MetadataImageReader: void clearOnImageAvailableListener()>();

        $r5 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.MetadataImageReader mInputImageReader>;

        virtualinvoke $r5.<androidx.camera.core.MetadataImageReader: void close()>();

        $r6 = r0.<androidx.camera.core.ProcessingSurface: android.view.Surface mInputSurface>;

        virtualinvoke $r6.<android.view.Surface: void release()>();

        $r7 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.DeferrableSurface mOutputDeferrableSurface>;

        virtualinvoke $r7.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        r0.<androidx.camera.core.ProcessingSurface: boolean mReleased> = 1;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void imageIncoming(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.core.ProcessingSurface r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        java.lang.Integer r2;
        androidx.camera.core.impl.SingleImageProxyBundle r3, $r8;
        boolean $z0;
        androidx.camera.core.impl.TagBundle $r4;
        java.lang.String $r5, $r9, $r14;
        java.lang.Object $r6;
        androidx.camera.core.impl.CaptureStage $r7;
        int $i0, $i1;
        androidx.camera.core.impl.CaptureProcessor $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.Throwable $r15, r17;
        androidx.camera.core.ImageProxy r16;
        androidx.camera.core.ImageInfo r18;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        r1 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

        $z0 = r0.<androidx.camera.core.ProcessingSurface: boolean mReleased>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r16 = null;

     label02:
        r16 = interfaceinvoke r1.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireNextImage()>();

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        r17 = $r15;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessingSurfaceTextur", "Failed to acquire next image.", r17);

     label05:
        if r16 != null goto label06;

        return;

     label06:
        r18 = interfaceinvoke r16.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        if r18 != null goto label07;

        interfaceinvoke r16.<androidx.camera.core.ImageProxy: void close()>();

        return;

     label07:
        $r4 = interfaceinvoke r18.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r5 = r0.<androidx.camera.core.ProcessingSurface: java.lang.String mTagBundleKey>;

        $r6 = virtualinvoke $r4.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>($r5);

        r2 = (java.lang.Integer) $r6;

        if r2 != null goto label08;

        interfaceinvoke r16.<androidx.camera.core.ImageProxy: void close()>();

        return;

     label08:
        $r7 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureStage mCaptureStage>;

        $i0 = interfaceinvoke $r7.<androidx.camera.core.impl.CaptureStage: int getId()>();

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i0 == $i1 goto label09;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImageProxyBundle does not contain this id: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ProcessingSurfaceTextur", $r14);

        interfaceinvoke r16.<androidx.camera.core.ImageProxy: void close()>();

        goto label11;

     label09:
        $r8 = new androidx.camera.core.impl.SingleImageProxyBundle;

        $r9 = r0.<androidx.camera.core.ProcessingSurface: java.lang.String mTagBundleKey>;

        specialinvoke $r8.<androidx.camera.core.impl.SingleImageProxyBundle: void <init>(androidx.camera.core.ImageProxy,java.lang.String)>(r16, $r9);

        r3 = $r8;

        virtualinvoke r0.<androidx.camera.core.ProcessingSurface: void incrementUseCount()>();

        goto label10;

     label10:
        $r10 = r0.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        interfaceinvoke $r10.<androidx.camera.core.impl.CaptureProcessor: void process(androidx.camera.core.impl.ImageProxyBundle)>(r3);

        virtualinvoke r3.<androidx.camera.core.impl.SingleImageProxyBundle: void close()>();

        virtualinvoke r0.<androidx.camera.core.ProcessingSurface: void decrementUseCount()>();

     label11:
        return;

        catch java.lang.IllegalStateException from label02 to label03 with label04;
    }

    private android.view.Surface lambda$provideSurface$1(android.view.Surface)
    {
        androidx.camera.core.ProcessingSurface r0;
        android.view.Surface r1, $r2;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<androidx.camera.core.ProcessingSurface: android.view.Surface mInputSurface>;

        return $r2;
    }

    private void lambda$new$0(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.core.ProcessingSurface r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: androidx.camera.core.ProcessingSurface;

        r1 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

        $r4 = r0.<androidx.camera.core.ProcessingSurface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        virtualinvoke r0.<androidx.camera.core.ProcessingSurface: void imageIncoming(androidx.camera.core.impl.ImageReaderProxy)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

androidx.camera.core.ProcessingSurface$1
<androidx.camera.core.ProcessingSurface$1: androidx.camera.core.ProcessingSurface this$0>
    void <init>(androidx.camera.core.ProcessingSurface)
    {
        androidx.camera.core.ProcessingSurface$1 r0;
        androidx.camera.core.ProcessingSurface r1;

        r0 := @this: androidx.camera.core.ProcessingSurface$1;

        r1 := @parameter0: androidx.camera.core.ProcessingSurface;

        r0.<androidx.camera.core.ProcessingSurface$1: androidx.camera.core.ProcessingSurface this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(android.view.Surface)
    {
        androidx.camera.core.ProcessingSurface$1 r0;
        android.view.Surface r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r8;
        androidx.camera.core.ProcessingSurface $r4, $r6;
        androidx.camera.core.impl.CaptureProcessor $r7;

        r0 := @this: androidx.camera.core.ProcessingSurface$1;

        r1 := @parameter0: android.view.Surface;

        $r4 = r0.<androidx.camera.core.ProcessingSurface$1: androidx.camera.core.ProcessingSurface this$0>;

        $r5 = $r4.<androidx.camera.core.ProcessingSurface: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.core.ProcessingSurface$1: androidx.camera.core.ProcessingSurface this$0>;

        $r7 = $r6.<androidx.camera.core.ProcessingSurface: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        interfaceinvoke $r7.<androidx.camera.core.impl.CaptureProcessor: void onOutputSurface(android.view.Surface,int)>(r1, 1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.core.ProcessingSurface$1 r0;
        java.lang.Throwable r1;

        r0 := @this: androidx.camera.core.ProcessingSurface$1;

        r1 := @parameter0: java.lang.Throwable;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessingSurfaceTextur", "Failed to extract Listenable<Surface>.", r1);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.core.ProcessingSurface$1 r0;
        java.lang.Object r1;
        android.view.Surface $r2;

        r0 := @this: androidx.camera.core.ProcessingSurface$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.Surface) r1;

        virtualinvoke r0.<androidx.camera.core.ProcessingSurface$1: void onSuccess(android.view.Surface)>($r2);

        return;
    }

