kotlin.jvm.internal.Reflection
<kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY>
<kotlin.jvm.internal.Reflection: java.lang.String REFLECTION_NOT_AVAILABLE>
<kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>
    static void <clinit>()
    {
        kotlin.jvm.internal.ReflectionFactory $r0, $r3;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r4, $r5, $r6, $r7;
        kotlin.reflect.KClass[] $r8;

        $r0 = null;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.reflect.jvm.internal.ReflectionFactoryImpl");

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        $r3 = (kotlin.jvm.internal.ReflectionFactory) $r2;

     label3:
        $r0 = $r3;

        goto label8;

     label4:
        $r4 := @caughtexception;

        goto label8;

     label5:
        $r5 := @caughtexception;

        goto label8;

     label6:
        $r6 := @caughtexception;

        goto label8;

     label7:
        $r7 := @caughtexception;

     label8:
        if $r0 != null goto label9;

        $r0 = new kotlin.jvm.internal.ReflectionFactory;

        specialinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: void <init>()>();

     label9:
        <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory> = $r0;

        $r8 = newarray (kotlin.reflect.KClass)[0];

        <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY> = $r8;

        return;

        catch java.lang.ClassCastException from label1 to label3 with label7;
        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public void <init>()
    {
        kotlin.jvm.internal.Reflection $r0;

        $r0 := @this: kotlin.jvm.internal.Reflection;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static kotlin.reflect.KClass createKotlinClass(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KClass $r1;
        java.lang.Class $r2;

        $r2 := @parameter0: java.lang.Class;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass createKotlinClass(java.lang.Class)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KClass createKotlinClass(java.lang.Class, java.lang.String)
    {
        java.lang.String $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;
        kotlin.reflect.KClass $r2;
        java.lang.Class $r3;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.String;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass createKotlinClass(java.lang.Class,java.lang.String)>($r3, $r0);

        return $r2;
    }

    public static kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KFunction $r1;
        kotlin.jvm.internal.FunctionReference $r2;

        $r2 := @parameter0: kotlin.jvm.internal.FunctionReference;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KClass $r1;
        java.lang.Class $r2;

        $r2 := @parameter0: java.lang.Class;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class, java.lang.String)
    {
        java.lang.String $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;
        kotlin.reflect.KClass $r2;
        java.lang.Class $r3;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.String;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class,java.lang.String)>($r3, $r0);

        return $r2;
    }

    public static kotlin.reflect.KClass[] getOrCreateKotlinClasses(java.lang.Class[])
    {
        int $i0, $i1;
        kotlin.reflect.KClass[] $r0;
        kotlin.reflect.KClass $r1;
        java.lang.Class[] $r2;
        java.lang.Class $r3;

        $r2 := @parameter0: java.lang.Class[];

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY>;

        return $r0;

     label1:
        $r0 = newarray (kotlin.reflect.KClass)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r3 = $r2[$i1];

        $r1 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r3);

        $r0[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KDeclarationContainer $r1;
        java.lang.Class $r2;

        $r2 := @parameter0: java.lang.Class;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)>($r2, "");

        return $r1;
    }

    public static kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class, java.lang.String)
    {
        java.lang.String $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;
        kotlin.reflect.KDeclarationContainer $r2;
        java.lang.Class $r3;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.String;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)>($r3, $r0);

        return $r2;
    }

    public static kotlin.reflect.KType mutableCollectionType(kotlin.reflect.KType)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KType $r1;

        $r1 := @parameter0: kotlin.reflect.KType;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType mutableCollectionType(kotlin.reflect.KType)>($r1);

        return $r1;
    }

    public static kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KMutableProperty0 $r1;
        kotlin.jvm.internal.MutablePropertyReference0 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.MutablePropertyReference0;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KMutableProperty1 $r1;
        kotlin.jvm.internal.MutablePropertyReference1 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.MutablePropertyReference1;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KMutableProperty2 $r1;
        kotlin.jvm.internal.MutablePropertyReference2 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.MutablePropertyReference2;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KType nothingType(kotlin.reflect.KType)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KType $r1;

        $r1 := @parameter0: kotlin.reflect.KType;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType nothingType(kotlin.reflect.KType)>($r1);

        return $r1;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KClass $r2;
        java.util.List $r3;
        kotlin.reflect.KType $r4;

        $r1 := @parameter0: java.lang.Class;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r2, $r3, 1);

        return $r4;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KTypeProjection $r2;
        kotlin.reflect.KClass $r3;
        java.util.List $r4;
        kotlin.reflect.KType $r5;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: kotlin.reflect.KTypeProjection;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 1);

        return $r5;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection, kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KTypeProjection $r2, $r3;
        kotlin.reflect.KClass $r4;
        kotlin.reflect.KTypeProjection[] $r5;
        java.util.List $r6;
        kotlin.reflect.KType $r7;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: kotlin.reflect.KTypeProjection;

        $r3 := @parameter2: kotlin.reflect.KTypeProjection;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r5 = newarray (kotlin.reflect.KTypeProjection)[2];

        $r5[0] = $r2;

        $r5[1] = $r3;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r4, $r6, 1);

        return $r7;
    }

    public static transient kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection[])
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KTypeProjection[] $r2;
        kotlin.reflect.KClass $r3;
        java.util.List $r4;
        kotlin.reflect.KType $r5;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: kotlin.reflect.KTypeProjection[];

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r2);

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 1);

        return $r5;
    }

    public static kotlin.reflect.KType nullableTypeOf(kotlin.reflect.KClassifier)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KClassifier $r1;
        java.util.List $r2;
        kotlin.reflect.KType $r3;

        $r1 := @parameter0: kotlin.reflect.KClassifier;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r1, $r2, 1);

        return $r3;
    }

    public static kotlin.reflect.KType platformType(kotlin.reflect.KType, kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0, $r2;
        kotlin.jvm.internal.ReflectionFactory $r1;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r0 := @parameter1: kotlin.reflect.KType;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType platformType(kotlin.reflect.KType,kotlin.reflect.KType)>($r2, $r0);

        return $r2;
    }

    public static kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KProperty0 $r1;
        kotlin.jvm.internal.PropertyReference0 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.PropertyReference0;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KProperty1 $r1;
        kotlin.jvm.internal.PropertyReference1 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.PropertyReference1;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KProperty2 $r1;
        kotlin.jvm.internal.PropertyReference2 $r2;

        $r2 := @parameter0: kotlin.jvm.internal.PropertyReference2;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)>($r2);

        return $r1;
    }

    public static java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.String $r1;
        kotlin.jvm.internal.FunctionBase $r2;

        $r2 := @parameter0: kotlin.jvm.internal.FunctionBase;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)>($r2);

        return $r1;
    }

    public static java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.String $r1;
        kotlin.jvm.internal.Lambda $r2;

        $r2 := @parameter0: kotlin.jvm.internal.Lambda;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)>($r2);

        return $r1;
    }

    public static void setUpperBounds(kotlin.reflect.KTypeParameter, kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeParameter $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;
        java.util.List $r2;
        kotlin.reflect.KType $r3;

        $r0 := @parameter0: kotlin.reflect.KTypeParameter;

        $r3 := @parameter1: kotlin.reflect.KType;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: void setUpperBounds(kotlin.reflect.KTypeParameter,java.util.List)>($r0, $r2);

        return;
    }

    public static transient void setUpperBounds(kotlin.reflect.KTypeParameter, kotlin.reflect.KType[])
    {
        kotlin.reflect.KTypeParameter $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;
        java.util.List $r2;
        kotlin.reflect.KType[] $r3;

        $r0 := @parameter0: kotlin.reflect.KTypeParameter;

        $r3 := @parameter1: kotlin.reflect.KType[];

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r3);

        virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: void setUpperBounds(kotlin.reflect.KTypeParameter,java.util.List)>($r0, $r2);

        return;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KClass $r2;
        java.util.List $r3;
        kotlin.reflect.KType $r4;

        $r1 := @parameter0: java.lang.Class;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r2, $r3, 0);

        return $r4;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KTypeProjection $r2;
        kotlin.reflect.KClass $r3;
        java.util.List $r4;
        kotlin.reflect.KType $r5;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: kotlin.reflect.KTypeProjection;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 0);

        return $r5;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KTypeProjection $r0, $r3;
        kotlin.jvm.internal.ReflectionFactory $r1;
        java.lang.Class $r2;
        kotlin.reflect.KClass $r4;
        kotlin.reflect.KTypeProjection[] $r5;
        java.util.List $r6;
        kotlin.reflect.KType $r7;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: kotlin.reflect.KTypeProjection;

        $r0 := @parameter2: kotlin.reflect.KTypeProjection;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r2);

        $r5 = newarray (kotlin.reflect.KTypeProjection)[2];

        $r5[0] = $r3;

        $r5[1] = $r0;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r4, $r6, 0);

        return $r7;
    }

    public static transient kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection[])
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.reflect.KTypeProjection[] $r2;
        kotlin.reflect.KClass $r3;
        java.util.List $r4;
        kotlin.reflect.KType $r5;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: kotlin.reflect.KTypeProjection[];

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r2);

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 0);

        return $r5;
    }

    public static kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KClassifier $r1;
        java.util.List $r2;
        kotlin.reflect.KType $r3;

        $r1 := @parameter0: kotlin.reflect.KClassifier;

        $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r1, $r2, 0);

        return $r3;
    }

    public static kotlin.reflect.KTypeParameter typeParameter(java.lang.Object, java.lang.String, kotlin.reflect.KVariance, boolean)
    {
        java.lang.String $r0;
        kotlin.reflect.KVariance $r1;
        boolean $z0;
        kotlin.jvm.internal.ReflectionFactory $r2;
        kotlin.reflect.KTypeParameter $r3;
        java.lang.Object $r4;

        $r4 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: kotlin.reflect.KVariance;

        $z0 := @parameter3: boolean;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KTypeParameter typeParameter(java.lang.Object,java.lang.String,kotlin.reflect.KVariance,boolean)>($r4, $r0, $r1, $z0);

        return $r3;
    }

