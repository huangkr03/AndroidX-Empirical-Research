kotlin.math.MathKt__MathJVMKt
    public void <init>()
    {
        kotlin.math.MathKt__MathJVMKt $r0;

        $r0 := @this: kotlin.math.MathKt__MathJVMKt;

        specialinvoke $r0.<kotlin.math.MathKt__MathHKt: void <init>()>();

        return;
    }

    private static final double IEEErem(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double IEEEremainder(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float IEEErem(float, float)
    {
        float $f0, $f1;
        double $d0, $d1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $d0 = (double) $f1;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double IEEEremainder(double,double)>($d0, $d1);

        $f1 = (float) $d0;

        return $f1;
    }

    private static final double abs(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        return $d0;
    }

    private static final float abs(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f0;
    }

    private static final int abs(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        return $i0;
    }

    private static final long abs(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <java.lang.Math: long abs(long)>($l0);

        return $l0;
    }

    private static final double acos(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double acos(double)>($d0);

        return $d0;
    }

    private static final float acos(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double acos(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final double acosh(double)
    {
        double $d0, $d1, $d2;
        byte $b0;

        $d1 := @parameter0: double;

        $b0 = $d1 cmpg 1.0;

        if $b0 >= 0 goto label1;

        $d1 = #NaN;

        goto label5;

     label1:
        $d0 = <kotlin.math.Constants: double upper_taylor_2_bound>;

        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label2;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d0 = <kotlin.math.Constants: double LN2>;

        $d1 = $d1 + $d0;

        goto label5;

     label2:
        $d2 = $d1 + -1.0;

        $d0 = <kotlin.math.Constants: double taylor_n_bound>;

        $b0 = $d2 cmpl $d0;

        if $b0 < 0 goto label3;

        $d0 = $d1 * $d1;

        $d0 = $d0 + -1.0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d1 = $d1 + $d0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d1);

        goto label5;

     label3:
        $d1 = $d1 + -1.0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $d0 = $d1;

        $d2 = <kotlin.math.Constants: double taylor_2_bound>;

        $b0 = $d1 cmpl $d2;

        if $b0 < 0 goto label4;

        $d0 = $d1 * $d1;

        $d0 = $d0 * $d1;

        $d0 = $d0 / 12.0;

        $d0 = $d1 - $d0;

        goto label4;

     label4:
        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        $d1 = $d0 * $d1;

     label5:
        return $d1;
    }

    private static final float acosh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <kotlin.math.MathKt: double acosh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double asin(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double asin(double)>($d0);

        return $d0;
    }

    private static final float asin(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double asin(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final double asinh(double)
    {
        double $d0, $d1, $d2;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 = <kotlin.math.Constants: double taylor_n_bound>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label3;

        $d1 = <kotlin.math.Constants: double upper_taylor_n_bound>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

        $d1 = <kotlin.math.Constants: double upper_taylor_2_bound>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d1 = <kotlin.math.Constants: double LN2>;

        $d0 = $d0 + $d1;

        return $d0;

     label1:
        $d1 = $d0 + $d0;

        $d0 = $d0 + $d0;

        $d0 = 1.0 / $d0;

        $d0 = $d1 + $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        return $d0;

     label2:
        $d1 = $d0 * $d0;

        $d1 = $d1 + 1.0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        return $d0;

     label3:
        $d1 = <kotlin.math.Constants: double taylor_n_bound>;

        $d1 = neg $d1;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label4;

        $d0 = neg $d0;

        $d0 = staticinvoke <kotlin.math.MathKt: double asinh(double)>($d0);

        $d0 = neg $d0;

        return $d0;

     label4:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = <kotlin.math.Constants: double taylor_2_bound>;

        $b0 = $d1 cmpl $d2;

        if $b0 < 0 goto label5;

        $d1 = $d0 * $d0;

        $d1 = $d1 * $d0;

        $d1 = $d1 / 6.0;

        $d0 = $d0 - $d1;

        goto label5;

     label5:
        return $d0;
    }

    private static final float asinh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <kotlin.math.MathKt: double asinh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double atan(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        return $d0;
    }

    private static final float atan(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double atan2(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float atan2(float, float)
    {
        float $f0, $f1;
        double $d0, $d1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $d0 = (double) $f1;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f1 = (float) $d0;

        return $f1;
    }

    public static final double atanh(double)
    {
        double $d0, $d1, $d2;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = <kotlin.math.Constants: double taylor_n_bound>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = <kotlin.math.Constants: double taylor_2_bound>;

        $b0 = $d1 cmpl $d2;

        if $b0 <= 0 goto label2;

        $d1 = $d0 * $d0;

        $d1 = $d1 * $d0;

        $d1 = $d1 / 3.0;

        $d0 = $d0 + $d1;

        return $d0;

     label1:
        $d1 = $d0 + 1.0;

        $d0 = 1.0 - $d0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = $d0 / 2.0;

     label2:
        return $d0;
    }

    private static final float atanh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <kotlin.math.MathKt: double atanh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double ceil(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        return $d0;
    }

    private static final float ceil(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double cos(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        return $d0;
    }

    private static final float cos(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double cosh(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double cosh(double)>($d0);

        return $d0;
    }

    private static final float cosh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double cosh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double exp(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        return $d0;
    }

    private static final float exp(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double expm1(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double expm1(double)>($d0);

        return $d0;
    }

    private static final float expm1(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double expm1(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double floor(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        return $d0;
    }

    private static final float floor(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double getAbsoluteValue(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        return $d0;
    }

    private static final float getAbsoluteValue(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f0;
    }

    private static final int getAbsoluteValue(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        return $i0;
    }

    private static final long getAbsoluteValue(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <java.lang.Math: long abs(long)>($l0);

        return $l0;
    }

    public static void getAbsoluteValue$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getAbsoluteValue$annotations(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        return;
    }

    public static void getAbsoluteValue$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getAbsoluteValue$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    private static final double getSign(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        return $d0;
    }

    private static final float getSign(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float signum(float)>($f0);

        return $f0;
    }

    public static final int getSign(int)
    {
        int $i0;
        byte $b1;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $b1 = -1;

        goto label3;

     label1:
        if $i0 <= 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        return $b1;
    }

    public static final int getSign(long)
    {
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $b1 = -1;

        goto label3;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        return $b1;
    }

    public static void getSign$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getSign$annotations(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        return;
    }

    public static void getSign$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getSign$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    private static final double getUlp(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double ulp(double)>($d0);

        return $d0;
    }

    private static final float getUlp(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float ulp(float)>($f0);

        return $f0;
    }

    public static void getUlp$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getUlp$annotations(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        return;
    }

    private static final double hypot(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float hypot(float, float)
    {
        float $f0, $f1;
        double $d0, $d1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $d0 = (double) $f1;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double hypot(double,double)>($d0, $d1);

        $f1 = (float) $d0;

        return $f1;
    }

    private static final double ln(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        return $d0;
    }

    private static final float ln(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double ln1p(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double log1p(double)>($d0);

        return $d0;
    }

    private static final float ln1p(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double log1p(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final double log(double, double)
    {
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d1 cmpg 0.0;

        if $b0 <= 0 goto label4;

        $b0 = $d1 cmpg 1.0;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;

     label4:
        return #NaN;
    }

    public static final float log(float, float)
    {
        float $f0, $f1;
        byte $b0;
        boolean $z0;
        double $d0, $d1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 <= 0 goto label4;

        $b0 = $f0 cmpg 1.0F;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $d0 = (double) $f1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d1 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d0 = $d0 / $d1;

        $f1 = (float) $d0;

        return $f1;

     label4:
        return #NaNF;
    }

    private static final double log10(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        return $d0;
    }

    private static final float log10(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final double log2(double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <kotlin.math.Constants: double LN2>;

        $d0 = $d1 / $d0;

        return $d0;
    }

    public static final float log2(float)
    {
        double $d0, $d1;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <kotlin.math.Constants: double LN2>;

        $d0 = $d1 / $d0;

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double max(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float max(float, float)
    {
        float $f0, $f1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f0);

        return $f1;
    }

    private static final int max(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        return $i1;
    }

    private static final long max(long, long)
    {
        long $l0, $l1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l0);

        return $l1;
    }

    private static final double min(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float min(float, float)
    {
        float $f0, $f1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f0);

        return $f1;
    }

    private static final int min(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        return $i1;
    }

    private static final long min(long, long)
    {
        long $l0, $l1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        return $l1;
    }

    private static final double nextDown(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double nextAfter(double,double)>($d0, #-Infinity);

        return $d0;
    }

    private static final float nextDown(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float nextAfter(float,double)>($f0, #-Infinity);

        return $f0;
    }

    private static final double nextTowards(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double nextAfter(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float nextTowards(float, float)
    {
        float $f0, $f1;
        double $d0;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $d0 = (double) $f0;

        $f1 = staticinvoke <java.lang.Math: float nextAfter(float,double)>($f1, $d0);

        return $f1;
    }

    private static final double nextUp(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double nextUp(double)>($d0);

        return $d0;
    }

    private static final float nextUp(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float nextUp(float)>($f0);

        return $f0;
    }

    private static final double pow(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        return $d1;
    }

    private static final double pow(double, int)
    {
        int $i0;
        double $d0, $d1;

        $d1 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float pow(float, float)
    {
        float $f0, $f1;
        double $d0, $d1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $d0 = (double) $f1;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $f1 = (float) $d0;

        return $f1;
    }

    private static final float pow(float, int)
    {
        int $i0;
        double $d0, $d1;
        float $f0;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $d0 = (double) $f0;

        $d1 = (double) $i0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double round(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        return $d0;
    }

    private static final float round(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final int roundToInt(double)
    {
        double $d0;
        boolean $z0;
        byte $b0;
        int $i1;
        long $l2;
        java.lang.IllegalArgumentException $r0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label4;

        $b0 = $d0 cmpl 2.147483647E9;

        if $b0 <= 0 goto label1;

        $i1 = 2147483647;

        goto label3;

     label1:
        $b0 = $d0 cmpg -2.147483648E9;

        if $b0 >= 0 goto label2;

        $i1 = -2147483648;

        goto label3;

     label2:
        $l2 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i1 = (int) $l2;

     label3:
        return $i1;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot round NaN value.");

        throw $r0;
    }

    public static final int roundToInt(float)
    {
        float $f0;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r0;

        $f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot round NaN value.");

        throw $r0;
    }

    public static final long roundToLong(double)
    {
        double $d0;
        boolean $z0;
        long $l0;
        java.lang.IllegalArgumentException $r0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        return $l0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot round NaN value.");

        throw $r0;
    }

    public static final long roundToLong(float)
    {
        float $f0;
        long $l0;
        double $d0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $l0 = staticinvoke <kotlin.math.MathKt: long roundToLong(double)>($d0);

        return $l0;
    }

    private static final double sign(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        return $d0;
    }

    private static final float sign(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float signum(float)>($f0);

        return $f0;
    }

    private static final double sin(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        return $d0;
    }

    private static final float sin(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double sinh(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double sinh(double)>($d0);

        return $d0;
    }

    private static final float sinh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sinh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double sqrt(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }

    private static final float sqrt(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double tan(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double tan(double)>($d0);

        return $d0;
    }

    private static final float tan(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double tan(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private static final double tanh(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double tanh(double)>($d0);

        return $d0;
    }

    private static final float tanh(float)
    {
        double $d0;
        float $f0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double tanh(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static final double truncate(double)
    {
        byte $b0;
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        return $d0;

     label2:
        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

     label3:
        return $d0;
    }

    public static final float truncate(float)
    {
        float $f0;
        boolean $z0;
        byte $b0;
        double $d0;

        $f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 != 0 goto label2;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f0 = (float) $d0;

        return $f0;

     label1:
        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f0 = (float) $d0;

     label2:
        return $f0;
    }

    private static final double withSign(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double copySign(double,double)>($d1, $d0);

        return $d1;
    }

    private static final double withSign(double, int)
    {
        int $i0;
        double $d0, $d1;

        $d1 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double copySign(double,double)>($d1, $d0);

        return $d1;
    }

    private static final float withSign(float, float)
    {
        float $f0, $f1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float copySign(float,float)>($f1, $f0);

        return $f1;
    }

    private static final float withSign(float, int)
    {
        float $f0, $f1;
        int $i0;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $f1 = (float) $i0;

        $f0 = staticinvoke <java.lang.Math: float copySign(float,float)>($f0, $f1);

        return $f0;
    }

