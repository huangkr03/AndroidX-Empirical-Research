kotlin.collections.AbstractCollection
    protected void <init>()
    {
        kotlin.collections.AbstractCollection $r0;

        $r0 := @this: kotlin.collections.AbstractCollection;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.AbstractCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean contains(java.lang.Object)
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.lang.Iterable r4;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        $z1 = 0;

        if $z0 == 0 goto label2;

     label1:
        goto label4;

     label2:
        r4 = (java.lang.Iterable) $r0;

        $r2 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label3;

        $z1 = 1;

     label4:
        return $z1;
    }

    public boolean containsAll(java.util.Collection)
    {
        kotlin.collections.AbstractCollection $r0;
        java.util.Collection $r1;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable r4;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        $z1 = 1;

        if $z0 == 0 goto label2;

     label1:
        goto label4;

     label2:
        r4 = (java.lang.Iterable) $r1;

        $r2 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r0.<kotlin.collections.AbstractCollection: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $z1 = 0;

     label4:
        return $z1;
    }

<kotlin.collections.AbstractCollection: int getSize()>
    public boolean isEmpty()
    {
        kotlin.collections.AbstractCollection $r0;
        int $i0;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $i0 = virtualinvoke $r0.<kotlin.collections.AbstractCollection: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

<kotlin.collections.AbstractCollection: java.util.Iterator iterator()>
    public boolean remove(java.lang.Object)
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.AbstractCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.AbstractCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        kotlin.collections.AbstractCollection $r0;
        int $i0;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $i0 = virtualinvoke $r0.<kotlin.collections.AbstractCollection: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt__CollectionsJVMKt.copyToArrayImpl>");

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.collections.AbstractCollection $r0;
        java.lang.String $r1;
        kotlin.collections.AbstractCollection$toString$1 r2;
        java.lang.Iterable r3;

        $r0 := @this: kotlin.collections.AbstractCollection;

        r2 = new kotlin.collections.AbstractCollection$toString$1;

        specialinvoke r2.<kotlin.collections.AbstractCollection$toString$1: void <init>(kotlin.collections.AbstractCollection)>($r0);

        r3 = (java.lang.Iterable) $r0;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, ", ", "[", "]", 0, null, r2, 24, null);

        return $r1;
    }

kotlin.collections.AbstractCollection$toString$1
<kotlin.collections.AbstractCollection$toString$1: kotlin.collections.AbstractCollection this$0>
    void <init>(kotlin.collections.AbstractCollection)
    {
        kotlin.collections.AbstractCollection$toString$1 $r0;
        kotlin.collections.AbstractCollection $r1;

        $r0 := @this: kotlin.collections.AbstractCollection$toString$1;

        $r1 := @parameter0: kotlin.collections.AbstractCollection;

        $r0.<kotlin.collections.AbstractCollection$toString$1: kotlin.collections.AbstractCollection this$0> = $r1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(java.lang.Object)
    {
        kotlin.collections.AbstractCollection$toString$1 $r0;
        kotlin.collections.AbstractCollection $r1;
        java.lang.String $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.AbstractCollection$toString$1;

        $r3 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.AbstractCollection$toString$1: kotlin.collections.AbstractCollection this$0>;

        if $r3 != $r1 goto label1;

        return "(this Collection)";

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlin.collections.AbstractCollection$toString$1 $r0;
        java.lang.CharSequence $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.AbstractCollection$toString$1;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke $r0.<kotlin.collections.AbstractCollection$toString$1: java.lang.CharSequence invoke(java.lang.Object)>($r2);

        return $r1;
    }

