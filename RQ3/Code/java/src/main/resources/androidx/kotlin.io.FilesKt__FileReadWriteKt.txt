kotlin.io.FilesKt__FileReadWriteKt
    public void <init>()
    {
        kotlin.io.FilesKt__FileReadWriteKt $r0;

        $r0 := @this: kotlin.io.FilesKt__FileReadWriteKt;

        specialinvoke $r0.<kotlin.io.FilesKt__FilePathComponentsKt: void <init>()>();

        return;
    }

    public static final void appendBytes(java.io.File, byte[])
    {
        java.io.File $r0;
        byte[] $r1;
        java.io.FileOutputStream $r2, r6;
        kotlin.Unit $r3;
        java.lang.Throwable $r4, $r5;
        java.io.Closeable r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        r6 = new java.io.FileOutputStream;

        $r2 = r6;

        specialinvoke r6.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, 1);

     label1:
        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>($r1);

     label2:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r7 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r7, null);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        throw $r4;

     label5:
        $r5 := @caughtexception;

        r7 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r7, $r4);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static final void appendText(java.io.File, java.lang.String, java.nio.charset.Charset)
    {
        java.io.File $r0;
        byte[] $r1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).getBytes(charset)");

        staticinvoke <kotlin.io.FilesKt: void appendBytes(java.io.File,byte[])>($r0, $r1);

        return;
    }

    public static void appendText$default(java.io.File, java.lang.String, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.nio.charset.Charset $r3;
        int $i0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void appendText(java.io.File,java.lang.String,java.nio.charset.Charset)>($r0, $r1, $r3);

        return;
    }

    private static final java.io.BufferedReader bufferedReader(java.io.File, java.nio.charset.Charset, int)
    {
        java.nio.charset.Charset $r0;
        int $i0;
        java.io.FileInputStream $r1;
        java.io.File $r2;
        java.io.InputStreamReader $r3;
        java.io.BufferedReader $r4;

        $r2 := @parameter0: java.io.File;

        $r0 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "charset");

        $r3 = new java.io.InputStreamReader;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, $r0);

        $r4 = new java.io.BufferedReader;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r3, $i0);

        return $r4;
    }

    static java.io.BufferedReader bufferedReader$default(java.io.File, java.nio.charset.Charset, int, int, java.lang.Object)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.io.InputStreamReader $r3;
        java.io.FileInputStream $r4;
        java.io.BufferedReader $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        $r5 = new java.io.BufferedReader;

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r3, $i0);

        return $r5;
    }

    private static final java.io.BufferedWriter bufferedWriter(java.io.File, java.nio.charset.Charset, int)
    {
        java.nio.charset.Charset $r0;
        int $i0;
        java.io.FileOutputStream $r1;
        java.io.File $r2;
        java.io.OutputStreamWriter $r3;
        java.io.BufferedWriter $r4;

        $r2 := @parameter0: java.io.File;

        $r0 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r1, $r0);

        $r4 = new java.io.BufferedWriter;

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r3, $i0);

        return $r4;
    }

    static java.io.BufferedWriter bufferedWriter$default(java.io.File, java.nio.charset.Charset, int, int, java.lang.Object)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.io.OutputStreamWriter $r3;
        java.io.FileOutputStream $r4;
        java.io.BufferedWriter $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r1);

        $r5 = new java.io.BufferedWriter;

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r3, $i0);

        return $r5;
    }

    public static final void forEachBlock(java.io.File, int, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.io.File $r1;
        int $i0;
        byte[] $r2;
        java.io.FileInputStream $r3, r8;
        kotlin.Unit $r4;
        java.lang.Integer $r5;
        java.lang.Throwable $r6, $r7;
        java.io.Closeable r9;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 512);

        $r2 = newarray (byte)[$i0];

        r8 = new java.io.FileInputStream;

        $r3 = r8;

        specialinvoke r8.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label1:
        $i0 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[])>($r2);

     label2:
        if $i0 > 0 goto label3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r9 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r9, null);

        return;

     label3:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label4:
        interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

     label5:
        goto label1;

     label6:
        $r6 := @caughtexception;

     label7:
        throw $r6;

     label8:
        $r7 := @caughtexception;

        r9 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r9, $r6);

        goto label9;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public static final void forEachBlock(java.io.File, kotlin.jvm.functions.Function2)
    {
        java.io.File $r0;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        staticinvoke <kotlin.io.FilesKt: void forEachBlock(java.io.File,int,kotlin.jvm.functions.Function2)>($r0, 4096, $r1);

        return;
    }

    public static final void forEachLine(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.io.InputStreamReader $r3;
        java.io.FileInputStream $r4;
        java.io.BufferedReader $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        $r5 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        staticinvoke <kotlin.io.TextStreamsKt: void forEachLine(java.io.Reader,kotlin.jvm.functions.Function1)>($r5, $r2);

        return;
    }

    public static void forEachLine$default(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.io.File $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.nio.charset.Charset $r3;
        int $i0;

        $r0 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void forEachLine(java.io.File,java.nio.charset.Charset,kotlin.jvm.functions.Function1)>($r0, $r3, $r1);

        return;
    }

    private static final java.io.FileInputStream inputStream(java.io.File)
    {
        java.io.File $r0;
        java.io.FileInputStream $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        return $r1;
    }

    private static final java.io.FileOutputStream outputStream(java.io.File)
    {
        java.io.File $r0;
        java.io.FileOutputStream $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        return $r1;
    }

    private static final java.io.PrintWriter printWriter(java.io.File, java.nio.charset.Charset)
    {
        java.io.OutputStreamWriter $r0;
        java.io.FileOutputStream $r1;
        java.io.File $r2;
        java.nio.charset.Charset $r3;
        java.io.PrintWriter $r4;
        java.io.BufferedWriter $r5;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r4 = new java.io.PrintWriter;

        $r0 = new java.io.OutputStreamWriter;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r1, $r3);

        $r5 = new java.io.BufferedWriter;

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r0, 8192);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

        return $r4;
    }

    static java.io.PrintWriter printWriter$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.FileOutputStream $r0;
        java.io.File $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        java.lang.Object $r3;
        java.io.PrintWriter $r4;
        java.io.OutputStreamWriter $r5;
        java.io.BufferedWriter $r6;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r4 = new java.io.PrintWriter;

        $r5 = new java.io.OutputStreamWriter;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r0, $r2);

        $r6 = new java.io.BufferedWriter;

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r5, 8192);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r6);

        return $r4;
    }

    public static final byte[] readBytes(java.io.File)
    {
        java.io.File $r0;
        java.io.FileInputStream $r1, r9;
        long $l0;
        byte $b1;
        int $i2, $i3, $i4, $i5;
        byte[] $r2, $r3;
        kotlin.io.ExposingBufferByteArrayOutputStream $r4, r10;
        java.lang.StringBuilder $r5, r11;
        java.lang.String $r6;
        java.lang.Throwable $r7, $r8;
        java.lang.OutOfMemoryError r12;
        java.io.Closeable r13;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r9 = new java.io.FileInputStream;

        $r1 = r9;

        specialinvoke r9.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label01:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

     label02:
        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label23;

        $i2 = (int) $l0;

        $r2 = newarray (byte)[$i2];

        $i3 = $i2;

        $i4 = 0;

     label03:
        if $i3 <= 0 goto label06;

     label04:
        $i5 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[],int,int)>($r2, $i4, $i3);

     label05:
        if $i5 < 0 goto label06;

        $i3 = $i3 - $i5;

        $i4 = $i4 + $i5;

        goto label03;

     label06:
        if $i3 <= 0 goto label07;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i4);

        $r2 = $r3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)");

        goto label19;

     label07:
        $i3 = virtualinvoke $r1.<java.io.FileInputStream: int read()>();

     label08:
        if $i3 != -1 goto label10;

     label09:
        goto label19;

     label10:
        r10 = new kotlin.io.ExposingBufferByteArrayOutputStream;

        $r4 = r10;

     label11:
        specialinvoke r10.<kotlin.io.ExposingBufferByteArrayOutputStream: void <init>(int)>(8193);

        virtualinvoke $r4.<kotlin.io.ExposingBufferByteArrayOutputStream: void write(int)>($i3);

     label12:
        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo$default(java.io.InputStream,java.io.OutputStream,int,int,java.lang.Object)>($r1, $r4, 0, 2, null);

     label13:
        $i3 = virtualinvoke $r4.<kotlin.io.ExposingBufferByteArrayOutputStream: int size()>();

     label14:
        $i3 = $i3 + $i2;

        if $i3 < 0 goto label20;

     label15:
        $r3 = virtualinvoke $r4.<kotlin.io.ExposingBufferByteArrayOutputStream: byte[] getBuffer()>();

     label16:
        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copyOf(this, newSize)");

     label17:
        $i3 = virtualinvoke $r4.<kotlin.io.ExposingBufferByteArrayOutputStream: int size()>();

     label18:
        $r2 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r3, $r2, $i2, 0, $i3);

        goto label09;

     label19:
        r13 = (java.io.Closeable) $r1;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r13, null);

        return $r2;

     label20:
        r12 = new java.lang.OutOfMemoryError;

        r11 = new java.lang.StringBuilder;

        $r5 = r11;

     label21:
        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too big to fit in memory.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r6);

     label22:
        throw r12;

     label23:
        r12 = new java.lang.OutOfMemoryError;

        r11 = new java.lang.StringBuilder;

        $r5 = r11;

     label24:
        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too big (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes) to fit in memory.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r6);

     label25:
        throw r12;

     label26:
        $r7 := @caughtexception;

     label27:
        throw $r7;

     label28:
        $r8 := @caughtexception;

        r13 = (java.io.Closeable) $r1;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r13, $r7);

        goto label29;

     label29:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label28;
    }

    public static final java.util.List readLines(java.io.File, java.nio.charset.Charset)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.util.ArrayList $r2, r3;
        kotlin.io.FilesKt__FileReadWriteKt$readLines$1 r4;
        java.util.List r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        r3 = new java.util.ArrayList;

        $r2 = r3;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r4 = new kotlin.io.FilesKt__FileReadWriteKt$readLines$1;

        specialinvoke r4.<kotlin.io.FilesKt__FileReadWriteKt$readLines$1: void <init>(java.util.ArrayList)>($r2);

        staticinvoke <kotlin.io.FilesKt: void forEachLine(java.io.File,java.nio.charset.Charset,kotlin.jvm.functions.Function1)>($r0, $r1, r4);

        r5 = (java.util.List) $r2;

        return r5;
    }

    public static java.util.List readLines$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.List $r1;
        java.io.File $r2;
        java.nio.charset.Charset $r3;
        int $i0;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.util.List readLines(java.io.File,java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    public static final java.lang.String readText(java.io.File, java.nio.charset.Charset)
    {
        java.lang.String $r0;
        java.io.File $r1;
        java.nio.charset.Charset $r2;
        java.io.InputStreamReader $r3, r5;
        java.io.FileInputStream r4;
        java.io.Closeable r6;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        r5 = new java.io.InputStreamReader;

        $r3 = r5;

        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r4, $r2);

        $r0 = staticinvoke <kotlin.io.TextStreamsKt: java.lang.String readText(java.io.Reader)>($r3);

        r6 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r6, null);

        return $r0;
    }

    public static java.lang.String readText$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.io.File $r2;
        java.nio.charset.Charset $r3;
        int $i0;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.lang.String readText(java.io.File,java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    private static final java.io.InputStreamReader reader(java.io.File, java.nio.charset.Charset)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.FileInputStream $r2;
        java.io.InputStreamReader $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.InputStreamReader;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r2, $r1);

        return $r3;
    }

    static java.io.InputStreamReader reader$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0;
        java.lang.Object $r2;
        java.io.InputStreamReader $r3;
        java.io.FileInputStream $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        return $r3;
    }

    public static final java.lang.Object useLines(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.io.BufferedReader $r3, r10;
        kotlin.sequences.Sequence $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6, $r7;
        java.io.FileInputStream r8;
        java.io.InputStreamReader r9;
        java.io.Closeable r11;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "block");

        r9 = new java.io.InputStreamReader;

        r8 = new java.io.FileInputStream;

        specialinvoke r8.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r8, $r1);

        r10 = new java.io.BufferedReader;

        $r3 = r10;

        specialinvoke r10.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r9, 8192);

        $r4 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r3);

     label1:
        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r11 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r11, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        throw $r6;

     label5:
        $r7 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r11 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r11, $r6);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static java.lang.Object useLines$default(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.Object $r3;
        java.io.BufferedReader $r4, r10;
        kotlin.sequences.Sequence $r5;
        java.lang.Throwable $r6, $r7;
        java.io.FileInputStream r8;
        java.io.InputStreamReader r9;
        java.io.Closeable r11;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        r9 = new java.io.InputStreamReader;

        r8 = new java.io.FileInputStream;

        specialinvoke r8.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r8, $r1);

        r10 = new java.io.BufferedReader;

        $r4 = r10;

        specialinvoke r10.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r9, 8192);

        $r5 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r4);

     label2:
        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r11 = (java.io.Closeable) $r4;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r11, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label4:
        $r6 := @caughtexception;

     label5:
        throw $r6;

     label6:
        $r7 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r11 = (java.io.Closeable) $r4;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r11, $r6);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public static final void writeBytes(java.io.File, byte[])
    {
        java.io.File $r0;
        byte[] $r1;
        java.io.FileOutputStream $r2, r6;
        kotlin.Unit $r3;
        java.lang.Throwable $r4, $r5;
        java.io.Closeable r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        r6 = new java.io.FileOutputStream;

        $r2 = r6;

        specialinvoke r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

     label1:
        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>($r1);

     label2:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r7 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r7, null);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        throw $r4;

     label5:
        $r5 := @caughtexception;

        r7 = (java.io.Closeable) $r2;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r7, $r4);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static final void writeText(java.io.File, java.lang.String, java.nio.charset.Charset)
    {
        java.io.File $r0;
        byte[] $r1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).getBytes(charset)");

        staticinvoke <kotlin.io.FilesKt: void writeBytes(java.io.File,byte[])>($r0, $r1);

        return;
    }

    public static void writeText$default(java.io.File, java.lang.String, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.nio.charset.Charset $r3;
        int $i0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void writeText(java.io.File,java.lang.String,java.nio.charset.Charset)>($r0, $r1, $r3);

        return;
    }

    private static final java.io.OutputStreamWriter writer(java.io.File, java.nio.charset.Charset)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.FileOutputStream $r2;
        java.io.OutputStreamWriter $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r2, $r1);

        return $r3;
    }

    static java.io.OutputStreamWriter writer$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0;
        java.lang.Object $r2;
        java.io.OutputStreamWriter $r3;
        java.io.FileOutputStream $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r1);

        return $r3;
    }

