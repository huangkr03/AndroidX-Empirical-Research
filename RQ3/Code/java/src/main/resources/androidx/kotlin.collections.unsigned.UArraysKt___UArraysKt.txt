kotlin.collections.unsigned.UArraysKt___UArraysKt
    public void <init>()
    {
        kotlin.collections.unsigned.UArraysKt___UArraysKt $r0;

        $r0 := @this: kotlin.collections.unsigned.UArraysKt___UArraysKt;

        specialinvoke $r0.<kotlin.collections.unsigned.UArraysKt___UArraysJvmKt: void <init>()>();

        return;
    }

    private static final boolean all-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$all");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean all-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$all");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean all-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$all");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean all-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$all");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean any--ajY-9A(int[])
    {
        boolean $z0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$any");

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean any(int[])>($r0);

        return $z0;
    }

    private static final boolean any-GBYM_sE(byte[])
    {
        boolean $z0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$any");

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean any(byte[])>($r0);

        return $z0;
    }

    private static final boolean any-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$any");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static final boolean any-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$any");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static final boolean any-QwZRm1k(long[])
    {
        boolean $z0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$any");

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean any(long[])>($r0);

        return $z0;
    }

    private static final boolean any-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$any");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static final boolean any-rL5Bavg(short[])
    {
        boolean $z0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$any");

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean any(short[])>($r0);

        return $z0;
    }

    private static final boolean any-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$any");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static final byte[] asByteArray-GBYM_sE(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asByteArray");

        return $r0;
    }

    private static final int[] asIntArray--ajY-9A(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asIntArray");

        return $r0;
    }

    private static final long[] asLongArray-QwZRm1k(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asLongArray");

        return $r0;
    }

    private static final short[] asShortArray-rL5Bavg(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asShortArray");

        return $r0;
    }

    private static final byte[] asUByteArray(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final int[] asUIntArray(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final long[] asULongArray(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final short[] asUShortArray(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final java.util.Map associateWith-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r6;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3, $r4;
        java.lang.Object $r5;
        java.util.Map r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "valueSelector");

        r6 = new java.util.LinkedHashMap;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 16);

        specialinvoke r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r7 = (java.util.Map) $r2;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.Map) $r2;

        return r7;
    }

    private static final java.util.Map associateWith-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r6;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3, $r4;
        java.lang.Object $r5;
        java.util.Map r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "valueSelector");

        r6 = new java.util.LinkedHashMap;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 16);

        specialinvoke r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r7 = (java.util.Map) $r2;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.Map) $r2;

        return r7;
    }

    private static final java.util.Map associateWith-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r6;
        int $i0, $i1, $i2;
        kotlin.UInt $r3, $r4;
        java.lang.Object $r5;
        java.util.Map r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "valueSelector");

        r6 = new java.util.LinkedHashMap;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 16);

        specialinvoke r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r7 = (java.util.Map) $r2;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.Map) $r2;

        return r7;
    }

    private static final java.util.Map associateWith-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r6;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3, $r4;
        java.lang.Object $r5;
        java.util.Map r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "valueSelector");

        r6 = new java.util.LinkedHashMap;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 16);

        specialinvoke r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r7 = (java.util.Map) $r2;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.Map) $r2;

        return r7;
    }

    private static final java.util.Map associateWithTo-4D70W2E(int[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3, $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWithTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueSelector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Map associateWithTo-H21X9dk(byte[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3, $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWithTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueSelector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Map associateWithTo-X6OPwNk(long[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3, $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWithTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueSelector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Map associateWithTo-ciTST-8(short[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3, $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$associateWithTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueSelector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final int component1--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component1");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        return $i0;
    }

    private static final byte component1-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component1");

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        return $b0;
    }

    private static final long component1-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component1");

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        return $l0;
    }

    private static final short component1-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component1");

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        return $s0;
    }

    private static final int component2--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component2");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 1);

        return $i0;
    }

    private static final byte component2-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component2");

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 1);

        return $b0;
    }

    private static final long component2-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component2");

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 1);

        return $l0;
    }

    private static final short component2-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component2");

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 1);

        return $s0;
    }

    private static final int component3--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component3");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 2);

        return $i0;
    }

    private static final byte component3-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component3");

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 2);

        return $b0;
    }

    private static final long component3-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component3");

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 2);

        return $l0;
    }

    private static final short component3-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component3");

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 2);

        return $s0;
    }

    private static final int component4--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component4");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 3);

        return $i0;
    }

    private static final byte component4-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component4");

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 3);

        return $b0;
    }

    private static final long component4-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component4");

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 3);

        return $l0;
    }

    private static final short component4-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component4");

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 3);

        return $s0;
    }

    private static final int component5--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component5");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 4);

        return $i0;
    }

    private static final byte component5-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component5");

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 4);

        return $b0;
    }

    private static final long component5-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component5");

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 4);

        return $l0;
    }

    private static final short component5-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$component5");

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 4);

        return $s0;
    }

    public static final boolean contentEquals-FGO6Aew(short[], short[])
    {
        boolean $z0;
        short[] $r0, $r1;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        if $r1 != null goto label2;

        $r1 = null;

     label2:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r0, $r1);

        return $z0;
    }

    public static final boolean contentEquals-KJPZfPQ(int[], int[])
    {
        boolean $z0;
        int[] $r0, $r1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        if $r1 != null goto label2;

        $r1 = null;

     label2:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r0, $r1);

        return $z0;
    }

    public static final boolean contentEquals-ctEhBpI(int[], int[])
    {
        int[] $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentEquals");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $z0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: boolean contentEquals-KJPZfPQ(int[],int[])>($r1, $r0);

        return $z0;
    }

    public static final boolean contentEquals-kV0jMPg(byte[], byte[])
    {
        boolean $z0;
        byte[] $r0, $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        if $r1 != null goto label2;

        $r1 = null;

     label2:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r0, $r1);

        return $z0;
    }

    public static final boolean contentEquals-kdPth3s(byte[], byte[])
    {
        byte[] $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentEquals");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $z0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: boolean contentEquals-kV0jMPg(byte[],byte[])>($r1, $r0);

        return $z0;
    }

    public static final boolean contentEquals-lec5QzE(long[], long[])
    {
        boolean $z0;
        long[] $r0, $r1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        if $r1 != null goto label2;

        $r1 = null;

     label2:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r0, $r1);

        return $z0;
    }

    public static final boolean contentEquals-mazbYpA(short[], short[])
    {
        short[] $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentEquals");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $z0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: boolean contentEquals-FGO6Aew(short[],short[])>($r1, $r0);

        return $z0;
    }

    public static final boolean contentEquals-us8wMrg(long[], long[])
    {
        long[] $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentEquals");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $z0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: boolean contentEquals-lec5QzE(long[],long[])>($r1, $r0);

        return $z0;
    }

    public static final int contentHashCode--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contentHashCode");

        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int contentHashCode-XUkPCBk(int[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-2csIQuQ(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-GBYM_sE(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contentHashCode");

        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int contentHashCode-2csIQuQ(byte[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-QwZRm1k(long[])
    {
        int $i0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contentHashCode");

        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int contentHashCode-uLth9ew(long[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-XUkPCBk(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-d-6D3K8(short[])
    {
        int $i0;
        short[] $r0;

        $r0 := @parameter0: short[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int hashCode(short[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-rL5Bavg(short[])
    {
        int $i0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contentHashCode");

        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int contentHashCode-d-6D3K8(short[])>($r0);

        return $i0;
    }

    public static final int contentHashCode-uLth9ew(long[])
    {
        int $i0;
        long[] $r0;

        $r0 := @parameter0: long[];

        if $r0 != null goto label1;

        $r0 = null;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r0);

        return $i0;
    }

    public static final java.lang.String contentToString--ajY-9A(int[])
    {
        java.lang.String $r0;
        int[] $r1;

        $r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentToString");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.lang.String contentToString-XUkPCBk(int[])>($r1);

        return $r0;
    }

    public static final java.lang.String contentToString-2csIQuQ(byte[])
    {
        byte[] $r0;
        kotlin.UByteArray $r1;
        java.lang.String $r2;
        java.lang.Iterable r3;

        $r0 := @parameter0: byte[];

        if $r0 == null goto label2;

        $r1 = staticinvoke <kotlin.UByteArray: kotlin.UByteArray box-impl(byte[])>($r0);

        r3 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, ", ", "[", "]", 0, null, null, 56, null);

        if $r2 != null goto label1;

        goto label2;

     label1:
        return $r2;

     label2:
        return "null";
    }

    public static final java.lang.String contentToString-GBYM_sE(byte[])
    {
        java.lang.String $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentToString");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.lang.String contentToString-2csIQuQ(byte[])>($r1);

        return $r0;
    }

    public static final java.lang.String contentToString-QwZRm1k(long[])
    {
        java.lang.String $r0;
        long[] $r1;

        $r1 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentToString");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.lang.String contentToString-uLth9ew(long[])>($r1);

        return $r0;
    }

    public static final java.lang.String contentToString-XUkPCBk(int[])
    {
        int[] $r0;
        kotlin.UIntArray $r1;
        java.lang.String $r2;
        java.lang.Iterable r3;

        $r0 := @parameter0: int[];

        if $r0 == null goto label2;

        $r1 = staticinvoke <kotlin.UIntArray: kotlin.UIntArray box-impl(int[])>($r0);

        r3 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, ", ", "[", "]", 0, null, null, 56, null);

        if $r2 != null goto label1;

        goto label2;

     label1:
        return $r2;

     label2:
        return "null";
    }

    public static final java.lang.String contentToString-d-6D3K8(short[])
    {
        short[] $r0;
        kotlin.UShortArray $r1;
        java.lang.String $r2;
        java.lang.Iterable r3;

        $r0 := @parameter0: short[];

        if $r0 == null goto label2;

        $r1 = staticinvoke <kotlin.UShortArray: kotlin.UShortArray box-impl(short[])>($r0);

        r3 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, ", ", "[", "]", 0, null, null, 56, null);

        if $r2 != null goto label1;

        goto label2;

     label1:
        return $r2;

     label2:
        return "null";
    }

    public static final java.lang.String contentToString-rL5Bavg(short[])
    {
        java.lang.String $r0;
        short[] $r1;

        $r1 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contentToString");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.lang.String contentToString-d-6D3K8(short[])>($r1);

        return $r0;
    }

    public static final java.lang.String contentToString-uLth9ew(long[])
    {
        long[] $r0;
        kotlin.ULongArray $r1;
        java.lang.String $r2;
        java.lang.Iterable r3;

        $r0 := @parameter0: long[];

        if $r0 == null goto label2;

        $r1 = staticinvoke <kotlin.ULongArray: kotlin.ULongArray box-impl(long[])>($r0);

        r3 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, ", ", "[", "]", 0, null, null, 56, null);

        if $r2 != null goto label1;

        goto label2;

     label1:
        return $r2;

     label2:
        return "null";
    }

    private static final long[] copyInto--B0-L2c(long[], long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: long[] copyInto(long[],long[],int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $r1;
    }

    static long[] copyInto--B0-L2c$default(long[], long[], int, int, int, int, java.lang.Object)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $r2 := @parameter6: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i4 = $i3 & 4;

        if $i4 == 0 goto label2;

        $i2 = 0;

     label2:
        $i3 = $i3 & 8;

        if $i3 == 0 goto label3;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: long[] copyInto(long[],long[],int,int,int)>($r0, $r1, $i1, $i2, $i0);

        return $r1;
    }

    private static final short[] copyInto-9-ak10g(short[], short[], int, int, int)
    {
        short[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: short[] copyInto(short[],short[],int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $r1;
    }

    static short[] copyInto-9-ak10g$default(short[], short[], int, int, int, int, java.lang.Object)
    {
        short[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $r2 := @parameter6: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i4 = $i3 & 4;

        if $i4 == 0 goto label2;

        $i2 = 0;

     label2:
        $i3 = $i3 & 8;

        if $i3 == 0 goto label3;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: short[] copyInto(short[],short[],int,int,int)>($r0, $r1, $i1, $i2, $i0);

        return $r1;
    }

    private static final byte[] copyInto-FUQE5sA(byte[], byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $r1;
    }

    static byte[] copyInto-FUQE5sA$default(byte[], byte[], int, int, int, int, java.lang.Object)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $r2 := @parameter6: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i4 = $i3 & 4;

        if $i4 == 0 goto label2;

        $i2 = 0;

     label2:
        $i3 = $i3 & 8;

        if $i3 == 0 goto label3;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r0, $r1, $i1, $i2, $i0);

        return $r1;
    }

    private static final int[] copyInto-sIZ3KeM(int[], int[], int, int, int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $r1;
    }

    static int[] copyInto-sIZ3KeM$default(int[], int[], int, int, int, int, java.lang.Object)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $r2 := @parameter6: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i4 = $i3 & 4;

        if $i4 == 0 goto label2;

        $i2 = 0;

     label2:
        $i3 = $i3 & 8;

        if $i3 == 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyInto");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.ArraysKt: int[] copyInto(int[],int[],int,int,int)>($r0, $r1, $i1, $i2, $i0);

        return $r1;
    }

    private static final int[] copyOf--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final byte[] copyOf-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final byte[] copyOf-PpDY95g(byte[], int)
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final long[] copyOf-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final short[] copyOf-nggk6HY(short[], int)
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final int[] copyOf-qFRl0hI(int[], int)
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final long[] copyOf-r7IrZao(long[], int)
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final short[] copyOf-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOf");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final long[] copyOfRange--nroSd4(long[], int, int)
    {
        int $i0, $i1;
        long[] $r0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOfRange");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: long[] copyOfRange(long[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final byte[] copyOfRange-4UcCI2c(byte[], int, int)
    {
        int $i0, $i1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOfRange");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyOfRange(byte[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final short[] copyOfRange-Aa5vz7o(short[], int, int)
    {
        int $i0, $i1;
        short[] $r0;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOfRange");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: short[] copyOfRange(short[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final int[] copyOfRange-oBK06Vg(int[], int, int)
    {
        int $i0, $i1;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$copyOfRange");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: int[] copyOfRange(int[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final int count-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$count");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    private static final int count-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        long $l3;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$count");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    private static final int count-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$count");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    private static final int count-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$count");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    public static final java.util.List drop-PpDY95g(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$drop");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List takeLast-PpDY95g(byte[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List drop-nggk6HY(short[], int)
    {
        short[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$drop");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List takeLast-nggk6HY(short[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List drop-qFRl0hI(int[], int)
    {
        int[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$drop");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List takeLast-qFRl0hI(int[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List drop-r7IrZao(long[], int)
    {
        long[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$drop");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List takeLast-r7IrZao(long[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List dropLast-PpDY95g(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-PpDY95g(byte[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List dropLast-nggk6HY(short[], int)
    {
        short[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-nggk6HY(short[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List dropLast-qFRl0hI(int[], int)
    {
        int[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-qFRl0hI(int[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.util.List dropLast-r7IrZao(long[], int)
    {
        long[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-r7IrZao(long[],int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    private static final java.util.List dropLastWhile-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0;
        byte $b1;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$dropLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-PpDY95g(byte[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r5;
    }

    private static final java.util.List dropLastWhile-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0;
        long $l1;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$dropLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-r7IrZao(long[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r5;
    }

    private static final java.util.List dropLastWhile-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$dropLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-qFRl0hI(int[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r5;
    }

    private static final java.util.List dropLastWhile-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0;
        short $s1;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$dropLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List take-nggk6HY(short[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r5;
    }

    private static final java.util.List dropWhile-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        boolean $z0, $z1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label3;

     label2:
        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label3;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List dropWhile-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        boolean $z0, $z1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label3;

     label2:
        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label3;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List dropWhile-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label3;

     label2:
        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label3;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List dropWhile-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        boolean $z0, $z1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$dropWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label3;

     label2:
        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label3;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final short elementAtOrElse-CVVdw08(short[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        short $s2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UShort $r4;

        $r1 := @parameter0: short[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i0 > $i1 goto label1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

        return $s2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UShort) $r3;

        $s2 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        return $s2;
    }

    private static final int elementAtOrElse-QxvSvLU(int[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i0 > $i1 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        return $i0;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i0 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        return $i0;
    }

    private static final long elementAtOrElse-Xw8i6dc(long[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        long $l2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.ULong $r4;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i0 > $i1 goto label1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

        return $l2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.ULong) $r3;

        $l2 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        return $l2;
    }

    private static final byte elementAtOrElse-cO-VybQ(byte[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        byte $b2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UByte $r4;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i0 > $i1 goto label1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

        return $b2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UByte) $r3;

        $b2 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        return $b2;
    }

    private static final kotlin.UByte elementAtOrNull-PpDY95g(byte[], int)
    {
        int $i0;
        kotlin.UByte $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrNull");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte getOrNull-PpDY95g(byte[],int)>($r1, $i0);

        return $r0;
    }

    private static final kotlin.UShort elementAtOrNull-nggk6HY(short[], int)
    {
        int $i0;
        kotlin.UShort $r0;
        short[] $r1;

        $r1 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrNull");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort getOrNull-nggk6HY(short[],int)>($r1, $i0);

        return $r0;
    }

    private static final kotlin.UInt elementAtOrNull-qFRl0hI(int[], int)
    {
        int $i0;
        kotlin.UInt $r0;
        int[] $r1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrNull");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt getOrNull-qFRl0hI(int[],int)>($r1, $i0);

        return $r0;
    }

    private static final kotlin.ULong elementAtOrNull-r7IrZao(long[], int)
    {
        int $i0;
        kotlin.ULong $r0;
        long[] $r1;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$elementAtOrNull");

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong getOrNull-r7IrZao(long[],int)>($r1, $i0);

        return $r0;
    }

    public static final void fill-2fe2U9s(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fill");

        staticinvoke <kotlin.collections.ArraysKt: void fill(int[],int,int,int)>($r0, $i0, $i1, $i2);

        return;
    }

    public static void fill-2fe2U9s$default(int[], int, int, int, int, java.lang.Object)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $i1 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i2 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void fill-2fe2U9s(int[],int,int,int)>($r0, $i0, $i2, $i1);

        return;
    }

    public static final void fill-EtDCXyQ(short[], short, int, int)
    {
        short[] $r0;
        short $s0;
        int $i1, $i2;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fill");

        staticinvoke <kotlin.collections.ArraysKt: void fill(short[],short,int,int)>($r0, $s0, $i1, $i2);

        return;
    }

    public static void fill-EtDCXyQ$default(short[], short, int, int, int, java.lang.Object)
    {
        short[] $r0;
        short $s0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        $i2 := @parameter2: int;

        $i1 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i2 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void fill-EtDCXyQ(short[],short,int,int)>($r0, $s0, $i2, $i1);

        return;
    }

    public static final void fill-K6DWlUc(long[], long, int, int)
    {
        long[] $r0;
        long $l0;
        int $i1, $i2;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fill");

        staticinvoke <kotlin.collections.ArraysKt: void fill(long[],long,int,int)>($r0, $l0, $i1, $i2);

        return;
    }

    public static void fill-K6DWlUc$default(long[], long, int, int, int, java.lang.Object)
    {
        long[] $r0;
        long $l0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i2 := @parameter2: int;

        $i1 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i2 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void fill-K6DWlUc(long[],long,int,int)>($r0, $l0, $i2, $i1);

        return;
    }

    public static final void fill-WpHrYlw(byte[], byte, int, int)
    {
        byte[] $r0;
        byte $b0;
        int $i1, $i2;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fill");

        staticinvoke <kotlin.collections.ArraysKt: void fill(byte[],byte,int,int)>($r0, $b0, $i1, $i2);

        return;
    }

    public static void fill-WpHrYlw$default(byte[], byte, int, int, int, java.lang.Object)
    {
        byte[] $r0;
        byte $b0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $i2 := @parameter2: int;

        $i1 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i2 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void fill-WpHrYlw(byte[],byte,int,int)>($r0, $b0, $i2, $i1);

        return;
    }

    private static final java.util.List filter-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filter-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filter-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filter-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filterIndexed-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r7;
        byte $b4;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b4);

        r8 = (java.util.Collection) $r2;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List filterIndexed-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r2, r7;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i4 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        r8 = (java.util.Collection) $r2;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List filterIndexed-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r7;
        long $l4;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l4);

        r8 = (java.util.Collection) $r2;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List filterIndexed-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r7;
        short $s4;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s4);

        r8 = (java.util.Collection) $r2;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.Collection filterIndexedTo--6EtJGI(int[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i4 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterIndexedTo-QqktQ3k(short[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3;
        short $s4;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s4);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterIndexedTo-eNpIKz8(byte[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3;
        byte $b4;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b4);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterIndexedTo-pe2Q0Dw(long[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3;
        long $l4;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $i0 = $i3 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l4);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        $i2 = $i2 + 1;

        $i3 = $i0;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.List filterNot-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filterNot-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filterNot-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List filterNot-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.Collection filterNotTo-HqK1JgA(long[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNotTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterNotTo-oEOeDjA(short[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNotTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterNotTo-wU5IKMo(int[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNotTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterNotTo-wzUQCXU(byte[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterNotTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterTo-HqK1JgA(long[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterTo-oEOeDjA(short[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterTo-wU5IKMo(int[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Collection filterTo-wzUQCXU(byte[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$filterTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final kotlin.UByte find-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$find");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.ULong find-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$find");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.UInt find-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$find");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.UShort find-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$find");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.UByte findLast-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$findLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r2;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return null;
    }

    private static final kotlin.ULong findLast-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        long[] $r1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$findLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r2;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return null;
    }

    private static final kotlin.UInt findLast-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        int[] $r1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$findLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return null;
    }

    private static final kotlin.UShort findLast-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        short[] $r1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$findLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r2;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return null;
    }

    private static final int first--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int first(int[])>($r0);

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    private static final byte first-GBYM_sE(byte[])
    {
        byte[] $r0;
        byte $b0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        $b0 = staticinvoke <kotlin.collections.ArraysKt: byte first(byte[])>($r0);

        $b0 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b0);

        return $b0;
    }

    private static final byte first-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $b2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final long first-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $l2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final long first-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        $l0 = staticinvoke <kotlin.collections.ArraysKt: long first(long[])>($r0);

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final int first-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final short first-rL5Bavg(short[])
    {
        short[] $r0;
        short $s0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        $s0 = staticinvoke <kotlin.collections.ArraysKt: short first(short[])>($r0);

        $s0 = staticinvoke <kotlin.UShort: short constructor-impl(short)>($s0);

        return $s0;
    }

    private static final short first-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$first");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $s2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    public static final kotlin.UInt firstOrNull--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0;
        kotlin.UInt $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$firstOrNull");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;
    }

    public static final kotlin.UByte firstOrNull-GBYM_sE(byte[])
    {
        byte[] $r0;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$firstOrNull");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r1;
    }

    private static final kotlin.UByte firstOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$firstOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.ULong firstOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$firstOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static final kotlin.ULong firstOrNull-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        long $l0;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$firstOrNull");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r1;
    }

    private static final kotlin.UInt firstOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$firstOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static final kotlin.UShort firstOrNull-rL5Bavg(short[])
    {
        short[] $r0;
        boolean $z0;
        short $s0;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$firstOrNull");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r1;
    }

    private static final kotlin.UShort firstOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$firstOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static final java.util.List flatMap-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        r7 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r7, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List flatMap-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        r7 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r7, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List flatMap-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        r7 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r7, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List flatMap-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        r7 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r7, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List flatMapIndexed-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        r8 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r8, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List flatMapIndexed-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        r8 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r8, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List flatMapIndexed-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        r8 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r8, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.List flatMapIndexed-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;
        java.util.Collection r8;
        java.util.List r9;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r7 = new java.util.ArrayList;

        $r2 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        r8 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r8, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r9 = (java.util.List) $r2;

        return r9;
    }

    private static final java.util.Collection flatMapIndexedTo--6EtJGI(int[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapIndexedTo-QqktQ3k(short[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapIndexedTo-eNpIKz8(byte[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapIndexedTo-pe2Q0Dw(long[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;
        java.lang.Iterable $r6;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Iterable) $r5;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r6);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapTo-HqK1JgA(long[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapTo-oEOeDjA(short[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapTo-wU5IKMo(int[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection flatMapTo-wzUQCXU(byte[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Iterable $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$flatMapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.lang.Object fold-A8wKCXQ(long[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object fold-yXmHNn8(byte[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object fold-zi1B2BA(int[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object fold-zww5nb8(short[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$fold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldIndexed-3iWJZGE(byte[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r3;
        kotlin.UByte $r4;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r2, $r4);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldIndexed-bzxtMww(short[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        short[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r3;
        kotlin.UShort $r4;

        $r0 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r2, $r4);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldIndexed-mwnnOCs(long[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        long[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r3;
        kotlin.ULong $r4;

        $r0 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r2, $r4);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldIndexed-yVwIW0Q(int[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        int[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r2, $r4);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRight-A8wKCXQ(long[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0;
        long $l1;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRight-yXmHNn8(byte[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0;
        byte $b1;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRight-zi1B2BA(int[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

     label1:
        if $i1 < 0 goto label2;

        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r2);

        $i1 = $i0;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRight-zww5nb8(short[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        int $i0;
        short $s1;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRightIndexed-3iWJZGE(byte[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.Integer $r3;
        byte $b1;
        kotlin.UByte $r4;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRightIndexed-bzxtMww(short[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        short[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.Integer $r3;
        short $s1;
        kotlin.UShort $r4;

        $r0 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRightIndexed-mwnnOCs(long[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        long[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.Integer $r3;
        long $l1;
        kotlin.ULong $r4;

        $r0 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final java.lang.Object foldRightIndexed-yVwIW0Q(int[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        int[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$foldRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

     label1:
        if $i0 < 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $r2;
    }

    private static final void forEach-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEach-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEach-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEach-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEachIndexed-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r2;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEachIndexed-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEachIndexed-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r2;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void forEachIndexed-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r2;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$forEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static final kotlin.ranges.IntRange getIndices--ajY-9A(int[])
    {
        kotlin.ranges.IntRange $r0;
        int[] $r1;

        $r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$indices");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: kotlin.ranges.IntRange getIndices(int[])>($r1);

        return $r0;
    }

    public static void getIndices--ajY-9A$annotations(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        return;
    }

    public static final kotlin.ranges.IntRange getIndices-GBYM_sE(byte[])
    {
        kotlin.ranges.IntRange $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$indices");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: kotlin.ranges.IntRange getIndices(byte[])>($r1);

        return $r0;
    }

    public static void getIndices-GBYM_sE$annotations(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        return;
    }

    public static final kotlin.ranges.IntRange getIndices-QwZRm1k(long[])
    {
        kotlin.ranges.IntRange $r0;
        long[] $r1;

        $r1 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$indices");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: kotlin.ranges.IntRange getIndices(long[])>($r1);

        return $r0;
    }

    public static void getIndices-QwZRm1k$annotations(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        return;
    }

    public static final kotlin.ranges.IntRange getIndices-rL5Bavg(short[])
    {
        kotlin.ranges.IntRange $r0;
        short[] $r1;

        $r1 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$indices");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: kotlin.ranges.IntRange getIndices(short[])>($r1);

        return $r0;
    }

    public static void getIndices-rL5Bavg$annotations(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        return;
    }

    public static final int getLastIndex--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndex");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        return $i0;
    }

    public static void getLastIndex--ajY-9A$annotations(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        return;
    }

    public static final int getLastIndex-GBYM_sE(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndex");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        return $i0;
    }

    public static void getLastIndex-GBYM_sE$annotations(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        return;
    }

    public static final int getLastIndex-QwZRm1k(long[])
    {
        int $i0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndex");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        return $i0;
    }

    public static void getLastIndex-QwZRm1k$annotations(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        return;
    }

    public static final int getLastIndex-rL5Bavg(short[])
    {
        int $i0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndex");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        return $i0;
    }

    public static void getLastIndex-rL5Bavg$annotations(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        return;
    }

    private static final short getOrElse-CVVdw08(short[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        short $s2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UShort $r4;

        $r1 := @parameter0: short[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$getOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i0 > $i1 goto label1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

        return $s2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UShort) $r3;

        $s2 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        return $s2;
    }

    private static final int getOrElse-QxvSvLU(int[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$getOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i0 > $i1 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        return $i0;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i0 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        return $i0;
    }

    private static final long getOrElse-Xw8i6dc(long[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        long $l2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.ULong $r4;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$getOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i0 > $i1 goto label1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

        return $l2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.ULong) $r3;

        $l2 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        return $l2;
    }

    private static final byte getOrElse-cO-VybQ(byte[], int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        byte $b2;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        kotlin.UByte $r4;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$getOrElse");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i0 > $i1 goto label1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

        return $b2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UByte) $r3;

        $b2 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        return $b2;
    }

    public static final kotlin.UByte getOrNull-PpDY95g(byte[], int)
    {
        int $i0, $i1;
        byte[] $r0;
        byte $b2;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$getOrNull");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        if $i0 > $i1 goto label1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r1;

     label1:
        return null;
    }

    public static final kotlin.UShort getOrNull-nggk6HY(short[], int)
    {
        int $i0, $i1;
        short[] $r0;
        short $s2;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$getOrNull");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        if $i0 > $i1 goto label1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r1;

     label1:
        return null;
    }

    public static final kotlin.UInt getOrNull-qFRl0hI(int[], int)
    {
        int $i0, $i1;
        int[] $r0;
        kotlin.UInt $r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$getOrNull");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        if $i0 > $i1 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;

     label1:
        return null;
    }

    public static final kotlin.ULong getOrNull-r7IrZao(long[], int)
    {
        int $i0, $i1;
        long[] $r0;
        long $l2;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$getOrNull");

        if $i0 < 0 goto label1;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        if $i0 > $i1 goto label1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r1;

     label1:
        return null;
    }

    private static final java.util.Map groupBy--_j2Y-Q(long[], kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.LinkedHashMap $r3, r9;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r10;
        java.util.Map r11;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r9 = new java.util.LinkedHashMap;

        $r3 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r11 = (java.util.Map) $r3;

        $r6 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r10 = new java.util.ArrayList;

        $r7 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r11 = (java.util.Map) $r3;

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r11 = (java.util.Map) $r3;

        return r11;
    }

    private static final java.util.Map groupBy-3bBvP4M(short[], kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.LinkedHashMap $r3, r9;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r10;
        java.util.Map r11;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r9 = new java.util.LinkedHashMap;

        $r3 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r11 = (java.util.Map) $r3;

        $r6 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r10 = new java.util.ArrayList;

        $r7 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r11 = (java.util.Map) $r3;

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r11 = (java.util.Map) $r3;

        return r11;
    }

    private static final java.util.Map groupBy-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r9;
        java.util.Map r10;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        specialinvoke r8.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r10 = (java.util.Map) $r2;

        $r5 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r9 = new java.util.ArrayList;

        $r6 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Map) $r2;

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r10 = (java.util.Map) $r2;

        return r10;
    }

    private static final java.util.Map groupBy-L4rlFek(int[], kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.LinkedHashMap $r3, r9;
        int $i0, $i1, $i2;
        kotlin.UInt $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r10;
        java.util.Map r11;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r9 = new java.util.LinkedHashMap;

        $r3 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r11 = (java.util.Map) $r3;

        $r6 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r10 = new java.util.ArrayList;

        $r7 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r11 = (java.util.Map) $r3;

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r11 = (java.util.Map) $r3;

        return r11;
    }

    private static final java.util.Map groupBy-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r9;
        java.util.Map r10;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        specialinvoke r8.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r10 = (java.util.Map) $r2;

        $r5 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r9 = new java.util.ArrayList;

        $r6 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Map) $r2;

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r10 = (java.util.Map) $r2;

        return r10;
    }

    private static final java.util.Map groupBy-bBsjw1Y(byte[], kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.LinkedHashMap $r3, r9;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r10;
        java.util.Map r11;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r9 = new java.util.LinkedHashMap;

        $r3 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r11 = (java.util.Map) $r3;

        $r6 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r10 = new java.util.ArrayList;

        $r7 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r11 = (java.util.Map) $r3;

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r11 = (java.util.Map) $r3;

        return r11;
    }

    private static final java.util.Map groupBy-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r9;
        java.util.Map r10;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        specialinvoke r8.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r10 = (java.util.Map) $r2;

        $r5 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r9 = new java.util.ArrayList;

        $r6 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Map) $r2;

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r10 = (java.util.Map) $r2;

        return r10;
    }

    private static final java.util.Map groupBy-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r9;
        java.util.Map r10;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        specialinvoke r8.<java.util.LinkedHashMap: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r10 = (java.util.Map) $r2;

        $r5 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r9 = new java.util.ArrayList;

        $r6 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Map) $r2;

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r10 = (java.util.Map) $r2;

        return r10;
    }

    private static final java.util.Map groupByTo-4D70W2E(int[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r8 = new java.util.ArrayList;

        $r6 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-H21X9dk(byte[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r8 = new java.util.ArrayList;

        $r6 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-JM6gNCM(int[], java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2, $r3;
        int $i0, $i1, $i2;
        kotlin.UInt $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r9;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r9 = new java.util.ArrayList;

        $r7 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-QxgOkWg(long[], java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2, $r3;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r9;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r9 = new java.util.ArrayList;

        $r7 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-X6OPwNk(long[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r8 = new java.util.ArrayList;

        $r6 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-ciTST-8(short[], java.util.Map, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r5, $r6;
        java.util.List $r7;
        java.util.ArrayList r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = $r5;

        if $r5 != null goto label2;

        r8 = new java.util.ArrayList;

        $r6 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label2:
        $r7 = (java.util.List) $r6;

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-q8RuPII(short[], java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2, $r3;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r9;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r9 = new java.util.ArrayList;

        $r7 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final java.util.Map groupByTo-qOZmbk8(byte[], java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2, $r3;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.List $r8;
        java.util.ArrayList r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$groupByTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = $r6;

        if $r6 != null goto label2;

        r9 = new java.util.ArrayList;

        $r7 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        $r8 = (java.util.List) $r7;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    private static final int indexOf-3uqUaXg(long[], long)
    {
        long $l0;
        int $i1;
        long[] $r0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int indexOf(long[],long)>($r0, $l0);

        return $i1;
    }

    private static final int indexOf-XzdR7RA(short[], short)
    {
        short $s0;
        int $i1;
        short[] $r0;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int indexOf(short[],short)>($r0, $s0);

        return $i1;
    }

    private static final int indexOf-gMuBH34(byte[], byte)
    {
        byte $b0;
        int $i1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int indexOf(byte[],byte)>($r0, $b0);

        return $i1;
    }

    private static final int indexOf-uWY9BYg(int[], int)
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int indexOf(int[],int)>($r0, $i0);

        return $i0;
    }

    private static final int indexOfFirst-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfFirst");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = $r0[$i1];

        $b2 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static final int indexOfFirst-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfFirst");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = $r0[$i1];

        $l2 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static final int indexOfFirst-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfFirst");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = $r0[$i1];

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static final int indexOfFirst-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfFirst");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = $r0[$i1];

        $s2 = staticinvoke <kotlin.UShort: short constructor-impl(short)>($s2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static final int indexOfLast-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $b2 = $r0[$i1];

        $b2 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return -1;
    }

    private static final int indexOfLast-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $l2 = $r0[$i1];

        $l2 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return -1;
    }

    private static final int indexOfLast-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $i2 = $r0[$i1];

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return -1;
    }

    private static final int indexOfLast-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfLast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = lengthof $r0;

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $s2 = $r0[$i1];

        $s2 = staticinvoke <kotlin.UShort: short constructor-impl(short)>($s2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return -1;
    }

    private static final int last--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int last(int[])>($r0);

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    private static final byte last-GBYM_sE(byte[])
    {
        byte[] $r0;
        byte $b0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        $b0 = staticinvoke <kotlin.collections.ArraysKt: byte last(byte[])>($r0);

        $b0 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b0);

        return $b0;
    }

    private static final byte last-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $b2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final long last-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $l2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final long last-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        $l0 = staticinvoke <kotlin.collections.ArraysKt: long last(long[])>($r0);

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final int last-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final short last-rL5Bavg(short[])
    {
        short[] $r0;
        short $s0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        $s0 = staticinvoke <kotlin.collections.ArraysKt: short last(short[])>($r0);

        $s0 = staticinvoke <kotlin.UShort: short constructor-impl(short)>($s0);

        return $s0;
    }

    private static final short last-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$last");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return $s2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final int lastIndexOf-3uqUaXg(long[], long)
    {
        long $l0;
        int $i1;
        long[] $r0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int lastIndexOf(long[],long)>($r0, $l0);

        return $i1;
    }

    private static final int lastIndexOf-XzdR7RA(short[], short)
    {
        short $s0;
        int $i1;
        short[] $r0;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int lastIndexOf(short[],short)>($r0, $s0);

        return $i1;
    }

    private static final int lastIndexOf-gMuBH34(byte[], byte)
    {
        byte $b0;
        int $i1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOf");

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int lastIndexOf(byte[],byte)>($r0, $b0);

        return $i1;
    }

    private static final int lastIndexOf-uWY9BYg(int[], int)
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOf");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int lastIndexOf(int[],int)>($r0, $i0);

        return $i0;
    }

    public static final kotlin.UInt lastOrNull--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0;
        kotlin.UInt $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastOrNull");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = $i0 + -1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;
    }

    public static final kotlin.UByte lastOrNull-GBYM_sE(byte[])
    {
        byte[] $r0;
        boolean $z0;
        int $i0;
        byte $b1;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastOrNull");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = $i0 + -1;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r1;
    }

    private static final kotlin.UByte lastOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$lastOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        return null;
    }

    private static final kotlin.ULong lastOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        long[] $r1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$lastOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        return null;
    }

    public static final kotlin.ULong lastOrNull-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        int $i0;
        long $l1;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastOrNull");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = $i0 + -1;

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r1;
    }

    private static final kotlin.UInt lastOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        int[] $r1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$lastOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        return null;
    }

    public static final kotlin.UShort lastOrNull-rL5Bavg(short[])
    {
        short[] $r0;
        boolean $z0;
        int $i0;
        short $s1;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$lastOrNull");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = $i0 + -1;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r1 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r1;
    }

    private static final kotlin.UShort lastOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1;
        short[] $r1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$lastOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r2;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        return null;
    }

    private static final java.util.List map-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r5;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.util.Collection r6;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$map");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r5 = new java.util.ArrayList;

        $r2 = r5;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r6 = (java.util.Collection) $r2;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List map-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r5;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.util.Collection r6;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$map");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r5 = new java.util.ArrayList;

        $r2 = r5;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r6 = (java.util.Collection) $r2;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List map-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r5;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.util.Collection r6;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$map");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r5 = new java.util.ArrayList;

        $r2 = r5;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r6 = (java.util.Collection) $r2;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List map-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r5;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.util.Collection r6;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$map");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r5 = new java.util.ArrayList;

        $r2 = r5;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r6 = (java.util.Collection) $r2;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List mapIndexed-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r6;
        byte $b4;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List mapIndexed-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r2, r6;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i4 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List mapIndexed-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r6;
        long $l4;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List mapIndexed-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r6;
        short $s4;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;
        java.util.Collection r7;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s4);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.Collection mapIndexedTo--6EtJGI(int[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3;
        kotlin.UInt $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapIndexedTo-QqktQ3k(short[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r3;
        kotlin.UShort $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapIndexedTo-eNpIKz8(byte[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r3;
        kotlin.UByte $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapIndexedTo-pe2Q0Dw(long[], java.util.Collection, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r3;
        kotlin.ULong $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapIndexedTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapTo-HqK1JgA(long[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapTo-oEOeDjA(short[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapTo-wU5IKMo(int[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final java.util.Collection mapTo-wzUQCXU(byte[], java.util.Collection, kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$mapTo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final kotlin.UByte maxByOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label3;

        $b1 = $b0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r2;
    }

    private static final kotlin.ULong maxByOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l1;
        int $i2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label3;

        $l1 = $l0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r2;
    }

    private static final kotlin.UInt maxByOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label3;

        $i1 = $i0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;
    }

    private static final kotlin.UShort maxByOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s1;
        int $i2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label3;

        $s1 = $s0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r2;
    }

    private static final byte maxByOrThrow-U(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label4;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i2 != 0 goto label1;

        return $b0;

     label1:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label2;

        $b1 = $b0;

        $r4 = $r7;

        goto label2;

     label3:
        return $b1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final int maxByOrThrow-U(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label4;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i2 != 0 goto label1;

        return $i0;

     label1:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label2;

        $i1 = $i0;

        $r4 = $r7;

        goto label2;

     label3:
        return $i1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final long maxByOrThrow-U(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l1;
        int $i2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label4;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i2 != 0 goto label1;

        return $l0;

     label1:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label2;

        $l1 = $l0;

        $r4 = $r7;

        goto label2;

     label3:
        return $l1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final short maxByOrThrow-U(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s1;
        int $i2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label4;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i2 != 0 goto label1;

        return $s0;

     label1:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label2;

        $s1 = $s0;

        $r4 = $r7;

        goto label2;

     label3:
        return $s1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final double maxOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float maxOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable maxOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double maxOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float maxOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable maxOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double maxOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float maxOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable maxOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double maxOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float maxOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable maxOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Comparable maxOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double maxOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float maxOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable maxOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double maxOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float maxOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable maxOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double maxOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float maxOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable maxOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double maxOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float maxOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Object maxOfWith-5NtCtWE(long[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        long[] $r2;
        boolean $z0;
        long $l0;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object maxOfWith-LTi4i_s(byte[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte[] $r2;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object maxOfWith-l8EHGbQ(short[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        short[] $r2;
        boolean $z0;
        short $s0;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object maxOfWith-myNOsp4(int[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        int[] $r2;
        boolean $z0;
        int $i0;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i0 >= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object maxOfWithOrNull-5NtCtWE(long[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        long[] $r2;
        boolean $z0;
        long $l0;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object maxOfWithOrNull-LTi4i_s(byte[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte[] $r2;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object maxOfWithOrNull-l8EHGbQ(short[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        short[] $r2;
        boolean $z0;
        short $s0;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object maxOfWithOrNull-myNOsp4(int[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        int[] $r2;
        boolean $z0;
        int $i0;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$maxOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i0 >= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    public static final kotlin.UInt maxOrNull--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r1;
        kotlin.collections.IntIterator $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxOrNull");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 >= 0 goto label2;

        $i0 = $i1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r3;
    }

    public static final kotlin.UByte maxOrNull-GBYM_sE(byte[])
    {
        short $s0, $s4;
        byte[] $r0;
        boolean $z0;
        byte $b1, $b3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxOrNull");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $s4 = $b1 & 255;

        $s0 = $b3 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s0);

        if $i2 >= 0 goto label2;

        $b1 = $b3;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r3;
    }

    public static final kotlin.ULong maxOrNull-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r1;
        int $i1;
        kotlin.collections.IntIterator $r2;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxOrNull");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l2);

        if $i1 >= 0 goto label2;

        $l0 = $l2;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r3;
    }

    public static final kotlin.UShort maxOrNull-rL5Bavg(short[])
    {
        char $c0, $c4;
        short[] $r0;
        boolean $z0;
        short $s1, $s3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxOrNull");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $c4 = (char) $s1;

        $c0 = (char) $s3;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c0);

        if $i2 >= 0 goto label2;

        $s1 = $s3;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r3;
    }

    public static final byte maxOrThrow-U(byte[])
    {
        short $s0, $s4;
        byte[] $r0;
        boolean $z0;
        byte $b1, $b3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 != 0 goto label3;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $s4 = $b1 & 255;

        $s0 = $b3 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s0);

        if $i2 >= 0 goto label1;

        $b1 = $b3;

        goto label1;

     label2:
        return $b1;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final int maxOrThrow-U(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r1;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 >= 0 goto label1;

        $i0 = $i1;

        goto label1;

     label2:
        return $i0;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final long maxOrThrow-U(long[])
    {
        long[] $r0;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r1;
        int $i1;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l2);

        if $i1 >= 0 goto label1;

        $l0 = $l2;

        goto label1;

     label2:
        return $l0;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final short maxOrThrow-U(short[])
    {
        char $c0, $c4;
        short[] $r0;
        boolean $z0;
        short $s1, $s3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 != 0 goto label3;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $c4 = (char) $s1;

        $c0 = (char) $s3;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c0);

        if $i2 >= 0 goto label1;

        $s1 = $s3;

        goto label1;

     label2:
        return $s1;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final kotlin.UByte maxWithOrNull-XMRcp5o(byte[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label2;

        $b0 = $b2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r4;
    }

    public static final kotlin.UInt maxWithOrNull-YmdZ_VM(int[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i2 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i2 >= 0 goto label2;

        $i0 = $i1;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r4;
    }

    public static final kotlin.UShort maxWithOrNull-eOHTfZs(short[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label2;

        $s0 = $s2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r4;
    }

    public static final kotlin.ULong maxWithOrNull-zrEWJaI(long[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label2;

        $l0 = $l2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r4;
    }

    public static final byte maxWithOrThrow-U(byte[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label1;

        $b0 = $b2;

        goto label1;

     label2:
        return $b0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final int maxWithOrThrow-U(int[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i2 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i2 >= 0 goto label1;

        $i0 = $i1;

        goto label1;

     label2:
        return $i0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final long maxWithOrThrow-U(long[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label1;

        $l0 = $l2;

        goto label1;

     label2:
        return $l0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final short maxWithOrThrow-U(short[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 >= 0 goto label1;

        $s0 = $s2;

        goto label1;

     label2:
        return $s0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    private static final kotlin.UByte minByOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label3;

        $b1 = $b0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r2;
    }

    private static final kotlin.ULong minByOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l1;
        int $i2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label3;

        $l1 = $l0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r2;
    }

    private static final kotlin.UInt minByOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label3;

        $i1 = $i0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;
    }

    private static final kotlin.UShort minByOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s1;
        int $i2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minByOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i2 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r2;

     label2:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label3:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label3;

        $s1 = $s0;

        $r4 = $r7;

        goto label3;

     label4:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r2;
    }

    private static final byte minByOrThrow-U(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label4;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i2 != 0 goto label1;

        return $b0;

     label1:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label2;

        $b1 = $b0;

        $r4 = $r7;

        goto label2;

     label3:
        return $b1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final int minByOrThrow-U(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label4;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i2 != 0 goto label1;

        return $i0;

     label1:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label2;

        $i1 = $i0;

        $r4 = $r7;

        goto label2;

     label3:
        return $i1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final long minByOrThrow-U(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l1;
        int $i2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label4;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i2 != 0 goto label1;

        return $l0;

     label1:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label2;

        $l1 = $l0;

        $r4 = $r7;

        goto label2;

     label3:
        return $l1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final short minByOrThrow-U(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s1;
        int $i2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label4;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i2 != 0 goto label1;

        return $s0;

     label1:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label2;

        $s1 = $s0;

        $r4 = $r7;

        goto label2;

     label3:
        return $s1;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label5;

     label5:
        throw $r8;
    }

    private static final double minOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float minOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable minOf-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double minOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float minOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable minOf-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double minOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float minOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable minOf-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final double minOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final float minOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r7;
    }

    private static final java.lang.Comparable minOf-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Comparable minOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double minOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float minOfOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable minOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double minOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float minOfOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable minOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double minOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float minOfOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Comparable minOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Double minOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double $d0, $d1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Double $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;
    }

    private static final java.lang.Float minOfOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0, $f1;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.lang.Float $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minOfOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r7;
    }

    private static final java.lang.Object minOfWith-5NtCtWE(long[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        long[] $r2;
        boolean $z0;
        long $l0;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object minOfWith-LTi4i_s(byte[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte[] $r2;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object minOfWith-l8EHGbQ(short[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        short[] $r2;
        boolean $z0;
        short $s0;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object minOfWith-myNOsp4(int[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        int[] $r2;
        boolean $z0;
        int $i0;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;
        java.util.NoSuchElementException $r8;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i0 <= 0 goto label1;

        $r4 = $r7;

        goto label1;

     label2:
        return $r4;

     label3:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r8;
    }

    private static final java.lang.Object minOfWithOrNull-5NtCtWE(long[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        long[] $r2;
        boolean $z0;
        long $l0;
        kotlin.ULong $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object minOfWithOrNull-LTi4i_s(byte[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte[] $r2;
        boolean $z0;
        byte $b0;
        kotlin.UByte $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object minOfWithOrNull-l8EHGbQ(short[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        short[] $r2;
        boolean $z0;
        short $s0;
        kotlin.UShort $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        int $i1;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i1 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    private static final java.lang.Object minOfWithOrNull-myNOsp4(int[], java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Comparator $r0;
        kotlin.jvm.functions.Function1 $r1;
        int[] $r2;
        boolean $z0;
        int $i0;
        kotlin.UInt $r3;
        java.lang.Object $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$minOfWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r2);

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i0 <= 0 goto label2;

        $r4 = $r7;

        goto label2;

     label3:
        return $r4;
    }

    public static final kotlin.UInt minOrNull--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r1;
        kotlin.collections.IntIterator $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minOrNull");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 <= 0 goto label2;

        $i0 = $i1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r3;
    }

    public static final kotlin.UByte minOrNull-GBYM_sE(byte[])
    {
        short $s0, $s4;
        byte[] $r0;
        boolean $z0;
        byte $b1, $b3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minOrNull");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $s4 = $b1 & 255;

        $s0 = $b3 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s0);

        if $i2 <= 0 goto label2;

        $b1 = $b3;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r3;
    }

    public static final kotlin.ULong minOrNull-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r1;
        int $i1;
        kotlin.collections.IntIterator $r2;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minOrNull");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l2);

        if $i1 <= 0 goto label2;

        $l0 = $l2;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r3;
    }

    public static final kotlin.UShort minOrNull-rL5Bavg(short[])
    {
        char $c0, $c4;
        short[] $r0;
        boolean $z0;
        short $s1, $s3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minOrNull");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $c4 = (char) $s1;

        $c0 = (char) $s3;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c0);

        if $i2 <= 0 goto label2;

        $s1 = $s3;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r3;
    }

    public static final byte minOrThrow-U(byte[])
    {
        short $s0, $s4;
        byte[] $r0;
        boolean $z0;
        byte $b1, $b3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 != 0 goto label3;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $s4 = $b1 & 255;

        $s0 = $b3 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s0);

        if $i2 <= 0 goto label1;

        $b1 = $b3;

        goto label1;

     label2:
        return $b1;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final int minOrThrow-U(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r1;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 <= 0 goto label1;

        $i0 = $i1;

        goto label1;

     label2:
        return $i0;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final long minOrThrow-U(long[])
    {
        long[] $r0;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r1;
        int $i1;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l2);

        if $i1 <= 0 goto label1;

        $l0 = $l2;

        goto label1;

     label2:
        return $l0;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final short minOrThrow-U(short[])
    {
        char $c0, $c4;
        short[] $r0;
        boolean $z0;
        short $s1, $s3;
        kotlin.ranges.IntRange $r1;
        int $i2;
        kotlin.collections.IntIterator $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 != 0 goto label3;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = new kotlin.ranges.IntRange;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $c4 = (char) $s1;

        $c0 = (char) $s3;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c0);

        if $i2 <= 0 goto label1;

        $s1 = $s3;

        goto label1;

     label2:
        return $s1;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r3;
    }

    public static final kotlin.UByte minWithOrNull-XMRcp5o(byte[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label2;

        $b0 = $b2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r4;
    }

    public static final kotlin.UInt minWithOrNull-YmdZ_VM(int[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i2 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i2 <= 0 goto label2;

        $i0 = $i1;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r4;
    }

    public static final kotlin.UShort minWithOrNull-eOHTfZs(short[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label2;

        $s0 = $s2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r4;
    }

    public static final kotlin.ULong minWithOrNull-zrEWJaI(long[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWithOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label2;

        $l0 = $l2;

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r4;
    }

    public static final byte minWithOrThrow-U(byte[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0, $b2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label1;

        $b0 = $b2;

        goto label1;

     label2:
        return $b0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final int minWithOrThrow-U(int[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i2 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i2 <= 0 goto label1;

        $i0 = $i1;

        goto label1;

     label2:
        return $i0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final long minWithOrThrow-U(long[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        long[] $r1;
        boolean $z0;
        long $l0, $l2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label1;

        $l0 = $l2;

        goto label1;

     label2:
        return $l0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    public static final short minWithOrThrow-U(short[], java.util.Comparator)
    {
        java.util.Comparator $r0;
        short[] $r1;
        boolean $z0;
        short $s0, $s2;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;
        java.util.NoSuchElementException $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $i1 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i1 <= 0 goto label1;

        $s0 = $s2;

        goto label1;

     label2:
        return $s0;

     label3:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        goto label4;

     label4:
        throw $r6;
    }

    private static final boolean none--ajY-9A(int[])
    {
        boolean $z0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$none");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        return $z0;
    }

    private static final boolean none-GBYM_sE(byte[])
    {
        boolean $z0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$none");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        return $z0;
    }

    private static final boolean none-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$none");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean none-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$none");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean none-QwZRm1k(long[])
    {
        boolean $z0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$none");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        return $z0;
    }

    private static final boolean none-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$none");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final boolean none-rL5Bavg(short[])
    {
        boolean $z0;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$none");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        return $z0;
    }

    private static final boolean none-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$none");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static final byte[] onEach-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final long[] onEach-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final int[] onEach-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final short[] onEach-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEach");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final byte[] onEachIndexed-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.Integer $r2;
        kotlin.UByte $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final int[] onEachIndexed-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final long[] onEachIndexed-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.Integer $r2;
        kotlin.ULong $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final short[] onEachIndexed-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1, $i2;
        short $s3;
        java.lang.Integer $r2;
        kotlin.UShort $r3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$onEachIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static final long[] plus-3uqUaXg(long[], long)
    {
        long $l0;
        long[] $r0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: long[] plus(long[],long)>($r0, $l0);

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    public static final int[] plus-CFIt9YE(int[], java.util.Collection)
    {
        int[] $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = $i1 + $i2;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.UInt) $r3;

        $i2 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $r0[$i0] = $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final short[] plus-XzdR7RA(short[], short)
    {
        short $s0;
        short[] $r0;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: short[] plus(short[],short)>($r0, $s0);

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final int[] plus-ctEhBpI(int[], int[])
    {
        int[] $r0, $r1;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: int[] plus(int[],int[])>($r1, $r0);

        $r1 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r1);

        return $r1;
    }

    private static final byte[] plus-gMuBH34(byte[], byte)
    {
        byte $b0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: byte[] plus(byte[],byte)>($r0, $b0);

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final byte[] plus-kdPth3s(byte[], byte[])
    {
        byte[] $r0, $r1;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: byte[] plus(byte[],byte[])>($r1, $r0);

        $r1 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r1);

        return $r1;
    }

    public static final long[] plus-kzHmqpY(long[], java.util.Collection)
    {
        long[] $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        kotlin.ULong $r4;
        long $l3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = $i1 + $i2;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.ULong) $r3;

        $l3 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $r0[$i0] = $l3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final short[] plus-mazbYpA(short[], short[])
    {
        short[] $r0, $r1;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: short[] plus(short[],short[])>($r1, $r0);

        $r1 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r1);

        return $r1;
    }

    public static final short[] plus-ojwP5H8(short[], java.util.Collection)
    {
        short[] $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        kotlin.UShort $r4;
        short $s3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = $i1 + $i2;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.UShort) $r3;

        $s3 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        $r0[$i0] = $s3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final int[] plus-uWY9BYg(int[], int)
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: int[] plus(int[],int)>($r0, $i0);

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final long[] plus-us8wMrg(long[], long[])
    {
        long[] $r0, $r1;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: long[] plus(long[],long[])>($r1, $r0);

        $r1 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r1);

        return $r1;
    }

    public static final byte[] plus-xo_DsdI(byte[], java.util.Collection)
    {
        byte[] $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        kotlin.UByte $r4;
        byte $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$plus");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = $i1 + $i2;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, newSize)");

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.UByte) $r3;

        $b3 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        $r0[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final int random--ajY-9A(int[])
    {
        int $i0;
        int[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int random-2D5oskM(int[],kotlin.random.Random)>($r0, $r1);

        return $i0;
    }

    public static final int random-2D5oskM(int[], kotlin.random.Random)
    {
        int[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        java.util.NoSuchElementException $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        return $i0;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array is empty.");

        throw $r2;
    }

    private static final byte random-GBYM_sE(byte[])
    {
        byte $b0;
        byte[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $b0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: byte random-oSF2wD8(byte[],kotlin.random.Random)>($r0, $r1);

        return $b0;
    }

    public static final long random-JzugnMA(long[], kotlin.random.Random)
    {
        long[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        long $l1;
        java.util.NoSuchElementException $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        return $l1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array is empty.");

        throw $r2;
    }

    private static final long random-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $l0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: long random-JzugnMA(long[],kotlin.random.Random)>($r0, $r1);

        return $l0;
    }

    public static final byte random-oSF2wD8(byte[], kotlin.random.Random)
    {
        byte[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        byte $b1;
        java.util.NoSuchElementException $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        return $b1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array is empty.");

        throw $r2;
    }

    private static final short random-rL5Bavg(short[])
    {
        short $s0;
        short[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $s0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: short random-s5X_as8(short[],kotlin.random.Random)>($r0, $r1);

        return $s0;
    }

    public static final short random-s5X_as8(short[], kotlin.random.Random)
    {
        short[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        short $s1;
        java.util.NoSuchElementException $r2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$random");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        return $s1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array is empty.");

        throw $r2;
    }

    private static final kotlin.UInt randomOrNull--ajY-9A(int[])
    {
        kotlin.UInt $r0;
        int[] $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$randomOrNull");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt randomOrNull-2D5oskM(int[],kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.UInt randomOrNull-2D5oskM(int[], kotlin.random.Random)
    {
        int[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$randomOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r2;
    }

    private static final kotlin.UByte randomOrNull-GBYM_sE(byte[])
    {
        kotlin.UByte $r0;
        byte[] $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$randomOrNull");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte randomOrNull-oSF2wD8(byte[],kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.ULong randomOrNull-JzugnMA(long[], kotlin.random.Random)
    {
        long[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        long $l1;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$randomOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r2;
    }

    private static final kotlin.ULong randomOrNull-QwZRm1k(long[])
    {
        kotlin.ULong $r0;
        long[] $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$randomOrNull");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong randomOrNull-JzugnMA(long[],kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.UByte randomOrNull-oSF2wD8(byte[], kotlin.random.Random)
    {
        byte[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        byte $b1;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$randomOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r2;
    }

    private static final kotlin.UShort randomOrNull-rL5Bavg(short[])
    {
        kotlin.UShort $r0;
        short[] $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$randomOrNull");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort randomOrNull-s5X_as8(short[],kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.UShort randomOrNull-s5X_as8(short[], kotlin.random.Random)
    {
        short[] $r0;
        kotlin.random.Random $r1;
        boolean $z0;
        int $i0;
        short $s1;
        kotlin.UShort $r2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$randomOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r2;
    }

    private static final byte reduce-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;
        byte $b0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;
        java.lang.Object $r6;
        java.lang.UnsupportedOperationException $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UByte) $r6;

        $b0 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        goto label1;

     label2:
        return $b0;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r7;
    }

    private static final int reduce-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;
        java.lang.Object $r6;
        java.lang.UnsupportedOperationException $r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UInt) $r6;

        $i0 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        goto label1;

     label2:
        return $i0;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r7;
    }

    private static final long reduce-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;
        long $l0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;
        java.lang.Object $r6;
        java.lang.UnsupportedOperationException $r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.ULong) $r6;

        $l0 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        goto label1;

     label2:
        return $l0;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r7;
    }

    private static final short reduce-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;
        short $s0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;
        java.lang.Object $r6;
        java.lang.UnsupportedOperationException $r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UShort) $r6;

        $s0 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        goto label1;

     label2:
        return $s0;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r7;
    }

    private static final int reduceIndexed-D40WMg8(int[], kotlin.jvm.functions.Function3)
    {
        int[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        boolean $z0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UInt $r5, $r6;
        java.lang.Object $r7;
        java.lang.UnsupportedOperationException $r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 != 0 goto label3;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UInt) $r7;

        $i0 = virtualinvoke $r5.<kotlin.UInt: int unbox-impl()>();

        goto label1;

     label2:
        return $i0;

     label3:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r8;
    }

    private static final byte reduceIndexed-EOyYB1Y(byte[], kotlin.jvm.functions.Function3)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        boolean $z0;
        byte $b0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UByte $r5, $r6;
        java.lang.Object $r7;
        java.lang.UnsupportedOperationException $r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 != 0 goto label3;

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UByte) $r7;

        $b0 = virtualinvoke $r5.<kotlin.UByte: byte unbox-impl()>();

        goto label1;

     label2:
        return $b0;

     label3:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r8;
    }

    private static final short reduceIndexed-aLgx1Fo(short[], kotlin.jvm.functions.Function3)
    {
        short[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        boolean $z0;
        short $s0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UShort $r5, $r6;
        java.lang.Object $r7;
        java.lang.UnsupportedOperationException $r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 != 0 goto label3;

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UShort) $r7;

        $s0 = virtualinvoke $r5.<kotlin.UShort: short unbox-impl()>();

        goto label1;

     label2:
        return $s0;

     label3:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r8;
    }

    private static final long reduceIndexed-z1zDJgo(long[], kotlin.jvm.functions.Function3)
    {
        long[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        boolean $z0;
        long $l0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.ULong $r5, $r6;
        java.lang.Object $r7;
        java.lang.UnsupportedOperationException $r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.ULong) $r7;

        $l0 = virtualinvoke $r5.<kotlin.ULong: long unbox-impl()>();

        goto label1;

     label2:
        return $l0;

     label3:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r8;
    }

    private static final kotlin.UInt reduceIndexedOrNull-D40WMg8(int[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UInt $r5, $r6;
        java.lang.Object $r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UInt) $r7;

        $i0 = virtualinvoke $r5.<kotlin.UInt: int unbox-impl()>();

        goto label2;

     label3:
        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r5;
    }

    private static final kotlin.UByte reduceIndexedOrNull-EOyYB1Y(byte[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UByte $r5, $r6;
        java.lang.Object $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UByte) $r7;

        $b0 = virtualinvoke $r5.<kotlin.UByte: byte unbox-impl()>();

        goto label2;

     label3:
        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r5;
    }

    private static final kotlin.UShort reduceIndexedOrNull-aLgx1Fo(short[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.UShort $r5, $r6;
        java.lang.Object $r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.UShort) $r7;

        $s0 = virtualinvoke $r5.<kotlin.UShort: short unbox-impl()>();

        goto label2;

     label3:
        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r5;
    }

    private static final kotlin.ULong reduceIndexedOrNull-z1zDJgo(long[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        java.lang.Integer $r4;
        kotlin.ULong $r5, $r6;
        java.lang.Object $r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r5, $r6);

        $r5 = (kotlin.ULong) $r7;

        $l0 = virtualinvoke $r5.<kotlin.ULong: long unbox-impl()>();

        goto label2;

     label3:
        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r5;
    }

    private static final kotlin.UByte reduceOrNull-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        byte[] $r1;
        boolean $z0;
        byte $b0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UByte $r4, $r5;
        java.lang.Object $r6;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UByte) $r6;

        $b0 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        return $r4;
    }

    private static final kotlin.UInt reduceOrNull-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        kotlin.UInt $r4, $r5;
        java.lang.Object $r6;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UInt) $r6;

        $i0 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r4;
    }

    private static final kotlin.ULong reduceOrNull-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        long[] $r1;
        boolean $z0;
        long $l0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.ULong $r4, $r5;
        java.lang.Object $r6;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.ULong) $r6;

        $l0 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r4;
    }

    private static final kotlin.UShort reduceOrNull-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        short[] $r1;
        boolean $z0;
        short $s0;
        kotlin.ranges.IntRange $r2;
        int $i1;
        kotlin.collections.IntIterator $r3;
        kotlin.UShort $r4, $r5;
        java.lang.Object $r6;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, 0);

        $r2 = new kotlin.ranges.IntRange;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UShort) $r6;

        $s0 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        goto label2;

     label3:
        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        return $r4;
    }

    private static final byte reduceRight-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        int $i0, $i1;
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        byte $b2, $b3;
        kotlin.UByte $r2, $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UByte) $r4;

        $b2 = virtualinvoke $r2.<kotlin.UByte: byte unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $b2;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final int reduceRight-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.UInt $r2, $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UInt) $r4;

        $i2 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i0;

        goto label1;

     label2:
        return $i2;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final long reduceRight-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        int $i0, $i1;
        long $l2, $l3;
        kotlin.ULong $r2, $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.ULong) $r4;

        $l2 = virtualinvoke $r2.<kotlin.ULong: long unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $l2;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final short reduceRight-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        int $i0, $i1;
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        short $s2, $s3;
        kotlin.UShort $r2, $r3;
        java.lang.Object $r4;
        java.lang.UnsupportedOperationException $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRight");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UShort) $r4;

        $s2 = virtualinvoke $r2.<kotlin.UShort: short unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $s2;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r5;
    }

    private static final int reduceRightIndexed-D40WMg8(int[], kotlin.jvm.functions.Function3)
    {
        int[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2;
        kotlin.UInt $r3, $r4;
        java.lang.Object $r5;
        java.lang.UnsupportedOperationException $r6;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UInt) $r5;

        $i0 = virtualinvoke $r3.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $i0;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r6;
    }

    private static final byte reduceRightIndexed-EOyYB1Y(byte[], kotlin.jvm.functions.Function3)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        int $i0, $i1;
        byte $b2, $b3;
        java.lang.Integer $r2;
        kotlin.UByte $r3, $r4;
        java.lang.Object $r5;
        java.lang.UnsupportedOperationException $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UByte) $r5;

        $b2 = virtualinvoke $r3.<kotlin.UByte: byte unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $b2;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r6;
    }

    private static final short reduceRightIndexed-aLgx1Fo(short[], kotlin.jvm.functions.Function3)
    {
        short[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        int $i0, $i1;
        short $s2, $s3;
        java.lang.Integer $r2;
        kotlin.UShort $r3, $r4;
        java.lang.Object $r5;
        java.lang.UnsupportedOperationException $r6;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UShort) $r5;

        $s2 = virtualinvoke $r3.<kotlin.UShort: short unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $s2;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r6;
    }

    private static final long reduceRightIndexed-z1zDJgo(long[], kotlin.jvm.functions.Function3)
    {
        long[] $r0;
        kotlin.jvm.functions.Function3 $r1;
        int $i0, $i1;
        long $l2, $l3;
        java.lang.Integer $r2;
        kotlin.ULong $r3, $r4;
        java.lang.Object $r5;
        java.lang.UnsupportedOperationException $r6;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reduceRightIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

     label1:
        if $i1 < 0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.ULong) $r5;

        $l2 = virtualinvoke $r3.<kotlin.ULong: long unbox-impl()>();

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return $l2;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty array can\'t be reduced.");

        goto label4;

     label4:
        throw $r6;
    }

    private static final kotlin.UInt reduceRightIndexedOrNull-D40WMg8(int[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2;
        kotlin.UInt $r3, $r4;
        java.lang.Object $r5;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UInt) $r5;

        $i0 = virtualinvoke $r3.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r3;
    }

    private static final kotlin.UByte reduceRightIndexedOrNull-EOyYB1Y(byte[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2, $b3;
        java.lang.Integer $r2;
        kotlin.UByte $r3, $r4;
        java.lang.Object $r5;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UByte) $r5;

        $b2 = virtualinvoke $r3.<kotlin.UByte: byte unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r3;
    }

    private static final kotlin.UShort reduceRightIndexedOrNull-aLgx1Fo(short[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        short[] $r1;
        int $i0, $i1;
        short $s2, $s3;
        java.lang.Integer $r2;
        kotlin.UShort $r3, $r4;
        java.lang.Object $r5;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.UShort) $r5;

        $s2 = virtualinvoke $r3.<kotlin.UShort: short unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r3;
    }

    private static final kotlin.ULong reduceRightIndexedOrNull-z1zDJgo(long[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2, $l3;
        java.lang.Integer $r2;
        kotlin.ULong $r3, $r4;
        java.lang.Object $r5;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightIndexedOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        $r3 = (kotlin.ULong) $r5;

        $l2 = virtualinvoke $r3.<kotlin.ULong: long unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r3;
    }

    private static final kotlin.UByte reduceRightOrNull-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2, $b3;
        kotlin.UByte $r2, $r3;
        java.lang.Object $r4;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UByte) $r4;

        $b2 = virtualinvoke $r2.<kotlin.UByte: byte unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        return $r2;
    }

    private static final kotlin.UInt reduceRightOrNull-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        kotlin.UInt $r2, $r3;
        java.lang.Object $r4;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $i0 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UInt) $r4;

        $i2 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i0;

        goto label2;

     label3:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        return $r2;
    }

    private static final kotlin.ULong reduceRightOrNull-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        long[] $r1;
        int $i0, $i1;
        long $l2, $l3;
        kotlin.ULong $r2, $r3;
        java.lang.Object $r4;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.ULong) $r4;

        $l2 = virtualinvoke $r2.<kotlin.ULong: long unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        return $r2;
    }

    private static final kotlin.UShort reduceRightOrNull-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int $i0, $i1;
        short[] $r1;
        short $s2, $s3;
        kotlin.UShort $r2, $r3;
        java.lang.Object $r4;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$reduceRightOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

     label2:
        if $i1 < 0 goto label3;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (kotlin.UShort) $r4;

        $s2 = virtualinvoke $r2.<kotlin.UShort: short unbox-impl()>();

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        return $r2;
    }

    private static final void reverse--ajY-9A(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(int[])>($r0);

        return;
    }

    private static final void reverse--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(long[],int,int)>($r0, $i0, $i1);

        return;
    }

    private static final void reverse-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    private static final void reverse-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(short[],int,int)>($r0, $i0, $i1);

        return;
    }

    private static final void reverse-GBYM_sE(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(byte[])>($r0);

        return;
    }

    private static final void reverse-QwZRm1k(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(long[])>($r0);

        return;
    }

    private static final void reverse-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(int[],int,int)>($r0, $i0, $i1);

        return;
    }

    private static final void reverse-rL5Bavg(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reverse");

        staticinvoke <kotlin.collections.ArraysKt: void reverse(short[])>($r0);

        return;
    }

    public static final java.util.List reversed--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        java.util.List $r1;
        kotlin.UIntArray $r2;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversed");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = staticinvoke <kotlin.UIntArray: kotlin.UIntArray box-impl(int[])>($r0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r2);

        staticinvoke <kotlin.collections.CollectionsKt: void reverse(java.util.List)>($r1);

        return $r1;
    }

    public static final java.util.List reversed-GBYM_sE(byte[])
    {
        byte[] $r0;
        boolean $z0;
        java.util.List $r1;
        kotlin.UByteArray $r2;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversed");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = staticinvoke <kotlin.UByteArray: kotlin.UByteArray box-impl(byte[])>($r0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r2);

        staticinvoke <kotlin.collections.CollectionsKt: void reverse(java.util.List)>($r1);

        return $r1;
    }

    public static final java.util.List reversed-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        java.util.List $r1;
        kotlin.ULongArray $r2;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversed");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = staticinvoke <kotlin.ULongArray: kotlin.ULongArray box-impl(long[])>($r0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r2);

        staticinvoke <kotlin.collections.CollectionsKt: void reverse(java.util.List)>($r1);

        return $r1;
    }

    public static final java.util.List reversed-rL5Bavg(short[])
    {
        short[] $r0;
        boolean $z0;
        java.util.List $r1;
        kotlin.UShortArray $r2;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversed");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = staticinvoke <kotlin.UShortArray: kotlin.UShortArray box-impl(short[])>($r0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r2);

        staticinvoke <kotlin.collections.CollectionsKt: void reverse(java.util.List)>($r1);

        return $r1;
    }

    private static final int[] reversedArray--ajY-9A(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversedArray");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: int[] reversedArray(int[])>($r0);

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final byte[] reversedArray-GBYM_sE(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversedArray");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: byte[] reversedArray(byte[])>($r0);

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final long[] reversedArray-QwZRm1k(long[])
    {
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversedArray");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: long[] reversedArray(long[])>($r0);

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    private static final short[] reversedArray-rL5Bavg(short[])
    {
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$reversedArray");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: short[] reversedArray(short[])>($r0);

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final java.util.List runningFold-A8wKCXQ(long[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        long[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r5;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFold-yXmHNn8(byte[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        byte[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r5;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFold-zi1B2BA(int[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1, $i2;
        kotlin.UInt $r5;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFold-zww5nb8(short[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        short[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r5;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFold");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFoldIndexed-3iWJZGE(byte[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        byte[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        byte $b2;
        kotlin.UByte $r6;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFoldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFoldIndexed-bzxtMww(short[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        short[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        short $s2;
        kotlin.UShort $r6;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFoldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFoldIndexed-mwnnOCs(long[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        long[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        long $l2;
        kotlin.ULong $r6;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFoldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningFoldIndexed-yVwIW0Q(int[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        int[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1, $i2;
        java.lang.Integer $r5;
        kotlin.UInt $r6;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$runningFoldIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List runningReduce-ELGow60(byte[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.util.ArrayList $r1, r7;
        byte[] $r2;
        boolean $z0;
        java.util.List $r3;
        byte $b0, $b1;
        int $i2, $i3;
        kotlin.UByte $r4, $r5;
        java.lang.Object $r6;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $b1 = $b0;

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r2);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i3);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UByte) $r6;

        $b0 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        $b1 = $b0;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduce-WyvcNBI(int[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.util.ArrayList $r1, r7;
        int[] $r2;
        boolean $z0;
        java.util.List $r3;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r4, $r5;
        java.lang.Object $r6;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $i1 = $i0;

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r2);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r2);

        $i2 = 1;

     label2:
        if $i2 >= $i0 goto label3;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i2);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UInt) $r6;

        $i3 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i3;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduce-s8dVfGU(long[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.util.ArrayList $r1, r7;
        long[] $r2;
        boolean $z0;
        java.util.List $r3;
        long $l0, $l1;
        int $i2, $i3;
        kotlin.ULong $r4, $r5;
        java.lang.Object $r6;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $l1 = $l0;

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r2);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i3);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.ULong) $r6;

        $l0 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l1 = $l0;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduce-xzaTVY8(short[], kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.util.ArrayList $r1, r7;
        short[] $r2;
        boolean $z0;
        java.util.List $r3;
        short $s0, $s1;
        int $i2, $i3;
        kotlin.UShort $r4, $r5;
        java.lang.Object $r6;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduce");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $s1 = $s0;

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r2);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i3);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r4 = (kotlin.UShort) $r6;

        $s0 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        $s1 = $s0;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduceIndexed-D40WMg8(int[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        java.util.ArrayList $r1, r8;
        int[] $r2;
        boolean $z0;
        java.util.List $r3;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r4, $r6;
        java.lang.Integer $r5;
        java.lang.Object $r7;

        $r2 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, 0);

        $i1 = $i0;

        r8 = new java.util.ArrayList;

        $r1 = r8;

        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r2);

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r2);

        $i2 = 1;

     label2:
        if $i2 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r2, $i2);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r4, $r6);

        $r4 = (kotlin.UInt) $r7;

        $i3 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i1 = $i3;

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduceIndexed-EOyYB1Y(byte[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        java.util.ArrayList $r1, r8;
        byte[] $r2;
        boolean $z0;
        java.util.List $r3;
        byte $b0, $b1;
        int $i2, $i3;
        kotlin.UByte $r4, $r6;
        java.lang.Integer $r5;
        java.lang.Object $r7;

        $r2 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, 0);

        $b1 = $b0;

        r8 = new java.util.ArrayList;

        $r1 = r8;

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r2);

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r2, $i3);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r4, $r6);

        $r4 = (kotlin.UByte) $r7;

        $b0 = virtualinvoke $r4.<kotlin.UByte: byte unbox-impl()>();

        $b1 = $b0;

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduceIndexed-aLgx1Fo(short[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        java.util.ArrayList $r1, r8;
        short[] $r2;
        boolean $z0;
        java.util.List $r3;
        short $s0, $s1;
        int $i2, $i3;
        kotlin.UShort $r4, $r6;
        java.lang.Integer $r5;
        java.lang.Object $r7;

        $r2 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, 0);

        $s1 = $s0;

        r8 = new java.util.ArrayList;

        $r1 = r8;

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r2);

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r2, $i3);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r4, $r6);

        $r4 = (kotlin.UShort) $r7;

        $s0 = virtualinvoke $r4.<kotlin.UShort: short unbox-impl()>();

        $s1 = $s0;

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List runningReduceIndexed-z1zDJgo(long[], kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        java.util.ArrayList $r1, r8;
        long[] $r2;
        boolean $z0;
        java.util.List $r3;
        long $l0, $l1;
        int $i2, $i3;
        kotlin.ULong $r4, $r6;
        java.lang.Integer $r5;
        java.lang.Object $r7;

        $r2 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$runningReduceIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, 0);

        $l1 = $l0;

        r8 = new java.util.ArrayList;

        $r1 = r8;

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r2);

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r2);

        $i3 = 1;

     label2:
        if $i3 >= $i2 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r2, $i3);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r4, $r6);

        $r4 = (kotlin.ULong) $r7;

        $l0 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l1 = $l0;

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r1;

        return $r3;
    }

    private static final java.util.List scan-A8wKCXQ(long[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        long[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r5;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scan");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scan-yXmHNn8(byte[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        byte[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r5;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scan");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scan-zi1B2BA(int[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        int[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1, $i2;
        kotlin.UInt $r5;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scan");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scan-zww5nb8(short[], java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        short[] $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r7;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r5;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scan");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r2 = $r6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scanIndexed-3iWJZGE(byte[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        byte[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        byte $b2;
        kotlin.UByte $r6;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scanIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scanIndexed-bzxtMww(short[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        short[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        short $s2;
        kotlin.UShort $r6;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scanIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scanIndexed-mwnnOCs(long[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        long[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1;
        java.lang.Integer $r5;
        long $l2;
        kotlin.ULong $r6;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scanIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private static final java.util.List scanIndexed-yVwIW0Q(int[], java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        int[] $r1;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r3;
        java.util.ArrayList $r4, r8;
        int $i0, $i1, $i2;
        java.lang.Integer $r5;
        kotlin.UInt $r6;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$scanIndexed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "operation");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r4 = r8;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r7 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r6);

        $r2 = $r7;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    public static final void shuffle--ajY-9A(int[])
    {
        int[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void shuffle-2D5oskM(int[],kotlin.random.Random)>($r0, $r1);

        return;
    }

    public static final void shuffle-2D5oskM(int[], kotlin.random.Random)
    {
        int[] $r0;
        kotlin.random.Random $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

     label1:
        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $i1 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i1);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        staticinvoke <kotlin.UIntArray: void set-VXSXFK8(int[],int,int)>($r0, $i0, $i3);

        staticinvoke <kotlin.UIntArray: void set-VXSXFK8(int[],int,int)>($r0, $i1, $i2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    public static final void shuffle-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void shuffle-oSF2wD8(byte[],kotlin.random.Random)>($r0, $r1);

        return;
    }

    public static final void shuffle-JzugnMA(long[], kotlin.random.Random)
    {
        long[] $r0;
        kotlin.random.Random $r1;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

     label1:
        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $i1 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i1);

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        staticinvoke <kotlin.ULongArray: void set-k8EXiF4(long[],int,long)>($r0, $i0, $l3);

        staticinvoke <kotlin.ULongArray: void set-k8EXiF4(long[],int,long)>($r0, $i1, $l2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    public static final void shuffle-QwZRm1k(long[])
    {
        long[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void shuffle-JzugnMA(long[],kotlin.random.Random)>($r0, $r1);

        return;
    }

    public static final void shuffle-oSF2wD8(byte[], kotlin.random.Random)
    {
        byte[] $r0;
        kotlin.random.Random $r1;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

     label1:
        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $i1 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i1);

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        staticinvoke <kotlin.UByteArray: void set-VurrAj0(byte[],int,byte)>($r0, $i0, $b3);

        staticinvoke <kotlin.UByteArray: void set-VurrAj0(byte[],int,byte)>($r0, $i1, $b2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    public static final void shuffle-rL5Bavg(short[])
    {
        short[] $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void shuffle-s5X_as8(short[],kotlin.random.Random)>($r0, $r1);

        return;
    }

    public static final void shuffle-s5X_as8(short[], kotlin.random.Random)
    {
        short[] $r0;
        kotlin.random.Random $r1;
        int $i0, $i1;
        short $s2, $s3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$shuffle");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

     label1:
        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $i1 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i1);

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        staticinvoke <kotlin.UShortArray: void set-01HTLdE(short[],int,short)>($r0, $i0, $s3);

        staticinvoke <kotlin.UShortArray: void set-01HTLdE(short[],int,short)>($r0, $i1, $s2);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    private static final int single--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int single(int[])>($r0);

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    private static final byte single-GBYM_sE(byte[])
    {
        byte[] $r0;
        byte $b0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        $b0 = staticinvoke <kotlin.collections.ArraysKt: byte single(byte[])>($r0);

        $b0 = staticinvoke <kotlin.UByte: byte constructor-impl(byte)>($b0);

        return $b0;
    }

    private static final byte single-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.UByte $r2, $r3;
        boolean $z0, $z1;
        byte $b2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.lang.IllegalArgumentException $r6;
        java.util.NoSuchElementException $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $r2 = null;

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $z0 = 1;

        goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array contains more than one matching element.");

        throw $r6;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        $b2 = virtualinvoke $r2.<kotlin.UByte: byte unbox-impl()>();

        return $b2;

     label5:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label6;

     label6:
        throw $r7;
    }

    private static final long single-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.ULong $r2, $r3;
        boolean $z0, $z1;
        long $l2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.lang.IllegalArgumentException $r6;
        java.util.NoSuchElementException $r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $r2 = null;

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $z0 = 1;

        goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array contains more than one matching element.");

        throw $r6;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        $l2 = virtualinvoke $r2.<kotlin.ULong: long unbox-impl()>();

        return $l2;

     label5:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label6;

     label6:
        throw $r7;
    }

    private static final long single-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        $l0 = staticinvoke <kotlin.collections.ArraysKt: long single(long[])>($r0);

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final int single-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2, $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.lang.IllegalArgumentException $r6;
        java.util.NoSuchElementException $r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $r2 = null;

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $z0 = 1;

        goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array contains more than one matching element.");

        throw $r6;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        $i0 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        return $i0;

     label5:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label6;

     label6:
        throw $r7;
    }

    private static final short single-rL5Bavg(short[])
    {
        short[] $r0;
        short $s0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        $s0 = staticinvoke <kotlin.collections.ArraysKt: short single(short[])>($r0);

        $s0 = staticinvoke <kotlin.UShort: short constructor-impl(short)>($s0);

        return $s0;
    }

    private static final short single-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.UShort $r2, $r3;
        boolean $z0, $z1;
        short $s2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        java.lang.IllegalArgumentException $r6;
        java.util.NoSuchElementException $r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$single");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $r2 = null;

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $z0 = 1;

        goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array contains more than one matching element.");

        throw $r6;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        $s2 = virtualinvoke $r2.<kotlin.UShort: short unbox-impl()>();

        return $s2;

     label5:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array contains no element matching the predicate.");

        goto label6;

     label6:
        throw $r7;
    }

    public static final kotlin.UInt singleOrNull--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;
        kotlin.UInt $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        if $i0 != 1 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;

     label1:
        return null;
    }

    public static final kotlin.UByte singleOrNull-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;
        byte $b1;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        if $i0 != 1 goto label1;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r1;

     label1:
        return null;
    }

    private static final kotlin.UByte singleOrNull-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.UByte $r2, $r3;
        boolean $z0, $z1;
        byte $b2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $r2 = null;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $z0 = 1;

        goto label3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 != 0 goto label5;

        return null;

     label5:
        return $r2;
    }

    private static final kotlin.ULong singleOrNull-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.ULong $r2, $r3;
        boolean $z0, $z1;
        long $l2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $r2 = null;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $z0 = 1;

        goto label3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 != 0 goto label5;

        return null;

     label5:
        return $r2;
    }

    public static final kotlin.ULong singleOrNull-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;
        long $l1;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        if $i0 != 1 goto label1;

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r1;

     label1:
        return null;
    }

    private static final kotlin.UInt singleOrNull-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2, $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $r2 = null;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $z0 = 1;

        goto label3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 != 0 goto label5;

        return null;

     label5:
        return $r2;
    }

    public static final kotlin.UShort singleOrNull-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;
        short $s1;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        if $i0 != 1 goto label1;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r1 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r1;

     label1:
        return null;
    }

    private static final kotlin.UShort singleOrNull-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        kotlin.UShort $r2, $r3;
        boolean $z0, $z1;
        short $s2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $r2 = null;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $z0 = 1;

        goto label3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 != 0 goto label5;

        return null;

     label5:
        return $r2;
    }

    public static final java.util.List slice-F7u83W8(long[], java.lang.Iterable)
    {
        java.util.ArrayList $r0, r8;
        long[] $r1;
        java.lang.Iterable $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Number $r6;
        long $l1;
        kotlin.ULong $r7;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "indices");

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r0 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

        $r7 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r3 = (java.util.List) $r0;

        return $r3;
    }

    public static final java.util.List slice-HwE9HBo(int[], java.lang.Iterable)
    {
        java.util.ArrayList $r0, r8;
        int[] $r1;
        java.lang.Iterable $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Number $r6;
        kotlin.UInt $r7;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "indices");

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r0 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r7 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r3 = (java.util.List) $r0;

        return $r3;
    }

    public static final java.util.List slice-JGPC0-M(short[], java.lang.Iterable)
    {
        java.util.ArrayList $r0, r8;
        short[] $r1;
        java.lang.Iterable $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Number $r6;
        short $s1;
        kotlin.UShort $r7;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "indices");

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r0 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

        $r7 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r3 = (java.util.List) $r0;

        return $r3;
    }

    public static final java.util.List slice-JQknh5Q(byte[], java.lang.Iterable)
    {
        java.util.ArrayList $r0, r8;
        byte[] $r1;
        java.lang.Iterable $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Number $r6;
        byte $b1;
        kotlin.UByte $r7;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "indices");

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r3;

     label1:
        r8 = new java.util.ArrayList;

        $r0 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

        $r7 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r3 = (java.util.List) $r0;

        return $r3;
    }

    public static final java.util.List slice-Q6IL4kU(short[], kotlin.ranges.IntRange)
    {
        short[] $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Integer $r3;
        int $i0, $i1;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "indices");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = staticinvoke <kotlin.collections.ArraysKt: short[] copyOfRange(short[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-rL5Bavg(short[])>($r0);

        return $r2;
    }

    public static final java.util.List slice-ZRhS8yI(long[], kotlin.ranges.IntRange)
    {
        long[] $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Integer $r3;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "indices");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = staticinvoke <kotlin.collections.ArraysKt: long[] copyOfRange(long[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-QwZRm1k(long[])>($r0);

        return $r2;
    }

    public static final java.util.List slice-c0bezYM(byte[], kotlin.ranges.IntRange)
    {
        byte[] $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Integer $r3;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "indices");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyOfRange(byte[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-GBYM_sE(byte[])>($r0);

        return $r2;
    }

    public static final java.util.List slice-tAntMlw(int[], kotlin.ranges.IntRange)
    {
        int[] $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Integer $r3;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$slice");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "indices");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = staticinvoke <kotlin.collections.ArraysKt: int[] copyOfRange(int[],int,int)>($r0, $i0, $i1);

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList--ajY-9A(int[])>($r0);

        return $r2;
    }

    public static final int[] sliceArray-CFIt9YE(int[], java.util.Collection)
    {
        java.util.Collection $r0;
        int[] $r1;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: int[] sliceArray(int[],java.util.Collection)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r1);

        return $r1;
    }

    public static final short[] sliceArray-Q6IL4kU(short[], kotlin.ranges.IntRange)
    {
        kotlin.ranges.IntRange $r0;
        short[] $r1;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: short[] sliceArray(short[],kotlin.ranges.IntRange)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r1);

        return $r1;
    }

    public static final long[] sliceArray-ZRhS8yI(long[], kotlin.ranges.IntRange)
    {
        kotlin.ranges.IntRange $r0;
        long[] $r1;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: long[] sliceArray(long[],kotlin.ranges.IntRange)>($r1, $r0);

        $r1 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r1);

        return $r1;
    }

    public static final byte[] sliceArray-c0bezYM(byte[], kotlin.ranges.IntRange)
    {
        kotlin.ranges.IntRange $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: byte[] sliceArray(byte[],kotlin.ranges.IntRange)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r1);

        return $r1;
    }

    public static final long[] sliceArray-kzHmqpY(long[], java.util.Collection)
    {
        java.util.Collection $r0;
        long[] $r1;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: long[] sliceArray(long[],java.util.Collection)>($r1, $r0);

        $r1 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r1);

        return $r1;
    }

    public static final short[] sliceArray-ojwP5H8(short[], java.util.Collection)
    {
        java.util.Collection $r0;
        short[] $r1;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: short[] sliceArray(short[],java.util.Collection)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r1);

        return $r1;
    }

    public static final int[] sliceArray-tAntMlw(int[], kotlin.ranges.IntRange)
    {
        kotlin.ranges.IntRange $r0;
        int[] $r1;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: int[] sliceArray(int[],kotlin.ranges.IntRange)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r1);

        return $r1;
    }

    public static final byte[] sliceArray-xo_DsdI(byte[], java.util.Collection)
    {
        java.util.Collection $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$sliceArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "indices");

        $r1 = staticinvoke <kotlin.collections.ArraysKt: byte[] sliceArray(byte[],java.util.Collection)>($r1, $r0);

        $r1 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r1);

        return $r1;
    }

    public static final void sort--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        if $i0 <= 1 goto label1;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-oBK06Vg(int[],int,int)>($r0, 0, $i0);

     label1:
        return;
    }

    public static final void sort--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2;
        kotlin.collections.AbstractList$Companion $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i0, $i1, $i2);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray--nroSd4(long[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static void sort--nroSd4$default(long[], int, int, int, java.lang.Object)
    {
        long[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 := @parameter0: long[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--nroSd4(long[],int,int)>($r0, $i1, $i0);

        return;
    }

    public static final void sort-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2;
        kotlin.collections.AbstractList$Companion $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i0, $i1, $i2);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-4UcCI2c(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static void sort-4UcCI2c$default(byte[], int, int, int, java.lang.Object)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-4UcCI2c(byte[],int,int)>($r0, $i1, $i0);

        return;
    }

    public static final void sort-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1, $i2;
        kotlin.collections.AbstractList$Companion $r1;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i0, $i1, $i2);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-Aa5vz7o(short[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static void sort-Aa5vz7o$default(short[], int, int, int, java.lang.Object)
    {
        short[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 := @parameter0: short[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-Aa5vz7o(short[],int,int)>($r0, $i1, $i0);

        return;
    }

    public static final void sort-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        if $i0 <= 1 goto label1;

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-4UcCI2c(byte[],int,int)>($r0, 0, $i0);

     label1:
        return;
    }

    public static final void sort-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        if $i0 <= 1 goto label1;

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray--nroSd4(long[],int,int)>($r0, 0, $i0);

     label1:
        return;
    }

    public static final void sort-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;
        kotlin.collections.AbstractList$Companion $r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i0, $i1, $i2);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-oBK06Vg(int[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static void sort-oBK06Vg$default(int[], int, int, int, java.lang.Object)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 := @parameter0: int[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

     label2:
        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-oBK06Vg(int[],int,int)>($r0, $i1, $i0);

        return;
    }

    public static final void sort-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sort");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        if $i0 <= 1 goto label1;

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        staticinvoke <kotlin.collections.UArraySortingKt: void sortArray-Aa5vz7o(short[],int,int)>($r0, 0, $i0);

     label1:
        return;
    }

    public static final void sortDescending--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        if $i0 <= 1 goto label1;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--ajY-9A(int[])>($r0);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(int[])>($r0);

     label1:
        return;
    }

    public static final void sortDescending--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--nroSd4(long[],int,int)>($r0, $i0, $i1);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(long[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortDescending-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-4UcCI2c(byte[],int,int)>($r0, $i0, $i1);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortDescending-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-Aa5vz7o(short[],int,int)>($r0, $i0, $i1);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(short[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortDescending-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        if $i0 <= 1 goto label1;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-GBYM_sE(byte[])>($r0);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(byte[])>($r0);

     label1:
        return;
    }

    public static final void sortDescending-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        if $i0 <= 1 goto label1;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-QwZRm1k(long[])>($r0);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(long[])>($r0);

     label1:
        return;
    }

    public static final void sortDescending-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-oBK06Vg(int[],int,int)>($r0, $i0, $i1);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(int[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortDescending-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortDescending");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        if $i0 <= 1 goto label1;

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-rL5Bavg(short[])>($r0);

        staticinvoke <kotlin.collections.ArraysKt: void reverse(short[])>($r0);

     label1:
        return;
    }

    public static final java.util.List sorted--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sorted");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--ajY-9A(int[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList--ajY-9A(int[])>($r0);

        return $r1;
    }

    public static final java.util.List sorted-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sorted");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-GBYM_sE(byte[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-GBYM_sE(byte[])>($r0);

        return $r1;
    }

    public static final java.util.List sorted-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sorted");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-QwZRm1k(long[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-QwZRm1k(long[])>($r0);

        return $r1;
    }

    public static final java.util.List sorted-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sorted");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-rL5Bavg(short[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List asList-rL5Bavg(short[])>($r0);

        return $r1;
    }

    public static final int[] sortedArray--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArray");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--ajY-9A(int[])>($r0);

        return $r0;
    }

    public static final byte[] sortedArray-GBYM_sE(byte[])
    {
        byte[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArray");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-GBYM_sE(byte[])>($r0);

        return $r0;
    }

    public static final long[] sortedArray-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArray");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-QwZRm1k(long[])>($r0);

        return $r0;
    }

    public static final short[] sortedArray-rL5Bavg(short[])
    {
        short[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArray");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-rL5Bavg(short[])>($r0);

        return $r0;
    }

    public static final int[] sortedArrayDescending--ajY-9A(int[])
    {
        int[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArrayDescending");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sortDescending--ajY-9A(int[])>($r0);

        return $r0;
    }

    public static final byte[] sortedArrayDescending-GBYM_sE(byte[])
    {
        byte[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArrayDescending");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sortDescending-GBYM_sE(byte[])>($r0);

        return $r0;
    }

    public static final long[] sortedArrayDescending-QwZRm1k(long[])
    {
        long[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArrayDescending");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sortDescending-QwZRm1k(long[])>($r0);

        return $r0;
    }

    public static final short[] sortedArrayDescending-rL5Bavg(short[])
    {
        short[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedArrayDescending");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sortDescending-rL5Bavg(short[])>($r0);

        return $r0;
    }

    public static final java.util.List sortedDescending--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedDescending");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort--ajY-9A(int[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List reversed--ajY-9A(int[])>($r0);

        return $r1;
    }

    public static final java.util.List sortedDescending-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedDescending");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-GBYM_sE(byte[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List reversed-GBYM_sE(byte[])>($r0);

        return $r1;
    }

    public static final java.util.List sortedDescending-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedDescending");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-QwZRm1k(long[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List reversed-QwZRm1k(long[])>($r0);

        return $r1;
    }

    public static final java.util.List sortedDescending-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sortedDescending");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        staticinvoke <kotlin.collections.unsigned.UArraysKt: void sort-rL5Bavg(short[])>($r0);

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List reversed-rL5Bavg(short[])>($r0);

        return $r1;
    }

    private static final int sum--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sum");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int sum(int[])>($r0);

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    private static final int sum-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i5;
        byte $b3;
        short $s4;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sum");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $s4 = $b3 & 255;

        $i5 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s4);

        $i2 = $i2 + $i5;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final long sum-QwZRm1k(long[])
    {
        long[] $r0;
        long $l0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sum");

        $l0 = staticinvoke <kotlin.collections.ArraysKt: long sum(long[])>($r0);

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final int sum-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0, $i1, $i2, $i5;
        short $s3;
        char $c4;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sum");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $c4 = (char) $s3;

        $i5 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c4);

        $i2 = $i2 + $i5;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumBy-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumBy-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        long $l3;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumBy-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r2 = (kotlin.UInt) $r3;

        $i3 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i3;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumBy-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final double sumByDouble-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumByDouble");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumByDouble-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumByDouble");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumByDouble-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        double $d0, $d1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumByDouble");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumByDouble-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumByDouble");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumOfDouble(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        byte $b2;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumOfDouble(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2;
        double $d0, $d1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumOfDouble(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        long $l2;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final double sumOfDouble(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        double $d0, $d1;
        short $s2;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }

    private static final int sumOfInt(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $i2 = $i2 + $i4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfInt(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $i3 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $i2 = $i2 + $i3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfInt(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        long $l3;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $i2 = $i2 + $i4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfInt(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $i2 = $i2 + $i4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final long sumOfLong(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i2;
        long $l1, $l4;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l4 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $l1 = $l1 + $l4;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    private static final long sumOfLong(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i2, $i3;
        long $l1, $l4;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l4 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $l1 = $l1 + $l4;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    private static final long sumOfLong(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i2;
        long $l1, $l3;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l3 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $l1 = $l1 + $l3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    private static final long sumOfLong(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i2;
        long $l1, $l4;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Number) $r3;

        $l4 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $l1 = $l1 + $l4;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    public static final int sumOfUByte(kotlin.UByte[])
    {
        kotlin.UByte[] $r0;
        int $i0, $i1, $i2, $i5;
        kotlin.UByte $r1;
        byte $b3;
        short $s4;

        $r0 := @parameter0: kotlin.UByte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $b3 = virtualinvoke $r1.<kotlin.UByte: byte unbox-impl()>();

        $s4 = $b3 & 255;

        $i5 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s4);

        $i2 = $i2 + $i5;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfUInt(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfUInt(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r2 = (kotlin.UInt) $r3;

        $i3 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i3;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfUInt(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        long $l3;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    public static final int sumOfUInt(kotlin.UInt[])
    {
        kotlin.UInt[] $r0;
        int $i0, $i1, $i2, $i3;
        kotlin.UInt $r1;

        $r0 := @parameter0: kotlin.UInt[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $i3 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i3;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final int sumOfUInt(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1, $i2, $i4;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        kotlin.UInt $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = 0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label1:
        if $i0 >= $i1 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.UInt) $r3;

        $i4 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i2 = $i2 + $i4;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i2;
    }

    private static final long sumOfULong(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l4;
        int $i1, $i2;
        byte $b3;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        kotlin.ULong $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(0L);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.ULong) $r3;

        $l4 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l0 + $l4;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l0;
    }

    private static final long sumOfULong(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l4;
        int $i1, $i2, $i3;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        kotlin.ULong $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(0L);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.ULong) $r3;

        $l4 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l0 + $l4;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l0;
    }

    private static final long sumOfULong(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l3;
        int $i1, $i2;
        kotlin.ULong $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(0L);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r2 = (kotlin.ULong) $r3;

        $l3 = virtualinvoke $r2.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l0 + $l3;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l0;
    }

    public static final long sumOfULong(kotlin.ULong[])
    {
        kotlin.ULong[] $r0;
        int $i0, $i2;
        long $l1, $l3;
        kotlin.ULong $r1;

        $r0 := @parameter0: kotlin.ULong[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r1 = $r0[$i2];

        $l3 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

        $l1 = $l1 + $l3;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    private static final long sumOfULong(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l4;
        int $i1, $i2;
        short $s3;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        kotlin.ULong $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(0L);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (kotlin.ULong) $r3;

        $l4 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l0 + $l4;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l0;
    }

    public static final int sumOfUShort(kotlin.UShort[])
    {
        kotlin.UShort[] $r0;
        int $i0, $i1, $i2, $i5;
        kotlin.UShort $r1;
        short $s3;
        char $c4;

        $r0 := @parameter0: kotlin.UShort[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $s3 = virtualinvoke $r1.<kotlin.UShort: short unbox-impl()>();

        $c4 = (char) $s3;

        $i5 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c4);

        $i2 = $i2 + $i5;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i2;
    }

    public static final java.util.List take-PpDY95g(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i4;
        boolean $z0;
        java.util.List $r1;
        kotlin.UByteArray $r2;
        byte $b3;
        kotlin.UByte $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$take");

        $i1 = 0;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label09;

        if $i0 != 0 goto label03;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label03:
        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        if $i0 < $i2 goto label04;

        $r2 = staticinvoke <kotlin.UByteArray: kotlin.UByteArray box-impl(byte[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label04:
        if $i0 != 1 goto label05;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label05:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i4 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i4 = $i4 + 1;

        if $i4 != $i0 goto label07;

        $r1 = (java.util.List) $r4;

        return $r1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = (java.util.List) $r4;

        return $r1;

     label09:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label10;

     label10:
        throw r9;
    }

    public static final java.util.List take-nggk6HY(short[], int)
    {
        short[] $r0;
        int $i0, $i1, $i2, $i4;
        boolean $z0;
        java.util.List $r1;
        kotlin.UShortArray $r2;
        short $s3;
        kotlin.UShort $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$take");

        $i1 = 0;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label09;

        if $i0 != 0 goto label03;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label03:
        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        if $i0 < $i2 goto label04;

        $r2 = staticinvoke <kotlin.UShortArray: kotlin.UShortArray box-impl(short[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label04:
        if $i0 != 1 goto label05;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label05:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i4 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i4 = $i4 + 1;

        if $i4 != $i0 goto label07;

        $r1 = (java.util.List) $r4;

        return $r1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = (java.util.List) $r4;

        return $r1;

     label09:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label10;

     label10:
        throw r9;
    }

    public static final java.util.List take-qFRl0hI(int[], int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.util.List $r1;
        kotlin.UIntArray $r2;
        kotlin.UInt $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$take");

        $i1 = 0;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label09;

        if $i0 != 0 goto label03;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label03:
        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        if $i0 < $i2 goto label04;

        $r2 = staticinvoke <kotlin.UIntArray: kotlin.UIntArray box-impl(int[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label04:
        if $i0 != 1 goto label05;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label05:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i3 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $i4 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i4);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i3 = $i3 + 1;

        if $i3 != $i0 goto label07;

        $r1 = (java.util.List) $r4;

        return $r1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = (java.util.List) $r4;

        return $r1;

     label09:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label10;

     label10:
        throw r9;
    }

    public static final java.util.List take-r7IrZao(long[], int)
    {
        long[] $r0;
        int $i0, $i1, $i2, $i4;
        boolean $z0;
        java.util.List $r1;
        kotlin.ULongArray $r2;
        long $l3;
        kotlin.ULong $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$take");

        $i1 = 0;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label09;

        if $i0 != 0 goto label03;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label03:
        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        if $i0 < $i2 goto label04;

        $r2 = staticinvoke <kotlin.ULongArray: kotlin.ULongArray box-impl(long[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label04:
        if $i0 != 1 goto label05;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label05:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i4 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i4 = $i4 + 1;

        if $i4 != $i0 goto label07;

        $r1 = (java.util.List) $r4;

        return $r1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = (java.util.List) $r4;

        return $r1;

     label09:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label10;

     label10:
        throw r9;
    }

    public static final java.util.List takeLast-PpDY95g(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        kotlin.UByteArray $r2;
        byte $b2;
        kotlin.UByte $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label8;

        if $i0 != 0 goto label3;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label3:
        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        if $i0 < $i1 goto label4;

        $r2 = staticinvoke <kotlin.UByteArray: kotlin.UByteArray box-impl(byte[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label4:
        if $i0 != 1 goto label5;

        $i0 = $i1 + -1;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label5:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = $i1 - $i0;

     label6:
        if $i0 >= $i1 goto label7;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r1 = (java.util.List) $r4;

        return $r1;

     label8:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label9;

     label9:
        throw r9;
    }

    public static final java.util.List takeLast-nggk6HY(short[], int)
    {
        short[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        kotlin.UShortArray $r2;
        short $s2;
        kotlin.UShort $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label8;

        if $i0 != 0 goto label3;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label3:
        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        if $i0 < $i1 goto label4;

        $r2 = staticinvoke <kotlin.UShortArray: kotlin.UShortArray box-impl(short[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label4:
        if $i0 != 1 goto label5;

        $i0 = $i1 + -1;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label5:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = $i1 - $i0;

     label6:
        if $i0 >= $i1 goto label7;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r1 = (java.util.List) $r4;

        return $r1;

     label8:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label9;

     label9:
        throw r9;
    }

    public static final java.util.List takeLast-qFRl0hI(int[], int)
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        java.util.List $r1;
        kotlin.UIntArray $r2;
        kotlin.UInt $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label8;

        if $i0 != 0 goto label3;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label3:
        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        if $i0 < $i1 goto label4;

        $r2 = staticinvoke <kotlin.UIntArray: kotlin.UIntArray box-impl(int[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label4:
        if $i0 != 1 goto label5;

        $i0 = $i1 + -1;

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label5:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = $i1 - $i0;

     label6:
        if $i0 >= $i1 goto label7;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r1 = (java.util.List) $r4;

        return $r1;

     label8:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label9;

     label9:
        throw r9;
    }

    public static final java.util.List takeLast-r7IrZao(long[], int)
    {
        long[] $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        kotlin.ULongArray $r2;
        long $l2;
        kotlin.ULong $r3;
        java.util.ArrayList $r4, r7;
        java.lang.StringBuilder $r5, r8;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r9;
        java.lang.Iterable r10;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeLast");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label8;

        if $i0 != 0 goto label3;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;

     label3:
        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        if $i0 < $i1 goto label4;

        $r2 = staticinvoke <kotlin.ULongArray: kotlin.ULongArray box-impl(long[])>($r0);

        r10 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r10);

        return $r1;

     label4:
        if $i0 != 1 goto label5;

        $i0 = $i1 + -1;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        return $r1;

     label5:
        r7 = new java.util.ArrayList;

        $r4 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = $i1 - $i0;

     label6:
        if $i0 >= $i1 goto label7;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r1 = (java.util.List) $r4;

        return $r1;

     label8:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label9;

     label9:
        throw r9;
    }

    private static final java.util.List takeLastWhile-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        byte[] $r1;
        int $i0;
        byte $b1;
        kotlin.UByte $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;
        kotlin.UByteArray $r6;
        java.lang.Iterable r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$takeLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List drop-PpDY95g(byte[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r6 = staticinvoke <kotlin.UByteArray: kotlin.UByteArray box-impl(byte[])>($r1);

        r7 = (java.lang.Iterable) $r6;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r7);

        return $r5;
    }

    private static final java.util.List takeLastWhile-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        long[] $r1;
        int $i0;
        long $l1;
        kotlin.ULong $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;
        kotlin.ULongArray $r6;
        java.lang.Iterable r7;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$takeLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List drop-r7IrZao(long[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r6 = staticinvoke <kotlin.ULongArray: kotlin.ULongArray box-impl(long[])>($r1);

        r7 = (java.lang.Iterable) $r6;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r7);

        return $r5;
    }

    private static final java.util.List takeLastWhile-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int[] $r1;
        int $i0, $i1;
        kotlin.UInt $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;
        kotlin.UIntArray $r6;
        java.lang.Iterable r7;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$takeLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $i1 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List drop-qFRl0hI(int[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r6 = staticinvoke <kotlin.UIntArray: kotlin.UIntArray box-impl(int[])>($r1);

        r7 = (java.lang.Iterable) $r6;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r7);

        return $r5;
    }

    private static final java.util.List takeLastWhile-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        short[] $r1;
        int $i0;
        short $s1;
        kotlin.UShort $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.util.List $r5;
        kotlin.UShortArray $r6;
        java.lang.Iterable r7;

        $r1 := @parameter0: short[];

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$takeLastWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r1);

     label1:
        if $i0 < 0 goto label3;

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i0);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r5 = staticinvoke <kotlin.collections.unsigned.UArraysKt: java.util.List drop-nggk6HY(short[],int)>($r1, $i0);

        return $r5;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r6 = staticinvoke <kotlin.UShortArray: kotlin.UShortArray box-impl(short[])>($r1);

        r7 = (java.lang.Iterable) $r6;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>(r7);

        return $r5;
    }

    private static final java.util.List takeWhile-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        r7 = (java.util.List) $r2;

        return r7;

     label2:
        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List takeWhile-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        long[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        r7 = (java.util.List) $r2;

        return r7;

     label2:
        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List takeWhile-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        int[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1, $i2;
        kotlin.UInt $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        r7 = (java.util.List) $r2;

        return r7;

     label2:
        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List takeWhile-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        short[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2, r6;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$takeWhile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        r7 = (java.util.List) $r2;

        return r7;

     label2:
        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final byte[] toByteArray-GBYM_sE(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toByteArray");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        return $r0;
    }

    private static final int[] toIntArray--ajY-9A(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toIntArray");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        return $r0;
    }

    private static final long[] toLongArray-QwZRm1k(long[])
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toLongArray");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        return $r0;
    }

    private static final short[] toShortArray-rL5Bavg(short[])
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toShortArray");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        return $r0;
    }

    public static final kotlin.UInt[] toTypedArray--ajY-9A(int[])
    {
        int[] $r0;
        kotlin.UInt[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toTypedArray");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $r1 = newarray (kotlin.UInt)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r1[$i1] = $r2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static final kotlin.UByte[] toTypedArray-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.UByte[] $r1;
        int $i0, $i1;
        byte $b2;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toTypedArray");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $r1 = newarray (kotlin.UByte)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r1[$i1] = $r2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static final kotlin.ULong[] toTypedArray-QwZRm1k(long[])
    {
        long[] $r0;
        kotlin.ULong[] $r1;
        int $i0, $i1;
        long $l2;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toTypedArray");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $r1 = newarray (kotlin.ULong)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r1[$i1] = $r2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static final kotlin.UShort[] toTypedArray-rL5Bavg(short[])
    {
        short[] $r0;
        kotlin.UShort[] $r1;
        int $i0, $i1;
        short $s2;
        kotlin.UShort $r2;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toTypedArray");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $r1 = newarray (kotlin.UShort)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r1[$i1] = $r2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static final byte[] toUByteArray(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    public static final byte[] toUByteArray(kotlin.UByte[])
    {
        byte[] $r0;
        kotlin.UByte[] $r1;
        int $i0, $i1;
        kotlin.UByte $r2;
        byte $b2;

        $r1 := @parameter0: kotlin.UByte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i0 = lengthof $r1;

        $r0 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $b2 = virtualinvoke $r2.<kotlin.UByte: byte unbox-impl()>();

        $r0[$i1] = $b2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r0);

        return $r0;
    }

    private static final int[] toUIntArray(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    public static final int[] toUIntArray(kotlin.UInt[])
    {
        int[] $r0;
        kotlin.UInt[] $r1;
        int $i0, $i1, $i2;
        kotlin.UInt $r2;

        $r1 := @parameter0: kotlin.UInt[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i0 = lengthof $r1;

        $r0 = newarray (int)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $i2 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $r0[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    private static final long[] toULongArray(long[])
    {
        long[] $r0;
        int $i0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    public static final long[] toULongArray(kotlin.ULong[])
    {
        long[] $r0;
        kotlin.ULong[] $r1;
        int $i0, $i1;
        kotlin.ULong $r2;
        long $l2;

        $r1 := @parameter0: kotlin.ULong[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i0 = lengthof $r1;

        $r0 = newarray (long)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $l2 = virtualinvoke $r2.<kotlin.ULong: long unbox-impl()>();

        $r0[$i1] = $l2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.ULongArray: long[] constructor-impl(long[])>($r0);

        return $r0;
    }

    public static final short[] toUShortArray(kotlin.UShort[])
    {
        short[] $r0;
        kotlin.UShort[] $r1;
        int $i0, $i1;
        kotlin.UShort $r2;
        short $s2;

        $r1 := @parameter0: kotlin.UShort[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i0 = lengthof $r1;

        $r0 = newarray (short)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $s2 = virtualinvoke $r2.<kotlin.UShort: short unbox-impl()>();

        $r0[$i1] = $s2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    private static final short[] toUShortArray(short[])
    {
        short[] $r0;
        int $i0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>($r0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, size)");

        $r0 = staticinvoke <kotlin.UShortArray: short[] constructor-impl(short[])>($r0);

        return $r0;
    }

    public static final java.lang.Iterable withIndex--ajY-9A(int[])
    {
        int[] $r0;
        kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$1 $r1;
        kotlin.collections.IndexingIterable $r2;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$withIndex");

        $r2 = new kotlin.collections.IndexingIterable;

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$1;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$1: void <init>(int[])>($r0);

        specialinvoke $r2.<kotlin.collections.IndexingIterable: void <init>(kotlin.jvm.functions.Function0)>($r1);

        return $r2;
    }

    public static final java.lang.Iterable withIndex-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$3 $r1;
        kotlin.collections.IndexingIterable $r2;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$withIndex");

        $r2 = new kotlin.collections.IndexingIterable;

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$3;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$3: void <init>(byte[])>($r0);

        specialinvoke $r2.<kotlin.collections.IndexingIterable: void <init>(kotlin.jvm.functions.Function0)>($r1);

        return $r2;
    }

    public static final java.lang.Iterable withIndex-QwZRm1k(long[])
    {
        long[] $r0;
        kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$2 $r1;
        kotlin.collections.IndexingIterable $r2;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$withIndex");

        $r2 = new kotlin.collections.IndexingIterable;

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$2;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$2: void <init>(long[])>($r0);

        specialinvoke $r2.<kotlin.collections.IndexingIterable: void <init>(kotlin.jvm.functions.Function0)>($r1);

        return $r2;
    }

    public static final java.lang.Iterable withIndex-rL5Bavg(short[])
    {
        short[] $r0;
        kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$4 $r1;
        kotlin.collections.IndexingIterable $r2;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$withIndex");

        $r2 = new kotlin.collections.IndexingIterable;

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$4;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$4: void <init>(short[])>($r0);

        specialinvoke $r2.<kotlin.collections.IndexingIterable: void <init>(kotlin.jvm.functions.Function0)>($r1);

        return $r2;
    }

    private static final java.util.List zip-7znnbtw(int[], java.lang.Iterable, kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        kotlin.UInt $r6;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r3 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        r7 = new java.util.ArrayList;

        $r2 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $i0 = $i2 + 1;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $r6 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i2 = $i0;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List zip-8LME4QE(long[], java.lang.Object[], kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        java.lang.Object[] $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        java.util.ArrayList $r4, r6;
        long $l2;
        kotlin.ULong $r5;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r4 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r3 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r4;

        return r7;
    }

    public static final java.util.List zip-C-E_24M(int[], java.lang.Object[])
    {
        int[] $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        java.util.ArrayList $r3, r6;
        kotlin.UInt $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r3 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r2 = $r1[$i1];

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r3;

        return r7;
    }

    public static final java.util.List zip-F7u83W8(long[], java.lang.Iterable)
    {
        long[] $r0;
        java.util.ArrayList $r1, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        long $l3;
        kotlin.ULong $r5;
        kotlin.Pair $r6;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "other");

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r1;

        return r8;

     label3:
        r8 = (java.util.List) $r1;

        return r8;
    }

    public static final java.util.List zip-HwE9HBo(int[], java.lang.Iterable)
    {
        int[] $r0;
        java.util.ArrayList $r1, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        kotlin.UInt $r5;
        kotlin.Pair $r6;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "other");

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $i0 = $i2 + 1;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i2 = $i0;

        goto label1;

     label2:
        r8 = (java.util.List) $r1;

        return r8;

     label3:
        r8 = (java.util.List) $r1;

        return r8;
    }

    private static final java.util.List zip-JAKpvQM(byte[], byte[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0, $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r7;
        byte $b2;
        kotlin.UByte $r4, $r5;
        java.lang.Object $r6;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r7 = new java.util.ArrayList;

        $r3 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r3;

        return r8;
    }

    public static final java.util.List zip-JGPC0-M(short[], java.lang.Iterable)
    {
        short[] $r0;
        java.util.ArrayList $r1, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        short $s3;
        kotlin.UShort $r5;
        kotlin.Pair $r6;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "other");

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r1;

        return r8;

     label3:
        r8 = (java.util.List) $r1;

        return r8;
    }

    public static final java.util.List zip-JQknh5Q(byte[], java.lang.Iterable)
    {
        byte[] $r0;
        java.util.ArrayList $r1, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        byte $b3;
        kotlin.UByte $r5;
        kotlin.Pair $r6;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "other");

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r1;

        return r8;

     label3:
        r8 = (java.util.List) $r1;

        return r8;
    }

    private static final java.util.List zip-L83TJbI(int[], int[], kotlin.jvm.functions.Function2)
    {
        int[] $r0, $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1, $i2;
        java.util.ArrayList $r3, r7;
        kotlin.UInt $r4, $r5;
        java.lang.Object $r6;
        java.util.List r8;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r7 = new java.util.ArrayList;

        $r3 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r3;

        return r8;
    }

    private static final java.util.List zip-LuipOMY(byte[], java.lang.Object[], kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        java.lang.Object[] $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        java.util.ArrayList $r4, r6;
        byte $b2;
        kotlin.UByte $r5;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r4 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r3 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r4;

        return r7;
    }

    private static final java.util.List zip-PabeH-Q(long[], long[], kotlin.jvm.functions.Function2)
    {
        long[] $r0, $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r7;
        long $l2;
        kotlin.ULong $r4, $r5;
        java.lang.Object $r6;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r7 = new java.util.ArrayList;

        $r3 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r3;

        return r8;
    }

    private static final java.util.List zip-TUPTUsU(long[], java.lang.Iterable, kotlin.jvm.functions.Function2)
    {
        long[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        long $l3;
        kotlin.ULong $r6;
        java.util.List r8;

        $r0 := @parameter0: long[];

        $r3 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        r7 = new java.util.ArrayList;

        $r2 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r6 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List zip-UCnP4_w(byte[], java.lang.Iterable, kotlin.jvm.functions.Function2)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte $b3;
        kotlin.UByte $r6;
        java.util.List r8;

        $r0 := @parameter0: byte[];

        $r3 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        r7 = new java.util.ArrayList;

        $r2 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r6 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    private static final java.util.List zip-ZjwqOic(int[], java.lang.Object[], kotlin.jvm.functions.Function2)
    {
        int[] $r0;
        java.lang.Object[] $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Object $r3;
        int $i0, $i1, $i2;
        java.util.ArrayList $r4, r6;
        kotlin.UInt $r5;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r4 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r3 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r4;

        return r7;
    }

    public static final java.util.List zip-ctEhBpI(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2, r6;
        kotlin.UInt $r3, $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i3);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    private static final java.util.List zip-ePBmRWY(short[], java.lang.Object[], kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        java.lang.Object[] $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        java.util.ArrayList $r4, r6;
        short $s2;
        kotlin.UShort $r5;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r4 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r3 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r4;

        return r7;
    }

    public static final java.util.List zip-f7H3mmw(long[], java.lang.Object[])
    {
        long[] $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r6;
        long $l2;
        kotlin.ULong $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r3 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r2 = $r1[$i1];

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r3;

        return r7;
    }

    private static final java.util.List zip-gVVukQo(short[], short[], kotlin.jvm.functions.Function2)
    {
        short[] $r0, $r1;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r7;
        short $s2;
        kotlin.UShort $r4, $r5;
        java.lang.Object $r6;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r7 = new java.util.ArrayList;

        $r3 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r5 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r3;

        return r8;
    }

    private static final java.util.List zip-kBb4a-s(short[], java.lang.Iterable, kotlin.jvm.functions.Function2)
    {
        short[] $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.util.ArrayList $r2, r7;
        int $i0, $i1, $i2;
        java.lang.Iterable $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        short $s3;
        kotlin.UShort $r6;
        java.util.List r8;

        $r0 := @parameter0: short[];

        $r3 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        r7 = new java.util.ArrayList;

        $r2 = r7;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i2 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i2 >= $i1 goto label3;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r6 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r8 = (java.util.List) $r2;

        return r8;

     label3:
        r8 = (java.util.List) $r2;

        return r8;
    }

    public static final java.util.List zip-kdPth3s(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1;
        java.util.ArrayList $r2, r6;
        byte $b2, $b3;
        kotlin.UByte $r3, $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b3);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    public static final java.util.List zip-mazbYpA(short[], short[])
    {
        short[] $r0, $r1;
        int $i0, $i1;
        java.util.ArrayList $r2, r6;
        short $s2, $s3;
        kotlin.UShort $r3, $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s3);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

    public static final java.util.List zip-nl983wc(byte[], java.lang.Object[])
    {
        byte[] $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r6;
        byte $b2;
        kotlin.UByte $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r3 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r2 = $r1[$i1];

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r3;

        return r7;
    }

    public static final java.util.List zip-uaTIQ5s(short[], java.lang.Object[])
    {
        short[] $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, r6;
        short $s2;
        kotlin.UShort $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r3 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r2 = $r1[$i1];

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r3;

        return r7;
    }

    public static final java.util.List zip-us8wMrg(long[], long[])
    {
        long[] $r0, $r1;
        int $i0, $i1;
        java.util.ArrayList $r2, r6;
        long $l2, $l3;
        kotlin.ULong $r3, $r4;
        kotlin.Pair $r5;
        java.util.List r7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$zip");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r6 = new java.util.ArrayList;

        $r2 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r1, $i1);

        $r3 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l3);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r2;

        return r7;
    }

