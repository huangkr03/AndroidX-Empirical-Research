androidx.compose.material3.RangeSliderLogic
<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource startInteractionSource>
<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource endInteractionSource>
<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetStart>
<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetEnd>
<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State onDrag>
    public void <init>(androidx.compose.foundation.interaction.MutableInteractionSource, androidx.compose.foundation.interaction.MutableInteractionSource, androidx.compose.runtime.State, androidx.compose.runtime.State, androidx.compose.runtime.State)
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.foundation.interaction.MutableInteractionSource r1, r2;
        androidx.compose.runtime.State r3, r4, r5;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        r1 := @parameter0: androidx.compose.foundation.interaction.MutableInteractionSource;

        r2 := @parameter1: androidx.compose.foundation.interaction.MutableInteractionSource;

        r3 := @parameter2: androidx.compose.runtime.State;

        r4 := @parameter3: androidx.compose.runtime.State;

        r5 := @parameter4: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "startInteractionSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "endInteractionSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rawOffsetStart");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "rawOffsetEnd");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "onDrag");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource startInteractionSource> = r1;

        r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource endInteractionSource> = r2;

        r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetStart> = r3;

        r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetEnd> = r4;

        r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State onDrag> = r5;

        return;
    }

    public final androidx.compose.foundation.interaction.MutableInteractionSource getStartInteractionSource()
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.foundation.interaction.MutableInteractionSource $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource startInteractionSource>;

        return $r1;
    }

    public final androidx.compose.foundation.interaction.MutableInteractionSource getEndInteractionSource()
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.foundation.interaction.MutableInteractionSource $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource endInteractionSource>;

        return $r1;
    }

    public final androidx.compose.runtime.State getRawOffsetStart()
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.runtime.State $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetStart>;

        return $r1;
    }

    public final androidx.compose.runtime.State getRawOffsetEnd()
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.runtime.State $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetEnd>;

        return $r1;
    }

    public final androidx.compose.runtime.State getOnDrag()
    {
        androidx.compose.material3.RangeSliderLogic r0;
        androidx.compose.runtime.State $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State onDrag>;

        return $r1;
    }

    public final androidx.compose.foundation.interaction.MutableInteractionSource activeInteraction(boolean)
    {
        androidx.compose.material3.RangeSliderLogic r0;
        boolean z0;
        androidx.compose.foundation.interaction.MutableInteractionSource $r1;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource startInteractionSource>;

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource endInteractionSource>;

     label2:
        return $r1;
    }

    public final int compareOffsets(float)
    {
        androidx.compose.material3.RangeSliderLogic r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6;
        androidx.compose.runtime.State $r1, $r4;
        java.lang.Object $r2, $r5;
        java.lang.Number $r3, $r6;
        int $i0;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetStart>;

        $r2 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r3 = (java.lang.Number) $r2;

        $f3 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $f4 = $f3 - f0;

        f1 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $r4 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetEnd>;

        $r5 = interfaceinvoke $r4.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r6 = (java.lang.Number) $r5;

        $f5 = virtualinvoke $r6.<java.lang.Number: float floatValue()>();

        $f6 = $f5 - f0;

        f2 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>(f1, f2);

        return $i0;
    }

    public final void captureThumb(boolean, float, androidx.compose.foundation.interaction.Interaction, kotlinx.coroutines.CoroutineScope)
    {
        androidx.compose.material3.RangeSliderLogic r0;
        boolean z0;
        float f0, $f1, $f3;
        androidx.compose.foundation.interaction.Interaction r1;
        kotlinx.coroutines.CoroutineScope r2;
        androidx.compose.runtime.State $r3, $r7, $r15;
        java.lang.Object $r4, $r8, $r16;
        kotlin.jvm.functions.Function2 $r5, $r13;
        java.lang.Boolean $r6;
        java.lang.Number $r9, $r17;
        java.lang.Float $r10;
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 $r12;

        r0 := @this: androidx.compose.material3.RangeSliderLogic;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        r1 := @parameter2: androidx.compose.foundation.interaction.Interaction;

        r2 := @parameter3: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "interaction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        $r3 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State onDrag>;

        $r4 = interfaceinvoke $r3.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        if z0 == 0 goto label1;

        $r15 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetStart>;

        $r16 = interfaceinvoke $r15.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r17 = (java.lang.Number) $r16;

        $f3 = virtualinvoke $r17.<java.lang.Number: float floatValue()>();

        goto label2;

     label1:
        $r7 = r0.<androidx.compose.material3.RangeSliderLogic: androidx.compose.runtime.State rawOffsetEnd>;

        $r8 = interfaceinvoke $r7.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r9 = (java.lang.Number) $r8;

        $f3 = virtualinvoke $r9.<java.lang.Number: float floatValue()>();

     label2:
        $f1 = f0 - $f3;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        interfaceinvoke $r5.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r10);

        $r12 = new androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        specialinvoke $r12.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: void <init>(androidx.compose.material3.RangeSliderLogic,boolean,androidx.compose.foundation.interaction.Interaction,kotlin.coroutines.Continuation)>(r0, z0, r1, null);

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r2, null, null, $r13, 3, null);

        return;
    }

androidx.compose.material3.RangeSliderLogic$captureThumb$1
<androidx.compose.material3.RangeSliderLogic$captureThumb$1: int label>
<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.material3.RangeSliderLogic this$0>
<androidx.compose.material3.RangeSliderLogic$captureThumb$1: boolean $draggingStart>
<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.foundation.interaction.Interaction $interaction>
    void <init>(androidx.compose.material3.RangeSliderLogic, boolean, androidx.compose.foundation.interaction.Interaction, kotlin.coroutines.Continuation)
    {
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 r0;
        androidx.compose.material3.RangeSliderLogic $r1;
        boolean $z0;
        androidx.compose.foundation.interaction.Interaction $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        $r1 := @parameter0: androidx.compose.material3.RangeSliderLogic;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: androidx.compose.foundation.interaction.Interaction;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.material3.RangeSliderLogic this$0> = $r1;

        r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: boolean $draggingStart> = $z0;

        r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.foundation.interaction.Interaction $interaction> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 r0;
        java.lang.Object $r1, r2, $r8;
        int $i0;
        kotlin.Unit $r3;
        boolean $z0;
        androidx.compose.material3.RangeSliderLogic $r4;
        androidx.compose.foundation.interaction.MutableInteractionSource $r5;
        androidx.compose.foundation.interaction.Interaction $r6;
        kotlin.coroutines.Continuation $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.material3.RangeSliderLogic this$0>;

        $z0 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: boolean $draggingStart>;

        $r5 = virtualinvoke $r4.<androidx.compose.material3.RangeSliderLogic: androidx.compose.foundation.interaction.MutableInteractionSource activeInteraction(boolean)>($z0);

        $r6 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.foundation.interaction.Interaction $interaction>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: int label> = 1;

        $r8 = interfaceinvoke $r5.<androidx.compose.foundation.interaction.MutableInteractionSource: java.lang.Object emit(androidx.compose.foundation.interaction.Interaction,kotlin.coroutines.Continuation)>($r6, $r7);

        if $r8 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.compose.foundation.interaction.Interaction $r4;
        boolean $z0;
        androidx.compose.material3.RangeSliderLogic $r5;

        r0 := @this: androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        $r5 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.material3.RangeSliderLogic this$0>;

        $z0 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: boolean $draggingStart>;

        $r4 = r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: androidx.compose.foundation.interaction.Interaction $interaction>;

        specialinvoke $r3.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: void <init>(androidx.compose.material3.RangeSliderLogic,boolean,androidx.compose.foundation.interaction.Interaction,kotlin.coroutines.Continuation)>($r5, $z0, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.material3.RangeSliderLogic$captureThumb$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.material3.RangeSliderLogic$captureThumb$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.material3.RangeSliderLogic$captureThumb$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.material3.RangeSliderLogic$captureThumb$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

