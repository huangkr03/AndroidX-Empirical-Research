androidx.compose.ui.node.LayoutNodeLayoutDelegate
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean measurePending>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPending>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPendingForAlignment>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadMeasurePending>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPending>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPendingForAlignment>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean coordinatesAccessedDuringPlacement>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>
    public void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode> = r1;

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = $r2;

        $r3 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        specialinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>(r0);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate> = $r3;

        return;
    }

    public final androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.NodeChain $r2;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain getNodes$ui_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        return $r3;
    }

    public final androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        androidx.compose.ui.unit.Constraints $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()>();

        return $r2;
    }

    public final androidx.compose.ui.unit.Constraints getLastLookaheadConstraints-DWUhwKw()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;
        androidx.compose.ui.unit.Constraints $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public final int getHeight$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: int getHeight()>();

        return $i0;
    }

    public final int getWidth$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: int getWidth()>();

        return $i0;
    }

    public final androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState>;

        return $r1;
    }

    public final boolean getMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean measurePending>;

        return $z0;
    }

    public final boolean getLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPending>;

        return $z0;
    }

    public final boolean getLookaheadMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadMeasurePending>;

        return $z0;
    }

    public final boolean getLookaheadLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPending>;

        return $z0;
    }

    public final void markLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPending> = 1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPendingForAlignment> = 1;

        return;
    }

    public final void markMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean measurePending> = 1;

        return;
    }

    public final void markLookaheadLayoutPending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPending> = 1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPendingForAlignment> = 1;

        return;
    }

    public final void markLookaheadMeasurePending$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadMeasurePending> = 1;

        return;
    }

    public final androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) $r1;

        return $r2;
    }

    public final androidx.compose.ui.node.AlignmentLinesOwner getLookaheadAlignmentLinesOwner$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) $r1;

        return $r2;
    }

    public final boolean getCoordinatesAccessedDuringPlacement()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean coordinatesAccessedDuringPlacement>;

        return $z0;
    }

    public final void setCoordinatesAccessedDuringPlacement(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        boolean z0, z1;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        z0 := @parameter0: boolean;

        z1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean coordinatesAccessedDuringPlacement>;

        if z1 == z0 goto label2;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean coordinatesAccessedDuringPlacement> = z0;

        if z0 == 0 goto label1;

        i2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        $i1 = i2 + 1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i1);

        goto label2;

     label1:
        i3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        $i0 = i3 + -1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i0);

     label2:
        return;
    }

    public final int getChildrenAccessingCoordinatesDuringPlacement()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $i0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        return $i0;
    }

    public final void setChildrenAccessingCoordinatesDuringPlacement(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0, r1, $r4;
        int i0, i1, $i2, $i3, i4, i5;
        androidx.compose.ui.node.LayoutNode $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        i0 := @parameter0: int;

        i1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement> = i0;

        if i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if i0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z0 == $z1 goto label8;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r3 == null goto label5;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        goto label6;

     label5:
        $r4 = null;

     label6:
        r1 = $r4;

        if r1 == null goto label8;

        if i0 != 0 goto label7;

        i4 = r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        $i3 = i4 + -1;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i3);

        goto label8;

     label7:
        i5 = r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int childrenAccessingCoordinatesDuringPlacement>;

        $i2 = i5 + 1;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setChildrenAccessingCoordinatesDuringPlacement(int)>($i2);

     label8:
        return;
    }

    public final androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        return $r1;
    }

    public final androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        return $r1;
    }

    private final boolean isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1, $r3;
        androidx.compose.ui.layout.LookaheadScope $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.layout.LookaheadScope: androidx.compose.ui.node.LayoutNode getRoot()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        return $z0;
    }

    private final void performMeasure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        long l0;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1, $r2, $r3, $r10, $r11, $r12;
        androidx.compose.ui.node.LayoutNode $r4, $r8;
        androidx.compose.ui.node.Owner $r5;
        androidx.compose.ui.node.OwnerSnapshotObserver $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2 $r7;
        kotlin.jvm.functions.Function0 $r9;
        java.lang.IllegalStateException $r13;
        java.lang.String $r14, $r15;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState>;

        $r1 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r15 = "layout state is not idle before measure starts";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label3:
        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = $r3;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean measurePending> = 0;

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r4);

        $r6 = interfaceinvoke $r5.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r7 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2;

        specialinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate,long)>(r0, l0);

        $r9 = (kotlin.jvm.functions.Function0) $r7;

        virtualinvoke $r6.<androidx.compose.ui.node.OwnerSnapshotObserver: void observeMeasureSnapshotReads$ui_release(androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0)>($r8, 0, $r9);

        $r11 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState>;

        $r10 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if $r11 != $r10 goto label4;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLayoutPending$ui_release()>();

        $r12 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = $r12;

     label4:
        return;
    }

    private final void performLookaheadMeasure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        long l0;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1, $r9;
        androidx.compose.ui.node.LayoutNode $r2, $r6, $r8;
        androidx.compose.ui.node.Owner $r3;
        androidx.compose.ui.node.OwnerSnapshotObserver $r4;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1 $r5;
        kotlin.jvm.functions.Function0 $r7;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        l0 := @parameter0: long;

        $r1 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadMeasurePending> = 0;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r2);

        $r4 = interfaceinvoke $r3.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r5 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1;

        specialinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate,long)>(r0, l0);

        $r7 = (kotlin.jvm.functions.Function0) $r5;

        staticinvoke <androidx.compose.ui.node.OwnerSnapshotObserver: void observeMeasureSnapshotReads$ui_release$default(androidx.compose.ui.node.OwnerSnapshotObserver,androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0,int,java.lang.Object)>($r4, $r6, 0, $r7, 2, null);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLookaheadLayoutPending$ui_release()>();

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $z0 = specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNode)>($r8);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLayoutPending$ui_release()>();

        goto label2;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markMeasurePending$ui_release()>();

     label2:
        $r9 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = $r9;

        return;
    }

    public final void onLookaheadScopeChanged$ui_release(androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0, r3, $r4;
        androidx.compose.ui.layout.LookaheadScope r1, r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.layout.LookaheadScope;

        $r4 = r0;

        if r1 == null goto label1;

        r2 = r1;

        r3 = r0;

        $r5 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        specialinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.layout.LookaheadScope)>(r0, r2);

        $r4 = r3;

        goto label2;

     label1:
        $r5 = null;

     label2:
        $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate> = $r5;

        return;
    }

    public final void updateParentData()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.node.LayoutNode $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean updateParentData()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r8 == null goto label1;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r8, 0, 1, null);

        goto label1;

     label1:
        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        if $r9 == null goto label3;

        $z2 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean updateParentData()>();

        if $z2 != 1 goto label2;

        $z3 = 1;

        goto label4;

     label2:
        $z3 = 0;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        if $z3 == 0 goto label7;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $z1 = specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNode)>($r2);

        if $z1 == 0 goto label6;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r6 == null goto label5;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r6, 0, 1, null);

        goto label7;

     label5:
        goto label7;

     label6:
        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r4 == null goto label7;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r4, 0, 1, null);

        goto label7;

     label7:
        return;
    }

    public final void resetAlignmentLines()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r1;
        androidx.compose.ui.node.AlignmentLines $r2, $r4;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void reset$ui_release()>();

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r4 == null goto label1;

        virtualinvoke $r4.<androidx.compose.ui.node.AlignmentLines: void reset$ui_release()>();

        goto label1;

     label1:
        return;
    }

    public final void markChildrenDirty()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r1, $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate measurePassDelegate>;

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void setChildMeasurablesDirty$ui_release(boolean)>(1);

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate lookaheadPassDelegate>;

        if $r3 == null goto label1;

        r1 = $r3;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void setChildMeasurablesDirty$ui_release(boolean)>(1);

        goto label1;

     label1:
        return;
    }

    public static final androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        androidx.compose.ui.node.LayoutNode $r1;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 = $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode layoutNode>;

        return $r1;
    }

    public static final boolean access$getLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPendingForAlignment>;

        return $z0;
    }

    public static final void access$setLayoutPending$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate, boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPending> = z0;

        return;
    }

    public static final void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate, androidx.compose.ui.node.LayoutNode$LayoutState)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        androidx.compose.ui.node.LayoutNode$LayoutState r1;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode$LayoutState;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState layoutState> = r1;

        return;
    }

    public static final void access$setLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate, boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean layoutPendingForAlignment> = z0;

        return;
    }

    public static final boolean access$isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNodeLayoutDelegate, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        androidx.compose.ui.node.LayoutNode $r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        $z0 = specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNode)>($r1);

        return $z0;
    }

    public static final void access$performMeasure-BRTryo0(androidx.compose.ui.node.LayoutNodeLayoutDelegate, long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void performMeasure-BRTryo0(long)>(l0);

        return;
    }

    public static final boolean access$getLookaheadLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $z0 = $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPendingForAlignment>;

        return $z0;
    }

    public static final void access$setLookaheadLayoutPending$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate, boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPending> = z0;

        return;
    }

    public static final void access$setLookaheadLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate, boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean lookaheadLayoutPendingForAlignment> = z0;

        return;
    }

    public static final void access$performLookaheadMeasure-BRTryo0(androidx.compose.ui.node.LayoutNodeLayoutDelegate, long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void performLookaheadMeasure-BRTryo0(long)>(l0);

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.ui.layout.Measurable invoke(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r3;
        androidx.compose.ui.layout.Measurable $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = (androidx.compose.ui.layout.Measurable) $r3;

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode $r2;
        androidx.compose.ui.layout.Measurable $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2: androidx.compose.ui.layout.Measurable invoke(androidx.compose.ui.node.LayoutNode)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentLayout$ui_release(boolean)>(0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $r3 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z0 = virtualinvoke $r3.<androidx.compose.ui.node.AlignmentLines: boolean getUsedDuringParentLayout$ui_release()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void setPreviousUsedDuringParentLayout$ui_release(boolean)>($z0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$1>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LookaheadDelegate $lookaheadDelegate>
    void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate, androidx.compose.ui.node.LayoutNodeLayoutDelegate, androidx.compose.ui.node.LookaheadDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r3 := @parameter2: androidx.compose.ui.node.LookaheadDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$1> = $r2;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LookaheadDelegate $lookaheadDelegate> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r2, $r11, $r14, $r23;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 $r3;
        kotlin.jvm.functions.Function1 $r4, $r9;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r5, $r10, $r15, $r24, r25, r30, r35, r40;
        androidx.compose.ui.node.LookaheadDelegate $r6;
        androidx.compose.ui.layout.MeasureResult $r7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 $r8;
        java.lang.Object[] $r12, $r16, $r21, r28, r33, r38;
        java.lang.Object $r13, $r17, $r22;
        boolean $z0, $z1, z9;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r18, $r19, $r20;
        androidx.compose.ui.node.LayoutNode r26, r29, r31, r34, r36, r39;
        androidx.compose.runtime.collection.MutableVector r27, r32, r37;
        int i0, i1, i2, $i3, i4, i5;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1;

        r25 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0>;

        $r1 = r25.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r26 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        r27 = virtualinvoke r26.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r27.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r21 = virtualinvoke r27.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r21, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r28 = $r21;

     label1:
        $r22 = r28[i1];

        r29 = (androidx.compose.ui.node.LayoutNode) $r22;

        $r23 = virtualinvoke r29.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r24 = virtualinvoke $r23.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r24);

        r30 = $r24;

        $z1 = virtualinvoke r30.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced()>();

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void access$setPreviouslyPlaced$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate,boolean)>(r30, $z1);

        virtualinvoke r30.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void setPlaced(boolean)>(0);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$1>;

        r31 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        r32 = virtualinvoke r31.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i2 = virtualinvoke r32.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i2 <= 0 goto label5;

        $i3 = 0;

        $r16 = virtualinvoke r32.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r16, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r33 = $r16;

     label3:
        $r17 = r33[$i3];

        r34 = (androidx.compose.ui.node.LayoutNode) $r17;

        z9 = 0;

        $r18 = virtualinvoke r34.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r19 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        if $r18 != $r19 goto label4;

        $r20 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke r34.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r20);

     label4:
        $i3 = $i3 + 1;

        if $i3 < i2 goto label3;

     label5:
        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0>;

        $r3 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$3 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r4);

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LookaheadDelegate $lookaheadDelegate>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LookaheadDelegate: androidx.compose.ui.layout.MeasureResult getMeasureResult$ui_release()>();

        interfaceinvoke $r7.<androidx.compose.ui.layout.MeasureResult: void placeChildren()>();

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0>;

        $r8 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1$4 INSTANCE>;

        $r9 = (kotlin.jvm.functions.Function1) $r8;

        virtualinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r9);

        r35 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate this$0>;

        $r11 = r35.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r36 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r11);

        r37 = virtualinvoke r36.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i4 = virtualinvoke r37.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i4 <= 0 goto label8;

        i5 = 0;

        $r12 = virtualinvoke r37.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r12, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r38 = $r12;

     label6:
        $r13 = r38[i5];

        r39 = (androidx.compose.ui.node.LayoutNode) $r13;

        $r14 = virtualinvoke r39.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r15);

        r40 = $r15;

        $z0 = virtualinvoke r40.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced()>();

        if $z0 != 0 goto label7;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void access$markSubtreeNotPlaced(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate)>(r40);

     label7:
        i5 = i5 + 1;

        if i5 < i4 goto label6;

     label8:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: long $position>
    void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate, long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $l0 := @parameter1: long;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: long $position> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1 r0;
        androidx.compose.ui.layout.Placeable$PlacementScope$Companion r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r2;
        long l0;
        androidx.compose.ui.layout.Placeable$PlacementScope $r3;
        androidx.compose.ui.node.NodeCoordinator $r4;
        androidx.compose.ui.node.LookaheadDelegate $r5;
        androidx.compose.ui.layout.Placeable $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1;

        r1 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: long $position>;

        $r3 = (androidx.compose.ui.layout.Placeable$PlacementScope) r1;

        $r4 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = (androidx.compose.ui.layout.Placeable) $r5;

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void place-70tqf50$default(androidx.compose.ui.layout.Placeable$PlacementScope,androidx.compose.ui.layout.Placeable,long,float,int,java.lang.Object)>($r3, $r6, l0, 0.0F, 2, null);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentMeasurement$ui_release(boolean)>(0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$1>
    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1, $r2, $r3, $r4;
        androidx.compose.ui.node.LayoutNode$UsageByParent[] $r5;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r6, $r7;
        int[] r8, r9;

        $r0 = staticinvoke <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r0;

        r8 = newarray (int)[$i0];

        $r1 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        $i1 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r8[$i1] = 1;

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        $i2 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r8[$i2] = 2;

        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        $i3 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r8[$i3] = 3;

        $r4 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        $i4 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r8[$i4] = 4;

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$0> = r8;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] values()>();

        $i5 = lengthof $r5;

        r9 = newarray (int)[$i5];

        $r6 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        $i6 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        r9[$i6] = 1;

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        $i7 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        r9[$i7] = 2;

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$1> = r9;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.layout.LookaheadScope lookaheadScope>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean placedOnce>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean measuredOnce>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints lookaheadConstraints>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: long lastPosition>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPreviouslyPlaced>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.lang.Object parentData>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
    public void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate, androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r1, $r9;
        androidx.compose.ui.layout.LookaheadScope r2;
        byte b0;
        androidx.compose.ui.unit.IntOffset$Companion $r3;
        long $l1;
        androidx.compose.ui.node.LookaheadAlignmentLines $r4;
        androidx.compose.ui.node.AlignmentLinesOwner $r5;
        androidx.compose.ui.node.AlignmentLines $r6;
        androidx.compose.runtime.collection.MutableVector $r7;
        androidx.compose.ui.layout.Measurable[] $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r10;
        java.lang.Object $r11;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r2 := @parameter1: androidx.compose.ui.layout.LookaheadScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "lookaheadScope");

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = r1;

        specialinvoke r0.<androidx.compose.ui.layout.Placeable: void <init>()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.layout.LookaheadScope lookaheadScope> = r2;

        $r3 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l1 = virtualinvoke $r3.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: long lastPosition> = $l1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced> = 1;

        $r4 = new androidx.compose.ui.node.LookaheadAlignmentLines;

        $r5 = (androidx.compose.ui.node.AlignmentLinesOwner) r0;

        specialinvoke $r4.<androidx.compose.ui.node.LookaheadAlignmentLines: void <init>(androidx.compose.ui.node.AlignmentLinesOwner)>($r5);

        $r6 = (androidx.compose.ui.node.AlignmentLines) $r4;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines> = $r6;

        b0 = 16;

        $r7 = new androidx.compose.runtime.collection.MutableVector;

        $r8 = newarray (androidx.compose.ui.layout.Measurable)[b0];

        specialinvoke $r7.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r8, 0);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables> = $r7;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty> = 1;

        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r10 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.lang.Object getParentData()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.lang.Object parentData> = $r11;

        return;
    }

    public final boolean getDuringAlignmentLinesQuery$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery>;

        return $z0;
    }

    public final void setDuringAlignmentLinesQuery$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery> = z0;

        return;
    }

    public final androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.unit.Constraints $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints lookaheadConstraints>;

        return $r1;
    }

    public boolean isPlaced()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced>;

        return $z0;
    }

    public void setPlaced(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced> = z0;

        return;
    }

    public androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        return $r3;
    }

    public androidx.compose.ui.node.AlignmentLines getAlignmentLines()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.AlignmentLines $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines>;

        return $r1;
    }

    public final boolean getChildMeasurablesDirty$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty>;

        return $z0;
    }

    public final void setChildMeasurablesDirty$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty> = z0;

        return;
    }

    public final java.util.List getChildMeasurables$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r4;
        androidx.compose.ui.node.LayoutNode $r3, $r5;
        boolean $z1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 $r6;
        kotlin.jvm.functions.Function1 $r7;
        androidx.compose.runtime.collection.MutableVector $r8, $r9, $r11;
        java.util.List $r10, $r12;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        $z1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty>;

        if $z1 != 0 goto label1;

        $r11 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r12 = virtualinvoke $r11.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r12;

     label1:
        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r4);

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r6 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$childMeasurables$2 INSTANCE>;

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegateKt: void access$updateChildMeasurables(androidx.compose.ui.node.LayoutNode,androidx.compose.runtime.collection.MutableVector,kotlin.jvm.functions.Function1)>($r5, $r8, $r7);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean childMeasurablesDirty> = 0;

        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r10 = virtualinvoke $r9.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r10;
    }

    private final void forEachChildDelegate(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0, $r10;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.LayoutNode r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r6, $r9;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r7 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r7;

     label1:
        $r8 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r8;

        $r9 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r10 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r10);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public void layoutChildren()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LookaheadDelegate r1, $r7;
        androidx.compose.ui.node.LayoutNode$LayoutState r2, $r11;
        androidx.compose.ui.node.Owner r3;
        androidx.compose.ui.node.AlignmentLines $r4, $r23, $r24, $r25, $r26, $r29;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, $r8, $r9, $r10, $r12, $r13, $r16, $r19, $r21, $r22, $r27, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.compose.ui.node.NodeCoordinator $r6;
        androidx.compose.ui.node.LayoutNode $r14, $r17;
        androidx.compose.ui.node.OwnerSnapshotObserver $r15;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1 $r18;
        kotlin.jvm.functions.Function0 $r20;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r4.<androidx.compose.ui.node.AlignmentLines: void recalculateQueryOwner()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z0 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLookaheadLayoutPending$ui_release()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onBeforeLayoutChildren()>();

     label1:
        $r6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        r1 = $r7;

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z1 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean access$getLookaheadLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        if $z1 != 0 goto label2;

        $z6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery>;

        if $z6 != 0 goto label4;

        $z7 = virtualinvoke r1.<androidx.compose.ui.node.LookaheadDelegate: boolean isPlacingForAlignment$ui_release()>();

        if $z7 != 0 goto label4;

        $r27 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z8 = virtualinvoke $r27.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLookaheadLayoutPending$ui_release()>();

        if $z8 == 0 goto label4;

     label2:
        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLookaheadLayoutPending$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,boolean)>($r9, 0);

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r2 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r12 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r11 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r12, $r11);

        $r13 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r14 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r13);

        r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r14);

        $r15 = interfaceinvoke r3.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r16 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r17 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r16);

        $r18 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1;

        $r19 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        specialinvoke $r18.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$layoutChildren$1: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate,androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LookaheadDelegate)>(r0, $r19, r1);

        $r20 = (kotlin.jvm.functions.Function0) $r18;

        staticinvoke <androidx.compose.ui.node.OwnerSnapshotObserver: void observeLayoutSnapshotReads$ui_release$default(androidx.compose.ui.node.OwnerSnapshotObserver,androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0,int,java.lang.Object)>($r15, $r17, 0, $r20, 2, null);

        $r21 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r21, r2);

        $r22 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z2 = virtualinvoke $r22.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getCoordinatesAccessedDuringPlacement()>();

        if $z2 == 0 goto label3;

        $z5 = virtualinvoke r1.<androidx.compose.ui.node.LookaheadDelegate: boolean isPlacingForAlignment$ui_release()>();

        if $z5 == 0 goto label3;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void requestLayout()>();

     label3:
        $r28 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLookaheadLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,boolean)>($r28, 0);

     label4:
        $r29 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z9 = virtualinvoke $r29.<androidx.compose.ui.node.AlignmentLines: boolean getUsedDuringParentLayout$ui_release()>();

        if $z9 == 0 goto label5;

        $r26 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r26.<androidx.compose.ui.node.AlignmentLines: void setPreviousUsedDuringParentLayout$ui_release(boolean)>(1);

     label5:
        $r23 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z3 = virtualinvoke $r23.<androidx.compose.ui.node.AlignmentLines: boolean getDirty$ui_release()>();

        if $z3 == 0 goto label6;

        $r24 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z4 = virtualinvoke $r24.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z4 == 0 goto label6;

        $r25 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r25.<androidx.compose.ui.node.AlignmentLines: void recalculate()>();

     label6:
        return;
    }

    private final void markSubtreeNotPlaced()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0, r1, r6, $r11;
        androidx.compose.ui.node.LayoutNode r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r7, $r10;
        java.lang.Object $r9;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void setPlaced(boolean)>(0);

        r1 = r0;

        $r7 = r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r7);

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r8 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r8;

     label1:
        $r9 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r9;

        $r10 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        r6 = $r11;

        specialinvoke r6.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void markSubtreeNotPlaced()>();

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public java.util.Map calculateAlignmentLines()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean $z0, $z1;
        androidx.compose.ui.node.NodeCoordinator $r1, $r12;
        androidx.compose.ui.node.LookaheadDelegate $r2, $r13;
        androidx.compose.ui.node.AlignmentLines $r3, $r8, $r9, $r10;
        java.util.Map $r4;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, $r11;
        androidx.compose.ui.node.LayoutNode$LayoutState $r6, $r7;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery>;

        if $z0 != 0 goto label2;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r7 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        if $r6 != $r7 goto label1;

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r9.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierMeasurement$ui_release(boolean)>(1);

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z1 = virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: boolean getDirty$ui_release()>();

        if $z1 == 0 goto label2;

        $r11 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        virtualinvoke $r11.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLookaheadLayoutPending$ui_release()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r8.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierLayout$ui_release(boolean)>(1);

     label2:
        $r12 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $r13 = virtualinvoke $r12.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        if $r13 != null goto label3;

        goto label4;

     label3:
        virtualinvoke $r13.<androidx.compose.ui.node.LookaheadDelegate: void setPlacingForAlignment$ui_release(boolean)>(1);

     label4:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void layoutChildren()>();

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        if $r2 != null goto label5;

        goto label6;

     label5:
        virtualinvoke $r2.<androidx.compose.ui.node.LookaheadDelegate: void setPlacingForAlignment$ui_release(boolean)>(0);

     label6:
        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.AlignmentLines: java.util.Map getLastCalculation()>();

        return $r4;
    }

    public androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r4;
        androidx.compose.ui.node.LayoutNode $r2, $r3;
        androidx.compose.ui.node.AlignmentLinesOwner $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getLookaheadAlignmentLinesOwner$ui_release()>();

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.List $r2;
        int i0, i1;
        java.lang.Object r3;
        androidx.compose.ui.node.LayoutNode r4, $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, $r7;
        androidx.compose.ui.node.AlignmentLinesOwner $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        $r2 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i1 = 0;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label2;

        r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (androidx.compose.ui.node.LayoutNode) r3;

        $r7 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getLookaheadAlignmentLinesOwner$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void requestLayout()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        return;
    }

    public void requestMeasure()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        return;
    }

    public final void notifyChildrenUsingCoordinatesWhilePlacing()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0, r5;
        java.util.List $r1;
        int i0, $i1, i2;
        java.lang.Object r2;
        androidx.compose.ui.node.LayoutNode r3, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r4, $r6, $r7;
        boolean $z2, $z3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $i1 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        if $i1 <= 0 goto label4;

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r8 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r7);

        $r1 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i2 = 0;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i2 >= i0 goto label4;

        r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (androidx.compose.ui.node.LayoutNode) r2;

        r4 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $z2 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getCoordinatesAccessedDuringPlacement()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLayoutPending$ui_release()>();

        if $z3 != 0 goto label2;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r3, 0, 1, null);

     label2:
        r5 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        if r5 == null goto label3;

        virtualinvoke r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public androidx.compose.ui.layout.Placeable measure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        long l0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r3, $r8;
        androidx.compose.ui.node.LayoutNode $r2, $r4, $r9;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r5, $r6;
        androidx.compose.ui.layout.Placeable $r7;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void trackLookaheadMeasurementByParent(androidx.compose.ui.node.LayoutNode)>($r2);

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        $r6 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r5 != $r6 goto label1;

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: void clearSubtreeIntrinsicsUsage$ui_release()>();

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean remeasure-BRTryo0(long)>(l0);

        $r7 = (androidx.compose.ui.layout.Placeable) r0;

        return $r7;
    }

    private final void trackLookaheadMeasurementByParent(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1, r2;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r3, $r4, $r5, $r17, $r26;
        androidx.compose.ui.node.LayoutNode$LayoutState $r6, $r12, $r20;
        int[] $r7;
        int $i0, $i1;
        java.lang.IllegalStateException $r9, $r23;
        java.lang.StringBuilder $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r21, $r22;
        java.lang.String $r14, $r24, $r25;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label09;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r5 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r4 == $r5 goto label01;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z0 == 0 goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 != 0 goto label04;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("measure() may not be called multiple times on the same Measurable. Current state ");

        $r17 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Parent state ");

        $r20 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label04:
        $r6 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r7 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label06;
            default: goto label07;
        };

     label05:
        $r26 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        goto label08;

     label06:
        $r26 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        goto label08;

     label07:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Measurable could be only measured from the parent\'s measure or layout block. Parents state is ");

        $r12 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label08:
        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r26);

        goto label10;

     label09:
        $r3 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r3);

     label10:
        return;
    }

    public java.lang.Object getParentData()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.lang.Object parentData>;

        return $r1;
    }

    public final boolean remeasure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        long l0, l1, $l6, $l11;
        androidx.compose.ui.node.LayoutNode r1, $r4, $r7, $r18, $r20;
        androidx.compose.ui.node.LookaheadDelegate r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r3, $r5, $r6, $r12, $r14, $r19;
        androidx.compose.ui.unit.Constraints $r8, $r17;
        androidx.compose.ui.node.AlignmentLines $r9;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 $r10;
        kotlin.jvm.functions.Function1 $r11;
        androidx.compose.ui.node.NodeCoordinator $r13;
        int $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10;
        java.lang.IllegalStateException $r15;
        java.lang.String $r16, $r21;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        l0 := @parameter0: long;

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        r1 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r18 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $z1 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z1 != 0 goto label01;

        if r1 == null goto label02;

        $z2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z2 == 0 goto label02;

     label01:
        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        virtualinvoke $r18.<androidx.compose.ui.node.LayoutNode: void setCanMultiMeasure$ui_release(boolean)>($z3);

        $r19 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r20 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r19);

        $z4 = virtualinvoke $r20.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z4 != 0 goto label06;

        $r17 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints lookaheadConstraints>;

        if $r17 != null goto label04;

        $z5 = 0;

        goto label05;

     label04:
        $l11 = virtualinvoke $r17.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z5 = staticinvoke <androidx.compose.ui.unit.Constraints: boolean equals-impl0(long,long)>($l11, l0);

     label05:
        if $z5 != 0 goto label13;

     label06:
        $r8 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l0);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints lookaheadConstraints> = $r8;

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r9.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierMeasurement$ui_release(boolean)>(0);

        $r10 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$remeasure$1 INSTANCE>;

        $r11 = (kotlin.jvm.functions.Function1) $r10;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r11);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean measuredOnce> = 1;

        $r12 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r13 = virtualinvoke $r12.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        r2 = virtualinvoke $r13.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        if r2 == null goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        if $z6 != 0 goto label09;

        $r21 = "Lookahead result from lookaheadRemeasure cannot be null";

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label09:
        $i2 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getWidth()>();

        $i3 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getHeight()>();

        l1 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>($i2, $i3);

        $r14 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$performLookaheadMeasure-BRTryo0(androidx.compose.ui.node.LayoutNodeLayoutDelegate,long)>($r14, l0);

        $i4 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getWidth()>();

        $i5 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getHeight()>();

        $l6 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>($i4, $i5);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void setMeasuredSize-ozmzZPI(long)>($l6);

        $i7 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>(l1);

        $i8 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getWidth()>();

        if $i7 != $i8 goto label10;

        $i9 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>(l1);

        $i10 = virtualinvoke r2.<androidx.compose.ui.node.LookaheadDelegate: int getHeight()>();

        if $i9 == $i10 goto label11;

     label10:
        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        z0 = $z8;

        return z0;

     label13:
        return 0;
    }

    protected void placeAt-f8xVGno(long, float, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        long l0, $l1;
        float f0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.Owner r2;
        androidx.compose.ui.node.LayoutNode$LayoutState $r3, $r15;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4, $r6, $r8, $r10, $r13, $r16;
        boolean $z0;
        androidx.compose.ui.node.AlignmentLines $r5;
        androidx.compose.ui.node.LayoutNode $r7, $r11;
        androidx.compose.ui.node.OwnerSnapshotObserver $r9;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1 $r12;
        kotlin.jvm.functions.Function0 $r14;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r4, $r3);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean placedOnce> = 1;

        $l1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: long lastPosition>;

        $z0 = staticinvoke <androidx.compose.ui.unit.IntOffset: boolean equals-impl0(long,long)>(l0, $l1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

     label1:
        $r5 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r5.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierLayout$ui_release(boolean)>(0);

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r7);

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setCoordinatesAccessedDuringPlacement(boolean)>(0);

        $r9 = interfaceinvoke r2.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r11 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r10);

        $r12 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1;

        $r13 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        specialinvoke $r12.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$placeAt$1: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate,long)>($r13, l0);

        $r14 = (kotlin.jvm.functions.Function0) $r12;

        staticinvoke <androidx.compose.ui.node.OwnerSnapshotObserver: void observeLayoutModifierSnapshotReads$ui_release$default(androidx.compose.ui.node.OwnerSnapshotObserver,androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0,int,java.lang.Object)>($r9, $r11, 0, $r14, 2, null);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: long lastPosition> = l0;

        $r16 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r15 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r16, $r15);

        return;
    }

    public int getMeasuredWidth()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int getMeasuredWidth()>();

        return $i0;
    }

    public int getMeasuredHeight()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int getMeasuredHeight()>();

        return $i0;
    }

    public int get(androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r6, $r14;
        androidx.compose.ui.node.LayoutNode $r3, $r4, $r7, $r8;
        androidx.compose.ui.node.LayoutNode$LayoutState $r5, $r9, $r12, $r13;
        androidx.compose.ui.node.AlignmentLines $r10, $r11;
        androidx.compose.ui.node.NodeCoordinator $r15;
        androidx.compose.ui.node.LookaheadDelegate $r16;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r4 == null goto label1;

        $r12 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        goto label2;

     label1:
        $r12 = null;

     label2:
        $r5 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        if $r12 != $r5 goto label3;

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r11.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentMeasurement$ui_release(boolean)>(1);

        goto label6;

     label3:
        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r8 == null goto label4;

        $r13 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        goto label5;

     label4:
        $r13 = null;

     label5:
        $r9 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        if $r13 != $r9 goto label6;

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentLayout$ui_release(boolean)>(1);

     label6:
        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery> = 1;

        $r14 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r16 = virtualinvoke $r15.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r16);

        i0 = virtualinvoke $r16.<androidx.compose.ui.node.LookaheadDelegate: int get(androidx.compose.ui.layout.AlignmentLine)>(r1);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean duringAlignmentLinesQuery> = 0;

        return i0;
    }

    public int minIntrinsicWidth(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int minIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicWidth(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int maxIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int minIntrinsicHeight(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int minIntrinsicHeight(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicHeight(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: int maxIntrinsicHeight(int)>(i0);

        return $i1;
    }

    private final void onIntrinsicsQueried()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r3, $r5, $r7, $r13;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r4, $r6, $r10;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r8, $r9, $r14;
        androidx.compose.ui.node.LayoutNode$LayoutState $r11;
        int[] $r12;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r3, 0, 1, null);

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r4);

        r1 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r1 == null goto label5;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r8 != $r9 goto label5;

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r13 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r10);

        $r11 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r12 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r11.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 2: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        goto label4;

     label2:
        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        goto label4;

     label3:
        $r14 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

     label4:
        virtualinvoke $r13.<androidx.compose.ui.node.LayoutNode: void setIntrinsicsUsageByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r14);

     label5:
        return;
    }

    public final void invalidateIntrinsicsParent(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean z0;
        androidx.compose.ui.node.LayoutNode r1, $r4, $r6, $r13, r14;
        androidx.compose.ui.node.LayoutNode$UsageByParent r2, $r7, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r3, $r5;
        int[] $r9;
        int $i0, $i1;
        java.lang.IllegalStateException $r10;
        java.lang.String $r11, $r12;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        z0 := @parameter0: boolean;

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        r1 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        r2 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        if r1 == null goto label7;

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if r2 == $r7 goto label7;

        r14 = r1;

     label1:
        $r8 = virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        if $r8 != r2 goto label3;

        $r13 = virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r13 != null goto label2;

        goto label3;

     label2:
        r14 = $r13;

        goto label1;

     label3:
        $r9 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i0 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            default: goto label6;
        };

     label4:
        virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release(boolean)>(z0);

        goto label7;

     label5:
        virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: void requestLookaheadRelayout$ui_release(boolean)>(z0);

        goto label7;

     label6:
        $r10 = new java.lang.IllegalStateException;

        $r11 = "Intrinsics isn\'t used by the parent";

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label7:
        return;
    }

    public final boolean updateParentData()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean z0, $z1, $z2;
        java.lang.Object $r1, $r5, $r9;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r6;
        androidx.compose.ui.node.NodeCoordinator $r3, $r7;
        androidx.compose.ui.node.LookaheadDelegate $r4, $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.lang.Object getParentData()>();

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LookaheadDelegate: java.lang.Object getParentData()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r5);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.LookaheadDelegate: java.lang.Object getParentData()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: java.lang.Object parentData> = $r9;

        return z0;
    }

    public final void onPlaced()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPlaced()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void setPlaced(boolean)>(1);

        $z1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPreviouslyPlaced>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void requestSubtreeForLookahead()>();

     label1:
        return;
    }

    private final void requestSubtreeForLookahead()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0, $r9;
        androidx.compose.ui.node.LayoutNode r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, $r8;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r6 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r6;

     label1:
        $r7 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r7;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void rescheduleRemeasureOrRelayout$ui_release(androidx.compose.ui.node.LayoutNode)>(r4);

        $r8 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        specialinvoke $r9.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void requestSubtreeForLookahead()>();

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    private final void onBeforeLayoutChildren()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0, $r12;
        androidx.compose.ui.node.LayoutNode r1, r5, $r14;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r2, $r6, $r11;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i2;
        java.lang.Object[] r4, $r7;
        java.lang.Object $r8;
        boolean $z3, $z4;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r9, $r10;
        androidx.compose.ui.unit.Constraints $r13;
        long $l1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i2 = 0;

        $r7 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r7;

     label1:
        $r8 = r4[i2];

        r5 = (androidx.compose.ui.node.LayoutNode) $r8;

        $z3 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z3 == 0 goto label2;

        $r9 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r10 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r9 != $r10 goto label2;

        $r11 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r12 = virtualinvoke $r11.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        $r13 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        $l1 = virtualinvoke $r13.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z4 = virtualinvoke $r12.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean remeasure-BRTryo0(long)>($l1);

        if $z4 == 0 goto label2;

        $r14 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>(r2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestLookaheadRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r14, 0, 1, null);

     label2:
        i2 = i2 + 1;

        if i2 < i0 goto label1;

     label3:
        return;
    }

    public final void replace()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate r0;
        java.lang.String r1, $r3;
        boolean $z0;
        long $l0;
        java.lang.IllegalStateException $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean placedOnce>;

        if $z0 != 0 goto label1;

        r1 = "Check failed.";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: long lastPosition>;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void placeAt-f8xVGno(long,float,kotlin.jvm.functions.Function1)>($l0, 0.0F, null);

        return;
    }

    public static final void access$setPreviouslyPlaced$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate, boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: boolean isPreviouslyPlaced> = z0;

        return;
    }

    public static final void access$markSubtreeNotPlaced(androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r0;

        $r0 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void markSubtreeNotPlaced()>();

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.ui.layout.Measurable invoke(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r3;
        androidx.compose.ui.layout.Measurable $r4;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        $r4 = (androidx.compose.ui.layout.Measurable) $r3;

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode $r2;
        androidx.compose.ui.layout.Measurable $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1: androidx.compose.ui.layout.Measurable invoke(androidx.compose.ui.node.LayoutNode)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: boolean getUsedDuringParentLayout$ui_release()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $r3 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z0 = virtualinvoke $r3.<androidx.compose.ui.node.AlignmentLines: boolean getUsedDuringParentLayout$ui_release()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void setPreviousUsedDuringParentLayout$ui_release(boolean)>($z0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate this$1>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNode $this_with>
    void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate, androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r2;
        androidx.compose.ui.node.LayoutNode $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r3 := @parameter2: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate this$1> = $r2;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNode $this_with> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r9;
        androidx.compose.ui.node.LayoutNode $r2, $r6, $r10;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 $r3;
        kotlin.jvm.functions.Function1 $r4, $r12;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r5, $r13;
        androidx.compose.ui.node.NodeCoordinator $r7;
        androidx.compose.ui.layout.MeasureResult $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 $r11;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: void clearPlaceOrder$ui_release()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate this$1>;

        $r3 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r4);

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNode $this_with>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult getMeasureResult$ui_release()>();

        interfaceinvoke $r8.<androidx.compose.ui.layout.MeasureResult: void placeChildren()>();

        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r10 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r9);

        virtualinvoke $r10.<androidx.compose.ui.node.LayoutNode: void checkChildrenPlaceOrderForUpdates$ui_release()>();

        $r13 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate this$1>;

        $r11 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1$2 INSTANCE>;

        $r12 = (kotlin.jvm.functions.Function1) $r11;

        virtualinvoke $r13.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r12);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: kotlin.jvm.functions.Function1 $layerBlock>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: long $position>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: float $zIndex>
    void <init>(kotlin.jvm.functions.Function1, androidx.compose.ui.node.LayoutNodeLayoutDelegate, long, float)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1 r0;
        kotlin.jvm.functions.Function1 $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        long $l0;
        float $f0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $l0 := @parameter2: long;

        $f0 := @parameter3: float;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: kotlin.jvm.functions.Function1 $layerBlock> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = $r2;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: long $position> = $l0;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: float $zIndex> = $f0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1 r0;
        androidx.compose.ui.layout.Placeable$PlacementScope$Companion r1;
        kotlin.jvm.functions.Function1 r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r3;
        long l0;
        float f0;
        androidx.compose.ui.node.NodeCoordinator $r5, $r7;
        androidx.compose.ui.layout.Placeable $r6, $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1;

        r1 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: kotlin.jvm.functions.Function1 $layerBlock>;

        r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: long $position>;

        f0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: float $zIndex>;

        if r2 != null goto label1;

        $r7 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r8 = (androidx.compose.ui.layout.Placeable) $r7;

        virtualinvoke r1.<androidx.compose.ui.layout.Placeable$PlacementScope$Companion: void place-70tqf50(androidx.compose.ui.layout.Placeable,long,float)>($r8, l0, f0);

        goto label2;

     label1:
        $r5 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r6 = (androidx.compose.ui.layout.Placeable) $r5;

        virtualinvoke r1.<androidx.compose.ui.layout.Placeable$PlacementScope$Companion: void placeWithLayer-aW-9-wM(androidx.compose.ui.layout.Placeable,long,float,kotlin.jvm.functions.Function1)>($r6, l0, f0, r2);

     label2:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 r0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        androidx.compose.ui.node.AlignmentLines $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentMeasurement$ui_release(boolean)>(0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 $r0;

        $r0 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1;

        specialinvoke $r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1: void <init>()>();

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$1>
    static void <clinit>()
    {
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.compose.ui.node.LayoutNode$LayoutState $r1, $r2;
        androidx.compose.ui.node.LayoutNode$UsageByParent[] $r3;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r4, $r5;
        int[] r6, r7;

        $r0 = staticinvoke <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r0;

        r6 = newarray (int)[$i0];

        $r1 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        $i1 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r6[$i1] = 1;

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        $i2 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r6[$i2] = 2;

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$0> = r6;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent[] values()>();

        $i3 = lengthof $r3;

        r7 = newarray (int)[$i3];

        $r4 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        $i4 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        r7[$i4] = 1;

        $r5 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        $i5 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        r7[$i5] = 2;

        <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$1> = r7;

        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean measuredOnce>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean placedOnce>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long lastPosition>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: kotlin.jvm.functions.Function1 lastLayerBlock>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: float lastZIndex>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.lang.Object parentData>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
    public void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r1;
        byte b0;
        androidx.compose.ui.unit.IntOffset$Companion $r2;
        long $l1;
        androidx.compose.ui.node.LayoutNodeAlignmentLines $r3;
        androidx.compose.ui.node.AlignmentLinesOwner $r4;
        androidx.compose.ui.node.AlignmentLines $r5;
        androidx.compose.runtime.collection.MutableVector $r6;
        androidx.compose.ui.layout.Measurable[] $r7;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = r1;

        specialinvoke r0.<androidx.compose.ui.layout.Placeable: void <init>()>();

        $r2 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l1 = virtualinvoke $r2.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long lastPosition> = $l1;

        $r3 = new androidx.compose.ui.node.LayoutNodeAlignmentLines;

        $r4 = (androidx.compose.ui.node.AlignmentLinesOwner) r0;

        specialinvoke $r3.<androidx.compose.ui.node.LayoutNodeAlignmentLines: void <init>(androidx.compose.ui.node.AlignmentLinesOwner)>($r4);

        $r5 = (androidx.compose.ui.node.AlignmentLines) $r3;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines> = $r5;

        b0 = 16;

        $r6 = new androidx.compose.runtime.collection.MutableVector;

        $r7 = newarray (androidx.compose.ui.layout.Measurable)[b0];

        specialinvoke $r6.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r7, 0);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables> = $r6;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty> = 1;

        return;
    }

    public final androidx.compose.ui.unit.Constraints getLastConstraints-DWUhwKw()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean $z0;
        long $l0;
        androidx.compose.ui.unit.Constraints $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean measuredOnce>;

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long getMeasurementConstraints-msEJaDk()>();

        $r1 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>($l0);

        goto label2;

     label1:
        $r1 = (androidx.compose.ui.unit.Constraints) null;

     label2:
        return $r1;
    }

    public final boolean getDuringAlignmentLinesQuery$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery>;

        return $z0;
    }

    public final void setDuringAlignmentLinesQuery$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery> = z0;

        return;
    }

    public java.lang.Object getParentData()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.lang.Object parentData>;

        return $r1;
    }

    public boolean isPlaced()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $z0 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        return $z0;
    }

    public androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        return $r3;
    }

    public androidx.compose.ui.node.AlignmentLines getAlignmentLines()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.AlignmentLines $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines alignmentLines>;

        return $r1;
    }

    public final boolean getChildMeasurablesDirty$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty>;

        return $z0;
    }

    public final void setChildMeasurablesDirty$ui_release(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty> = z0;

        return;
    }

    public final java.util.List getChildMeasurables$ui_release()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r3;
        androidx.compose.ui.node.LayoutNode $r2, $r4;
        boolean $z0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 $r5;
        kotlin.jvm.functions.Function1 $r6;
        androidx.compose.runtime.collection.MutableVector $r7, $r8, $r10;
        java.util.List $r9, $r11;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: void updateChildrenIfDirty$ui_release()>();

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty>;

        if $z0 != 0 goto label1;

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r11 = virtualinvoke $r10.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r11;

     label1:
        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r5 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$childMeasurables$1 INSTANCE>;

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegateKt: void access$updateChildMeasurables(androidx.compose.ui.node.LayoutNode,androidx.compose.runtime.collection.MutableVector,kotlin.jvm.functions.Function1)>($r4, $r7, $r6);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean childMeasurablesDirty> = 0;

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.runtime.collection.MutableVector _childMeasurables>;

        $r9 = virtualinvoke $r8.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r9;
    }

    public void layoutChildren()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNode$LayoutState r1, $r11;
        androidx.compose.ui.node.LayoutNode r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r3, $r7, $r8, $r9, $r10, $r12, $r13, $r17, $r23, $r25, $r26;
        androidx.compose.ui.node.Owner r5;
        androidx.compose.ui.node.AlignmentLines $r6, $r19, $r20, $r21, $r22, $r27;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        androidx.compose.ui.node.OwnerSnapshotObserver $r14;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1 $r15;
        kotlin.jvm.functions.Function0 $r16;
        androidx.compose.ui.node.NodeCoordinator $r18, $r24;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r6.<androidx.compose.ui.node.AlignmentLines: void recalculateQueryOwner()>();

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z1 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLayoutPending$ui_release()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void onBeforeLayoutChildren()>();

     label1:
        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean access$getLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        if $z2 != 0 goto label2;

        $z7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery>;

        if $z7 != 0 goto label4;

        $r24 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $z8 = virtualinvoke $r24.<androidx.compose.ui.node.NodeCoordinator: boolean isPlacingForAlignment$ui_release()>();

        if $z8 != 0 goto label4;

        $r25 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z9 = virtualinvoke $r25.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLayoutPending$ui_release()>();

        if $z9 == 0 goto label4;

     label2:
        $r9 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutPending$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,boolean)>($r9, 0);

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r1 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r12 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r11 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r12, $r11);

        $r13 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r13);

        r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r5 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>(r2);

        $r14 = interfaceinvoke r5.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r15 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1;

        specialinvoke $r15.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$layoutChildren$1$1: void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate,androidx.compose.ui.node.LayoutNode)>(r3, r0, r2);

        $r16 = (kotlin.jvm.functions.Function0) $r15;

        virtualinvoke $r14.<androidx.compose.ui.node.OwnerSnapshotObserver: void observeLayoutSnapshotReads$ui_release(androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0)>(r2, 0, $r16);

        $r17 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r17, r1);

        $r18 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $z3 = virtualinvoke $r18.<androidx.compose.ui.node.NodeCoordinator: boolean isPlacingForAlignment$ui_release()>();

        if $z3 == 0 goto label3;

        $r23 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $z6 = virtualinvoke $r23.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getCoordinatesAccessedDuringPlacement()>();

        if $z6 == 0 goto label3;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void requestLayout()>();

     label3:
        $r26 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutPendingForAlignment$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,boolean)>($r26, 0);

     label4:
        $r27 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z10 = virtualinvoke $r27.<androidx.compose.ui.node.AlignmentLines: boolean getUsedDuringParentLayout$ui_release()>();

        if $z10 == 0 goto label5;

        $r22 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r22.<androidx.compose.ui.node.AlignmentLines: void setPreviousUsedDuringParentLayout$ui_release(boolean)>(1);

     label5:
        $r19 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z4 = virtualinvoke $r19.<androidx.compose.ui.node.AlignmentLines: boolean getDirty$ui_release()>();

        if $z4 == 0 goto label6;

        $r20 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z5 = virtualinvoke $r20.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z5 == 0 goto label6;

        $r21 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r21.<androidx.compose.ui.node.AlignmentLines: void recalculate()>();

     label6:
        return;
    }

    public androidx.compose.ui.layout.Placeable measure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        long l0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r5, $r6, $r8, $r11, $r14, $r17;
        androidx.compose.ui.node.LayoutNode $r2, $r7, $r9, $r12, $r18;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r3, $r4, $r13;
        boolean $z0;
        androidx.compose.ui.layout.Placeable $r10;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r15;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        $r4 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r3 != $r4 goto label1;

        $r17 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r18 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r17);

        virtualinvoke $r18.<androidx.compose.ui.node.LayoutNode: void clearSubtreeIntrinsicsUsage$ui_release()>();

     label1:
        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        $z0 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean access$isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode)>($r6, $r7);

        if $z0 == 0 goto label2;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean measuredOnce> = 1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void setMeasurementConstraints-BRTryo0(long)>(l0);

        $r11 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r12 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r11);

        $r13 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke $r12.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r13);

        $r14 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r15);

        virtualinvoke $r15.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: androidx.compose.ui.layout.Placeable measure-BRTryo0(long)>(l0);

     label2:
        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void trackMeasurementByParent(androidx.compose.ui.node.LayoutNode)>($r9);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean remeasure-BRTryo0(long)>(l0);

        $r10 = (androidx.compose.ui.layout.Placeable) r0;

        return $r10;
    }

    public final boolean remeasure-BRTryo0(long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        long l0, l1, $l2, $l5, $l10;
        androidx.compose.ui.node.Owner r1;
        androidx.compose.ui.node.LayoutNode r2, $r4, $r6, $r9, $r27, $r29, $r30, $r32;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r3, $r5, $r7, $r8, $r13, $r15, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r31;
        androidx.compose.ui.node.AlignmentLines $r10;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 $r11;
        kotlin.jvm.functions.Function1 $r12;
        androidx.compose.ui.node.NodeCoordinator $r14, $r17, $r19, $r21, $r23, $r25;
        int $i3, $i4, $i6, $i7, $i8, $i9;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        l0 := @parameter0: long;

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r4);

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        r2 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r30 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r7);

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        $z1 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z1 != 0 goto label1;

        if r2 == null goto label2;

        $z4 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        virtualinvoke $r30.<androidx.compose.ui.node.LayoutNode: void setCanMultiMeasure$ui_release(boolean)>($z5);

        $r31 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r32 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r31);

        $z6 = virtualinvoke $r32.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z6 != 0 goto label4;

        $l10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long getMeasurementConstraints-msEJaDk()>();

        $z3 = staticinvoke <androidx.compose.ui.unit.Constraints: boolean equals-impl0(long,long)>($l10, l0);

        if $z3 != 0 goto label8;

     label4:
        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierMeasurement$ui_release(boolean)>(0);

        $r11 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$remeasure$1 INSTANCE>;

        $r12 = (kotlin.jvm.functions.Function1) $r11;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r12);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean measuredOnce> = 1;

        $r13 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r14 = virtualinvoke $r13.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        l1 = virtualinvoke $r14.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void setMeasurementConstraints-BRTryo0(long)>(l0);

        $r15 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$performMeasure-BRTryo0(androidx.compose.ui.node.LayoutNodeLayoutDelegate,long)>($r15, l0);

        $r16 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r17 = virtualinvoke $r16.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $l2 = virtualinvoke $r17.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $z2 = staticinvoke <androidx.compose.ui.unit.IntSize: boolean equals-impl0(long,long)>($l2, l1);

        if $z2 == 0 goto label5;

        $r22 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r23 = virtualinvoke $r22.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i6 = virtualinvoke $r23.<androidx.compose.ui.node.NodeCoordinator: int getWidth()>();

        $i7 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: int getWidth()>();

        if $i6 != $i7 goto label5;

        $r24 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r25 = virtualinvoke $r24.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i8 = virtualinvoke $r25.<androidx.compose.ui.node.NodeCoordinator: int getHeight()>();

        $i9 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: int getHeight()>();

        if $i8 == $i9 goto label6;

     label5:
        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        z0 = $z7;

        $r18 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r19 = virtualinvoke $r18.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i3 = virtualinvoke $r19.<androidx.compose.ui.node.NodeCoordinator: int getWidth()>();

        $r20 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r21 = virtualinvoke $r20.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i4 = virtualinvoke $r21.<androidx.compose.ui.node.NodeCoordinator: int getHeight()>();

        $l5 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>($i3, $i4);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void setMeasuredSize-ozmzZPI(long)>($l5);

        return z0;

     label8:
        $r26 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r27 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r26);

        interfaceinvoke r1.<androidx.compose.ui.node.Owner: void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)>($r27);

        $r28 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r29 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r28);

        virtualinvoke $r29.<androidx.compose.ui.node.LayoutNode: void resetSubtreeIntrinsicsUsage$ui_release()>();

        return 0;
    }

    private final void trackMeasurementByParent(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1, r2;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r3, $r4, $r5, $r17, $r26;
        androidx.compose.ui.node.LayoutNode$LayoutState $r6, $r12, $r20;
        int[] $r7;
        int $i0, $i1;
        java.lang.IllegalStateException $r9, $r23;
        java.lang.StringBuilder $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r21, $r22;
        java.lang.String $r14, $r24, $r25;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label09;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r5 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r4 == $r5 goto label01;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getCanMultiMeasure$ui_release()>();

        if $z0 == 0 goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 != 0 goto label04;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("measure() may not be called multiple times on the same Measurable. Current state ");

        $r17 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Parent state ");

        $r20 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label04:
        $r6 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r7 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        $r26 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        goto label08;

     label06:
        $r26 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        goto label08;

     label07:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Measurable could be only measured from the parent\'s measure or layout block. Parents state is ");

        $r12 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label08:
        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r26);

        goto label10;

     label09:
        $r3 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r3);

     label10:
        return;
    }

    public int getMeasuredWidth()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        return $i0;
    }

    public int getMeasuredHeight()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        int $i0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        return $i0;
    }

    public int get(androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r6, $r14;
        androidx.compose.ui.node.LayoutNode $r3, $r4, $r7, $r8;
        androidx.compose.ui.node.LayoutNode$LayoutState $r5, $r9, $r12, $r13;
        androidx.compose.ui.node.AlignmentLines $r10, $r11;
        androidx.compose.ui.node.NodeCoordinator $r15;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r4 == null goto label1;

        $r12 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        goto label2;

     label1:
        $r12 = null;

     label2:
        $r5 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if $r12 != $r5 goto label3;

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r11.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentMeasurement$ui_release(boolean)>(1);

        goto label6;

     label3:
        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r8 == null goto label4;

        $r13 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        goto label5;

     label4:
        $r13 = null;

     label5:
        $r9 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        if $r13 != $r9 goto label6;

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: void setUsedDuringParentLayout$ui_release(boolean)>(1);

     label6:
        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery> = 1;

        $r14 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        i0 = virtualinvoke $r15.<androidx.compose.ui.node.NodeCoordinator: int get(androidx.compose.ui.layout.AlignmentLine)>(r1);

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery> = 0;

        return i0;
    }

    protected void placeAt-f8xVGno(long, float, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        long l0, $l1;
        float f0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.layout.Placeable$PlacementScope$Companion r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r3, $r4, $r5, $r8, $r10;
        boolean $z1, $z2;
        androidx.compose.ui.node.LayoutNode $r6;
        androidx.compose.ui.node.LayoutNode$LayoutState $r7, $r9;
        androidx.compose.ui.layout.Placeable$PlacementScope $r11;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r12;
        androidx.compose.ui.layout.Placeable $r13;
        int $i2, $i3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $l1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long lastPosition>;

        $z1 = staticinvoke <androidx.compose.ui.unit.IntOffset: boolean equals-impl0(long,long)>(l0, $l1);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

     label1:
        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r4);

        $z2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean access$isOutMostLookaheadRoot(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode)>($r5, $r6);

        if $z2 == 0 goto label2;

        r2 = <androidx.compose.ui.layout.Placeable$PlacementScope: androidx.compose.ui.layout.Placeable$PlacementScope$Companion Companion>;

        r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r11 = (androidx.compose.ui.layout.Placeable$PlacementScope) r2;

        $r12 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        $r13 = (androidx.compose.ui.layout.Placeable) $r12;

        $i2 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>(l0);

        $i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>(l0);

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void place$default(androidx.compose.ui.layout.Placeable$PlacementScope,androidx.compose.ui.layout.Placeable,int,int,float,int,java.lang.Object)>($r11, $r13, $i2, $i3, 0.0F, 4, null);

     label2:
        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r8, $r7);

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void placeOuterCoordinator-f8xVGno(long,float,kotlin.jvm.functions.Function1)>(l0, f0, r1);

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r9 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: void access$setLayoutState$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate,androidx.compose.ui.node.LayoutNode$LayoutState)>($r10, $r9);

        return;
    }

    private final void placeOuterCoordinator-f8xVGno(long, float, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        long l0;
        float f0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.Owner r2;
        androidx.compose.ui.node.AlignmentLines $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4, $r5, $r8, $r11;
        androidx.compose.ui.node.LayoutNode $r6, $r9;
        androidx.compose.ui.node.OwnerSnapshotObserver $r7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1 $r10;
        kotlin.jvm.functions.Function0 $r12;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long lastPosition> = l0;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: float lastZIndex> = f0;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: kotlin.jvm.functions.Function1 lastLayerBlock> = r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean placedOnce> = 1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r3.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierLayout$ui_release(boolean)>(0);

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void setCoordinatesAccessedDuringPlacement(boolean)>(0);

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r6);

        $r7 = interfaceinvoke r2.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r8 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r8);

        $r10 = new androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1;

        $r11 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        specialinvoke $r10.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$placeOuterCoordinator$1: void <init>(kotlin.jvm.functions.Function1,androidx.compose.ui.node.LayoutNodeLayoutDelegate,long,float)>(r1, $r11, l0, f0);

        $r12 = (kotlin.jvm.functions.Function0) $r10;

        virtualinvoke $r7.<androidx.compose.ui.node.OwnerSnapshotObserver: void observeLayoutModifierSnapshotReads$ui_release(androidx.compose.ui.node.LayoutNode,boolean,kotlin.jvm.functions.Function0)>($r9, 0, $r12);

        return;
    }

    public final void replace()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        java.lang.String r1, $r4;
        boolean $z0;
        kotlin.jvm.functions.Function1 $r2;
        float $f0;
        long $l0;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean placedOnce>;

        if $z0 != 0 goto label1;

        r1 = "Check failed.";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: long lastPosition>;

        $f0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: float lastZIndex>;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: kotlin.jvm.functions.Function1 lastLayerBlock>;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void placeOuterCoordinator-f8xVGno(long,float,kotlin.jvm.functions.Function1)>($l0, $f0, $r2);

        return;
    }

    public int minIntrinsicWidth(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int minIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicWidth(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int maxIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int minIntrinsicHeight(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int minIntrinsicHeight(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicHeight(int)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void onIntrinsicsQueried()>();

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: int maxIntrinsicHeight(int)>(i0);

        return $i1;
    }

    private final void onIntrinsicsQueried()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r3, $r5, $r7, $r13;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r4, $r6, $r10;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r8, $r9, $r14;
        androidx.compose.ui.node.LayoutNode$LayoutState $r11;
        int[] $r12;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r3, 0, 1, null);

        $r4 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r5 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r4);

        r1 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r1 == null goto label5;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if $r8 != $r9 goto label5;

        $r10 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r13 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r10);

        $r11 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r12 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r11.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        goto label4;

     label2:
        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        goto label4;

     label3:
        $r14 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

     label4:
        virtualinvoke $r13.<androidx.compose.ui.node.LayoutNode: void setIntrinsicsUsageByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r14);

     label5:
        return;
    }

    public final boolean updateParentData()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean z0, $z1, $z2;
        java.lang.Object $r1, $r4, $r7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2, $r5;
        androidx.compose.ui.node.NodeCoordinator $r3, $r6;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.lang.Object getParentData()>();

        $r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: java.lang.Object getParentData()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.NodeCoordinator: java.lang.Object getParentData()>();

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: java.lang.Object parentData> = $r7;

        return z0;
    }

    public java.util.Map calculateAlignmentLines()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean $z0, $z1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r7;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2, $r3;
        androidx.compose.ui.node.AlignmentLines $r4, $r5, $r6, $r10;
        androidx.compose.ui.node.NodeCoordinator $r8, $r9;
        java.util.Map $r11;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $z0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: boolean duringAlignmentLinesQuery>;

        if $z0 != 0 goto label2;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if $r2 != $r3 goto label1;

        $r5 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r5.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierMeasurement$ui_release(boolean)>(1);

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z1 = virtualinvoke $r6.<androidx.compose.ui.node.AlignmentLines: boolean getDirty$ui_release()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: void markLayoutPending$ui_release()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r4.<androidx.compose.ui.node.AlignmentLines: void setUsedByModifierLayout$ui_release(boolean)>(1);

     label2:
        $r8 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        virtualinvoke $r8.<androidx.compose.ui.node.NodeCoordinator: void setPlacingForAlignment$ui_release(boolean)>(1);

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void layoutChildren()>();

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        virtualinvoke $r9.<androidx.compose.ui.node.NodeCoordinator: void setPlacingForAlignment$ui_release(boolean)>(0);

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: java.util.Map getLastCalculation()>();

        return $r11;
    }

    public androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1, $r4;
        androidx.compose.ui.node.LayoutNode $r2, $r3;
        androidx.compose.ui.node.AlignmentLinesOwner $r5;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.List $r2;
        int i0, i1;
        java.lang.Object r3;
        androidx.compose.ui.node.LayoutNode r4, $r6;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r5, $r7;
        androidx.compose.ui.node.AlignmentLinesOwner $r8;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        $r2 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i1 = 0;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label2;

        r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (androidx.compose.ui.node.LayoutNode) r3;

        $r7 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void requestLayout()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        return;
    }

    public void requestMeasure()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r1);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        return;
    }

    public final void notifyChildrenUsingCoordinatesWhilePlacing()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0, $r8;
        java.util.List $r1;
        int i0, $i1, i2;
        java.lang.Object r2;
        androidx.compose.ui.node.LayoutNode r3, $r7;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r4, $r5, $r6;
        boolean $z2, $z3;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $i1 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        if $i1 <= 0 goto label3;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r7 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        $r1 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i2 = 0;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i2 >= i0 goto label3;

        r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (androidx.compose.ui.node.LayoutNode) r2;

        r4 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $z2 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getCoordinatesAccessedDuringPlacement()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getLayoutPending$ui_release()>();

        if $z3 != 0 goto label2;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r3, 0, 1, null);

     label2:
        $r8 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private final void onBeforeLayoutChildren()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r5, $r11;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r2, $r6;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r7;
        java.lang.Object $r8;
        boolean $z3, $z4;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r9, $r10;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        $r6 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r6);

        r2 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r7 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r7;

     label1:
        $r8 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r8;

        $z3 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z3 == 0 goto label2;

        $r9 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r10 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r9 != $r10 goto label2;

        $z4 = staticinvoke <androidx.compose.ui.node.LayoutNode: boolean remeasure-_Sx5XlM$ui_release$default(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints,int,java.lang.Object)>(r5, null, 1, null);

        if $z4 == 0 goto label2;

        $r11 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>(r2);

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>($r11, 0, 1, null);

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        return;
    }

    public final void invalidateIntrinsicsParent(boolean)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate r0;
        boolean z0;
        androidx.compose.ui.node.LayoutNode r1, $r4, $r6, $r13, r14;
        androidx.compose.ui.node.LayoutNode$UsageByParent r2, $r7, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r3, $r5;
        int[] $r9;
        int $i0, $i1;
        java.lang.IllegalStateException $r10;
        java.lang.String $r11, $r12;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate;

        z0 := @parameter0: boolean;

        $r3 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r3);

        r1 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r5 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r6 = staticinvoke <androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getLayoutNode$p(androidx.compose.ui.node.LayoutNodeLayoutDelegate)>($r5);

        r2 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        if r1 == null goto label7;

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        if r2 == $r7 goto label7;

        r14 = r1;

     label1:
        $r8 = virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getIntrinsicsUsageByParent$ui_release()>();

        if $r8 != r2 goto label3;

        $r13 = virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r13 != null goto label2;

        goto label3;

     label2:
        r14 = $r13;

        goto label1;

     label3:
        $r9 = <androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i0 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode$UsageByParent: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            default: goto label6;
        };

     label4:
        virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release(boolean)>(z0);

        goto label7;

     label5:
        virtualinvoke r14.<androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release(boolean)>(z0);

        goto label7;

     label6:
        $r10 = new java.lang.IllegalStateException;

        $r11 = "Intrinsics isn\'t used by the parent";

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label7:
        return;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: long $constraints>
    void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate, long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $l0 := @parameter1: long;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: long $constraints> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: long $constraints>;

        virtualinvoke $r3.<androidx.compose.ui.node.LookaheadDelegate: androidx.compose.ui.layout.Placeable measure-BRTryo0(long)>($l0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performLookaheadMeasure$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>
<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: long $constraints>
    void <init>(androidx.compose.ui.node.LayoutNodeLayoutDelegate, long)
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNodeLayoutDelegate;

        $l0 := @parameter1: long;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0> = $r1;

        r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: long $constraints> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2 r0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        long $l0;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2;

        $r1 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: androidx.compose.ui.node.LayoutNodeLayoutDelegate this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator()>();

        $l0 = r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: long $constraints>;

        virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.Placeable measure-BRTryo0(long)>($l0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2;

        virtualinvoke r0.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$performMeasure$2: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

