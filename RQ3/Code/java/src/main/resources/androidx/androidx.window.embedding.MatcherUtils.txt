androidx.window.embedding.MatcherUtils
<androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE>
<androidx.window.embedding.MatcherUtils: boolean sDebugMatchers>
<androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag>
    private void <init>()
    {
        androidx.window.embedding.MatcherUtils r0;

        r0 := @this: androidx.window.embedding.MatcherUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean areComponentsMatching$window_release(android.content.ComponentName, android.content.ComponentName)
    {
        androidx.window.embedding.MatcherUtils r0;
        android.content.ComponentName r1, r2;
        java.lang.CharSequence $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, z11, $z12, $z13;
        java.lang.String $r5, $r6, $r7, $r8, $r10, $r11, $r12, r13, $r14, $r15, $r16, r17, r18;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: androidx.window.embedding.MatcherUtils;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ruleComponent");

        if r1 != null goto label03;

        $r11 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, "*");

        if $z5 == 0 goto label01;

        $r12 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getClassName()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, "*");

        if $z6 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        return $z7;

     label03:
        r13 = virtualinvoke r1.<android.content.ComponentName: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r13, "activityComponent.toString()");

        $r4 = (java.lang.CharSequence) r13;

        $r3 = (java.lang.CharSequence) "*";

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r4, $r3, 0, 2, null);

        if $z0 != 0 goto label04;

        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        if $z8 != 0 goto label06;

        $r14 = "Wildcard can only be part of the rule.";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label06:
        $r5 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r6 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 != 0 goto label07;

        $r15 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "activityComponent.packageName");

        $r16 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "ruleComponent.packageName");

        $z4 = specialinvoke r0.<androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>($r15, $r16);

        if $z4 == 0 goto label08;

     label07:
        $z10 = 1;

        goto label09;

     label08:
        $z10 = 0;

     label09:
        z11 = $z10;

        $r7 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $r8 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getClassName()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z2 != 0 goto label10;

        r17 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r17, "activityComponent.className");

        r18 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getClassName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r18, "ruleComponent.className");

        $z3 = specialinvoke r0.<androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(r17, r18);

        if $z3 == 0 goto label11;

     label10:
        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        if z11 == 0 goto label13;

        if $z12 == 0 goto label13;

        $z13 = 1;

        goto label14;

     label13:
        $z13 = 0;

     label14:
        return $z13;
    }

    public final boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity, android.content.ComponentName)
    {
        androidx.window.embedding.MatcherUtils r0, $r7;
        android.app.Activity r1;
        android.content.ComponentName r2, r4, r5, $r6;
        android.content.Intent r3;
        boolean z0, $z2, $z3;

        r0 := @this: androidx.window.embedding.MatcherUtils;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.content.ComponentName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "activity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ruleComponent");

        $r6 = virtualinvoke r1.<android.app.Activity: android.content.ComponentName getComponentName()>();

        $z2 = virtualinvoke r0.<androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)>($r6, r2);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r1.<android.app.Activity: android.content.Intent getIntent()>();

        if r3 != null goto label2;

        $z3 = 0;

        goto label4;

     label2:
        r4 = virtualinvoke r3.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r4 != null goto label3;

        $z3 = 0;

        goto label4;

     label3:
        r5 = r4;

        $r7 = <androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE>;

        z0 = virtualinvoke $r7.<androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)>(r5, r2);

        $z3 = z0;

     label4:
        return $z3;
    }

    private final boolean wildcardMatch(java.lang.String, java.lang.String)
    {
        androidx.window.embedding.MatcherUtils r0;
        java.lang.String r1, r2, r3, $r9, $r10;
        java.lang.CharSequence $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: androidx.window.embedding.MatcherUtils;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = (java.lang.CharSequence) r2;

        $r4 = (java.lang.CharSequence) "*";

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r5, $r4, 0, 2, null);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "*");

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r6 = (java.lang.CharSequence) r2;

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r6, "*", 0, 0, 6, null);

        $r7 = (java.lang.CharSequence) r2;

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r7, "*", 0, 0, 6, null);

        if $i0 != $i1 goto label3;

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r2, "*", 0, 2, null);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z4 != 0 goto label5;

        $r10 = "Name pattern with a wildcard must only contain a single wildcard in the end";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, r3, 0, 2, null);

        return $z2;
    }

    static void <clinit>()
    {
        androidx.window.embedding.MatcherUtils $r0;

        $r0 = new androidx.window.embedding.MatcherUtils;

        specialinvoke $r0.<androidx.window.embedding.MatcherUtils: void <init>()>();

        <androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE> = $r0;

        return;
    }

