androidx.camera.camera2.internal.CameraStateMachine
<androidx.camera.camera2.internal.CameraStateMachine: java.lang.String TAG>
<androidx.camera.camera2.internal.CameraStateMachine: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>
<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates>
    void <init>(androidx.camera.core.impl.CameraStateRegistry)
    {
        androidx.camera.camera2.internal.CameraStateMachine r0;
        androidx.camera.core.impl.CameraStateRegistry r1;
        androidx.lifecycle.MutableLiveData $r2, $r4;
        androidx.camera.core.CameraState$Type $r3;
        androidx.camera.core.CameraState $r5;

        r0 := @this: androidx.camera.camera2.internal.CameraStateMachine;

        r1 := @parameter0: androidx.camera.core.impl.CameraStateRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry> = r1;

        $r2 = new androidx.lifecycle.MutableLiveData;

        specialinvoke $r2.<androidx.lifecycle.MutableLiveData: void <init>()>();

        r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates> = $r2;

        $r4 = r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates>;

        $r3 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type CLOSED>;

        $r5 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type)>($r3);

        virtualinvoke $r4.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>($r5);

        return;
    }

    public void updateState(androidx.camera.core.impl.CameraInternal$State, androidx.camera.core.CameraState$StateError)
    {
        androidx.camera.camera2.internal.CameraStateMachine r0;
        androidx.camera.core.impl.CameraInternal$State r1;
        androidx.camera.core.CameraState$StateError r2;
        androidx.camera.core.CameraState r3, r19;
        int[] $r4;
        int $i0, $i1;
        androidx.camera.core.CameraState$Type $r5, $r11, $r12, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.lang.String $r9, $r18, $r27;
        androidx.lifecycle.MutableLiveData $r10, $r28;
        java.lang.IllegalStateException $r14;
        java.lang.Object $r29;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.CameraStateMachine;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal$State;

        r2 := @parameter1: androidx.camera.core.CameraState$StateError;

        $r4 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $i0 = virtualinvoke r1.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label5;
            default: goto label6;
        };

     label1:
        r19 = specialinvoke r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.camera.core.CameraState onCameraPendingOpen()>();

        goto label7;

     label2:
        $r13 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type OPENING>;

        r19 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type,androidx.camera.core.CameraState$StateError)>($r13, r2);

        goto label7;

     label3:
        $r12 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type OPEN>;

        r19 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type,androidx.camera.core.CameraState$StateError)>($r12, r2);

        goto label7;

     label4:
        $r11 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type CLOSING>;

        r19 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type,androidx.camera.core.CameraState$StateError)>($r11, r2);

        goto label7;

     label5:
        $r5 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type CLOSED>;

        r19 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type,androidx.camera.core.CameraState$StateError)>($r5, r2);

        goto label7;

     label6:
        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown internal camera state: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label7:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New public camera state ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraStateMachine", $r27);

        $r28 = r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates>;

        $r29 = virtualinvoke $r28.<androidx.lifecycle.MutableLiveData: java.lang.Object getValue()>();

        r3 = (androidx.camera.core.CameraState) $r29;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r3, r19);

        if $z0 != 0 goto label8;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Publishing new public camera state ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraStateMachine", $r9);

        $r10 = r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates>;

        virtualinvoke $r10.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>(r19);

     label8:
        return;
    }

    private androidx.camera.core.CameraState onCameraPendingOpen()
    {
        androidx.camera.camera2.internal.CameraStateMachine r0;
        androidx.camera.core.impl.CameraStateRegistry $r1;
        boolean $z0;
        androidx.camera.core.CameraState$Type $r2, $r3;
        androidx.camera.core.CameraState $r4;

        r0 := @this: androidx.camera.camera2.internal.CameraStateMachine;

        $r1 = r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>;

        $z0 = virtualinvoke $r1.<androidx.camera.core.impl.CameraStateRegistry: boolean isCameraClosing()>();

        if $z0 == 0 goto label1;

        $r3 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type OPENING>;

        $r4 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type)>($r3);

        goto label2;

     label1:
        $r2 = <androidx.camera.core.CameraState$Type: androidx.camera.core.CameraState$Type PENDING_OPEN>;

        $r4 = staticinvoke <androidx.camera.core.CameraState: androidx.camera.core.CameraState create(androidx.camera.core.CameraState$Type)>($r2);

     label2:
        return $r4;
    }

    public androidx.lifecycle.LiveData getStateLiveData()
    {
        androidx.camera.camera2.internal.CameraStateMachine r0;
        androidx.lifecycle.MutableLiveData $r1;

        r0 := @this: androidx.camera.camera2.internal.CameraStateMachine;

        $r1 = r0.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.MutableLiveData mCameraStates>;

        return $r1;
    }

androidx.camera.camera2.internal.CameraStateMachine$1
<androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>
    static void <clinit>()
    {
        androidx.camera.core.impl.CameraInternal$State[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        androidx.camera.core.impl.CameraInternal$State $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.Throwable $r16, $r17, $r18, $r19, $r20, $r21, $r22, r23, r24, r25, r26, r27, r28, r29;

        $r0 = staticinvoke <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State> = $r1;

     label01:
        $r3 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r2 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State PENDING_OPEN>;

        $i1 = virtualinvoke $r2.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        r23 = $r22;

     label04:
        $r5 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r4 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPENING>;

        $i2 = virtualinvoke $r4.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r19 := @caughtexception;

        r24 = $r19;

     label07:
        $r7 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r6 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPEN>;

        $i3 = virtualinvoke $r6.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        r25 = $r17;

     label10:
        $r9 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r8 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSING>;

        $i4 = virtualinvoke $r8.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r21 := @caughtexception;

        r26 = $r21;

     label13:
        $r11 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r10 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASING>;

        $i5 = virtualinvoke $r10.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r20 := @caughtexception;

        r27 = $r20;

     label16:
        $r13 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r12 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSED>;

        $i6 = virtualinvoke $r12.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

        r28 = $r16;

     label19:
        $r15 = <androidx.camera.camera2.internal.CameraStateMachine$1: int[] $SwitchMap$androidx$camera$core$impl$CameraInternal$State>;

        $r14 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASED>;

        $i7 = virtualinvoke $r14.<androidx.camera.core.impl.CameraInternal$State: int ordinal()>();

        $r15[$i7] = 7;

     label20:
        goto label22;

     label21:
        $r18 := @caughtexception;

        r29 = $r18;

     label22:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
    }

