kotlin.time.DurationUnit
<kotlin.time.DurationUnit: kotlin.time.DurationUnit[] $VALUES>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>
<kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>
<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit timeUnit>
    private static final kotlin.time.DurationUnit[] $values()
    {
        kotlin.time.DurationUnit[] $r0;
        kotlin.time.DurationUnit $r1;

        $r0 = newarray (kotlin.time.DurationUnit)[7];

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $r0[0] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $r0[1] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $r0[2] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $r0[3] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $r0[4] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $r0[5] = $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $r0[6] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        kotlin.time.DurationUnit[] $r0;
        kotlin.time.DurationUnit $r1;
        java.util.concurrent.TimeUnit $r2;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("NANOSECONDS", 0, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("MICROSECONDS", 1, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("MILLISECONDS", 2, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("SECONDS", 3, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("MINUTES", 4, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("HOURS", 5, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS> = $r1;

        $r1 = new kotlin.time.DurationUnit;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        specialinvoke $r1.<kotlin.time.DurationUnit: void <init>(java.lang.String,int,java.util.concurrent.TimeUnit)>("DAYS", 6, $r2);

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS> = $r1;

        $r0 = staticinvoke <kotlin.time.DurationUnit: kotlin.time.DurationUnit[] $values()>();

        <kotlin.time.DurationUnit: kotlin.time.DurationUnit[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, java.util.concurrent.TimeUnit)
    {
        kotlin.time.DurationUnit $r0;
        java.lang.String $r1;
        int $i0;
        java.util.concurrent.TimeUnit $r2;

        $r0 := @this: kotlin.time.DurationUnit;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit timeUnit> = $r2;

        return;
    }

    public static kotlin.time.DurationUnit valueOf(java.lang.String)
    {
        java.lang.Enum $r0;
        java.lang.String $r1;
        kotlin.time.DurationUnit $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lkotlin/time/DurationUnit;", $r1);

        $r2 = (kotlin.time.DurationUnit) $r0;

        return $r2;
    }

    public static kotlin.time.DurationUnit[] values()
    {
        java.lang.Object $r0;
        kotlin.time.DurationUnit[] $r1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (kotlin.time.DurationUnit[]) $r0;

        return $r1;
    }

    public final java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()
    {
        kotlin.time.DurationUnit $r0;
        java.util.concurrent.TimeUnit r1;

        $r0 := @this: kotlin.time.DurationUnit;

        r1 = $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit timeUnit>;

        return r1;
    }

