androidx.media3.exoplayer.audio.ForwardingAudioSink
<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>
    public void <init>(androidx.media3.exoplayer.audio.AudioSink)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink> = r1;

        return;
    }

    public void setListener(androidx.media3.exoplayer.audio.AudioSink$Listener)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink$Listener r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioSink$Listener;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setListener(androidx.media3.exoplayer.audio.AudioSink$Listener)>(r1);

        return;
    }

    public void setPlayerId(androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.analytics.PlayerId r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.analytics.PlayerId;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setPlayerId(androidx.media3.exoplayer.analytics.PlayerId)>(r1);

        return;
    }

    public boolean supportsFormat(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $z0 = interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>(r1);

        return $z0;
    }

    public int getFormatSupport(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $i0 = interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: int getFormatSupport(androidx.media3.common.Format)>(r1);

        return $i0;
    }

    public long getCurrentPositionUs(boolean)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        boolean z0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $l0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: long getCurrentPositionUs(boolean)>(z0);

        return $l0;
    }

    public void configure(androidx.media3.common.Format, int, int[]) throws androidx.media3.exoplayer.audio.AudioSink$ConfigurationException
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.Format r1;
        int i0;
        int[] r2;
        androidx.media3.exoplayer.audio.AudioSink $r3;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        $r3 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.audio.AudioSink: void configure(androidx.media3.common.Format,int,int[])>(r1, i0, r2);

        return;
    }

    public void play()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void play()>();

        return;
    }

    public void handleDiscontinuity()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void handleDiscontinuity()>();

        return;
    }

    public boolean handleBuffer(java.nio.ByteBuffer, long, int) throws androidx.media3.exoplayer.audio.AudioSink$InitializationException, androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        java.nio.ByteBuffer r1;
        long l0;
        int i1;
        androidx.media3.exoplayer.audio.AudioSink $r2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $z0 = interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: boolean handleBuffer(java.nio.ByteBuffer,long,int)>(r1, l0, i1);

        return $z0;
    }

    public void playToEndOfStream() throws androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void playToEndOfStream()>();

        return;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: boolean isEnded()>();

        return $z0;
    }

    public boolean hasPendingData()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: boolean hasPendingData()>();

        return $z0;
    }

    public void setPlaybackParameters(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.PlaybackParameters r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setPlaybackParameters(androidx.media3.common.PlaybackParameters)>(r1);

        return;
    }

    public androidx.media3.common.PlaybackParameters getPlaybackParameters()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        androidx.media3.common.PlaybackParameters $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: androidx.media3.common.PlaybackParameters getPlaybackParameters()>();

        return $r2;
    }

    public void setSkipSilenceEnabled(boolean)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        boolean z0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void setSkipSilenceEnabled(boolean)>(z0);

        return;
    }

    public boolean getSkipSilenceEnabled()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: boolean getSkipSilenceEnabled()>();

        return $z0;
    }

    public void setAudioAttributes(androidx.media3.common.AudioAttributes)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.AudioAttributes r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.AudioAttributes;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setAudioAttributes(androidx.media3.common.AudioAttributes)>(r1);

        return;
    }

    public androidx.media3.common.AudioAttributes getAudioAttributes()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        androidx.media3.common.AudioAttributes $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: androidx.media3.common.AudioAttributes getAudioAttributes()>();

        return $r2;
    }

    public void setAudioSessionId(int)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        int i0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void setAudioSessionId(int)>(i0);

        return;
    }

    public void setAuxEffectInfo(androidx.media3.common.AuxEffectInfo)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.common.AuxEffectInfo r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: androidx.media3.common.AuxEffectInfo;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setAuxEffectInfo(androidx.media3.common.AuxEffectInfo)>(r1);

        return;
    }

    public void setPreferredDevice(android.media.AudioDeviceInfo)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        android.media.AudioDeviceInfo r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        $r2 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setPreferredDevice(android.media.AudioDeviceInfo)>(r1);

        return;
    }

    public void setOutputStreamOffsetUs(long)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        long l0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void setOutputStreamOffsetUs(long)>(l0);

        return;
    }

    public void enableTunnelingV21()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void enableTunnelingV21()>();

        return;
    }

    public void disableTunneling()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void disableTunneling()>();

        return;
    }

    public void setVolume(float)
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        float f0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void setVolume(float)>(f0);

        return;
    }

    public void pause()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void pause()>();

        return;
    }

    public void flush()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void flush()>();

        return;
    }

    public void experimentalFlushWithoutAudioTrackRelease()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void experimentalFlushWithoutAudioTrackRelease()>();

        return;
    }

    public void reset()
    {
        androidx.media3.exoplayer.audio.ForwardingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ForwardingAudioSink;

        $r1 = r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: androidx.media3.exoplayer.audio.AudioSink sink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void reset()>();

        return;
    }

