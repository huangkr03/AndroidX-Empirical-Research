androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat
<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>
    private void <init>(android.hardware.camera2.CameraCaptureSession, android.os.Handler)
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.os.Handler r2;
        int $i0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompatApi28Impl $r4;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 28 goto label1;

        $r4 = new androidx.camera.camera2.internal.compat.CameraCaptureSessionCompatApi28Impl;

        specialinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompatApi28Impl: void <init>(android.hardware.camera2.CameraCaptureSession)>(r1);

        r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl> = $r4;

        goto label2;

     label1:
        $r3 = staticinvoke <androidx.camera.camera2.internal.compat.CameraCaptureSessionCompatBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl create(android.hardware.camera2.CameraCaptureSession,android.os.Handler)>(r1, r2);

        r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl> = $r3;

     label2:
        return;
    }

    public static androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)
    {
        android.hardware.camera2.CameraCaptureSession r0;
        android.os.Handler $r1;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r2;

        r0 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r1 = staticinvoke <androidx.camera.core.impl.utils.MainThreadAsyncHandler: android.os.Handler getInstance()>();

        $r2 = staticinvoke <androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession,android.os.Handler)>(r0, $r1);

        return $r2;
    }

    public static androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession, android.os.Handler)
    {
        android.hardware.camera2.CameraCaptureSession r0;
        android.os.Handler r1;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r2;

        r0 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r1 := @parameter1: android.os.Handler;

        $r2 = new androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        specialinvoke $r2.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: void <init>(android.hardware.camera2.CameraCaptureSession,android.os.Handler)>(r0, r1);

        return $r2;
    }

    public android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r1;
        android.hardware.camera2.CameraCaptureSession $r2;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        $r1 = r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>;

        $r2 = interfaceinvoke $r1.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl: android.hardware.camera2.CameraCaptureSession unwrap()>();

        return $r2;
    }

    public int captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>;

        $i0 = interfaceinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>;

        $i0 = interfaceinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>;

        $i0 = interfaceinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl mImpl>;

        $i0 = interfaceinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

