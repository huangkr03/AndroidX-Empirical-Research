androidx.media3.test.utils.DumpFileAsserts
<androidx.media3.test.utils.DumpFileAsserts: java.lang.String DEFAULT_TEST_ASSET_DIRECTORY>
<androidx.media3.test.utils.DumpFileAsserts: java.lang.String DUMP_UPDATE_INSTRUCTIONS>
<androidx.media3.test.utils.DumpFileAsserts: int COMPARE_WITH_EXISTING>
<androidx.media3.test.utils.DumpFileAsserts: int WRITE_TO_LOCAL>
<androidx.media3.test.utils.DumpFileAsserts: int WRITE_TO_DEVICE>
<androidx.media3.test.utils.DumpFileAsserts: int DUMP_FILE_ACTION>
    private void <init>()
    {
        androidx.media3.test.utils.DumpFileAsserts r0;

        r0 := @this: androidx.media3.test.utils.DumpFileAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertOutput(android.content.Context, androidx.media3.test.utils.Dumper$Dumpable, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        androidx.media3.test.utils.Dumper$Dumpable r1;
        java.lang.String r2, $r5;
        androidx.media3.test.utils.Dumper $r3, $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.media3.test.utils.Dumper$Dumpable;

        r2 := @parameter2: java.lang.String;

        $r3 = new androidx.media3.test.utils.Dumper;

        specialinvoke $r3.<androidx.media3.test.utils.Dumper: void <init>()>();

        $r4 = virtualinvoke $r3.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(androidx.media3.test.utils.Dumper$Dumpable)>(r1);

        $r5 = virtualinvoke $r4.<androidx.media3.test.utils.Dumper: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r0, $r5, "../test_data/src/test/assets", r2);

        return;
    }

    public static void assertOutput(android.content.Context, androidx.media3.test.utils.Dumper$Dumpable, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        androidx.media3.test.utils.Dumper$Dumpable r1;
        java.lang.String r2, r3, $r6;
        androidx.media3.test.utils.Dumper $r4, $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.media3.test.utils.Dumper$Dumpable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = new androidx.media3.test.utils.Dumper;

        specialinvoke $r4.<androidx.media3.test.utils.Dumper: void <init>()>();

        $r5 = virtualinvoke $r4.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(androidx.media3.test.utils.Dumper$Dumpable)>(r1);

        $r6 = virtualinvoke $r5.<androidx.media3.test.utils.Dumper: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r0, $r6, r2, r3);

        return;
    }

    public static void assertOutput(android.content.Context, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1, r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "../test_data/src/test/assets", r2);

        return;
    }

    public static void assertOutput(android.content.Context, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.Throwable r5, $r9, r12;
        java.lang.Object[] $r6;
        com.google.common.truth.StandardSubjectBuilder $r7;
        com.google.common.truth.StringSubject $r8;
        java.io.IOException r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

     label1:
        r4 = staticinvoke <androidx.media3.test.utils.TestUtil: java.lang.String getString(android.content.Context,java.lang.String)>(r0, r3);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        r11 = new java.io.IOException;

        specialinvoke r11.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Dump file not found. To update the dump file, change DumpFileAsserts#DUMP_FILE_ACTION to WRITE_TO_LOCAL (for Robolectric tests) or WRITE_TO_DEVICE (for instrumentation tests) and re-run the test.", r5);

        r12 = (java.lang.Throwable) r11;

        throw r12;

     label4:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r3;

        $r6[1] = "To update the dump file, change DumpFileAsserts#DUMP_FILE_ACTION to WRITE_TO_LOCAL (for Robolectric tests) or WRITE_TO_DEVICE (for instrumentation tests) and re-run the test.";

        $r7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Actual data doesn\'t match dump file: %s\n%s", $r6);

        $r8 = virtualinvoke $r7.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.StringSubject that(java.lang.String)>(r1);

        virtualinvoke $r8.<com.google.common.truth.StringSubject: void isEqualTo(java.lang.Object)>(r4);

        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

