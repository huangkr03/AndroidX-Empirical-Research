androidx.camera.camera2.internal.Camera2DeviceSurfaceManager
<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.lang.String TAG>
<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap>
<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>
    public void <init>(android.content.Context, java.lang.Object, java.util.Set) throws androidx.camera.core.CameraUnavailableException
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        android.content.Context r1;
        java.lang.Object r2;
        java.util.Set r3;
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1 $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        $r4 = new androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1: void <init>()>();

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: void <init>(android.content.Context,androidx.camera.camera2.internal.CamcorderProfileHelper,java.lang.Object,java.util.Set)>(r1, $r4, r2, r3);

        return;
    }

    void <init>(android.content.Context, androidx.camera.camera2.internal.CamcorderProfileHelper, java.lang.Object, java.util.Set) throws androidx.camera.core.CameraUnavailableException
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        android.content.Context r1;
        androidx.camera.camera2.internal.CamcorderProfileHelper r2;
        java.lang.Object r3;
        java.util.Set r4;
        java.util.HashMap $r5;
        boolean $z0;
        androidx.camera.camera2.internal.compat.CameraManagerCompat r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.camera2.internal.CamcorderProfileHelper;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap> = $r5;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper> = r2;

        $z0 = r3 instanceof androidx.camera.camera2.internal.compat.CameraManagerCompat;

        if $z0 == 0 goto label1;

        r7 = (androidx.camera.camera2.internal.compat.CameraManagerCompat) r3;

        goto label2;

     label1:
        r7 = staticinvoke <androidx.camera.camera2.internal.compat.CameraManagerCompat: androidx.camera.camera2.internal.compat.CameraManagerCompat 'from'(android.content.Context)>(r1);

     label2:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: void init(android.content.Context,androidx.camera.camera2.internal.compat.CameraManagerCompat,java.util.Set)>(r1, r7, r4);

        return;
    }

    private void init(android.content.Context, androidx.camera.camera2.internal.compat.CameraManagerCompat, java.util.Set) throws androidx.camera.core.CameraUnavailableException
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        android.content.Context r1;
        androidx.camera.camera2.internal.compat.CameraManagerCompat r2;
        java.util.Set r3;
        java.util.Iterator r4;
        java.lang.String r5;
        boolean $z0;
        java.lang.Object $r7;
        androidx.camera.camera2.internal.SupportedSurfaceCombination $r8;
        androidx.camera.camera2.internal.CamcorderProfileHelper $r9;
        java.util.Map $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.CameraManagerCompat;

        r3 := @parameter2: java.util.Set;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap>;

        $r8 = new androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        specialinvoke $r8.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void <init>(android.content.Context,java.lang.String,androidx.camera.camera2.internal.compat.CameraManagerCompat,androidx.camera.camera2.internal.CamcorderProfileHelper)>(r1, r5, r2, $r9);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8);

        goto label1;

     label2:
        return;
    }

    public boolean checkSupported(java.lang.String, java.util.List)
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        java.lang.String r1;
        java.util.List r2;
        androidx.camera.camera2.internal.SupportedSurfaceCombination r3;
        boolean $z0, z1;
        java.util.Map $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r4 = r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (androidx.camera.camera2.internal.SupportedSurfaceCombination) $r5;

        z1 = 0;

        if r3 == null goto label3;

        z1 = virtualinvoke r3.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean checkSupported(java.util.List)>(r2);

     label3:
        return z1;
    }

    public androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(java.lang.String, int, android.util.Size)
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        java.lang.String r1;
        int i0;
        android.util.Size r2;
        androidx.camera.camera2.internal.SupportedSurfaceCombination r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        androidx.camera.core.impl.SurfaceConfig r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.util.Size;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (androidx.camera.camera2.internal.SupportedSurfaceCombination) $r5;

        r6 = null;

        if r3 == null goto label1;

        r6 = virtualinvoke r3.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(int,android.util.Size)>(i0, r2);

     label1:
        return r6;
    }

    public java.util.Map getSuggestedResolutions(java.lang.String, java.util.List, java.util.List)
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager r0;
        java.lang.String r1, $r12;
        java.util.List r2, r3;
        androidx.camera.camera2.internal.SupportedSurfaceCombination r4;
        boolean $z0, $z1;
        java.util.Map $r5, $r7;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "No new use cases to be bound.");

        $r5 = r0.<androidx.camera.camera2.internal.Camera2DeviceSurfaceManager: java.util.Map mCameraSupportedSurfaceCombinationMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (androidx.camera.camera2.internal.SupportedSurfaceCombination) $r6;

        if r4 != null goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such camera id in supported combination list: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r7 = virtualinvoke r4.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map getSuggestedResolutions(java.util.List,java.util.List)>(r2, r3);

        return $r7;
    }

androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1
    void <init>()
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1 r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasProfile(int, int)
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1 r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>(i0, i1);

        return $z0;
    }

    public android.media.CamcorderProfile get(int, int)
    {
        androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1 r0;
        int i0, i1;
        android.media.CamcorderProfile $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2DeviceSurfaceManager$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>(i0, i1);

        return $r1;
    }

