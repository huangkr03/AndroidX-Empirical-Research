com.google.common.collect.ImmutableMap
<com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY>
<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet>
<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet>
<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values>
    static void <clinit>()
    {
        java.util.Map$Entry[] $r0;

        $r0 = newarray (java.util.Map$Entry)[0];

        <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.collect.ImmutableMap $r0;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Iterable $r1;
        boolean $z0;
        java.util.Collection $r2;
        int $i0;
        com.google.common.collect.ImmutableMap $r3;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r1;

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        goto label2;

     label1:
        $i0 = 4;

     label2:
        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)>($r1);

        $r3 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r3;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.util.Map)
    {
        java.util.Map $r0;
        boolean $z0;
        com.google.common.collect.ImmutableMap $r1;
        java.util.Set $r2;
        java.lang.Iterable r3;

        $r0 := @parameter0: java.util.Map;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableMap;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof java.util.SortedMap;

        if $z0 != 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableMap) $r0;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: boolean isPartialView()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        r3 = (java.lang.Iterable) $r2;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)>(r3);

        return $r1;
    }

    public static com.google.common.collect.ImmutableMap of()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        return r0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        com.google.common.collect.ImmutableMap $r0;
        java.io.ObjectInputStream $r1;
        java.io.InvalidObjectException $r2;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.io.InvalidObjectException;

        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r2;
    }

    public final void clear()
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableCollection $r2;
        boolean $z0;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createEntrySet()>
<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createKeySet()>
<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection createValues()>
    public com.google.common.collect.ImmutableSet entrySet()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createEntrySet()>();

        $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean equalsImpl(java.util.Map,java.lang.Object)>($r0, $r1);

        return $z0;
    }

<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>
    public final java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1, $r2;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r2 == null goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public int hashCode()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableSet $r1;
        int $i0;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $i0 = staticinvoke <com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.ImmutableMap $r0;
        int $i0;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $i0 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

<com.google.common.collect.ImmutableMap: boolean isPartialView()>
    public com.google.common.collect.ImmutableSet keySet()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createKeySet()>();

        $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1, $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final void putAll(java.util.Map)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.util.Map $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.String $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.String toStringImpl(java.util.Map)>($r0);

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableCollection $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection createValues()>();

        $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableCollection $r1;
        java.util.Collection r2;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        r2 = (java.util.Collection) $r1;

        return r2;
    }

    java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableMap $r0;
        com.google.common.collect.ImmutableMap$SerializedForm $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new com.google.common.collect.ImmutableMap$SerializedForm;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$SerializedForm: void <init>(com.google.common.collect.ImmutableMap)>($r0);

        return $r1;
    }

com.google.common.collect.ImmutableMap$Builder$DuplicateKey
<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object key>
<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value1>
<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value2>
    void <init>(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey $r0;
        java.lang.Object $r1, $r2, $r3;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object key> = $r1;

        $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value1> = $r2;

        $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value2> = $r3;

        return;
    }

    java.lang.IllegalArgumentException exception()
    {
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ");

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object key>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value1>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object key>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.Object value2>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        return $r1;
    }

com.google.common.collect.ImmutableMap$Builder
<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>
<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>
<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed>
<com.google.common.collect.ImmutableMap$Builder: int size>
<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>
    public void <init>()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>(4);

        return;
    }

    void <init>(int)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        int $i0;
        java.lang.Object[] $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $i0 = $i0 + $i0;

        $r1 = newarray (java.lang.Object)[$i0];

        $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = $r1;

        $r0.<com.google.common.collect.ImmutableMap$Builder: int size> = 0;

        $r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

        return;
    }

    private com.google.common.collect.ImmutableMap build(boolean)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        boolean $z0, $z1;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;
        java.util.Comparator $r3;
        java.lang.Object[] $r4, $r5, $r6;
        com.google.common.collect.RegularImmutableMap $r7;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        if $r1 != null goto label1;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r2;

     label2:
        $i0 = $r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        if $r3 != null goto label3;

        $r4 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        goto label6;

     label3:
        $z1 = $r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed>;

        if $z1 == 0 goto label4;

        $r4 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = $i0 + $i0;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i1);

        $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = $r4;

     label4:
        $r4 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        if $z0 != 0 goto label5;

        $i1 = $r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r5 = specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] lastEntryForEachKey(java.lang.Object[],int)>($r4, $i1);

        $r4 = $r5;

        $i1 = lengthof $r5;

        $r6 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i2 = lengthof $r6;

        if $i1 >= $i2 goto label5;

        $i0 = lengthof $r5;

        $i0 = $i0 >>> 1;

     label5:
        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        staticinvoke <com.google.common.collect.ImmutableMap$Builder: void sortEntries(java.lang.Object[],int,java.util.Comparator)>($r4, $i0, $r3);

     label6:
        $r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 1;

        $r7 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[],com.google.common.collect.ImmutableMap$Builder)>($i0, $r4, $r0);

        if $z0 == 0 goto label8;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        if $r1 != null goto label7;

        return $r7;

     label7:
        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r2;

     label8:
        return $r7;
    }

    private void ensureCapacity(int)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        $i0 = $i0 + $i0;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label1;

        $i1 = lengthof $r1;

        $i0 = staticinvoke <com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)>($i1, $i0);

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = $r1;

        $r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

     label1:
        return;
    }

    private java.lang.Object[] lastEntryForEachKey(java.lang.Object[], int)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Object[] $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.BitSet $r2, r7;
        java.util.HashSet $r3, r6;
        java.lang.Object $r4;
        boolean $z0;
        java.util.Set r8;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        r6 = new java.util.HashSet;

        $r3 = r6;

        specialinvoke r6.<java.util.HashSet: void <init>()>();

        r7 = new java.util.BitSet;

        $r2 = r7;

        specialinvoke r7.<java.util.BitSet: void <init>()>();

        $i1 = $i0 + -1;

     label1:
        if $i1 < 0 goto label3;

        $i2 = $i1 + $i1;

        $r4 = $r1[$i2];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r8 = (java.util.Set) $r3;

        $z0 = interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        virtualinvoke $r2.<java.util.BitSet: void set(int)>($i1);

     label2:
        $i1 = $i1 + -1;

        goto label1;

     label3:
        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        return $r1;

     label4:
        $i1 = virtualinvoke $r2.<java.util.BitSet: int cardinality()>();

        $i1 = $i0 - $i1;

        $i1 = $i1 + $i1;

        $r5 = newarray (java.lang.Object)[$i1];

        $i1 = 0;

        $i2 = 0;

     label5:
        $i3 = $i0 + $i0;

        if $i1 >= $i3 goto label7;

        $i3 = $i1 >>> 1;

        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean get(int)>($i3);

        if $z0 == 0 goto label6;

        $i1 = $i1 + 2;

        goto label5;

     label6:
        $i3 = $i2 + 1;

        $i4 = $i1 + 1;

        $r4 = $r1[$i1];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r5[$i2] = $r4;

        $i2 = $i3 + 1;

        $i1 = $i4 + 1;

        $r4 = $r1[$i4];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r5[$i3] = $r4;

        goto label5;

     label7:
        return $r5;
    }

    static void sortEntries(java.lang.Object[], int, java.util.Comparator)
    {
        java.lang.Object[] $r0, $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r4;
        java.util.Comparator $r3;
        com.google.common.collect.Ordering $r5;
        com.google.common.base.Function $r6;
        java.util.AbstractMap$SimpleImmutableEntry r7;
        java.util.Map$Entry r8;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r3 := @parameter2: java.util.Comparator;

        $r1 = newarray (java.util.Map$Entry)[$i0];

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $i3 = $i2 + $i2;

        $r2 = $r0[$i3];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i3 = $i3 + 1;

        $r4 = $r0[$i3];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r7 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke r7.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r1[$i2] = r7;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r3);

        $r6 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function valueFunction()>();

        $r5 = virtualinvoke $r5.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r6);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r1, 0, $i0, $r5);

     label3:
        if $i1 >= $i0 goto label4;

        $i2 = $i1 + $i1;

        $r2 = $r1[$i1];

        r8 = (java.util.Map$Entry) $r2;

        $r2 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0[$i2] = $r2;

        $i2 = $i2 + 1;

        $r2 = $r1[$i1];

        r8 = (java.util.Map$Entry) $r2;

        $r2 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0[$i2] = $r2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;
    }

    public com.google.common.collect.ImmutableMap build()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        com.google.common.collect.ImmutableMap $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableMap buildOrThrow()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        com.google.common.collect.ImmutableMap $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build(boolean)>(1);

        return $r1;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1;
        java.lang.Object[] $r3;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $i1 = $r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $i1 + 1;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = $r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = $r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i1 + $i1;

        $r3[$i0] = $r2;

        $i0 = $i1 + $i1;

        $i0 = $i0 + 1;

        $r3[$i0] = $r1;

        $i1 = $i1 + 1;

        $r0.<com.google.common.collect.ImmutableMap$Builder: int size> = $i1;

        return $r0;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2, $r3;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r0;
    }

    public com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Iterable $r1;
        boolean $z0;
        int $i0, $i1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;

        $r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $i0 = $r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r2 = (java.util.Collection) $r1;

        $i1 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)>($r5);

        goto label2;

     label3:
        return $r0;
    }

com.google.common.collect.ImmutableMap$SerializedForm
<com.google.common.collect.ImmutableMap$SerializedForm: long serialVersionUID>
<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object keys>
<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object values>
    void <init>(com.google.common.collect.ImmutableMap)
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r0;
        com.google.common.collect.ImmutableMap $r1;
        int $i0;
        java.lang.Object[] $r2, $r3;
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.UnmodifiableIterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry $r7;

        $r0 := @this: com.google.common.collect.ImmutableMap$SerializedForm;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: int size()>();

        $r2 = newarray (java.lang.Object)[$i0];

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: int size()>();

        $r3 = newarray (java.lang.Object)[$i0];

        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2[$i0] = $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object keys> = $r2;

        $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object values> = $r3;

        return;
    }

    final java.lang.Object legacyReadResolve()
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r0;
        java.lang.Object $r1, $r5;
        java.lang.Object[] $r2, $r3;
        int $i0, $i1;
        com.google.common.collect.ImmutableMap$Builder $r4;
        com.google.common.collect.ImmutableMap $r6;

        $r0 := @this: com.google.common.collect.ImmutableMap$SerializedForm;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object keys>;

        $r2 = (java.lang.Object[]) $r1;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object values>;

        $r3 = (java.lang.Object[]) $r1;

        $i0 = lengthof $r2;

        $r4 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$SerializedForm: com.google.common.collect.ImmutableMap$Builder makeBuilder(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r5 = $r2[$i0];

        $r1 = $r3[$i0];

        virtualinvoke $r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r5, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r6;
    }

    com.google.common.collect.ImmutableMap$Builder makeBuilder(int)
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r0;
        int $i0;
        com.google.common.collect.ImmutableMap$Builder $r1;

        $r0 := @this: com.google.common.collect.ImmutableMap$SerializedForm;

        $i0 := @parameter0: int;

        $r1 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        return $r1;
    }

    final java.lang.Object readResolve()
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r0;
        java.lang.Object $r1, $r7;
        boolean $z0;
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableCollection $r3;
        int $i0;
        com.google.common.collect.ImmutableMap$Builder $r4;
        com.google.common.collect.UnmodifiableIterator $r5, $r6;
        com.google.common.collect.ImmutableMap $r8;

        $r0 := @this: com.google.common.collect.ImmutableMap$SerializedForm;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object keys>;

        $z0 = $r1 instanceof com.google.common.collect.ImmutableSet;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object legacyReadResolve()>();

        return $r1;

     label1:
        $r2 = (com.google.common.collect.ImmutableSet) $r1;

        $r1 = $r0.<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object values>;

        $r3 = (com.google.common.collect.ImmutableCollection) $r1;

        $i0 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: int size()>();

        $r4 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$SerializedForm: com.google.common.collect.ImmutableMap$Builder makeBuilder(int)>($i0);

        $r5 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r6 = virtualinvoke $r3.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r5.<com.google.common.collect.UnmodifiableIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r5.<com.google.common.collect.UnmodifiableIterator: java.lang.Object next()>();

        $r7 = virtualinvoke $r6.<com.google.common.collect.UnmodifiableIterator: java.lang.Object next()>();

        virtualinvoke $r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r1, $r7);

        goto label2;

     label3:
        $r8 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r8;
    }

