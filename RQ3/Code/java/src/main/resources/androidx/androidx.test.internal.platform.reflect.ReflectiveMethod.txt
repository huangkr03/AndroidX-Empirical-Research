androidx.test.internal.platform.reflect.ReflectiveMethod
<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String className>
<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String methodName>
<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.Class[] paramTypes>
<androidx.test.internal.platform.reflect.ReflectiveMethod: boolean initialized>
<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.reflect.Method method>
    public transient java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws androidx.test.internal.platform.reflect.ReflectionException
    {
        androidx.test.internal.platform.reflect.ReflectiveMethod r0;
        java.lang.Object r1, $r4;
        java.lang.Object[] r2;
        java.lang.reflect.Method $r3;
        java.lang.Throwable $r5, $r7, $r9, $r11, r13, r14, r15, r16, r21, r22, r23, r24;
        androidx.test.internal.platform.reflect.ReflectionException r17, r18, r19, r20;

        r0 := @this: androidx.test.internal.platform.reflect.ReflectiveMethod;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

     label1:
        specialinvoke r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: void initIfNecessary()>();

        $r3 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.reflect.Method method>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r4;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        r17 = new androidx.test.internal.platform.reflect.ReflectionException;

        specialinvoke r17.<androidx.test.internal.platform.reflect.ReflectionException: void <init>(java.lang.Exception)>(r13);

        r21 = (java.lang.Throwable) r17;

        throw r21;

     label4:
        $r9 := @caughtexception;

        r14 = $r9;

        r18 = new androidx.test.internal.platform.reflect.ReflectionException;

        specialinvoke r18.<androidx.test.internal.platform.reflect.ReflectionException: void <init>(java.lang.Exception)>(r14);

        r22 = (java.lang.Throwable) r18;

        throw r22;

     label5:
        $r7 := @caughtexception;

        r15 = $r7;

        r19 = new androidx.test.internal.platform.reflect.ReflectionException;

        specialinvoke r19.<androidx.test.internal.platform.reflect.ReflectionException: void <init>(java.lang.Exception)>(r15);

        r23 = (java.lang.Throwable) r19;

        throw r23;

     label6:
        $r5 := @caughtexception;

        r16 = $r5;

        r20 = new androidx.test.internal.platform.reflect.ReflectionException;

        specialinvoke r20.<androidx.test.internal.platform.reflect.ReflectionException: void <init>(java.lang.Exception)>(r16);

        r24 = (java.lang.Throwable) r20;

        throw r24;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
    }

    public transient java.lang.Object invokeStatic(java.lang.Object[]) throws androidx.test.internal.platform.reflect.ReflectionException
    {
        androidx.test.internal.platform.reflect.ReflectiveMethod r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;

        r0 := @this: androidx.test.internal.platform.reflect.ReflectiveMethod;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r1);

        return $r2;
    }

    public transient void <init>(java.lang.String, java.lang.String, java.lang.Class[])
    {
        androidx.test.internal.platform.reflect.ReflectiveMethod r0;
        java.lang.String r1, r2;
        java.lang.Class[] r3;

        r0 := @this: androidx.test.internal.platform.reflect.ReflectiveMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: boolean initialized> = 0;

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String className> = r1;

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.Class[] paramTypes> = r3;

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String methodName> = r2;

        return;
    }

    private synchronized void initIfNecessary() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException
    {
        androidx.test.internal.platform.reflect.ReflectiveMethod r0;
        boolean $z0;
        java.lang.String $r1, $r4;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r5, $r6;

        r0 := @this: androidx.test.internal.platform.reflect.ReflectiveMethod;

        $z0 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: boolean initialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String className>;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r4 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.String methodName>;

        $r3 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.Class[] paramTypes>;

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r4, $r3);

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.reflect.Method method> = $r5;

        $r6 = r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.reflect.Method method>;

        virtualinvoke $r6.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        r0.<androidx.test.internal.platform.reflect.ReflectiveMethod: boolean initialized> = 1;

        return;
    }

