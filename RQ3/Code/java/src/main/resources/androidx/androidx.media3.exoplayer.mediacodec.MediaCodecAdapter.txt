androidx.media3.exoplayer.mediacodec.MediaCodecAdapter
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueInputBufferIndex()>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueOutputBufferIndex(android.media.MediaCodec$BufferInfo)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: android.media.MediaFormat getOutputFormat()>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getInputBuffer(int)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getOutputBuffer(int)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueSecureInputBuffer(int,int,androidx.media3.decoder.CryptoInfo,long,int)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,long)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void flush()>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void release()>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setOnFrameRenderedListener(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener,android.os.Handler)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setOutputSurface(android.view.Surface)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setParameters(android.os.Bundle)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setVideoScalingMode(int)>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: boolean needsReconfiguration()>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: android.os.PersistableBundle getMetrics()>
androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.media.MediaFormat mediaFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.common.Format format>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.view.Surface surface>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.media.MediaCrypto crypto>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: int flags>
    public static androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration createForAudioDecoding(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, android.media.MediaFormat, androidx.media3.common.Format, android.media.MediaCrypto)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        android.media.MediaFormat r1;
        androidx.media3.common.Format r2;
        android.media.MediaCrypto r3;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration $r4;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter1: android.media.MediaFormat;

        r2 := @parameter2: androidx.media3.common.Format;

        r3 := @parameter3: android.media.MediaCrypto;

        $r4 = new androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        specialinvoke $r4.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,android.media.MediaFormat,androidx.media3.common.Format,android.view.Surface,android.media.MediaCrypto,int)>(r0, r1, r2, null, r3, 0);

        return $r4;
    }

    public static androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration createForVideoDecoding(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, android.media.MediaFormat, androidx.media3.common.Format, android.view.Surface, android.media.MediaCrypto)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        android.media.MediaFormat r1;
        androidx.media3.common.Format r2;
        android.view.Surface r3;
        android.media.MediaCrypto r4;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration $r5;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter1: android.media.MediaFormat;

        r2 := @parameter2: androidx.media3.common.Format;

        r3 := @parameter3: android.view.Surface;

        r4 := @parameter4: android.media.MediaCrypto;

        $r5 = new androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        specialinvoke $r5.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,android.media.MediaFormat,androidx.media3.common.Format,android.view.Surface,android.media.MediaCrypto,int)>(r0, r1, r2, r3, r4, 0);

        return $r5;
    }

    private void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, android.media.MediaFormat, androidx.media3.common.Format, android.view.Surface, android.media.MediaCrypto, int)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        android.media.MediaFormat r2;
        androidx.media3.common.Format r3;
        android.view.Surface r4;
        android.media.MediaCrypto r5;
        int i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: android.media.MediaFormat;

        r3 := @parameter2: androidx.media3.common.Format;

        r4 := @parameter3: android.view.Surface;

        r5 := @parameter4: android.media.MediaCrypto;

        i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo> = r1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.media.MediaFormat mediaFormat> = r2;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.common.Format format> = r3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.view.Surface surface> = r4;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.media.MediaCrypto crypto> = r5;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: int flags> = i0;

        return;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory DEFAULT>
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter createAdapter(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration)>
    static void <clinit>()
    {
        androidx.media3.exoplayer.mediacodec.DefaultMediaCodecAdapterFactory $r0;

        $r0 = new androidx.media3.exoplayer.mediacodec.DefaultMediaCodecAdapterFactory;

        specialinvoke $r0.<androidx.media3.exoplayer.mediacodec.DefaultMediaCodecAdapterFactory: void <init>()>();

        <androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory DEFAULT> = $r0;

        return;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener
<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener: void onFrameRendered(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,long,long)>
