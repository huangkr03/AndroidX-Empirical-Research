androidx.test.espresso.remote.EspressoRemote
<androidx.test.espresso.remote.EspressoRemote: java.lang.String TAG>
<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>
<androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>
<androidx.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_TYPE>
<androidx.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_UUID>
<androidx.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_PROTO>
<androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>
<androidx.test.espresso.remote.EspressoRemote: int MSG_TERMINATE>
<androidx.test.espresso.remote.EspressoRemote: int MSG_FORWARD_TO_REMOTE_ESPRESSO>
<androidx.test.espresso.remote.EspressoRemote: int MSG_HANDLE_ESPRESSO_REQUEST>
<androidx.test.espresso.remote.EspressoRemote: int MSG_HANDLE_ESPRESSO_RESPONSE>
<androidx.test.espresso.remote.EspressoRemote: int MSG_HANDLE_EMPTY_REQUEST>
<androidx.test.espresso.remote.EspressoRemote: boolean isRemoteProcess>
<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>
    private synchronized androidx.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int, byte[], java.util.Map) throws java.lang.InterruptedException
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        java.util.UUID r1;
        android.os.Bundle r2;
        java.lang.Integer $r3, $r13;
        java.lang.String $r4, $r14, r24, r26;
        java.lang.Object[] $r5, r19, r27;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r6, $r7, $r8, $r9, $r11;
        java.lang.Throwable $r10, $r12, r23, r28;
        java.lang.Thread $r15;
        int i1;
        byte[] r16;
        java.util.Map r17;
        java.util.Locale r18, r25;
        java.util.concurrent.CountDownLatch r20, r29;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r21, r30;
        android.os.Message r22;
        java.io.Serializable r31;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        i1 := @parameter0: int;

        r16 := @parameter1: byte[];

        r17 := @parameter2: java.util.Map;

        r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r18 = <java.util.Locale: java.util.Locale ROOT>;

        r19 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r19[0] = $r3;

        r19[1] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r18, "Sending sync msg [%s] with uuid [%s]", r19);

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", $r4, $r5);

        r29 = new java.util.concurrent.CountDownLatch;

        r20 = r29;

        specialinvoke r29.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r30 = new androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        r21 = r30;

        specialinvoke r30.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: void <init>(java.util.concurrent.CountDownLatch)>(r20);

        $r6 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        r22 = staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message '-$$Nest$mgetEspressoMessage'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,int)>($r6, 2);

        r22.<android.os.Message: int arg1> = i1;

        r2 = virtualinvoke r22.<android.os.Message: android.os.Bundle getData()>();

        r31 = (java.io.Serializable) r1;

        virtualinvoke r2.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("uuid", r31);

        if r16 == null goto label1;

        virtualinvoke r2.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("proto", r16);

     label1:
        staticinvoke <androidx.test.espresso.remote.EspressoRemote: void setIBindersToBundle(java.util.Map,android.os.Bundle)>(r17, r2);

        virtualinvoke r22.<android.os.Message: void setData(android.os.Bundle)>(r2);

        $r7 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void '-$$Nest$massociateResponse'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID,androidx.test.espresso.remote.EspressoRemote$ResponseHolder)>($r7, r1, r21);

        $r8 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        virtualinvoke $r8.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: boolean sendMessage(android.os.Message)>(r22);

     label2:
        virtualinvoke r20.<java.util.concurrent.CountDownLatch: void await()>();

     label3:
        $r9 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void '-$$Nest$mdisassociateResponse'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>($r9, r1);

        return r21;

     label4:
        $r12 := @caughtexception;

        r23 = $r12;

     label5:
        r24 = "EspressoRemote";

        r25 = <java.util.Locale: java.util.Locale ROOT>;

        r26 = "Interrupted while waiting for a response from msg [%s] with uuid [%s]";

        r27 = newarray (java.lang.Object)[2];

        goto label8;

     label6:
        $r10 := @caughtexception;

        r28 = $r10;

        $r11 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void '-$$Nest$mdisassociateResponse'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>($r11, r1);

        throw r28;

     label7:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r27[0] = $r13;

        r27[1] = r1;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r25, r26, r27);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>(r24, $r14, r23);

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: void sendEmptyRequest()>();

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r15.<java.lang.Thread: void interrupt()>();

        throw r23;

     label8:
        goto label7;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static androidx.test.espresso.remote.EspressoRemote getInstance()
    {
        androidx.test.espresso.remote.EspressoRemote $r0;

        $r0 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>;

        return $r0;
    }

    public synchronized java.util.concurrent.Callable createRemoteCheckCallable(org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map, androidx.test.espresso.ViewAssertion)
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        org.hamcrest.Matcher r1, r2;
        java.util.Map r3;
        androidx.test.espresso.ViewAssertion r4;
        androidx.test.espresso.remote.EspressoRemote$1 r5;
        java.util.concurrent.Callable $r6;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: androidx.test.espresso.ViewAssertion;

        r5 = new androidx.test.espresso.remote.EspressoRemote$1;

        specialinvoke r5.<androidx.test.espresso.remote.EspressoRemote$1: void <init>(androidx.test.espresso.remote.EspressoRemote,androidx.test.espresso.ViewAssertion,org.hamcrest.Matcher,org.hamcrest.Matcher,java.util.Map)>(r0, r4, r1, r2, r3);

        $r6 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)>(r5);

        return $r6;
    }

    private java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        java.lang.Runnable r1;
        androidx.test.espresso.remote.EspressoRemote$3 r2;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: java.lang.Runnable;

        r2 = new androidx.test.espresso.remote.EspressoRemote$3;

        specialinvoke r2.<androidx.test.espresso.remote.EspressoRemote$3: void <init>(androidx.test.espresso.remote.EspressoRemote,java.lang.Runnable)>(r0, r1);

        return r2;
    }

    public synchronized transient java.util.concurrent.Callable createRemotePerformCallable(org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map, androidx.test.espresso.ViewAction[])
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        org.hamcrest.Matcher r1, r2;
        java.util.Map r3;
        androidx.test.espresso.ViewAction[] r4;
        androidx.test.espresso.remote.EspressoRemote$2 r5;
        java.util.concurrent.Callable $r6;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: androidx.test.espresso.ViewAction[];

        r5 = new androidx.test.espresso.remote.EspressoRemote$2;

        specialinvoke r5.<androidx.test.espresso.remote.EspressoRemote$2: void <init>(androidx.test.espresso.remote.EspressoRemote,androidx.test.espresso.ViewAction[],org.hamcrest.Matcher,org.hamcrest.Matcher,java.util.Map)>(r0, r4, r1, r2, r3);

        $r6 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)>(r5);

        return $r6;
    }

    static volatile void '-$$Nest$sfputisRemoteProcess'(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.test.espresso.remote.EspressoRemote: boolean isRemoteProcess> = z0;

        return;
    }

    static void <clinit>()
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 = new androidx.test.espresso.remote.EspressoRemote;

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: void <init>()>();

        <androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE> = r0;

        $r1 = class "Landroidx/test/espresso/remote/EspressoRemote;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE> = $r2;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        androidx.test.internal.runner.InstrumentationConnection $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        $r1 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection getInstance()>();

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: void <init>(androidx.test.internal.runner.InstrumentationConnection)>($r1);

        return;
    }

    void <init>(androidx.test.internal.runner.InstrumentationConnection)
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        androidx.test.internal.runner.InstrumentationConnection r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: androidx.test.internal.runner.InstrumentationConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection> = r1;

        return;
    }

    public synchronized void init()
    {
        androidx.test.espresso.remote.EspressoRemote r0, $r6;
        java.lang.Object[] $r1;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r2, $r8, r15;
        java.lang.StringBuilder $r3, $r4, r13;
        java.lang.String $r5, $r10, r12;
        android.os.Looper $r7;
        android.os.Messenger $r9;
        androidx.test.internal.runner.InstrumentationConnection $r11;
        android.os.HandlerThread r14;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "init called", $r1);

        $r2 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        if $r2 != null goto label1;

        r12 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing Espresso Remote of type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r5);

        $r6 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>;

        staticinvoke <androidx.test.espresso.remote.RemoteInteractionRegistry: void registerInstance(androidx.test.espresso.remote.RemoteInteraction)>($r6);

        staticinvoke <androidx.test.espresso.remote.EspressoRemote: void initRemoteRegistry()>();

        r14 = new android.os.HandlerThread;

        specialinvoke r14.<android.os.HandlerThread: void <init>(java.lang.String)>("EspressoRemoteThread");

        virtualinvoke r14.<android.os.HandlerThread: void start()>();

        r15 = new androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r7 = virtualinvoke r14.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r15.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void <init>(androidx.test.espresso.remote.EspressoRemote,android.os.Looper)>(r0, $r7);

        r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler> = r15;

        $r11 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r10 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r8 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        $r9 = $r8.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        virtualinvoke $r11.<androidx.test.internal.runner.InstrumentationConnection: void registerClient(java.lang.String,android.os.Messenger)>($r10, $r9);

        return;

     label1:
        return;
    }

    private static void initRemoteRegistry()
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;

        r0 = staticinvoke <androidx.test.espresso.remote.RemoteDescriptorRegistry: androidx.test.espresso.remote.RemoteDescriptorRegistry getInstance()>();

        staticinvoke <androidx.test.espresso.matcher.RemoteRootMatchers: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.matcher.RemoteViewMatchers: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.action.RemoteViewActions: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.assertion.RemoteViewAssertions: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.matcher.RemoteHamcrestCoreMatchers13: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.DataInteractionRemote: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.action.RemoteWebActions: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.model.RemoteWebModelAtoms: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.sugar.RemoteWebSugar: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.webdriver.RemoteWebDriverAtoms: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.assertion.RemoteWebViewAssertions: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <androidx.test.espresso.web.matcher.RemoteWebMatchers: void init(androidx.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        return;
    }

    void initiateRemoteCall(byte[], java.util.Map)
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        byte[] r1;
        java.util.Map r2;
        java.lang.Object[] $r3;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder $r4;
        java.lang.Throwable $r5;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.Map;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "initiateRemoteCall", $r3);

     label1:
        $r4 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int,byte[],java.util.Map)>(3, r1, r2);

        staticinvoke <androidx.test.espresso.remote.EspressoRemote: void reportResults(androidx.test.espresso.remote.EspressoRemote$ResponseHolder)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void remoteInit()
    {
        java.lang.Object[] $r0;
        androidx.test.espresso.remote.EspressoRemote $r1;

        $r0 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "remoteInit called", $r0);

        $r1 = staticinvoke <androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote getInstance()>();

        virtualinvoke $r1.<androidx.test.espresso.remote.EspressoRemote: void init()>();

        return;
    }

    private static void reportResults(androidx.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        android.os.Bundle $r0;
        androidx.test.espresso.remote.InteractionResponse$Builder $r1, r11;
        androidx.test.espresso.remote.InteractionResponse$RemoteError $r2;
        java.lang.String $r3, $r6, r16;
        java.lang.StringBuilder $r4, $r5, r17;
        java.lang.Throwable $r7, r19;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r8;
        byte[] r9;
        java.lang.IllegalStateException r10, r15;
        androidx.test.espresso.remote.InteractionResponse r12;
        androidx.test.espresso.remote.InteractionResponse$Status r13, r14;
        boolean z0;
        androidx.test.espresso.remote.RemoteEspressoException r18, r20;

        r8 := @parameter0: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r0 = virtualinvoke r8.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle getData()>();

        r9 = virtualinvoke $r0.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("proto");

        if r9 != null goto label1;

        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Espresso remote response doesn\'t contain a valid response");

        throw r10;

     label1:
        r11 = new androidx.test.espresso.remote.InteractionResponse$Builder;

        specialinvoke r11.<androidx.test.espresso.remote.InteractionResponse$Builder: void <init>()>();

        $r1 = virtualinvoke r11.<androidx.test.espresso.remote.InteractionResponse$Builder: androidx.test.espresso.remote.InteractionResponse$Builder setResultProto(byte[])>(r9);

        r12 = virtualinvoke $r1.<androidx.test.espresso.remote.InteractionResponse$Builder: androidx.test.espresso.remote.InteractionResponse build()>();

     label2:
        r13 = <androidx.test.espresso.remote.InteractionResponse$Status: androidx.test.espresso.remote.InteractionResponse$Status Error>;

        r14 = virtualinvoke r12.<androidx.test.espresso.remote.InteractionResponse: androidx.test.espresso.remote.InteractionResponse$Status getStatus()>();

     label3:
        if r13 != r14 goto label9;

     label4:
        z0 = virtualinvoke r12.<androidx.test.espresso.remote.InteractionResponse: boolean hasRemoteError()>();

     label5:
        if z0 != 0 goto label7;

     label6:
        r15 = new java.lang.IllegalStateException;

        r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interaction response reported Status.Error, but noerror message was attached to interaction response: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r15;

     label7:
        r18 = new androidx.test.espresso.remote.RemoteEspressoException;

        $r2 = virtualinvoke r12.<androidx.test.espresso.remote.InteractionResponse: androidx.test.espresso.remote.InteractionResponse$RemoteError getRemoteError()>();

        $r3 = virtualinvoke $r2.<androidx.test.espresso.remote.InteractionResponse$RemoteError: java.lang.String getDescription()>();

        specialinvoke r18.<androidx.test.espresso.remote.RemoteEspressoException: void <init>(java.lang.String)>($r3);

        throw r18;

     label8:
        $r7 := @caughtexception;

        r19 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "Could not parse Interaction response", r19);

        r20 = new androidx.test.espresso.remote.RemoteEspressoException;

        specialinvoke r20.<androidx.test.espresso.remote.RemoteEspressoException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse Interaction response", r19);

        throw r20;

     label9:
        return;

        catch androidx.test.espresso.remote.RemoteProtocolException from label1 to label2 with label8;
        catch androidx.test.espresso.remote.RemoteProtocolException from label2 to label3 with label8;
        catch androidx.test.espresso.remote.RemoteProtocolException from label4 to label5 with label8;
        catch androidx.test.espresso.remote.RemoteProtocolException from label6 to label8 with label8;
    }

    private void sendEmptyRequest()
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        java.lang.Object[] $r1;
        java.lang.Throwable $r3;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "sendEmptyRequest", $r1);

     label1:
        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int,byte[],java.util.Map)>(5, null, null);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void setIBindersToBundle(java.util.Map, android.os.Bundle)
    {
        android.os.Bundle r0;
        java.util.Map$Entry r1;
        androidx.test.internal.util.ParcelableIBinder r2;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.lang.Object $r4, $r5, r9;
        android.os.IBinder $r6;
        java.util.Map r7;
        java.util.Iterator r8;
        java.lang.String r10;

        r7 := @parameter0: java.util.Map;

        r0 := @parameter1: android.os.Bundle;

        if r7 == null goto label2;

        $z0 = interfaceinvoke r7.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke r7.<java.util.Map: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r4;

        r9 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) r9;

        r2 = new androidx.test.internal.util.ParcelableIBinder;

        $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (android.os.IBinder) $r5;

        specialinvoke r2.<androidx.test.internal.util.ParcelableIBinder: void <init>(android.os.IBinder)>($r6);

        virtualinvoke r0.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>(r10, r2);

        goto label1;

     label2:
        return;
    }

    public synchronized void terminate()
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        java.lang.Object[] $r1;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r2, $r3;
        android.os.Message $r4;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "terminate called", $r1);

        $r2 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        $r4 = staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message '-$$Nest$mgetEspressoMessage'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,int)>($r3, 1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler> = null;

        return;

     label1:
        return;
    }

    static volatile boolean '-$$Nest$mhasRemoteEspressoInstances'(androidx.test.espresso.remote.EspressoRemote)
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        boolean $z0;

        r0 := @parameter0: androidx.test.espresso.remote.EspressoRemote;

        $z0 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote: boolean hasRemoteEspressoInstances()>();

        return $z0;
    }

    private synchronized boolean hasRemoteEspressoInstances()
    {
        java.lang.String $r0;
        androidx.test.internal.runner.InstrumentationConnection $r1;
        java.util.Set $r2;
        int $i0;
        androidx.test.espresso.remote.EspressoRemote r3;
        boolean z0;

        r3 := @this: androidx.test.espresso.remote.EspressoRemote;

        $r1 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r0 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r2 = virtualinvoke $r1.<androidx.test.internal.runner.InstrumentationConnection: java.util.Set getClientsForType(java.lang.String)>($r0);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i0 <= 1 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public synchronized boolean isRemoteProcess()
    {
        androidx.test.espresso.remote.EspressoRemote r0;
        boolean $z0;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote;

        $z0 = <androidx.test.espresso.remote.EspressoRemote: boolean isRemoteProcess>;

        return $z0;
    }

androidx.test.espresso.remote.EspressoRemote$1
<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.ViewAssertion val$viewAssertion>
<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher>
<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher>
<androidx.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders>
<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.remote.EspressoRemote this$0>
    void <init>(androidx.test.espresso.remote.EspressoRemote, androidx.test.espresso.ViewAssertion, org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map)
    {
        androidx.test.espresso.remote.EspressoRemote$1 r0;
        androidx.test.espresso.remote.EspressoRemote r1;
        androidx.test.espresso.ViewAssertion r2;
        org.hamcrest.Matcher r3, r4;
        java.util.Map r5;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$1;

        r1 := @parameter0: androidx.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: androidx.test.espresso.ViewAssertion;

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: org.hamcrest.Matcher;

        r5 := @parameter4: java.util.Map;

        r0.<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.ViewAssertion val$viewAssertion> = r2;

        r0.<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher> = r3;

        r0.<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher> = r4;

        r0.<androidx.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.remote.EspressoRemote$1 r0;
        androidx.test.espresso.ViewAssertion $r1, r14;
        java.lang.String $r2;
        androidx.test.espresso.remote.EspressoRemote $r3;
        androidx.test.espresso.remote.internal.deps.protobuf.MessageLite $r4;
        byte[] $r5;
        java.util.Map $r6;
        java.util.Locale r7;
        java.lang.Object[] r8;
        androidx.test.espresso.remote.InteractionRequest$Builder r9, r11, r13, r15;
        org.hamcrest.Matcher r10, r12;
        androidx.test.espresso.remote.InteractionRequest r16;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$1;

        r7 = <java.util.Locale: java.util.Locale ROOT>;

        r8 = newarray (java.lang.Object)[1];

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.ViewAssertion val$viewAssertion>;

        r8[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r7, "Attempting to run check interaction on a remote process for ViewAssertion: %s", r8);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r2);

        r9 = new androidx.test.espresso.remote.InteractionRequest$Builder;

        specialinvoke r9.<androidx.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        r10 = r0.<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher>;

        r11 = virtualinvoke r9.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setRootMatcher(org.hamcrest.Matcher)>(r10);

        r12 = r0.<androidx.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher>;

        r13 = virtualinvoke r11.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setViewMatcher(org.hamcrest.Matcher)>(r12);

        r14 = r0.<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.ViewAssertion val$viewAssertion>;

        r15 = virtualinvoke r13.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setViewAssertion(androidx.test.espresso.ViewAssertion)>(r14);

        r16 = virtualinvoke r15.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest build()>();

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$1: androidx.test.espresso.remote.EspressoRemote this$0>;

        $r4 = virtualinvoke r16.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r5 = interfaceinvoke $r4.<androidx.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        $r6 = r0.<androidx.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders>;

        virtualinvoke $r3.<androidx.test.espresso.remote.EspressoRemote: void initiateRemoteCall(byte[],java.util.Map)>($r5, $r6);

        return;
    }

androidx.test.espresso.remote.EspressoRemote$2
<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.ViewAction[] val$viewActions>
<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher>
<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher>
<androidx.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders>
<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.remote.EspressoRemote this$0>
    void <init>(androidx.test.espresso.remote.EspressoRemote, androidx.test.espresso.ViewAction[], org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map)
    {
        androidx.test.espresso.remote.EspressoRemote$2 r0;
        androidx.test.espresso.remote.EspressoRemote r1;
        androidx.test.espresso.ViewAction[] r2;
        org.hamcrest.Matcher r3, r4;
        java.util.Map r5;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$2;

        r1 := @parameter0: androidx.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: androidx.test.espresso.ViewAction[];

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: org.hamcrest.Matcher;

        r5 := @parameter4: java.util.Map;

        r0.<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.ViewAction[] val$viewActions> = r2;

        r0.<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher> = r3;

        r0.<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher> = r4;

        r0.<androidx.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.remote.EspressoRemote$2 r0;
        androidx.test.espresso.ViewAction[] r1;
        int i0, i2;
        java.lang.String $r2;
        androidx.test.espresso.remote.EspressoRemote $r3;
        androidx.test.espresso.remote.internal.deps.protobuf.MessageLite $r4;
        byte[] $r5;
        java.util.Map $r6;
        androidx.test.espresso.ViewAction r7;
        java.util.Locale r8;
        java.lang.Object[] r9;
        androidx.test.espresso.remote.InteractionRequest$Builder r10, r12, r14, r15;
        org.hamcrest.Matcher r11, r13;
        androidx.test.espresso.remote.InteractionRequest r16;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$2;

        r1 = r0.<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.ViewAction[] val$viewActions>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r7 = r1[i2];

        r8 = <java.util.Locale: java.util.Locale ROOT>;

        r9 = newarray (java.lang.Object)[1];

        r9[0] = r7;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r8, "Attempting to run perform interaction on a remote processes for ViewAction: %s", r9);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r2);

        r10 = new androidx.test.espresso.remote.InteractionRequest$Builder;

        specialinvoke r10.<androidx.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        r11 = r0.<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher>;

        r12 = virtualinvoke r10.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setRootMatcher(org.hamcrest.Matcher)>(r11);

        r13 = r0.<androidx.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher>;

        r14 = virtualinvoke r12.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setViewMatcher(org.hamcrest.Matcher)>(r13);

        r15 = virtualinvoke r14.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setViewAction(androidx.test.espresso.ViewAction)>(r7);

        r16 = virtualinvoke r15.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest build()>();

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$2: androidx.test.espresso.remote.EspressoRemote this$0>;

        $r4 = virtualinvoke r16.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r5 = interfaceinvoke $r4.<androidx.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        $r6 = r0.<androidx.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders>;

        virtualinvoke $r3.<androidx.test.espresso.remote.EspressoRemote: void initiateRemoteCall(byte[],java.util.Map)>($r5, $r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

androidx.test.espresso.remote.EspressoRemote$3
<androidx.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable>
<androidx.test.espresso.remote.EspressoRemote$3: androidx.test.espresso.remote.EspressoRemote this$0>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.remote.EspressoRemote$3 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$3;

        $r1 = virtualinvoke r0.<androidx.test.espresso.remote.EspressoRemote$3: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call() throws java.lang.InterruptedException
    {
        long[] r0;
        long l0, $l1, $l2;
        java.lang.StringBuilder r1, $r4, $r5, $r6;
        java.util.concurrent.TimeUnit $r2, $r3;
        java.lang.String $r7;
        androidx.test.espresso.remote.EspressoRemote $r8;
        boolean $z0;
        java.lang.Runnable $r9;
        androidx.test.espresso.remote.EspressoRemote$3 r10;
        int i4;
        androidx.test.espresso.remote.NoRemoteEspressoInstanceException r11;

        r10 := @this: androidx.test.espresso.remote.EspressoRemote$3;

        r0 = newarray (long)[6];

        r0[0] = 10L;

        r0[1] = 50L;

        r0[2] = 100L;

        r0[3] = 500L;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        r0[4] = $l1;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(30L);

        r0[5] = $l2;

        i4 = 0;

     label1:
        if i4 >= 6 goto label2;

        l0 = r0[i4];

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No remote Espresso instance - waiting: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to start");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r7);

        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

        $r8 = r10.<androidx.test.espresso.remote.EspressoRemote$3: androidx.test.espresso.remote.EspressoRemote this$0>;

        $z0 = staticinvoke <androidx.test.espresso.remote.EspressoRemote: boolean '-$$Nest$mhasRemoteEspressoInstances'(androidx.test.espresso.remote.EspressoRemote)>($r8);

        if $z0 == 0 goto label3;

        $r9 = r10.<androidx.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable>;

        interfaceinvoke $r9.<java.lang.Runnable: void run()>();

        return null;

     label2:
        r11 = new androidx.test.espresso.remote.NoRemoteEspressoInstanceException;

        specialinvoke r11.<androidx.test.espresso.remote.NoRemoteEspressoInstanceException: void <init>(java.lang.String)>("No remote Espresso instances at this time.");

        throw r11;

     label3:
        i4 = i4 + 1;

        goto label1;
    }

    void <init>(androidx.test.espresso.remote.EspressoRemote, java.lang.Runnable)
    {
        androidx.test.espresso.remote.EspressoRemote$3 r0;
        androidx.test.espresso.remote.EspressoRemote r1;
        java.lang.Runnable r2;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$3;

        r1 := @parameter0: androidx.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: java.lang.Runnable;

        r0.<androidx.test.espresso.remote.EspressoRemote$3: androidx.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId>
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$ResponseHolder val$response>
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        $r1 = virtualinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r1;
        java.util.Map $r2;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder $r3;
        java.util.UUID $r4;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1>;

        $r2 = staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map '-$$Nest$fgetresponses'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler)>($r1);

        $r4 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId>;

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$ResponseHolder val$response>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        return null;
    }

    void <init>(androidx.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID, androidx.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r1;
        java.util.UUID r2;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r3;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        r1 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r3 := @parameter2: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId> = r2;

        r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: androidx.test.espresso.remote.EspressoRemote$ResponseHolder val$response> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId>
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1>
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        $r1 = virtualinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r1;
        java.util.Map $r2;
        java.util.UUID $r3;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1>;

        $r2 = staticinvoke <androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map '-$$Nest$fgetresponses'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler)>($r1);

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return null;
    }

    void <init>(androidx.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r1;
        java.util.UUID r2;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        r1 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: androidx.test.espresso.remote.EspressoRemote$IncomingHandler this$1> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.remote.EspressoRemote$IncomingHandler
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>
<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: androidx.test.espresso.remote.EspressoRemote this$0>
    static volatile android.os.Message '-$$Nest$mgetEspressoMessage'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler, int)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(i0);

        return $r1;
    }

    private android.os.Message getEspressoMessage(int)
    {
        androidx.test.espresso.remote.EspressoRemote $r0;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler $r1, r4;
        android.os.Messenger $r2;
        java.lang.String $r3;
        int i0;
        android.os.Message r5;
        android.os.Bundle r6;

        r4 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        i0 := @parameter0: int;

        $r0 = r4.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: androidx.test.espresso.remote.EspressoRemote this$0>;

        $r1 = $r0.<androidx.test.espresso.remote.EspressoRemote: androidx.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        r5 = virtualinvoke $r1.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message obtainMessage(int)>(i0);

        $r2 = r4.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        r5.<android.os.Message: android.os.Messenger replyTo> = $r2;

        r6 = new android.os.Bundle;

        specialinvoke r6.<android.os.Bundle: void <init>()>();

        $r3 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("type", $r3);

        virtualinvoke r5.<android.os.Message: void setData(android.os.Bundle)>(r6);

        return r5;
    }

    private androidx.test.espresso.remote.InteractionResponse executeRequest(android.os.Bundle)
    {
        androidx.test.espresso.remote.InteractionRequest$Builder $r0, r15, r31;
        android.os.Parcelable $r1;
        androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy $r2;
        java.lang.Throwable $r3, $r5, $r7, $r8, $r9, r26, r27, r28, r30, r38;
        java.lang.String $r4, $r6, $r10;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r11;
        android.os.Bundle r12;
        byte[] r13;
        androidx.test.espresso.remote.InteractionResponse$Status r14, r20;
        androidx.test.espresso.remote.InteractionRequest r16;
        androidx.test.internal.util.ParcelableIBinder r17;
        android.os.IBinder r18;
        androidx.test.espresso.remote.IInteractionExecutionStatus r19;
        boolean z0;
        androidx.test.espresso.remote.InteractionResponse$RemoteError r21, r33, r34, r35;
        androidx.test.espresso.remote.InteractionResponse$Builder r22, $r23, $r24, r32;
        androidx.test.espresso.remote.InteractionResponse $r25;
        java.lang.RuntimeException r29, r36;
        android.os.RemoteException r37;

        r11 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r12 := @parameter0: android.os.Bundle;

        r13 = virtualinvoke r12.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("proto");

        r14 = <androidx.test.espresso.remote.InteractionResponse$Status: androidx.test.espresso.remote.InteractionResponse$Status Error>;

     label01:
        r31 = new androidx.test.espresso.remote.InteractionRequest$Builder;

        r15 = r31;

        specialinvoke r31.<androidx.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        $r0 = virtualinvoke r15.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest$Builder setRequestProto(byte[])>(r13);

        r16 = virtualinvoke $r0.<androidx.test.espresso.remote.InteractionRequest$Builder: androidx.test.espresso.remote.InteractionRequest build()>();

        $r1 = virtualinvoke r12.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("executionStatus");

        r17 = (androidx.test.internal.util.ParcelableIBinder) $r1;

     label02:
        if r17 == null goto label11;

     label03:
        r18 = virtualinvoke r17.<androidx.test.internal.util.ParcelableIBinder: android.os.IBinder getIBinder()>();

     label04:
        r19 = staticinvoke <androidx.test.espresso.remote.IInteractionExecutionStatus$Stub: androidx.test.espresso.remote.IInteractionExecutionStatus asInterface(android.os.IBinder)>(r18);

     label05:
        z0 = interfaceinvoke r19.<androidx.test.espresso.remote.IInteractionExecutionStatus: boolean canExecute()>();

     label06:
        if z0 == 0 goto label10;

     label07:
        $r2 = staticinvoke <androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy 'from'(androidx.test.espresso.remote.InteractionRequest,android.os.Bundle)>(r16, r12);

        r20 = virtualinvoke $r2.<androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: androidx.test.espresso.remote.InteractionResponse$Status execute()>();

     label08:
        r21 = null;

     label09:
        r32 = new androidx.test.espresso.remote.InteractionResponse$Builder;

        r22 = r32;

        specialinvoke r32.<androidx.test.espresso.remote.InteractionResponse$Builder: void <init>()>();

        $r23 = virtualinvoke r22.<androidx.test.espresso.remote.InteractionResponse$Builder: androidx.test.espresso.remote.InteractionResponse$Builder setStatus(androidx.test.espresso.remote.InteractionResponse$Status)>(r20);

        $r24 = virtualinvoke $r23.<androidx.test.espresso.remote.InteractionResponse$Builder: androidx.test.espresso.remote.InteractionResponse$Builder setRemoteError(androidx.test.espresso.remote.InteractionResponse$RemoteError)>(r21);

        $r25 = virtualinvoke $r24.<androidx.test.espresso.remote.InteractionResponse$Builder: androidx.test.espresso.remote.InteractionResponse build()>();

        return $r25;

     label10:
        r20 = r14;

        goto label08;

     label11:
        z0 = 0;

        goto label06;

     label12:
        $r3 := @caughtexception;

        r26 = $r3;

        r33 = new androidx.test.espresso.remote.InteractionResponse$RemoteError;

        r21 = r33;

        $r4 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r26);

        specialinvoke r33.<androidx.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(1, $r4);

        r20 = r14;

        goto label09;

     label13:
        $r9 := @caughtexception;

        r27 = $r9;

        r34 = new androidx.test.espresso.remote.InteractionResponse$RemoteError;

        r21 = r34;

        $r10 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r27);

        specialinvoke r34.<androidx.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(0, $r10);

        r20 = r14;

        goto label09;

     label14:
        $r5 := @caughtexception;

        r28 = $r5;

        r35 = new androidx.test.espresso.remote.InteractionResponse$RemoteError;

        r21 = r35;

        $r6 = staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r28);

        specialinvoke r35.<androidx.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(0, $r6);

        r20 = r14;

        goto label09;

     label15:
        r36 = new java.lang.RuntimeException;

        r29 = r36;

        r37 = (android.os.RemoteException) r30;

        $r8 = virtualinvoke r37.<android.os.RemoteException: java.lang.Throwable getCause()>();

        specialinvoke r36.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to query interaction execution status", $r8);

        r38 = (java.lang.Throwable) r29;

        throw r38;

     label16:
        $r7 := @caughtexception;

        r30 = $r7;

        goto label15;

        catch androidx.test.espresso.remote.RemoteProtocolException from label01 to label02 with label12;
        catch java.lang.RuntimeException from label01 to label02 with label13;
        catch java.lang.Error from label01 to label02 with label14;
        catch androidx.test.espresso.remote.RemoteProtocolException from label03 to label04 with label12;
        catch java.lang.RuntimeException from label03 to label04 with label13;
        catch java.lang.Error from label03 to label04 with label14;
        catch androidx.test.espresso.remote.RemoteProtocolException from label04 to label05 with label12;
        catch java.lang.RuntimeException from label04 to label05 with label13;
        catch java.lang.Error from label04 to label05 with label14;
        catch android.os.RemoteException from label05 to label06 with label16;
        catch androidx.test.espresso.remote.RemoteProtocolException from label05 to label06 with label12;
        catch java.lang.RuntimeException from label05 to label06 with label13;
        catch java.lang.Error from label05 to label06 with label14;
        catch androidx.test.espresso.remote.RemoteProtocolException from label07 to label08 with label12;
        catch java.lang.RuntimeException from label07 to label08 with label13;
        catch java.lang.Error from label07 to label08 with label14;
        catch androidx.test.espresso.remote.RemoteProtocolException from label15 to label16 with label12;
        catch java.lang.RuntimeException from label15 to label16 with label13;
        catch java.lang.Error from label15 to label16 with label14;
    }

    static volatile java.util.Map '-$$Nest$fgetresponses'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.Map $r1;

        r0 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>;

        return $r1;
    }

    static volatile void '-$$Nest$massociateResponse'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID, androidx.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r2;

        r0 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void associateResponse(java.util.UUID,androidx.test.espresso.remote.EspressoRemote$ResponseHolder)>(r1, r2);

        return;
    }

    static volatile void '-$$Nest$mdisassociateResponse'(androidx.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;

        r0 := @parameter0: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void disassociateResponse(java.util.UUID)>(r1);

        return;
    }

    public void <init>(androidx.test.espresso.remote.EspressoRemote, android.os.Looper)
    {
        android.os.Looper r0, $r1, $r2;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r3;
        androidx.test.espresso.remote.EspressoRemote r4;
        java.util.HashMap r5, r8;
        android.os.Messenger r6, r9;
        java.lang.IllegalStateException r7, r10;
        java.util.Map r11;

        r3 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r4 := @parameter0: androidx.test.espresso.remote.EspressoRemote;

        r0 := @parameter1: android.os.Looper;

        r3.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: androidx.test.espresso.remote.EspressoRemote this$0> = r4;

        specialinvoke r3.<android.os.Handler: void <init>(android.os.Looper)>(r0);

        r8 = new java.util.HashMap;

        r5 = r8;

        specialinvoke r8.<java.util.HashMap: void <init>()>();

        r11 = (java.util.Map) r5;

        r3.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses> = r11;

        r9 = new android.os.Messenger;

        r6 = r9;

        specialinvoke r9.<android.os.Messenger: void <init>(android.os.Handler)>(r3);

        r3.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler> = r6;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 == r0 goto label1;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r2 != r0 goto label2;

     label1:
        r10 = new java.lang.IllegalStateException;

        r7 = r10;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This handler should not be using the main thread looper nor the instrumentation thread looper.");

        throw r7;

     label2:
        return;
    }

    private void associateResponse(java.util.UUID, androidx.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        java.util.concurrent.FutureTask r1, r14;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1 r2, r13;
        java.lang.Throwable $r4, $r5, $r6, r9, r11;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r7;
        java.util.UUID r8;
        java.lang.IllegalStateException r10, r12, r15, r16;
        java.lang.Runnable r17;
        java.util.concurrent.ExecutionException r18;

        r7 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r8 := @parameter0: java.util.UUID;

        r0 := @parameter1: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        r14 = new java.util.concurrent.FutureTask;

        r1 = r14;

        r13 = new androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        r2 = r13;

        specialinvoke r13.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$1: void <init>(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID,androidx.test.espresso.remote.EspressoRemote$ResponseHolder)>(r7, r8, r0);

        specialinvoke r14.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r2);

        r17 = (java.lang.Runnable) r1;

        virtualinvoke r7.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: boolean post(java.lang.Runnable)>(r17);

        goto label3;

     label1:
        $r4 := @caughtexception;

        r9 = $r4;

        r15 = new java.lang.IllegalStateException;

        r10 = r15;

        r18 = (java.util.concurrent.ExecutionException) r9;

        $r5 = virtualinvoke r18.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw r10;

     label2:
        $r6 := @caughtexception;

        r11 = $r6;

        r16 = new java.lang.IllegalStateException;

        r12 = r16;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r11);

        throw r12;

     label3:
        virtualinvoke r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        return;

     label4:
        nop;

        catch java.lang.InterruptedException from label3 to label4 with label2;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label1;
    }

    private void disassociateResponse(java.util.UUID)
    {
        java.util.concurrent.FutureTask r0, r13;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2 r1, r12;
        java.lang.Throwable $r3, $r4, $r5, r8, r10;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r6;
        java.util.UUID r7;
        java.lang.IllegalStateException r9, r11, r14, r15;
        java.lang.Runnable r16;
        java.util.concurrent.ExecutionException r17;

        r6 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r7 := @parameter0: java.util.UUID;

        r13 = new java.util.concurrent.FutureTask;

        r0 = r13;

        r12 = new androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        r1 = r12;

        specialinvoke r12.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler$2: void <init>(androidx.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>(r6, r7);

        specialinvoke r13.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        r16 = (java.lang.Runnable) r0;

        virtualinvoke r6.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: boolean post(java.lang.Runnable)>(r16);

        goto label3;

     label1:
        $r3 := @caughtexception;

        r8 = $r3;

        r14 = new java.lang.IllegalStateException;

        r9 = r14;

        r17 = (java.util.concurrent.ExecutionException) r8;

        $r4 = virtualinvoke r17.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw r9;

     label2:
        $r5 := @caughtexception;

        r10 = $r5;

        r15 = new java.lang.IllegalStateException;

        r11 = r15;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r10);

        throw r11;

     label3:
        virtualinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        return;

     label4:
        nop;

        catch java.lang.InterruptedException from label3 to label4 with label2;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label1;
    }

    private void doDie()
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Messenger $r1;
        java.lang.String $r2;
        androidx.test.internal.runner.InstrumentationConnection $r3;
        android.os.Looper $r4;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r3 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r2 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        virtualinvoke $r3.<androidx.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r2, $r1);

        $r4 = virtualinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void quit()>();

        return;
    }

    private void handleEspressoRequest(android.os.Messenger, android.os.Bundle)
    {
        android.os.Messenger r0;
        android.os.Bundle r1, r16;
        java.util.UUID r2;
        java.io.Serializable $r3, r18;
        java.lang.String $r4, $r10;
        java.lang.Object[] $r5, r14;
        androidx.test.espresso.remote.InteractionResponse $r6;
        androidx.test.espresso.remote.internal.deps.protobuf.MessageLite $r7;
        byte[] $r8;
        java.lang.Throwable $r9, r17;
        androidx.test.internal.runner.InstrumentationConnection $r11;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r12;
        java.util.Locale r13;
        android.os.Message r15;

        r12 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r0 := @parameter0: android.os.Messenger;

        r1 := @parameter1: android.os.Bundle;

        $r3 = virtualinvoke r1.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("uuid");

        r2 = (java.util.UUID) $r3;

        r13 = <java.util.Locale: java.util.Locale ROOT>;

        r14 = newarray (java.lang.Object)[1];

        r14[0] = r2;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r13, "handleEspressoRequest for id: %s", r14);

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", $r4, $r5);

        r15 = specialinvoke r12.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(4);

        r16 = virtualinvoke r15.<android.os.Message: android.os.Bundle getData()>();

        r18 = (java.io.Serializable) r2;

        virtualinvoke r16.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("uuid", r18);

        staticinvoke <androidx.test.espresso.remote.EspressoRemote: void '-$$Nest$sfputisRemoteProcess'(boolean)>(1);

        $r6 = specialinvoke r12.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: androidx.test.espresso.remote.InteractionResponse executeRequest(android.os.Bundle)>(r1);

        $r7 = virtualinvoke $r6.<androidx.test.espresso.remote.InteractionResponse: androidx.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r8 = interfaceinvoke $r7.<androidx.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        virtualinvoke r16.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("proto", $r8);

        virtualinvoke r15.<android.os.Message: void setData(android.os.Bundle)>(r16);

     label1:
        virtualinvoke r0.<android.os.Messenger: void send(android.os.Message)>(r15);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        r17 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "The remote caller process is terminated unexpectedly", r17);

        $r11 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r10 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke $r11.<androidx.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r10, r0);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handleEspressoResponse(android.os.Bundle)
    {
        java.lang.Object[] r0;
        java.io.Serializable $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.concurrent.CountDownLatch $r4;
        java.lang.StringBuilder $r5, $r6, r14;
        java.lang.String $r7, r13;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r8;
        android.os.Bundle r9;
        java.util.UUID r10;
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r11;
        java.lang.IllegalStateException r12;

        r8 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r9 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke r9.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("uuid");

        r10 = (java.util.UUID) $r1;

        r0 = newarray (java.lang.Object)[1];

        r0[0] = r10;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleEspressoResponse for id: %s", r0);

        $r2 = r8.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (androidx.test.espresso.remote.EspressoRemote$ResponseHolder) $r3;

        if r11 != null goto label1;

        r12 = new java.lang.IllegalStateException;

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received a response from an unknown message: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r12;

     label1:
        virtualinvoke r11.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: void setData(android.os.Bundle)>(r9);

        $r4 = virtualinvoke r11.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch getLatch()>();

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void handleMessage(android.os.Message)
    {
        int i0, $i2, $i3;
        java.lang.StringBuilder r0, $r7, $r8, $r21, $r22, r27;
        android.os.Bundle $r1, $r5, $r12, $r14, $r17, $r19;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.lang.String $r4, $r6, $r9, $r23, r26;
        boolean $z0;
        android.os.Messenger $r10, $r16;
        java.lang.Object[] $r11, $r13, $r15, $r18, $r20;
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r24;
        android.os.Message r25;

        r24 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        r25 := @parameter0: android.os.Message;

        $r1 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        $r2 = virtualinvoke r24.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r1.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r3);

        $r4 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r5 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        $r6 = virtualinvoke $r5.<android.os.Bundle: java.lang.String getString(java.lang.String)>("type");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r10 = r25.<android.os.Message: android.os.Messenger replyTo>;

        if $r10 != null goto label2;

     label1:
        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25);

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch or no valid Messenger present, ignoring message: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EspressoRemote", $r9);

        return;

     label2:
        $i2 = r25.<android.os.Message: int what>;

        tableswitch($i2)
        {
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            case 5: goto label4;
            default: goto label3;
        };

     label3:
        i0 = r25.<android.os.Message: int what>;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message code received: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EspressoRemote", $r23);

        specialinvoke r24.<android.os.Handler: void handleMessage(android.os.Message)>(r25);

        return;

     label4:
        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_EMPTY_REQUEST", $r11);

        $r12 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r24.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void sendMsgToRemoteEspressos(int,android.os.Bundle)>(4, $r12);

        return;

     label5:
        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_ESPRESSO_RESPONSE", $r13);

        $r14 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r24.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void handleEspressoResponse(android.os.Bundle)>($r14);

        return;

     label6:
        $r15 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_ESPRESSO_REQUEST", $r15);

        $r16 = r25.<android.os.Message: android.os.Messenger replyTo>;

        $r17 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r24.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void handleEspressoRequest(android.os.Messenger,android.os.Bundle)>($r16, $r17);

        return;

     label7:
        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_FORWARD_TO_REMOTE_ESPRESSO", $r18);

        $i3 = r25.<android.os.Message: int arg1>;

        $r19 = virtualinvoke r25.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r24.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void sendMsgToRemoteEspressos(int,android.os.Bundle)>($i3, $r19);

        return;

     label8:
        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_TERMINATE", $r20);

        specialinvoke r24.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: void doDie()>();

        return;
    }

    private void sendMsgToRemoteEspressos(int, android.os.Bundle)
    {
        androidx.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Messenger r1, $r8;
        java.lang.Throwable r2, $r9;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r10;
        androidx.test.internal.runner.InstrumentationConnection $r5, $r11;
        java.util.Set $r6;
        java.lang.Object $r7;
        boolean $z0, $z1;
        int i1;
        android.os.Bundle r12;
        android.os.Message r13;
        java.util.Iterator r14;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$IncomingHandler;

        i1 := @parameter0: int;

        r12 := @parameter1: android.os.Bundle;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "sendMsgToRemoteEspressos called", $r3);

        r13 = specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(i1);

        virtualinvoke r13.<android.os.Message: void setData(android.os.Bundle)>(r12);

        $r5 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r4 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r6 = virtualinvoke $r5.<androidx.test.internal.runner.InstrumentationConnection: java.util.Set getClientsForType(java.lang.String)>($r4);

        r14 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.os.Messenger) $r7;

        $r8 = r0.<androidx.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        $z0 = virtualinvoke $r8.<android.os.Messenger: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

     label2:
        virtualinvoke r1.<android.os.Messenger: void send(android.os.Message)>(r13);

        goto label1;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "The remote process is terminated unexpectedly", r2);

        $r11 = <androidx.test.espresso.remote.EspressoRemote: androidx.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r10 = <androidx.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke $r11.<androidx.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r10, r1);

        goto label1;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy
<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>
<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>
<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: androidx.test.espresso.ViewAssertion viewAssertion>
    public androidx.test.espresso.remote.InteractionResponse$Status execute()
    {
        androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy r0;
        java.lang.Object[] r1;
        org.hamcrest.Matcher $r2, $r3, $r5, $r7;
        androidx.test.espresso.ViewAssertion $r4, $r9;
        androidx.test.espresso.ViewInteraction $r6, $r8;
        androidx.test.espresso.remote.InteractionResponse$Status $r11;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>;

        r1[0] = $r2;

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>;

        r1[1] = $r3;

        $r4 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: androidx.test.espresso.ViewAssertion viewAssertion>;

        r1[2] = $r4;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Remotely executing:\nonView(%S).inRoot(%s).check(%s)", r1);

        $r5 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>;

        $r6 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r5);

        $r7 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>;

        $r8 = virtualinvoke $r6.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction inRoot(org.hamcrest.Matcher)>($r7);

        $r9 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: androidx.test.espresso.ViewAssertion viewAssertion>;

        virtualinvoke $r8.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction check(androidx.test.espresso.ViewAssertion)>($r9);

        $r11 = <androidx.test.espresso.remote.InteractionResponse$Status: androidx.test.espresso.remote.InteractionResponse$Status Ok>;

        return $r11;
    }

    public void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher, androidx.test.espresso.ViewAssertion)
    {
        androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy r0;
        org.hamcrest.Matcher r1, r2;
        androidx.test.espresso.ViewAssertion r3;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: androidx.test.espresso.ViewAssertion;

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void <init>()>();

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher> = r2;

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: androidx.test.espresso.ViewAssertion viewAssertion> = r3;

        return;
    }

androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy
<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>
<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>
<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: androidx.test.espresso.ViewAction viewAction>
    public androidx.test.espresso.remote.InteractionResponse$Status execute()
    {
        androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy r0;
        org.hamcrest.Matcher $r1, $r2, r8, r10;
        androidx.test.espresso.ViewAction $r3, $r4;
        androidx.test.espresso.remote.InteractionResponse$Status $r6;
        java.lang.Object[] r7;
        androidx.test.espresso.ViewInteraction r9, r11;
        androidx.test.espresso.ViewAction[] r12;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        r7 = newarray (java.lang.Object)[3];

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>;

        r7[0] = $r1;

        $r2 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>;

        r7[1] = $r2;

        $r3 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: androidx.test.espresso.ViewAction viewAction>;

        r7[2] = $r3;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Remotely executing:\nonView(%s).inRoot(%s).perform(%s)", r7);

        r8 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>;

        r9 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>(r8);

        r10 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>;

        r11 = virtualinvoke r9.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction inRoot(org.hamcrest.Matcher)>(r10);

        r12 = newarray (androidx.test.espresso.ViewAction)[1];

        $r4 = r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: androidx.test.espresso.ViewAction viewAction>;

        r12[0] = $r4;

        virtualinvoke r11.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r12);

        $r6 = <androidx.test.espresso.remote.InteractionResponse$Status: androidx.test.espresso.remote.InteractionResponse$Status Ok>;

        return $r6;
    }

    public void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher, androidx.test.espresso.ViewAction)
    {
        androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy r0;
        org.hamcrest.Matcher r1, r2;
        androidx.test.espresso.ViewAction r3;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: androidx.test.espresso.ViewAction;

        specialinvoke r0.<androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void <init>()>();

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher> = r1;

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher> = r2;

        r0.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: androidx.test.espresso.ViewAction viewAction> = r3;

        return;
    }

androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy
    public static androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy 'from'(androidx.test.espresso.remote.InteractionRequest, android.os.Bundle)
    {
        androidx.test.espresso.remote.InteractionRequest r0;
        org.hamcrest.Matcher $r2, $r3, $r7, $r8, $r9, $r10;
        androidx.test.espresso.ViewAction $r4, $r6, r13;
        androidx.test.espresso.ViewAssertion $r5, r15;
        android.os.Bundle r11;
        java.lang.Object[] r12;
        androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy r14;
        androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy r16;

        r0 := @parameter0: androidx.test.espresso.remote.InteractionRequest;

        r11 := @parameter1: android.os.Bundle;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "interactionRequest cannot be null!");

        r12 = newarray (java.lang.Object)[4];

        $r2 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        r12[0] = $r2;

        $r3 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        r12[1] = $r3;

        $r4 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.ViewAction getViewAction()>();

        r12[2] = $r4;

        $r5 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.ViewAssertion getViewAssertion()>();

        r12[3] = $r5;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Creating RemoteInteractionStrategy from values:\nRootMatcher: %s\nViewMatcher: %s\nViewAction: %s\nView Assertion: %s", r12);

        $r6 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.ViewAction getViewAction()>();

        if $r6 == null goto label1;

        r13 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.ViewAction getViewAction()>();

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(java.lang.Object,android.os.Bundle)>(r13, r11);

        r14 = new androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        $r9 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        $r10 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        specialinvoke r14.<androidx.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher,androidx.test.espresso.ViewAction)>($r9, $r10, r13);

        return r14;

     label1:
        r15 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: androidx.test.espresso.ViewAssertion getViewAssertion()>();

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(java.lang.Object,android.os.Bundle)>(r15, r11);

        r16 = new androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        $r7 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        $r8 = virtualinvoke r0.<androidx.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        specialinvoke r16.<androidx.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher,androidx.test.espresso.ViewAssertion)>($r7, $r8, r15);

        return r16;
    }

<androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: androidx.test.espresso.remote.InteractionResponse$Status execute()>
    void <init>()
    {
        androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy r0;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void setIBinderFromBundle(androidx.test.espresso.remote.Bindable, android.os.Bundle)
    {
        androidx.test.espresso.remote.Bindable r0;
        android.os.Bundle r1;
        java.lang.String $r2;
        android.os.Parcelable $r3;
        androidx.test.internal.util.ParcelableIBinder $r4;
        android.os.IBinder $r5;

        r0 := @parameter0: androidx.test.espresso.remote.Bindable;

        r1 := @parameter1: android.os.Bundle;

        $r2 = interfaceinvoke r0.<androidx.test.espresso.remote.Bindable: java.lang.String getId()>();

        $r3 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>($r2);

        $r4 = (androidx.test.internal.util.ParcelableIBinder) $r3;

        $r5 = virtualinvoke $r4.<androidx.test.internal.util.ParcelableIBinder: android.os.IBinder getIBinder()>();

        interfaceinvoke r0.<androidx.test.espresso.remote.Bindable: void setIBinder(android.os.IBinder)>($r5);

        return;
    }

    private static void setIBinderFromBundle(java.lang.Object, android.os.Bundle)
    {
        java.lang.Object r0;
        android.os.Bundle r1;
        boolean $z0;
        androidx.test.espresso.remote.Bindable $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.os.Bundle;

        $z0 = r0 instanceof androidx.test.espresso.remote.Bindable;

        if $z0 == 0 goto label1;

        $r2 = (androidx.test.espresso.remote.Bindable) r0;

        staticinvoke <androidx.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(androidx.test.espresso.remote.Bindable,android.os.Bundle)>($r2, r1);

        return;

     label1:
        return;
    }

androidx.test.espresso.remote.EspressoRemote$ResponseHolder
<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch>
<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data>
    public android.os.Bundle getData()
    {
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        android.os.Bundle $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data>;

        return $r1;
    }

    public java.util.concurrent.CountDownLatch getLatch()
    {
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r1 = r0.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch>;

        return $r1;
    }

    public void <init>(java.util.concurrent.CountDownLatch)
    {
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data> = null;

        r0.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch> = r1;

        return;
    }

    public void setData(android.os.Bundle)
    {
        androidx.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        android.os.Bundle r1;

        r0 := @this: androidx.test.espresso.remote.EspressoRemote$ResponseHolder;

        r1 := @parameter0: android.os.Bundle;

        r0.<androidx.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data> = r1;

        return;
    }

