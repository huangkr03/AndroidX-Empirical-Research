kotlinx.coroutines.internal.StackTraceRecoveryKt
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String baseContinuationImplClassName>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String stackTraceRecoveryClassName>
    static void <clinit>()
    {
        java.lang.Object $r0, $r1, $r5;
        kotlin.Result$Companion $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.Throwable $r6, $r7;

        $r0 = "kotlinx.coroutines.internal.StackTraceRecoveryKt";

        $r1 = "kotlin.coroutines.jvm.internal.BaseContinuationImpl";

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.coroutines.jvm.internal.BaseContinuationImpl");

     label01:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

     label02:
        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        goto label04;

     label03:
        $r6 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r6);

        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

     label04:
        $r6 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r5);

        if $r6 == null goto label05;

        goto label06;

     label05:
        $r1 = $r5;

     label06:
        $r4 = (java.lang.String) $r1;

        <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String baseContinuationImplClassName> = $r4;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlinx.coroutines.internal.StackTraceRecoveryKt");

     label07:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

     label08:
        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        goto label10;

     label09:
        $r7 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r7);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

     label10:
        $r6 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r1);

        if $r6 == null goto label11;

        goto label12;

     label11:
        $r0 = $r1;

     label12:
        $r4 = (java.lang.String) $r0;

        <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String stackTraceRecoveryClassName> = $r4;

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public static final java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r0;
        java.lang.Throwable $r1;

        $r1 := @parameter0: java.lang.Throwable;

        $r0 := @parameter1: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1, $r0);

        return $r1;
    }

    public static final java.lang.StackTraceElement artificialFrame(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StackTraceElement $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "message");

        $r1 = new java.lang.StackTraceElement;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0008\u0008\u0008(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r0, "\u0008", "\u0008", -1);

        return $r1;
    }

    private static final kotlin.Pair causeAndStacktrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        java.lang.StackTraceElement[] $r4;
        int $i0, $i1;
        java.lang.StackTraceElement $r5;
        kotlin.Pair $r6;
        java.lang.Object[] $r7;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label6;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label6;

        $r4 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r5 = $r4[$i1];

        $z0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean isArtificial(java.lang.StackTraceElement)>($r5);

        if $z0 == 0 goto label2;

        $z0 = 1;

        goto label4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r6;

     label5:
        $r4 = newarray (java.lang.StackTraceElement)[0];

        $r7 = (java.lang.Object[]) $r4;

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r0, $r7);

        return $r6;

     label6:
        $r4 = newarray (java.lang.StackTraceElement)[0];

        $r7 = (java.lang.Object[]) $r4;

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r0, $r7);

        return $r6;
    }

    private static final java.lang.Throwable createFinalException(java.lang.Throwable, java.lang.Throwable, java.util.ArrayDeque)
    {
        java.lang.Throwable $r0, $r2;
        java.lang.StackTraceElement $r1;
        java.util.ArrayDeque $r3;
        java.lang.StackTraceElement[] $r4, $r7;
        java.lang.String $r5;
        int $i0, $i1, $i2;
        java.lang.Object[] $r6;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.util.Collection r10;

        $r2 := @parameter0: java.lang.Throwable;

        $r0 := @parameter1: java.lang.Throwable;

        $r3 := @parameter2: java.util.ArrayDeque;

        $r1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.StackTraceElement artificialFrame(java.lang.String)>("Coroutine boundary");

        virtualinvoke $r3.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r5 = <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String baseContinuationImplClassName>;

        $i0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: int frameIndex(java.lang.StackTraceElement[],java.lang.String)>($r4, $r5);

        $i1 = 0;

        if $i0 != -1 goto label1;

        $r4 = newarray (java.lang.StackTraceElement)[0];

        r10 = (java.util.Collection) $r3;

        $r6 = interfaceinvoke r10.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r4 = (java.lang.StackTraceElement[]) $r6;

        virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r4);

        return $r0;

     label1:
        $i2 = virtualinvoke $r3.<java.util.ArrayDeque: int size()>();

        $i2 = $i2 + $i0;

        $r7 = newarray (java.lang.StackTraceElement)[$i2];

        $i2 = 0;

     label2:
        if $i2 >= $i0 goto label3;

        $r1 = $r4[$i2];

        $r7[$i2] = $r1;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r8 = virtualinvoke $r3.<java.util.ArrayDeque: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $i2 = $i1 + 1;

        $i1 = $i1 + $i0;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.StackTraceElement) $r9;

        $r7[$i1] = $r1;

        $i1 = $i2;

        goto label4;

     label5:
        virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        return $r0;
    }

    private static final java.util.ArrayDeque createStackTrace(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        java.util.ArrayDeque $r0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1, $r3;
        java.lang.StackTraceElement $r2;
        boolean $z0;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r0 = new java.util.ArrayDeque;

        specialinvoke $r0.<java.util.ArrayDeque: void <init>()>();

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        if $r2 == null goto label1;

        virtualinvoke $r0.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

     label1:
        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label2;

        $r1 = null;

     label2:
        if $r1 == null goto label4;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        $r1 = $r3;

        if $r3 != null goto label3;

        return $r0;

     label3:
        $r2 = interfaceinvoke $r3.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        if $r2 == null goto label1;

        virtualinvoke $r0.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

        goto label1;

     label4:
        return $r0;
    }

    private static final boolean elementWiseEquals(java.lang.StackTraceElement, java.lang.StackTraceElement)
    {
        java.lang.StackTraceElement $r0, $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.StackTraceElement;

        $r1 := @parameter1: java.lang.StackTraceElement;

        $i0 = virtualinvoke $r0.<java.lang.StackTraceElement: int getLineNumber()>();

        $i1 = virtualinvoke $r1.<java.lang.StackTraceElement: int getLineNumber()>();

        if $i0 != $i1 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r3 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $r3 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r3 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final int frameIndex(java.lang.StackTraceElement[], java.lang.String)
    {
        java.lang.StackTraceElement[] $r0;
        java.lang.String $r1, $r3;
        int $i0, $i1;
        java.lang.StackTraceElement $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.StackTraceElement[];

        $r1 := @parameter1: java.lang.String;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r0[$i1];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static final boolean isArtificial(java.lang.StackTraceElement)
    {
        java.lang.StackTraceElement $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.StackTraceElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r1, "\u0008\u0008\u0008", 0, 2, null);

        return $z0;
    }

    private static final void mergeRecoveredTraces(java.lang.StackTraceElement[], java.util.ArrayDeque)
    {
        java.lang.StackTraceElement[] $r0;
        java.util.ArrayDeque $r1;
        int $i0, $i1;
        java.lang.StackTraceElement $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        $r0 := @parameter0: java.lang.StackTraceElement[];

        $r1 := @parameter1: java.util.ArrayDeque;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r0[$i1];

        $z0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean isArtificial(java.lang.StackTraceElement)>($r2);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = -1;

     label4:
        $i0 = $i1 + 1;

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

        if $i0 > $i1 goto label7;

     label5:
        $r2 = $r0[$i1];

        $r3 = virtualinvoke $r1.<java.util.ArrayDeque: java.lang.Object getLast()>();

        $r4 = (java.lang.StackTraceElement) $r3;

        $z0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean elementWiseEquals(java.lang.StackTraceElement,java.lang.StackTraceElement)>($r2, $r4);

        if $z0 == 0 goto label6;

        virtualinvoke $r1.<java.util.ArrayDeque: java.lang.Object removeLast()>();

     label6:
        $r2 = $r0[$i1];

        virtualinvoke $r1.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r2);

        if $i1 == $i0 goto label7;

        $i1 = $i1 + -1;

        goto label5;

     label7:
        return;
    }

    private static final java.lang.Throwable recoverFromStackFrame(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        java.lang.Throwable $r0, $r4, $r6;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1;
        kotlin.Pair $r2;
        java.lang.Object $r3;
        java.lang.StackTraceElement[] $r5;
        java.util.ArrayDeque $r7;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r2 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: kotlin.Pair causeAndStacktrace(java.lang.Throwable)>($r0);

        $r3 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object component1()>();

        $r4 = (java.lang.Throwable) $r3;

        $r3 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object component2()>();

        $r5 = (java.lang.StackTraceElement[]) $r3;

        $r6 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable tryCopyAndVerify(java.lang.Throwable)>($r4);

        if $r6 != null goto label1;

        return $r0;

     label1:
        $r7 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.util.ArrayDeque createStackTrace(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1);

        $z0 = virtualinvoke $r7.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return $r0;

     label2:
        if $r4 == $r0 goto label3;

        staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: void mergeRecoveredTraces(java.lang.StackTraceElement[],java.util.ArrayDeque)>($r5, $r7);

     label3:
        $r0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable createFinalException(java.lang.Throwable,java.lang.Throwable,java.util.ArrayDeque)>($r4, $r6, $r7);

        return $r0;
    }

    public static final java.lang.Throwable recoverStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "exception");

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable tryCopyAndVerify(java.lang.Throwable)>($r0);

        if $r1 != null goto label2;

        return $r0;

     label2:
        $r0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r1);

        return $r0;
    }

    private static final java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StackTraceElement[] $r1, $r3;
        java.lang.String $r2;
        java.lang.StackTraceElement $r4;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i1 = lengthof $r1;

        $r2 = <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String stackTraceRecoveryClassName>;

        $i2 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: int frameIndex(java.lang.StackTraceElement[],java.lang.String)>($r1, $r2);

        $i0 = $i2 + 1;

        $r2 = <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String baseContinuationImplClassName>;

        $i3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: int frameIndex(java.lang.StackTraceElement[],java.lang.String)>($r1, $r2);

        $i4 = 0;

        if $i3 != -1 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = $i1 - $i3;

     label2:
        $i1 = $i1 - $i2;

        $i1 = $i1 - $i3;

        $r3 = newarray (java.lang.StackTraceElement)[$i1];

     label3:
        if $i4 >= $i1 goto label6;

        if $i4 != 0 goto label4;

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.StackTraceElement artificialFrame(java.lang.String)>("Coroutine boundary");

        goto label5;

     label4:
        $i2 = $i0 + $i4;

        $i2 = $i2 + -1;

        $r4 = $r1[$i2];

     label5:
        $r3[$i4] = $r4;

        $i4 = $i4 + 1;

        goto label3;

     label6:
        virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r3);

        return $r0;
    }

    private static final java.lang.Throwable tryCopyAndVerify(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        boolean $z0;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: java.lang.Throwable tryCopyException(java.lang.Throwable)>($r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = $r0 instanceof kotlinx.coroutines.CopyableThrowable;

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r0.<java.lang.Throwable: java.lang.String getMessage()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label2;

        return null;

     label2:
        return $r1;
    }

    public static final java.lang.Throwable unwrapImpl(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r4;
        int $i0, $i1;
        java.lang.StackTraceElement $r5;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "exception");

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label5;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r4 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r4;

        $z0 = 0;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = $r4[$i1];

        $z1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean isArtificial(java.lang.StackTraceElement)>($r5);

        if $z1 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        if $z0 == 0 goto label5;

        return $r1;

     label5:
        return $r0;
    }

