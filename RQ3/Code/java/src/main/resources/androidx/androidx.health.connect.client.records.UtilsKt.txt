androidx.health.connect.client.records.UtilsKt
    public static final void requireNotLess(java.lang.Comparable, java.lang.Comparable, java.lang.String)
    {
        java.lang.Comparable $r0, r1;
        java.lang.String r2, $r11, $r12;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r10;
        boolean $z0;

        $r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        r2 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be less than ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currently ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label3:
        return;
    }

    public static final void requireNonNegative(int, java.lang.String)
    {
        int i0;
        java.lang.String r0, $r5, $r6;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "name");

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be negative");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        return;
    }

    public static final void requireNonNegative(long, java.lang.String)
    {
        long l0;
        java.lang.String r0, $r5, $r6;
        byte $b1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "name");

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be negative");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        return;
    }

    public static final void requireNonNegative(double, java.lang.String)
    {
        double d0;
        java.lang.String r0, $r5, $r6;
        byte $b0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "name");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be negative");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        return;
    }

