kotlin.jvm.internal.CollectionToArray
<kotlin.jvm.internal.CollectionToArray: java.lang.Object[] EMPTY>
<kotlin.jvm.internal.CollectionToArray: int MAX_SIZE>
    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] EMPTY> = $r0;

        return;
    }

    public static final java.lang.Object[] toArray(java.util.Collection)
    {
        int $i0, $i1;
        java.util.Collection $r0;
        java.util.Iterator $r1;
        boolean $z0;
        java.lang.Object[] $r2, $r5;
        java.lang.Object $r3;
        java.lang.OutOfMemoryError $r4;

        $r0 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "collection");

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] EMPTY>;

        return $r2;

     label2:
        $r1 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        goto label1;

     label3:
        $r2 = newarray (java.lang.Object)[$i0];

        $i1 = 0;

     label4:
        $i0 = $i1 + 1;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r2[$i1] = $r3;

        $i1 = lengthof $r2;

        if $i0 < $i1 goto label8;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $i1 = $i0 * 3;

        $i1 = $i1 + 1;

        $i1 = $i1 >>> 1;

        if $i1 > $i0 goto label6;

        $i1 = 2147483645;

        if $i0 >= 2147483645 goto label5;

        goto label6;

     label5:
        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r4;

     label6:
        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1);

        $r2 = $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "copyOf(result, newSize)");

        $i1 = $i0;

        goto label4;

     label7:
        return $r2;

     label8:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label9;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copyOf(result, size)");

        return $r2;

     label9:
        $i1 = $i0;

        goto label4;
    }

    public static final java.lang.Object[] toArray(java.util.Collection, java.lang.Object[])
    {
        java.util.Collection $r0;
        java.lang.Object[] $r1, $r3, $r7;
        int $i0, $i1, $i2;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Class $r4;
        java.lang.Object $r5;
        java.lang.OutOfMemoryError $r6;
        java.lang.NullPointerException $r8;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "collection");

        if $r1 == null goto label14;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $i1 = 0;

        if $i0 != 0 goto label03;

        $i0 = lengthof $r1;

        if $i0 > 0 goto label02;

     label01:
        return $r1;

     label02:
        $r1[0] = null;

        return $r1;

     label03:
        $r2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label05;

        $i0 = lengthof $r1;

        if $i0 > 0 goto label04;

        goto label01;

     label04:
        $r1[0] = null;

        return $r1;

     label05:
        $i2 = lengthof $r1;

        if $i0 > $i2 goto label06;

        $r3 = $r1;

        goto label07;

     label06:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");

        $r3 = (java.lang.Object[]) $r5;

     label07:
        $i0 = $i1 + 1;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3[$i1] = $r5;

        $i1 = lengthof $r3;

        if $i0 < $i1 goto label11;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label08;

        return $r3;

     label08:
        $i1 = $i0 * 3;

        $i1 = $i1 + 1;

        $i1 = $i1 >>> 1;

        if $i1 > $i0 goto label10;

        $i1 = 2147483645;

        if $i0 >= 2147483645 goto label09;

        goto label10;

     label09:
        $r6 = new java.lang.OutOfMemoryError;

        specialinvoke $r6.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r6;

     label10:
        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i1);

        $r3 = $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "copyOf(result, newSize)");

        $i1 = $i0;

        goto label07;

     label11:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label13;

        if $r3 != $r1 goto label12;

        $r1[$i0] = null;

        return $r1;

     label12:
        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(result, size)");

        return $r1;

     label13:
        $i1 = $i0;

        goto label07;

     label14:
        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        goto label15;

     label15:
        throw $r8;
    }

    private static final java.lang.Object[] toArrayImpl(java.util.Collection, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.jvm.functions.Function1 $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.Object[] $r5, $r9;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Integer $r7;
        java.lang.OutOfMemoryError $r8;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r0 := @parameter3: kotlin.jvm.functions.Function2;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r5 = (java.lang.Object[]) $r4;

        return $r5;

     label1:
        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r5 = (java.lang.Object[]) $r4;

        return $r5;

     label2:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        $r5 = (java.lang.Object[]) $r4;

        $i1 = 0;

     label3:
        $i0 = $i1 + 1;

        $r4 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r5[$i1] = $r4;

        $i1 = lengthof $r5;

        if $i0 < $i1 goto label7;

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        return $r5;

     label4:
        $i1 = $i0 * 3;

        $i1 = $i1 + 1;

        $i1 = $i1 >>> 1;

        if $i1 > $i0 goto label6;

        $i1 = 2147483645;

        if $i0 >= 2147483645 goto label5;

        goto label6;

     label5:
        $r8 = new java.lang.OutOfMemoryError;

        specialinvoke $r8.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r8;

     label6:
        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i1);

        $r5 = $r9;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "copyOf(result, newSize)");

        $i1 = $i0;

        goto label3;

     label7:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $i1 = $i0;

        goto label3;

     label8:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r7);

        $r5 = (java.lang.Object[]) $r4;

        return $r5;
    }

