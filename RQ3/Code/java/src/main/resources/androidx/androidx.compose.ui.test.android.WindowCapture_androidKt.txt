androidx.compose.ui.test.android.WindowCapture_androidKt
    public static final androidx.compose.ui.graphics.ImageBitmap captureRegionToImage(android.view.Window, androidx.compose.ui.test.TestContext, android.graphics.Rect)
    {
        android.view.Window $r0;
        androidx.compose.ui.test.TestContext r1;
        android.graphics.Rect r2;
        androidx.compose.ui.test.android.WindowCapture_androidKt$captureRegionToImage$1 $r3;
        kotlin.jvm.functions.Function0 $r4;
        java.lang.Object $r5;
        androidx.compose.ui.graphics.ImageBitmap $r6;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: androidx.compose.ui.test.TestContext;

        r2 := @parameter2: android.graphics.Rect;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "boundsInWindow");

        $r3 = new androidx.compose.ui.test.android.WindowCapture_androidKt$captureRegionToImage$1;

        specialinvoke $r3.<androidx.compose.ui.test.android.WindowCapture_androidKt$captureRegionToImage$1: void <init>(android.view.Window,androidx.compose.ui.test.TestContext,android.graphics.Rect)>($r0, r1, r2);

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        $r5 = staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: java.lang.Object withDrawingEnabled(kotlin.jvm.functions.Function0)>($r4);

        $r6 = (androidx.compose.ui.graphics.ImageBitmap) $r5;

        return $r6;
    }

    private static final java.lang.Object withDrawingEnabled(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 r0;
        boolean z0;
        java.lang.Throwable $r1, r3;
        java.lang.Object r2;

        r0 := @parameter0: kotlin.jvm.functions.Function0;

        z0 = staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: boolean isDrawingEnabled()>();

     label1:
        if z0 != 0 goto label2;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(1);

     label2:
        r2 = interfaceinvoke r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        if z0 != 0 goto label4;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(0);

     label4:
        return r2;

     label5:
        $r1 := @caughtexception;

        r3 = $r1;

     label6:
        if z0 != 0 goto label7;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(0);

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static final void forceRedraw(android.view.View, androidx.compose.ui.test.TestContext)
    {
        android.view.View $r0;
        androidx.compose.ui.test.TestContext r1;
        kotlin.jvm.internal.Ref$BooleanRef r2, $r3;
        android.os.Handler $r4;
        java.lang.Runnable $r5;
        androidx.compose.ui.test.TestOwner $r6;
        androidx.compose.ui.test.MainTestClock $r7;
        androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$2 $r8;
        kotlin.jvm.functions.Function0 $r9;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.compose.ui.test.TestContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testContext");

        $r3 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r3.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r2 = $r3;

        $r4 = virtualinvoke $r0.<android.view.View: android.os.Handler getHandler()>();

        $r5 = dynamicinvoke "run" <java.lang.Runnable (android.view.View,kotlin.jvm.internal.Ref$BooleanRef)>($r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.test.android.WindowCapture_androidKt: void forceRedraw$lambda-1(android.view.View,kotlin.jvm.internal.Ref$BooleanRef)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        $r6 = virtualinvoke r1.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r7 = interfaceinvoke $r6.<androidx.compose.ui.test.TestOwner: androidx.compose.ui.test.MainTestClock getMainClock()>();

        $r8 = new androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$2;

        specialinvoke $r8.<androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$2: void <init>(kotlin.jvm.internal.Ref$BooleanRef)>(r2);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: void waitUntil(androidx.compose.ui.test.MainTestClock,long,kotlin.jvm.functions.Function0)>($r7, 2000L, $r9);

        return;
    }

    private static final android.graphics.Bitmap generateBitmap(android.view.Window, android.graphics.Rect)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r3;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: void generateBitmapFromPixelCopy(android.view.Window,android.graphics.Rect,android.graphics.Bitmap)>($r0, r1, r2);

        return r2;
    }

    private static final void generateBitmapFromPixelCopy(android.view.Window, android.graphics.Rect, android.graphics.Bitmap)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        java.util.concurrent.CountDownLatch r3, $r6;
        kotlin.jvm.internal.Ref$IntRef r4, $r7;
        android.view.PixelCopy$OnPixelCopyFinishedListener r5;
        android.os.Handler $r8;
        androidx.compose.ui.test.android.PixelCopyHelper $r9;
        android.os.Looper $r10;
        java.util.concurrent.TimeUnit $r11;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r12, $r13;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Bitmap;

        $r6 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = $r6;

        $r7 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $r7.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r4 = $r7;

        r5 = dynamicinvoke "onPixelCopyFinished" <android.view.PixelCopy$OnPixelCopyFinishedListener (kotlin.jvm.internal.Ref$IntRef,java.util.concurrent.CountDownLatch)>(r4, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.test.android.WindowCapture_androidKt: void generateBitmapFromPixelCopy$lambda-2(kotlin.jvm.internal.Ref$IntRef,java.util.concurrent.CountDownLatch,int)>, methodtype: void __METHODTYPE__(int));

        $r9 = <androidx.compose.ui.test.android.PixelCopyHelper: androidx.compose.ui.test.android.PixelCopyHelper INSTANCE>;

        $r8 = new android.os.Handler;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        virtualinvoke $r9.<androidx.compose.ui.test.android.PixelCopyHelper: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r0, r1, r2, r5, $r8);

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z0 = virtualinvoke r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, $r11);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("Failed waiting for PixelCopy!");

        throw $r13;

     label1:
        $i0 = r4.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i0 == 0 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("PixelCopy failed!");

        throw $r12;

     label2:
        return;
    }

    private static final void waitUntil(androidx.compose.ui.test.MainTestClock, long, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.test.MainTestClock $r0;
        long l0, l1, $l2, $l3, $l4, $l5;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0, $z1;
        byte $b6;
        androidx.compose.ui.test.ComposeTimeoutException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        $r0 := @parameter0: androidx.compose.ui.test.MainTestClock;

        l0 := @parameter1: long;

        r1 := @parameter2: kotlin.jvm.functions.Function0;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label1:
        $r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label3;

        $z1 = interfaceinvoke $r0.<androidx.compose.ui.test.MainTestClock: boolean getAutoAdvance()>();

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<androidx.compose.ui.test.MainTestClock: void advanceTimeByFrame()>();

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l5 = $l2 - l1;

        $l3 = (long) 1000000;

        $l4 = l0 * $l3;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label1;

        $r4 = new androidx.compose.ui.test.ComposeTimeoutException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Condition still not satisfied after ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<androidx.compose.ui.test.ComposeTimeoutException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label3:
        return;
    }

    private static final void forceRedraw$lambda-1$lambda-0(kotlin.jvm.internal.Ref$BooleanRef)
    {
        kotlin.jvm.internal.Ref$BooleanRef $r0;

        $r0 := @parameter0: kotlin.jvm.internal.Ref$BooleanRef;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$drawDone");

        $r0.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        return;
    }

    private static final void forceRedraw$lambda-1(android.view.View, kotlin.jvm.internal.Ref$BooleanRef)
    {
        android.view.View $r0;
        kotlin.jvm.internal.Ref$BooleanRef $r1;
        int $i0;
        android.view.ViewTreeObserver $r2, $r6;
        androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$1$2 $r3;
        android.view.ViewTreeObserver$OnDrawListener $r4;
        boolean $z0;
        androidx.compose.ui.test.android.FrameCommitCallbackHelper $r5;
        java.lang.Runnable $r7;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: kotlin.jvm.internal.Ref$BooleanRef;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this_forceRedraw");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$drawDone");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label1;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label1;

        $r5 = <androidx.compose.ui.test.android.FrameCommitCallbackHelper: androidx.compose.ui.test.android.FrameCommitCallbackHelper INSTANCE>;

        $r6 = virtualinvoke $r0.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "viewTreeObserver");

        $r7 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.internal.Ref$BooleanRef)>($r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.test.android.WindowCapture_androidKt: void forceRedraw$lambda-1$lambda-0(kotlin.jvm.internal.Ref$BooleanRef)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r5.<androidx.compose.ui.test.android.FrameCommitCallbackHelper: void registerFrameCommitCallback(android.view.ViewTreeObserver,java.lang.Runnable)>($r6, $r7);

        goto label2;

     label1:
        $r2 = virtualinvoke $r0.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r3 = new androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$1$2;

        specialinvoke $r3.<androidx.compose.ui.test.android.WindowCapture_androidKt$forceRedraw$1$2: void <init>(android.view.View,kotlin.jvm.internal.Ref$BooleanRef)>($r0, $r1);

        $r4 = (android.view.ViewTreeObserver$OnDrawListener) $r3;

        virtualinvoke $r2.<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>($r4);

     label2:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    private static final void generateBitmapFromPixelCopy$lambda-2(kotlin.jvm.internal.Ref$IntRef, java.util.concurrent.CountDownLatch, int)
    {
        kotlin.jvm.internal.Ref$IntRef $r0;
        java.util.concurrent.CountDownLatch $r1;
        int i0;

        $r0 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r1 := @parameter1: java.util.concurrent.CountDownLatch;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$copyResult");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$latch");

        $r0.<kotlin.jvm.internal.Ref$IntRef: int element> = i0;

        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public static final android.graphics.Bitmap access$generateBitmap(android.view.Window, android.graphics.Rect)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap $r2;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        $r2 = staticinvoke <androidx.compose.ui.test.android.WindowCapture_androidKt: android.graphics.Bitmap generateBitmap(android.view.Window,android.graphics.Rect)>($r0, r1);

        return $r2;
    }

