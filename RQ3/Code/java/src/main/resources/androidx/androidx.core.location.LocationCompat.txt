androidx.core.location.LocationCompat
<androidx.core.location.LocationCompat: java.lang.String EXTRA_IS_MOCK>
<androidx.core.location.LocationCompat: java.lang.String EXTRA_VERTICAL_ACCURACY>
<androidx.core.location.LocationCompat: java.lang.String EXTRA_SPEED_ACCURACY>
<androidx.core.location.LocationCompat: java.lang.String EXTRA_BEARING_ACCURACY>
<androidx.core.location.LocationCompat: java.lang.String EXTRA_MSL_ALTITUDE>
<androidx.core.location.LocationCompat: java.lang.String EXTRA_MSL_ALTITUDE_ACCURACY>
<androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>
    private void <init>()
    {
        androidx.core.location.LocationCompat r0;

        r0 := @this: androidx.core.location.LocationCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long getElapsedRealtimeNanos(android.location.Location)
    {
        android.location.Location r0;
        int $i0;
        java.util.concurrent.TimeUnit $r1;
        long $l1, $l2, $l3;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        $l3 = staticinvoke <androidx.core.location.LocationCompat$Api17Impl: long getElapsedRealtimeNanos(android.location.Location)>(r0);

        return $l3;

     label1:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = staticinvoke <androidx.core.location.LocationCompat: long getElapsedRealtimeMillis(android.location.Location)>(r0);

        $l2 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

        return $l2;
    }

    public static long getElapsedRealtimeMillis(android.location.Location)
    {
        android.location.Location r0;
        long l0, l1, $l3, $l4, $l7, $l8, $l9;
        int $i2;
        byte $b5, $b6;
        java.util.concurrent.TimeUnit $r1;

        r0 := @parameter0: android.location.Location;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 17 goto label1;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l8 = staticinvoke <androidx.core.location.LocationCompat$Api17Impl: long getElapsedRealtimeNanos(android.location.Location)>(r0);

        $l9 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l8);

        return $l9;

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = virtualinvoke r0.<android.location.Location: long getTime()>();

        l0 = $l3 - $l4;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b5 = l0 cmp 0L;

        if $b5 >= 0 goto label2;

        return l1;

     label2:
        $b6 = l0 cmp l1;

        if $b6 <= 0 goto label3;

        return 0L;

     label3:
        $l7 = l1 - l0;

        return $l7;
    }

    public static boolean hasVerticalAccuracy(android.location.Location)
    {
        android.location.Location r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $z1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasVerticalAccuracy(android.location.Location)>(r0);

        return $z1;

     label1:
        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean containsExtra(android.location.Location,java.lang.String)>(r0, "verticalAccuracy");

        return $z0;
    }

    public static float getVerticalAccuracyMeters(android.location.Location)
    {
        android.location.Location r0;
        android.os.Bundle r1;
        int $i0;
        float $f0, $f1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $f1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getVerticalAccuracyMeters(android.location.Location)>(r0);

        return $f1;

     label1:
        r1 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("verticalAccuracy", 0.0F);

        return $f0;
    }

    public static void setVerticalAccuracyMeters(android.location.Location, float)
    {
        android.location.Location r0;
        float f0;
        int $i0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.location.Location;

        f0 := @parameter1: float;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setVerticalAccuracyMeters(android.location.Location,float)>(r0, f0);

        goto label2;

     label1:
        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("verticalAccuracy", f0);

     label2:
        return;
    }

    public static boolean hasSpeedAccuracy(android.location.Location)
    {
        android.location.Location r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $z1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasSpeedAccuracy(android.location.Location)>(r0);

        return $z1;

     label1:
        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean containsExtra(android.location.Location,java.lang.String)>(r0, "speedAccuracy");

        return $z0;
    }

    public static float getSpeedAccuracyMetersPerSecond(android.location.Location)
    {
        android.location.Location r0;
        android.os.Bundle r1;
        int $i0;
        float $f0, $f1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $f1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getSpeedAccuracyMetersPerSecond(android.location.Location)>(r0);

        return $f1;

     label1:
        r1 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("speedAccuracy", 0.0F);

        return $f0;
    }

    public static void setSpeedAccuracyMetersPerSecond(android.location.Location, float)
    {
        android.location.Location r0;
        float f0;
        int $i0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.location.Location;

        f0 := @parameter1: float;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setSpeedAccuracyMetersPerSecond(android.location.Location,float)>(r0, f0);

        goto label2;

     label1:
        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("speedAccuracy", f0);

     label2:
        return;
    }

    public static boolean hasBearingAccuracy(android.location.Location)
    {
        android.location.Location r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $z1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasBearingAccuracy(android.location.Location)>(r0);

        return $z1;

     label1:
        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean containsExtra(android.location.Location,java.lang.String)>(r0, "bearingAccuracy");

        return $z0;
    }

    public static float getBearingAccuracyDegrees(android.location.Location)
    {
        android.location.Location r0;
        android.os.Bundle r1;
        int $i0;
        float $f0, $f1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $f1 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getBearingAccuracyDegrees(android.location.Location)>(r0);

        return $f1;

     label1:
        r1 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("bearingAccuracy", 0.0F);

        return $f0;
    }

    public static void setBearingAccuracyDegrees(android.location.Location, float)
    {
        android.location.Location r0;
        float f0;
        int $i0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.location.Location;

        f0 := @parameter1: float;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setBearingAccuracyDegrees(android.location.Location,float)>(r0, f0);

        goto label2;

     label1:
        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("bearingAccuracy", f0);

     label2:
        return;
    }

    public static double getMslAltitudeMeters(android.location.Location)
    {
        android.location.Location r0;
        boolean $z0;
        android.os.Bundle $r1;
        double $d0;

        r0 := @parameter0: android.location.Location;

        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean hasMslAltitude(android.location.Location)>(r0);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The Mean Sea Level altitude of the location is not set.");

        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        $d0 = virtualinvoke $r1.<android.os.Bundle: double getDouble(java.lang.String)>("androidx.core.location.extra.MSL_ALTITUDE");

        return $d0;
    }

    public static void setMslAltitudeMeters(android.location.Location, double)
    {
        android.location.Location r0;
        double d0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.location.Location;

        d0 := @parameter1: double;

        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        virtualinvoke $r1.<android.os.Bundle: void putDouble(java.lang.String,double)>("androidx.core.location.extra.MSL_ALTITUDE", d0);

        return;
    }

    public static boolean hasMslAltitude(android.location.Location)
    {
        android.location.Location r0;
        boolean $z0;

        r0 := @parameter0: android.location.Location;

        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean containsExtra(android.location.Location,java.lang.String)>(r0, "androidx.core.location.extra.MSL_ALTITUDE");

        return $z0;
    }

    public static void removeMslAltitude(android.location.Location)
    {
        android.location.Location r0;

        r0 := @parameter0: android.location.Location;

        staticinvoke <androidx.core.location.LocationCompat: void removeExtra(android.location.Location,java.lang.String)>(r0, "androidx.core.location.extra.MSL_ALTITUDE");

        return;
    }

    public static float getMslAltitudeAccuracyMeters(android.location.Location)
    {
        android.location.Location r0;
        boolean $z0;
        android.os.Bundle $r1;
        float $f0;

        r0 := @parameter0: android.location.Location;

        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean hasMslAltitudeAccuracy(android.location.Location)>(r0);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The Mean Sea Level altitude accuracy of the location is not set.");

        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String)>("androidx.core.location.extra.MSL_ALTITUDE_ACCURACY");

        return $f0;
    }

    public static void setMslAltitudeAccuracyMeters(android.location.Location, float)
    {
        android.location.Location r0;
        float f0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.location.Location;

        f0 := @parameter1: float;

        $r1 = staticinvoke <androidx.core.location.LocationCompat: android.os.Bundle getOrCreateExtras(android.location.Location)>(r0);

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("androidx.core.location.extra.MSL_ALTITUDE_ACCURACY", f0);

        return;
    }

    public static boolean hasMslAltitudeAccuracy(android.location.Location)
    {
        android.location.Location r0;
        boolean $z0;

        r0 := @parameter0: android.location.Location;

        $z0 = staticinvoke <androidx.core.location.LocationCompat: boolean containsExtra(android.location.Location,java.lang.String)>(r0, "androidx.core.location.extra.MSL_ALTITUDE_ACCURACY");

        return $z0;
    }

    public static void removeMslAltitudeAccuracy(android.location.Location)
    {
        android.location.Location r0;

        r0 := @parameter0: android.location.Location;

        staticinvoke <androidx.core.location.LocationCompat: void removeExtra(android.location.Location,java.lang.String)>(r0, "androidx.core.location.extra.MSL_ALTITUDE_ACCURACY");

        return;
    }

    public static boolean isMock(android.location.Location)
    {
        android.location.Location r0;
        android.os.Bundle r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.location.Location;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 18 goto label1;

        $z1 = staticinvoke <androidx.core.location.LocationCompat$Api18Impl: boolean isMock(android.location.Location)>(r0);

        return $z1;

     label1:
        r1 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("mockLocation", 0);

        return $z0;
    }

    public static void setMock(android.location.Location, boolean)
    {
        android.location.Location r0;
        boolean z0, $z1;
        int $i0;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Boolean $r4;
        java.lang.Throwable $r6, $r9, $r11, r14, r16, r18, r25;
        java.lang.NoSuchMethodError r15, r21;
        java.lang.IllegalAccessError r17, r22;
        android.os.Bundle r19, r20, r24;
        java.lang.RuntimeException r23;

        r0 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 18 goto label6;

     label1:
        $r2 = staticinvoke <androidx.core.location.LocationCompat: java.lang.reflect.Method getSetIsFromMockProviderMethod()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[0] = $r4;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r3);

     label2:
        goto label9;

     label3:
        $r6 := @caughtexception;

        r14 = $r6;

        r21 = new java.lang.NoSuchMethodError;

        specialinvoke r21.<java.lang.NoSuchMethodError: void <init>()>();

        r15 = r21;

        virtualinvoke r15.<java.lang.Error: java.lang.Throwable initCause(java.lang.Throwable)>(r14);

        throw r15;

     label4:
        $r11 := @caughtexception;

        r16 = $r11;

        r22 = new java.lang.IllegalAccessError;

        specialinvoke r22.<java.lang.IllegalAccessError: void <init>()>();

        r17 = r22;

        virtualinvoke r17.<java.lang.Error: java.lang.Throwable initCause(java.lang.Throwable)>(r16);

        throw r17;

     label5:
        $r9 := @caughtexception;

        r18 = $r9;

        r23 = new java.lang.RuntimeException;

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        r25 = (java.lang.Throwable) r23;

        throw r25;

     label6:
        r19 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r19 != null goto label7;

        if z0 == 0 goto label9;

        r24 = new android.os.Bundle;

        specialinvoke r24.<android.os.Bundle: void <init>()>();

        r20 = r24;

        virtualinvoke r20.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("mockLocation", 1);

        virtualinvoke r0.<android.location.Location: void setExtras(android.os.Bundle)>(r20);

        goto label9;

     label7:
        if z0 == 0 goto label8;

        virtualinvoke r19.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("mockLocation", 1);

        goto label9;

     label8:
        virtualinvoke r19.<android.os.Bundle: void remove(java.lang.String)>("mockLocation");

        $z1 = virtualinvoke r19.<android.os.Bundle: boolean isEmpty()>();

        if $z1 == 0 goto label9;

        virtualinvoke r0.<android.location.Location: void setExtras(android.os.Bundle)>(null);

     label9:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    private static java.lang.reflect.Method getSetIsFromMockProviderMethod() throws java.lang.NoSuchMethodException
    {
        java.lang.reflect.Method $r0, $r1, $r5, $r6;
        java.lang.Class[] $r2;
        java.lang.Class $r3, $r4;

        $r0 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        if $r0 != null goto label1;

        $r4 = class "Landroid/location/Location;";

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2[0] = $r3;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setIsFromMockProvider", $r2);

        <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod> = $r5;

        $r6 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        virtualinvoke $r6.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label1:
        $r1 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        return $r1;
    }

    private static android.os.Bundle getOrCreateExtras(android.location.Location)
    {
        android.location.Location r0;
        android.os.Bundle $r1, r2;

        r0 := @parameter0: android.location.Location;

        r2 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r2 != null goto label1;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r0.<android.location.Location: void setExtras(android.os.Bundle)>($r1);

        r2 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

     label1:
        return r2;
    }

    private static boolean containsExtra(android.location.Location, java.lang.String)
    {
        android.location.Location r0;
        java.lang.String r1;
        android.os.Bundle r2;
        boolean $z0, $z1;

        r0 := @parameter0: android.location.Location;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static void removeExtra(android.location.Location, java.lang.String)
    {
        android.location.Location r0;
        java.lang.String r1;
        android.os.Bundle r2;
        boolean $z0;

        r0 := @parameter0: android.location.Location;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<android.location.Location: android.os.Bundle getExtras()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.os.Bundle: void remove(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.location.Location: void setExtras(android.os.Bundle)>(null);

     label1:
        return;
    }

