androidx.security.app.authenticator.TestAppSignatureVerifier
<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mSignatureAcceptedPackages>
<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mNotInstalledPackages>
<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Map mSigningIdentities>
<androidx.security.app.authenticator.TestAppSignatureVerifier: int mTestPolicy>
    void <init>(android.content.Context, java.util.Map, java.util.Map, java.util.Set, java.util.Set, java.util.Map, int)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier r0;
        android.content.Context r1;
        java.util.Map r2, r3, r6;
        java.util.Set r4, r5;
        int i0;
        androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache $r7;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: java.util.Set;

        r6 := @parameter5: java.util.Map;

        i0 := @parameter6: int;

        $r7 = new androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache;

        specialinvoke $r7.<androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache: void <init>()>();

        specialinvoke r0.<androidx.security.app.authenticator.AppSignatureVerifier: void <init>(android.content.Context,java.util.Map,java.util.Map,java.lang.String,androidx.security.app.authenticator.AppSignatureVerifier$Cache)>(r1, r2, r3, "SHA-256", $r7);

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mSignatureAcceptedPackages> = r4;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mNotInstalledPackages> = r5;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Map mSigningIdentities> = r6;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: int mTestPolicy> = i0;

        return;
    }

    boolean verifySigningIdentityForQuery(java.lang.String, java.lang.String, java.util.Set, java.util.Set)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier r0;
        java.lang.String r1, r2, r5;
        java.util.Set r3, r4, $r6, $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map $r8;
        java.lang.Object $r9;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        $i0 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: int mTestPolicy>;

        if $i0 != 2 goto label1;

        return 0;

     label1:
        $i1 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: int mTestPolicy>;

        if $i1 != 1 goto label4;

        if r3 == null goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $r6 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mNotInstalledPackages>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

        return 0;

     label5:
        $r7 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Set mSignatureAcceptedPackages>;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label6;

        return 1;

     label6:
        $r8 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier: java.util.Map mSigningIdentities>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.String) $r9;

        if r5 == null goto label8;

        if r3 == null goto label7;

        $z3 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z3 == 0 goto label7;

        return 1;

     label7:
        if r4 == null goto label8;

        $z2 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z2 == 0 goto label8;

        return 1;

     label8:
        return 0;
    }

androidx.security.app.authenticator.TestAppSignatureVerifier$Builder
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: android.content.Context mContext>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mPermissionAllowMap>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mExpectedIdentities>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mSignatureAcceptedPackages>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mNotInstalledPackages>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.lang.String mDigestAlgorithm>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mSigningIdentities>
<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: int mTestPolicy>
    void <init>(android.content.Context)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        android.content.Context r1;
        androidx.collection.ArraySet $r2, $r3;
        androidx.collection.ArrayMap $r4;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: android.content.Context mContext> = r1;

        $r2 = new androidx.collection.ArraySet;

        specialinvoke $r2.<androidx.collection.ArraySet: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mSignatureAcceptedPackages> = $r2;

        $r3 = new androidx.collection.ArraySet;

        specialinvoke $r3.<androidx.collection.ArraySet: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mNotInstalledPackages> = $r3;

        $r4 = new androidx.collection.ArrayMap;

        specialinvoke $r4.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mSigningIdentities> = $r4;

        return;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setSignatureAcceptedForPackage(java.lang.String)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mSignatureAcceptedPackages>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setSigningIdentityForPackage(java.lang.String, java.lang.String)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mSigningIdentities>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setPermissionAllowMap(java.util.Map)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.util.Map r1;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mPermissionAllowMap> = r1;

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setExpectedIdentities(java.util.Map)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.util.Map r1;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mExpectedIdentities> = r1;

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setTestPolicy(int)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        int i0;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        i0 := @parameter0: int;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: int mTestPolicy> = i0;

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier$Builder setPackageNotInstalled(java.lang.String)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mNotInstalledPackages>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    androidx.security.app.authenticator.TestAppSignatureVerifier build()
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$Builder r0;
        java.util.Map $r1, $r2, $r5, $r8, $r9;
        java.lang.String $r3;
        androidx.security.app.authenticator.TestAppSignatureVerifier $r4;
        int $i0;
        java.util.Set $r6, $r7;
        android.content.Context $r10;
        androidx.collection.ArrayMap $r11, $r12;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$Builder;

        $r1 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mPermissionAllowMap>;

        if $r1 != null goto label1;

        $r12 = new androidx.collection.ArrayMap;

        specialinvoke $r12.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mPermissionAllowMap> = $r12;

     label1:
        $r2 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mExpectedIdentities>;

        if $r2 != null goto label2;

        $r11 = new androidx.collection.ArrayMap;

        specialinvoke $r11.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mExpectedIdentities> = $r11;

     label2:
        $r3 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.lang.String mDigestAlgorithm>;

        if $r3 != null goto label3;

        r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.lang.String mDigestAlgorithm> = "SHA-256";

     label3:
        $r4 = new androidx.security.app.authenticator.TestAppSignatureVerifier;

        $r10 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: android.content.Context mContext>;

        $r9 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mPermissionAllowMap>;

        $r8 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mExpectedIdentities>;

        $r7 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mSignatureAcceptedPackages>;

        $r6 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Set mNotInstalledPackages>;

        $r5 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: java.util.Map mSigningIdentities>;

        $i0 = r0.<androidx.security.app.authenticator.TestAppSignatureVerifier$Builder: int mTestPolicy>;

        specialinvoke $r4.<androidx.security.app.authenticator.TestAppSignatureVerifier: void <init>(android.content.Context,java.util.Map,java.util.Map,java.util.Set,java.util.Set,java.util.Map,int)>($r10, $r9, $r8, $r7, $r6, $r5, $i0);

        return $r4;
    }

androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache
    void <init>()
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache r0;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache;

        specialinvoke r0.<androidx.security.app.authenticator.AppSignatureVerifier$Cache: void <init>(int)>(1);

        return;
    }

    androidx.security.app.authenticator.AppSignatureVerifier$CacheEntry get(java.lang.String, java.lang.String)
    {
        androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.security.app.authenticator.TestAppSignatureVerifier$NullCache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

