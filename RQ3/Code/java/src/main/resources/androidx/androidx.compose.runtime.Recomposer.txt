androidx.compose.runtime.Recomposer
<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$Companion Companion>
<androidx.compose.runtime.Recomposer: long changeCount>
<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>
<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob>
<androidx.compose.runtime.Recomposer: kotlin.coroutines.CoroutineContext effectCoroutineContext>
<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>
<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob>
<androidx.compose.runtime.Recomposer: java.lang.Throwable closeCause>
<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>
<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>
<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>
<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>
<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>
<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>
<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>
<androidx.compose.runtime.Recomposer: java.util.List failedCompositions>
<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation>
<androidx.compose.runtime.Recomposer: int concurrentCompositionsOutstanding>
<androidx.compose.runtime.Recomposer: boolean isClosed>
<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState>
<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>
<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl recomposerInfo>
<androidx.compose.runtime.Recomposer: int $stable>
<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _runningRecomposers>
<androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference _hotReloadEnabled>
    public void <init>(kotlin.coroutines.CoroutineContext)
    {
        androidx.compose.runtime.Recomposer r0, r3;
        kotlin.coroutines.CoroutineContext r1, $r15, $r16, $r18, $r19;
        kotlinx.coroutines.CompletableJob r2, $r17;
        androidx.compose.runtime.BroadcastFrameClock $r4, $r14;
        androidx.compose.runtime.Recomposer$broadcastFrameClock$1 $r5;
        kotlin.jvm.functions.Function0 $r6;
        kotlinx.coroutines.Job$Key $r7;
        kotlin.coroutines.CoroutineContext$Key $r8;
        kotlin.coroutines.CoroutineContext$Element $r9;
        kotlinx.coroutines.Job $r10;
        androidx.compose.runtime.Recomposer$effectJob$1$1 $r11;
        kotlin.jvm.functions.Function1 $r12;
        java.lang.Object $r20;
        java.util.ArrayList $r21, $r23, $r25, $r27, $r29;
        java.util.List $r22, $r24, $r26, $r28, $r30;
        java.util.LinkedHashMap $r31, $r33;
        java.util.Map $r32, $r34;
        androidx.compose.runtime.Recomposer$State $r35;
        kotlinx.coroutines.flow.MutableStateFlow $r36;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl $r37;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "effectCoroutineContext");

        specialinvoke r0.<androidx.compose.runtime.CompositionContext: void <init>()>();

        $r4 = new androidx.compose.runtime.BroadcastFrameClock;

        $r5 = new androidx.compose.runtime.Recomposer$broadcastFrameClock$1;

        specialinvoke $r5.<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: void <init>(androidx.compose.runtime.Recomposer)>(r0);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        specialinvoke $r4.<androidx.compose.runtime.BroadcastFrameClock: void <init>(kotlin.jvm.functions.Function0)>($r6);

        r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock> = $r4;

        $r7 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r8 = (kotlin.coroutines.CoroutineContext$Key) $r7;

        $r9 = interfaceinvoke r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r8);

        $r10 = (kotlinx.coroutines.Job) $r9;

        r2 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r10);

        r3 = r0;

        $r11 = new androidx.compose.runtime.Recomposer$effectJob$1$1;

        specialinvoke $r11.<androidx.compose.runtime.Recomposer$effectJob$1$1: void <init>(androidx.compose.runtime.Recomposer)>(r0);

        $r12 = (kotlin.jvm.functions.Function1) $r11;

        interfaceinvoke r2.<kotlinx.coroutines.CompletableJob: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r12);

        r3.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob> = r2;

        $r14 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $r15 = (kotlin.coroutines.CoroutineContext) $r14;

        $r16 = interfaceinvoke r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r15);

        $r17 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob>;

        $r18 = (kotlin.coroutines.CoroutineContext) $r17;

        $r19 = interfaceinvoke $r16.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r18);

        r0.<androidx.compose.runtime.Recomposer: kotlin.coroutines.CoroutineContext effectCoroutineContext> = $r19;

        $r20 = new java.lang.Object;

        specialinvoke $r20.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock> = $r20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        $r22 = (java.util.List) $r21;

        r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions> = $r22;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = (java.util.List) $r23;

        r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations> = $r24;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        $r26 = (java.util.List) $r25;

        r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations> = $r26;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $r28 = (java.util.List) $r27;

        r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply> = $r28;

        $r29 = new java.util.ArrayList;

        specialinvoke $r29.<java.util.ArrayList: void <init>()>();

        $r30 = (java.util.List) $r29;

        r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert> = $r30;

        $r31 = new java.util.LinkedHashMap;

        specialinvoke $r31.<java.util.LinkedHashMap: void <init>()>();

        $r32 = (java.util.Map) $r31;

        r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved> = $r32;

        $r33 = new java.util.LinkedHashMap;

        specialinvoke $r33.<java.util.LinkedHashMap: void <init>()>();

        $r34 = (java.util.Map) $r33;

        r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable> = $r34;

        $r35 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive>;

        $r36 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r35);

        r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state> = $r36;

        $r37 = new androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        specialinvoke $r37.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: void <init>(androidx.compose.runtime.Recomposer)>(r0);

        r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl recomposerInfo> = $r37;

        return;
    }

    public final long getChangeCount()
    {
        androidx.compose.runtime.Recomposer r0;
        long $l0;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $l0 = r0.<androidx.compose.runtime.Recomposer: long changeCount>;

        return $l0;
    }

    public kotlin.coroutines.CoroutineContext getEffectCoroutineContext$runtime_release()
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = r0.<androidx.compose.runtime.Recomposer: kotlin.coroutines.CoroutineContext effectCoroutineContext>;

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext$runtime_release()
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.EmptyCoroutineContext $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r1;

        return $r2;
    }

    private final kotlinx.coroutines.CancellableContinuation deriveStateLocked()
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.Recomposer$State r1, $r6, $r8, $r29, $r31;
        kotlinx.coroutines.CancellableContinuation r2, r3, $r28, $r32;
        kotlinx.coroutines.flow.MutableStateFlow $r4, $r30;
        java.lang.Object $r5;
        java.lang.Enum $r7;
        int $i0, $i1;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r9;
        kotlinx.coroutines.Job $r10;
        java.util.List $r11, $r13, $r15, $r17, $r20, $r21, $r23, $r24, $r25, $r26, $r27;
        java.util.Collection $r12, $r14, $r16, $r18;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11;
        androidx.compose.runtime.BroadcastFrameClock $r19, $r22;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r4 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r8 = (androidx.compose.runtime.Recomposer$State) $r5;

        $r6 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        $r7 = (java.lang.Enum) $r6;

        $i0 = virtualinvoke $r8.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r7);

        if $i0 > 0 goto label02;

        $r23 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        interfaceinvoke $r23.<java.util.List: void clear()>();

        $r24 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        interfaceinvoke $r24.<java.util.List: void clear()>();

        $r25 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        interfaceinvoke $r25.<java.util.List: void clear()>();

        $r26 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        interfaceinvoke $r26.<java.util.List: void clear()>();

        $r27 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        interfaceinvoke $r27.<java.util.List: void clear()>();

        r0.<androidx.compose.runtime.Recomposer: java.util.List failedCompositions> = null;

        $r28 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation>;

        if $r28 == null goto label01;

        staticinvoke <kotlinx.coroutines.CancellableContinuation$DefaultImpls: boolean cancel$default(kotlinx.coroutines.CancellableContinuation,java.lang.Throwable,int,java.lang.Object)>($r28, null, 1, null);

        goto label01;

     label01:
        r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation> = null;

        r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState> = null;

        return null;

     label02:
        $r9 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState>;

        if $r9 == null goto label03;

        $r29 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive>;

        goto label16;

     label03:
        $r10 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob>;

        if $r10 != null goto label05;

        $r20 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        interfaceinvoke $r20.<java.util.List: void clear()>();

        $r21 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        interfaceinvoke $r21.<java.util.List: void clear()>();

        $r22 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z6 = virtualinvoke $r22.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z6 == 0 goto label04;

        $r29 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State InactivePendingWork>;

        goto label16;

     label04:
        $r29 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive>;

        goto label16;

     label05:
        $r11 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r12 = (java.util.Collection) $r11;

        $z1 = interfaceinvoke $r12.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        if $z8 != 0 goto label14;

        $r13 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        $r14 = (java.util.Collection) $r13;

        $z2 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        if $z9 != 0 goto label14;

        $r15 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        $r16 = (java.util.Collection) $r15;

        $z3 = interfaceinvoke $r16.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label10;

        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        if $z10 != 0 goto label14;

        $r17 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        $r18 = (java.util.Collection) $r17;

        $z4 = interfaceinvoke $r18.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label12;

        $z11 = 1;

        goto label13;

     label12:
        $z11 = 0;

     label13:
        if $z11 != 0 goto label14;

        $i1 = r0.<androidx.compose.runtime.Recomposer: int concurrentCompositionsOutstanding>;

        if $i1 > 0 goto label14;

        $r19 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z5 = virtualinvoke $r19.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z5 == 0 goto label15;

     label14:
        $r29 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State PendingWork>;

        goto label16;

     label15:
        $r29 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>;

     label16:
        r1 = $r29;

        $r30 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        interfaceinvoke $r30.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r1);

        $r31 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State PendingWork>;

        if r1 != $r31 goto label17;

        r2 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation>;

        r3 = r2;

        r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation> = null;

        $r32 = r2;

        goto label18;

     label17:
        $r32 = null;

     label18:
        return $r32;
    }

    private final boolean getShouldKeepRecomposing()
    {
        androidx.compose.runtime.Recomposer r0;
        kotlinx.coroutines.Job r1;
        boolean $z1, $z2, $z3, $z6, $z8, $z9;
        kotlinx.coroutines.CompletableJob $r2;
        java.lang.Object r3, r4, $r7;
        kotlin.sequences.Sequence r5;
        java.util.Iterator r6;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

        $z1 = r0.<androidx.compose.runtime.Recomposer: boolean isClosed>;

        if $z1 != 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        exitmonitor r4;

        goto label3;

     label3:
        if $z6 != 0 goto label7;

        $r2 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob>;

        r5 = interfaceinvoke $r2.<kotlinx.coroutines.CompletableJob: kotlin.sequences.Sequence getChildren()>();

        r6 = interfaceinvoke r5.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (kotlinx.coroutines.Job) $r7;

        $z3 = interfaceinvoke r1.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z3 == 0 goto label4;

        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        if $z8 == 0 goto label8;

     label7:
        $z9 = 1;

        goto label9;

     label8:
        $z9 = 0;

     label9:
        return $z9;
    }

    public final kotlinx.coroutines.flow.Flow getState()
    {
        androidx.compose.runtime.Recomposer r0;
        kotlinx.coroutines.flow.StateFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.StateFlow getCurrentState()>();

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static void getState$annotations()
    {
        return;
    }

    public final kotlinx.coroutines.flow.StateFlow getCurrentState()
    {
        androidx.compose.runtime.Recomposer r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;
        kotlinx.coroutines.flow.StateFlow $r2;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r1;

        return $r2;
    }

    public final androidx.compose.runtime.RecomposerInfo asRecomposerInfo()
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl $r1;
        androidx.compose.runtime.RecomposerInfo $r2;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl recomposerInfo>;

        $r2 = (androidx.compose.runtime.RecomposerInfo) $r1;

        return $r2;
    }

    private final void recordComposerModificationsLocked()
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.List $r1, $r4, $r7, $r9;
        int i0, i1, i2, i3;
        java.lang.Object r2, r5;
        java.util.Set r3;
        androidx.compose.runtime.ControlledComposition r6;
        java.util.Collection $r8;
        boolean $z4, $z5;
        kotlinx.coroutines.CancellableContinuation $r10;
        java.lang.String $r12, $r13;
        java.lang.IllegalStateException r14;
        java.lang.Throwable r15;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r7 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        $r8 = (java.util.Collection) $r7;

        $z4 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        if $z5 == 0 goto label7;

        $r1 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        i2 = 0;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label3:
        if i2 >= i0 goto label6;

        r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (java.util.Set) r2;

        $r4 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        i3 = 0;

        i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label4:
        if i3 >= i1 goto label5;

        r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (androidx.compose.runtime.ControlledComposition) r5;

        interfaceinvoke r6.<androidx.compose.runtime.ControlledComposition: void recordModificationsOf(java.util.Set)>(r3);

        i3 = i3 + 1;

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        $r9 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        interfaceinvoke $r9.<java.util.List: void clear()>();

        $r10 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

        if $r10 == null goto label7;

        r14 = new java.lang.IllegalStateException;

        $r12 = "called outside of runRecomposeAndApplyChanges";

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        r15 = (java.lang.Throwable) r14;

        throw r15;

     label7:
        return;
    }

    private final void recordComposerModificationsLocked(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.Set r2;
        java.util.List $r3, $r6, $r8, $r14, $r15, $r17;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r4, r16, r18;
        androidx.compose.runtime.ControlledComposition r5;
        java.util.Collection $r7;
        boolean $z4, $z5;
        kotlinx.coroutines.CancellableContinuation $r9;
        java.lang.String $r11, $r12;
        java.lang.IllegalStateException r19;
        java.lang.Throwable r20;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r0);

        $r7 = (java.util.Collection) $r6;

        $z4 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 == 0 goto label07;

        $r15 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r0);

        i1 = 0;

        i2 = interfaceinvoke $r15.<java.util.List: int size()>();

     label03:
        if i1 >= i2 goto label06;

        r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (java.util.Set) r16;

        $r3 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>(r0);

        i3 = 0;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label04:
        if i3 >= i0 goto label05;

        r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (androidx.compose.runtime.ControlledComposition) r4;

        interfaceinvoke r5.<androidx.compose.runtime.ControlledComposition: void recordModificationsOf(java.util.Set)>(r2);

        i3 = i3 + 1;

        goto label04;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $r14 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r0);

        interfaceinvoke $r14.<java.util.List: void clear()>();

     label07:
        $r17 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r0);

        i4 = 0;

        i5 = interfaceinvoke $r17.<java.util.List: int size()>();

     label08:
        if i4 >= i5 goto label09;

        r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i4);

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r18);

        i4 = i4 + 1;

        goto label08;

     label09:
        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r0);

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r0);

        if $r9 == null goto label10;

        r19 = new java.lang.IllegalStateException;

        $r11 = "called outside of runRecomposeAndApplyChanges";

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        r20 = (java.lang.Throwable) r19;

        throw r20;

     label10:
        return;
    }

    private final void registerRunnerJob(kotlinx.coroutines.Job)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlinx.coroutines.Job r1, $r11;
        java.lang.Object r2, r3, $r7;
        java.lang.Throwable r4, $r5, $r18, r20, r23, r24;
        kotlinx.coroutines.flow.MutableStateFlow $r6;
        androidx.compose.runtime.Recomposer$State $r8, $r10;
        java.lang.Enum $r9;
        int $i0;
        java.lang.String $r13, $r14, $r16, $r17;
        java.lang.IllegalStateException r21, r22;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: kotlinx.coroutines.Job;

        r2 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.lang.Throwable closeCause>;

        if $r5 == null goto label2;

        r4 = $r5;

        throw r4;

     label2:
        $r6 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r10 = (androidx.compose.runtime.Recomposer$State) $r7;

        $r8 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        $r9 = (java.lang.Enum) $r8;

        $i0 = virtualinvoke $r10.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r9);

        if $i0 > 0 goto label3;

        r21 = new java.lang.IllegalStateException;

        $r16 = "Recomposer shut down";

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        r23 = (java.lang.Throwable) r21;

        throw r23;

     label3:
        $r11 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob>;

        if $r11 == null goto label4;

        r22 = new java.lang.IllegalStateException;

        $r13 = "Recomposer already running";

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        r24 = (java.lang.Throwable) r22;

        throw r24;

     label4:
        r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob> = r1;

        specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

     label5:
        exitmonitor r3;

        goto label8;

     label6:
        $r18 := @caughtexception;

        r20 = $r18;

     label7:
        exitmonitor r3;

        throw r20;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final java.lang.Object runRecomposeAndApplyChanges(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.Continuation $r1;
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2 $r2;
        kotlin.jvm.functions.Function3 $r3;
        java.lang.Object $r4, $r5;
        kotlin.Unit $r6;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        specialinvoke $r2.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void <init>(androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        $r4 = specialinvoke r0.<androidx.compose.runtime.Recomposer: java.lang.Object recompositionRunner(kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>($r3, $r1);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        return $r4;

     label1:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;
    }

    private final void processCompositionError(java.lang.Exception, androidx.compose.runtime.ControlledComposition, boolean)
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Exception r1;
        androidx.compose.runtime.ControlledComposition r2;
        boolean z0, $z4, $z5, $z6;
        java.lang.Object r3, r4, $r9;
        java.util.List r5, r6, r7, $r11, $r12, $r13, $r14, $r18, $r23;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.lang.Boolean $r10;
        java.util.Map $r15, $r16;
        java.util.Collection $r19, $r20;
        java.lang.Throwable $r22, r25, r28;
        androidx.compose.runtime.Recomposer$RecomposerErrorState r26;
        java.util.ArrayList r27;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: java.lang.Exception;

        r2 := @parameter1: androidx.compose.runtime.ControlledComposition;

        z0 := @parameter2: boolean;

        $r8 = <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference _hotReloadEnabled>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "_hotReloadEnabled.get()");

        $r10 = (java.lang.Boolean) $r9;

        $z4 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z4 == 0 goto label09;

        $z5 = r1 instanceof androidx.compose.runtime.ComposeRuntimeError;

        if $z5 != 0 goto label09;

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label01:
        $r11 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        $r12 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        interfaceinvoke $r12.<java.util.List: void clear()>();

        $r13 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        interfaceinvoke $r13.<java.util.List: void clear()>();

        $r14 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        interfaceinvoke $r14.<java.util.List: void clear()>();

        $r15 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        interfaceinvoke $r15.<java.util.Map: void clear()>();

        $r16 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>;

        interfaceinvoke $r16.<java.util.Map: void clear()>();

        r26 = new androidx.compose.runtime.Recomposer$RecomposerErrorState;

        specialinvoke r26.<androidx.compose.runtime.Recomposer$RecomposerErrorState: void <init>(boolean,java.lang.Exception)>(z0, r1);

        r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState> = r26;

        if r2 == null goto label04;

        $r23 = r0.<androidx.compose.runtime.Recomposer: java.util.List failedCompositions>;

        if $r23 != null goto label02;

        r27 = new java.util.ArrayList;

        specialinvoke r27.<java.util.ArrayList: void <init>()>();

        r5 = (java.util.List) r27;

        r6 = r5;

        r0.<androidx.compose.runtime.Recomposer: java.util.List failedCompositions> = r6;

        $r23 = r5;

     label02:
        r7 = $r23;

        $z6 = interfaceinvoke r7.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z6 != 0 goto label03;

        $r20 = (java.util.Collection) r7;

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>(r2);

     label03:
        $r18 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        $r19 = (java.util.Collection) $r18;

        interfaceinvoke $r19.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

     label04:
        specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

     label05:
        exitmonitor r4;

        goto label08;

     label06:
        $r22 := @caughtexception;

        r25 = $r22;

     label07:
        exitmonitor r4;

        throw r25;

     label08:
        goto label10;

     label09:
        r28 = (java.lang.Throwable) r1;

        throw r28;

     label10:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    static void processCompositionError$default(androidx.compose.runtime.Recomposer, java.lang.Exception, androidx.compose.runtime.ControlledComposition, boolean, int, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Exception r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        androidx.compose.runtime.ControlledComposition r3;
        boolean z0;

        r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: java.lang.Exception;

        r3 := @parameter2: androidx.compose.runtime.ControlledComposition;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        z0 = 0;

     label2:
        specialinvoke r0.<androidx.compose.runtime.Recomposer: void processCompositionError(java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean)>(r1, r3, z0);

        return;
    }

    private final androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.Recomposer$RecomposerErrorState r1, r4;
        java.lang.Object r2, r3;
        java.lang.Throwable $r6;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r2 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r3 = r2;

        entermonitor r3;

     label1:
        r4 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState>;

        if r4 == null goto label2;

        r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState> = null;

        specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r3;

        throw $r6;

     label5:
        r1 = r4;

        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void retryFailedCompositions()
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Object r1, r2, $r6;
        java.util.List r3, $r5;
        androidx.compose.runtime.ControlledComposition r4;
        boolean $z1, $z3, $z4;
        androidx.compose.runtime.CompositionImpl $r7;
        kotlin.jvm.functions.Function2 $r8;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r9;
        java.lang.Throwable $r10;
        java.util.Collection $r11;
        kotlin.Unit $r12;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r1;

        entermonitor r2;

     label01:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List failedCompositions>;

        if $r5 != null goto label03;

     label02:
        exitmonitor r2;

        return;

     label03:
        r3 = $r5;

     label04:
        $r11 = (java.util.Collection) r3;

        $z3 = interfaceinvoke $r11.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        if $z4 == 0 goto label07;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object removeLast(java.util.List)>(r3);

        r4 = (androidx.compose.runtime.ControlledComposition) $r6;

        $z1 = r4 instanceof androidx.compose.runtime.CompositionImpl;

        if $z1 == 0 goto label04;

        interfaceinvoke r4.<androidx.compose.runtime.ControlledComposition: void invalidateAll()>();

        $r7 = (androidx.compose.runtime.CompositionImpl) r4;

        $r8 = virtualinvoke $r7.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 getComposable()>();

        interfaceinvoke r4.<androidx.compose.runtime.ControlledComposition: void setContent(kotlin.jvm.functions.Function2)>($r8);

        $r9 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState>;

        if $r9 == null goto label04;

        goto label07;

     label07:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        exitmonitor r2;

        goto label11;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r2;

        throw $r10;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final java.lang.Object runRecomposeConcurrentlyAndApplyChanges(kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.CoroutineContext r1;
        kotlin.coroutines.Continuation $r2;
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2 $r3;
        kotlin.jvm.functions.Function3 $r4;
        java.lang.Object $r5, $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: void <init>(kotlin.coroutines.CoroutineContext,androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>(r1, r0, null);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = specialinvoke r0.<androidx.compose.runtime.Recomposer: java.lang.Object recompositionRunner(kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>($r4, $r2);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        return $r5;

     label1:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

    private final java.lang.Object runFrameLoop(androidx.compose.runtime.MonotonicFrameClock, androidx.compose.runtime.ProduceFrameSignal, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r33, r34;
        java.lang.Object $r1, r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0;
        kotlin.jvm.functions.Function1 $r12;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.compose.runtime.Recomposer r22;
        androidx.compose.runtime.MonotonicFrameClock r23;
        androidx.compose.runtime.ProduceFrameSignal r24;
        androidx.compose.runtime.Recomposer$runFrameLoop$1 $r25, r28;
        java.util.List r26, r27;
        java.util.ArrayList r29, r30;
        androidx.compose.runtime.Recomposer$runFrameLoop$2 r31;
        java.lang.IllegalStateException r32;
        java.lang.Throwable r35;

        r22 := @this: androidx.compose.runtime.Recomposer;

        r23 := @parameter0: androidx.compose.runtime.MonotonicFrameClock;

        r24 := @parameter1: androidx.compose.runtime.ProduceFrameSignal;

        r0 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.compose.runtime.Recomposer$runFrameLoop$1;

        if $z0 == 0 goto label1;

        $r25 = (androidx.compose.runtime.Recomposer$runFrameLoop$1) r0;

        $i0 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label>;

        $i3 = $i2 - -2147483648;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label> = $i3;

        goto label2;

     label1:
        r28 = new androidx.compose.runtime.Recomposer$runFrameLoop$1;

        specialinvoke r28.<androidx.compose.runtime.Recomposer$runFrameLoop$1: void <init>(androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>(r22, r0);

        $r25 = r28;

     label2:
        $r1 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label5;
            case 2: goto label7;
            default: goto label9;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r29 = new java.util.ArrayList;

        specialinvoke r29.<java.util.ArrayList: void <init>()>();

        r26 = (java.util.List) r29;

        r30 = new java.util.ArrayList;

        specialinvoke r30.<java.util.ArrayList: void <init>()>();

        r27 = (java.util.List) r30;

     label4:
        $r9 = r22.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$0> = r22;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$1> = r23;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$2> = r24;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$3> = r26;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$4> = r27;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label> = 1;

        r33 = (kotlin.coroutines.Continuation) $r25;

        $r10 = virtualinvoke r24.<androidx.compose.runtime.ProduceFrameSignal: java.lang.Object awaitFrameRequest(java.lang.Object,kotlin.coroutines.Continuation)>($r9, r33);

        if $r10 != r2 goto label6;

        return r2;

     label5:
        $r14 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$4>;

        r27 = (java.util.List) $r14;

        $r15 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$3>;

        r26 = (java.util.List) $r15;

        $r16 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$2>;

        r24 = (androidx.compose.runtime.ProduceFrameSignal) $r16;

        $r17 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$1>;

        r23 = (androidx.compose.runtime.MonotonicFrameClock) $r17;

        $r18 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$0>;

        r22 = (androidx.compose.runtime.Recomposer) $r18;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label6:
        r31 = new androidx.compose.runtime.Recomposer$runFrameLoop$2;

        specialinvoke r31.<androidx.compose.runtime.Recomposer$runFrameLoop$2: void <init>(androidx.compose.runtime.Recomposer,java.util.List,java.util.List,androidx.compose.runtime.ProduceFrameSignal)>(r22, r26, r27, r24);

        $r12 = (kotlin.jvm.functions.Function1) r31;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$0> = r22;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$1> = r23;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$2> = r24;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$3> = r26;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$4> = r27;

        $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label> = 2;

        r34 = (kotlin.coroutines.Continuation) $r25;

        $r13 = interfaceinvoke r23.<androidx.compose.runtime.MonotonicFrameClock: java.lang.Object withFrameNanos(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r12, r34);

        if $r13 != r2 goto label8;

        return r2;

     label7:
        $r4 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$4>;

        r27 = (java.util.List) $r4;

        $r5 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$3>;

        r26 = (java.util.List) $r5;

        $r6 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$2>;

        r24 = (androidx.compose.runtime.ProduceFrameSignal) $r6;

        $r7 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$1>;

        r23 = (androidx.compose.runtime.MonotonicFrameClock) $r7;

        $r8 = $r25.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$0>;

        r22 = (androidx.compose.runtime.Recomposer) $r8;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label8:
        goto label4;

     label9:
        r32 = new java.lang.IllegalStateException;

        specialinvoke r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r35 = (java.lang.Throwable) r32;

        throw r35;
    }

    private final boolean getHasSchedulingWork()
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Object r1, r2;
        java.util.List $r3, $r5;
        java.util.Collection $r4, $r6;
        boolean $z1, $z2, $z3, $z5, $z6, $z7;
        androidx.compose.runtime.BroadcastFrameClock $r7;
        java.lang.Throwable $r8;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r1;

        entermonitor r2;

     label01:
        $r3 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        $r4 = (java.util.Collection) $r3;

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        if $z5 != 0 goto label06;

        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r6 = (java.util.Collection) $r5;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        if $z6 != 0 goto label06;

        $r7 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z3 = virtualinvoke $r7.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z3 == 0 goto label07;

     label06:
        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        exitmonitor r2;

        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r2;

        throw $r8;

     label11:
        return $z7;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final java.lang.Object awaitWorkAvailable(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.Continuation $r1, r2, $r9, $r16;
        kotlinx.coroutines.CancellableContinuationImpl r3, $r8;
        kotlinx.coroutines.CancellableContinuation r4;
        java.lang.Object r5, r6, $r10, $r11, $r12, $r17;
        boolean $z5, $z6;
        kotlin.Unit $r7, $r13, $r15, r19;
        kotlin.Result$Companion $r14;
        java.lang.Throwable $r18, r20;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z5 = specialinvoke r0.<androidx.compose.runtime.Recomposer: boolean getHasSchedulingWork()>();

        if $z5 != 0 goto label10;

        r2 = $r1;

        $r8 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>(r2);

        specialinvoke $r8.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r9, 1);

        r3 = $r8;

        virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r4 = (kotlinx.coroutines.CancellableContinuation) r3;

        r5 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r0);

        r6 = r5;

        entermonitor r6;

     label01:
        $z6 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getHasSchedulingWork(androidx.compose.runtime.Recomposer)>(r0);

        if $z6 == 0 goto label02;

        $r16 = (kotlin.coroutines.Continuation) r4;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r17 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r16.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r17);

        goto label03;

     label02:
        staticinvoke <androidx.compose.runtime.Recomposer: void access$setWorkContinuation$p(androidx.compose.runtime.Recomposer,kotlinx.coroutines.CancellableContinuation)>(r0, r4);

     label03:
        r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        exitmonitor r6;

        goto label07;

     label05:
        $r18 := @caughtexception;

        r20 = $r18;

     label06:
        exitmonitor r6;

        throw r20;

     label07:
        $r10 = virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r10 != $r11 goto label08;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label08:
        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r10 != $r12 goto label09;

        return $r10;

     label09:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label10:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private final java.lang.Object recompositionRunner(kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.jvm.functions.Function3 r1;
        kotlin.coroutines.Continuation $r2;
        androidx.compose.runtime.MonotonicFrameClock r3;
        kotlin.coroutines.CoroutineContext $r4, $r7;
        androidx.compose.runtime.BroadcastFrameClock $r5;
        androidx.compose.runtime.Recomposer$recompositionRunner$2 $r6;
        kotlin.jvm.functions.Function2 $r8;
        java.lang.Object $r9, $r10;
        kotlin.Unit $r11;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        r3 = staticinvoke <androidx.compose.runtime.MonotonicFrameClockKt: androidx.compose.runtime.MonotonicFrameClock getMonotonicFrameClock(kotlin.coroutines.CoroutineContext)>($r4);

        $r5 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $r7 = (kotlin.coroutines.CoroutineContext) $r5;

        $r6 = new androidx.compose.runtime.Recomposer$recompositionRunner$2;

        specialinvoke $r6.<androidx.compose.runtime.Recomposer$recompositionRunner$2: void <init>(androidx.compose.runtime.Recomposer,kotlin.jvm.functions.Function3,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>(r0, r1, r3, null);

        $r8 = (kotlin.jvm.functions.Function2) $r6;

        $r9 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r7, $r8, $r2);

        $r10 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r9 != $r10 goto label1;

        return $r9;

     label1:
        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r11;
    }

    public final void cancel()
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Object r1, r2, $r4;
        kotlinx.coroutines.flow.MutableStateFlow $r3, $r11;
        androidx.compose.runtime.Recomposer$State $r5, $r7, $r10;
        java.lang.Enum $r6;
        int $i0;
        kotlinx.coroutines.CompletableJob $r8;
        kotlinx.coroutines.Job $r9;
        java.lang.Throwable $r12;
        kotlin.Unit $r13;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r4 = interfaceinvoke $r3.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r7 = (androidx.compose.runtime.Recomposer$State) $r4;

        $r5 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>;

        $r6 = (java.lang.Enum) $r5;

        $i0 = virtualinvoke $r7.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r6);

        if $i0 < 0 goto label2;

        $r11 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r10 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        interfaceinvoke $r11.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r10);

     label2:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r2;

        goto label6;

     label4:
        $r12 := @caughtexception;

     label5:
        exitmonitor r2;

        throw $r12;

     label6:
        $r8 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob>;

        $r9 = (kotlinx.coroutines.Job) $r8;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r9, null, 1, null);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void close()
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Object r1, r2;
        kotlinx.coroutines.CompletableJob $r3;
        boolean $z1;
        kotlin.Unit $r4;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r3 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CompletableJob effectJob>;

        $z1 = interfaceinvoke $r3.<kotlinx.coroutines.CompletableJob: boolean complete()>();

        if $z1 == 0 goto label1;

        r1 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r1;

        entermonitor r2;

        r0.<androidx.compose.runtime.Recomposer: boolean isClosed> = 1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        exitmonitor r2;

        goto label1;

     label1:
        return;
    }

    public final java.lang.Object join(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.StateFlow $r2;
        androidx.compose.runtime.Recomposer$join$2 $r3;
        kotlinx.coroutines.flow.Flow $r4;
        kotlin.jvm.functions.Function2 $r5;
        java.lang.Object $r6, $r7;
        kotlin.Unit $r8;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.StateFlow getCurrentState()>();

        $r4 = (kotlinx.coroutines.flow.Flow) $r2;

        $r3 = new androidx.compose.runtime.Recomposer$join$2;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$join$2: void <init>(kotlin.coroutines.Continuation)>(null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        $r6 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object first(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r5, $r1);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label1;

        return $r6;

     label1:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;
    }

    public void composeInitial$runtime_release(androidx.compose.runtime.ControlledComposition, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.Recomposer r0, r23;
        androidx.compose.runtime.ControlledComposition r1;
        kotlin.jvm.functions.Function2 r2;
        boolean z0, $z1;
        androidx.compose.runtime.snapshots.Snapshot r3, r25;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r4, $r12, $r16;
        kotlin.jvm.functions.Function1 $r5, $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r7;
        java.lang.Object $r8, r30;
        androidx.compose.runtime.Recomposer$State $r9, $r11;
        java.lang.Enum $r10;
        int $i0;
        java.util.List $r13, $r14;
        java.util.Collection $r15;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22, r27, r28, r29, r33, r34, r35;
        androidx.compose.runtime.snapshots.MutableSnapshot r24;
        kotlin.Unit r26, r32;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        z0 = interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: boolean isComposing()>();

     label01:
        r23 = r0;

        $r4 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r5 = specialinvoke r23.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 readObserverOf(androidx.compose.runtime.ControlledComposition)>(r1);

        $r6 = specialinvoke r23.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 writeObserverOf(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r1, null);

        r24 = virtualinvoke $r4.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.MutableSnapshot takeMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r5, $r6);

     label02:
        r25 = (androidx.compose.runtime.snapshots.Snapshot) r24;

        r3 = virtualinvoke r25.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label03:
        interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: void composeContent(kotlin.jvm.functions.Function2)>(r2);

        r26 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        virtualinvoke r25.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r3);

        goto label07;

     label05:
        $r19 := @caughtexception;

        r27 = $r19;

     label06:
        virtualinvoke r25.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r3);

        throw r27;

     label07:
        specialinvoke r23.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r24);

        goto label11;

     label08:
        $r21 := @caughtexception;

        r28 = $r21;

     label09:
        specialinvoke r23.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r24);

        throw r28;

     label10:
        $r22 := @caughtexception;

        r29 = $r22;

        specialinvoke r0.<androidx.compose.runtime.Recomposer: void processCompositionError(java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean)>(r29, r1, 1);

        return;

     label11:
        if z0 != 0 goto label12;

        $r16 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r16.<androidx.compose.runtime.snapshots.Snapshot$Companion: void notifyObjectsInitialized()>();

     label12:
        r30 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        entermonitor r30;

     label13:
        $r7 = r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        $r8 = interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r11 = (androidx.compose.runtime.Recomposer$State) $r8;

        $r9 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        $r10 = (java.lang.Enum) $r9;

        $i0 = virtualinvoke $r11.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r10);

        if $i0 <= 0 goto label14;

        $r13 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        $z1 = interfaceinvoke $r13.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label14;

        $r14 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        $r15 = (java.util.Collection) $r14;

        interfaceinvoke $r15.<java.util.Collection: boolean add(java.lang.Object)>(r1);

     label14:
        r32 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label15:
        exitmonitor r30;

        goto label18;

     label16:
        $r18 := @caughtexception;

        r33 = $r18;

     label17:
        exitmonitor r30;

        throw r33;

     label18:
        specialinvoke r0.<androidx.compose.runtime.Recomposer: void performInitialMovableContentInserts(androidx.compose.runtime.ControlledComposition)>(r1);

     label19:
        goto label21;

     label20:
        $r20 := @caughtexception;

        r34 = $r20;

        specialinvoke r0.<androidx.compose.runtime.Recomposer: void processCompositionError(java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean)>(r34, r1, 1);

        return;

     label21:
        interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: void applyChanges()>();

        interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: void applyLateChanges()>();

     label22:
        goto label24;

     label23:
        $r17 := @caughtexception;

        r35 = $r17;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r0, r35, null, 0, 6, null);

        return;

     label24:
        if z0 != 0 goto label25;

        $r12 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r12.<androidx.compose.runtime.snapshots.Snapshot$Companion: void notifyObjectsInitialized()>();

     label25:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Exception from label01 to label10 with label10;
        catch java.lang.Throwable from label13 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    private final void performInitialMovableContentInserts(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1, $r10;
        java.lang.Object r2, r4, r5, r12;
        java.util.List $r3, r15;
        int i0, i1;
        androidx.compose.runtime.MovableContentStateReference r6;
        java.util.ArrayList $r7;
        java.util.Collection $r8;
        boolean $z6, $z7, $z8, $z9;
        java.lang.Throwable $r11, r14;
        kotlin.Unit r13;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r12 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r12;

        entermonitor r2;

     label01:
        $r3 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        i1 = 0;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label02:
        if i1 >= i0 goto label04;

        r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = r4;

        r6 = (androidx.compose.runtime.MovableContentStateReference) r5;

        $r10 = virtualinvoke r6.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, r1);

        if $z7 == 0 goto label03;

        $z8 = 1;

        goto label05;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        $z8 = 0;

     label05:
        if $z8 != 0 goto label07;

     label06:
        exitmonitor r2;

        return;

     label07:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        exitmonitor r2;

        goto label11;

     label09:
        $r11 := @caughtexception;

        r14 = $r11;

     label10:
        exitmonitor r2;

        throw r14;

     label11:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r15 = (java.util.List) $r7;

        staticinvoke <androidx.compose.runtime.Recomposer: void performInitialMovableContentInserts$fillToInsert(java.util.List,androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition)>(r15, r0, r1);

     label12:
        $r8 = (java.util.Collection) r15;

        $z6 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z6 != 0 goto label13;

        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        if $z9 == 0 goto label15;

        specialinvoke r0.<androidx.compose.runtime.Recomposer: java.util.List performInsertValues(java.util.List,androidx.compose.runtime.collection.IdentityArraySet)>(r15, null);

        staticinvoke <androidx.compose.runtime.Recomposer: void performInitialMovableContentInserts$fillToInsert(java.util.List,androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition)>(r15, r0, r1);

        goto label12;

     label15:
        return;

        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final androidx.compose.runtime.ControlledComposition performRecompose(androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer r0, r3;
        androidx.compose.runtime.ControlledComposition r1, $r16;
        androidx.compose.runtime.collection.IdentityArraySet r2;
        androidx.compose.runtime.snapshots.MutableSnapshot r4;
        androidx.compose.runtime.snapshots.Snapshot r5, r13;
        boolean $z3, $z4, $z5, $z6, z7, z8;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r6;
        kotlin.jvm.functions.Function1 $r7, $r8;
        androidx.compose.runtime.Recomposer$performRecompose$1$1 $r9;
        kotlin.jvm.functions.Function0 $r10;
        java.lang.Throwable $r11, $r12, r14, r15;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: androidx.compose.runtime.collection.IdentityArraySet;

        $z3 = interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: boolean isComposing()>();

        if $z3 != 0 goto label01;

        $z4 = interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: boolean isDisposed()>();

        if $z4 == 0 goto label02;

     label01:
        return null;

     label02:
        r3 = r0;

        $r6 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r7 = specialinvoke r3.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 readObserverOf(androidx.compose.runtime.ControlledComposition)>(r1);

        $r8 = specialinvoke r3.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 writeObserverOf(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r1, r2);

        r4 = virtualinvoke $r6.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.MutableSnapshot takeMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r7, $r8);

     label03:
        r13 = (androidx.compose.runtime.snapshots.Snapshot) r4;

        r5 = virtualinvoke r13.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label04:
        if r2 == null goto label06;

        $z5 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: boolean isNotEmpty()>();

        if $z5 != 1 goto label05;

        $z6 = 1;

        goto label07;

     label05:
        $z6 = 0;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        if $z6 == 0 goto label08;

        $r9 = new androidx.compose.runtime.Recomposer$performRecompose$1$1;

        specialinvoke $r9.<androidx.compose.runtime.Recomposer$performRecompose$1$1: void <init>(androidx.compose.runtime.collection.IdentityArraySet,androidx.compose.runtime.ControlledComposition)>(r2, r1);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: void prepareCompose(kotlin.jvm.functions.Function0)>($r10);

     label08:
        z7 = interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: boolean recompose()>();

     label09:
        virtualinvoke r13.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        goto label12;

     label10:
        $r11 := @caughtexception;

        r14 = $r11;

     label11:
        virtualinvoke r13.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        throw r14;

     label12:
        z8 = z7;

     label13:
        specialinvoke r3.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r4);

        goto label16;

     label14:
        $r12 := @caughtexception;

        r15 = $r12;

     label15:
        specialinvoke r3.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r4);

        throw r15;

     label16:
        if z8 == 0 goto label17;

        $r16 = r1;

        goto label18;

     label17:
        $r16 = null;

     label18:
        return $r16;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private final java.util.List performInsertValues(java.util.List, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.List r1, r10, $r15, $r47, r53, r54;
        androidx.compose.runtime.collection.IdentityArraySet r2;
        java.util.Map r3, $r23, $r39;
        java.util.ArrayList r4, $r22, $r27, r43;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.Object r6, r7, $r16, $r17, $r18, $r25, r35, r36, r40, $r42, $r52;
        androidx.compose.runtime.MovableContentStateReference r8, r37;
        java.util.Collection r9;
        java.util.HashMap $r11, r33;
        java.util.Set $r12, $r13;
        boolean $z3, $z4, $z13, z14, z15, z16, z17;
        java.lang.Iterable $r14;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r19;
        kotlin.jvm.functions.Function1 $r20, $r21;
        androidx.compose.runtime.MovableContent $r24;
        kotlin.Pair $r26;
        java.lang.Throwable $r29, $r30, $r31, r55, r57, r59;
        androidx.compose.runtime.ControlledComposition r38, r46;
        java.util.Iterator $r44;
        java.util.Map$Entry $r45;
        androidx.compose.runtime.snapshots.MutableSnapshot r49;
        androidx.compose.runtime.snapshots.Snapshot r50, $r51;
        kotlin.Unit r56, r58;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.compose.runtime.collection.IdentityArraySet;

        $r11 = new java.util.HashMap;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.HashMap: void <init>(int)>($i1);

        r33 = $r11;

        i3 = 0;

        i4 = interfaceinvoke r1.<java.util.List: int size()>();

     label01:
        if i3 >= i4 goto label04;

        r35 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r36 = r35;

        r37 = (androidx.compose.runtime.MovableContentStateReference) r36;

        r38 = virtualinvoke r37.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $r39 = (java.util.Map) r33;

        r40 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r38);

        if r40 != null goto label02;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r38, $r27);

        $r42 = $r27;

        goto label03;

     label02:
        $r42 = r40;

     label03:
        r43 = (java.util.ArrayList) $r42;

        virtualinvoke r43.<java.util.ArrayList: boolean add(java.lang.Object)>(r36);

        i3 = i3 + 1;

        goto label01;

     label04:
        r3 = (java.util.Map) r33;

        $r12 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r44 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label24;

        $r16 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        $r45 = (java.util.Map$Entry) $r16;

        $r17 = interfaceinvoke $r45.<java.util.Map$Entry: java.lang.Object getKey()>();

        r46 = (androidx.compose.runtime.ControlledComposition) $r17;

        $r18 = interfaceinvoke $r45.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r47 = (java.util.List) $r18;

        $z4 = interfaceinvoke r46.<androidx.compose.runtime.ControlledComposition: boolean isComposing()>();

        if $z4 != 0 goto label06;

        $z13 = 1;

        goto label07;

     label06:
        $z13 = 0;

     label07:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z13);

        z14 = 0;

        $r19 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r20 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 readObserverOf(androidx.compose.runtime.ControlledComposition)>(r46);

        $r21 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 writeObserverOf(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r46, r2);

        r49 = virtualinvoke $r19.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.MutableSnapshot takeMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r20, $r21);

     label08:
        r50 = (androidx.compose.runtime.snapshots.Snapshot) r49;

        z15 = 0;

        $r51 = virtualinvoke r50.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label09:
        z16 = 0;

        z17 = 0;

        $r52 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        entermonitor $r52;

     label10:
        r53 = $r47;

        $r22 = new java.util.ArrayList;

        $i2 = interfaceinvoke r53.<java.util.List: int size()>();

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>($i2);

        r4 = $r22;

        i5 = 0;

        i0 = interfaceinvoke r53.<java.util.List: int size()>();

     label11:
        if i5 >= i0 goto label12;

        r6 = interfaceinvoke r53.<java.util.List: java.lang.Object get(int)>(i5);

        r7 = r6;

        r8 = (androidx.compose.runtime.MovableContentStateReference) r7;

        r9 = (java.util.Collection) r4;

        $r23 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        $r24 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.MovableContent getContent$runtime_release()>();

        $r25 = staticinvoke <androidx.compose.runtime.RecomposerKt: java.lang.Object removeLastMultiValue(java.util.Map,java.lang.Object)>($r23, $r24);

        $r26 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r8, $r25);

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r26);

        i5 = i5 + 1;

        goto label11;

     label12:
        r54 = (java.util.List) r4;

     label13:
        exitmonitor $r52;

        goto label16;

     label14:
        $r31 := @caughtexception;

        r55 = $r31;

     label15:
        exitmonitor $r52;

        throw r55;

     label16:
        r10 = r54;

        interfaceinvoke r46.<androidx.compose.runtime.ControlledComposition: void insertMovableContent(java.util.List)>(r10);

        r56 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        virtualinvoke r50.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>($r51);

        goto label20;

     label18:
        $r29 := @caughtexception;

        r57 = $r29;

     label19:
        virtualinvoke r50.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>($r51);

        throw r57;

     label20:
        r58 = r56;

     label21:
        specialinvoke r0.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r49);

        goto label05;

     label22:
        $r30 := @caughtexception;

        r59 = $r30;

     label23:
        specialinvoke r0.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r49);

        throw r59;

     label24:
        $r13 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r14 = (java.lang.Iterable) $r13;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r14);

        return $r15;

        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label09 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label08 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private final void discardUnusedValues()
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.List r1, r6, r23, $r27, r30;
        int i0, $i1, i2, i3, $i4;
        java.lang.Object r2, r3, $r8, $r9, $r18, r21, r22, r31;
        androidx.compose.runtime.MovableContentStateReference r4, r33;
        java.util.Collection r5, $r12;
        java.util.Map $r7, $r11, $r14, $r16, $r17;
        boolean $z3, $z7;
        androidx.compose.runtime.ControlledComposition $r10;
        java.lang.Iterable $r13;
        java.util.ArrayList $r15, r25;
        kotlin.Pair $r19, $r32;
        java.lang.Throwable $r20;
        androidx.compose.runtime.MovableContentState $r34;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r21 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r22 = r21;

        entermonitor r22;

     label01:
        $r7 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        $z3 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        if $z3 != 0 goto label02;

        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        if $z7 == 0 goto label06;

        $r11 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $r13 = (java.lang.Iterable) $r12;

        r23 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List flatten(java.lang.Iterable)>($r13);

        $r14 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        interfaceinvoke $r14.<java.util.Map: void clear()>();

        $r15 = new java.util.ArrayList;

        $i1 = interfaceinvoke r23.<java.util.List: int size()>();

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i1);

        r25 = $r15;

        i2 = 0;

        i0 = interfaceinvoke r23.<java.util.List: int size()>();

     label04:
        if i2 >= i0 goto label05;

        r2 = interfaceinvoke r23.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = r2;

        r4 = (androidx.compose.runtime.MovableContentStateReference) r3;

        r5 = (java.util.Collection) r25;

        $r17 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r19 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r4, $r18);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        i2 = i2 + 1;

        goto label04;

     label05:
        r6 = (java.util.List) r25;

        $r16 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>;

        interfaceinvoke $r16.<java.util.Map: void clear()>();

        $r27 = r6;

        goto label07;

     label06:
        $r27 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label07:
        exitmonitor r22;

        goto label10;

     label08:
        $r20 := @caughtexception;

     label09:
        exitmonitor r22;

        throw $r20;

     label10:
        r1 = $r27;

        r30 = r1;

        i3 = 0;

        $i4 = interfaceinvoke r30.<java.util.List: int size()>();

     label11:
        if i3 >= $i4 goto label13;

        r31 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>(i3);

        $r32 = (kotlin.Pair) r31;

        $r8 = virtualinvoke $r32.<kotlin.Pair: java.lang.Object component1()>();

        r33 = (androidx.compose.runtime.MovableContentStateReference) $r8;

        $r9 = virtualinvoke $r32.<kotlin.Pair: java.lang.Object component2()>();

        $r34 = (androidx.compose.runtime.MovableContentState) $r9;

        if $r34 == null goto label12;

        $r10 = virtualinvoke r33.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        interfaceinvoke $r10.<androidx.compose.runtime.ControlledComposition: void disposeUnusedMovableContent(androidx.compose.runtime.MovableContentState)>($r34);

     label12:
        i3 = i3 + 1;

        goto label11;

     label13:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private final kotlin.jvm.functions.Function1 readObserverOf(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;
        androidx.compose.runtime.Recomposer$readObserverOf$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        $r2 = new androidx.compose.runtime.Recomposer$readObserverOf$1;

        specialinvoke $r2.<androidx.compose.runtime.Recomposer$readObserverOf$1: void <init>(androidx.compose.runtime.ControlledComposition)>(r1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        return $r3;
    }

    private final kotlin.jvm.functions.Function1 writeObserverOf(androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;
        androidx.compose.runtime.collection.IdentityArraySet r2;
        androidx.compose.runtime.Recomposer$writeObserverOf$1 $r3;
        kotlin.jvm.functions.Function1 $r4;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: androidx.compose.runtime.collection.IdentityArraySet;

        $r3 = new androidx.compose.runtime.Recomposer$writeObserverOf$1;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$writeObserverOf$1: void <init>(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r1, r2);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        return $r4;
    }

    private final java.lang.Object composing(androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.collection.IdentityArraySet, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;
        androidx.compose.runtime.collection.IdentityArraySet r2;
        kotlin.jvm.functions.Function0 r3;
        androidx.compose.runtime.snapshots.MutableSnapshot r4;
        androidx.compose.runtime.snapshots.Snapshot r5, r11;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r6;
        kotlin.jvm.functions.Function1 $r7, $r8;
        java.lang.Throwable $r9, $r10, r13, r15;
        java.lang.Object r12, r14;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: androidx.compose.runtime.collection.IdentityArraySet;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        $r6 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r7 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 readObserverOf(androidx.compose.runtime.ControlledComposition)>(r1);

        $r8 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlin.jvm.functions.Function1 writeObserverOf(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r1, r2);

        r4 = virtualinvoke $r6.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.MutableSnapshot takeMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r7, $r8);

     label1:
        r11 = (androidx.compose.runtime.snapshots.Snapshot) r4;

        r5 = virtualinvoke r11.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label2:
        r12 = interfaceinvoke r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r11.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label6;

     label4:
        $r10 := @caughtexception;

        r13 = $r10;

     label5:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r11.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r5);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r13;

     label6:
        r14 = r12;

     label7:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        specialinvoke r0.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r14;

     label8:
        $r9 := @caughtexception;

        r15 = $r9;

     label9:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        specialinvoke r0.<androidx.compose.runtime.Recomposer: void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)>(r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r15;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private final void applyAndCheck(androidx.compose.runtime.snapshots.MutableSnapshot)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.snapshots.MutableSnapshot r1;
        boolean $z0;
        java.lang.String $r3, $r4;
        java.lang.Throwable $r5, r7, r9;
        androidx.compose.runtime.snapshots.SnapshotApplyResult r6;
        java.lang.IllegalStateException r8;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.snapshots.MutableSnapshot;

     label1:
        r6 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotApplyResult apply()>();

        $z0 = r6 instanceof androidx.compose.runtime.snapshots.SnapshotApplyResult$Failure;

        if $z0 == 0 goto label2;

        r8 = new java.lang.IllegalStateException;

        $r3 = "Unsupported concurrent change during composition. A state object was modified by composition as well as being modified outside composition.";

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label2:
        virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void dispose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void dispose()>();

        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean getHasPendingWork()
    {
        androidx.compose.runtime.Recomposer r0;
        java.lang.Object r1, r2;
        java.util.List $r3, $r5, $r7;
        java.util.Collection $r4, $r6, $r8;
        boolean $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9;
        int $i0;
        androidx.compose.runtime.BroadcastFrameClock $r9;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r2 = r1;

        entermonitor r2;

     label01:
        $r3 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        $r4 = (java.util.Collection) $r3;

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        if $z6 != 0 goto label08;

        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r6 = (java.util.Collection) $r5;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        if $z7 != 0 goto label08;

        $i0 = r0.<androidx.compose.runtime.Recomposer: int concurrentCompositionsOutstanding>;

        if $i0 > 0 goto label08;

        $r7 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        $r8 = (java.util.Collection) $r7;

        $z3 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        if $z8 != 0 goto label08;

        $r9 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z4 = virtualinvoke $r9.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z4 == 0 goto label09;

     label08:
        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        exitmonitor r2;

        goto label13;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r2;

        throw $r10;

     label13:
        return $z9;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private final boolean getHasFrameWorkLocked()
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.List $r1;
        java.util.Collection $r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.runtime.BroadcastFrameClock $r3;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r3 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z1 = virtualinvoke $r3.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z1 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private final boolean getHasConcurrentFrameWorkLocked()
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.List $r1;
        java.util.Collection $r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.runtime.BroadcastFrameClock $r3;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r3 = r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        $z1 = virtualinvoke $r3.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z1 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public final java.lang.Object awaitIdle(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.StateFlow $r2;
        androidx.compose.runtime.Recomposer$awaitIdle$2 $r3;
        kotlinx.coroutines.flow.Flow $r4, $r6;
        kotlin.jvm.functions.Function2 $r5;
        java.lang.Object $r7, $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.Recomposer;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.StateFlow getCurrentState()>();

        $r4 = (kotlinx.coroutines.flow.Flow) $r2;

        $r3 = new androidx.compose.runtime.Recomposer$awaitIdle$2;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$awaitIdle$2: void <init>(kotlin.coroutines.Continuation)>(null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        $r6 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow takeWhile(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r4, $r5);

        $r7 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object collect(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r6, $r1);

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r8 goto label1;

        return $r7;

     label1:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r9;
    }

    public int getCompoundHashKey$runtime_release()
    {
        androidx.compose.runtime.Recomposer r0;

        r0 := @this: androidx.compose.runtime.Recomposer;

        return 1000;
    }

    public boolean getCollectingParameterInformation$runtime_release()
    {
        androidx.compose.runtime.Recomposer r0;

        r0 := @this: androidx.compose.runtime.Recomposer;

        return 0;
    }

    public void recordInspectionTable$runtime_release(java.util.Set)
    {
        androidx.compose.runtime.Recomposer r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        return;
    }

    public void registerComposition$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        return;
    }

    public void unregisterComposition$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;
        java.lang.Object r2, r3;
        java.util.List $r4, $r6, $r8;
        java.util.Collection $r5, $r7, $r9;
        java.lang.Throwable $r10, r12;
        kotlin.Unit r11;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        r2 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        $r5 = (java.util.Collection) $r4;

        interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        $r6 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r7 = (java.util.Collection) $r6;

        interfaceinvoke $r7.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        $r8 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r9.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

     label4:
        exitmonitor r3;

        throw r12;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.ControlledComposition r1;
        kotlinx.coroutines.CancellableContinuation r2, $r13, r14;
        java.lang.Object r3, r4, $r9;
        java.util.List $r5, $r10;
        boolean $z2;
        kotlin.Result$Companion $r6;
        kotlin.Unit $r7;
        kotlin.coroutines.Continuation $r8;
        java.util.Collection $r11;
        java.lang.Throwable $r12, r15;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $z2 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z2 != 0 goto label2;

        $r10 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        $r11 = (java.util.Collection) $r10;

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r13 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

        goto label3;

     label2:
        $r13 = null;

     label3:
        r14 = $r13;

     label4:
        exitmonitor r4;

        goto label7;

     label5:
        $r12 := @caughtexception;

        r15 = $r12;

     label6:
        exitmonitor r4;

        throw r15;

     label7:
        r2 = r14;

        if r2 == null goto label8;

        $r8 = (kotlin.coroutines.Continuation) r2;

        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r9 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

        interfaceinvoke $r8.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r9);

        goto label8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void invalidateScope$runtime_release(androidx.compose.runtime.RecomposeScopeImpl)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        kotlinx.coroutines.CancellableContinuation r2, r13;
        java.lang.Object r3, r4, $r11;
        java.util.List $r5;
        java.util.Collection $r6;
        java.util.Set $r7;
        kotlin.Result$Companion $r8;
        kotlin.Unit $r9;
        kotlin.coroutines.Continuation $r10;
        java.lang.Throwable $r12, r14;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScopeImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        $r6 = (java.util.Collection) $r5;

        $r7 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>(r1);

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        r13 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r12 := @caughtexception;

        r14 = $r12;

     label4:
        exitmonitor r4;

        throw r14;

     label5:
        r2 = r13;

        if r2 == null goto label6;

        $r10 = (kotlin.coroutines.Continuation) r2;

        $r8 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r11 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r9);

        interfaceinvoke $r10.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r11);

        goto label6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void insertMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        kotlinx.coroutines.CancellableContinuation r2, r12;
        java.lang.Object r3, r4, $r10;
        java.util.List $r5;
        java.util.Collection $r6;
        kotlin.Result$Companion $r7;
        kotlin.Unit $r8;
        kotlin.coroutines.Continuation $r9;
        java.lang.Throwable $r11, r13;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        r12 = specialinvoke r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

     label4:
        exitmonitor r4;

        throw r13;

     label5:
        r2 = r12;

        if r2 == null goto label6;

        $r9 = (kotlin.coroutines.Continuation) r2;

        $r7 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r10 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r9.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r10);

        goto label6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void deletedMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        java.lang.Object r2, r3;
        java.util.Map $r4;
        androidx.compose.runtime.MovableContent $r5;
        java.lang.Throwable $r6, r7;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        r2 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValuesRemoved>;

        $r5 = virtualinvoke r1.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.MovableContent getContent$runtime_release()>();

        staticinvoke <androidx.compose.runtime.RecomposerKt: boolean addMultiValue(java.util.Map,java.lang.Object,java.lang.Object)>($r4, $r5, r1);

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

     label4:
        exitmonitor r3;

        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void movableContentStateReleased$runtime_release(androidx.compose.runtime.MovableContentStateReference, androidx.compose.runtime.MovableContentState)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.MovableContentState r2;
        java.lang.Object r3, r4;
        java.util.Map $r5;
        java.lang.Throwable $r7, r9;
        kotlin.Unit r8;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        r2 := @parameter1: androidx.compose.runtime.MovableContentState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "data");

        r3 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

     label4:
        exitmonitor r4;

        throw r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.Recomposer r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        java.lang.Object r2, r3, $r5;
        java.util.Map $r4;
        java.lang.Throwable $r6, r8;
        androidx.compose.runtime.MovableContentState r7;

        r0 := @this: androidx.compose.runtime.Recomposer;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        r2 = r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.runtime.Recomposer: java.util.Map compositionValueStatesAvailable>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r7 = (androidx.compose.runtime.MovableContentState) $r5;

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        exitmonitor r3;

        throw r8;

     label5:
        return r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static final void performInitialMovableContentInserts$fillToInsert(java.util.List, androidx.compose.runtime.Recomposer, androidx.compose.runtime.ControlledComposition)
    {
        java.util.List r0, $r7;
        androidx.compose.runtime.Recomposer r1;
        androidx.compose.runtime.ControlledComposition $r2, $r9;
        java.lang.Object r3, r4, $r8;
        java.util.Iterator r5;
        androidx.compose.runtime.MovableContentStateReference r6;
        boolean $z2, $z4;
        java.lang.Throwable $r10, r12;
        kotlin.Unit r11;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: androidx.compose.runtime.Recomposer;

        $r2 := @parameter2: androidx.compose.runtime.ControlledComposition;

        interfaceinvoke r0.<java.util.List: void clear()>();

        r3 = r1.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r7 = r1.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        r5 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.compose.runtime.MovableContentStateReference) $r8;

        $r9 = virtualinvoke r6.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r2);

        if $z2 == 0 goto label2;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r6);

        interfaceinvoke r5.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r4;

        goto label7;

     label5:
        $r10 := @caughtexception;

        r12 = $r10;

     label6:
        exitmonitor r4;

        throw r12;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static final java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.lang.Object stateLock>;

        return $r1;
    }

    public static final androidx.compose.runtime.Recomposer$RecomposerErrorState access$resetErrorState(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()>();

        return $r1;
    }

    public static final void access$retryFailedCompositions(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer: void retryFailedCompositions()>();

        return;
    }

    public static final androidx.compose.runtime.Recomposer$RecomposerErrorState access$getErrorState$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState errorState>;

        return $r1;
    }

    public static final java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.util.List knownCompositions>;

        return $r1;
    }

    public static final java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.util.List snapshotInvalidations>;

        return $r1;
    }

    public static final java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.util.List compositionInvalidations>;

        return $r1;
    }

    public static final kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.CancellableContinuation $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation deriveStateLocked()>();

        return $r1;
    }

    public static final boolean access$getShouldKeepRecomposing(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: boolean getShouldKeepRecomposing()>();

        return $z0;
    }

    public static final java.lang.Object access$awaitWorkAvailable(androidx.compose.runtime.Recomposer, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: java.lang.Object awaitWorkAvailable(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final androidx.compose.runtime.BroadcastFrameClock access$getBroadcastFrameClock$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.BroadcastFrameClock $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock broadcastFrameClock>;

        return $r1;
    }

    public static final void access$recordComposerModificationsLocked(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer: void recordComposerModificationsLocked()>();

        return;
    }

    public static final androidx.compose.runtime.ControlledComposition access$performRecompose(androidx.compose.runtime.Recomposer, androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.ControlledComposition r1, $r3;
        androidx.compose.runtime.collection.IdentityArraySet r2;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter2: androidx.compose.runtime.collection.IdentityArraySet;

        $r3 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.ControlledComposition performRecompose(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r1, r2);

        return $r3;
    }

    public static final java.util.List access$performInsertValues(androidx.compose.runtime.Recomposer, java.util.List, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List r1, $r3;
        androidx.compose.runtime.collection.IdentityArraySet r2;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: androidx.compose.runtime.collection.IdentityArraySet;

        $r3 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: java.util.List performInsertValues(java.util.List,androidx.compose.runtime.collection.IdentityArraySet)>(r1, r2);

        return $r3;
    }

    public static final void access$setChangeCount$p(androidx.compose.runtime.Recomposer, long)
    {
        androidx.compose.runtime.Recomposer $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        l0 := @parameter1: long;

        $r0.<androidx.compose.runtime.Recomposer: long changeCount> = l0;

        return;
    }

    public static final void access$discardUnusedValues(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer: void discardUnusedValues()>();

        return;
    }

    public static final java.util.List access$getCompositionValuesAwaitingInsert$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.util.List compositionValuesAwaitingInsert>;

        return $r1;
    }

    public static final boolean access$getHasFrameWorkLocked(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: boolean getHasFrameWorkLocked()>();

        return $z0;
    }

    public static final java.lang.Object access$runFrameLoop(androidx.compose.runtime.Recomposer, androidx.compose.runtime.MonotonicFrameClock, androidx.compose.runtime.ProduceFrameSignal, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.MonotonicFrameClock r1;
        androidx.compose.runtime.ProduceFrameSignal r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: androidx.compose.runtime.MonotonicFrameClock;

        r2 := @parameter2: androidx.compose.runtime.ProduceFrameSignal;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: java.lang.Object runFrameLoop(androidx.compose.runtime.MonotonicFrameClock,androidx.compose.runtime.ProduceFrameSignal,kotlin.coroutines.Continuation)>(r1, r2, $r3);

        return $r4;
    }

    public static final int access$getConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $i0 = $r0.<androidx.compose.runtime.Recomposer: int concurrentCompositionsOutstanding>;

        return $i0;
    }

    public static final void access$setConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer, int)
    {
        androidx.compose.runtime.Recomposer $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.Recomposer: int concurrentCompositionsOutstanding> = i0;

        return;
    }

    public static final java.util.List access$getCompositionsAwaitingApply$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.util.List compositionsAwaitingApply>;

        return $r1;
    }

    public static final boolean access$getHasConcurrentFrameWorkLocked(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: boolean getHasConcurrentFrameWorkLocked()>();

        return $z0;
    }

    public static final java.lang.Object access$recompositionRunner(androidx.compose.runtime.Recomposer, kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlin.jvm.functions.Function3 r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: kotlin.jvm.functions.Function3;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: java.lang.Object recompositionRunner(kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final void access$registerRunnerJob(androidx.compose.runtime.Recomposer, kotlinx.coroutines.Job)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.Job r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: kotlinx.coroutines.Job;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer: void registerRunnerJob(kotlinx.coroutines.Job)>(r1);

        return;
    }

    public static final kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _state>;

        return $r1;
    }

    public static final androidx.compose.runtime.Recomposer$RecomposerInfoImpl access$getRecomposerInfo$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl recomposerInfo>;

        return $r1;
    }

    public static final kotlinx.coroutines.Job access$getRunnerJob$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.Job $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob>;

        return $r1;
    }

    public static final void access$setRunnerJob$p(androidx.compose.runtime.Recomposer, kotlinx.coroutines.Job)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.Job r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: kotlinx.coroutines.Job;

        $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job runnerJob> = r1;

        return;
    }

    public static final kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()
    {
        kotlinx.coroutines.flow.MutableStateFlow $r0;

        $r0 = <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _runningRecomposers>;

        return $r0;
    }

    public static final java.util.concurrent.atomic.AtomicReference access$get_hotReloadEnabled$cp()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference _hotReloadEnabled>;

        return $r0;
    }

    public static final boolean access$getHasSchedulingWork(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $z0 = specialinvoke $r0.<androidx.compose.runtime.Recomposer: boolean getHasSchedulingWork()>();

        return $z0;
    }

    public static final void access$setWorkContinuation$p(androidx.compose.runtime.Recomposer, kotlinx.coroutines.CancellableContinuation)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.CancellableContinuation r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation> = r1;

        return;
    }

    public static final java.lang.Throwable access$getCloseCause$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: java.lang.Throwable closeCause>;

        return $r1;
    }

    public static final boolean access$isClosed$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $z0 = $r0.<androidx.compose.runtime.Recomposer: boolean isClosed>;

        return $z0;
    }

    public static final kotlinx.coroutines.CancellableContinuation access$getWorkContinuation$p(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer $r0;
        kotlinx.coroutines.CancellableContinuation $r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        $r1 = $r0.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation workContinuation>;

        return $r1;
    }

    public static final void access$setCloseCause$p(androidx.compose.runtime.Recomposer, java.lang.Throwable)
    {
        androidx.compose.runtime.Recomposer $r0;
        java.lang.Throwable r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer;

        r1 := @parameter1: java.lang.Throwable;

        $r0.<androidx.compose.runtime.Recomposer: java.lang.Throwable closeCause> = r1;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.Recomposer$Companion $r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet $r1;
        kotlinx.coroutines.flow.MutableStateFlow $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Boolean $r4;

        $r0 = new androidx.compose.runtime.Recomposer$Companion;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$Companion Companion> = $r0;

        <androidx.compose.runtime.Recomposer: int $stable> = 8;

        $r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.ExtensionsKt: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet persistentSetOf()>();

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r1);

        <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow _runningRecomposers> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r4);

        <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference _hotReloadEnabled> = $r3;

        return;
    }

androidx.compose.runtime.Recomposer$awaitIdle$2
<androidx.compose.runtime.Recomposer$awaitIdle$2: int label>
<androidx.compose.runtime.Recomposer$awaitIdle$2: java.lang.Object L$0>
    void <init>(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$awaitIdle$2 r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$awaitIdle$2;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$awaitIdle$2 r0;
        java.lang.Object $r1, $r4;
        androidx.compose.runtime.Recomposer$State r2, $r5;
        int $i0, $i1;
        java.lang.Enum $r6;
        java.lang.Boolean $r7;
        boolean $z0;
        java.lang.IllegalStateException r9;
        java.lang.Throwable r10;

        r0 := @this: androidx.compose.runtime.Recomposer$awaitIdle$2;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.runtime.Recomposer$awaitIdle$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.runtime.Recomposer$awaitIdle$2: java.lang.Object L$0>;

        r2 = (androidx.compose.runtime.Recomposer$State) $r4;

        $r5 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>;

        $r6 = (java.lang.Enum) $r5;

        $i1 = virtualinvoke r2.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r6);

        if $i1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r7 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r7;

     label4:
        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r10 = (java.lang.Throwable) r9;

        throw r10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$awaitIdle$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;

        r0 := @this: androidx.compose.runtime.Recomposer$awaitIdle$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.runtime.Recomposer$awaitIdle$2;

        specialinvoke $r4.<androidx.compose.runtime.Recomposer$awaitIdle$2: void <init>(kotlin.coroutines.Continuation)>($r2);

        r3 = $r4;

        r3.<androidx.compose.runtime.Recomposer$awaitIdle$2: java.lang.Object L$0> = r1;

        $r5 = (kotlin.coroutines.Continuation) r3;

        return $r5;
    }

    public final java.lang.Object invoke(androidx.compose.runtime.Recomposer$State, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$awaitIdle$2 r0, $r5;
        androidx.compose.runtime.Recomposer$State r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$awaitIdle$2;

        r1 := @parameter0: androidx.compose.runtime.Recomposer$State;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$awaitIdle$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$awaitIdle$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$awaitIdle$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$awaitIdle$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.runtime.Recomposer$State $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$awaitIdle$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Recomposer$State) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$awaitIdle$2: java.lang.Object invoke(androidx.compose.runtime.Recomposer$State,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$broadcastFrameClock$1
<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: androidx.compose.runtime.Recomposer this$0>
    void <init>(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer$broadcastFrameClock$1 r0;
        androidx.compose.runtime.Recomposer $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$broadcastFrameClock$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        r0.<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.Recomposer$broadcastFrameClock$1 r0;
        kotlinx.coroutines.CancellableContinuation r1, r5, r6;
        java.lang.Object r2, r4, $r9, $r16;
        androidx.compose.runtime.Recomposer r3, $r7;
        kotlinx.coroutines.flow.MutableStateFlow $r8;
        androidx.compose.runtime.Recomposer$State $r10, $r12;
        java.lang.Enum $r11;
        int $i0;
        kotlin.Result$Companion $r13;
        kotlin.Unit $r14;
        kotlin.coroutines.Continuation $r15;
        java.lang.Throwable $r17, $r19;
        java.util.concurrent.CancellationException $r18;

        r0 := @this: androidx.compose.runtime.Recomposer$broadcastFrameClock$1;

        $r7 = r0.<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: androidx.compose.runtime.Recomposer this$0>;

        r2 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r7);

        r3 = r0.<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: androidx.compose.runtime.Recomposer this$0>;

        r4 = r2;

        entermonitor r4;

     label1:
        r5 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r3);

        r6 = r5;

        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)>(r3);

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r12 = (androidx.compose.runtime.Recomposer$State) $r9;

        $r10 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        $r11 = (java.lang.Enum) $r10;

        $i0 = virtualinvoke $r12.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r11);

        if $i0 > 0 goto label2;

        $r17 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Throwable access$getCloseCause$p(androidx.compose.runtime.Recomposer)>(r3);

        $r18 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>("Recomposer shutdown; frame clock awaiter will never resume", $r17);

        throw $r18;

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r19 := @caughtexception;

     label4:
        exitmonitor r4;

        throw $r19;

     label5:
        r1 = r5;

        if r1 == null goto label6;

        $r15 = (kotlin.coroutines.Continuation) r1;

        $r13 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r16 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r14);

        interfaceinvoke $r15.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r16);

        goto label6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.Recomposer$broadcastFrameClock$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$broadcastFrameClock$1;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$broadcastFrameClock$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.Recomposer$Companion
    private void <init>()
    {
        androidx.compose.runtime.Recomposer$Companion r0;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final kotlinx.coroutines.flow.StateFlow getRunningRecomposers()
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;
        kotlinx.coroutines.flow.StateFlow $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        $r1 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r1;

        return $r2;
    }

    public final void setHotReloadEnabled$runtime_release(boolean)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Boolean $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference access$get_hotReloadEnabled$cp()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r2);

        return;
    }

    private final void addRunning(androidx.compose.runtime.Recomposer$RecomposerInfoImpl)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet r2, r3;
        kotlinx.coroutines.flow.MutableStateFlow $r4, $r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        r1 := @parameter0: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

     label1:
        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r2 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet) $r5;

        r3 = interfaceinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet add(java.lang.Object)>(r1);

        if r2 == r3 goto label2;

        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $z0 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z0 == 0 goto label1;

        goto label2;

     label2:
        return;
    }

    private final void removeRunning(androidx.compose.runtime.Recomposer$RecomposerInfoImpl)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet r2, r3;
        kotlinx.coroutines.flow.MutableStateFlow $r4, $r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        r1 := @parameter0: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

     label1:
        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r2 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet) $r5;

        r3 = interfaceinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentSet remove(java.lang.Object)>(r1);

        if r2 == r3 goto label2;

        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $z0 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z0 == 0 goto label1;

        goto label2;

     label2:
        return;
    }

    public final java.lang.Object saveStateAndDisposeForHotReload$runtime_release()
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        java.lang.Iterable $r1, r13;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r8;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.lang.Boolean $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r7;
        java.util.ArrayList $r9;
        boolean $z3;
        java.util.List $r10, $r11;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r12;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        $r5 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference access$get_hotReloadEnabled$cp()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r6);

        $r7 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r8 = interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r1 = (java.lang.Iterable) $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r9;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r4;

        $r11 = virtualinvoke r12.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: java.util.List saveStateAndDisposeForHotReload()>();

        r13 = (java.lang.Iterable) $r11;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r2, r13);

        goto label1;

     label2:
        $r10 = (java.util.List) r2;

        return $r10;
    }

    public final void loadStateAndComposeForHotReload$runtime_release(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        java.lang.Object r1, $r5, $r7, r11, $r15, $r18, r22;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Boolean $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r4, $r6;
        boolean $z0, $z1, z9;
        java.lang.Iterable $r9, $r20;
        java.util.Iterator $r10, r21;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r12, $r23;
        java.util.List $r13;
        int i0, i1, i2, i3;
        androidx.compose.runtime.Recomposer$HotReloadable r16, r19;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "token");

        $r2 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference access$get_hotReloadEnabled$cp()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r9 = (java.lang.Iterable) $r5;

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r11;

        virtualinvoke r12.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()>();

        goto label1;

     label2:
        $r13 = (java.util.List) r1;

        i0 = 0;

        i1 = interfaceinvoke $r13.<java.util.List: int size()>();

     label3:
        if i0 >= i1 goto label4;

        $r15 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i0);

        r16 = (androidx.compose.runtime.Recomposer$HotReloadable) $r15;

        virtualinvoke r16.<androidx.compose.runtime.Recomposer$HotReloadable: void resetContent()>();

        i0 = i0 + 1;

        goto label3;

     label4:
        i2 = 0;

        i3 = interfaceinvoke $r13.<java.util.List: int size()>();

     label5:
        if i2 >= i3 goto label6;

        $r18 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i2);

        r19 = (androidx.compose.runtime.Recomposer$HotReloadable) $r18;

        virtualinvoke r19.<androidx.compose.runtime.Recomposer$HotReloadable: void recompose()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r20 = (java.lang.Iterable) $r7;

        r21 = interfaceinvoke $r20.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        r22 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r22;

        z9 = 0;

        virtualinvoke $r23.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: void retryFailedCompositions()>();

        goto label7;

     label8:
        return;
    }

    public final void invalidateGroupsWithKey$runtime_release(int)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        int i0;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3, $r8;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r4;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.lang.Boolean $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r7;
        androidx.compose.runtime.RecomposerErrorInfo $r9;
        boolean $z2, $z3, $z4;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        i0 := @parameter0: int;

        $r5 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.concurrent.atomic.AtomicReference access$get_hotReloadEnabled$cp()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r6);

        $r7 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r8 = interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r1 = (java.lang.Iterable) $r8;

        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r3;

        $r9 = virtualinvoke r4.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.RecomposerErrorInfo getCurrentError()>();

        if $r9 == null goto label3;

        $z2 = interfaceinvoke $r9.<androidx.compose.runtime.RecomposerErrorInfo: boolean getRecoverable()>();

        if $z2 != 0 goto label2;

        $z4 = 1;

        goto label4;

     label2:
        $z4 = 0;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z4 == 0 goto label5;

        goto label1;

     label5:
        virtualinvoke r4.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()>();

        virtualinvoke r4.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: void invalidateGroupsWithKey(int)>(i0);

        virtualinvoke r4.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: void retryFailedCompositions()>();

        goto label1;

     label6:
        return;
    }

    public final java.util.List getCurrentErrors$runtime_release()
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        java.util.Collection r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, r5, $r9;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r6;
        androidx.compose.runtime.RecomposerErrorInfo r7, $r12;
        kotlinx.coroutines.flow.MutableStateFlow $r8;
        java.util.ArrayList $r10;
        java.util.List $r11;
        boolean $z7;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.Collection) $r10;

        $r2 = (java.lang.Iterable) $r9;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = r4;

        r6 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r5;

        $r12 = virtualinvoke r6.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.RecomposerErrorInfo getCurrentError()>();

        if $r12 == null goto label2;

        r7 = $r12;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label1;

     label2:
        goto label1;

     label3:
        $r11 = (java.util.List) r1;

        return $r11;
    }

    public final void clearErrors$runtime_release()
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        java.util.Collection r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, r5, $r9;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r6;
        androidx.compose.runtime.Recomposer$RecomposerErrorState r7, $r12;
        kotlinx.coroutines.flow.MutableStateFlow $r8;
        java.util.ArrayList $r10;
        java.util.List $r11;
        boolean $z7;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_runningRecomposers$cp()>();

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.Collection) $r10;

        $r2 = (java.lang.Iterable) $r9;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = r4;

        r6 = (androidx.compose.runtime.Recomposer$RecomposerInfoImpl) r5;

        $r12 = virtualinvoke r6.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()>();

        if $r12 == null goto label2;

        r7 = $r12;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label1;

     label2:
        goto label1;

     label3:
        $r11 = (java.util.List) r1;

        return;
    }

    public static final void access$addRunning(androidx.compose.runtime.Recomposer$Companion, androidx.compose.runtime.Recomposer$RecomposerInfoImpl)
    {
        androidx.compose.runtime.Recomposer$Companion $r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer$Companion;

        r1 := @parameter1: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer$Companion: void addRunning(androidx.compose.runtime.Recomposer$RecomposerInfoImpl)>(r1);

        return;
    }

    public static final void access$removeRunning(androidx.compose.runtime.Recomposer$Companion, androidx.compose.runtime.Recomposer$RecomposerInfoImpl)
    {
        androidx.compose.runtime.Recomposer$Companion $r0;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r1;

        $r0 := @parameter0: androidx.compose.runtime.Recomposer$Companion;

        r1 := @parameter1: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer$Companion: void removeRunning(androidx.compose.runtime.Recomposer$RecomposerInfoImpl)>(r1);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.runtime.Recomposer$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.runtime.Recomposer$Companion: void <init>()>();

        return;
    }

androidx.compose.runtime.Recomposer$effectJob$1$1$1$1
<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: java.lang.Throwable $throwable>
    void <init>(androidx.compose.runtime.Recomposer, java.lang.Throwable)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1$1$1 r0;
        androidx.compose.runtime.Recomposer $r1;
        java.lang.Throwable $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1$1$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: java.lang.Throwable;

        r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: java.lang.Throwable $throwable> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Throwable)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1$1$1 r0;
        java.lang.Throwable r1, r4, r6, r9, r10, $r14, r16, $r17, r18, $r19, r21;
        java.lang.Object r2, r5;
        androidx.compose.runtime.Recomposer r3, r8, $r11, $r15;
        kotlinx.coroutines.flow.MutableStateFlow $r12;
        androidx.compose.runtime.Recomposer$State $r13;
        boolean $z3, $z5;
        kotlin.Unit r20;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1$1$1;

        r1 := @parameter0: java.lang.Throwable;

        $r11 = r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: androidx.compose.runtime.Recomposer this$0>;

        r2 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r11);

        r3 = r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: androidx.compose.runtime.Recomposer this$0>;

        r4 = r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: java.lang.Throwable $throwable>;

        r5 = r2;

        entermonitor r5;

     label01:
        $r15 = r3;

        if r4 == null goto label07;

        r6 = r4;

        r8 = r3;

        if r1 == null goto label06;

        r9 = r1;

        r16 = r9;

        $z3 = r16 instanceof java.util.concurrent.CancellationException;

        if $z3 != 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        if $z5 == 0 goto label04;

        $r17 = r9;

        goto label05;

     label04:
        $r17 = null;

     label05:
        r10 = $r17;

        if r10 == null goto label06;

        r18 = r10;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>(r6, r18);

        goto label06;

     label06:
        $r15 = r8;

        $r19 = r6;

        goto label08;

     label07:
        $r19 = null;

     label08:
        staticinvoke <androidx.compose.runtime.Recomposer: void access$setCloseCause$p(androidx.compose.runtime.Recomposer,java.lang.Throwable)>($r15, $r19);

        $r12 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)>(r3);

        $r13 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown>;

        interfaceinvoke $r12.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r13);

        r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor r5;

        goto label12;

     label10:
        $r14 := @caughtexception;

        r21 = $r14;

     label11:
        exitmonitor r5;

        throw r21;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1$1$1 r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: void invoke(java.lang.Throwable)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.Recomposer$effectJob$1$1
<androidx.compose.runtime.Recomposer$effectJob$1$1: androidx.compose.runtime.Recomposer this$0>
    void <init>(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1 r0;
        androidx.compose.runtime.Recomposer $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        r0.<androidx.compose.runtime.Recomposer$effectJob$1$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Throwable)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1 r0;
        java.lang.Throwable r1, $r8, $r18, r24;
        java.util.concurrent.CancellationException r2;
        java.lang.Object r3, r5, $r14, $r22, r23;
        androidx.compose.runtime.Recomposer r4, $r7;
        kotlinx.coroutines.Job r6;
        kotlinx.coroutines.flow.MutableStateFlow $r9, $r15;
        androidx.compose.runtime.Recomposer$State $r10, $r16;
        kotlin.Result$Companion $r11;
        kotlin.Unit $r12;
        kotlin.coroutines.Continuation $r13;
        boolean $z2;
        kotlinx.coroutines.CancellableContinuation $r17, r19;
        androidx.compose.runtime.Recomposer$effectJob$1$1$1$1 $r20;
        kotlin.jvm.functions.Function1 $r21;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1;

        r1 := @parameter0: java.lang.Throwable;

        r2 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>("Recomposer effect job completed", r1);

        r19 = null;

        $r7 = r0.<androidx.compose.runtime.Recomposer$effectJob$1$1: androidx.compose.runtime.Recomposer this$0>;

        r3 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r7);

        r4 = r0.<androidx.compose.runtime.Recomposer$effectJob$1$1: androidx.compose.runtime.Recomposer this$0>;

        r5 = r3;

        entermonitor r5;

     label01:
        r6 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job access$getRunnerJob$p(androidx.compose.runtime.Recomposer)>(r4);

        if r6 == null goto label04;

        $r15 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)>(r4);

        $r16 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        interfaceinvoke $r15.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r16);

        $z2 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$isClosed$p(androidx.compose.runtime.Recomposer)>(r4);

        if $z2 != 0 goto label02;

        interfaceinvoke r6.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>(r2);

        goto label03;

     label02:
        $r17 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$getWorkContinuation$p(androidx.compose.runtime.Recomposer)>(r4);

        if $r17 == null goto label03;

        r19 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$getWorkContinuation$p(androidx.compose.runtime.Recomposer)>(r4);

     label03:
        staticinvoke <androidx.compose.runtime.Recomposer: void access$setWorkContinuation$p(androidx.compose.runtime.Recomposer,kotlinx.coroutines.CancellableContinuation)>(r4, null);

        $r20 = new androidx.compose.runtime.Recomposer$effectJob$1$1$1$1;

        specialinvoke $r20.<androidx.compose.runtime.Recomposer$effectJob$1$1$1$1: void <init>(androidx.compose.runtime.Recomposer,java.lang.Throwable)>(r4, r1);

        $r21 = (kotlin.jvm.functions.Function1) $r20;

        $r22 = interfaceinvoke r6.<kotlinx.coroutines.Job: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r21);

        goto label05;

     label04:
        $r8 = (java.lang.Throwable) r2;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setCloseCause$p(androidx.compose.runtime.Recomposer,java.lang.Throwable)>(r4, $r8);

        $r9 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)>(r4);

        $r10 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown>;

        interfaceinvoke $r9.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r10);

        $r22 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        r23 = $r22;

     label06:
        exitmonitor r5;

        goto label09;

     label07:
        $r18 := @caughtexception;

        r24 = $r18;

     label08:
        exitmonitor r5;

        throw r24;

     label09:
        if r19 == null goto label10;

        $r13 = (kotlin.coroutines.Continuation) r19;

        $r11 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r14 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r12);

        interfaceinvoke $r13.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r14);

        goto label10;

     label10:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$effectJob$1$1 r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$effectJob$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$effectJob$1$1: void invoke(java.lang.Throwable)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.Recomposer$HotReloadable
<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>
<androidx.compose.runtime.Recomposer$HotReloadable: kotlin.jvm.functions.Function2 composable>
    public void <init>(androidx.compose.runtime.CompositionImpl)
    {
        androidx.compose.runtime.Recomposer$HotReloadable r0;
        androidx.compose.runtime.CompositionImpl r1, $r2;
        kotlin.jvm.functions.Function2 $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$HotReloadable;

        r1 := @parameter0: androidx.compose.runtime.CompositionImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition> = r1;

        $r2 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 getComposable()>();

        r0.<androidx.compose.runtime.Recomposer$HotReloadable: kotlin.jvm.functions.Function2 composable> = $r3;

        return;
    }

    public final void clearContent()
    {
        androidx.compose.runtime.Recomposer$HotReloadable r0;
        androidx.compose.runtime.CompositionImpl $r1, $r3;
        boolean $z0;
        androidx.compose.runtime.ComposableSingletons$RecomposerKt $r2;
        kotlin.jvm.functions.Function2 $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$HotReloadable;

        $r1 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.CompositionImpl: boolean isRoot()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $r2 = <androidx.compose.runtime.ComposableSingletons$RecomposerKt: androidx.compose.runtime.ComposableSingletons$RecomposerKt INSTANCE>;

        $r4 = virtualinvoke $r2.<androidx.compose.runtime.ComposableSingletons$RecomposerKt: kotlin.jvm.functions.Function2 getLambda-1$runtime_release()>();

        virtualinvoke $r3.<androidx.compose.runtime.CompositionImpl: void setContent(kotlin.jvm.functions.Function2)>($r4);

     label1:
        return;
    }

    public final void resetContent()
    {
        androidx.compose.runtime.Recomposer$HotReloadable r0;
        kotlin.jvm.functions.Function2 $r1;
        androidx.compose.runtime.CompositionImpl $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$HotReloadable;

        $r2 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $r1 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: kotlin.jvm.functions.Function2 composable>;

        virtualinvoke $r2.<androidx.compose.runtime.CompositionImpl: void setComposable(kotlin.jvm.functions.Function2)>($r1);

        return;
    }

    public final void recompose()
    {
        androidx.compose.runtime.Recomposer$HotReloadable r0;
        androidx.compose.runtime.CompositionImpl $r1, $r3;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$HotReloadable;

        $r1 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.CompositionImpl: boolean isRoot()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: androidx.compose.runtime.CompositionImpl composition>;

        $r2 = r0.<androidx.compose.runtime.Recomposer$HotReloadable: kotlin.jvm.functions.Function2 composable>;

        virtualinvoke $r3.<androidx.compose.runtime.CompositionImpl: void setContent(kotlin.jvm.functions.Function2)>($r2);

     label1:
        return;
    }

androidx.compose.runtime.Recomposer$join$2
<androidx.compose.runtime.Recomposer$join$2: int label>
<androidx.compose.runtime.Recomposer$join$2: java.lang.Object L$0>
    void <init>(kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$join$2 r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$join$2;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$join$2 r0;
        java.lang.Object $r1, $r4;
        androidx.compose.runtime.Recomposer$State r2, $r5;
        int $i0;
        java.lang.Boolean $r6;
        boolean $z0;
        java.lang.IllegalStateException r8;
        java.lang.Throwable r9;

        r0 := @this: androidx.compose.runtime.Recomposer$join$2;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.runtime.Recomposer$join$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.runtime.Recomposer$join$2: java.lang.Object L$0>;

        r2 = (androidx.compose.runtime.Recomposer$State) $r4;

        $r5 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown>;

        if r2 != $r5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r6 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r6;

     label4:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r9 = (java.lang.Throwable) r8;

        throw r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$join$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;

        r0 := @this: androidx.compose.runtime.Recomposer$join$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.runtime.Recomposer$join$2;

        specialinvoke $r4.<androidx.compose.runtime.Recomposer$join$2: void <init>(kotlin.coroutines.Continuation)>($r2);

        r3 = $r4;

        r3.<androidx.compose.runtime.Recomposer$join$2: java.lang.Object L$0> = r1;

        $r5 = (kotlin.coroutines.Continuation) r3;

        return $r5;
    }

    public final java.lang.Object invoke(androidx.compose.runtime.Recomposer$State, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$join$2 r0, $r5;
        androidx.compose.runtime.Recomposer$State r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$join$2;

        r1 := @parameter0: androidx.compose.runtime.Recomposer$State;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$join$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$join$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$join$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$join$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.runtime.Recomposer$State $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$join$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Recomposer$State) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$join$2: java.lang.Object invoke(androidx.compose.runtime.Recomposer$State,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$performRecompose$1$1
<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues>
<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.ControlledComposition $composition>
    void <init>(androidx.compose.runtime.collection.IdentityArraySet, androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer$performRecompose$1$1 r0;
        androidx.compose.runtime.collection.IdentityArraySet $r1;
        androidx.compose.runtime.ControlledComposition $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$performRecompose$1$1;

        $r1 := @parameter0: androidx.compose.runtime.collection.IdentityArraySet;

        $r2 := @parameter1: androidx.compose.runtime.ControlledComposition;

        r0.<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues> = $r1;

        r0.<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.ControlledComposition $composition> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.Recomposer$performRecompose$1$1 r0;
        androidx.compose.runtime.collection.IdentityArraySet r1;
        androidx.compose.runtime.ControlledComposition r2;
        int i0, i1;
        java.lang.Object r3;

        r0 := @this: androidx.compose.runtime.Recomposer$performRecompose$1$1;

        r1 = r0.<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues>;

        r2 = r0.<androidx.compose.runtime.Recomposer$performRecompose$1$1: androidx.compose.runtime.ControlledComposition $composition>;

        i1 = 0;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label1:
        if i1 >= i0 goto label2;

        r3 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i1);

        interfaceinvoke r2.<androidx.compose.runtime.ControlledComposition: void recordWriteOf(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.Recomposer$performRecompose$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$performRecompose$1$1;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$performRecompose$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.Recomposer$readObserverOf$1
<androidx.compose.runtime.Recomposer$readObserverOf$1: androidx.compose.runtime.ControlledComposition $composition>
    void <init>(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.Recomposer$readObserverOf$1 r0;
        androidx.compose.runtime.ControlledComposition $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$readObserverOf$1;

        $r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r0.<androidx.compose.runtime.Recomposer$readObserverOf$1: androidx.compose.runtime.ControlledComposition $composition> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$readObserverOf$1 r0;
        java.lang.Object r1;
        androidx.compose.runtime.ControlledComposition $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$readObserverOf$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.runtime.Recomposer$readObserverOf$1: androidx.compose.runtime.ControlledComposition $composition>;

        interfaceinvoke $r2.<androidx.compose.runtime.ControlledComposition: void recordReadOf(java.lang.Object)>(r1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$readObserverOf$1 r0;
        java.lang.Object r1;
        kotlin.Unit $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$readObserverOf$1;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$readObserverOf$1: void invoke(java.lang.Object)>(r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

androidx.compose.runtime.Recomposer$RecomposerErrorState
<androidx.compose.runtime.Recomposer$RecomposerErrorState: boolean recoverable>
<androidx.compose.runtime.Recomposer$RecomposerErrorState: java.lang.Exception cause>
    public void <init>(boolean, java.lang.Exception)
    {
        androidx.compose.runtime.Recomposer$RecomposerErrorState r0;
        boolean z0;
        java.lang.Exception r1;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerErrorState;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Exception;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "cause");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.Recomposer$RecomposerErrorState: boolean recoverable> = z0;

        r0.<androidx.compose.runtime.Recomposer$RecomposerErrorState: java.lang.Exception cause> = r1;

        return;
    }

    public boolean getRecoverable()
    {
        androidx.compose.runtime.Recomposer$RecomposerErrorState r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerErrorState;

        $z0 = r0.<androidx.compose.runtime.Recomposer$RecomposerErrorState: boolean recoverable>;

        return $z0;
    }

    public java.lang.Exception getCause()
    {
        androidx.compose.runtime.Recomposer$RecomposerErrorState r0;
        java.lang.Exception $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerErrorState;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerErrorState: java.lang.Exception cause>;

        return $r1;
    }

androidx.compose.runtime.Recomposer$RecomposerInfoImpl
<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>
    public void <init>(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer r1;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        r1 := @parameter0: androidx.compose.runtime.Recomposer;

        r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlinx.coroutines.flow.Flow getState()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer $r1;
        kotlinx.coroutines.flow.StateFlow $r2;
        kotlinx.coroutines.flow.Flow $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.StateFlow getCurrentState()>();

        $r3 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r3;
    }

    public boolean getHasPendingWork()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.Recomposer: boolean getHasPendingWork()>();

        return $z0;
    }

    public long getChangeCount()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer $r1;
        long $l0;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        $l0 = virtualinvoke $r1.<androidx.compose.runtime.Recomposer: long getChangeCount()>();

        return $l0;
    }

    public final androidx.compose.runtime.RecomposerErrorInfo getCurrentError()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        java.lang.Object r1, r3;
        androidx.compose.runtime.Recomposer r2, $r4;
        androidx.compose.runtime.RecomposerErrorInfo $r5;
        java.lang.Throwable $r6;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r7;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r4 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        r1 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r4);

        r2 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        r3 = r1;

        entermonitor r3;

     label1:
        $r7 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState access$getErrorState$p(androidx.compose.runtime.Recomposer)>(r2);

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r3;

        throw $r6;

     label5:
        $r5 = (androidx.compose.runtime.RecomposerErrorInfo) $r7;

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void invalidateGroupsWithKey(int)
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.util.List r1, $r7, $r15, r17, r21;
        java.lang.Object r2, r3, r12, $r22;
        androidx.compose.runtime.ControlledComposition r4;
        androidx.compose.runtime.CompositionImpl r5, $r20, r23;
        androidx.compose.runtime.Recomposer $r6, $r13;
        java.util.Collection $r8, $r10;
        java.util.ArrayList $r9;
        boolean $z3;
        java.lang.Throwable $r11;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        i0 := @parameter0: int;

        $r6 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        r12 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r6);

        $r13 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        entermonitor r12;

     label01:
        $r7 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>($r13);

        $r8 = (java.util.Collection) $r7;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r8);

     label02:
        exitmonitor r12;

        goto label05;

     label03:
        $r11 := @caughtexception;

     label04:
        exitmonitor r12;

        throw $r11;

     label05:
        r1 = $r15;

        r17 = r1;

        $r9 = new java.util.ArrayList;

        $i1 = interfaceinvoke r17.<java.util.List: int size()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i1);

        i2 = 0;

        $i3 = interfaceinvoke r17.<java.util.List: int size()>();

     label06:
        if i2 >= $i3 goto label10;

        r2 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = r2;

        r4 = (androidx.compose.runtime.ControlledComposition) r3;

        $z3 = r4 instanceof androidx.compose.runtime.CompositionImpl;

        if $z3 == 0 goto label07;

        $r20 = (androidx.compose.runtime.CompositionImpl) r4;

        goto label08;

     label07:
        $r20 = null;

     label08:
        if $r20 == null goto label09;

        r5 = $r20;

        $r10 = (java.util.Collection) $r9;

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label09;

     label09:
        i2 = i2 + 1;

        goto label06;

     label10:
        r21 = (java.util.List) $r9;

        $i4 = 0;

        $i5 = interfaceinvoke r21.<java.util.List: int size()>();

     label11:
        if $i4 >= $i5 goto label12;

        $r22 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>($i4);

        r23 = (androidx.compose.runtime.CompositionImpl) $r22;

        virtualinvoke r23.<androidx.compose.runtime.CompositionImpl: void invalidateGroupsWithKey(int)>(i0);

        $i4 = $i4 + 1;

        goto label11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public final java.util.List saveStateAndDisposeForHotReload()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        java.util.List r1, $r4, $r8, $r15, r17, r25;
        java.util.Collection r2, $r5, $r10;
        androidx.compose.runtime.Recomposer $r3, $r13;
        java.util.ArrayList $r6, $r7;
        int $i0, $i1, i2, i3, i4, i5;
        androidx.compose.runtime.Recomposer$HotReloadable $r9, r31;
        boolean $z2;
        java.lang.Throwable $r11;
        java.lang.Object r12, r20, r21, r28, r29;
        androidx.compose.runtime.ControlledComposition r22;
        androidx.compose.runtime.CompositionImpl $r23, r24, r30;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r3 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        r12 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r3);

        $r13 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        entermonitor r12;

     label01:
        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>($r13);

        $r5 = (java.util.Collection) $r4;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r5);

     label02:
        exitmonitor r12;

        goto label05;

     label03:
        $r11 := @caughtexception;

     label04:
        exitmonitor r12;

        throw $r11;

     label05:
        r1 = $r15;

        r17 = r1;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r17.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

        i3 = interfaceinvoke r17.<java.util.List: int size()>();

     label06:
        if i2 >= i3 goto label10;

        r20 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i2);

        r21 = r20;

        r22 = (androidx.compose.runtime.ControlledComposition) r21;

        $z2 = r22 instanceof androidx.compose.runtime.CompositionImpl;

        if $z2 == 0 goto label07;

        $r23 = (androidx.compose.runtime.CompositionImpl) r22;

        goto label08;

     label07:
        $r23 = null;

     label08:
        if $r23 == null goto label09;

        r24 = $r23;

        $r10 = (java.util.Collection) $r6;

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(r24);

        goto label09;

     label09:
        i2 = i2 + 1;

        goto label06;

     label10:
        r25 = (java.util.List) $r6;

        $r7 = new java.util.ArrayList;

        $i1 = interfaceinvoke r25.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        i4 = 0;

        i5 = interfaceinvoke r25.<java.util.List: int size()>();

     label11:
        if i4 >= i5 goto label12;

        r28 = interfaceinvoke r25.<java.util.List: java.lang.Object get(int)>(i4);

        r29 = r28;

        r30 = (androidx.compose.runtime.CompositionImpl) r29;

        r2 = (java.util.Collection) $r7;

        $r9 = new androidx.compose.runtime.Recomposer$HotReloadable;

        specialinvoke $r9.<androidx.compose.runtime.Recomposer$HotReloadable: void <init>(androidx.compose.runtime.CompositionImpl)>(r30);

        r31 = $r9;

        virtualinvoke r31.<androidx.compose.runtime.Recomposer$HotReloadable: void clearContent()>();

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r31);

        i4 = i4 + 1;

        goto label11;

     label12:
        $r8 = (java.util.List) $r7;

        return $r8;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public final androidx.compose.runtime.Recomposer$RecomposerErrorState resetErrorState()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer $r1;
        androidx.compose.runtime.Recomposer$RecomposerErrorState $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        $r2 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerErrorState access$resetErrorState(androidx.compose.runtime.Recomposer)>($r1);

        return $r2;
    }

    public final void retryFailedCompositions()
    {
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl r0;
        androidx.compose.runtime.Recomposer $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$RecomposerInfoImpl;

        $r1 = r0.<androidx.compose.runtime.Recomposer$RecomposerInfoImpl: androidx.compose.runtime.Recomposer this$0>;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$retryFailedCompositions(androidx.compose.runtime.Recomposer)>($r1);

        return;
    }

androidx.compose.runtime.Recomposer$recompositionRunner$2$2
<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: int label>
<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: java.lang.Object L$0>
<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: kotlin.jvm.functions.Function3 $block>
<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>
    void <init>(kotlin.jvm.functions.Function3, androidx.compose.runtime.MonotonicFrameClock, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r0;
        kotlin.jvm.functions.Function3 $r1;
        androidx.compose.runtime.MonotonicFrameClock $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 := @parameter1: androidx.compose.runtime.MonotonicFrameClock;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: kotlin.jvm.functions.Function3 $block> = $r1;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r0;
        java.lang.Object $r1, r3, $r5, $r8;
        kotlinx.coroutines.CoroutineScope $r2;
        int $i0;
        kotlin.Unit $r4;
        kotlin.jvm.functions.Function3 $r6;
        androidx.compose.runtime.MonotonicFrameClock $r7;
        java.lang.IllegalStateException r10;
        java.lang.Throwable r11;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.CoroutineScope) $r5;

        $r6 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: kotlin.jvm.functions.Function3 $block>;

        $r7 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: int label> = 1;

        $r8 = interfaceinvoke $r6.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r7, r0);

        if $r8 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r11 = (java.lang.Throwable) r10;

        throw r11;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        kotlin.jvm.functions.Function3 $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        $r6 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: kotlin.jvm.functions.Function3 $block>;

        $r5 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        specialinvoke $r4.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: void <init>(kotlin.jvm.functions.Function3,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>($r6, $r5, $r2);

        r3 = $r4;

        r3.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: java.lang.Object L$0> = r1;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$recompositionRunner$2$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1
<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: androidx.compose.runtime.Recomposer this$0>
    void <init>(androidx.compose.runtime.Recomposer)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1 r0;
        androidx.compose.runtime.Recomposer $r1;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(java.util.Set, androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1 r0;
        java.util.Set r1;
        androidx.compose.runtime.snapshots.Snapshot r2;
        kotlinx.coroutines.CancellableContinuation r3, $r20, r21;
        java.lang.Object r4, r6, $r9, $r16;
        androidx.compose.runtime.Recomposer r5, $r7;
        kotlinx.coroutines.flow.MutableStateFlow $r8;
        androidx.compose.runtime.Recomposer$State $r10, $r12;
        java.lang.Enum $r11;
        int $i0;
        kotlin.Result$Companion $r13;
        kotlin.Unit $r14;
        kotlin.coroutines.Continuation $r15;
        java.util.List $r17;
        java.util.Collection $r18;
        java.lang.Throwable $r19, r22;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        $r7 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: androidx.compose.runtime.Recomposer this$0>;

        r4 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r7);

        r5 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: androidx.compose.runtime.Recomposer this$0>;

        r6 = r4;

        entermonitor r6;

     label1:
        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.flow.MutableStateFlow access$get_state$p(androidx.compose.runtime.Recomposer)>(r5);

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r12 = (androidx.compose.runtime.Recomposer$State) $r9;

        $r10 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>;

        $r11 = (java.lang.Enum) $r10;

        $i0 = virtualinvoke $r12.<androidx.compose.runtime.Recomposer$State: int compareTo(java.lang.Enum)>($r11);

        if $i0 < 0 goto label2;

        $r17 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r5);

        $r18 = (java.util.Collection) $r17;

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r20 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r5);

        goto label3;

     label2:
        $r20 = null;

     label3:
        r21 = $r20;

     label4:
        exitmonitor r6;

        goto label7;

     label5:
        $r19 := @caughtexception;

        r22 = $r19;

     label6:
        exitmonitor r6;

        throw r22;

     label7:
        r3 = r21;

        if r3 == null goto label8;

        $r15 = (kotlin.coroutines.Continuation) r3;

        $r13 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r16 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r14);

        interfaceinvoke $r15.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r16);

        goto label8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1 r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.snapshots.Snapshot $r3;
        java.util.Set $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Set) r1;

        $r3 = (androidx.compose.runtime.snapshots.Snapshot) r2;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: void invoke(java.util.Set,androidx.compose.runtime.snapshots.Snapshot)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.runtime.Recomposer$recompositionRunner$2
<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$1>
<androidx.compose.runtime.Recomposer$recompositionRunner$2: int label>
<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$0>
<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$recompositionRunner$2: kotlin.jvm.functions.Function3 $block>
<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>
    void <init>(androidx.compose.runtime.Recomposer, kotlin.jvm.functions.Function3, androidx.compose.runtime.MonotonicFrameClock, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2 r0;
        androidx.compose.runtime.Recomposer $r1;
        kotlin.jvm.functions.Function3 $r2;
        androidx.compose.runtime.MonotonicFrameClock $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: kotlin.jvm.functions.Function3;

        $r3 := @parameter2: androidx.compose.runtime.MonotonicFrameClock;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: kotlin.jvm.functions.Function3 $block> = $r2;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2 r0;
        java.lang.Object $r1, r3, r5, $r6, $r7, $r14, $r30, r43, r49, r55;
        kotlinx.coroutines.CoroutineScope $r2;
        int i0, $i1, i2;
        androidx.compose.runtime.ControlledComposition r4;
        androidx.compose.runtime.Recomposer $r8, $r10, $r16, $r18, $r21, $r24, $r34, $r36, r44, r50, $r56;
        kotlinx.coroutines.Job $r9, $r35, r41;
        androidx.compose.runtime.Recomposer$Companion $r11, $r22, $r37;
        androidx.compose.runtime.Recomposer$RecomposerInfoImpl $r12, $r23, $r38;
        kotlin.Unit $r13, $r47;
        kotlin.coroutines.CoroutineContext $r15;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r19;
        kotlin.jvm.functions.Function2 $r20, $r28;
        androidx.compose.runtime.MonotonicFrameClock $r26;
        kotlin.jvm.functions.Function3 $r27;
        kotlin.coroutines.Continuation $r29;
        java.lang.Throwable $r32, $r33, $r39, $r40, r54, r63;
        androidx.compose.runtime.snapshots.ObserverHandle r42;
        java.util.List $r46;
        androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1 r60;
        androidx.compose.runtime.Recomposer$recompositionRunner$2$2 r61;
        java.lang.IllegalStateException r62;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2;

        $r1 := @parameter0: java.lang.Object;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: int label>;

        tableswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label11;
            default: goto label29;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r14 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.CoroutineScope) $r14;

        $r15 = interfaceinvoke $r2.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        r41 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)>($r15);

        $r16 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$registerRunnerJob(androidx.compose.runtime.Recomposer,kotlinx.coroutines.Job)>($r16, r41);

        $r19 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        r60 = new androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1;

        $r18 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        specialinvoke r60.<androidx.compose.runtime.Recomposer$recompositionRunner$2$unregisterApplyObserver$1: void <init>(androidx.compose.runtime.Recomposer)>($r18);

        $r20 = (kotlin.jvm.functions.Function2) r60;

        r42 = virtualinvoke $r19.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.ObserverHandle registerApplyObserver(kotlin.jvm.functions.Function2)>($r20);

        $r22 = <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$Companion Companion>;

        $r21 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        $r23 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl access$getRecomposerInfo$p(androidx.compose.runtime.Recomposer)>($r21);

        staticinvoke <androidx.compose.runtime.Recomposer$Companion: void access$addRunning(androidx.compose.runtime.Recomposer$Companion,androidx.compose.runtime.Recomposer$RecomposerInfoImpl)>($r22, $r23);

     label02:
        $r24 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        r43 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r24);

        r44 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        entermonitor r43;

     label03:
        $r46 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>(r44);

        i2 = 0;

        i0 = interfaceinvoke $r46.<java.util.List: int size()>();

     label04:
        if i2 >= i0 goto label05;

        r3 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (androidx.compose.runtime.ControlledComposition) r3;

        interfaceinvoke r4.<androidx.compose.runtime.ControlledComposition: void invalidateAll()>();

        i2 = i2 + 1;

        goto label04;

     label05:
        $r47 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label06:
        exitmonitor r43;

        goto label09;

     label07:
        $r40 := @caughtexception;

     label08:
        exitmonitor r43;

        throw $r40;

     label09:
        r61 = new androidx.compose.runtime.Recomposer$recompositionRunner$2$2;

        $r27 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: kotlin.jvm.functions.Function3 $block>;

        $r26 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        specialinvoke r61.<androidx.compose.runtime.Recomposer$recompositionRunner$2$2: void <init>(kotlin.jvm.functions.Function3,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>($r27, $r26, null);

        $r28 = (kotlin.jvm.functions.Function2) r61;

        $r29 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$0> = r41;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$1> = r42;

        r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: int label> = 1;

        $r30 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: java.lang.Object coroutineScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r28, $r29);

     label10:
        if $r30 != r5 goto label13;

        return r5;

     label11:
        $r6 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$1>;

        r42 = (androidx.compose.runtime.snapshots.ObserverHandle) $r6;

        $r7 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$0>;

        r41 = (kotlinx.coroutines.Job) $r7;

     label12:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label13:
        interfaceinvoke r42.<androidx.compose.runtime.snapshots.ObserverHandle: void dispose()>();

        $r8 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        r49 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r8);

        r50 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        entermonitor r49;

     label14:
        $r9 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job access$getRunnerJob$p(androidx.compose.runtime.Recomposer)>(r50);

        if $r9 != r41 goto label15;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setRunnerJob$p(androidx.compose.runtime.Recomposer,kotlinx.coroutines.Job)>(r50, null);

     label15:
        staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r50);

     label16:
        exitmonitor r49;

        goto label19;

     label17:
        $r39 := @caughtexception;

     label18:
        exitmonitor r49;

        throw $r39;

     label19:
        $r11 = <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$Companion Companion>;

        $r10 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        $r12 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl access$getRecomposerInfo$p(androidx.compose.runtime.Recomposer)>($r10);

        staticinvoke <androidx.compose.runtime.Recomposer$Companion: void access$removeRunning(androidx.compose.runtime.Recomposer$Companion,androidx.compose.runtime.Recomposer$RecomposerInfoImpl)>($r11, $r12);

        goto label28;

     label20:
        $r33 := @caughtexception;

        r54 = $r33;

     label21:
        interfaceinvoke r42.<androidx.compose.runtime.snapshots.ObserverHandle: void dispose()>();

        $r34 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        r55 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r34);

        $r56 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        entermonitor r55;

     label22:
        $r35 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.Job access$getRunnerJob$p(androidx.compose.runtime.Recomposer)>($r56);

        if $r35 != r41 goto label23;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setRunnerJob$p(androidx.compose.runtime.Recomposer,kotlinx.coroutines.Job)>($r56, null);

     label23:
        staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>($r56);

     label24:
        exitmonitor r55;

        goto label27;

     label25:
        $r32 := @caughtexception;

     label26:
        exitmonitor r55;

        throw $r32;

     label27:
        $r37 = <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$Companion Companion>;

        $r36 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        $r38 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.Recomposer$RecomposerInfoImpl access$getRecomposerInfo$p(androidx.compose.runtime.Recomposer)>($r36);

        staticinvoke <androidx.compose.runtime.Recomposer$Companion: void access$removeRunning(androidx.compose.runtime.Recomposer$Companion,androidx.compose.runtime.Recomposer$RecomposerInfoImpl)>($r37, $r38);

        throw r54;

     label28:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label29:
        r62 = new java.lang.IllegalStateException;

        specialinvoke r62.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r63 = (java.lang.Throwable) r62;

        throw r63;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label14 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label22 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label02 to label10 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r8;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        kotlin.jvm.functions.Function3 $r6;
        androidx.compose.runtime.Recomposer $r7;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.runtime.Recomposer$recompositionRunner$2;

        $r7 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.Recomposer this$0>;

        $r6 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: kotlin.jvm.functions.Function3 $block>;

        $r5 = r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        specialinvoke $r4.<androidx.compose.runtime.Recomposer$recompositionRunner$2: void <init>(androidx.compose.runtime.Recomposer,kotlin.jvm.functions.Function3,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>($r7, $r6, $r5, $r2);

        r3 = $r4;

        r3.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object L$0> = r1;

        $r8 = (kotlin.coroutines.Continuation) r3;

        return $r8;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$recompositionRunner$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$recompositionRunner$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$recompositionRunner$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$recompositionRunner$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$runFrameLoop$1
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$0>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$1>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$2>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$3>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object L$4>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object result>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label>
    void <init>(androidx.compose.runtime.Recomposer, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runFrameLoop$1 r0;
        androidx.compose.runtime.Recomposer r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$runFrameLoop$1;

        r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$1: androidx.compose.runtime.Recomposer this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runFrameLoop$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.compose.runtime.Recomposer $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$runFrameLoop$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$1: int label> = $i1;

        $r3 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$1: androidx.compose.runtime.Recomposer this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$runFrameLoop(androidx.compose.runtime.Recomposer,androidx.compose.runtime.MonotonicFrameClock,androidx.compose.runtime.ProduceFrameSignal,kotlin.coroutines.Continuation)>($r3, null, null, $r2);

        return $r4;
    }

androidx.compose.runtime.Recomposer$runFrameLoop$2
<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toRecompose>
<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toApply>
<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.ProduceFrameSignal $frameSignal>
    void <init>(androidx.compose.runtime.Recomposer, java.util.List, java.util.List, androidx.compose.runtime.ProduceFrameSignal)
    {
        androidx.compose.runtime.Recomposer$runFrameLoop$2 r0;
        androidx.compose.runtime.Recomposer $r1;
        java.util.List $r2, $r3;
        androidx.compose.runtime.ProduceFrameSignal $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$runFrameLoop$2;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.util.List;

        $r4 := @parameter3: androidx.compose.runtime.ProduceFrameSignal;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toRecompose> = $r2;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toApply> = $r3;

        r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.ProduceFrameSignal $frameSignal> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final kotlinx.coroutines.CancellableContinuation invoke(long)
    {
        androidx.compose.runtime.Recomposer$runFrameLoop$2 r0;
        long l0, l1, $l2;
        java.lang.Object r1, r28, r36, r39, r42, $r48, $r53, $r56;
        androidx.compose.runtime.Recomposer $r2, r27, r32;
        androidx.compose.runtime.BroadcastFrameClock $r3, $r15;
        boolean $z1, $z2, z17, $z18;
        androidx.compose.runtime.Trace $r4, $r9, $r14, $r17, $r20, $r22;
        java.util.List $r5, $r6, $r33, r34, $r38, $r41;
        androidx.compose.runtime.collection.IdentityArraySet $r7, r46;
        java.util.Collection $r8, $r11, $r12, $r13;
        androidx.compose.runtime.ControlledComposition $r10, r40, r43, r49, r50, r54;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r16;
        java.lang.Throwable $r18, $r19, $r21, $r23, $r24, $r25, r45, r60;
        java.lang.String r26, r31;
        kotlin.Unit $r29, r44;
        androidx.compose.runtime.ProduceFrameSignal $r35;
        int i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        kotlinx.coroutines.CancellableContinuation $r57, r59;

        r0 := @this: androidx.compose.runtime.Recomposer$runFrameLoop$2;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.Recomposer this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock access$getBroadcastFrameClock$p(androidx.compose.runtime.Recomposer)>($r2);

        $z1 = virtualinvoke $r3.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z1 == 0 goto label05;

        r26 = "Recomposer:animation";

        r27 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.Recomposer this$0>;

        $r14 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r28 = virtualinvoke $r14.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r26);

     label01:
        $r15 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock access$getBroadcastFrameClock$p(androidx.compose.runtime.Recomposer)>(r27);

        virtualinvoke $r15.<androidx.compose.runtime.BroadcastFrameClock: void sendFrame(long)>(l0);

        $r16 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r16.<androidx.compose.runtime.snapshots.Snapshot$Companion: void sendApplyNotifications()>();

        $r29 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label02:
        $r17 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r17.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r28);

        goto label05;

     label03:
        $r19 := @caughtexception;

     label04:
        $r20 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r20.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r28);

        throw $r19;

     label05:
        r31 = "Recomposer:recompose";

        r32 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.Recomposer this$0>;

        $r33 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toRecompose>;

        r34 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: java.util.List $toApply>;

        $r35 = r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: androidx.compose.runtime.ProduceFrameSignal $frameSignal>;

        $r4 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r1 = virtualinvoke $r4.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r31);

     label06:
        r36 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r32);

        entermonitor r36;

     label07:
        staticinvoke <androidx.compose.runtime.Recomposer: void access$recordComposerModificationsLocked(androidx.compose.runtime.Recomposer)>(r32);

        $r38 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionsAwaitingApply$p(androidx.compose.runtime.Recomposer)>(r32);

        i3 = 0;

        $i4 = interfaceinvoke $r38.<java.util.List: int size()>();

     label08:
        if i3 >= $i4 goto label09;

        r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(i3);

        r40 = (androidx.compose.runtime.ControlledComposition) r39;

        $r13 = (java.util.Collection) r34;

        interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r40);

        i3 = i3 + 1;

        goto label08;

     label09:
        $r5 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionsAwaitingApply$p(androidx.compose.runtime.Recomposer)>(r32);

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r41 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r32);

        i5 = 0;

        $i6 = interfaceinvoke $r41.<java.util.List: int size()>();

     label10:
        if i5 >= $i6 goto label11;

        r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(i5);

        r43 = (androidx.compose.runtime.ControlledComposition) r42;

        $r12 = (java.util.Collection) $r33;

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>(r43);

        i5 = i5 + 1;

        goto label10;

     label11:
        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r32);

        interfaceinvoke $r6.<java.util.List: void clear()>();

        virtualinvoke $r35.<androidx.compose.runtime.ProduceFrameSignal: void takeFrameRequestLocked()>();

        r44 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label12:
        exitmonitor r36;

        goto label15;

     label13:
        $r23 := @caughtexception;

        r45 = $r23;

     label14:
        exitmonitor r36;

        throw r45;

     label15:
        $r7 = new androidx.compose.runtime.collection.IdentityArraySet;

        specialinvoke $r7.<androidx.compose.runtime.collection.IdentityArraySet: void <init>()>();

        r46 = $r7;

     label16:
        $i7 = 0;

        $i8 = interfaceinvoke $r33.<java.util.List: int size()>();

     label17:
        if $i7 >= $i8 goto label19;

        $r48 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>($i7);

        r49 = (androidx.compose.runtime.ControlledComposition) $r48;

        $r10 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.ControlledComposition access$performRecompose(androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r32, r49, r46);

        if $r10 == null goto label18;

        r50 = $r10;

        z17 = 0;

        $r11 = (java.util.Collection) r34;

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(r50);

        goto label18;

     label18:
        $i7 = $i7 + 1;

        goto label17;

     label19:
        interfaceinvoke $r33.<java.util.List: void clear()>();

        goto label22;

     label20:
        $r18 := @caughtexception;

     label21:
        interfaceinvoke $r33.<java.util.List: void clear()>();

        throw $r18;

     label22:
        $r8 = (java.util.Collection) r34;

        $z2 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label23;

        $z18 = 1;

        goto label24;

     label23:
        $z18 = 0;

     label24:
        if $z18 == 0 goto label25;

        l1 = virtualinvoke r32.<androidx.compose.runtime.Recomposer: long getChangeCount()>();

        $l2 = l1 + 1L;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setChangeCount$p(androidx.compose.runtime.Recomposer,long)>(r32, $l2);

     label25:
        $i9 = 0;

        $i10 = interfaceinvoke r34.<java.util.List: int size()>();

     label26:
        if $i9 >= $i10 goto label27;

        $r53 = interfaceinvoke r34.<java.util.List: java.lang.Object get(int)>($i9);

        r54 = (androidx.compose.runtime.ControlledComposition) $r53;

        interfaceinvoke r54.<androidx.compose.runtime.ControlledComposition: void applyChanges()>();

        $i9 = $i9 + 1;

        goto label26;

     label27:
        interfaceinvoke r34.<java.util.List: void clear()>();

        goto label30;

     label28:
        $r25 := @caughtexception;

     label29:
        interfaceinvoke r34.<java.util.List: void clear()>();

        throw $r25;

     label30:
        $r56 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r32);

        entermonitor $r56;

     label31:
        $r57 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r32);

     label32:
        exitmonitor $r56;

        goto label35;

     label33:
        $r24 := @caughtexception;

     label34:
        exitmonitor $r56;

        throw $r24;

     label35:
        r59 = $r57;

     label36:
        $r9 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r9.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r1);

        goto label39;

     label37:
        $r21 := @caughtexception;

        r60 = $r21;

     label38:
        $r22 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r22.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r1);

        throw r60;

     label39:
        return r59;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label16 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label25 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.Throwable from label06 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runFrameLoop$2 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlinx.coroutines.CancellableContinuation $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$runFrameLoop$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runFrameLoop$2: kotlinx.coroutines.CancellableContinuation invoke(long)>($l0);

        return $r3;
    }

androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toRecompose>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toInsert>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toLateApply>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toApply>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toComplete>
    void <init>(androidx.compose.runtime.Recomposer, java.util.List, java.util.List, java.util.Set, java.util.List, java.util.Set)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2 r0;
        androidx.compose.runtime.Recomposer $r1;
        java.util.List $r2, $r3, $r5;
        java.util.Set $r4, $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.util.List;

        $r4 := @parameter3: java.util.Set;

        $r5 := @parameter4: java.util.List;

        $r6 := @parameter5: java.util.Set;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toRecompose> = $r2;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toInsert> = $r3;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toLateApply> = $r4;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toApply> = $r5;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toComplete> = $r6;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(long)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2 r0;
        long l0, l1, $l2;
        java.util.Set r1, $r13, $r63;
        java.lang.Object r2, r56, r65, r68, r76, $r80, $r82, r87, $r92, $r97, $r100;
        androidx.compose.runtime.Recomposer $r3, r55, r60;
        androidx.compose.runtime.BroadcastFrameClock $r4, $r30;
        boolean $z3, $z4, $z5, $z6, $z8, $z9, $z13, $z14, $z15, $z16, $z17, $z19, $z28, $z29, $z30, z32, z36, $z37, $z38, z40, $z41, z43, $z44, z46;
        androidx.compose.runtime.Trace $r5, $r23, $r29, $r32, $r34, $r38, $r41, $r43, $r45, $r48, $r52;
        java.util.List $r6, $r11, $r61, r62, r64, $r67, r81;
        androidx.compose.runtime.collection.IdentityArraySet $r7, $r8, r72;
        java.util.Collection $r9, $r10, $r14, $r16, $r19, $r20, $r21, $r22, $r25, $r27, $r28, $r74;
        java.lang.Iterable $r12, $r24, $r26, $r90, $r95;
        androidx.compose.runtime.ControlledComposition $r15, r69, r77, r78, r83, r88, r93, r98;
        kotlin.Unit $r17, $r18, r57, r70, r84;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r31;
        java.lang.Throwable $r33, $r35, $r36, $r37, $r39, $r40, $r42, $r44, $r46, $r47, $r49, $r50, $r51, $r53, r58, r71, r85, r104;
        java.lang.String r54, r59;
        int i3, i4, $i5, $i6, i7, i8, $i9, $i10;
        java.util.Iterator $r91, $r96;
        kotlinx.coroutines.CancellableContinuation $r101, r103;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2;

        l0 := @parameter0: long;

        $r3 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: androidx.compose.runtime.Recomposer this$0>;

        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock access$getBroadcastFrameClock$p(androidx.compose.runtime.Recomposer)>($r3);

        $z3 = virtualinvoke $r4.<androidx.compose.runtime.BroadcastFrameClock: boolean getHasAwaiters()>();

        if $z3 == 0 goto label05;

        r54 = "Recomposer:animation";

        r55 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: androidx.compose.runtime.Recomposer this$0>;

        $r29 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r56 = virtualinvoke $r29.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r54);

     label01:
        $r30 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.BroadcastFrameClock access$getBroadcastFrameClock$p(androidx.compose.runtime.Recomposer)>(r55);

        virtualinvoke $r30.<androidx.compose.runtime.BroadcastFrameClock: void sendFrame(long)>(l0);

        $r31 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        virtualinvoke $r31.<androidx.compose.runtime.snapshots.Snapshot$Companion: void sendApplyNotifications()>();

        r57 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label02:
        $r32 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r32.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r56);

        goto label05;

     label03:
        $r47 := @caughtexception;

        r58 = $r47;

     label04:
        $r48 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r48.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r56);

        throw r58;

     label05:
        r59 = "Recomposer:recompose";

        r60 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: androidx.compose.runtime.Recomposer this$0>;

        $r61 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toRecompose>;

        r62 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toInsert>;

        $r63 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toLateApply>;

        r64 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.List $toApply>;

        r1 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: java.util.Set $toComplete>;

        $r5 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r2 = virtualinvoke $r5.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r59);

     label06:
        r65 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r60);

        entermonitor r65;

     label07:
        staticinvoke <androidx.compose.runtime.Recomposer: void access$recordComposerModificationsLocked(androidx.compose.runtime.Recomposer)>(r60);

        $r67 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r60);

        i3 = 0;

        i4 = interfaceinvoke $r67.<java.util.List: int size()>();

     label08:
        if i3 >= i4 goto label09;

        r68 = interfaceinvoke $r67.<java.util.List: java.lang.Object get(int)>(i3);

        r69 = (androidx.compose.runtime.ControlledComposition) r68;

        $r28 = (java.util.Collection) $r61;

        interfaceinvoke $r28.<java.util.Collection: boolean add(java.lang.Object)>(r69);

        i3 = i3 + 1;

        goto label08;

     label09:
        $r6 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r60);

        interfaceinvoke $r6.<java.util.List: void clear()>();

        r70 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label10:
        exitmonitor r65;

        goto label13;

     label11:
        $r39 := @caughtexception;

        r71 = $r39;

     label12:
        exitmonitor r65;

        throw r71;

     label13:
        $r7 = new androidx.compose.runtime.collection.IdentityArraySet;

        specialinvoke $r7.<androidx.compose.runtime.collection.IdentityArraySet: void <init>()>();

        r72 = $r7;

        $r8 = new androidx.compose.runtime.collection.IdentityArraySet;

        specialinvoke $r8.<androidx.compose.runtime.collection.IdentityArraySet: void <init>()>();

     label14:
        $r74 = (java.util.Collection) $r61;

        $z28 = interfaceinvoke $r74.<java.util.Collection: boolean isEmpty()>();

        if $z28 != 0 goto label15;

        $z29 = 1;

        goto label16;

     label15:
        $z29 = 0;

     label16:
        if $z29 != 0 goto label19;

        $r19 = (java.util.Collection) r62;

        $z13 = interfaceinvoke $r19.<java.util.Collection: boolean isEmpty()>();

        if $z13 != 0 goto label17;

        $z30 = 1;

        goto label18;

     label17:
        $z30 = 0;

     label18:
        if $z30 == 0 goto label43;

     label19:
        $i5 = 0;

        $i6 = interfaceinvoke $r61.<java.util.List: int size()>();

     label20:
        if $i5 >= $i6 goto label22;

        r76 = interfaceinvoke $r61.<java.util.List: java.lang.Object get(int)>($i5);

        r77 = (androidx.compose.runtime.ControlledComposition) r76;

        z32 = 0;

        virtualinvoke $r8.<androidx.compose.runtime.collection.IdentityArraySet: boolean add(java.lang.Object)>(r77);

        $r15 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.ControlledComposition access$performRecompose(androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>(r60, r77, r72);

        if $r15 == null goto label21;

        r78 = $r15;

        $r16 = (java.util.Collection) r64;

        interfaceinvoke $r16.<java.util.Collection: boolean add(java.lang.Object)>(r78);

        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label21;

     label21:
        $i5 = $i5 + 1;

        goto label20;

     label22:
        interfaceinvoke $r61.<java.util.List: void clear()>();

        goto label28;

     label23:
        $r51 := @caughtexception;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r60, $r51, null, 1, 2, null);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>($r61, r62, r64, $r63, r1);

     label24:
        interfaceinvoke $r61.<java.util.List: void clear()>();

     label25:
        $r52 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r52.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        return;

     label26:
        $r50 := @caughtexception;

     label27:
        interfaceinvoke $r61.<java.util.List: void clear()>();

        throw $r50;

     label28:
        $z4 = virtualinvoke r72.<androidx.compose.runtime.collection.IdentityArraySet: boolean isNotEmpty()>();

        if $z4 == 0 goto label36;

        $r80 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r60);

        entermonitor $r80;

     label29:
        r81 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>(r60);

        z36 = 0;

        i7 = 0;

        i8 = interfaceinvoke r81.<java.util.List: int size()>();

     label30:
        if i7 >= i8 goto label32;

        $r82 = interfaceinvoke r81.<java.util.List: java.lang.Object get(int)>(i7);

        r83 = (androidx.compose.runtime.ControlledComposition) $r82;

        $z8 = virtualinvoke $r8.<androidx.compose.runtime.collection.IdentityArraySet: boolean contains(java.lang.Object)>(r83);

        if $z8 != 0 goto label31;

        $r13 = (java.util.Set) r72;

        $z9 = interfaceinvoke r83.<androidx.compose.runtime.ControlledComposition: boolean observesAnyOf(java.util.Set)>($r13);

        if $z9 == 0 goto label31;

        $r14 = (java.util.Collection) $r61;

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>(r83);

     label31:
        i7 = i7 + 1;

        goto label30;

     label32:
        r84 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label33:
        exitmonitor $r80;

        goto label36;

     label34:
        $r36 := @caughtexception;

        r85 = $r36;

     label35:
        exitmonitor $r80;

        throw r85;

     label36:
        $z5 = interfaceinvoke $r61.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label14;

     label37:
        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$fillToInsert(java.util.List,androidx.compose.runtime.Recomposer)>(r62, r60);

     label38:
        $r9 = (java.util.Collection) r62;

        $z6 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z6 != 0 goto label39;

        $z37 = 1;

        goto label40;

     label39:
        $z37 = 0;

     label40:
        if $z37 == 0 goto label14;

        $r10 = (java.util.Collection) $r63;

        $r11 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$performInsertValues(androidx.compose.runtime.Recomposer,java.util.List,androidx.compose.runtime.collection.IdentityArraySet)>(r60, r62, r72);

        $r12 = (java.lang.Iterable) $r11;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r10, $r12);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$fillToInsert(java.util.List,androidx.compose.runtime.Recomposer)>(r62, r60);

        goto label38;

     label41:
        $r40 := @caughtexception;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r60, $r40, null, 1, 2, null);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>($r61, r62, r64, $r63, r1);

     label42:
        $r41 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r41.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        return;

     label43:
        $r20 = (java.util.Collection) r64;

        $z14 = interfaceinvoke $r20.<java.util.Collection: boolean isEmpty()>();

        if $z14 != 0 goto label44;

        $z38 = 1;

        goto label45;

     label44:
        $z38 = 0;

     label45:
        if $z38 == 0 goto label54;

        l1 = virtualinvoke r60.<androidx.compose.runtime.Recomposer: long getChangeCount()>();

        $l2 = l1 + 1L;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setChangeCount$p(androidx.compose.runtime.Recomposer,long)>(r60, $l2);

     label46:
        $r27 = (java.util.Collection) r1;

        $r26 = (java.lang.Iterable) r64;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r27, $r26);

        $i9 = 0;

        $i10 = interfaceinvoke r64.<java.util.List: int size()>();

     label47:
        if $i9 >= $i10 goto label48;

        r87 = interfaceinvoke r64.<java.util.List: java.lang.Object get(int)>($i9);

        r88 = (androidx.compose.runtime.ControlledComposition) r87;

        z40 = 0;

        interfaceinvoke r88.<androidx.compose.runtime.ControlledComposition: void applyChanges()>();

        $i9 = $i9 + 1;

        goto label47;

     label48:
        interfaceinvoke r64.<java.util.List: void clear()>();

        goto label54;

     label49:
        $r33 := @caughtexception;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r60, $r33, null, 0, 6, null);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>($r61, r62, r64, $r63, r1);

     label50:
        interfaceinvoke r64.<java.util.List: void clear()>();

     label51:
        $r34 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r34.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        return;

     label52:
        $r53 := @caughtexception;

     label53:
        interfaceinvoke r64.<java.util.List: void clear()>();

        throw $r53;

     label54:
        $r21 = (java.util.Collection) $r63;

        $z15 = interfaceinvoke $r21.<java.util.Collection: boolean isEmpty()>();

        if $z15 != 0 goto label55;

        $z41 = 1;

        goto label56;

     label55:
        $z41 = 0;

     label56:
        if $z41 == 0 goto label65;

     label57:
        $r25 = (java.util.Collection) r1;

        $r24 = (java.lang.Iterable) $r63;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r25, $r24);

        $r90 = (java.lang.Iterable) $r63;

        $r91 = interfaceinvoke $r90.<java.lang.Iterable: java.util.Iterator iterator()>();

     label58:
        $z19 = interfaceinvoke $r91.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label59;

        $r92 = interfaceinvoke $r91.<java.util.Iterator: java.lang.Object next()>();

        r93 = (androidx.compose.runtime.ControlledComposition) $r92;

        z43 = 0;

        interfaceinvoke r93.<androidx.compose.runtime.ControlledComposition: void applyLateChanges()>();

        goto label58;

     label59:
        interfaceinvoke $r63.<java.util.Set: void clear()>();

        goto label65;

     label60:
        $r42 := @caughtexception;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r60, $r42, null, 0, 6, null);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>($r61, r62, r64, $r63, r1);

     label61:
        interfaceinvoke $r63.<java.util.Set: void clear()>();

     label62:
        $r43 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r43.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        return;

     label63:
        $r35 := @caughtexception;

     label64:
        interfaceinvoke $r63.<java.util.Set: void clear()>();

        throw $r35;

     label65:
        $r22 = (java.util.Collection) r1;

        $z16 = interfaceinvoke $r22.<java.util.Collection: boolean isEmpty()>();

        if $z16 != 0 goto label66;

        $z44 = 1;

        goto label67;

     label66:
        $z44 = 0;

     label67:
        if $z44 == 0 goto label76;

     label68:
        $r95 = (java.lang.Iterable) r1;

        $r96 = interfaceinvoke $r95.<java.lang.Iterable: java.util.Iterator iterator()>();

     label69:
        $z17 = interfaceinvoke $r96.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label70;

        $r97 = interfaceinvoke $r96.<java.util.Iterator: java.lang.Object next()>();

        r98 = (androidx.compose.runtime.ControlledComposition) $r97;

        z46 = 0;

        interfaceinvoke r98.<androidx.compose.runtime.ControlledComposition: void changesApplied()>();

        goto label69;

     label70:
        interfaceinvoke r1.<java.util.Set: void clear()>();

        goto label76;

     label71:
        $r44 := @caughtexception;

        staticinvoke <androidx.compose.runtime.Recomposer: void processCompositionError$default(androidx.compose.runtime.Recomposer,java.lang.Exception,androidx.compose.runtime.ControlledComposition,boolean,int,java.lang.Object)>(r60, $r44, null, 0, 6, null);

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void access$invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>($r61, r62, r64, $r63, r1);

     label72:
        interfaceinvoke r1.<java.util.Set: void clear()>();

     label73:
        $r45 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r45.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        return;

     label74:
        $r46 := @caughtexception;

     label75:
        interfaceinvoke r1.<java.util.Set: void clear()>();

        throw $r46;

     label76:
        $r100 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r60);

        entermonitor $r100;

     label77:
        $r101 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r60);

     label78:
        exitmonitor $r100;

        goto label81;

     label79:
        $r49 := @caughtexception;

     label80:
        exitmonitor $r100;

        throw $r49;

     label81:
        r103 = $r101;

     label82:
        $r23 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r23.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        goto label85;

     label83:
        $r37 := @caughtexception;

        r104 = $r37;

     label84:
        $r38 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r38.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        throw r104;

     label85:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Exception from label19 to label22 with label23;
        catch java.lang.Throwable from label19 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label29 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
        catch java.lang.Exception from label37 to label41 with label41;
        catch java.lang.Exception from label46 to label48 with label49;
        catch java.lang.Throwable from label46 to label48 with label52;
        catch java.lang.Throwable from label49 to label50 with label52;
        catch java.lang.Throwable from label52 to label53 with label52;
        catch java.lang.Exception from label57 to label59 with label60;
        catch java.lang.Throwable from label57 to label59 with label63;
        catch java.lang.Throwable from label60 to label61 with label63;
        catch java.lang.Throwable from label63 to label64 with label63;
        catch java.lang.Exception from label68 to label70 with label71;
        catch java.lang.Throwable from label68 to label70 with label74;
        catch java.lang.Throwable from label71 to label72 with label74;
        catch java.lang.Throwable from label74 to label75 with label74;
        catch java.lang.Throwable from label77 to label78 with label79;
        catch java.lang.Throwable from label79 to label80 with label79;
        catch java.lang.Throwable from label06 to label25 with label83;
        catch java.lang.Throwable from label26 to label42 with label83;
        catch java.lang.Throwable from label43 to label51 with label83;
        catch java.lang.Throwable from label52 to label62 with label83;
        catch java.lang.Throwable from label63 to label73 with label83;
        catch java.lang.Throwable from label74 to label82 with label83;
        catch java.lang.Throwable from label83 to label84 with label83;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: void invoke(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$1>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$2>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$3>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$4>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$5>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: int label>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0>
<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>
    void <init>(androidx.compose.runtime.Recomposer, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2 r0;
        androidx.compose.runtime.Recomposer $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(3, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2 r0;
        java.lang.Object $r1, r2, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        androidx.compose.runtime.Recomposer r3, $r12, $r14, $r17, $r19, $r43;
        int $i0;
        kotlin.Unit $r13;
        kotlin.coroutines.Continuation $r15, $r21;
        boolean $z1, $z2, $z3, $z5;
        kotlin.jvm.functions.Function1 $r20;
        java.lang.Throwable $r36, r52;
        androidx.compose.runtime.MonotonicFrameClock r37;
        java.util.List r38, r39, r40;
        java.util.Set r41, r42;
        java.util.ArrayList r45, r46, r47;
        java.util.LinkedHashSet r48, r49;
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2 r50;
        java.lang.IllegalStateException r51;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        $r1 := @parameter0: java.lang.Object;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label13;
            default: goto label16;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r29 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0>;

        r37 = (androidx.compose.runtime.MonotonicFrameClock) $r29;

        r45 = new java.util.ArrayList;

        specialinvoke r45.<java.util.ArrayList: void <init>()>();

        r38 = (java.util.List) r45;

        r46 = new java.util.ArrayList;

        specialinvoke r46.<java.util.ArrayList: void <init>()>();

        r39 = (java.util.List) r46;

        r47 = new java.util.ArrayList;

        specialinvoke r47.<java.util.ArrayList: void <init>()>();

        r40 = (java.util.List) r47;

        r48 = new java.util.LinkedHashSet;

        specialinvoke r48.<java.util.LinkedHashSet: void <init>()>();

        r41 = (java.util.Set) r48;

        r49 = new java.util.LinkedHashSet;

        specialinvoke r49.<java.util.LinkedHashSet: void <init>()>();

        r42 = (java.util.Set) r49;

     label02:
        $r43 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        $z3 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getShouldKeepRecomposing(androidx.compose.runtime.Recomposer)>($r43);

        if $z3 == 0 goto label15;

        $r14 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        $r15 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0> = r37;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$1> = r38;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$2> = r39;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$3> = r40;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$4> = r41;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$5> = r42;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: int label> = 1;

        $r16 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$awaitWorkAvailable(androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>($r14, $r15);

        if $r16 != r5 goto label04;

        return r5;

     label03:
        $r23 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$5>;

        r42 = (java.util.Set) $r23;

        $r24 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$4>;

        r41 = (java.util.Set) $r24;

        $r25 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$3>;

        r40 = (java.util.List) $r25;

        $r26 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$2>;

        r39 = (java.util.List) $r26;

        $r27 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$1>;

        r38 = (java.util.List) $r27;

        $r28 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0>;

        r37 = (androidx.compose.runtime.MonotonicFrameClock) $r28;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label04:
        $r17 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        r2 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r17);

        r3 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        r4 = r2;

        entermonitor r4;

     label05:
        $z1 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getHasFrameWorkLocked(androidx.compose.runtime.Recomposer)>(r3);

        if $z1 != 0 goto label07;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$recordComposerModificationsLocked(androidx.compose.runtime.Recomposer)>(r3);

        $z2 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getHasFrameWorkLocked(androidx.compose.runtime.Recomposer)>(r3);

        if $z2 != 0 goto label06;

        $z5 = 1;

        goto label08;

     label06:
        $z5 = 0;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        exitmonitor r4;

        goto label11;

     label09:
        $r36 := @caughtexception;

     label10:
        exitmonitor r4;

        throw $r36;

     label11:
        if $z5 == 0 goto label12;

        goto label02;

     label12:
        r50 = new androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2;

        $r19 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        specialinvoke r50.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2$2: void <init>(androidx.compose.runtime.Recomposer,java.util.List,java.util.List,java.util.Set,java.util.List,java.util.Set)>($r19, r38, r39, r41, r40, r42);

        $r20 = (kotlin.jvm.functions.Function1) r50;

        $r21 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0> = r37;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$1> = r38;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$2> = r39;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$3> = r40;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$4> = r41;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$5> = r42;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: int label> = 2;

        $r22 = interfaceinvoke r37.<androidx.compose.runtime.MonotonicFrameClock: java.lang.Object withFrameNanos(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r20, $r21);

        if $r22 != r5 goto label14;

        return r5;

     label13:
        $r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$5>;

        r42 = (java.util.Set) $r6;

        $r7 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$4>;

        r41 = (java.util.Set) $r7;

        $r8 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$3>;

        r40 = (java.util.List) $r8;

        $r9 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$2>;

        r39 = (java.util.List) $r9;

        $r10 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$1>;

        r38 = (java.util.List) $r10;

        $r11 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0>;

        r37 = (androidx.compose.runtime.MonotonicFrameClock) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label14:
        $r12 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$discardUnusedValues(androidx.compose.runtime.Recomposer)>($r12);

        goto label02;

     label15:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label16:
        r51 = new java.lang.IllegalStateException;

        specialinvoke r51.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r52 = (java.lang.Throwable) r51;

        throw r52;

        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, androidx.compose.runtime.MonotonicFrameClock, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2 r0, r4, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        androidx.compose.runtime.MonotonicFrameClock r2;
        kotlin.coroutines.Continuation r3;
        androidx.compose.runtime.Recomposer $r6;
        kotlin.Unit $r7;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: androidx.compose.runtime.MonotonicFrameClock;

        r3 := @parameter2: kotlin.coroutines.Continuation;

        $r5 = new androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        $r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        specialinvoke $r5.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void <init>(androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>($r6, r3);

        r4 = $r5;

        r4.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object L$0> = r2;

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r8 = virtualinvoke r4.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object invokeSuspend(java.lang.Object)>($r7);

        return $r8;
    }

    private static final void invokeSuspend$clearRecompositionState(java.util.List, java.util.List, java.util.List, java.util.Set, java.util.Set)
    {
        java.util.List r0, r1, r2;
        java.util.Set r3, r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.Set;

        r4 := @parameter4: java.util.Set;

        interfaceinvoke r0.<java.util.List: void clear()>();

        interfaceinvoke r1.<java.util.List: void clear()>();

        interfaceinvoke r2.<java.util.List: void clear()>();

        interfaceinvoke r3.<java.util.Set: void clear()>();

        interfaceinvoke r4.<java.util.Set: void clear()>();

        return;
    }

    private static final void invokeSuspend$fillToInsert(java.util.List, androidx.compose.runtime.Recomposer)
    {
        java.util.List r0, $r4, $r7;
        androidx.compose.runtime.Recomposer r1;
        java.lang.Object r2, r3, r5;
        int i0, i1;
        androidx.compose.runtime.MovableContentStateReference r6;
        java.util.Collection $r8;
        java.lang.Throwable $r9, r11;
        kotlin.Unit r10;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: androidx.compose.runtime.Recomposer;

        interfaceinvoke r0.<java.util.List: void clear()>();

        r2 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>(r1);

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionValuesAwaitingInsert$p(androidx.compose.runtime.Recomposer)>(r1);

        i1 = 0;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

     label2:
        if i1 >= i0 goto label3;

        r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (androidx.compose.runtime.MovableContentStateReference) r5;

        $r8 = (java.util.Collection) r0;

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r7 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionValuesAwaitingInsert$p(androidx.compose.runtime.Recomposer)>(r1);

        interfaceinvoke $r7.<java.util.List: void clear()>();

        r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r3;

        goto label7;

     label5:
        $r9 := @caughtexception;

        r11 = $r9;

     label6:
        exitmonitor r3;

        throw r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2 r0;
        java.lang.Object r1, r2, r3, $r7;
        kotlin.coroutines.Continuation $r4;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        kotlinx.coroutines.CoroutineScope $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (kotlinx.coroutines.CoroutineScope) r1;

        $r5 = (androidx.compose.runtime.MonotonicFrameClock) r2;

        $r4 = (kotlin.coroutines.Continuation) r3;

        $r7 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>($r6, $r5, $r4);

        return $r7;
    }

    public static final void access$invokeSuspend$clearRecompositionState(java.util.List, java.util.List, java.util.List, java.util.Set, java.util.Set)
    {
        java.util.List r0, r1, r2;
        java.util.Set r3, r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.Set;

        r4 := @parameter4: java.util.Set;

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void invokeSuspend$clearRecompositionState(java.util.List,java.util.List,java.util.List,java.util.Set,java.util.Set)>(r0, r1, r2, r3, r4);

        return;
    }

    public static final void access$invokeSuspend$fillToInsert(java.util.List, androidx.compose.runtime.Recomposer)
    {
        java.util.List r0;
        androidx.compose.runtime.Recomposer r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: androidx.compose.runtime.Recomposer;

        staticinvoke <androidx.compose.runtime.Recomposer$runRecomposeAndApplyChanges$2: void invokeSuspend$fillToInsert(java.util.List,androidx.compose.runtime.Recomposer)>(r0, r1);

        return;
    }

androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: int label>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.ControlledComposition $composition>
    void <init>(androidx.compose.runtime.Recomposer, androidx.compose.runtime.ControlledComposition, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r0;
        androidx.compose.runtime.Recomposer $r1;
        androidx.compose.runtime.ControlledComposition $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: androidx.compose.runtime.ControlledComposition;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.ControlledComposition $composition> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r0;
        java.lang.Object $r1, r4, r6, $r16;
        androidx.compose.runtime.ControlledComposition r2, r7, $r9;
        kotlinx.coroutines.CancellableContinuation r3, r21;
        androidx.compose.runtime.Recomposer r5, $r10, $r11;
        int i0, $i1, $i2;
        kotlin.Unit $r12, $r14;
        kotlin.Result$Companion $r13;
        kotlin.coroutines.Continuation $r15;
        java.util.List $r17;
        java.util.Collection $r18;
        java.lang.Throwable $r20, r22, r24;
        java.lang.IllegalStateException r23;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: int label>;

        tableswitch($i1)
        {
            case 0: goto label1;
            default: goto label9;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r10 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0>;

        $r9 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.ControlledComposition $composition>;

        r2 = staticinvoke <androidx.compose.runtime.Recomposer: androidx.compose.runtime.ControlledComposition access$performRecompose(androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.collection.IdentityArraySet)>($r10, $r9, null);

        $r11 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0>;

        r4 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r11);

        r5 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0>;

        r6 = r4;

        entermonitor r6;

     label2:
        if r2 == null goto label3;

        r7 = r2;

        $r17 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionsAwaitingApply$p(androidx.compose.runtime.Recomposer)>(r5);

        $r18 = (java.util.Collection) $r17;

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label3;

     label3:
        i0 = staticinvoke <androidx.compose.runtime.Recomposer: int access$getConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer)>(r5);

        $i2 = i0 + -1;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer,int)>(r5, $i2);

        r21 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r5);

     label4:
        exitmonitor r6;

        goto label7;

     label5:
        $r20 := @caughtexception;

        r22 = $r20;

     label6:
        exitmonitor r6;

        throw r22;

     label7:
        r3 = r21;

        if r3 == null goto label8;

        $r15 = (kotlin.coroutines.Continuation) r3;

        $r13 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r16 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r14);

        interfaceinvoke $r15.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r16);

        goto label8;

     label8:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label9:
        r23 = new java.lang.IllegalStateException;

        specialinvoke r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r24 = (java.lang.Throwable) r23;

        throw r24;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.compose.runtime.ControlledComposition $r4;
        androidx.compose.runtime.Recomposer $r5;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        $r5 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.Recomposer this$0>;

        $r4 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: androidx.compose.runtime.ControlledComposition $composition>;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: void <init>(androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: int label>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.Recomposer this$0>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.ProduceFrameSignal $frameSignal>
    void <init>(androidx.compose.runtime.Recomposer, androidx.compose.runtime.MonotonicFrameClock, androidx.compose.runtime.ProduceFrameSignal, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r0;
        androidx.compose.runtime.Recomposer $r1;
        androidx.compose.runtime.MonotonicFrameClock $r2;
        androidx.compose.runtime.ProduceFrameSignal $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: androidx.compose.runtime.MonotonicFrameClock;

        $r3 := @parameter2: androidx.compose.runtime.ProduceFrameSignal;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.Recomposer this$0> = $r1;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock> = $r2;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.ProduceFrameSignal $frameSignal> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r0;
        java.lang.Object $r1, r2, $r8;
        int $i0;
        kotlin.Unit $r3;
        androidx.compose.runtime.Recomposer $r4;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        androidx.compose.runtime.ProduceFrameSignal $r6;
        kotlin.coroutines.Continuation $r7;
        java.lang.IllegalStateException r10;
        java.lang.Throwable r11;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.Recomposer this$0>;

        $r5 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        $r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.ProduceFrameSignal $frameSignal>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: int label> = 1;

        $r8 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$runFrameLoop(androidx.compose.runtime.Recomposer,androidx.compose.runtime.MonotonicFrameClock,androidx.compose.runtime.ProduceFrameSignal,kotlin.coroutines.Continuation)>($r4, $r5, $r6, $r7);

        if $r8 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r11 = (java.lang.Throwable) r10;

        throw r11;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.compose.runtime.ProduceFrameSignal $r4;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        androidx.compose.runtime.Recomposer $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        $r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.Recomposer this$0>;

        $r5 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.MonotonicFrameClock $parentFrameClock>;

        $r4 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: androidx.compose.runtime.ProduceFrameSignal $frameSignal>;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: void <init>(androidx.compose.runtime.Recomposer,androidx.compose.runtime.MonotonicFrameClock,androidx.compose.runtime.ProduceFrameSignal,kotlin.coroutines.Continuation)>($r6, $r5, $r4, $r2);

        $r7 = (kotlin.coroutines.Continuation) $r3;

        return $r7;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$2>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: int label>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext>
<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>
    void <init>(kotlin.coroutines.CoroutineContext, androidx.compose.runtime.Recomposer, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2 r0;
        kotlin.coroutines.CoroutineContext $r1;
        androidx.compose.runtime.Recomposer $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: androidx.compose.runtime.Recomposer;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext> = $r1;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(3, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2 r0;
        java.lang.Object $r1, r5, r7, r11, r14, $r16, $r18, $r19, $r20, $r21, $r30, $r33, $r36, $r45, $r46, r80, r82;
        kotlinx.coroutines.CoroutineScope $r2, r75;
        androidx.compose.runtime.MonotonicFrameClock r3;
        kotlin.coroutines.Continuation r4, $r17, $r29, $r32, $r83, r84;
        androidx.compose.runtime.Recomposer r6, r8, $r22, $r31, $r61, $r78;
        java.util.Set r9;
        java.util.List $r10, $r23, $r25, $r44, $r79, $r81;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i8;
        androidx.compose.runtime.ControlledComposition r12, r13;
        kotlin.Unit $r15, $r35;
        java.util.Collection $r24;
        boolean $z7, $z8, $z9, z10, z11, $z12, $z13;
        kotlinx.coroutines.CancellableContinuation $r26;
        kotlin.coroutines.CoroutineContext $r27, $r40, $r49, $r51, $r52, $r53, $r54, $r57, $r58, r73;
        kotlinx.coroutines.Job $r28, $r55, r77;
        kotlin.Result$Companion $r34;
        java.lang.String $r38, $r39, $r70, r74;
        kotlin.jvm.functions.Function2 $r42, $r62;
        kotlinx.coroutines.Job$Key $r47, $r65;
        kotlin.coroutines.CoroutineContext$Key $r48, $r66;
        kotlin.coroutines.CoroutineContext$Element $r50, $r67;
        kotlinx.coroutines.CompletableJob $r56;
        java.lang.StringBuilder $r64, $r68, r86;
        java.lang.Throwable $r72, r85, r93, r94;
        androidx.compose.runtime.ProduceFrameSignal r76, r88;
        java.lang.IllegalArgumentException r87;
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1 r89;
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1 r90;
        java.lang.IllegalStateException r91, r92;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        $r1 := @parameter0: java.lang.Object;

        r14 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i2 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: int label>;

        tableswitch($i2)
        {
            case 0: goto label01;
            case 1: goto label06;
            case 2: goto label27;
            case 3: goto label29;
            default: goto label31;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r45 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.CoroutineScope) $r45;

        $r46 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1>;

        r3 = (androidx.compose.runtime.MonotonicFrameClock) $r46;

        $r49 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext>;

        $r47 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r48 = (kotlin.coroutines.CoroutineContext$Key) $r47;

        $r50 = interfaceinvoke $r49.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r48);

        if $r50 != null goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        z10 = $z9;

        r73 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext>;

        if z10 != 0 goto label04;

        z11 = 0;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recomposeCoroutineContext may not contain a Job; found ");

        $r65 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r66 = (kotlin.coroutines.CoroutineContext$Key) $r65;

        $r67 = interfaceinvoke r73.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r66);

        $r68 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r67);

        r74 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        r87 = new java.lang.IllegalArgumentException;

        $r70 = virtualinvoke r74.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r87.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r70);

        throw r87;

     label04:
        $r51 = interfaceinvoke $r2.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r52 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext>;

        $r53 = interfaceinvoke $r51.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r52);

        $r54 = interfaceinvoke $r2.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r55 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)>($r54);

        $r56 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r55);

        $r57 = (kotlin.coroutines.CoroutineContext) $r56;

        $r58 = interfaceinvoke $r53.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r57);

        r75 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r58);

        r88 = new androidx.compose.runtime.ProduceFrameSignal;

        specialinvoke r88.<androidx.compose.runtime.ProduceFrameSignal: void <init>()>();

        r76 = r88;

        r89 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1;

        $r61 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        specialinvoke r89.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$frameLoop$1: void <init>(androidx.compose.runtime.Recomposer,androidx.compose.runtime.MonotonicFrameClock,androidx.compose.runtime.ProduceFrameSignal,kotlin.coroutines.Continuation)>($r61, r3, r76, null);

        $r62 = (kotlin.jvm.functions.Function2) r89;

        r77 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r62, 3, null);

     label05:
        $r78 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        $z12 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getShouldKeepRecomposing(androidx.compose.runtime.Recomposer)>($r78);

        if $z12 == 0 goto label26;

        $r31 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        $r32 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0> = r75;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1> = r76;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$2> = r77;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: int label> = 1;

        $r33 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$awaitWorkAvailable(androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>($r31, $r32);

        if $r33 != r14 goto label07;

        return r14;

     label06:
        $r19 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$2>;

        r77 = (kotlinx.coroutines.Job) $r19;

        $r20 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1>;

        r76 = (androidx.compose.runtime.ProduceFrameSignal) $r20;

        $r21 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0>;

        r75 = (kotlinx.coroutines.CoroutineScope) $r21;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r22 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        r5 = staticinvoke <androidx.compose.runtime.Recomposer: java.lang.Object access$getStateLock$p(androidx.compose.runtime.Recomposer)>($r22);

        r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        r7 = r5;

        entermonitor r7;

     label08:
        r8 = r6;

        $r23 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r8);

        $r24 = (java.util.Collection) $r23;

        $z7 = interfaceinvoke $r24.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label09;

        $z13 = 1;

        goto label10;

     label09:
        $z13 = 0;

     label10:
        if $z13 == 0 goto label15;

        $r79 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r8);

        i4 = 0;

        i5 = interfaceinvoke $r79.<java.util.List: int size()>();

     label11:
        if i4 >= i5 goto label14;

        r80 = interfaceinvoke $r79.<java.util.List: java.lang.Object get(int)>(i4);

        r9 = (java.util.Set) r80;

        $r10 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getKnownCompositions$p(androidx.compose.runtime.Recomposer)>(r8);

        i6 = 0;

        i0 = interfaceinvoke $r10.<java.util.List: int size()>();

     label12:
        if i6 >= i0 goto label13;

        r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i6);

        r12 = (androidx.compose.runtime.ControlledComposition) r11;

        interfaceinvoke r12.<androidx.compose.runtime.ControlledComposition: void recordModificationsOf(java.util.Set)>(r9);

        i6 = i6 + 1;

        goto label12;

     label13:
        i4 = i4 + 1;

        goto label11;

     label14:
        $r44 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getSnapshotInvalidations$p(androidx.compose.runtime.Recomposer)>(r8);

        interfaceinvoke $r44.<java.util.List: void clear()>();

     label15:
        $r81 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r8);

        i7 = 0;

        i8 = interfaceinvoke $r81.<java.util.List: int size()>();

     label16:
        if i7 >= i8 goto label17;

        r82 = interfaceinvoke $r81.<java.util.List: java.lang.Object get(int)>(i7);

        r13 = (androidx.compose.runtime.ControlledComposition) r82;

        i1 = staticinvoke <androidx.compose.runtime.Recomposer: int access$getConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer)>(r6);

        $i3 = i1 + 1;

        staticinvoke <androidx.compose.runtime.Recomposer: void access$setConcurrentCompositionsOutstanding$p(androidx.compose.runtime.Recomposer,int)>(r6, $i3);

        $r40 = staticinvoke <androidx.compose.runtime.CompositionKt: kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext(androidx.compose.runtime.ControlledComposition)>(r13);

        r90 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1;

        specialinvoke r90.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2$2$1$1: void <init>(androidx.compose.runtime.Recomposer,androidx.compose.runtime.ControlledComposition,kotlin.coroutines.Continuation)>(r6, r13, null);

        $r42 = (kotlin.jvm.functions.Function2) r90;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r75, $r40, null, $r42, 2, null);

        i7 = i7 + 1;

        goto label16;

     label17:
        $r25 = staticinvoke <androidx.compose.runtime.Recomposer: java.util.List access$getCompositionInvalidations$p(androidx.compose.runtime.Recomposer)>(r8);

        interfaceinvoke $r25.<java.util.List: void clear()>();

        $r26 = staticinvoke <androidx.compose.runtime.Recomposer: kotlinx.coroutines.CancellableContinuation access$deriveStateLocked(androidx.compose.runtime.Recomposer)>(r8);

        if $r26 == null goto label18;

        r91 = new java.lang.IllegalStateException;

        $r38 = "called outside of runRecomposeAndApplyChanges";

        $r39 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r91.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r39);

        r93 = (java.lang.Throwable) r91;

        throw r93;

     label18:
        $z8 = staticinvoke <androidx.compose.runtime.Recomposer: boolean access$getHasConcurrentFrameWorkLocked(androidx.compose.runtime.Recomposer)>(r6);

        if $z8 == 0 goto label19;

        $r83 = virtualinvoke r76.<androidx.compose.runtime.ProduceFrameSignal: kotlin.coroutines.Continuation requestFrameLocked()>();

        goto label20;

     label19:
        $r83 = null;

     label20:
        r84 = $r83;

     label21:
        exitmonitor r7;

        goto label24;

     label22:
        $r72 := @caughtexception;

        r85 = $r72;

     label23:
        exitmonitor r7;

        throw r85;

     label24:
        r4 = r84;

        if r4 == null goto label25;

        $r34 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r35 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r36 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r35);

        interfaceinvoke r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r36);

        goto label05;

     label25:
        goto label05;

     label26:
        $r27 = interfaceinvoke r75.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r28 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)>($r27);

        $r29 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0> = r77;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1> = null;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$2> = null;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: int label> = 2;

        $r30 = staticinvoke <kotlinx.coroutines.JobKt: java.lang.Object cancelAndJoin(kotlinx.coroutines.Job,kotlin.coroutines.Continuation)>($r28, $r29);

        if $r30 != r14 goto label28;

        return r14;

     label27:
        $r16 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0>;

        r77 = (kotlinx.coroutines.Job) $r16;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label28:
        $r17 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0> = null;

        r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: int label> = 3;

        $r18 = staticinvoke <kotlinx.coroutines.JobKt: java.lang.Object cancelAndJoin(kotlinx.coroutines.Job,kotlin.coroutines.Continuation)>(r77, $r17);

        if $r18 != r14 goto label30;

        return r14;

     label29:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label30:
        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r15;

     label31:
        r92 = new java.lang.IllegalStateException;

        specialinvoke r92.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        r94 = (java.lang.Throwable) r92;

        throw r94;

        catch java.lang.Throwable from label08 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, androidx.compose.runtime.MonotonicFrameClock, kotlin.coroutines.Continuation)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2 r0, r4, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        androidx.compose.runtime.MonotonicFrameClock r2;
        kotlin.coroutines.Continuation r3;
        androidx.compose.runtime.Recomposer $r6;
        kotlin.coroutines.CoroutineContext $r7;
        kotlin.Unit $r8;
        java.lang.Object $r9;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: androidx.compose.runtime.MonotonicFrameClock;

        r3 := @parameter2: kotlin.coroutines.Continuation;

        $r5 = new androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        $r7 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: kotlin.coroutines.CoroutineContext $recomposeCoroutineContext>;

        $r6 = r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: androidx.compose.runtime.Recomposer this$0>;

        specialinvoke $r5.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: void <init>(kotlin.coroutines.CoroutineContext,androidx.compose.runtime.Recomposer,kotlin.coroutines.Continuation)>($r7, $r6, r3);

        r4 = $r5;

        r4.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$0> = r1;

        r4.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object L$1> = r2;

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r9 = virtualinvoke r4.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object invokeSuspend(java.lang.Object)>($r8);

        return $r9;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2 r0;
        java.lang.Object r1, r2, r3, $r7;
        kotlin.coroutines.Continuation $r4;
        androidx.compose.runtime.MonotonicFrameClock $r5;
        kotlinx.coroutines.CoroutineScope $r6;

        r0 := @this: androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (kotlinx.coroutines.CoroutineScope) r1;

        $r5 = (androidx.compose.runtime.MonotonicFrameClock) r2;

        $r4 = (kotlin.coroutines.Continuation) r3;

        $r7 = virtualinvoke r0.<androidx.compose.runtime.Recomposer$runRecomposeConcurrentlyAndApplyChanges$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,androidx.compose.runtime.MonotonicFrameClock,kotlin.coroutines.Continuation)>($r6, $r5, $r4);

        return $r7;
    }

androidx.compose.runtime.Recomposer$State
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State InactivePendingWork>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State PendingWork>
<androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.compose.runtime.Recomposer$State r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.Recomposer$State;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.compose.runtime.Recomposer$State[] values()
    {
        androidx.compose.runtime.Recomposer$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.compose.runtime.Recomposer$State[]) $r1;

        return $r2;
    }

    public static androidx.compose.runtime.Recomposer$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.compose.runtime.Recomposer$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/compose/runtime/Recomposer$State;", r0);

        $r2 = (androidx.compose.runtime.Recomposer$State) $r1;

        return $r2;
    }

    private static final androidx.compose.runtime.Recomposer$State[] $values()
    {
        androidx.compose.runtime.Recomposer$State[] r0;
        androidx.compose.runtime.Recomposer$State $r1, $r2, $r3, $r4, $r5, $r6;

        r0 = newarray (androidx.compose.runtime.Recomposer$State)[6];

        $r1 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown>;

        r0[0] = $r1;

        $r2 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown>;

        r0[1] = $r2;

        $r3 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive>;

        r0[2] = $r3;

        $r4 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State InactivePendingWork>;

        r0[3] = $r4;

        $r5 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle>;

        r0[4] = $r5;

        $r6 = <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State PendingWork>;

        r0[5] = $r6;

        return r0;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.Recomposer$State $r0, $r1, $r2, $r3, $r4, $r5;
        androidx.compose.runtime.Recomposer$State[] $r6;

        $r0 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r0.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("ShutDown", 0);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShutDown> = $r0;

        $r1 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r1.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("ShuttingDown", 1);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State ShuttingDown> = $r1;

        $r2 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r2.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("Inactive", 2);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Inactive> = $r2;

        $r3 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r3.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("InactivePendingWork", 3);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State InactivePendingWork> = $r3;

        $r4 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r4.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("Idle", 4);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State Idle> = $r4;

        $r5 = new androidx.compose.runtime.Recomposer$State;

        specialinvoke $r5.<androidx.compose.runtime.Recomposer$State: void <init>(java.lang.String,int)>("PendingWork", 5);

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State PendingWork> = $r5;

        $r6 = staticinvoke <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State[] $values()>();

        <androidx.compose.runtime.Recomposer$State: androidx.compose.runtime.Recomposer$State[] $VALUES> = $r6;

        return;
    }

androidx.compose.runtime.Recomposer$writeObserverOf$1
<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.ControlledComposition $composition>
<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues>
    void <init>(androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.collection.IdentityArraySet)
    {
        androidx.compose.runtime.Recomposer$writeObserverOf$1 r0;
        androidx.compose.runtime.ControlledComposition $r1;
        androidx.compose.runtime.collection.IdentityArraySet $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$writeObserverOf$1;

        $r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        $r2 := @parameter1: androidx.compose.runtime.collection.IdentityArraySet;

        r0.<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.ControlledComposition $composition> = $r1;

        r0.<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$writeObserverOf$1 r0;
        java.lang.Object r1;
        androidx.compose.runtime.ControlledComposition $r2;
        androidx.compose.runtime.collection.IdentityArraySet $r3;

        r0 := @this: androidx.compose.runtime.Recomposer$writeObserverOf$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.ControlledComposition $composition>;

        interfaceinvoke $r2.<androidx.compose.runtime.ControlledComposition: void recordWriteOf(java.lang.Object)>(r1);

        $r3 = r0.<androidx.compose.runtime.Recomposer$writeObserverOf$1: androidx.compose.runtime.collection.IdentityArraySet $modifiedValues>;

        if $r3 == null goto label1;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityArraySet: boolean add(java.lang.Object)>(r1);

        goto label1;

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.Recomposer$writeObserverOf$1 r0;
        java.lang.Object r1;
        kotlin.Unit $r2;

        r0 := @this: androidx.compose.runtime.Recomposer$writeObserverOf$1;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.runtime.Recomposer$writeObserverOf$1: void invoke(java.lang.Object)>(r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

