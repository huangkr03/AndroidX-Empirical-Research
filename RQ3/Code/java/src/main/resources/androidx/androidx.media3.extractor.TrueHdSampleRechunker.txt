androidx.media3.extractor.TrueHdSampleRechunker
<androidx.media3.extractor.TrueHdSampleRechunker: byte[] syncframePrefix>
<androidx.media3.extractor.TrueHdSampleRechunker: boolean foundSyncframe>
<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount>
<androidx.media3.extractor.TrueHdSampleRechunker: long chunkTimeUs>
<androidx.media3.extractor.TrueHdSampleRechunker: int chunkFlags>
<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSize>
<androidx.media3.extractor.TrueHdSampleRechunker: int chunkOffset>
    public void <init>()
    {
        androidx.media3.extractor.TrueHdSampleRechunker r0;
        byte[] $r1;

        r0 := @this: androidx.media3.extractor.TrueHdSampleRechunker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[10];

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: byte[] syncframePrefix> = $r1;

        return;
    }

    public void reset()
    {
        androidx.media3.extractor.TrueHdSampleRechunker r0;

        r0 := @this: androidx.media3.extractor.TrueHdSampleRechunker;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: boolean foundSyncframe> = 0;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount> = 0;

        return;
    }

    public void startSample(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.TrueHdSampleRechunker r0;
        androidx.media3.extractor.ExtractorInput r1;
        boolean $z0;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: androidx.media3.extractor.TrueHdSampleRechunker;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $z0 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: boolean foundSyncframe>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: byte[] syncframePrefix>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void peekFully(byte[],int,int)>($r2, 0, 10);

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void resetPeekPosition()>();

        $r3 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: byte[] syncframePrefix>;

        $i0 = staticinvoke <androidx.media3.extractor.Ac3Util: int parseTrueHdSyncframeAudioSampleCount(byte[])>($r3);

        if $i0 != 0 goto label2;

        return;

     label2:
        r0.<androidx.media3.extractor.TrueHdSampleRechunker: boolean foundSyncframe> = 1;

        return;
    }

    public void sampleMetadata(androidx.media3.extractor.TrackOutput, long, int, int, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.extractor.TrueHdSampleRechunker r0;
        androidx.media3.extractor.TrackOutput r1;
        long l0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        androidx.media3.extractor.TrackOutput$CryptoData r2;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.extractor.TrueHdSampleRechunker;

        r1 := @parameter0: androidx.media3.extractor.TrackOutput;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: androidx.media3.extractor.TrackOutput$CryptoData;

        $i5 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkOffset>;

        $i4 = i2 + i3;

        if $i5 > $i4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z1, "TrueHD chunk samples must be contiguous in the sample queue.");

        $z0 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: boolean foundSyncframe>;

        if $z0 != 0 goto label3;

        return;

     label3:
        $i6 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount>;

        $i7 = $i6 + 1;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount> = $i7;

        if $i6 != 0 goto label4;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: long chunkTimeUs> = l0;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkFlags> = i1;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSize> = 0;

     label4:
        $i8 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSize>;

        $i9 = $i8 + i2;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSize> = $i9;

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkOffset> = i3;

        $i10 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount>;

        if $i10 < 16 goto label5;

        virtualinvoke r0.<androidx.media3.extractor.TrueHdSampleRechunker: void outputPendingSampleMetadata(androidx.media3.extractor.TrackOutput,androidx.media3.extractor.TrackOutput$CryptoData)>(r1, r2);

     label5:
        return;
    }

    public void outputPendingSampleMetadata(androidx.media3.extractor.TrackOutput, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.extractor.TrueHdSampleRechunker r0;
        androidx.media3.extractor.TrackOutput r1;
        androidx.media3.extractor.TrackOutput$CryptoData r2;
        int $i0, $i1, $i2, $i3;
        long $l4;

        r0 := @this: androidx.media3.extractor.TrueHdSampleRechunker;

        r1 := @parameter0: androidx.media3.extractor.TrackOutput;

        r2 := @parameter1: androidx.media3.extractor.TrackOutput$CryptoData;

        $i0 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount>;

        if $i0 <= 0 goto label1;

        $l4 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: long chunkTimeUs>;

        $i3 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkFlags>;

        $i2 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSize>;

        $i1 = r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkOffset>;

        interfaceinvoke r1.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($l4, $i3, $i2, $i1, r2);

        r0.<androidx.media3.extractor.TrueHdSampleRechunker: int chunkSampleCount> = 0;

     label1:
        return;
    }

