kotlinx.coroutines.internal.ArrayQueue
<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements>
<kotlinx.coroutines.internal.ArrayQueue: int head>
<kotlinx.coroutines.internal.ArrayQueue: int tail>
    public void <init>()
    {
        kotlinx.coroutines.internal.ArrayQueue $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlinx.coroutines.internal.ArrayQueue;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[16];

        $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements> = $r1;

        return;
    }

    private final void ensureCapacity()
    {
        kotlinx.coroutines.internal.ArrayQueue $r0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1, $r2;

        $r0 := @this: kotlinx.coroutines.internal.ArrayQueue;

        $r1 = $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements>;

        $i1 = lengthof $r1;

        $i0 = $i1 + $i1;

        $r2 = newarray (java.lang.Object)[$i0];

        $i0 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r1, $r2, 0, $i0, 0, 10, null);

        $r1 = $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements>;

        $i2 = lengthof $r1;

        $i0 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int head>;

        $i2 = $i2 - $i0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r1, $r2, $i2, 0, $i0, 4, null);

        $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements> = $r2;

        $r0.<kotlinx.coroutines.internal.ArrayQueue: int head> = 0;

        $r0.<kotlinx.coroutines.internal.ArrayQueue: int tail> = $i1;

        return;
    }

    public final void addLast(java.lang.Object)
    {
        kotlinx.coroutines.internal.ArrayQueue $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        int $i0, $i1;

        $r0 := @this: kotlinx.coroutines.internal.ArrayQueue;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element");

        $r2 = $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements>;

        $i0 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int tail>;

        $r2[$i0] = $r1;

        $i0 = $i0 + 1;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $i0 = $i1 & $i0;

        $r0.<kotlinx.coroutines.internal.ArrayQueue: int tail> = $i0;

        $i1 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int head>;

        if $i0 != $i1 goto label1;

        specialinvoke $r0.<kotlinx.coroutines.internal.ArrayQueue: void ensureCapacity()>();

     label1:
        return;
    }

    public final boolean isEmpty()
    {
        kotlinx.coroutines.internal.ArrayQueue $r0;
        int $i0, $i1;

        $r0 := @this: kotlinx.coroutines.internal.ArrayQueue;

        $i1 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int head>;

        $i0 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int tail>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.Object removeFirstOrNull()
    {
        kotlinx.coroutines.internal.ArrayQueue $r0;
        java.lang.Object $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlinx.coroutines.internal.ArrayQueue;

        $i0 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int head>;

        $i1 = $r0.<kotlinx.coroutines.internal.ArrayQueue: int tail>;

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r2 = $r0.<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements>;

        $r1 = $r2[$i0];

        $r2[$i0] = null;

        $i0 = $i0 + 1;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $i0 = $i0 & $i1;

        $r0.<kotlinx.coroutines.internal.ArrayQueue: int head> = $i0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type T of kotlinx.coroutines.internal.ArrayQueue");

        return $r1;
    }

