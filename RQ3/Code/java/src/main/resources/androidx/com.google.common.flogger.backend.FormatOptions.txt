com.google.common.flogger.backend.FormatOptions
<com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions DEFAULT>
<com.google.common.flogger.backend.FormatOptions: long ENCODED_FLAG_INDICES>
<com.google.common.flogger.backend.FormatOptions: int flags>
<com.google.common.flogger.backend.FormatOptions: int precision>
<com.google.common.flogger.backend.FormatOptions: int width>
    static void <clinit>()
    {
        long $l0, $l3, $l5;
        int $i1, $i2;
        java.lang.String $r0;
        char $c4;
        com.google.common.flogger.backend.FormatOptions $r1;

        $l0 = 0L;

        $i1 = 0;

     label1:
        $r0 = " #(+,-0";

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label2;

        $l3 = (long) $i1;

        $l3 = $l3 + 1L;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $i2 = $c4 + -32;

        $l5 = (long) $i2;

        $l5 = $l5 * 3L;

        $i2 = (int) $l5;

        $l3 = $l3 << $i2;

        $l0 = $l0 | $l3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        <com.google.common.flogger.backend.FormatOptions: long ENCODED_FLAG_INDICES> = $l0;

        $r1 = new com.google.common.flogger.backend.FormatOptions;

        specialinvoke $r1.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>(0, -1, -1);

        <com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions DEFAULT> = $r1;

        return;
    }

    private void <init>(int, int, int)
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int $i0, $i1, $i2;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.flogger.backend.FormatOptions: int flags> = $i0;

        $r0.<com.google.common.flogger.backend.FormatOptions: int width> = $i1;

        $r0.<com.google.common.flogger.backend.FormatOptions: int precision> = $i2;

        return;
    }

    static boolean checkFlagConsistency(int, boolean)
    {
        boolean $z0;
        int $i0, $i1;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 = $i0 & 9;

        if $i1 != 9 goto label1;

        return 0;

     label1:
        $i0 = $i0 & 96;

        if $i0 != 96 goto label2;

        return 0;

     label2:
        if $i0 == 0 goto label3;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static com.google.common.flogger.backend.FormatOptions getDefault()
    {
        com.google.common.flogger.backend.FormatOptions r0;

        r0 = <com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions DEFAULT>;

        return r0;
    }

    private static int indexOfFlagCharacter(char)
    {
        char $c0;
        long $l1;
        int $i2;

        $c0 := @parameter0: char;

        $l1 = <com.google.common.flogger.backend.FormatOptions: long ENCODED_FLAG_INDICES>;

        $i2 = $c0 + -32;

        $i2 = $i2 * 3;

        $l1 = $l1 >>> $i2;

        $l1 = $l1 & 7L;

        $i2 = (int) $l1;

        $i2 = $i2 + -1;

        return $i2;
    }

    public static com.google.common.flogger.backend.FormatOptions parse(java.lang.String, int, int, boolean) throws com.google.common.flogger.parser.ParseException
    {
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.lang.String $r0;
        boolean $z0;
        com.google.common.flogger.backend.FormatOptions $r1, r3;
        char $c4;
        com.google.common.flogger.parser.ParseException $r2;
        java.lang.Throwable r4;

        $r0 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        if $i1 != $i0 goto label01;

        if $z0 != 0 goto label01;

        $r1 = <com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions DEFAULT>;

        return $r1;

     label01:
        if $z0 == 0 goto label02;

        $i2 = 128;

        goto label03;

     label02:
        $i2 = 0;

     label03:
        if $i1 != $i0 goto label04;

        r3 = new com.google.common.flogger.backend.FormatOptions;

        specialinvoke r3.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>($i2, -1, -1);

        return r3;

     label04:
        $i3 = $i1 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c4 < 32 goto label09;

        if $c4 <= 48 goto label05;

        goto label09;

     label05:
        $i1 = staticinvoke <com.google.common.flogger.backend.FormatOptions: int indexOfFlagCharacter(char)>($c4);

        if $i1 >= 0 goto label07;

        if $c4 != 46 goto label06;

        r3 = new com.google.common.flogger.backend.FormatOptions;

        $i1 = staticinvoke <com.google.common.flogger.backend.FormatOptions: int parsePrecision(java.lang.String,int,int)>($r0, $i3, $i0);

        specialinvoke r3.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>($i2, -1, $i1);

        return r3;

     label06:
        $i1 = $i3 + -1;

        $r2 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("invalid flag", $r0, $i1);

        r4 = (java.lang.Throwable) $r2;

        throw r4;

     label07:
        $i1 = 1 << $i1;

        $i5 = $i2 & $i1;

        if $i5 != 0 goto label08;

        $i2 = $i2 | $i1;

        $i1 = $i3;

        goto label03;

     label08:
        $i1 = $i3 + -1;

        $r2 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("repeated flag", $r0, $i1);

        r4 = (java.lang.Throwable) $r2;

        throw r4;

     label09:
        $i1 = $i3 + -1;

        if $c4 > 57 goto label15;

        $i5 = $c4 + -48;

     label10:
        if $i3 != $i0 goto label11;

        r3 = new com.google.common.flogger.backend.FormatOptions;

        specialinvoke r3.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>($i2, $i5, -1);

        return r3;

     label11:
        $i6 = $i3 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 46 goto label12;

        r3 = new com.google.common.flogger.backend.FormatOptions;

        $i1 = staticinvoke <com.google.common.flogger.backend.FormatOptions: int parsePrecision(java.lang.String,int,int)>($r0, $i6, $i0);

        specialinvoke r3.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>($i2, $i5, $i1);

        return r3;

     label12:
        $i3 = $c4 + -48;

        $c4 = (char) $i3;

        if $c4 >= 10 goto label14;

        $i3 = $i5 * 10;

        $i5 = $i3 + $c4;

        if $i5 > 999999 goto label13;

        $i3 = $i6;

        goto label10;

     label13:
        $r2 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException withBounds(java.lang.String,java.lang.String,int,int)>("width too large", $r0, $i1, $i0);

        r4 = (java.lang.Throwable) $r2;

        throw r4;

     label14:
        $i1 = $i6 + -1;

        $r2 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("invalid width character", $r0, $i1);

        r4 = (java.lang.Throwable) $r2;

        throw r4;

     label15:
        $r2 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("invalid flag", $r0, $i1);

        goto label16;

     label16:
        r4 = (java.lang.Throwable) $r2;

        throw r4;
    }

    private static int parsePrecision(java.lang.String, int, int) throws com.google.common.flogger.parser.ParseException
    {
        java.lang.String $r0;
        int $i0, $i1, $i2, $i3, $i5;
        char $c4;
        com.google.common.flogger.parser.ParseException $r1;
        java.lang.Throwable r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 == $i1 goto label6;

        $i2 = 0;

        $i3 = $i0;

     label1:
        if $i3 >= $i1 goto label4;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i5 = $c4 + -48;

        $c4 = (char) $i5;

        if $c4 >= 10 goto label3;

        $i2 = $i2 * 10;

        $i2 = $i2 + $c4;

        if $i2 > 999999 goto label2;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $r1 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException withBounds(java.lang.String,java.lang.String,int,int)>("precision too large", $r0, $i0, $i1);

        r2 = (java.lang.Throwable) $r1;

        throw r2;

     label3:
        $r1 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("invalid precision character", $r0, $i3);

        r2 = (java.lang.Throwable) $r1;

        throw r2;

     label4:
        if $i2 != 0 goto label8;

        $i3 = $i0 + 1;

        if $i1 != $i3 goto label5;

        return $i2;

     label5:
        $r1 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException withBounds(java.lang.String,java.lang.String,int,int)>("invalid precision", $r0, $i0, $i1);

        r2 = (java.lang.Throwable) $r1;

        throw r2;

     label6:
        $i0 = $i0 + -1;

        $r1 = staticinvoke <com.google.common.flogger.parser.ParseException: com.google.common.flogger.parser.ParseException atPosition(java.lang.String,java.lang.String,int)>("missing precision", $r0, $i0);

        goto label7;

     label7:
        r2 = (java.lang.Throwable) $r1;

        throw r2;

     label8:
        return $i2;
    }

    static int parseValidFlags(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        char $c3;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $i0 = 0;

        if $z0 == 0 goto label1;

        $i1 = 128;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label4;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = staticinvoke <com.google.common.flogger.backend.FormatOptions: int indexOfFlagCharacter(char)>($c3);

        if $i2 < 0 goto label3;

        $i2 = 1 << $i2;

        $i1 = $i1 | $i2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid flags: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label4:
        return $i1;
    }

    public java.lang.StringBuilder appendPrintfOptions(java.lang.StringBuilder)
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        java.lang.StringBuilder $r1, $r3;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.String $r2;
        char $c3;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $r1 := @parameter0: java.lang.StringBuilder;

        $z0 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 != 0 goto label5;

        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i0 = $i0 & -129;

        $i1 = 0;

     label1:
        $i2 = 1 << $i1;

        if $i2 > $i0 goto label3;

        $i2 = $i2 & $i0;

        if $i2 == 0 goto label2;

        $r2 = " #(+,-0";

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        if $i0 == -1 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label4:
        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        if $i0 == -1 goto label5;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label5:
        return $r1;
    }

    public boolean areValidFor(com.google.common.flogger.backend.FormatChar)
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        com.google.common.flogger.backend.FormatChar $r1;
        int $i0;
        com.google.common.flogger.backend.FormatType $r2;
        boolean $z0;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $r1 := @parameter0: com.google.common.flogger.backend.FormatChar;

        $i0 = virtualinvoke $r1.<com.google.common.flogger.backend.FormatChar: int getAllowedFlags()>();

        $r2 = virtualinvoke $r1.<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatType getType()>();

        $z0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatType: boolean supportsPrecision()>();

        $z0 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatOptions: boolean validate(int,boolean)>($i0, $z0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.flogger.backend.FormatOptions $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.flogger.backend.FormatOptions;

        if $z0 == 0 goto label3;

        $r2 = (com.google.common.flogger.backend.FormatOptions) $r1;

        $i0 = $r2.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        if $i0 != $i1 goto label2;

        $i0 = $r2.<com.google.common.flogger.backend.FormatOptions: int width>;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        if $i0 != $i1 goto label2;

        $i0 = $r2.<com.google.common.flogger.backend.FormatOptions: int precision>;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public com.google.common.flogger.backend.FormatOptions filter(int, boolean, boolean)
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $i0 := @parameter0: int;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $z0 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i0 = $i0 & $i1;

        if $z1 == 0 goto label2;

        $i2 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        goto label3;

     label2:
        $i2 = -1;

     label3:
        if $z2 == 0 goto label4;

        $i3 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        goto label5;

     label4:
        $i3 = -1;

     label5:
        if $i0 != 0 goto label6;

        if $i2 != -1 goto label6;

        if $i3 != -1 goto label6;

        $r0 = <com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions DEFAULT>;

        return $r0;

     label6:
        if $i0 != $i1 goto label7;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        if $i2 != $i1 goto label7;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        if $i3 != $i1 goto label7;

        return $r0;

     label7:
        $r0 = new com.google.common.flogger.backend.FormatOptions;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatOptions: void <init>(int,int,int)>($i0, $i2, $i3);

        return $r0;
    }

    public int getFlags()
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int i0;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        return i0;
    }

    public int getPrecision()
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int i0;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        return i0;
    }

    public int getWidth()
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int i0;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        return i0;
    }

    public int hashCode()
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int $i0, $i1;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i0 = $i0 * 31;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int width>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isDefault()
    {
        com.google.common.flogger.backend.FormatOptions $r0, $r1;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $r1 = staticinvoke <com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions getDefault()>();

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean shouldUpperCase()
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        int $i0;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean validate(int, boolean)
    {
        com.google.common.flogger.backend.FormatOptions $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        $r0 := @this: com.google.common.flogger.backend.FormatOptions;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        $z2 = 1;

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $i1 = $r0.<com.google.common.flogger.backend.FormatOptions: int flags>;

        $i0 = $i0 ^ -1;

        $i0 = $i0 & $i1;

        if $i0 == 0 goto label2;

        return 0;

     label2:
        if $z0 != 0 goto label3;

        $i0 = $r0.<com.google.common.flogger.backend.FormatOptions: int precision>;

        if $i0 == -1 goto label3;

        return 0;

     label3:
        $i0 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatOptions: int getWidth()>();

        if $i0 == -1 goto label4;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $z0 = staticinvoke <com.google.common.flogger.backend.FormatOptions: boolean checkFlagConsistency(int,boolean)>($i1, $z2);

        return $z0;
    }

