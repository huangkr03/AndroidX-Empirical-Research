androidx.compose.ui.layout.SubcomposeSlotReusePolicy
<androidx.compose.ui.layout.SubcomposeSlotReusePolicy: void getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet)>
<androidx.compose.ui.layout.SubcomposeSlotReusePolicy: boolean areCompatible(java.lang.Object,java.lang.Object)>
androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet
<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>
<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: int $stable>
    public void <init>(java.util.Set)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "set");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set> = r1;

        return;
    }

    public void <init>(java.util.Set, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        java.util.LinkedHashSet $r2;
        java.util.Set r3;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r3 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        r3 = (java.util.Set) $r2;

     label1:
        specialinvoke r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: void <init>(java.util.Set)>(r3);

        return;
    }

    public int getSize()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean isEmpty()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public final boolean add$ui_release(java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public final boolean remove(java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public final boolean removeAll(java.util.Collection)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotIds");

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public final boolean removeAll(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.Set $r2;
        java.lang.Iterable $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "predicate");

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $r3 = (java.lang.Iterable) $r2;

        $z0 = staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.lang.Iterable,kotlin.jvm.functions.Function1)>($r3, r1);

        return $z0;
    }

    public final boolean retainAll(java.util.Collection)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotIds");

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public final boolean retainAll(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.Set $r2;
        java.lang.Iterable $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "predicate");

        $r2 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        $r3 = (java.lang.Iterable) $r2;

        $z0 = staticinvoke <kotlin.collections.CollectionsKt: boolean retainAll(java.lang.Iterable,kotlin.jvm.functions.Function1)>($r3, r1);

        return $z0;
    }

    public final void clear()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Set set>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeIf(java.util.function.Predicate)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.function.Predicate r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.util.function.Predicate;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void <init>()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        specialinvoke r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: void <init>(java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        return;
    }

    public final volatile int size()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        int $i0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $i0 = virtualinvoke r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: int getSize()>();

        return $i0;
    }

    public volatile boolean add(java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: boolean add$ui_release(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = (java.util.Collection) r0;

        $r3 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, r1);

        return $r3;
    }

    public java.lang.Object[] toArray()
    {
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: int $stable> = 8;

        return;
    }

