androidx.room.compiler.processing.ksp.KspPrimitiveType
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSType, androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSType r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSType;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksType");

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r1, r2, r3);

        return;
    }

    protected com.squareup.javapoet.TypeName resolveJTypeName()
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.javapoet.TypeName $r4, $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeJavaPoetExtKt: com.squareup.javapoet.TypeName asJTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        $r5 = staticinvoke <androidx.room.compiler.processing.JavaPoetExtKt: com.squareup.javapoet.TypeName tryUnbox(com.squareup.javapoet.TypeName)>($r4);

        return $r5;
    }

    protected com.squareup.kotlinpoet.TypeName resolveKTypeName()
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.kotlinpoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        return $r4;
    }

    public androidx.room.compiler.processing.ksp.KspType boxed()
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;
        com.google.devtools.ksp.symbol.KSType $r2;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r3 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r2, 0);

        return $r3;
    }

    protected androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        androidx.room.compiler.processing.XNullability r1;
        int[] $r2;
        int $i0, $i1;
        androidx.room.compiler.processing.ksp.KspType $r3, $r7;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        r1 := @parameter0: androidx.room.compiler.processing.XNullability;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "nullability");

        $r2 = <androidx.room.compiler.processing.ksp.KspPrimitiveType$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.processing.XNullability: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r7 = (androidx.room.compiler.processing.ksp.KspType) r0;

        goto label4;

     label2:
        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspType boxed()>();

        $r7 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType makeNullable()>();

        goto label4;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r5 = "cannot set nullability to unknown in KSP";

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label4:
        return $r7;
    }

    public androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0, $r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSType $r4;
        androidx.room.compiler.processing.ksp.KspType $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jvmTypeResolver");

        $r2 = new androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspPrimitiveType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r4, r1);

        $r5 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r5;
    }

    public volatile androidx.room.compiler.processing.XType boxed()
    {
        androidx.room.compiler.processing.ksp.KspPrimitiveType r0;
        androidx.room.compiler.processing.ksp.KspType $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspPrimitiveType: androidx.room.compiler.processing.ksp.KspType boxed()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

androidx.room.compiler.processing.ksp.KspPrimitiveType$WhenMappings
<androidx.room.compiler.processing.ksp.KspPrimitiveType$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.processing.XNullability[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.processing.XNullability $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.processing.XNullability: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.processing.XNullability: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.processing.ksp.KspPrimitiveType$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

