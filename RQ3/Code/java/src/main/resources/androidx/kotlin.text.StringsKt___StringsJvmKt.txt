kotlin.text.StringsKt___StringsJvmKt
    public void <init>()
    {
        kotlin.text.StringsKt___StringsJvmKt $r0;

        $r0 := @this: kotlin.text.StringsKt___StringsJvmKt;

        specialinvoke $r0.<kotlin.text.StringsKt__StringsKt: void <init>()>();

        return;
    }

    private static final char elementAt(java.lang.CharSequence, int)
    {
        int $i0;
        char $c1;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $c1 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        return $c1;
    }

    public static final java.lang.Character max(java.lang.CharSequence)
    {
        java.lang.Character $r0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.Character maxOrNull(java.lang.CharSequence)>($r1);

        return $r0;
    }

    public static final java.lang.Character maxBy(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.CharSequence $r1;
        int $i0;
        boolean $z0;
        java.lang.Character $r2;
        char $c1, $c2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = null;

        goto label7;

     label3:
        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(0);

        $c2 = $c1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

        if $i0 != 0 goto label4;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        goto label7;

     label4:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label5:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 >= 0 goto label5;

        $c2 = $c1;

        $r4 = $r7;

        goto label5;

     label6:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

     label7:
        return $r2;
    }

    public static final java.lang.Character maxWith(java.lang.CharSequence, java.util.Comparator)
    {
        java.util.Comparator $r0;
        java.lang.Character $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.Character maxWithOrNull(java.lang.CharSequence,java.util.Comparator)>($r2, $r0);

        return $r1;
    }

    public static final java.lang.Character min(java.lang.CharSequence)
    {
        java.lang.Character $r0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.Character minOrNull(java.lang.CharSequence)>($r1);

        return $r0;
    }

    public static final java.lang.Character minBy(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.CharSequence $r1;
        int $i0;
        boolean $z0;
        java.lang.Character $r2;
        char $c1, $c2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        kotlin.ranges.IntRange $r5;
        kotlin.collections.IntIterator $r6;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "selector");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = null;

        goto label7;

     label3:
        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(0);

        $c2 = $c1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

        if $i0 != 0 goto label4;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        goto label7;

     label4:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label5:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i0 <= 0 goto label5;

        $c2 = $c1;

        $r4 = $r7;

        goto label5;

     label6:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

     label7:
        return $r2;
    }

    public static final java.lang.Character minWith(java.lang.CharSequence, java.util.Comparator)
    {
        java.util.Comparator $r0;
        java.lang.Character $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.Character minWithOrNull(java.lang.CharSequence,java.util.Comparator)>($r2, $r0);

        return $r1;
    }

    private static final java.math.BigDecimal sumOfBigDecimal(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        java.lang.CharSequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.math.BigDecimal $r2, $r3;
        int $i0, $i1;
        char $c2;
        java.lang.Character $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        $r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigDecimal) $r5;

        $r2 = virtualinvoke $r3.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        $r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.add(other)");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private static final java.math.BigInteger sumOfBigInteger(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        java.lang.CharSequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.math.BigInteger $r2, $r3;
        int $i0, $i1;
        char $c2;
        java.lang.Character $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        $r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigInteger) $r5;

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.add(other)");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static final java.util.SortedSet toSortedSet(java.lang.CharSequence)
    {
        java.util.Collection $r0;
        java.lang.CharSequence $r1;
        java.util.SortedSet $r2;
        java.util.TreeSet r3;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        r3 = new java.util.TreeSet;

        specialinvoke r3.<java.util.TreeSet: void <init>()>();

        $r0 = (java.util.Collection) r3;

        $r0 = staticinvoke <kotlin.text.StringsKt: java.util.Collection toCollection(java.lang.CharSequence,java.util.Collection)>($r1, $r0);

        $r2 = (java.util.SortedSet) $r0;

        return $r2;
    }

