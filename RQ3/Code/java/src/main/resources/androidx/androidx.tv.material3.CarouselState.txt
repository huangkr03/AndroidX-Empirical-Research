androidx.tv.material3.CarouselState
<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activePauseHandlesCount$delegate>
<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activeSlideIndex$delegate>
<androidx.tv.material3.CarouselState: boolean isMovingBackward>
<androidx.tv.material3.CarouselState: int $stable>
    public void <init>(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0;
        java.lang.Integer $r1, $r3;
        androidx.compose.runtime.MutableState $r2, $r4;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r1, null, 2, null);

        r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activePauseHandlesCount$delegate> = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r3, null, 2, null);

        r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activeSlideIndex$delegate> = $r4;

        return;
    }

    public void <init>(int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.tv.material3.CarouselState r0;
        int i0, $i1, i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;

        r0 := @this: androidx.tv.material3.CarouselState;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        specialinvoke r0.<androidx.tv.material3.CarouselState: void <init>(int)>(i2);

        return;
    }

    public final int getActivePauseHandlesCount$tv_material_release()
    {
        androidx.tv.material3.CarouselState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        int $i0;

        r0 := @this: androidx.tv.material3.CarouselState;

        $r2 = r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activePauseHandlesCount$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public final void setActivePauseHandlesCount$tv_material_release(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Integer r2;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activePauseHandlesCount$delegate>;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final int getActiveSlideIndex()
    {
        androidx.tv.material3.CarouselState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        int $i0;

        r0 := @this: androidx.tv.material3.CarouselState;

        $r2 = r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activeSlideIndex$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public final void setActiveSlideIndex$tv_material_release(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Integer r2;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.tv.material3.CarouselState: androidx.compose.runtime.MutableState activeSlideIndex$delegate>;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final boolean isMovingBackward$tv_material_release()
    {
        androidx.tv.material3.CarouselState r0;
        boolean $z0;

        r0 := @this: androidx.tv.material3.CarouselState;

        $z0 = r0.<androidx.tv.material3.CarouselState: boolean isMovingBackward>;

        return $z0;
    }

    public final androidx.tv.material3.ScrollPauseHandle pauseAutoScroll(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0, $i1;
        androidx.tv.material3.ScrollPauseHandleImpl $r1;
        androidx.tv.material3.ScrollPauseHandle $r2, $r4;
        androidx.tv.material3.NoOpScrollPauseHandle $r3;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<androidx.tv.material3.CarouselState: int getActiveSlideIndex()>();

        if $i1 == i0 goto label1;

        $r3 = <androidx.tv.material3.NoOpScrollPauseHandle: androidx.tv.material3.NoOpScrollPauseHandle INSTANCE>;

        $r4 = (androidx.tv.material3.ScrollPauseHandle) $r3;

        return $r4;

     label1:
        $r1 = new androidx.tv.material3.ScrollPauseHandleImpl;

        specialinvoke $r1.<androidx.tv.material3.ScrollPauseHandleImpl: void <init>(androidx.tv.material3.CarouselState)>(r0);

        $r2 = (androidx.tv.material3.ScrollPauseHandle) $r1;

        return $r2;
    }

    public final boolean isFirstSlide$tv_material_release()
    {
        androidx.tv.material3.CarouselState r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.tv.material3.CarouselState;

        $i0 = virtualinvoke r0.<androidx.tv.material3.CarouselState: int getActiveSlideIndex()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isLastSlide$tv_material_release(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<androidx.tv.material3.CarouselState: int getActiveSlideIndex()>();

        $i2 = i0 - 1;

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void moveToPreviousSlide$tv_material_release(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.tv.material3.CarouselState: boolean isMovingBackward> = 1;

        $i1 = virtualinvoke r0.<androidx.tv.material3.CarouselState: int getActiveSlideIndex()>();

        $i2 = $i1 - 1;

        $i3 = staticinvoke <java.lang.Math: int floorMod(int,int)>($i2, i0);

        virtualinvoke r0.<androidx.tv.material3.CarouselState: void setActiveSlideIndex$tv_material_release(int)>($i3);

        return;
    }

    public final void moveToNextSlide$tv_material_release(int)
    {
        androidx.tv.material3.CarouselState r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: androidx.tv.material3.CarouselState;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.tv.material3.CarouselState: boolean isMovingBackward> = 0;

        $i1 = virtualinvoke r0.<androidx.tv.material3.CarouselState: int getActiveSlideIndex()>();

        $i2 = $i1 + 1;

        $i3 = staticinvoke <java.lang.Math: int floorMod(int,int)>($i2, i0);

        virtualinvoke r0.<androidx.tv.material3.CarouselState: void setActiveSlideIndex$tv_material_release(int)>($i3);

        return;
    }

    public void <init>()
    {
        androidx.tv.material3.CarouselState r0;

        r0 := @this: androidx.tv.material3.CarouselState;

        specialinvoke r0.<androidx.tv.material3.CarouselState: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        return;
    }

    static void <clinit>()
    {
        return;
    }

