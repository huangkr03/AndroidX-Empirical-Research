io.grpc.internal.ManagedChannelOrphanWrapper
<io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger logger>
<io.grpc.internal.ManagedChannelOrphanWrapper: java.lang.ref.ReferenceQueue refqueue>
<io.grpc.internal.ManagedChannelOrphanWrapper: java.util.concurrent.ConcurrentMap refs>
<io.grpc.internal.ManagedChannelOrphanWrapper: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference phantom>
    static void <clinit>()
    {
        java.lang.ref.ReferenceQueue $r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.util.logging.Logger $r4;

        $r0 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r0.<java.lang.ref.ReferenceQueue: void <init>()>();

        <io.grpc.internal.ManagedChannelOrphanWrapper: java.lang.ref.ReferenceQueue refqueue> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.concurrent.ConcurrentMap refs> = $r1;

        $r2 = class "Lio/grpc/internal/ManagedChannelOrphanWrapper;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger logger> = $r4;

        return;
    }

    void <init>(io.grpc.ManagedChannel)
    {
        io.grpc.internal.ManagedChannelOrphanWrapper $r0;
        io.grpc.ManagedChannel $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.util.concurrent.ConcurrentMap $r3;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper;

        $r1 := @parameter0: io.grpc.ManagedChannel;

        $r2 = <io.grpc.internal.ManagedChannelOrphanWrapper: java.lang.ref.ReferenceQueue refqueue>;

        $r3 = <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.concurrent.ConcurrentMap refs>;

        specialinvoke $r0.<io.grpc.internal.ManagedChannelOrphanWrapper: void <init>(io.grpc.ManagedChannel,java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r1, $r2, $r3);

        return;
    }

    void <init>(io.grpc.ManagedChannel, java.lang.ref.ReferenceQueue, java.util.concurrent.ConcurrentMap)
    {
        io.grpc.internal.ManagedChannelOrphanWrapper $r0;
        io.grpc.ManagedChannel $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.util.concurrent.ConcurrentMap $r3;
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r4;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper;

        $r1 := @parameter0: io.grpc.ManagedChannel;

        $r2 := @parameter1: java.lang.ref.ReferenceQueue;

        $r3 := @parameter2: java.util.concurrent.ConcurrentMap;

        specialinvoke $r0.<io.grpc.internal.ForwardingManagedChannel: void <init>(io.grpc.ManagedChannel)>($r1);

        $r4 = new io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        specialinvoke $r4.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void <init>(io.grpc.internal.ManagedChannelOrphanWrapper,io.grpc.ManagedChannel,java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r0, $r1, $r2, $r3);

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference phantom> = $r4;

        return;
    }

    static java.util.logging.Logger access$100()
    {
        java.util.logging.Logger r0;

        r0 = <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger logger>;

        return r0;
    }

    public io.grpc.ManagedChannel shutdown()
    {
        io.grpc.internal.ManagedChannelOrphanWrapper $r0;
        io.grpc.ManagedChannel $r1;
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r2;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper;

        $r2 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference phantom>;

        staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void access$000(io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference)>($r2);

        $r1 = specialinvoke $r0.<io.grpc.internal.ForwardingManagedChannel: io.grpc.ManagedChannel shutdown()>();

        return $r1;
    }

    public io.grpc.ManagedChannel shutdownNow()
    {
        io.grpc.internal.ManagedChannelOrphanWrapper $r0;
        io.grpc.ManagedChannel $r1;
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r2;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper;

        $r2 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference phantom>;

        staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void access$000(io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference)>($r2);

        $r1 = specialinvoke $r0.<io.grpc.internal.ForwardingManagedChannel: io.grpc.ManagedChannel shutdownNow()>();

        return $r1;
    }

io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: boolean ENABLE_ALLOCATION_TRACKING>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.RuntimeException missingCallSite>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.Reference allocationSite>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.String channelStr>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.ReferenceQueue refqueue>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.ConcurrentMap refs>
<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.atomic.AtomicBoolean shutdown>
    static void <clinit>()
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("io.grpc.ManagedChannel.enableAllocationTracking", "true");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: boolean ENABLE_ALLOCATION_TRACKING> = $z0;

        $r1 = staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.RuntimeException missingCallSite()>();

        <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.RuntimeException missingCallSite> = $r1;

        return;
    }

    void <init>(io.grpc.internal.ManagedChannelOrphanWrapper, io.grpc.ManagedChannel, java.lang.ref.ReferenceQueue, java.util.concurrent.ConcurrentMap)
    {
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r0;
        io.grpc.ManagedChannel $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.String $r4;
        io.grpc.internal.ManagedChannelOrphanWrapper $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        java.lang.ref.SoftReference $r7;
        boolean $z0;
        java.lang.RuntimeException $r8;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        $r5 := @parameter0: io.grpc.internal.ManagedChannelOrphanWrapper;

        $r1 := @parameter1: io.grpc.ManagedChannel;

        $r2 := @parameter2: java.lang.ref.ReferenceQueue;

        $r3 := @parameter3: java.util.concurrent.ConcurrentMap;

        specialinvoke $r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>($r5, $r2);

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.atomic.AtomicBoolean shutdown> = $r6;

        $r7 = new java.lang.ref.SoftReference;

        $z0 = <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: boolean ENABLE_ALLOCATION_TRACKING>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("ManagedChannel allocation site");

        goto label2;

     label1:
        $r8 = <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.RuntimeException missingCallSite>;

     label2:
        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r8);

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.Reference allocationSite> = $r7;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.String channelStr> = $r4;

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.ReferenceQueue refqueue> = $r2;

        $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.ConcurrentMap refs> = $r3;

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r0);

        staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: int cleanQueue(java.lang.ref.ReferenceQueue)>($r2);

        return;
    }

    static void access$000(io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference)
    {
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r0;

        $r0 := @parameter0: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        specialinvoke $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void clearSafely()>();

        return;
    }

    static int cleanQueue(java.lang.ref.ReferenceQueue)
    {
        java.lang.ref.ReferenceQueue $r0;
        int $i0;
        java.lang.ref.Reference $r1;
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r2;
        java.lang.Object $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        boolean $z0;
        java.util.logging.Level $r6;
        java.util.logging.Logger $r7;
        java.lang.StringBuilder $r8, r12;
        java.lang.String $r9;
        java.util.logging.LogRecord $r10, r13;
        java.lang.Object[] $r11;
        java.lang.Throwable r14;

        $r0 := @parameter0: java.lang.ref.ReferenceQueue;

        $i0 = 0;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r2 = (io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference) $r1;

        if $r2 == null goto label2;

        $r1 = $r2.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.Reference allocationSite>;

        $r3 = virtualinvoke $r1.<java.lang.ref.Reference: java.lang.Object get()>();

        $r4 = (java.lang.RuntimeException) $r3;

        specialinvoke $r2.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void clearInternal()>();

        $r5 = $r2.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.atomic.AtomicBoolean shutdown>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $i0 = $i0 + 1;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r7 = staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger access$100()>();

        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r6);

        if $z0 == 0 goto label1;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*~*~*~ Channel {0} was not shutdown properly!!! ~*~*~*");

        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = new java.util.logging.LogRecord;

        $r10 = r13;

        specialinvoke r13.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r6, $r9);

        $r7 = staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger access$100()>();

        $r9 = virtualinvoke $r7.<java.util.logging.Logger: java.lang.String getName()>();

        virtualinvoke $r10.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r9);

        $r11 = newarray (java.lang.Object)[1];

        $r9 = $r2.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.String channelStr>;

        $r11[0] = $r9;

        virtualinvoke $r10.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r11);

        r14 = (java.lang.Throwable) $r4;

        virtualinvoke $r10.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r14);

        $r7 = staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper: java.util.logging.Logger access$100()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r10);

        goto label1;

     label2:
        return $i0;
    }

    private void clearInternal()
    {
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r0;
        java.util.concurrent.ConcurrentMap $r1;
        java.lang.ref.Reference $r2;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        specialinvoke $r0.<java.lang.ref.WeakReference: void clear()>();

        $r1 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.ConcurrentMap refs>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r0);

        $r2 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.Reference allocationSite>;

        virtualinvoke $r2.<java.lang.ref.Reference: void clear()>();

        return;
    }

    private void clearSafely()
    {
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        $r1 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.util.concurrent.atomic.AtomicBoolean shutdown>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void clear()>();

     label1:
        return;
    }

    private static java.lang.RuntimeException missingCallSite()
    {
        java.lang.RuntimeException $r0;
        java.lang.StackTraceElement[] $r1;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("ManagedChannel allocation site not recorded.  Set -Dio.grpc.ManagedChannel.enableAllocationTracking=true to enable it");

        $r1 = newarray (java.lang.StackTraceElement)[0];

        virtualinvoke $r0.<java.lang.RuntimeException: void setStackTrace(java.lang.StackTraceElement[])>($r1);

        return $r0;
    }

    public void clear()
    {
        io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference $r0;
        java.lang.ref.ReferenceQueue $r1;

        $r0 := @this: io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference;

        specialinvoke $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: void clearInternal()>();

        $r1 = $r0.<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: java.lang.ref.ReferenceQueue refqueue>;

        staticinvoke <io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference: int cleanQueue(java.lang.ref.ReferenceQueue)>($r1);

        return;
    }

