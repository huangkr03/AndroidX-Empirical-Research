androidx.leanback.widget.picker.DatePicker
<androidx.leanback.widget.picker.DatePicker: java.lang.String LOG_TAG>
<androidx.leanback.widget.picker.DatePicker: java.lang.String mDatePickerFormat>
<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>
<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mDayColumn>
<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mYearColumn>
<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex>
<androidx.leanback.widget.picker.DatePicker: int mColDayIndex>
<androidx.leanback.widget.picker.DatePicker: int mColYearIndex>
<androidx.leanback.widget.picker.DatePicker: java.lang.String DATE_FORMAT>
<androidx.leanback.widget.picker.DatePicker: java.text.DateFormat mDateFormat>
<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>
<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>
<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>
<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>
<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>
<androidx.leanback.widget.picker.DatePicker: int[] DATE_FIELDS>
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, $i1, $i2, $i5;
        android.content.res.TypedArray r3;
        java.lang.String r4, r5, $r11, r22;
        java.text.SimpleDateFormat $r6;
        int[] $r7;
        java.util.Calendar $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        char[] $r12;
        long $l3, $l4;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.leanback.widget.picker.Picker: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        r0.<androidx.leanback.widget.picker.DatePicker: java.text.DateFormat mDateFormat> = $r6;

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateCurrentLocale()>();

        $r7 = <androidx.leanback.R$styleable: int[] lbDatePicker>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r2, $r7);

        $i1 = <androidx.leanback.R$styleable: int lbDatePicker_android_minDate>;

        r4 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>($i1);

        $i2 = <androidx.leanback.R$styleable: int lbDatePicker_android_maxDate>;

        r5 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>($i2);

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r8.<java.util.Calendar: void clear()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 != 0 goto label1;

        $r15 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $z2 = specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: boolean parseDate(java.lang.String,java.util.Calendar)>(r4, $r15);

        if $z2 != 0 goto label2;

        $r16 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r16.<java.util.Calendar: void set(int,int,int)>(1900, 0, 1);

        goto label2;

     label1:
        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r9.<java.util.Calendar: void set(int,int,int)>(1900, 0, 1);

     label2:
        $r17 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $r18 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $l3 = virtualinvoke $r18.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r17.<java.util.Calendar: void setTimeInMillis(long)>($l3);

        $r19 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r19.<java.util.Calendar: void clear()>();

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z3 != 0 goto label3;

        $r13 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $z1 = specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: boolean parseDate(java.lang.String,java.util.Calendar)>(r5, $r13);

        if $z1 != 0 goto label4;

        $r14 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r14.<java.util.Calendar: void set(int,int,int)>(2100, 0, 1);

        goto label4;

     label3:
        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r10.<java.util.Calendar: void set(int,int,int)>(2100, 0, 1);

     label4:
        $r20 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $r21 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $l4 = virtualinvoke $r21.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r20.<java.util.Calendar: void setTimeInMillis(long)>($l4);

        $i5 = <androidx.leanback.R$styleable: int lbDatePicker_datePickerFormat>;

        r22 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>($i5);

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r22);

        if $z4 == 0 goto label5;

        $r11 = new java.lang.String;

        $r12 = staticinvoke <android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>(r1);

        specialinvoke $r11.<java.lang.String: void <init>(char[])>($r12);

        r22 = $r11;

     label5:
        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setDatePickerFormat(java.lang.String)>(r22);

        return;
    }

    private boolean parseDate(java.lang.String, java.util.Calendar)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.lang.String r1, $r12;
        java.util.Calendar r2;
        java.lang.Throwable r3, $r6;
        java.text.DateFormat $r4;
        java.util.Date $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Calendar;

     label1:
        $r4 = r0.<androidx.leanback.widget.picker.DatePicker: java.text.DateFormat mDateFormat>;

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r1);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r5);

     label2:
        return 1;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Date: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in format: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MM/dd/yyyy");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DatePicker", $r12);

        return 0;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    java.lang.String getBestYearMonthDayPattern(java.lang.String)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.lang.String r1, r7, $r8;
        java.text.DateFormat r2;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        java.text.SimpleDateFormat $r4;
        androidx.leanback.widget.picker.PickerUtility$DateConstant $r5;
        java.util.Locale $r6;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        r1 := @parameter0: java.lang.String;

        $z0 = <androidx.leanback.widget.picker.PickerUtility: boolean SUPPORTS_BEST_DATE_TIME_PATTERN>;

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r6 = $r5.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.util.Locale locale>;

        r7 = staticinvoke <android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>($r6, r1);

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: android.content.Context getContext()>();

        r2 = staticinvoke <android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>($r3);

        $z1 = r2 instanceof java.text.SimpleDateFormat;

        if $z1 == 0 goto label2;

        $r4 = (java.text.SimpleDateFormat) r2;

        r7 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()>();

        goto label3;

     label2:
        r7 = "MM/dd/yyyy";

     label3:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z2 == 0 goto label4;

        $r8 = "MM/dd/yyyy";

        goto label5;

     label4:
        $r8 = r7;

     label5:
        return $r8;
    }

    java.util.List extractSeparators()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.lang.String r1, $r5, $r9, $r11;
        java.util.ArrayList r2, $r6;
        java.lang.StringBuilder r3, $r7;
        char[] r4, $r8;
        char c0, c2;
        int $i1, i3;
        boolean $z1, z3;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: java.lang.String mDatePickerFormat>;

        r1 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: java.lang.String getBestYearMonthDayPattern(java.lang.String)>($r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        c2 = 0;

        $r8 = newarray (char)[6];

        $r8[0] = 89;

        $r8[1] = 121;

        $r8[2] = 77;

        $r8[3] = 109;

        $r8[4] = 68;

        $r8[5] = 100;

        r4 = $r8;

        z3 = 0;

        i3 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i1 goto label9;

        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if c0 != 32 goto label2;

        goto label8;

     label2:
        if c0 != 39 goto label4;

        if z3 != 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);

        z3 = 1;

        goto label8;

     label3:
        z3 = 0;

        goto label8;

     label4:
        if z3 == 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label7;

     label5:
        $z1 = staticinvoke <androidx.leanback.widget.picker.DatePicker: boolean isAnyOf(char,char[])>(c0, r4);

        if $z1 == 0 goto label6;

        if c0 == c2 goto label7;

        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);

        goto label7;

     label6:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label7:
        c2 = c0;

     label8:
        i3 = i3 + 1;

        goto label1;

     label9:
        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        return r2;
    }

    private static boolean isAnyOf(char, char[])
    {
        char c0, $c2;
        char[] r0;
        int $i1, i3;

        c0 := @parameter0: char;

        r0 := @parameter1: char[];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label3;

        $c2 = r0[i3];

        if c0 != $c2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void setDatePickerFormat(java.lang.String)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.util.List r1;
        java.lang.String r2, $r4, $r29, $r30, r33;
        java.util.ArrayList r3, $r5;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7;
        char $c4;
        androidx.leanback.widget.picker.PickerColumn $r6, $r7, $r8, $r10, $r11, $r14, $r16, $r17, $r18;
        java.lang.IllegalArgumentException $r9, $r15, $r19, $r20;
        androidx.leanback.widget.picker.PickerUtility$DateConstant $r12;
        java.lang.String[] $r13;
        java.lang.IllegalStateException $r21;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        android.content.Context $r31;
        char[] $r32;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        r33 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r33);

        if $z0 == 0 goto label01;

        $r30 = new java.lang.String;

        $r31 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: android.content.Context getContext()>();

        $r32 = staticinvoke <android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>($r31);

        specialinvoke $r30.<java.lang.String: void <init>(char[])>($r32);

        r33 = $r30;

     label01:
        $r4 = r0.<androidx.leanback.widget.picker.DatePicker: java.lang.String mDatePickerFormat>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, r33);

        if $z1 == 0 goto label02;

        return;

     label02:
        r0.<androidx.leanback.widget.picker.DatePicker: java.lang.String mDatePickerFormat> = r33;

        r1 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: java.util.List extractSeparators()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = virtualinvoke r33.<java.lang.String: int length()>();

        $i2 = $i1 + 1;

        if $i0 == $i2 goto label03;

        $r21 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Separators size: ");

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must equal");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" the size of datePickerFormat: ");

        $i6 = virtualinvoke r33.<java.lang.String: int length()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + 1");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label03:
        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setSeparators(java.util.List)>(r1);

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mDayColumn> = null;

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn> = null;

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mYearColumn> = null;

        r0.<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex> = -1;

        r0.<androidx.leanback.widget.picker.DatePicker: int mColDayIndex> = -1;

        r0.<androidx.leanback.widget.picker.DatePicker: int mColYearIndex> = -1;

        r2 = virtualinvoke r33.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(3);

        r3 = $r5;

        i7 = 0;

     label04:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i7 >= $i3 goto label13;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i7);

        lookupswitch($c4)
        {
            case 68: goto label09;
            case 77: goto label07;
            case 89: goto label05;
            default: goto label11;
        };

     label05:
        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mYearColumn>;

        if $r6 == null goto label06;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("datePicker format error");

        throw $r9;

     label06:
        $r7 = new androidx.leanback.widget.picker.PickerColumn;

        specialinvoke $r7.<androidx.leanback.widget.picker.PickerColumn: void <init>()>();

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mYearColumn> = $r7;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        r0.<androidx.leanback.widget.picker.DatePicker: int mColYearIndex> = i7;

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mYearColumn>;

        virtualinvoke $r8.<androidx.leanback.widget.picker.PickerColumn: void setLabelFormat(java.lang.String)>("%d");

        goto label12;

     label07:
        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>;

        if $r10 == null goto label08;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("datePicker format error");

        throw $r15;

     label08:
        $r11 = new androidx.leanback.widget.picker.PickerColumn;

        specialinvoke $r11.<androidx.leanback.widget.picker.PickerColumn: void <init>()>();

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn> = $r11;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r14 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>;

        $r12 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r13 = $r12.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.lang.String[] months>;

        virtualinvoke $r14.<androidx.leanback.widget.picker.PickerColumn: void setStaticLabels(java.lang.CharSequence[])>($r13);

        r0.<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex> = i7;

        goto label12;

     label09:
        $r16 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mDayColumn>;

        if $r16 == null goto label10;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("datePicker format error");

        throw $r19;

     label10:
        $r17 = new androidx.leanback.widget.picker.PickerColumn;

        specialinvoke $r17.<androidx.leanback.widget.picker.PickerColumn: void <init>()>();

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mDayColumn> = $r17;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mDayColumn>;

        virtualinvoke $r18.<androidx.leanback.widget.picker.PickerColumn: void setLabelFormat(java.lang.String)>("%02d");

        r0.<androidx.leanback.widget.picker.DatePicker: int mColDayIndex> = i7;

        goto label12;

     label11:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("datePicker format error");

        throw $r20;

     label12:
        i7 = i7 + 1;

        goto label04;

     label13:
        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setColumns(java.util.List)>(r3);

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateSpinners(boolean)>(0);

        return;
    }

    public java.lang.String getDatePickerFormat()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.lang.String $r1;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.lang.String mDatePickerFormat>;

        return $r1;
    }

    private void updateCurrentLocale()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.util.Locale $r1, $r6, $r10, $r14, $r18;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        androidx.leanback.widget.picker.PickerUtility$DateConstant $r4, $r5, $r9, $r13, $r17, $r22;
        java.util.Calendar $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20;
        androidx.leanback.widget.picker.PickerColumn $r21, $r24, $r25;
        java.lang.String[] $r23;
        int $i0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = staticinvoke <androidx.leanback.widget.picker.PickerUtility: androidx.leanback.widget.picker.PickerUtility$DateConstant getDateConstantInstance(java.util.Locale,android.content.res.Resources)>($r1, $r3);

        r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant> = $r4;

        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r6 = $r5.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.util.Locale locale>;

        $r8 = staticinvoke <androidx.leanback.widget.picker.PickerUtility: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>($r7, $r6);

        r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate> = $r8;

        $r11 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r10 = $r9.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.util.Locale locale>;

        $r12 = staticinvoke <androidx.leanback.widget.picker.PickerUtility: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>($r11, $r10);

        r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate> = $r12;

        $r15 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $r13 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r14 = $r13.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.util.Locale locale>;

        $r16 = staticinvoke <androidx.leanback.widget.picker.PickerUtility: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>($r15, $r14);

        r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate> = $r16;

        $r19 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r17 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r18 = $r17.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.util.Locale locale>;

        $r20 = staticinvoke <androidx.leanback.widget.picker.PickerUtility: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>($r19, $r18);

        r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate> = $r20;

        $r21 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>;

        if $r21 == null goto label1;

        $r24 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>;

        $r22 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerUtility$DateConstant mConstant>;

        $r23 = $r22.<androidx.leanback.widget.picker.PickerUtility$DateConstant: java.lang.String[] months>;

        virtualinvoke $r24.<androidx.leanback.widget.picker.PickerColumn: void setStaticLabels(java.lang.CharSequence[])>($r23);

        $i0 = r0.<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex>;

        $r25 = r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn mMonthColumn>;

        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setColumnAt(int,androidx.leanback.widget.picker.PickerColumn)>($i0, $r25);

     label1:
        return;
    }

    public final void onColumnValueChanged(int, int)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Calendar $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10;
        long $l3;
        androidx.leanback.widget.picker.PickerColumn $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $l3 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r2.<java.util.Calendar: void setTimeInMillis(long)>($l3);

        $r3 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn getColumnAt(int)>(i0);

        i2 = virtualinvoke $r3.<androidx.leanback.widget.picker.PickerColumn: int getCurrentValue()>();

        $i4 = r0.<androidx.leanback.widget.picker.DatePicker: int mColDayIndex>;

        if i0 != $i4 goto label1;

        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i9 = i1 - i2;

        virtualinvoke $r7.<java.util.Calendar: void add(int,int)>(5, $i9);

        goto label4;

     label1:
        $i5 = r0.<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex>;

        if i0 != $i5 goto label2;

        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i8 = i1 - i2;

        virtualinvoke $r6.<java.util.Calendar: void add(int,int)>(2, $i8);

        goto label4;

     label2:
        $i6 = r0.<androidx.leanback.widget.picker.DatePicker: int mColYearIndex>;

        if i0 != $i6 goto label3;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i7 = i1 - i2;

        virtualinvoke $r5.<java.util.Calendar: void add(int,int)>(1, $i7);

        goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label4:
        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i10 = virtualinvoke $r8.<java.util.Calendar: int get(int)>(1);

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i11 = virtualinvoke $r9.<java.util.Calendar: int get(int)>(2);

        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i12 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(5);

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setDate(int,int,int)>($i10, $i11, $i12);

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateSpinners(boolean)>(0);

        return;
    }

    public void setMinDate(long)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        long l0, $l3;
        java.util.Calendar $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i1, $i2, $i4, $i5;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r2 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        $r3 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $i2 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(1);

        if $i1 != $i2 goto label1;

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i4 = virtualinvoke $r9.<java.util.Calendar: int get(int)>(6);

        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $i5 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(6);

        if $i4 == $i5 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        virtualinvoke $r4.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $z0 = virtualinvoke $r6.<java.util.Calendar: boolean before(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $l3 = virtualinvoke $r7.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r8.<java.util.Calendar: void setTimeInMillis(long)>($l3);

     label2:
        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateSpinners(boolean)>(0);

        return;
    }

    public long getMinDate()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.util.Calendar $r1;
        long $l0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        return $l0;
    }

    public void setMaxDate(long)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        long l0, $l3;
        java.util.Calendar $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i1, $i2, $i4, $i5;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r2 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        $r3 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $i2 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(1);

        if $i1 != $i2 goto label1;

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mTempDate>;

        $i4 = virtualinvoke $r9.<java.util.Calendar: int get(int)>(6);

        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $i5 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(6);

        if $i4 == $i5 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        virtualinvoke $r4.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $z0 = virtualinvoke $r6.<java.util.Calendar: boolean after(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $l3 = virtualinvoke $r7.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r8.<java.util.Calendar: void setTimeInMillis(long)>($l3);

     label2:
        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateSpinners(boolean)>(0);

        return;
    }

    public long getMaxDate()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.util.Calendar $r1;
        long $l0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        return $l0;
    }

    public long getDate()
    {
        androidx.leanback.widget.picker.DatePicker r0;
        java.util.Calendar $r1;
        long $l0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        return $l0;
    }

    private void setDate(int, int, int)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        int i0, i1, i2;
        java.util.Calendar $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        long $l3, $l4;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        virtualinvoke $r1.<java.util.Calendar: void set(int,int,int)>(i0, i1, i2);

        $r3 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r2 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $z0 = virtualinvoke $r3.<java.util.Calendar: boolean before(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $l4 = virtualinvoke $r8.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r9.<java.util.Calendar: void setTimeInMillis(long)>($l4);

        goto label2;

     label1:
        $r5 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r4 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $z1 = virtualinvoke $r5.<java.util.Calendar: boolean after(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $l3 = virtualinvoke $r6.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r7.<java.util.Calendar: void setTimeInMillis(long)>($l3);

     label2:
        return;
    }

    public void updateDate(int, int, int, boolean)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        int i0, i1, i2;
        boolean z0, $z1;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z1 = specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: boolean isNewDate(int,int,int)>(i0, i1, i2);

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setDate(int,int,int)>(i0, i1, i2);

        specialinvoke r0.<androidx.leanback.widget.picker.DatePicker: void updateSpinners(boolean)>(z0);

        return;
    }

    private boolean isNewDate(int, int, int)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.Calendar $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i3 = virtualinvoke $r1.<java.util.Calendar: int get(int)>(1);

        if $i3 != i0 goto label1;

        $r2 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i4 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(2);

        if $i4 != i2 goto label1;

        $r3 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i5 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(5);

        if $i5 == i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean updateMin(androidx.leanback.widget.picker.PickerColumn, int)
    {
        androidx.leanback.widget.picker.PickerColumn r0;
        int i0, $i1;

        r0 := @parameter0: androidx.leanback.widget.picker.PickerColumn;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<androidx.leanback.widget.picker.PickerColumn: int getMinValue()>();

        if i0 == $i1 goto label1;

        virtualinvoke r0.<androidx.leanback.widget.picker.PickerColumn: void setMinValue(int)>(i0);

        return 1;

     label1:
        return 0;
    }

    private static boolean updateMax(androidx.leanback.widget.picker.PickerColumn, int)
    {
        androidx.leanback.widget.picker.PickerColumn r0;
        int i0, $i1;

        r0 := @parameter0: androidx.leanback.widget.picker.PickerColumn;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<androidx.leanback.widget.picker.PickerColumn: int getMaxValue()>();

        if i0 == $i1 goto label1;

        virtualinvoke r0.<androidx.leanback.widget.picker.PickerColumn: void setMaxValue(int)>(i0);

        return 1;

     label1:
        return 0;
    }

    void updateSpinnersImpl(boolean)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, z10, z11, $z12, $z13;
        int[] r1, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        androidx.leanback.widget.picker.PickerColumn r2;
        java.util.Calendar $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        z0 := @parameter0: boolean;

        $r3 = newarray (int)[3];

        $i1 = r0.<androidx.leanback.widget.picker.DatePicker: int mColDayIndex>;

        $r3[0] = $i1;

        $i2 = r0.<androidx.leanback.widget.picker.DatePicker: int mColMonthIndex>;

        $r3[1] = $i2;

        $i3 = r0.<androidx.leanback.widget.picker.DatePicker: int mColYearIndex>;

        $r3[2] = $i3;

        r1 = $r3;

        z7 = 1;

        z8 = 1;

        $r4 = <androidx.leanback.widget.picker.DatePicker: int[] DATE_FIELDS>;

        $i4 = lengthof $r4;

        i18 = $i4 - 1;

     label01:
        if i18 < 0 goto label13;

        z9 = 0;

        $i5 = r1[i18];

        if $i5 >= 0 goto label02;

        goto label12;

     label02:
        $r5 = <androidx.leanback.widget.picker.DatePicker: int[] DATE_FIELDS>;

        i0 = $r5[i18];

        $i6 = r1[i18];

        r2 = virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: androidx.leanback.widget.picker.PickerColumn getColumnAt(int)>($i6);

        if z7 == 0 goto label03;

        $r14 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $i17 = virtualinvoke $r14.<java.util.Calendar: int get(int)>(i0);

        $z6 = staticinvoke <androidx.leanback.widget.picker.DatePicker: boolean updateMin(androidx.leanback.widget.picker.PickerColumn,int)>(r2, $i17);

        z10 = z9 | $z6;

        goto label04;

     label03:
        $r6 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i7 = virtualinvoke $r6.<java.util.Calendar: int getActualMinimum(int)>(i0);

        $z1 = staticinvoke <androidx.leanback.widget.picker.DatePicker: boolean updateMin(androidx.leanback.widget.picker.PickerColumn,int)>(r2, $i7);

        z10 = z9 | $z1;

     label04:
        if z8 == 0 goto label05;

        $r13 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $i16 = virtualinvoke $r13.<java.util.Calendar: int get(int)>(i0);

        $z5 = staticinvoke <androidx.leanback.widget.picker.DatePicker: boolean updateMax(androidx.leanback.widget.picker.PickerColumn,int)>(r2, $i16);

        z11 = z10 | $z5;

        goto label06;

     label05:
        $r7 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i8 = virtualinvoke $r7.<java.util.Calendar: int getActualMaximum(int)>(i0);

        $z2 = staticinvoke <androidx.leanback.widget.picker.DatePicker: boolean updateMax(androidx.leanback.widget.picker.PickerColumn,int)>(r2, $i8);

        z11 = z10 | $z2;

     label06:
        $z4 = z7;

        $r8 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i9 = virtualinvoke $r8.<java.util.Calendar: int get(int)>(i0);

        $r9 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMinDate>;

        $i10 = virtualinvoke $r9.<java.util.Calendar: int get(int)>(i0);

        if $i9 != $i10 goto label07;

        $z12 = 1;

        goto label08;

     label07:
        $z12 = 0;

     label08:
        z7 = $z4 & $z12;

        $z3 = z8;

        $r10 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i11 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(i0);

        $r11 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mMaxDate>;

        $i12 = virtualinvoke $r11.<java.util.Calendar: int get(int)>(i0);

        if $i11 != $i12 goto label09;

        $z13 = 1;

        goto label10;

     label09:
        $z13 = 0;

     label10:
        z8 = $z3 & $z13;

        if z11 == 0 goto label11;

        $i15 = r1[i18];

        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setColumnAt(int,androidx.leanback.widget.picker.PickerColumn)>($i15, r2);

     label11:
        $i13 = r1[i18];

        $r12 = r0.<androidx.leanback.widget.picker.DatePicker: java.util.Calendar mCurrentDate>;

        $i14 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: void setColumnValue(int,int,boolean)>($i13, $i14, z0);

     label12:
        i18 = i18 + -1;

        goto label01;

     label13:
        return;
    }

    private void updateSpinners(boolean)
    {
        androidx.leanback.widget.picker.DatePicker r0;
        boolean z0;
        androidx.leanback.widget.picker.DatePicker$1 $r1;

        r0 := @this: androidx.leanback.widget.picker.DatePicker;

        z0 := @parameter0: boolean;

        $r1 = new androidx.leanback.widget.picker.DatePicker$1;

        specialinvoke $r1.<androidx.leanback.widget.picker.DatePicker$1: void <init>(androidx.leanback.widget.picker.DatePicker,boolean)>(r0, z0);

        virtualinvoke r0.<androidx.leanback.widget.picker.DatePicker: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[3];

        $r0[0] = 5;

        $r0[1] = 2;

        $r0[2] = 1;

        <androidx.leanback.widget.picker.DatePicker: int[] DATE_FIELDS> = $r0;

        return;
    }

androidx.leanback.widget.picker.DatePicker$1
<androidx.leanback.widget.picker.DatePicker$1: boolean val$animation>
<androidx.leanback.widget.picker.DatePicker$1: androidx.leanback.widget.picker.DatePicker this$0>
    void <init>(androidx.leanback.widget.picker.DatePicker, boolean)
    {
        androidx.leanback.widget.picker.DatePicker$1 r0;
        androidx.leanback.widget.picker.DatePicker r1;
        boolean z0;

        r0 := @this: androidx.leanback.widget.picker.DatePicker$1;

        r1 := @parameter0: androidx.leanback.widget.picker.DatePicker;

        z0 := @parameter1: boolean;

        r0.<androidx.leanback.widget.picker.DatePicker$1: androidx.leanback.widget.picker.DatePicker this$0> = r1;

        r0.<androidx.leanback.widget.picker.DatePicker$1: boolean val$animation> = z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.leanback.widget.picker.DatePicker$1 r0;
        boolean $z0;
        androidx.leanback.widget.picker.DatePicker $r1;

        r0 := @this: androidx.leanback.widget.picker.DatePicker$1;

        $r1 = r0.<androidx.leanback.widget.picker.DatePicker$1: androidx.leanback.widget.picker.DatePicker this$0>;

        $z0 = r0.<androidx.leanback.widget.picker.DatePicker$1: boolean val$animation>;

        virtualinvoke $r1.<androidx.leanback.widget.picker.DatePicker: void updateSpinnersImpl(boolean)>($z0);

        return;
    }

