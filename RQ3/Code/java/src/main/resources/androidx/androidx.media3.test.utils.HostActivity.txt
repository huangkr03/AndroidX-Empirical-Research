androidx.media3.test.utils.HostActivity
<androidx.media3.test.utils.HostActivity: java.lang.String TAG>
<androidx.media3.test.utils.HostActivity: java.lang.String LOCK_TAG>
<androidx.media3.test.utils.HostActivity: long START_TIMEOUT_MS>
<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock>
<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock>
<androidx.media3.test.utils.HostActivity: android.view.SurfaceView surfaceView>
<androidx.media3.test.utils.HostActivity: android.widget.FrameLayout overlayFrameLayout>
<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>
<androidx.media3.test.utils.HostActivity: boolean hostedTestStarted>
<androidx.media3.test.utils.HostActivity: android.os.ConditionVariable hostedTestStartedCondition>
<androidx.media3.test.utils.HostActivity: boolean forcedStopped>
    public void <init>()
    {
        androidx.media3.test.utils.HostActivity r0;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        specialinvoke r0.<android.app.Activity: void <init>()>();

        return;
    }

    public void runTest(androidx.media3.test.utils.HostActivity$HostedTest, long)
    {
        androidx.media3.test.utils.HostActivity r0;
        androidx.media3.test.utils.HostActivity$HostedTest r1;
        long l0;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity$HostedTest;

        l0 := @parameter1: long;

        virtualinvoke r0.<androidx.media3.test.utils.HostActivity: void runTest(androidx.media3.test.utils.HostActivity$HostedTest,long,boolean)>(r1, l0, 1);

        return;
    }

    public void runTest(androidx.media3.test.utils.HostActivity$HostedTest, long, boolean)
    {
        androidx.media3.test.utils.HostActivity r0;
        androidx.media3.test.utils.HostActivity$HostedTest r1, $r5;
        long l0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b1;
        java.lang.Thread $r2, $r4;
        android.os.Looper $r3;
        android.os.ConditionVariable $r7, $r9;
        java.lang.Runnable $r8, $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String r16, r17, r18;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity$HostedTest;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z3);

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.os.Looper getMainLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: java.lang.Thread getThread()>();

        if $r2 == $r4 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z4);

        $r5 = r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>;

        if $r5 != null goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z5);

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r7 = new android.os.ConditionVariable;

        specialinvoke $r7.<android.os.ConditionVariable: void <init>()>();

        r0.<androidx.media3.test.utils.HostActivity: android.os.ConditionVariable hostedTestStartedCondition> = $r7;

        r0.<androidx.media3.test.utils.HostActivity: boolean forcedStopped> = 0;

        r0.<androidx.media3.test.utils.HostActivity: boolean hostedTestStarted> = 0;

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.HostActivity,androidx.media3.test.utils.HostActivity$HostedTest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.HostActivity: void lambda$runTest$0(androidx.media3.test.utils.HostActivity$HostedTest)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.HostActivity: void runOnUiThread(java.lang.Runnable)>($r8);

        $r9 = r0.<androidx.media3.test.utils.HostActivity: android.os.ConditionVariable hostedTestStartedCondition>;

        $z1 = virtualinvoke $r9.<android.os.ConditionVariable: boolean block(long)>(5000L);

        if $z1 != 0 goto label07;

        r16 = "Test failed to start. Display may be turned off or keyguard may be present.";

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String)>("HostActivity", r16);

        if z0 == 0 goto label07;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(r16);

     label07:
        $z6 = interfaceinvoke r1.<androidx.media3.test.utils.HostActivity$HostedTest: boolean blockUntilStopped(long)>(l0);

        if $z6 == 0 goto label10;

        $z2 = r0.<androidx.media3.test.utils.HostActivity: boolean forcedStopped>;

        if $z2 != 0 goto label08;

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("HostActivity", "Checking test pass conditions.");

        interfaceinvoke r1.<androidx.media3.test.utils.HostActivity$HostedTest: void onFinished()>();

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("HostActivity", "Pass conditions checked.");

        goto label11;

     label08:
        r17 = "Test force stopped. Activity may have been paused whilst test was in progress.";

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String)>("HostActivity", r17);

        if z0 == 0 goto label09;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(r17);

     label09:
        goto label11;

     label10:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.HostActivity$HostedTest)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.media3.test.utils.HostActivity$HostedTest: boolean forceStop()>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.HostActivity: void runOnUiThread(java.lang.Runnable)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test timed out after ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms.");

        r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String)>("HostActivity", r18);

        if z0 == 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(r18);

     label11:
        r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest> = null;

        return;
    }

    public void onCreate(android.os.Bundle)
    {
        androidx.media3.test.utils.HostActivity r0;
        android.os.Bundle r1;
        android.content.res.Resources $r2, $r4, $r10;
        java.lang.String $r3, $r5, $r11;
        int $i0, $i1, $i2;
        android.view.View $r6, $r12;
        android.view.SurfaceView $r7, $r8;
        android.view.SurfaceHolder $r9;
        android.widget.FrameLayout $r13;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);

        virtualinvoke r0.<androidx.media3.test.utils.HostActivity: boolean requestWindowFeature(int)>(1);

        $r2 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: java.lang.String getPackageName()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("exo_testutils_host_activity", "layout", $r3);

        virtualinvoke r0.<androidx.media3.test.utils.HostActivity: void setContentView(int)>($i0);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: java.lang.String getPackageName()>();

        $i1 = virtualinvoke $r4.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("surface_view", "id", $r5);

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.view.View findViewById(int)>($i1);

        $r7 = (android.view.SurfaceView) $r6;

        r0.<androidx.media3.test.utils.HostActivity: android.view.SurfaceView surfaceView> = $r7;

        $r8 = r0.<androidx.media3.test.utils.HostActivity: android.view.SurfaceView surfaceView>;

        $r9 = virtualinvoke $r8.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        interfaceinvoke $r9.<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>(r0);

        $r10 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: java.lang.String getPackageName()>();

        $i2 = virtualinvoke $r10.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("overlay_frame_layout", "id", $r11);

        $r12 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.view.View findViewById(int)>($i2);

        $r13 = (android.widget.FrameLayout) $r12;

        r0.<androidx.media3.test.utils.HostActivity: android.widget.FrameLayout overlayFrameLayout> = $r13;

        return;
    }

    public void onStart()
    {
        androidx.media3.test.utils.HostActivity r0;
        android.content.Context r1;
        android.net.wifi.WifiManager r2, $r5;
        android.os.PowerManager r3, $r10;
        java.lang.Object $r4, $r6, $r9, $r11;
        android.net.wifi.WifiManager$WifiLock $r7, $r8;
        android.os.PowerManager$WakeLock $r12, $r13;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.HostActivity: android.content.Context getApplicationContext()>();

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r5 = (android.net.wifi.WifiManager) $r4;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r5);

        r2 = (android.net.wifi.WifiManager) $r6;

        $r7 = virtualinvoke r2.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>(3, "ExoPlayerTestUtil:HostActivity");

        r0.<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock> = $r7;

        $r8 = r0.<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock>;

        virtualinvoke $r8.<android.net.wifi.WifiManager$WifiLock: void acquire()>();

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r10 = (android.os.PowerManager) $r9;

        $r11 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r10);

        r3 = (android.os.PowerManager) $r11;

        $r12 = virtualinvoke r3.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ExoPlayerTestUtil:HostActivity");

        r0.<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock> = $r12;

        $r13 = r0.<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r13.<android.os.PowerManager$WakeLock: void acquire()>();

        specialinvoke r0.<android.app.Activity: void onStart()>();

        return;
    }

    public void onPause()
    {
        androidx.media3.test.utils.HostActivity r0;
        int $i0;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        specialinvoke r0.<android.app.Activity: void onPause()>();

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 23 goto label1;

        specialinvoke r0.<androidx.media3.test.utils.HostActivity: void maybeStopHostedTest()>();

     label1:
        return;
    }

    public void onStop()
    {
        androidx.media3.test.utils.HostActivity r0;
        int $i0;
        android.os.PowerManager$WakeLock $r1, $r4;
        android.net.wifi.WifiManager$WifiLock $r2, $r3;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        specialinvoke r0.<android.app.Activity: void onStop()>();

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 <= 23 goto label1;

        specialinvoke r0.<androidx.media3.test.utils.HostActivity: void maybeStopHostedTest()>();

     label1:
        $r1 = r0.<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock>;

        if $r1 == null goto label2;

        $r4 = r0.<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        r0.<androidx.media3.test.utils.HostActivity: android.os.PowerManager$WakeLock wakeLock> = null;

     label2:
        $r2 = r0.<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock>;

        if $r2 == null goto label3;

        $r3 = r0.<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock>;

        virtualinvoke $r3.<android.net.wifi.WifiManager$WifiLock: void release()>();

        r0.<androidx.media3.test.utils.HostActivity: android.net.wifi.WifiManager$WifiLock wifiLock> = null;

     label3:
        return;
    }

    public void surfaceCreated(android.view.SurfaceHolder)
    {
        androidx.media3.test.utils.HostActivity r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: android.view.SurfaceHolder;

        specialinvoke r0.<androidx.media3.test.utils.HostActivity: void maybeStartHostedTest()>();

        return;
    }

    public void surfaceDestroyed(android.view.SurfaceHolder)
    {
        androidx.media3.test.utils.HostActivity r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: android.view.SurfaceHolder;

        specialinvoke r0.<androidx.media3.test.utils.HostActivity: void maybeStopHostedTest()>();

        return;
    }

    public void surfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        androidx.media3.test.utils.HostActivity r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        return;
    }

    private void maybeStartHostedTest()
    {
        androidx.media3.test.utils.HostActivity r0;
        android.view.Surface r1;
        androidx.media3.test.utils.HostActivity$HostedTest $r2, $r7, $r10;
        boolean $z0, $z1;
        android.view.SurfaceView $r3, $r5;
        java.lang.Object $r4, $r8, $r11, $r14;
        android.view.SurfaceHolder $r6;
        android.widget.FrameLayout $r9, $r12;
        android.os.ConditionVariable $r13, $r15;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        $r2 = r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>;

        if $r2 == null goto label1;

        $z0 = r0.<androidx.media3.test.utils.HostActivity: boolean hostedTestStarted>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<androidx.media3.test.utils.HostActivity: android.view.SurfaceView surfaceView>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r3);

        $r5 = (android.view.SurfaceView) $r4;

        $r6 = virtualinvoke $r5.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        r1 = interfaceinvoke $r6.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z1 == 0 goto label3;

        r0.<androidx.media3.test.utils.HostActivity: boolean hostedTestStarted> = 1;

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("HostActivity", "Starting test.");

        $r7 = r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>;

        $r8 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r7);

        $r10 = (androidx.media3.test.utils.HostActivity$HostedTest) $r8;

        $r9 = r0.<androidx.media3.test.utils.HostActivity: android.widget.FrameLayout overlayFrameLayout>;

        $r11 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r9);

        $r12 = (android.widget.FrameLayout) $r11;

        interfaceinvoke $r10.<androidx.media3.test.utils.HostActivity$HostedTest: void onStart(androidx.media3.test.utils.HostActivity,android.view.Surface,android.widget.FrameLayout)>(r0, r1, $r12);

        $r13 = r0.<androidx.media3.test.utils.HostActivity: android.os.ConditionVariable hostedTestStartedCondition>;

        $r14 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r13);

        $r15 = (android.os.ConditionVariable) $r14;

        virtualinvoke $r15.<android.os.ConditionVariable: void open()>();

     label3:
        return;
    }

    private void maybeStopHostedTest()
    {
        androidx.media3.test.utils.HostActivity r0;
        androidx.media3.test.utils.HostActivity$HostedTest $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        $r1 = r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>;

        if $r1 == null goto label1;

        $z0 = r0.<androidx.media3.test.utils.HostActivity: boolean hostedTestStarted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<androidx.media3.test.utils.HostActivity: boolean forcedStopped>;

        if $z1 != 0 goto label1;

        $r2 = r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest>;

        $z2 = interfaceinvoke $r2.<androidx.media3.test.utils.HostActivity$HostedTest: boolean forceStop()>();

        r0.<androidx.media3.test.utils.HostActivity: boolean forcedStopped> = $z2;

     label1:
        return;
    }

    private void lambda$runTest$0(androidx.media3.test.utils.HostActivity$HostedTest)
    {
        androidx.media3.test.utils.HostActivity r0;
        androidx.media3.test.utils.HostActivity$HostedTest r1;

        r0 := @this: androidx.media3.test.utils.HostActivity;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity$HostedTest;

        r0.<androidx.media3.test.utils.HostActivity: androidx.media3.test.utils.HostActivity$HostedTest hostedTest> = r1;

        specialinvoke r0.<androidx.media3.test.utils.HostActivity: void maybeStartHostedTest()>();

        return;
    }

androidx.media3.test.utils.HostActivity$HostedTest
<androidx.media3.test.utils.HostActivity$HostedTest: void onStart(androidx.media3.test.utils.HostActivity,android.view.Surface,android.widget.FrameLayout)>
<androidx.media3.test.utils.HostActivity$HostedTest: boolean blockUntilStopped(long)>
<androidx.media3.test.utils.HostActivity$HostedTest: boolean forceStop()>
<androidx.media3.test.utils.HostActivity$HostedTest: void onFinished()>
