androidx.camera.core.impl.StateObservable
<androidx.camera.core.impl.StateObservable: int INITIAL_VERSION>
<androidx.camera.core.impl.StateObservable: java.lang.Object mLock>
<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState>
<androidx.camera.core.impl.StateObservable: int mVersion>
<androidx.camera.core.impl.StateObservable: boolean mUpdating>
<androidx.camera.core.impl.StateObservable: java.util.Map mWrapperMap>
<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet>
    void <init>(java.lang.Object, boolean)
    {
        androidx.camera.core.impl.StateObservable r0;
        java.lang.Object r1, $r2;
        boolean z0, $z1;
        java.util.HashMap $r3;
        java.util.concurrent.CopyOnWriteArraySet $r4;
        java.util.concurrent.atomic.AtomicReference $r5, $r6;
        java.lang.Throwable $r7;
        androidx.camera.core.impl.StateObservable$ErrorWrapper $r8;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.impl.StateObservable: java.lang.Object mLock> = $r2;

        r0.<androidx.camera.core.impl.StateObservable: int mVersion> = 0;

        r0.<androidx.camera.core.impl.StateObservable: boolean mUpdating> = 0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.core.impl.StateObservable: java.util.Map mWrapperMap> = $r3;

        $r4 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet> = $r4;

        if z0 == 0 goto label1;

        $z1 = r1 instanceof java.lang.Throwable;

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Initial errors must be Throwable");

        $r6 = new java.util.concurrent.atomic.AtomicReference;

        $r7 = (java.lang.Throwable) r1;

        $r8 = staticinvoke <androidx.camera.core.impl.StateObservable$ErrorWrapper: androidx.camera.core.impl.StateObservable$ErrorWrapper wrap(java.lang.Throwable)>($r7);

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r8);

        r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState> = $r6;

        goto label2;

     label1:
        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);

        r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState> = $r5;

     label2:
        return;
    }

    void updateState(java.lang.Object)
    {
        androidx.camera.core.impl.StateObservable r0;
        java.lang.Object r1;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<androidx.camera.core.impl.StateObservable: void updateStateInternal(java.lang.Object)>(r1);

        return;
    }

    void updateStateAsError(java.lang.Throwable)
    {
        androidx.camera.core.impl.StateObservable r0;
        java.lang.Throwable r1;
        androidx.camera.core.impl.StateObservable$ErrorWrapper $r2;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = staticinvoke <androidx.camera.core.impl.StateObservable$ErrorWrapper: androidx.camera.core.impl.StateObservable$ErrorWrapper wrap(java.lang.Throwable)>(r1);

        specialinvoke r0.<androidx.camera.core.impl.StateObservable: void updateStateInternal(java.lang.Object)>($r2);

        return;
    }

    private void updateStateInternal(java.lang.Object)
    {
        androidx.camera.core.impl.StateObservable r0;
        java.lang.Object r1, r2, $r5, $r8, $r10, r14, r16;
        java.lang.Throwable r3, r4, $r12, $r13;
        java.util.concurrent.atomic.AtomicReference $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        java.util.concurrent.CopyOnWriteArraySet $r7, $r9;
        androidx.camera.core.impl.StateObservable$ObserverWrapper $r11;
        java.util.Iterator r15;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: java.lang.Object;

        $r5 = r0.<androidx.camera.core.impl.StateObservable: java.lang.Object mLock>;

        r14 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState>;

        r2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r1);

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r2, r1);

        if $z0 == 0 goto label03;

        exitmonitor r14;

     label02:
        return;

     label03:
        $i0 = r0.<androidx.camera.core.impl.StateObservable: int mVersion>;

        $i1 = $i0 + 1;

        r0.<androidx.camera.core.impl.StateObservable: int mVersion> = $i1;

        i3 = $i1;

        $z1 = r0.<androidx.camera.core.impl.StateObservable: boolean mUpdating>;

        if $z1 == 0 goto label05;

        exitmonitor r14;

     label04:
        return;

     label05:
        r0.<androidx.camera.core.impl.StateObservable: boolean mUpdating> = 1;

        $r7 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet>;

        r15 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

        exitmonitor r14;

     label06:
        goto label09;

     label07:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r14;

     label08:
        throw r3;

     label09:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r10 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (androidx.camera.core.impl.StateObservable$ObserverWrapper) $r10;

        virtualinvoke $r11.<androidx.camera.core.impl.StateObservable$ObserverWrapper: void update(int)>(i3);

        goto label09;

     label10:
        $r8 = r0.<androidx.camera.core.impl.StateObservable: java.lang.Object mLock>;

        r16 = $r8;

        entermonitor $r8;

     label11:
        $i2 = r0.<androidx.camera.core.impl.StateObservable: int mVersion>;

        if $i2 != i3 goto label13;

        r0.<androidx.camera.core.impl.StateObservable: boolean mUpdating> = 0;

        exitmonitor r16;

     label12:
        goto label18;

     label13:
        $r9 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet>;

        r15 = virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

        i3 = r0.<androidx.camera.core.impl.StateObservable: int mVersion>;

        exitmonitor r16;

     label14:
        goto label17;

     label15:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r16;

     label16:
        throw r4;

     label17:
        goto label09;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public com.google.common.util.concurrent.ListenableFuture fetchData()
    {
        androidx.camera.core.impl.StateObservable r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r3, $r6;
        androidx.camera.core.impl.StateObservable$ErrorWrapper $r4;
        java.lang.Throwable $r5;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        $r2 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState>;

        r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z0 = r1 instanceof androidx.camera.core.impl.StateObservable$ErrorWrapper;

        if $z0 == 0 goto label1;

        $r4 = (androidx.camera.core.impl.StateObservable$ErrorWrapper) r1;

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.StateObservable$ErrorWrapper: java.lang.Throwable getError()>();

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r5);

        return $r6;

     label1:
        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(r1);

        return $r3;
    }

    public void addObserver(java.util.concurrent.Executor, androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.core.impl.StateObservable r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.Observable$Observer r2;
        androidx.camera.core.impl.StateObservable$ObserverWrapper r3, $r7;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r12;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.util.Map $r9;
        java.util.concurrent.CopyOnWriteArraySet $r11;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.impl.Observable$Observer;

        $r6 = r0.<androidx.camera.core.impl.StateObservable: java.lang.Object mLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        specialinvoke r0.<androidx.camera.core.impl.StateObservable: void removeObserverLocked(androidx.camera.core.impl.Observable$Observer)>(r2);

        $r7 = new androidx.camera.core.impl.StateObservable$ObserverWrapper;

        $r8 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.atomic.AtomicReference mState>;

        specialinvoke $r7.<androidx.camera.core.impl.StateObservable$ObserverWrapper: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Executor,androidx.camera.core.impl.Observable$Observer)>($r8, r1, r2);

        r3 = $r7;

        $r9 = r0.<androidx.camera.core.impl.StateObservable: java.util.Map mWrapperMap>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        $r11 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet>;

        virtualinvoke $r11.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(r3);

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        virtualinvoke r3.<androidx.camera.core.impl.StateObservable$ObserverWrapper: void update(int)>(0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeObserver(androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.core.impl.StateObservable r0;
        androidx.camera.core.impl.Observable$Observer r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        $r4 = r0.<androidx.camera.core.impl.StateObservable: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<androidx.camera.core.impl.StateObservable: void removeObserverLocked(androidx.camera.core.impl.Observable$Observer)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void removeObserverLocked(androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.core.impl.StateObservable r0;
        androidx.camera.core.impl.Observable$Observer r1;
        androidx.camera.core.impl.StateObservable$ObserverWrapper r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.concurrent.CopyOnWriteArraySet $r5;

        r0 := @this: androidx.camera.core.impl.StateObservable;

        r1 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        $r3 = r0.<androidx.camera.core.impl.StateObservable: java.util.Map mWrapperMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (androidx.camera.core.impl.StateObservable$ObserverWrapper) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<androidx.camera.core.impl.StateObservable$ObserverWrapper: void close()>();

        $r5 = r0.<androidx.camera.core.impl.StateObservable: java.util.concurrent.CopyOnWriteArraySet mNotifySet>;

        virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

androidx.camera.core.impl.StateObservable$ErrorWrapper
    void <init>()
    {
        androidx.camera.core.impl.StateObservable$ErrorWrapper r0;

        r0 := @this: androidx.camera.core.impl.StateObservable$ErrorWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static androidx.camera.core.impl.StateObservable$ErrorWrapper wrap(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        androidx.camera.core.impl.AutoValue_StateObservable_ErrorWrapper $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new androidx.camera.core.impl.AutoValue_StateObservable_ErrorWrapper;

        specialinvoke $r1.<androidx.camera.core.impl.AutoValue_StateObservable_ErrorWrapper: void <init>(java.lang.Throwable)>(r0);

        return $r1;
    }

<androidx.camera.core.impl.StateObservable$ErrorWrapper: java.lang.Throwable getError()>
androidx.camera.core.impl.StateObservable$ObserverWrapper
<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object NOT_SET>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: int NO_VERSION>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.Executor mExecutor>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: androidx.camera.core.impl.Observable$Observer mObserver>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicReference mStateRef>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object mLastState>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion>
<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating>
    void <init>(java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Executor, androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.core.impl.StateObservable$ObserverWrapper r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.util.concurrent.Executor r2;
        androidx.camera.core.impl.Observable$Observer r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.core.impl.StateObservable$ObserverWrapper;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.impl.Observable$Observer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive> = $r4;

        $r5 = <androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object NOT_SET>;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object mLastState> = $r5;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion> = -1;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating> = 0;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicReference mStateRef> = r1;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.Executor mExecutor> = r2;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: androidx.camera.core.impl.Observable$Observer mObserver> = r3;

        return;
    }

    public void run()
    {
        androidx.camera.core.impl.StateObservable$ObserverWrapper r0, r15, r18;
        java.lang.Throwable r1, r2, $r12, $r13, $r14;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        java.lang.Object $r6, r16;
        androidx.camera.core.impl.Observable$Observer $r9, $r11;
        androidx.camera.core.impl.StateObservable$ErrorWrapper $r10;
        int i0, $i1;

        r0 := @this: androidx.camera.core.impl.StateObservable$ObserverWrapper;

        r15 = r0;

        entermonitor r0;

     label01:
        $r4 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label03;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating> = 0;

        exitmonitor r15;

     label02:
        return;

     label03:
        $r5 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicReference mStateRef>;

        r16 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        i0 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion>;

        exitmonitor r15;

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        r1 = $r13;

        exitmonitor r15;

     label06:
        throw r1;

     label07:
        $r6 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object mLastState>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, r16);

        if $z1 != 0 goto label09;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object mLastState> = r16;

        $z3 = r16 instanceof androidx.camera.core.impl.StateObservable$ErrorWrapper;

        if $z3 == 0 goto label08;

        $r11 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: androidx.camera.core.impl.Observable$Observer mObserver>;

        $r10 = (androidx.camera.core.impl.StateObservable$ErrorWrapper) r16;

        $r12 = virtualinvoke $r10.<androidx.camera.core.impl.StateObservable$ErrorWrapper: java.lang.Throwable getError()>();

        interfaceinvoke $r11.<androidx.camera.core.impl.Observable$Observer: void onError(java.lang.Throwable)>($r12);

        goto label09;

     label08:
        $r9 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: androidx.camera.core.impl.Observable$Observer mObserver>;

        interfaceinvoke $r9.<androidx.camera.core.impl.Observable$Observer: void onNewData(java.lang.Object)>(r16);

     label09:
        r18 = r0;

        entermonitor r0;

     label10:
        $i1 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion>;

        if i0 == $i1 goto label11;

        $r7 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive>;

        $z2 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label13;

     label11:
        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating> = 0;

        exitmonitor r18;

     label12:
        goto label18;

     label13:
        $r8 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicReference mStateRef>;

        r16 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        i0 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion>;

        exitmonitor r18;

     label14:
        goto label17;

     label15:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r18;

     label16:
        throw r2;

     label17:
        goto label07;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label10 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    void update(int)
    {
        androidx.camera.core.impl.StateObservable$ObserverWrapper r0, r7, r10;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1;
        java.util.concurrent.Executor $r3;
        java.lang.Throwable $r4, $r6, r8, r9;

        r0 := @this: androidx.camera.core.impl.StateObservable$ObserverWrapper;

        i0 := @parameter0: int;

        r7 = r0;

        entermonitor r0;

     label01:
        $r2 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label03;

        exitmonitor r7;

     label02:
        return;

     label03:
        $i1 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion>;

        if i0 > $i1 goto label05;

        exitmonitor r7;

     label04:
        return;

     label05:
        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: int mLatestSignalledVersion> = i0;

        $z1 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating>;

        if $z1 == 0 goto label07;

        exitmonitor r7;

     label06:
        return;

     label07:
        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating> = 1;

        exitmonitor r7;

     label08:
        goto label11;

     label09:
        $r6 := @caughtexception;

        r8 = $r6;

        exitmonitor r7;

     label10:
        throw r8;

     label11:
        $r3 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

     label12:
        goto label14;

     label13:
        $r4 := @caughtexception;

        r9 = $r4;

        r10 = r0;

        entermonitor r0;

        r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: boolean mWrapperUpdating> = 0;

        exitmonitor r10;

        goto label14;

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    void close()
    {
        androidx.camera.core.impl.StateObservable$ObserverWrapper r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.camera.core.impl.StateObservable$ObserverWrapper;

        $r1 = r0.<androidx.camera.core.impl.StateObservable$ObserverWrapper: java.util.concurrent.atomic.AtomicBoolean mActive>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.camera.core.impl.StateObservable$ObserverWrapper: java.lang.Object NOT_SET> = $r0;

        return;
    }

