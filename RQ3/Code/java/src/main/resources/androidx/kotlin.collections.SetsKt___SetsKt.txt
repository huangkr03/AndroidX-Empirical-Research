kotlin.collections.SetsKt___SetsKt
    public void <init>()
    {
        kotlin.collections.SetsKt___SetsKt $r0;

        $r0 := @this: kotlin.collections.SetsKt___SetsKt;

        specialinvoke $r0.<kotlin.collections.SetsKt__SetsKt: void <init>()>();

        return;
    }

    public static final java.util.Set minus(java.util.Set, java.lang.Iterable)
    {
        java.util.Set $r0;
        java.lang.Iterable $r1, r7;
        java.util.Collection $r2, r8;
        boolean $z0;
        java.util.LinkedHashSet $r3, r6;
        java.util.Iterator $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r7 = (java.lang.Iterable) $r0;

        $r2 = staticinvoke <kotlin.collections.BrittleContainsOptimizationKt: java.util.Collection convertToSetForSetOperationWith(java.lang.Iterable,java.lang.Iterable)>($r1, r7);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Iterable) $r0;

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r1);

        return $r0;

     label1:
        $z0 = $r2 instanceof java.util.Set;

        if $z0 == 0 goto label4;

        r6 = new java.util.LinkedHashSet;

        $r3 = r6;

        specialinvoke r6.<java.util.LinkedHashSet: void <init>()>();

        $r1 = (java.lang.Iterable) $r0;

        $r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        r8 = (java.util.Collection) $r3;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label2;

     label3:
        $r0 = (java.util.Set) $r3;

        return $r0;

     label4:
        r6 = new java.util.LinkedHashSet;

        $r3 = r6;

        r8 = (java.util.Collection) $r0;

        specialinvoke r6.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r8);

        virtualinvoke $r3.<java.util.LinkedHashSet: boolean removeAll(java.util.Collection)>($r2);

        $r0 = (java.util.Set) $r3;

        return $r0;
    }

    public static final java.util.Set minus(java.util.Set, java.lang.Object)
    {
        java.lang.Object $r0, $r4;
        java.util.Set $r1;
        java.util.LinkedHashSet $r2, r5;
        int $i0;
        java.util.Iterator $r3;
        boolean $z0, $z1, $z2;
        java.lang.Iterable r6;
        java.util.Collection r7;

        $r1 := @parameter0: java.util.Set;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        r5 = new java.util.LinkedHashSet;

        $r2 = r5;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r5.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r6 = (java.lang.Iterable) $r1;

        $r3 = interfaceinvoke r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = 1;

        if $z0 != 0 goto label2;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r0);

        if $z2 == 0 goto label2;

        $z0 = 1;

        $z1 = 0;

     label2:
        if $z1 == 0 goto label1;

        r7 = (java.util.Collection) $r2;

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        $r1 = (java.util.Set) $r2;

        return $r1;
    }

    public static final java.util.Set minus(java.util.Set, kotlin.sequences.Sequence)
    {
        java.util.Set $r0;
        kotlin.sequences.Sequence $r1;
        java.util.LinkedHashSet $r2, r3;
        java.util.Collection r4;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r3 = new java.util.LinkedHashSet;

        $r2 = r3;

        r4 = (java.util.Collection) $r0;

        specialinvoke r3.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r4);

        r4 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,kotlin.sequences.Sequence)>(r4, $r1);

        $r0 = (java.util.Set) $r2;

        return $r0;
    }

    public static final java.util.Set minus(java.util.Set, java.lang.Object[])
    {
        java.util.Set $r0;
        java.lang.Object[] $r1;
        java.util.LinkedHashSet $r2, r3;
        java.util.Collection r4;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r3 = new java.util.LinkedHashSet;

        $r2 = r3;

        r4 = (java.util.Collection) $r0;

        specialinvoke r3.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r4);

        r4 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,java.lang.Object[])>(r4, $r1);

        $r0 = (java.util.Set) $r2;

        return $r0;
    }

    private static final java.util.Set minusElement(java.util.Set, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Set $r1;

        $r1 := @parameter0: java.util.Set;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r1 = staticinvoke <kotlin.collections.SetsKt: java.util.Set minus(java.util.Set,java.lang.Object)>($r1, $r0);

        return $r1;
    }

    public static final java.util.Set plus(java.util.Set, java.lang.Iterable)
    {
        java.util.Set $r0;
        java.lang.Iterable $r1;
        java.lang.Integer $r2;
        int $i0, $i1;
        java.util.LinkedHashSet $r3, r4;
        java.util.Collection r5;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Integer collectionSizeOrNull(java.lang.Iterable)>($r1);

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        $i1 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i0 = $i1 + $i0;

        goto label2;

     label1:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i0 = $i0 + $i0;

     label2:
        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        r4 = new java.util.LinkedHashSet;

        $r3 = r4;

        specialinvoke r4.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r0;

        virtualinvoke $r3.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>(r5);

        r5 = (java.util.Collection) $r3;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r5, $r1);

        $r0 = (java.util.Set) $r3;

        return $r0;
    }

    public static final java.util.Set plus(java.util.Set, java.lang.Object)
    {
        java.util.Set $r0;
        java.lang.Object $r1;
        java.util.LinkedHashSet $r2, r3;
        int $i0;
        java.util.Collection r4;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r3 = new java.util.LinkedHashSet;

        $r2 = r3;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i0 = $i0 + 1;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r3.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r0;

        virtualinvoke $r2.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>(r4);

        virtualinvoke $r2.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r1);

        $r0 = (java.util.Set) $r2;

        return $r0;
    }

    public static final java.util.Set plus(java.util.Set, kotlin.sequences.Sequence)
    {
        java.util.Set $r0;
        kotlin.sequences.Sequence $r1;
        java.util.LinkedHashSet $r2, r3;
        int $i0;
        java.util.Collection r4;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r3 = new java.util.LinkedHashSet;

        $r2 = r3;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i0 = $i0 + $i0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r3.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r0;

        virtualinvoke $r2.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>(r4);

        r4 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,kotlin.sequences.Sequence)>(r4, $r1);

        $r0 = (java.util.Set) $r2;

        return $r0;
    }

    public static final java.util.Set plus(java.util.Set, java.lang.Object[])
    {
        java.util.Set $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.util.LinkedHashSet $r2, r3;
        java.util.Collection r4;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r3 = new java.util.LinkedHashSet;

        $r2 = r3;

        $i1 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i0 = lengthof $r1;

        $i0 = $i1 + $i0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r3.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r0;

        virtualinvoke $r2.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>(r4);

        r4 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Object[])>(r4, $r1);

        $r0 = (java.util.Set) $r2;

        return $r0;
    }

    private static final java.util.Set plusElement(java.util.Set, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Set $r1;

        $r1 := @parameter0: java.util.Set;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r1 = staticinvoke <kotlin.collections.SetsKt: java.util.Set plus(java.util.Set,java.lang.Object)>($r1, $r0);

        return $r1;
    }

