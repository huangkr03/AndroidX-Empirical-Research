kotlin.coroutines.jvm.internal.ContinuationImpl
<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context>
<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted>
    public void <init>(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl $r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;

        $r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        specialinvoke $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>($r1, $r2);

        return;
    }

    public void <init>(kotlin.coroutines.Continuation, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl $r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;

        $r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r1);

        $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context> = $r2;

        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 = $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public final kotlin.coroutines.Continuation intercepted()
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl $r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.coroutines.CoroutineContext $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.ContinuationInterceptor $r5;

        $r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r2 = $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted>;

        if $r2 != null goto label3;

        $r3 = virtualinvoke $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r4 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r1);

        $r5 = (kotlin.coroutines.ContinuationInterceptor) $r4;

        if $r5 == null goto label1;

        $r2 = interfaceinvoke $r5.<kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>($r0);

        $r6 = $r2;

        if $r2 != null goto label2;

     label1:
        $r6 = $r0;

     label2:
        $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted> = $r6;

        return $r6;

     label3:
        return $r2;
    }

    protected void releaseIntercepted()
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl $r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.ContinuationInterceptor $r5;
        kotlin.coroutines.jvm.internal.CompletedContinuation $r6;

        $r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r2 = $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted>;

        if $r2 == null goto label1;

        if $r2 == $r0 goto label1;

        $r3 = virtualinvoke $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r4 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $r5 = (kotlin.coroutines.ContinuationInterceptor) $r4;

        interfaceinvoke $r5.<kotlin.coroutines.ContinuationInterceptor: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>($r2);

     label1:
        $r6 = <kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.jvm.internal.CompletedContinuation INSTANCE>;

        $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted> = $r6;

        return;
    }

