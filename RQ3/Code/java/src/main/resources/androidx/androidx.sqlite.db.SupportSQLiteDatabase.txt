androidx.sqlite.db.SupportSQLiteDatabase
<androidx.sqlite.db.SupportSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>
<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>
<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>
<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>
<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>
<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>
<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean inTransaction()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDbLockedByCurrentThread()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely(long)>
    public boolean isExecPerConnectionSQLSupported()
    {
        androidx.sqlite.db.SupportSQLiteDatabase r0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteDatabase;

        return 0;
    }

    public void execPerConnectionSQL(java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.SupportSQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.sqlite.db.SupportSQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

<androidx.sqlite.db.SupportSQLiteDatabase: int getVersion()>
<androidx.sqlite.db.SupportSQLiteDatabase: void setVersion(int)>
<androidx.sqlite.db.SupportSQLiteDatabase: long getMaximumSize()>
<androidx.sqlite.db.SupportSQLiteDatabase: long setMaximumSize(long)>
<androidx.sqlite.db.SupportSQLiteDatabase: long getPageSize()>
<androidx.sqlite.db.SupportSQLiteDatabase: void setPageSize(long)>
<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>
<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.Object[])>
<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>
<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>
<androidx.sqlite.db.SupportSQLiteDatabase: long insert(java.lang.String,int,android.content.ContentValues)>
<androidx.sqlite.db.SupportSQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.Object[])>
<androidx.sqlite.db.SupportSQLiteDatabase: int update(java.lang.String,int,android.content.ContentValues,java.lang.String,java.lang.Object[])>
<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>
<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean isReadOnly()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean needUpgrade(int)>
<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>
<androidx.sqlite.db.SupportSQLiteDatabase: void setLocale(java.util.Locale)>
<androidx.sqlite.db.SupportSQLiteDatabase: void setMaxSqlCacheSize(int)>
<androidx.sqlite.db.SupportSQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean enableWriteAheadLogging()>
<androidx.sqlite.db.SupportSQLiteDatabase: void disableWriteAheadLogging()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()>
<androidx.sqlite.db.SupportSQLiteDatabase: java.util.List getAttachedDbs()>
<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDatabaseIntegrityOk()>
