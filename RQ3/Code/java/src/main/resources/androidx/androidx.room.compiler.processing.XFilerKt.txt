androidx.room.compiler.processing.XFilerKt
    public static final void writeTo(com.squareup.javapoet.JavaFile, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode)
    {
        com.squareup.javapoet.JavaFile $r0;
        androidx.room.compiler.processing.XFiler r1;
        androidx.room.compiler.processing.XFiler$Mode r2;

        $r0 := @parameter0: com.squareup.javapoet.JavaFile;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r2 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "generator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mode");

        interfaceinvoke r1.<androidx.room.compiler.processing.XFiler: void write(com.squareup.javapoet.JavaFile,androidx.room.compiler.processing.XFiler$Mode)>($r0, r2);

        return;
    }

    public static void writeTo$default(com.squareup.javapoet.JavaFile, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode, int, java.lang.Object)
    {
        com.squareup.javapoet.JavaFile r0;
        androidx.room.compiler.processing.XFiler r1;
        int i0, $i1;
        java.lang.Object r2;
        androidx.room.compiler.processing.XFiler$Mode r3;

        r0 := @parameter0: com.squareup.javapoet.JavaFile;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r3 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = <androidx.room.compiler.processing.XFiler$Mode: androidx.room.compiler.processing.XFiler$Mode Isolating>;

     label1:
        staticinvoke <androidx.room.compiler.processing.XFilerKt: void writeTo(com.squareup.javapoet.JavaFile,androidx.room.compiler.processing.XFiler,androidx.room.compiler.processing.XFiler$Mode)>(r0, r1, r3);

        return;
    }

    public static final void writeTo(com.squareup.kotlinpoet.FileSpec, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode)
    {
        com.squareup.kotlinpoet.FileSpec $r0;
        androidx.room.compiler.processing.XFiler r1;
        androidx.room.compiler.processing.XFiler$Mode r2;

        $r0 := @parameter0: com.squareup.kotlinpoet.FileSpec;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r2 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "generator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mode");

        interfaceinvoke r1.<androidx.room.compiler.processing.XFiler: void write(com.squareup.kotlinpoet.FileSpec,androidx.room.compiler.processing.XFiler$Mode)>($r0, r2);

        return;
    }

    public static void writeTo$default(com.squareup.kotlinpoet.FileSpec, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode, int, java.lang.Object)
    {
        com.squareup.kotlinpoet.FileSpec r0;
        androidx.room.compiler.processing.XFiler r1;
        int i0, $i1;
        java.lang.Object r2;
        androidx.room.compiler.processing.XFiler$Mode r3;

        r0 := @parameter0: com.squareup.kotlinpoet.FileSpec;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r3 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = <androidx.room.compiler.processing.XFiler$Mode: androidx.room.compiler.processing.XFiler$Mode Isolating>;

     label1:
        staticinvoke <androidx.room.compiler.processing.XFilerKt: void writeTo(com.squareup.kotlinpoet.FileSpec,androidx.room.compiler.processing.XFiler,androidx.room.compiler.processing.XFiler$Mode)>(r0, r1, r3);

        return;
    }

    public static final void writeTo(androidx.room.compiler.codegen.XTypeSpec, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode)
    {
        androidx.room.compiler.codegen.XTypeSpec $r0;
        androidx.room.compiler.processing.XFiler r1;
        androidx.room.compiler.processing.XFiler$Mode r2;
        com.squareup.javapoet.JavaFile r3;
        androidx.room.compiler.codegen.XClassName $r4, $r9, $r11, $r22;
        java.util.List $r5, $r12;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r6;
        int[] $r7;
        boolean $z0, $z1, $z2;
        com.squareup.kotlinpoet.FileSpec$Companion $r8;
        java.lang.String $r10, $r14, $r21, $r23, $r28, $r30, $r31, r32, r33;
        java.lang.Object $r13;
        com.squareup.kotlinpoet.FileSpec$Builder $r15, $r18;
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec $r16;
        com.squareup.kotlinpoet.TypeSpec $r17;
        com.squareup.kotlinpoet.FileSpec $r19;
        java.lang.IllegalStateException $r20, $r27;
        androidx.room.compiler.codegen.java.JavaTypeSpec $r24;
        com.squareup.javapoet.TypeSpec $r25;
        com.squareup.javapoet.JavaFile$Builder $r26;
        java.lang.IllegalArgumentException $r29;

        $r0 := @parameter0: androidx.room.compiler.codegen.XTypeSpec;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r2 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "generator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mode");

        $r4 = interfaceinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XClassName getClassName()>();

        $r5 = virtualinvoke $r4.<androidx.room.compiler.codegen.XClassName: java.util.List getSimpleNames()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r31 = "XTypeSpec must be a top-level class.";

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r29;

     label3:
        $r6 = interfaceinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.CodeLanguage getLanguage()>();

        $r7 = <androidx.room.compiler.processing.XFilerKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke $r6.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label6;
            default: goto label8;
        };

     label4:
        $z1 = $r0 instanceof androidx.room.compiler.codegen.java.JavaTypeSpec;

        if $z1 != 0 goto label5;

        r32 = "Check failed.";

        $r27 = new java.lang.IllegalStateException;

        $r28 = virtualinvoke r32.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label5:
        $r22 = interfaceinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XClassName getClassName()>();

        $r23 = virtualinvoke $r22.<androidx.room.compiler.codegen.XClassName: java.lang.String getPackageName()>();

        $r24 = (androidx.room.compiler.codegen.java.JavaTypeSpec) $r0;

        $r25 = virtualinvoke $r24.<androidx.room.compiler.codegen.java.JavaTypeSpec: com.squareup.javapoet.TypeSpec getActual$room_compiler_processing()>();

        $r26 = staticinvoke <com.squareup.javapoet.JavaFile: com.squareup.javapoet.JavaFile$Builder builder(java.lang.String,com.squareup.javapoet.TypeSpec)>($r23, $r25);

        r3 = virtualinvoke $r26.<com.squareup.javapoet.JavaFile$Builder: com.squareup.javapoet.JavaFile build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "builder(this.className.p\u2026\n                .build()");

        staticinvoke <androidx.room.compiler.processing.XFilerKt: void writeTo(com.squareup.javapoet.JavaFile,androidx.room.compiler.processing.XFiler,androidx.room.compiler.processing.XFiler$Mode)>(r3, r1, r2);

        goto label8;

     label6:
        $z0 = $r0 instanceof androidx.room.compiler.codegen.kotlin.KotlinTypeSpec;

        if $z0 != 0 goto label7;

        r33 = "Check failed.";

        $r20 = new java.lang.IllegalStateException;

        $r21 = virtualinvoke r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label7:
        $r8 = <com.squareup.kotlinpoet.FileSpec: com.squareup.kotlinpoet.FileSpec$Companion Companion>;

        $r9 = interfaceinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XClassName getClassName()>();

        $r10 = virtualinvoke $r9.<androidx.room.compiler.codegen.XClassName: java.lang.String getPackageName()>();

        $r11 = interfaceinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XClassName getClassName()>();

        $r12 = virtualinvoke $r11.<androidx.room.compiler.codegen.XClassName: java.util.List getSimpleNames()>();

        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>($r12);

        $r14 = (java.lang.String) $r13;

        $r15 = virtualinvoke $r8.<com.squareup.kotlinpoet.FileSpec$Companion: com.squareup.kotlinpoet.FileSpec$Builder builder(java.lang.String,java.lang.String)>($r10, $r14);

        $r16 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec) $r0;

        $r17 = virtualinvoke $r16.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: com.squareup.kotlinpoet.TypeSpec getActual$room_compiler_processing()>();

        $r18 = virtualinvoke $r15.<com.squareup.kotlinpoet.FileSpec$Builder: com.squareup.kotlinpoet.FileSpec$Builder addType(com.squareup.kotlinpoet.TypeSpec)>($r17);

        $r19 = virtualinvoke $r18.<com.squareup.kotlinpoet.FileSpec$Builder: com.squareup.kotlinpoet.FileSpec build()>();

        staticinvoke <androidx.room.compiler.processing.XFilerKt: void writeTo(com.squareup.kotlinpoet.FileSpec,androidx.room.compiler.processing.XFiler,androidx.room.compiler.processing.XFiler$Mode)>($r19, r1, r2);

     label8:
        return;
    }

    public static void writeTo$default(androidx.room.compiler.codegen.XTypeSpec, androidx.room.compiler.processing.XFiler, androidx.room.compiler.processing.XFiler$Mode, int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XTypeSpec r0;
        androidx.room.compiler.processing.XFiler r1;
        int i0, $i1;
        java.lang.Object r2;
        androidx.room.compiler.processing.XFiler$Mode r3;

        r0 := @parameter0: androidx.room.compiler.codegen.XTypeSpec;

        r1 := @parameter1: androidx.room.compiler.processing.XFiler;

        r3 := @parameter2: androidx.room.compiler.processing.XFiler$Mode;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = <androidx.room.compiler.processing.XFiler$Mode: androidx.room.compiler.processing.XFiler$Mode Isolating>;

     label1:
        staticinvoke <androidx.room.compiler.processing.XFilerKt: void writeTo(androidx.room.compiler.codegen.XTypeSpec,androidx.room.compiler.processing.XFiler,androidx.room.compiler.processing.XFiler$Mode)>(r0, r1, r3);

        return;
    }

