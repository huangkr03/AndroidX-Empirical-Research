androidx.work.testing.TestScheduler
<androidx.work.testing.TestScheduler: android.content.Context context>
<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>
<androidx.work.testing.TestScheduler: java.util.Set terminatedWorkIds>
<androidx.work.testing.TestScheduler: java.lang.Object lock>
<androidx.work.testing.TestScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>
    public void <init>(android.content.Context)
    {
        androidx.work.testing.TestScheduler r0;
        android.content.Context r1;
        java.util.LinkedHashMap $r2;
        java.util.Map $r3;
        java.util.LinkedHashSet $r4;
        java.util.Set $r5;
        java.lang.Object $r6;
        androidx.work.impl.StartStopTokens $r7;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.testing.TestScheduler: android.content.Context context> = r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = (java.util.Map) $r2;

        r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates> = $r3;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        $r5 = (java.util.Set) $r4;

        r0.<androidx.work.testing.TestScheduler: java.util.Set terminatedWorkIds> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.work.testing.TestScheduler: java.lang.Object lock> = $r6;

        $r7 = new androidx.work.impl.StartStopTokens;

        specialinvoke $r7.<androidx.work.impl.StartStopTokens: void <init>()>();

        r0.<androidx.work.testing.TestScheduler: androidx.work.impl.StartStopTokens mStartStopTokens> = $r7;

        return;
    }

    public boolean hasLimitedSchedulingSlots()
    {
        androidx.work.testing.TestScheduler r0;

        r0 := @this: androidx.work.testing.TestScheduler;

        return 1;
    }

    public transient void schedule(androidx.work.impl.model.WorkSpec[])
    {
        androidx.work.testing.TestScheduler r0;
        androidx.work.impl.model.WorkSpec[] r1;
        java.util.Map r2, $r4;
        androidx.work.impl.model.WorkSpec r3, r22, r29;
        java.lang.String r5, $r15;
        java.lang.Object r6, $r10, $r11, $r12, $r20, $r24;
        androidx.work.testing.InternalWorkState r7, $r23, r30;
        int $i0, $i1, i2;
        java.util.LinkedHashMap $r8;
        java.util.Set $r9;
        boolean $z2, $z3, $z4, $z5;
        android.content.Context $r13;
        androidx.work.impl.WorkManagerImpl $r14;
        androidx.work.impl.model.WorkGenerationalId $r16, $r31;
        java.lang.Throwable $r19;
        kotlin.Unit $r25;
        java.util.Iterator $r27;
        java.util.Map$Entry $r28;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecs");

        $i0 = lengthof r1;

        if $i0 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 == 0 goto label03;

        return;

     label03:
        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r2 = (java.util.Map) $r8;

        $r20 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor $r20;

     label04:
        $i1 = 0;

        i2 = lengthof r1;

     label05:
        if $i1 >= i2 goto label08;

        r22 = r1[$i1];

        r3 = r22;

        $r4 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r16 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r3);

        r5 = virtualinvoke $r16.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        if r6 != null goto label06;

        $r23 = staticinvoke <androidx.work.testing.TestSchedulerKt: androidx.work.testing.InternalWorkState InternalWorkState(androidx.work.impl.model.WorkSpec)>(r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r23);

        $r24 = $r23;

        goto label07;

     label06:
        $r24 = r6;

     label07:
        r7 = (androidx.work.testing.InternalWorkState) $r24;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r7);

        $i1 = $i1 + 1;

        goto label05;

     label08:
        $r25 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor $r20;

        goto label12;

     label10:
        $r19 := @caughtexception;

     label11:
        exitmonitor $r20;

        throw $r19;

     label12:
        $r9 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r27 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r10 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke $r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        r29 = (androidx.work.impl.model.WorkSpec) $r11;

        $r12 = interfaceinvoke $r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        r30 = (androidx.work.testing.InternalWorkState) $r12;

        $z3 = virtualinvoke r29.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        if $z3 == 0 goto label14;

        $z4 = virtualinvoke r30.<androidx.work.testing.InternalWorkState: boolean getPeriodDelayMet()>();

        if $z4 == 0 goto label14;

        $r13 = r0.<androidx.work.testing.TestScheduler: android.content.Context context>;

        $r14 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r13);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "getInstance(context)");

        $r15 = r29.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        staticinvoke <androidx.work.testing.TestSchedulerKt: void access$rewindLastEnqueueTime(androidx.work.impl.WorkManagerImpl,java.lang.String)>($r14, $r15);

     label14:
        $r31 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r29);

        specialinvoke r0.<androidx.work.testing.TestScheduler: void scheduleInternal(androidx.work.impl.model.WorkGenerationalId,androidx.work.testing.InternalWorkState)>($r31, r30);

        goto label13;

     label15:
        return;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void cancel(java.lang.String)
    {
        androidx.work.testing.TestScheduler r0;
        java.lang.String r1;
        java.util.List r2;
        java.lang.Iterable $r3;
        androidx.work.impl.StartStopToken r4;
        androidx.work.impl.StartStopTokens $r5;
        boolean $z1, $z2;
        java.util.Map $r6, $r8;
        java.lang.Object $r7, r14, $r15;
        android.content.Context $r10;
        androidx.work.impl.WorkManagerImpl $r11;
        java.lang.Throwable $r12;
        java.util.Iterator $r13;
        androidx.work.testing.InternalWorkState r16;
        kotlin.Unit $r17;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecId");

        $r5 = r0.<androidx.work.testing.TestScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        r2 = virtualinvoke $r5.<androidx.work.impl.StartStopTokens: java.util.List remove(java.lang.String)>(r1);

        $r3 = (java.lang.Iterable) r2;

        $r13 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.work.impl.StartStopToken) r14;

        $r10 = r0.<androidx.work.testing.TestScheduler: android.content.Context context>;

        $r11 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r10);

        virtualinvoke $r11.<androidx.work.impl.WorkManagerImpl: void stopWork(androidx.work.impl.StartStopToken)>(r4);

        goto label1;

     label2:
        $r15 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor $r15;

     label3:
        $r6 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r16 = (androidx.work.testing.InternalWorkState) $r7;

        if r16 == null goto label4;

        $z2 = virtualinvoke r16.<androidx.work.testing.InternalWorkState: boolean isPeriodic()>();

        if $z2 != 0 goto label4;

        $r8 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label4:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor $r15;

        goto label8;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor $r15;

        throw $r12;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void setAllConstraintsMet(java.util.UUID)
    {
        androidx.work.testing.TestScheduler r0;
        java.util.UUID r1;
        java.lang.String r2, $r5, $r17;
        java.lang.Object r3, $r8;
        androidx.work.testing.InternalWorkState r4, $r9, r19;
        java.util.Set $r6;
        boolean $z0;
        java.util.Map $r7, $r10;
        androidx.work.impl.model.WorkGenerationalId $r11;
        int $i0;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.lang.Throwable $r18;
        kotlin.Unit $r20;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: java.util.UUID;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecId");

        $r5 = virtualinvoke r1.<java.util.UUID: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "workSpecId.toString()");

        r2 = $r5;

        r3 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor r3;

     label1:
        $r6 = r0.<androidx.work.testing.TestScheduler: java.util.Set terminatedWorkIds>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

     label2:
        exitmonitor r3;

        return;

     label3:
        $r7 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r9 = (androidx.work.testing.InternalWorkState) $r8;

        if $r9 != null goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Work with id ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not enqueued!");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        r4 = $r9;

        r19 = staticinvoke <androidx.work.testing.InternalWorkState: androidx.work.testing.InternalWorkState copy$default(androidx.work.testing.InternalWorkState,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.Object)>(r4, 0, 1, 0, 0, 0, 0, 61, null);

        $r10 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r19);

        $r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor r3;

        goto label8;

     label6:
        $r18 := @caughtexception;

     label7:
        exitmonitor r3;

        throw $r18;

     label8:
        $r11 = new androidx.work.impl.model.WorkGenerationalId;

        $i0 = virtualinvoke r19.<androidx.work.testing.InternalWorkState: int getGeneration()>();

        specialinvoke $r11.<androidx.work.impl.model.WorkGenerationalId: void <init>(java.lang.String,int)>(r2, $i0);

        specialinvoke r0.<androidx.work.testing.TestScheduler: void scheduleInternal(androidx.work.impl.model.WorkGenerationalId,androidx.work.testing.InternalWorkState)>($r11, r19);

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void setInitialDelayMet(java.util.UUID)
    {
        androidx.work.testing.TestScheduler r0;
        java.util.UUID r1;
        java.lang.String r2, $r5, $r19;
        java.lang.Object r3, $r8;
        androidx.work.testing.InternalWorkState r4, $r9, r21;
        java.util.Set $r6;
        boolean $z0;
        java.util.Map $r7, $r10;
        android.content.Context $r11;
        androidx.work.impl.WorkManagerImpl $r12;
        androidx.work.impl.model.WorkGenerationalId $r13;
        int $i0;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        java.lang.Throwable $r20;
        kotlin.Unit $r22;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: java.util.UUID;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecId");

        $r5 = virtualinvoke r1.<java.util.UUID: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "workSpecId.toString()");

        r2 = $r5;

        r3 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor r3;

     label1:
        $r6 = r0.<androidx.work.testing.TestScheduler: java.util.Set terminatedWorkIds>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

     label2:
        exitmonitor r3;

        return;

     label3:
        $r7 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r9 = (androidx.work.testing.InternalWorkState) $r8;

        if $r9 != null goto label4;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Work with id ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not enqueued!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label4:
        r4 = $r9;

        r21 = staticinvoke <androidx.work.testing.InternalWorkState: androidx.work.testing.InternalWorkState copy$default(androidx.work.testing.InternalWorkState,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.Object)>(r4, 0, 0, 1, 0, 0, 0, 59, null);

        $r10 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r21);

        $r22 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor r3;

        goto label8;

     label6:
        $r20 := @caughtexception;

     label7:
        exitmonitor r3;

        throw $r20;

     label8:
        $r11 = r0.<androidx.work.testing.TestScheduler: android.content.Context context>;

        $r12 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "getInstance(context)");

        staticinvoke <androidx.work.testing.TestSchedulerKt: void access$rewindLastEnqueueTime(androidx.work.impl.WorkManagerImpl,java.lang.String)>($r12, r2);

        $r13 = new androidx.work.impl.model.WorkGenerationalId;

        $i0 = virtualinvoke r21.<androidx.work.testing.InternalWorkState: int getGeneration()>();

        specialinvoke $r13.<androidx.work.impl.model.WorkGenerationalId: void <init>(java.lang.String,int)>(r2, $i0);

        specialinvoke r0.<androidx.work.testing.TestScheduler: void scheduleInternal(androidx.work.impl.model.WorkGenerationalId,androidx.work.testing.InternalWorkState)>($r13, r21);

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void setPeriodDelayMet(java.util.UUID)
    {
        androidx.work.testing.TestScheduler r0;
        java.util.UUID r1;
        java.lang.String r2, $r5, $r18;
        java.lang.Object r3, $r7;
        androidx.work.testing.InternalWorkState r4, $r8, r20;
        java.util.Map $r6, $r9;
        android.content.Context $r10;
        androidx.work.impl.WorkManagerImpl $r11;
        androidx.work.impl.model.WorkGenerationalId $r12;
        int $i0;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.lang.Throwable $r19;
        kotlin.Unit $r21;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: java.util.UUID;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workSpecId");

        $r5 = virtualinvoke r1.<java.util.UUID: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "workSpecId.toString()");

        r2 = $r5;

        r3 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor r3;

     label1:
        $r6 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (androidx.work.testing.InternalWorkState) $r7;

        if $r8 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Work with id ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not enqueued!");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        r4 = $r8;

        r20 = staticinvoke <androidx.work.testing.InternalWorkState: androidx.work.testing.InternalWorkState copy$default(androidx.work.testing.InternalWorkState,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.Object)>(r4, 0, 0, 0, 1, 0, 0, 55, null);

        $r9 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r20);

        $r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r3;

        goto label6;

     label4:
        $r19 := @caughtexception;

     label5:
        exitmonitor r3;

        throw $r19;

     label6:
        $r10 = r0.<androidx.work.testing.TestScheduler: android.content.Context context>;

        $r11 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "getInstance(context)");

        staticinvoke <androidx.work.testing.TestSchedulerKt: void access$rewindLastEnqueueTime(androidx.work.impl.WorkManagerImpl,java.lang.String)>($r11, r2);

        $r12 = new androidx.work.impl.model.WorkGenerationalId;

        $i0 = virtualinvoke r20.<androidx.work.testing.InternalWorkState: int getGeneration()>();

        specialinvoke $r12.<androidx.work.impl.model.WorkGenerationalId: void <init>(java.lang.String,int)>(r2, $i0);

        specialinvoke r0.<androidx.work.testing.TestScheduler: void scheduleInternal(androidx.work.impl.model.WorkGenerationalId,androidx.work.testing.InternalWorkState)>($r12, r20);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.testing.TestScheduler r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        boolean z0, z1, $z2, $z4, $z5, $z7, z8, $z9;
        java.lang.Object r2, $r7;
        java.lang.String r3;
        androidx.work.testing.InternalWorkState r4, $r8, r15;
        java.util.Map r5, $r6, $r9;
        java.util.Set $r11;
        androidx.work.impl.StartStopTokens $r12;
        java.lang.Throwable $r14;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "id");

        r2 = r0.<androidx.work.testing.TestScheduler: java.lang.Object lock>;

        entermonitor r2;

     label01:
        r3 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r6 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r8 = (androidx.work.testing.InternalWorkState) $r7;

        if $r8 != null goto label03;

     label02:
        exitmonitor r2;

        return;

     label03:
        r4 = $r8;

        $z2 = virtualinvoke r4.<androidx.work.testing.InternalWorkState: boolean isPeriodic()>();

        if $z2 == 0 goto label08;

        r5 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        $z4 = virtualinvoke r4.<androidx.work.testing.InternalWorkState: boolean isPeriodic()>();

        if $z4 != 0 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        z8 = $z7;

        $z5 = virtualinvoke r4.<androidx.work.testing.InternalWorkState: boolean getHasConstraints()>();

        if $z5 != 0 goto label06;

        $z9 = 1;

        goto label07;

     label06:
        $z9 = 0;

     label07:
        z1 = $z9;

        r15 = staticinvoke <androidx.work.testing.InternalWorkState: androidx.work.testing.InternalWorkState copy$default(androidx.work.testing.InternalWorkState,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.Object)>(r4, 0, z1, 0, z8, 0, 0, 53, null);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r15);

        goto label09;

     label08:
        $r9 = r0.<androidx.work.testing.TestScheduler: java.util.Map pendingWorkStates>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        $r11 = r0.<androidx.work.testing.TestScheduler: java.util.Set terminatedWorkIds>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label09:
        $r12 = r0.<androidx.work.testing.TestScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        virtualinvoke $r12.<androidx.work.impl.StartStopTokens: java.util.List remove(java.lang.String)>(r3);

     label10:
        exitmonitor r2;

        goto label13;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r2;

        throw $r14;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private final void scheduleInternal(androidx.work.impl.model.WorkGenerationalId, androidx.work.testing.InternalWorkState)
    {
        androidx.work.testing.TestScheduler r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.testing.InternalWorkState r2;
        androidx.work.impl.WorkManagerImpl r3, $r5;
        boolean $z0;
        android.content.Context $r4;
        androidx.work.impl.StartStopTokens $r6;
        androidx.work.impl.StartStopToken $r7;

        r0 := @this: androidx.work.testing.TestScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        r2 := @parameter1: androidx.work.testing.InternalWorkState;

        $z0 = staticinvoke <androidx.work.testing.TestSchedulerKt: boolean isRunnable(androidx.work.testing.InternalWorkState)>(r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.work.testing.TestScheduler: android.content.Context context>;

        $r5 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "getInstance(context)");

        r3 = $r5;

        $r6 = r0.<androidx.work.testing.TestScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkGenerationalId)>(r1);

        virtualinvoke r3.<androidx.work.impl.WorkManagerImpl: void startWork(androidx.work.impl.StartStopToken)>($r7);

     label1:
        return;
    }

