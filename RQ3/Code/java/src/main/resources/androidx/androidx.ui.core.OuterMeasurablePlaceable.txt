androidx.ui.core.OuterMeasurablePlaceable
<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>
<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper outerWrapper>
<androidx.ui.core.OuterMeasurablePlaceable: boolean measuredOnce>
<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutDirection lastLayoutDirection>
<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.unit.IntOffset lastPosition>
<androidx.ui.core.OuterMeasurablePlaceable: java.util.Map lastProvidedAlignmentLines>
<androidx.ui.core.OuterMeasurablePlaceable: long measureIteration>
    public void <init>(androidx.ui.core.LayoutNode, androidx.ui.core.LayoutNodeWrapper)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0, r3;
        androidx.ui.core.LayoutNode r1;
        androidx.ui.core.LayoutNodeWrapper r2;
        boolean z0;
        java.util.Map r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        r2 := @parameter1: androidx.ui.core.LayoutNodeWrapper;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "outerWrapper");

        specialinvoke r0.<androidx.ui.core.Placeable: void <init>()>();

        r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode> = r1;

        r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper outerWrapper> = r2;

        r3 = r0;

        z0 = 0;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r4 = (java.util.Map) $r5;

        r3.<androidx.ui.core.OuterMeasurablePlaceable: java.util.Map lastProvidedAlignmentLines> = r4;

        r0.<androidx.ui.core.OuterMeasurablePlaceable: long measureIteration> = -1L;

        return;
    }

    public final androidx.ui.core.LayoutNodeWrapper getOuterWrapper()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.LayoutNodeWrapper $r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $r1 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper outerWrapper>;

        return $r1;
    }

    public final void setOuterWrapper(androidx.ui.core.LayoutNodeWrapper)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.LayoutNodeWrapper r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.core.LayoutNodeWrapper;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper outerWrapper> = r1;

        return;
    }

    public final androidx.ui.core.Constraints getLastConstraints()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        boolean $z0;
        androidx.ui.core.Constraints $r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $z0 = r0.<androidx.ui.core.OuterMeasurablePlaceable: boolean measuredOnce>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.Constraints getMeasurementConstraints()>();

        goto label2;

     label1:
        $r1 = (androidx.ui.core.Constraints) null;

     label2:
        return $r1;
    }

    public final androidx.ui.core.LayoutDirection getLastLayoutDirection()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.LayoutDirection $r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $r1 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutDirection lastLayoutDirection>;

        return $r1;
    }

    public final androidx.ui.unit.IntOffset getLastPosition()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.unit.IntOffset $r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $r1 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.unit.IntOffset lastPosition>;

        return $r1;
    }

    public final long getMeasureIteration()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        long $l0;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $l0 = r0.<androidx.ui.core.OuterMeasurablePlaceable: long measureIteration>;

        return $l0;
    }

    public java.lang.Object getParentData()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.LayoutNodeWrapper $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        $r1 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $r2 = virtualinvoke $r1.<androidx.ui.core.LayoutNodeWrapper: java.lang.Object getParentData()>();

        return $r2;
    }

    public androidx.ui.core.Placeable measure(androidx.ui.core.Constraints, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.Constraints r1;
        androidx.ui.core.LayoutDirection r2;
        androidx.ui.core.LayoutNode$LayoutState r3, $r11, r12, $r13, r14;
        androidx.ui.core.LayoutNode $r4, $r5, r10;
        int[] $r6;
        int $i0, i1;
        androidx.ui.core.Placeable $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;
        androidx.ui.core.LayoutNode$UsageByParent $r15;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.core.Constraints;

        r2 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "constraints");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "layoutDirection");

        $r4 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        r10 = virtualinvoke $r4.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getParent()>();

        if r10 != null goto label1;

        $r11 = (androidx.ui.core.LayoutNode$LayoutState) null;

        goto label2;

     label1:
        $r11 = virtualinvoke r10.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

     label2:
        r12 = $r11;

        if r12 != null goto label3;

        $r13 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState LayingOut>;

        goto label4;

     label3:
        $r13 = r12;

     label4:
        r3 = $r13;

        $r5 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        r14 = r3;

        $r6 = <androidx.ui.core.OuterMeasurablePlaceable$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r14.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        i1 = $r6[$i0];

        tableswitch(i1)
        {
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label5:
        $r15 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent InMeasureBlock>;

        goto label8;

     label6:
        $r15 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent InLayoutBlock>;

        goto label8;

     label7:
        $r8 = new java.lang.IllegalStateException;

        $r9 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Measurable could be only measured from the parent\'s measure or layout block.Parents state is ", r3);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label8:
        virtualinvoke $r5.<androidx.ui.core.LayoutNode: void setMeasuredByParent$ui_core_release(androidx.ui.core.LayoutNode$UsageByParent)>($r15);

        virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: boolean remeasure(androidx.ui.core.Constraints,androidx.ui.core.LayoutDirection)>(r1, r2);

        $r7 = (androidx.ui.core.Placeable) r0;

        return $r7;
    }

    public final boolean remeasure(androidx.ui.core.Constraints, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.Constraints r1, $r15;
        androidx.ui.core.LayoutDirection r2, $r16;
        androidx.ui.core.Owner r3;
        long l0, $l1, $l4;
        androidx.ui.core.LayoutNode r4, $r5, $r6, $r7, $r8, $r14, $r20, $r21, $r23, $r27, $r29, $r32, $r34;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11, $z12;
        androidx.ui.core.LayoutNode$LayoutState $r9, $r10, $r24, $r33;
        androidx.ui.core.LayoutNodeWrapper $r11, $r12;
        int $i2, $i3, i6, i7;
        androidx.ui.unit.IntSize $r13, r37;
        java.lang.IllegalStateException $r17;
        java.lang.String $r18, r22;
        java.lang.Throwable $r19;
        byte $b5;
        java.util.Map $r25, $r26, $r28, $r35, $r36;
        androidx.ui.core.OuterMeasurablePlaceable$remeasure$2 $r30;
        kotlin.jvm.functions.Function0 $r31;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.core.Constraints;

        r2 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "constraints");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "layoutDirection");

        $r5 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        r3 = staticinvoke <androidx.ui.core.LayoutNodeKt: androidx.ui.core.Owner requireOwner(androidx.ui.core.LayoutNode)>($r5);

        l0 = interfaceinvoke r3.<androidx.ui.core.Owner: long getMeasureIteration()>();

        $r6 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        r4 = virtualinvoke $r6.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getParent()>();

        $r21 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r7 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $z1 = virtualinvoke $r7.<androidx.ui.core.LayoutNode: boolean getCanMultiMeasure()>();

        if $z1 != 0 goto label01;

        if r4 == null goto label02;

        $z6 = virtualinvoke r4.<androidx.ui.core.LayoutNode: boolean getCanMultiMeasure()>();

        if $z6 == 0 goto label02;

     label01:
        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        virtualinvoke $r21.<androidx.ui.core.LayoutNode: void setCanMultiMeasure(boolean)>($z7);

        $l4 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: long getMeasureIteration()>();

        $b5 = $l4 cmp l0;

        if $b5 != 0 goto label04;

        $r20 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $z5 = virtualinvoke $r20.<androidx.ui.core.LayoutNode: boolean getCanMultiMeasure()>();

        if $z5 == 0 goto label05;

     label04:
        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        z9 = $z8;

        z10 = 0;

        z11 = 0;

        if z9 != 0 goto label07;

        r22 = "measure() may not be called multiple times on the same Measurable";

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke r22.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        $r19 = (java.lang.Throwable) $r17;

        throw $r19;

     label07:
        $l1 = interfaceinvoke r3.<androidx.ui.core.Owner: long getMeasureIteration()>();

        r0.<androidx.ui.core.OuterMeasurablePlaceable: long measureIteration> = $l1;

        $r8 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r9 = virtualinvoke $r8.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r10 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $z2 != 0 goto label08;

        $r15 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.Constraints getMeasurementConstraints()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r15, r1);

        if $z3 == 0 goto label08;

        $r16 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutDirection getLastLayoutDirection()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r16, r2);

        if $z4 != 0 goto label11;

     label08:
        r0.<androidx.ui.core.OuterMeasurablePlaceable: boolean measuredOnce> = 1;

        $r23 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r24 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState Measuring>;

        virtualinvoke $r23.<androidx.ui.core.LayoutNode: void setLayoutState$ui_core_release(androidx.ui.core.LayoutNode$LayoutState)>($r24);

        virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: void setMeasurementConstraints(androidx.ui.core.Constraints)>(r1);

        r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutDirection lastLayoutDirection> = r2;

        $r25 = r0.<androidx.ui.core.OuterMeasurablePlaceable: java.util.Map lastProvidedAlignmentLines>;

        interfaceinvoke $r25.<java.util.Map: void clear()>();

        $r26 = r0.<androidx.ui.core.OuterMeasurablePlaceable: java.util.Map lastProvidedAlignmentLines>;

        $r27 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r28 = virtualinvoke $r27.<androidx.ui.core.LayoutNode: java.util.Map getProvidedAlignmentLines$ui_core_release()>();

        interfaceinvoke $r26.<java.util.Map: void putAll(java.util.Map)>($r28);

        $r29 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r30 = new androidx.ui.core.OuterMeasurablePlaceable$remeasure$2;

        specialinvoke $r30.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: void <init>(androidx.ui.core.OuterMeasurablePlaceable,androidx.ui.core.Constraints,androidx.ui.core.LayoutDirection)>(r0, r1, r2);

        $r31 = (kotlin.jvm.functions.Function0) $r30;

        interfaceinvoke r3.<androidx.ui.core.Owner: void observeMeasureModelReads(androidx.ui.core.LayoutNode,kotlin.jvm.functions.Function0)>($r29, $r31);

        $r32 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r33 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRelayout>;

        virtualinvoke $r32.<androidx.ui.core.LayoutNode: void setLayoutState$ui_core_release(androidx.ui.core.LayoutNode$LayoutState)>($r33);

        $r34 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        $r35 = virtualinvoke $r34.<androidx.ui.core.LayoutNode: java.util.Map getProvidedAlignmentLines$ui_core_release()>();

        $r36 = r0.<androidx.ui.core.OuterMeasurablePlaceable: java.util.Map lastProvidedAlignmentLines>;

        $z12 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r35, $r36);

        if $z12 != 0 goto label09;

        $r14 = r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNode layoutNode>;

        virtualinvoke $r14.<androidx.ui.core.LayoutNode: void onAlignmentsChanged$ui_core_release()>();

     label09:
        r37 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.unit.IntSize getMeasuredSize()>();

        $r11 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        i6 = virtualinvoke $r11.<androidx.ui.core.LayoutNodeWrapper: int getWidth()>();

        $r12 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        i7 = virtualinvoke $r12.<androidx.ui.core.LayoutNodeWrapper: int getHeight()>();

        $i2 = virtualinvoke r37.<androidx.ui.unit.IntSize: int getWidth()>();

        if i6 != $i2 goto label10;

        $i3 = virtualinvoke r37.<androidx.ui.unit.IntSize: int getHeight()>();

        if i7 == $i3 goto label11;

     label10:
        $r13 = staticinvoke <androidx.ui.unit.IntSizeKt: androidx.ui.unit.IntSize IntSize(int,int)>(i6, i7);

        virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: void setMeasuredSize(androidx.ui.unit.IntSize)>($r13);

        return 1;

     label11:
        return 0;
    }

    public int get(androidx.ui.core.AlignmentLine)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.core.AlignmentLine r1;
        androidx.ui.core.LayoutNodeWrapper $r2;
        int $i0;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.core.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "line");

        $r2 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $i0 = virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: int get(androidx.ui.core.AlignmentLine)>(r1);

        return $i0;
    }

    protected void place(androidx.ui.unit.IntOffset)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        androidx.ui.unit.IntOffset r1;
        androidx.ui.core.InnerPlacementScope r2;
        boolean z0, z1;
        androidx.ui.core.LayoutNodeWrapper $r3;
        androidx.ui.core.Placeable $r4;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 := @parameter0: androidx.ui.unit.IntOffset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "position");

        r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.unit.IntOffset lastPosition> = r1;

        r2 = <androidx.ui.core.InnerPlacementScope: androidx.ui.core.InnerPlacementScope INSTANCE>;

        z0 = 0;

        z1 = 0;

        $r3 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $r4 = (androidx.ui.core.Placeable) $r3;

        virtualinvoke r2.<androidx.ui.core.InnerPlacementScope: void placeAbsolute(androidx.ui.core.Placeable,androidx.ui.unit.IntOffset)>($r4, r1);

        return;
    }

    public final void replace()
    {
        androidx.ui.core.OuterMeasurablePlaceable r0, r2;
        androidx.ui.unit.IntOffset r1, r3;
        boolean z0, z1, z2, z3, z4;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        r1 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.unit.IntOffset getLastPosition()>();

        r2 = r0;

        z0 = 0;

        z2 = 0;

        z3 = 0;

        z4 = 0;

        if r1 != null goto label1;

        z1 = 0;

        r7 = "Required value was null.";

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label1:
        r3 = r1;

        virtualinvoke r2.<androidx.ui.core.OuterMeasurablePlaceable: void place(androidx.ui.unit.IntOffset)>(r3);

        return;
    }

    public int minIntrinsicWidth(int, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        int i0, $i1;
        androidx.ui.core.LayoutDirection r1;
        androidx.ui.core.LayoutNodeWrapper $r2;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutDirection");

        $r2 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: int minIntrinsicWidth(int,androidx.ui.core.LayoutDirection)>(i0, r1);

        return $i1;
    }

    public int maxIntrinsicWidth(int, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        int i0, $i1;
        androidx.ui.core.LayoutDirection r1;
        androidx.ui.core.LayoutNodeWrapper $r2;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutDirection");

        $r2 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: int maxIntrinsicWidth(int,androidx.ui.core.LayoutDirection)>(i0, r1);

        return $i1;
    }

    public int minIntrinsicHeight(int, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        int i0, $i1;
        androidx.ui.core.LayoutDirection r1;
        androidx.ui.core.LayoutNodeWrapper $r2;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutDirection");

        $r2 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: int minIntrinsicHeight(int,androidx.ui.core.LayoutDirection)>(i0, r1);

        return $i1;
    }

    public int maxIntrinsicHeight(int, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable r0;
        int i0, $i1;
        androidx.ui.core.LayoutDirection r1;
        androidx.ui.core.LayoutNodeWrapper $r2;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutDirection");

        $r2 = virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: int maxIntrinsicHeight(int,androidx.ui.core.LayoutDirection)>(i0, r1);

        return $i1;
    }

androidx.ui.core.OuterMeasurablePlaceable$remeasure$2
<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.OuterMeasurablePlaceable $this>
<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.Constraints $constraints>
<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.LayoutDirection $layoutDirection>
    void <init>(androidx.ui.core.OuterMeasurablePlaceable, androidx.ui.core.Constraints, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.OuterMeasurablePlaceable$remeasure$2 r0;
        androidx.ui.core.OuterMeasurablePlaceable $r1;
        androidx.ui.core.Constraints $r2;
        androidx.ui.core.LayoutDirection $r3;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable$remeasure$2;

        $r1 := @parameter0: androidx.ui.core.OuterMeasurablePlaceable;

        $r2 := @parameter1: androidx.ui.core.Constraints;

        $r3 := @parameter2: androidx.ui.core.LayoutDirection;

        r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.OuterMeasurablePlaceable $this> = $r1;

        r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.Constraints $constraints> = $r2;

        r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.LayoutDirection $layoutDirection> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.ui.core.OuterMeasurablePlaceable$remeasure$2 r0;
        androidx.ui.core.OuterMeasurablePlaceable $r1;
        androidx.ui.core.LayoutNodeWrapper $r2;
        androidx.ui.core.LayoutDirection $r3;
        androidx.ui.core.Constraints $r4;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable$remeasure$2;

        $r1 = r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.OuterMeasurablePlaceable $this>;

        $r2 = virtualinvoke $r1.<androidx.ui.core.OuterMeasurablePlaceable: androidx.ui.core.LayoutNodeWrapper getOuterWrapper()>();

        $r4 = r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.Constraints $constraints>;

        $r3 = r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: androidx.ui.core.LayoutDirection $layoutDirection>;

        virtualinvoke $r2.<androidx.ui.core.LayoutNodeWrapper: androidx.ui.core.Placeable measure(androidx.ui.core.Constraints,androidx.ui.core.LayoutDirection)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.ui.core.OuterMeasurablePlaceable$remeasure$2 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.ui.core.OuterMeasurablePlaceable$remeasure$2;

        virtualinvoke r0.<androidx.ui.core.OuterMeasurablePlaceable$remeasure$2: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.ui.core.OuterMeasurablePlaceable$WhenMappings
<androidx.ui.core.OuterMeasurablePlaceable$WhenMappings: int[] $EnumSwitchMapping$0>
    public static final void <clinit>()
    {
        int[] r0;
        androidx.ui.core.LayoutNode$LayoutState[] $r1;
        int $i0, $i1, $i2;
        androidx.ui.core.LayoutNode$LayoutState $r2, $r3;

        $r1 = staticinvoke <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState Measuring>;

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState LayingOut>;

        $i2 = virtualinvoke $r3.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i2] = 2;

        <androidx.ui.core.OuterMeasurablePlaceable$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

