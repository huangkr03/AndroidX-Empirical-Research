androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy
<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory factory>
<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: java.util.Map countPerType>
    public void <init>(androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory)
    {
        androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy r0;
        androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory r1;
        java.util.LinkedHashMap $r2;
        java.util.Map $r3;

        r0 := @this: androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy;

        r1 := @parameter0: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory factory> = r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = (java.util.Map) $r2;

        r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: java.util.Map countPerType> = $r3;

        return;
    }

    public void getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet)
    {
        androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r1;
        java.util.Iterator $r2;
        java.lang.Object r3, r4, $r8;
        int i0, $i1, $i2;
        java.util.Map $r5, $r7, $r10;
        androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory $r6;
        java.lang.Integer $r9, $r11;
        boolean $z1;

        r0 := @this: androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy;

        r1 := @parameter0: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotIds");

        $r5 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: java.util.Map countPerType>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        $r2 = virtualinvoke r1.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory factory>;

        r4 = virtualinvoke $r6.<androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory: java.lang.Object getContentType(java.lang.Object)>(r3);

        $r7 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: java.util.Map countPerType>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r9 = (java.lang.Integer) $r8;

        if $r9 == null goto label2;

        $i2 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        goto label3;

     label2:
        $i2 = 0;

     label3:
        i0 = $i2;

        if i0 != 7 goto label4;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label4:
        $r10 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: java.util.Map countPerType>;

        $i1 = i0 + 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r11);

        goto label1;

     label5:
        return;
    }

    public boolean areCompatible(java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy r0;
        java.lang.Object r1, r2, $r4, $r6;
        androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory $r3, $r5;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory factory>;

        $r4 = virtualinvoke $r3.<androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory: java.lang.Object getContentType(java.lang.Object)>(r1);

        $r5 = r0.<androidx.compose.foundation.lazy.layout.LazyLayoutItemReusePolicy: androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory factory>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.lazy.layout.LazyLayoutItemContentFactory: java.lang.Object getContentType(java.lang.Object)>(r2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r6);

        return $z0;
    }

