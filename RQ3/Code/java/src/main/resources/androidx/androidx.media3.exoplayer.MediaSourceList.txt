androidx.media3.exoplayer.MediaSourceList
<androidx.media3.exoplayer.MediaSourceList: java.lang.String TAG>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.PlayerId playerId>
<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>
<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod>
<androidx.media3.exoplayer.MediaSourceList: java.util.Map mediaSourceByUid>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener mediaSourceListInfoListener>
<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>
<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.AnalyticsCollector eventListener>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.util.HandlerWrapper eventHandler>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder>
<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared>
<androidx.media3.exoplayer.MediaSourceList: androidx.media3.datasource.TransferListener mediaTransferListener>
    public void <init>(androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener, androidx.media3.exoplayer.analytics.AnalyticsCollector, androidx.media3.common.util.HandlerWrapper, androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener r1;
        androidx.media3.exoplayer.analytics.AnalyticsCollector r2;
        androidx.media3.common.util.HandlerWrapper r3;
        androidx.media3.exoplayer.analytics.PlayerId r4;
        androidx.media3.exoplayer.source.ShuffleOrder$DefaultShuffleOrder $r5;
        java.util.IdentityHashMap $r6;
        java.util.HashMap $r7, $r9;
        java.util.ArrayList $r8;
        java.util.HashSet $r10;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener;

        r2 := @parameter1: androidx.media3.exoplayer.analytics.AnalyticsCollector;

        r3 := @parameter2: androidx.media3.common.util.HandlerWrapper;

        r4 := @parameter3: androidx.media3.exoplayer.analytics.PlayerId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.PlayerId playerId> = r4;

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener mediaSourceListInfoListener> = r1;

        $r5 = new androidx.media3.exoplayer.source.ShuffleOrder$DefaultShuffleOrder;

        specialinvoke $r5.<androidx.media3.exoplayer.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>(0);

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = $r5;

        $r6 = new java.util.IdentityHashMap;

        specialinvoke $r6.<java.util.IdentityHashMap: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Map mediaSourceByUid> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders> = $r8;

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.AnalyticsCollector eventListener> = r2;

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.util.HandlerWrapper eventHandler> = r3;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders> = $r10;

        return;
    }

    public androidx.media3.common.Timeline setMediaSources(java.util.List, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        java.util.List r1, $r3, $r4;
        androidx.media3.exoplayer.source.ShuffleOrder r2;
        int $i0, $i1;
        androidx.media3.common.Timeline $r5;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.media3.exoplayer.source.ShuffleOrder;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void removeMediaSourcesInternal(int,int)>(0, $i0);

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline addMediaSources(int,java.util.List,androidx.media3.exoplayer.source.ShuffleOrder)>($i1, r1, r2);

        return $r5;
    }

    public androidx.media3.common.Timeline addMediaSources(int, java.util.List, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.util.List r1, $r8, $r14;
        androidx.media3.exoplayer.source.ShuffleOrder r2;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r3, r17;
        androidx.media3.common.Timeline r4, $r5, r18;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r9, $r15;
        androidx.media3.exoplayer.source.MaskingMediaSource $r7, $r16;
        java.util.Map $r10;
        java.util.IdentityHashMap $r12;
        java.util.Set $r13;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: androidx.media3.exoplayer.source.ShuffleOrder;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = r2;

        i9 = i0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = i0 + $i1;

        if i9 >= $i2 goto label6;

        $i3 = i9 - i0;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r3 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r6;

        if i9 <= 0 goto label2;

        $r14 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i5 = i9 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i5);

        r17 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r15;

        $r16 = r17.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        r4 = virtualinvoke $r16.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $i6 = r17.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild>;

        $i7 = virtualinvoke r4.<androidx.media3.common.Timeline: int getWindowCount()>();

        $i8 = $i6 + $i7;

        virtualinvoke r3.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: void reset(int)>($i8);

        goto label3;

     label2:
        virtualinvoke r3.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: void reset(int)>(0);

     label3:
        $r7 = r3.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        r18 = virtualinvoke $r7.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $i4 = virtualinvoke r18.<androidx.media3.common.Timeline: int getWindowCount()>();

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void correctOffsets(int,int)>(i9, $i4);

        $r8 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(i9, r3);

        $r10 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Map mediaSourceByUid>;

        $r9 = r3.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.lang.Object uid>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r3);

        $z1 = r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared>;

        if $z1 == 0 goto label5;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void prepareChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r3);

        $r12 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod>;

        $z2 = virtualinvoke $r12.<java.util.IdentityHashMap: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r13 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r3);

        goto label5;

     label4:
        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void disableChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r3);

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r5 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r5;
    }

    public androidx.media3.common.Timeline removeMediaSourceRange(int, int, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, i1, $i2;
        androidx.media3.exoplayer.source.ShuffleOrder r1;
        boolean $z0;
        androidx.media3.common.Timeline $r2;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.exoplayer.source.ShuffleOrder;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        $i2 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: int getSize()>();

        if i1 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = r1;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void removeMediaSourcesInternal(int,int)>(i0, i1);

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r2;
    }

    public androidx.media3.common.Timeline moveMediaSource(int, int, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, i1, $i2;
        androidx.media3.exoplayer.source.ShuffleOrder r1;
        androidx.media3.common.Timeline $r2;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.exoplayer.source.ShuffleOrder;

        $i2 = i0 + 1;

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline moveMediaSourceRange(int,int,int,androidx.media3.exoplayer.source.ShuffleOrder)>(i0, $i2, i1, r1);

        return $r2;
    }

    public androidx.media3.common.Timeline moveMediaSourceRange(int, int, int, androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        androidx.media3.exoplayer.source.ShuffleOrder r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r2, $r6;
        androidx.media3.common.Timeline $r3, $r8, $r12;
        java.util.List $r4, $r7, $r9;
        java.lang.Object $r5, $r10;
        androidx.media3.exoplayer.source.MaskingMediaSource $r11;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: androidx.media3.exoplayer.source.ShuffleOrder;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        $i10 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: int getSize()>();

        if i1 > $i10 goto label1;

        if i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = r1;

        if i0 == i1 goto label3;

        if i0 != i2 goto label4;

     label3:
        $r3 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r3;

     label4:
        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i2);

        $i6 = i1 - i0;

        $i7 = i2 + $i6;

        i4 = $i7 - 1;

        $i8 = i1 - 1;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i8);

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r5;

        i11 = $r6.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild>;

        $r7 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        staticinvoke <androidx.media3.common.util.Util: void moveItems(java.util.List,int,int,int)>($r7, i0, i1, i2);

        i12 = i3;

     label5:
        if i12 > i5 goto label6;

        $r9 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i12);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r10;

        r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild> = i11;

        $r11 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        $r12 = virtualinvoke $r11.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $i9 = virtualinvoke $r12.<androidx.media3.common.Timeline: int getWindowCount()>();

        i11 = i11 + $i9;

        i12 = i12 + 1;

        goto label5;

     label6:
        $r8 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r8;
    }

    public androidx.media3.common.Timeline clear(androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.source.ShuffleOrder r1, $r2, $r5;
        int $i0;
        androidx.media3.common.Timeline $r3;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.source.ShuffleOrder;

        if r1 == null goto label1;

        $r5 = r1;

        goto label2;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder>;

        $r5 = interfaceinvoke $r2.<androidx.media3.exoplayer.source.ShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder cloneAndClear()>();

     label2:
        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = $r5;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: int getSize()>();

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void removeMediaSourcesInternal(int,int)>(0, $i0);

        $r3 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r3;
    }

    public boolean isPrepared()
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        $z0 = r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared>;

        return $z0;
    }

    public int getSize()
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        $r1 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public androidx.media3.common.Timeline setShuffleOrder(androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, $i1;
        androidx.media3.common.Timeline $r1;
        androidx.media3.exoplayer.source.ShuffleOrder $r2, r3;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r3 := @parameter0: androidx.media3.exoplayer.source.ShuffleOrder;

        i0 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: int getSize()>();

        $i1 = interfaceinvoke r3.<androidx.media3.exoplayer.source.ShuffleOrder: int getLength()>();

        if $i1 == i0 goto label1;

        $r2 = interfaceinvoke r3.<androidx.media3.exoplayer.source.ShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder cloneAndClear()>();

        r3 = interfaceinvoke $r2.<androidx.media3.exoplayer.source.ShuffleOrder: androidx.media3.exoplayer.source.ShuffleOrder cloneAndInsert(int,int)>(0, i0);

     label1:
        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder> = r3;

        $r1 = virtualinvoke r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.Timeline createTimeline()>();

        return $r1;
    }

    public void prepare(androidx.media3.datasource.TransferListener)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.datasource.TransferListener r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r2;
        boolean $z0, $z2;
        java.util.List $r3, $r6;
        java.lang.Object $r4;
        java.util.Set $r5;
        int i0, $i1;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.datasource.TransferListener;

        $z0 = r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared>;

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.datasource.TransferListener mediaTransferListener> = r1;

        i0 = 0;

     label3:
        $r6 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i0 >= $i1 goto label4;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r4;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void prepareChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r2);

        $r5 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r2);

        i0 = i0 + 1;

        goto label3;

     label4:
        r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared> = 1;

        return;
    }

    public androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.upstream.Allocator, long)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1, r4;
        androidx.media3.exoplayer.upstream.Allocator r2;
        long l0;
        java.lang.Object r3, $r7, $r8, $r9, $r11, $r13;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r5, $r12;
        androidx.media3.exoplayer.source.MaskingMediaPeriod r6;
        java.util.Map $r10;
        java.util.List $r14;
        androidx.media3.exoplayer.source.MaskingMediaSource $r15;
        java.util.IdentityHashMap $r16;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.Allocator;

        l0 := @parameter2: long;

        $r7 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        r3 = staticinvoke <androidx.media3.exoplayer.MediaSourceList: java.lang.Object getMediaSourceHolderUid(java.lang.Object)>($r7);

        $r8 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        $r9 = staticinvoke <androidx.media3.exoplayer.MediaSourceList: java.lang.Object getChildPeriodUid(java.lang.Object)>($r8);

        r4 = virtualinvoke r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId copyWithPeriodUid(java.lang.Object)>($r9);

        $r10 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Map mediaSourceByUid>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r11;

        $r13 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r12);

        r5 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r13;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void enableMediaSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r5);

        $r14 = r5.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r15 = r5.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        r6 = virtualinvoke $r15.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.exoplayer.source.MaskingMediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.exoplayer.upstream.Allocator,long)>(r4, r2, l0);

        $r16 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod>;

        virtualinvoke $r16.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r5);

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void disableUnusedMediaSources()>();

        return r6;
    }

    public void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r2, $r5;
        java.util.IdentityHashMap $r3, $r11;
        java.lang.Object $r4, $r6;
        androidx.media3.exoplayer.source.MaskingMediaSource $r7;
        androidx.media3.exoplayer.source.MaskingMediaPeriod $r8;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId $r9;
        java.util.List $r10;
        boolean $z1;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod>;

        $r4 = virtualinvoke $r3.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r4;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r6;

        $r7 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        virtualinvoke $r7.<androidx.media3.exoplayer.source.MaskingMediaSource: void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r1);

        $r10 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        $r8 = (androidx.media3.exoplayer.source.MaskingMediaPeriod) r1;

        $r9 = $r8.<androidx.media3.exoplayer.source.MaskingMediaPeriod: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId id>;

        interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>($r9);

        $r11 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.IdentityHashMap mediaSourceByMediaPeriod>;

        $z1 = virtualinvoke $r11.<java.util.IdentityHashMap: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void disableUnusedMediaSources()>();

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void maybeReleaseChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r2);

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        java.util.Iterator r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener r2;
        java.lang.Throwable r3, $r15;
        java.util.HashMap $r4, $r6;
        java.util.Collection $r5;
        boolean $z0;
        java.util.Set $r7;
        java.lang.Object $r8;
        androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller $r9;
        androidx.media3.exoplayer.source.MediaSource $r10, $r12, $r14;
        androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener $r11, $r13;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener) $r8;

     label2:
        $r10 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r9 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller caller>;

        interfaceinvoke $r10.<androidx.media3.exoplayer.source.MediaSource: void releaseSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>($r9);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        r3 = $r15;

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSourceList", "Failed to release child source.", r3);

     label5:
        $r12 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r11 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener eventListener>;

        interfaceinvoke $r12.<androidx.media3.exoplayer.source.MediaSource: void removeEventListener(androidx.media3.exoplayer.source.MediaSourceEventListener)>($r11);

        $r14 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r13 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener eventListener>;

        interfaceinvoke $r14.<androidx.media3.exoplayer.source.MediaSource: void removeDrmEventListener(androidx.media3.exoplayer.drm.DrmSessionEventListener)>($r13);

        goto label1;

     label6:
        $r6 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared> = 0;

        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    public androidx.media3.common.Timeline createTimeline()
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        java.util.List $r2, $r3, $r6, $r7;
        boolean $z0;
        int $i0, $i1, i2, i3;
        androidx.media3.exoplayer.PlaylistTimeline $r4;
        androidx.media3.exoplayer.source.ShuffleOrder $r5;
        java.lang.Object $r8;
        androidx.media3.exoplayer.source.MaskingMediaSource $r9;
        androidx.media3.common.Timeline $r10, $r11;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        $r2 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r11 = <androidx.media3.common.Timeline: androidx.media3.common.Timeline EMPTY>;

        return $r11;

     label1:
        i2 = 0;

        i3 = 0;

     label2:
        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $r7 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        r1 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r8;

        r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild> = i2;

        $r9 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        $r10 = virtualinvoke $r9.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $i1 = virtualinvoke $r10.<androidx.media3.common.Timeline: int getWindowCount()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r4 = new androidx.media3.exoplayer.PlaylistTimeline;

        $r6 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r5 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.ShuffleOrder shuffleOrder>;

        specialinvoke $r4.<androidx.media3.exoplayer.PlaylistTimeline: void <init>(java.util.Collection,androidx.media3.exoplayer.source.ShuffleOrder)>($r6, $r5);

        return $r4;
    }

    private void enableMediaSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener r2;
        java.util.Set $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller $r6;
        androidx.media3.exoplayer.source.MediaSource $r7;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener) $r5;

        if r2 == null goto label1;

        $r7 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r6 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller caller>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.source.MediaSource: void enable(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>($r6);

     label1:
        return;
    }

    private void disableUnusedMediaSources()
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        java.util.Iterator r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r2;
        java.util.Set $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.util.List $r5;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r4;

        $r5 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void disableChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r2);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private void disableChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller $r5;
        androidx.media3.exoplayer.source.MediaSource $r6;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener) $r4;

        if r2 == null goto label1;

        $r6 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r5 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller caller>;

        interfaceinvoke $r6.<androidx.media3.exoplayer.source.MediaSource: void disable(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>($r5);

     label1:
        return;
    }

    private void removeMediaSourcesInternal(int, int)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, i1, $i2, $i3, i4;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        androidx.media3.common.Timeline r2;
        java.util.List $r3;
        java.lang.Object $r4, $r5;
        java.util.Map $r6;
        androidx.media3.exoplayer.source.MaskingMediaSource $r8;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = i1 - 1;

     label1:
        if i4 < i0 goto label3;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(i4);

        r1 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r4;

        $r6 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Map mediaSourceByUid>;

        $r5 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.lang.Object uid>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r8 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        r2 = virtualinvoke $r8.<androidx.media3.exoplayer.source.MaskingMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $i2 = virtualinvoke r2.<androidx.media3.common.Timeline: int getWindowCount()>();

        $i3 = neg $i2;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void correctOffsets(int,int)>(i4, $i3);

        r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: boolean isRemoved> = 1;

        $z0 = r0.<androidx.media3.exoplayer.MediaSourceList: boolean isPrepared>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.MediaSourceList: void maybeReleaseChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r1);

     label2:
        i4 = i4 + -1;

        goto label1;

     label3:
        return;
    }

    private void correctOffsets(int, int)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        int i0, i1, $i2, $i3, $i4, i5;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i5 >= $i2 goto label2;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.List mediaSourceHolders>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i5);

        r1 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder) $r4;

        $i3 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild>;

        $i4 = $i3 + i1;

        r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild> = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    private static androidx.media3.exoplayer.source.MediaSource$MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1, $r6, $r8;
        java.lang.Object r2, $r5, $r7;
        java.util.List $r3, $r4;
        int $i0, i4;
        long $l1, $l2;
        byte $b3;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        i4 = 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i4 >= $i0 goto label3;

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r6 = (androidx.media3.exoplayer.source.MediaSource$MediaPeriodId) $r5;

        $l2 = $r6.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: long windowSequenceNumber>;

        $l1 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: long windowSequenceNumber>;

        $b3 = $l2 cmp $l1;

        if $b3 != 0 goto label2;

        $r7 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        r2 = staticinvoke <androidx.media3.exoplayer.MediaSourceList: java.lang.Object getPeriodUid(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder,java.lang.Object)>(r0, $r7);

        $r8 = virtualinvoke r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId copyWithPeriodUid(java.lang.Object)>(r2);

        return $r8;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return null;
    }

    private static int getWindowIndexForChildWindowIndex(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder, int)
    {
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r0;
        int i0, $i1, $i2;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        i0 := @parameter1: int;

        $i1 = r0.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: int firstWindowIndexInChild>;

        $i2 = i0 + $i1;

        return $i2;
    }

    private void prepareChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        androidx.media3.exoplayer.source.MaskingMediaSource r2;
        androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller r3;
        androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener r4, $r5;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener $r6;
        java.util.HashMap $r7;
        android.os.Handler $r9, $r10;
        androidx.media3.exoplayer.analytics.PlayerId $r11;
        androidx.media3.datasource.TransferListener $r12;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        r2 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: androidx.media3.exoplayer.source.MaskingMediaSource mediaSource>;

        r3 = dynamicinvoke "onSourceInfoRefreshed" <androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller (androidx.media3.exoplayer.MediaSourceList)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.media3.exoplayer.source.MediaSource,androidx.media3.common.Timeline), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.exoplayer.MediaSourceList: void lambda$prepareChildSource$0(androidx.media3.exoplayer.source.MediaSource,androidx.media3.common.Timeline)>, methodtype: void __METHODTYPE__(androidx.media3.exoplayer.source.MediaSource,androidx.media3.common.Timeline));

        $r5 = new androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener;

        specialinvoke $r5.<androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener: void <init>(androidx.media3.exoplayer.MediaSourceList,androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)>(r0, r1);

        r4 = $r5;

        $r7 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        $r6 = new androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener;

        specialinvoke $r6.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: void <init>(androidx.media3.exoplayer.source.MediaSource,androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller,androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener)>(r2, r3, r4);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r9 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentOrMainLooper()>();

        interfaceinvoke r2.<androidx.media3.exoplayer.source.MediaSource: void addEventListener(android.os.Handler,androidx.media3.exoplayer.source.MediaSourceEventListener)>($r9, r4);

        $r10 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentOrMainLooper()>();

        interfaceinvoke r2.<androidx.media3.exoplayer.source.MediaSource: void addDrmEventListener(android.os.Handler,androidx.media3.exoplayer.drm.DrmSessionEventListener)>($r10, r4);

        $r12 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.datasource.TransferListener mediaTransferListener>;

        $r11 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.PlayerId playerId>;

        interfaceinvoke r2.<androidx.media3.exoplayer.source.MediaSource: void prepareSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller,androidx.media3.datasource.TransferListener,androidx.media3.exoplayer.analytics.PlayerId)>(r3, $r12, $r11);

        return;
    }

    private void maybeReleaseChildSource(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r1;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener r2, $r6;
        boolean $z0, $z1;
        java.util.List $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5, $r7;
        androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller $r8;
        androidx.media3.exoplayer.source.MediaSource $r9, $r11, $r13;
        androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener $r10, $r12;
        java.util.Set $r14;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        $z0 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: boolean isRemoved>;

        if $z0 == 0 goto label1;

        $r3 = r1.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.util.List activeMediaPeriodIds>;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.HashMap childSources>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener) $r5;

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        r2 = (androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener) $r7;

        $r9 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r8 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller caller>;

        interfaceinvoke $r9.<androidx.media3.exoplayer.source.MediaSource: void releaseSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>($r8);

        $r11 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r10 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener eventListener>;

        interfaceinvoke $r11.<androidx.media3.exoplayer.source.MediaSource: void removeEventListener(androidx.media3.exoplayer.source.MediaSourceEventListener)>($r10);

        $r13 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r12 = r2.<androidx.media3.exoplayer.MediaSourceList$MediaSourceAndListener: androidx.media3.exoplayer.MediaSourceList$ForwardingEventListener eventListener>;

        interfaceinvoke $r13.<androidx.media3.exoplayer.source.MediaSource: void removeDrmEventListener(androidx.media3.exoplayer.drm.DrmSessionEventListener)>($r12);

        $r14 = r0.<androidx.media3.exoplayer.MediaSourceList: java.util.Set enabledMediaSourceHolders>;

        interfaceinvoke $r14.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    private static java.lang.Object getMediaSourceHolderUid(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <androidx.media3.exoplayer.PlaylistTimeline: java.lang.Object getChildTimelineUidFromConcatenatedUid(java.lang.Object)>(r0);

        return $r1;
    }

    private static java.lang.Object getChildPeriodUid(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <androidx.media3.exoplayer.PlaylistTimeline: java.lang.Object getChildPeriodUidFromConcatenatedUid(java.lang.Object)>(r0);

        return $r1;
    }

    private static java.lang.Object getPeriodUid(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder, java.lang.Object)
    {
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder: java.lang.Object uid>;

        $r3 = staticinvoke <androidx.media3.exoplayer.PlaylistTimeline: java.lang.Object getConcatenatedUid(java.lang.Object,java.lang.Object)>($r2, r1);

        return $r3;
    }

    private void lambda$prepareChildSource$0(androidx.media3.exoplayer.source.MediaSource, androidx.media3.common.Timeline)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.source.MediaSource r1;
        androidx.media3.common.Timeline r2;
        androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener $r3;

        r0 := @this: androidx.media3.exoplayer.MediaSourceList;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource;

        r2 := @parameter1: androidx.media3.common.Timeline;

        $r3 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener mediaSourceListInfoListener>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.MediaSourceList$MediaSourceListInfoRefreshListener: void onPlaylistUpdateRequested()>();

        return;
    }

    static androidx.media3.common.util.HandlerWrapper access$000(androidx.media3.exoplayer.MediaSourceList)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.common.util.HandlerWrapper $r1;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList;

        $r1 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.common.util.HandlerWrapper eventHandler>;

        return $r1;
    }

    static androidx.media3.exoplayer.source.MediaSource$MediaPeriodId access$100(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1, $r2;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = staticinvoke <androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>(r0, r1);

        return $r2;
    }

    static int access$200(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder, int)
    {
        androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder r0;
        int i0, $i1;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder;

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.media3.exoplayer.MediaSourceList: int getWindowIndexForChildWindowIndex(androidx.media3.exoplayer.MediaSourceList$MediaSourceHolder,int)>(r0, i0);

        return $i1;
    }

    static androidx.media3.exoplayer.analytics.AnalyticsCollector access$300(androidx.media3.exoplayer.MediaSourceList)
    {
        androidx.media3.exoplayer.MediaSourceList r0;
        androidx.media3.exoplayer.analytics.AnalyticsCollector $r1;

        r0 := @parameter0: androidx.media3.exoplayer.MediaSourceList;

        $r1 = r0.<androidx.media3.exoplayer.MediaSourceList: androidx.media3.exoplayer.analytics.AnalyticsCollector eventListener>;

        return $r1;
    }

