androidx.car.app.hardware.common.PropertyManager
<androidx.car.app.hardware.common.PropertyManager: android.content.Context mContext>
<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyRequestProcessor mPropertyRequestProcessor>
<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>
<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback mPropertyProcessorCallback>
<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>
<androidx.car.app.hardware.common.PropertyManager: java.util.Map mListenerToSamplingIntervalMap>
<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>
    public void <init>(android.content.Context)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        android.content.Context r1;
        java.lang.Object $r2;
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback $r3, $r8;
        androidx.car.app.hardware.common.PropertyResponseCache $r4;
        java.util.HashMap $r5;
        java.util.concurrent.ScheduledExecutorService $r6;
        androidx.car.app.hardware.common.PropertyRequestProcessor $r7;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock> = $r2;

        $r3 = new androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        specialinvoke $r3.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: void <init>(androidx.car.app.hardware.common.PropertyManager)>(r0);

        r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback mPropertyProcessorCallback> = $r3;

        $r4 = new androidx.car.app.hardware.common.PropertyResponseCache;

        specialinvoke $r4.<androidx.car.app.hardware.common.PropertyResponseCache: void <init>()>();

        r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<androidx.car.app.hardware.common.PropertyManager: java.util.Map mListenerToSamplingIntervalMap> = $r5;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(2);

        r0.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = $r6;

        r0.<androidx.car.app.hardware.common.PropertyManager: android.content.Context mContext> = r1;

        $r7 = new androidx.car.app.hardware.common.PropertyRequestProcessor;

        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback mPropertyProcessorCallback>;

        specialinvoke $r7.<androidx.car.app.hardware.common.PropertyRequestProcessor: void <init>(android.content.Context,androidx.car.app.hardware.common.PropertyRequestProcessor$PropertyEventCallback)>(r1, $r8);

        r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyRequestProcessor mPropertyRequestProcessor> = $r7;

        return;
    }

    public void submitRegisterListenerRequest(java.util.List, float, androidx.car.app.hardware.common.OnCarPropertyResponseListener, java.util.concurrent.Executor)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        float f0, $f1;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r2;
        java.util.concurrent.Executor r3;
        long l0;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r17;
        androidx.car.app.hardware.common.PropertyResponseCache $r7;
        byte $b1;
        java.util.Map $r8;
        java.lang.Long $r9;
        java.lang.Runnable $r11, $r13;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.util.concurrent.TimeUnit $r14;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        f0 := @parameter1: float;

        r2 := @parameter2: androidx.car.app.hardware.common.OnCarPropertyResponseListener;

        r3 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<androidx.car.app.hardware.common.PropertyManager: void checkPermissions(java.util.List)>(r1);

        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        virtualinvoke $r7.<androidx.car.app.hardware.common.PropertyResponseCache: void putListenerAndPropertyIds(androidx.car.app.hardware.common.OnCarPropertyResponseListener,java.util.List)>(r2, r1);

        $b1 = f0 cmpl 0.0F;

        if $b1 != 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sample rate cannot be zero.");

        throw $r16;

     label2:
        $f1 = 1000.0F / f0;

        l0 = (long) $f1;

        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.Map mListenerToSamplingIntervalMap>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r9);

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager,java.util.List,float)>(r0, r1, f0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: void lambda$submitRegisterListenerRequest$0(java.util.List,float)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

        $r12 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r13 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager,androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: void lambda$submitRegisterListenerRequest$1(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>, methodtype: void __METHODTYPE__());

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r12.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r13, l0, $r14);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void submitUnregisterListenerRequest(androidx.car.app.hardware.common.OnCarPropertyResponseListener)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r1;
        java.util.List r2, r3;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r14;
        androidx.car.app.hardware.common.PropertyResponseCache $r7, $r8;
        java.util.Map $r9;
        int $i0;
        java.util.concurrent.ScheduledExecutorService $r11;
        java.lang.Runnable $r12;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarPropertyResponseListener;

        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        r2 = virtualinvoke $r7.<androidx.car.app.hardware.common.PropertyResponseCache: java.util.List getPropertyIdsByListener(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r1);

        if r2 != null goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Listener was not registered yet.");

        throw $r13;

     label2:
        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        r3 = virtualinvoke $r8.<androidx.car.app.hardware.common.PropertyResponseCache: java.util.List removeListener(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r1);

        $r9 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.Map mListenerToSamplingIntervalMap>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 == 0 goto label7;

        $r11 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager,java.util.List)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: void lambda$submitUnregisterListenerRequest$2(java.util.List)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r11.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r12);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.google.common.util.concurrent.ListenableFuture submitGetPropertyRequest(java.util.List, java.util.concurrent.Executor)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1, r11;
        java.util.concurrent.Executor r2;
        java.util.ArrayList r3, $r5;
        androidx.car.app.hardware.common.GetPropertyRequest r4;
        boolean $z0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r6;
        com.google.common.util.concurrent.ListenableFuture $r7;
        java.lang.Object $r8;
        int $i0;
        java.lang.Integer $r9;
        java.util.Iterator r10;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = $r5;

        r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.car.app.hardware.common.GetPropertyRequest) $r8;

        $i0 = virtualinvoke r4.<androidx.car.app.hardware.common.GetPropertyRequest: int getPropertyId()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        specialinvoke r0.<androidx.car.app.hardware.common.PropertyManager: void checkPermissions(java.util.List)>(r3);

        r11 = specialinvoke r0.<androidx.car.app.hardware.common.PropertyManager: java.util.List parseRawRequest(java.util.List)>(r1);

        $r6 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.car.app.hardware.common.PropertyManager,java.util.concurrent.Executor,java.util.List)>(r0, r2, r11) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: java.lang.Object lambda$submitGetPropertyRequest$5(java.util.concurrent.Executor,java.util.List,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r7 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r6);

        return $r7;
    }

    void dispatchResponsesWithoutDelay(int)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        int i0;
        java.lang.Object r1, $r7, $r9;
        java.util.Set r2;
        java.util.Iterator r3;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r4;
        java.util.List r5;
        java.lang.Throwable r6, $r11;
        androidx.car.app.hardware.common.PropertyResponseCache $r8, $r10;
        boolean $z0;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        i0 := @parameter0: int;

        $r7 = r0.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r1 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        r2 = virtualinvoke $r8.<androidx.car.app.hardware.common.PropertyResponseCache: java.util.Set getListenersByPropertyId(int)>(i0);

        if r2 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.car.app.hardware.common.OnCarPropertyResponseListener) $r9;

        $r10 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        r5 = virtualinvoke $r10.<androidx.car.app.hardware.common.PropertyResponseCache: java.util.List getResponsesByListener(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r4);

        if r5 == null goto label05;

        interfaceinvoke r4.<androidx.car.app.hardware.common.OnCarPropertyResponseListener: void onCarPropertyResponses(java.util.List)>(r5);

     label05:
        goto label04;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r1;

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void dispatchResponseWithDelay(androidx.car.app.hardware.common.OnCarPropertyResponseListener)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r1;
        java.lang.Long r2;
        java.lang.Object r3, $r5, $r7;
        java.lang.Throwable r4, $r13;
        java.util.Map $r6;
        androidx.car.app.hardware.common.PropertyResponseCache $r8;
        java.util.concurrent.ScheduledExecutorService $r9;
        java.lang.Runnable $r10;
        long $l0;
        java.util.concurrent.TimeUnit $r11;
        java.util.List r14;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarPropertyResponseListener;

        r14 = null;

        $r5 = r0.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.Map mListenerToSamplingIntervalMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Long) $r7;

        if r2 == null goto label2;

        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        r14 = virtualinvoke $r8.<androidx.car.app.hardware.common.PropertyResponseCache: java.util.List getResponsesByListener(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r1);

        $r9 = r0.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager,androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: void lambda$dispatchResponseWithDelay$6(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>, methodtype: void __METHODTYPE__());

        $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r9.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r10, $l0, $r11);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        if r14 == null goto label7;

        interfaceinvoke r1.<androidx.car.app.hardware.common.OnCarPropertyResponseListener: void onCarPropertyResponses(java.util.List)>(r14);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static java.util.List createResponses(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.ArrayList r2, $r3;
        int i0, $i2, $i3, $i4, $i6;
        long l1, $l5;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6, $r9;
        androidx.car.app.hardware.common.CarPropertyResponse $r5, $r10;
        java.util.concurrent.TimeUnit $r7, $r8;
        java.util.Iterator r11, r13;
        android.car.hardware.CarPropertyValue r12;
        androidx.car.app.hardware.common.CarInternalError r14;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = $r3;

        r11 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.car.hardware.CarPropertyValue) $r6;

        $i4 = virtualinvoke r12.<android.car.hardware.CarPropertyValue: int getStatus()>();

        i0 = staticinvoke <androidx.car.app.hardware.common.PropertyUtils: int mapToStatusCodeInCarValue(int)>($i4);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l5 = virtualinvoke r12.<android.car.hardware.CarPropertyValue: long getTimestamp()>();

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l1 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l5, $r8);

        $i6 = virtualinvoke r12.<android.car.hardware.CarPropertyValue: int getPropertyId()>();

        $r9 = virtualinvoke r12.<android.car.hardware.CarPropertyValue: java.lang.Object getValue()>();

        $r10 = staticinvoke <androidx.car.app.hardware.common.CarPropertyResponse: androidx.car.app.hardware.common.CarPropertyResponse create(int,int,long,java.lang.Object)>($i6, i0, l1, $r9);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        r13 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (androidx.car.app.hardware.common.CarInternalError) $r4;

        $i2 = virtualinvoke r14.<androidx.car.app.hardware.common.CarInternalError: int getPropertyId()>();

        $i3 = virtualinvoke r14.<androidx.car.app.hardware.common.CarInternalError: int getErrorCode()>();

        $r5 = staticinvoke <androidx.car.app.hardware.common.CarPropertyResponse: androidx.car.app.hardware.common.CarPropertyResponse createErrorResponse(int,int)>($i2, $i3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label4:
        return r2;
    }

    private java.util.List parseRawRequest(java.util.List)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        androidx.car.app.hardware.common.GetPropertyRequest r4;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.Object $r6;
        android.util.Pair $r7;
        java.lang.Integer $r8, $r9;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.car.app.hardware.common.GetPropertyRequest) $r6;

        $i1 = virtualinvoke r4.<androidx.car.app.hardware.common.GetPropertyRequest: int getPropertyId()>();

        $z1 = staticinvoke <androidx.car.app.hardware.common.PropertyUtils: boolean isGlobalProperty(int)>($i1);

        if $z1 == 0 goto label2;

        $r7 = new android.util.Pair;

        $i2 = virtualinvoke r4.<androidx.car.app.hardware.common.GetPropertyRequest: int getPropertyId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r7.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r8, $r9);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        goto label1;

     label3:
        return r2;
    }

    private void checkPermissions(java.util.List)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        java.util.Set r2;
        java.util.Iterator r3;
        java.lang.String r4, $r11;
        boolean $z0;
        java.lang.Object $r5;
        android.content.Context $r6;
        int $i0;
        java.lang.SecurityException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        r2 = staticinvoke <androidx.car.app.hardware.common.PropertyUtils: java.util.Set getReadPermissionsByPropertyIds(java.util.List)>(r1);

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r5;

        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r4);

        if $i0 == 0 goto label2;

        $r7 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missed permission: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        goto label1;

     label3:
        return;
    }

    private void lambda$dispatchResponseWithDelay$6(androidx.car.app.hardware.common.OnCarPropertyResponseListener)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r1;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarPropertyResponseListener;

        virtualinvoke r0.<androidx.car.app.hardware.common.PropertyManager: void dispatchResponseWithDelay(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r1);

        return;
    }

    private java.lang.Object lambda$submitGetPropertyRequest$5(java.util.concurrent.Executor, java.util.List, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.concurrent.Executor r1;
        java.util.List r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager,java.util.List,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager: void lambda$submitGetPropertyRequest$4(java.util.List,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return "Get property values done";
    }

    private void lambda$submitGetPropertyRequest$4(java.util.List, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.car.app.hardware.common.PropertyRequestProcessor $r3;
        androidx.car.app.hardware.common.PropertyRequestProcessor$OnGetPropertiesListener $r4;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyRequestProcessor mPropertyRequestProcessor>;

        $r4 = dynamicinvoke "onGetProperties" <androidx.car.app.hardware.common.PropertyRequestProcessor$OnGetPropertiesListener (androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.util.List,java.util.List), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.hardware.common.PropertyManager: void lambda$submitGetPropertyRequest$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.util.List,java.util.List)>, methodtype: void __METHODTYPE__(java.util.List,java.util.List));

        virtualinvoke $r3.<androidx.car.app.hardware.common.PropertyRequestProcessor: void fetchCarPropertyValues(java.util.List,androidx.car.app.hardware.common.PropertyRequestProcessor$OnGetPropertiesListener)>(r1, $r4);

        return;
    }

    private static void lambda$submitGetPropertyRequest$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, java.util.List, java.util.List)
    {
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r0;
        java.util.List r1, r2, $r3;

        r0 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        $r3 = staticinvoke <androidx.car.app.hardware.common.PropertyManager: java.util.List createResponses(java.util.List,java.util.List)>(r1, r2);

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r3);

        return;
    }

    private void lambda$submitUnregisterListenerRequest$2(java.util.List)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        java.util.Iterator r2;
        int i0;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        androidx.car.app.hardware.common.PropertyRequestProcessor $r5;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyRequestProcessor mPropertyRequestProcessor>;

        virtualinvoke $r5.<androidx.car.app.hardware.common.PropertyRequestProcessor: void unregisterProperty(int)>(i0);

        goto label1;

     label2:
        return;
    }

    private void lambda$submitRegisterListenerRequest$1(androidx.car.app.hardware.common.OnCarPropertyResponseListener)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        androidx.car.app.hardware.common.OnCarPropertyResponseListener r1;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarPropertyResponseListener;

        virtualinvoke r0.<androidx.car.app.hardware.common.PropertyManager: void dispatchResponseWithDelay(androidx.car.app.hardware.common.OnCarPropertyResponseListener)>(r1);

        return;
    }

    private void lambda$submitRegisterListenerRequest$0(java.util.List, float)
    {
        androidx.car.app.hardware.common.PropertyManager r0;
        java.util.List r1;
        float f0;
        java.util.Iterator r2;
        int i0;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        androidx.car.app.hardware.common.PropertyRequestProcessor $r5;
        java.lang.Throwable $r6, $r13, r20, r21;
        java.lang.StringBuilder $r7, $r8, $r9, $r14, $r15, $r16;
        java.lang.String $r10, $r17;
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback $r11, $r18;
        androidx.car.app.hardware.common.CarInternalError $r12, $r19;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager;

        r1 := @parameter0: java.util.List;

        f0 := @parameter1: float;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        $r5 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyRequestProcessor mPropertyRequestProcessor>;

        virtualinvoke $r5.<androidx.car.app.hardware.common.PropertyRequestProcessor: void registerProperty(int,float)>(i0, f0);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        r20 = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to register for property: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CarApp.Hardware", $r17, r20);

        $r18 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback mPropertyProcessorCallback>;

        $r19 = staticinvoke <androidx.car.app.hardware.common.CarInternalError: androidx.car.app.hardware.common.CarInternalError create(int,int,int)>(i0, 0, 2);

        virtualinvoke $r18.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: void onErrorEvent(androidx.car.app.hardware.common.CarInternalError)>($r19);

        goto label6;

     label5:
        $r6 := @caughtexception;

        r21 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to register for property: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CarApp.Hardware", $r10, r21);

        $r11 = r0.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback mPropertyProcessorCallback>;

        $r12 = staticinvoke <androidx.car.app.hardware.common.CarInternalError: androidx.car.app.hardware.common.CarInternalError create(int,int,int)>(i0, 0, 3);

        virtualinvoke $r11.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: void onErrorEvent(androidx.car.app.hardware.common.CarInternalError)>($r12);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback
<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>
    void <init>(androidx.car.app.hardware.common.PropertyManager)
    {
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback r0;
        androidx.car.app.hardware.common.PropertyManager r1;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        r1 := @parameter0: androidx.car.app.hardware.common.PropertyManager;

        r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0> = r1;

        specialinvoke r0.<androidx.car.app.hardware.common.PropertyRequestProcessor$PropertyEventCallback: void <init>()>();

        return;
    }

    public void onChangeEvent(android.car.hardware.CarPropertyValue)
    {
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback r0;
        android.car.hardware.CarPropertyValue r1;
        java.lang.Object r2, $r5;
        int i0;
        java.lang.Throwable r3, $r11;
        androidx.car.app.hardware.common.PropertyManager $r4, $r6, $r8;
        androidx.car.app.hardware.common.PropertyResponseCache $r7;
        boolean $z0, $z1;
        java.util.concurrent.ScheduledExecutorService $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        r1 := @parameter0: android.car.hardware.CarPropertyValue;

        $r4 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r5 = $r4.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r7 = $r6.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        $z0 = virtualinvoke $r7.<androidx.car.app.hardware.common.PropertyResponseCache: boolean updateResponseIfNeeded(android.car.hardware.CarPropertyValue)>(r1);

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r1.<android.car.hardware.CarPropertyValue: int getPropertyId()>();

        $z1 = staticinvoke <androidx.car.app.hardware.common.PropertyUtils: boolean isOnChangeProperty(int)>(i0);

        if $z1 == 0 goto label2;

        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r9 = $r8.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: void lambda$onChangeEvent$0(int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r9.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r10);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void onErrorEvent(androidx.car.app.hardware.common.CarInternalError)
    {
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback r0;
        androidx.car.app.hardware.common.CarInternalError r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r11;
        androidx.car.app.hardware.common.PropertyManager $r4, $r6, $r8;
        androidx.car.app.hardware.common.PropertyResponseCache $r7;
        java.util.concurrent.ScheduledExecutorService $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        r1 := @parameter0: androidx.car.app.hardware.common.CarInternalError;

        $r4 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r5 = $r4.<androidx.car.app.hardware.common.PropertyManager: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r7 = $r6.<androidx.car.app.hardware.common.PropertyManager: androidx.car.app.hardware.common.PropertyResponseCache mListenerAndResponseCache>;

        virtualinvoke $r7.<androidx.car.app.hardware.common.PropertyResponseCache: void updateInternalError(androidx.car.app.hardware.common.CarInternalError)>(r1);

        $r8 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $r9 = $r8.<androidx.car.app.hardware.common.PropertyManager: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback,androidx.car.app.hardware.common.CarInternalError)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: void lambda$onErrorEvent$1(androidx.car.app.hardware.common.CarInternalError)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r9.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r10);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void lambda$onErrorEvent$1(androidx.car.app.hardware.common.CarInternalError)
    {
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback r0;
        androidx.car.app.hardware.common.CarInternalError r1;
        androidx.car.app.hardware.common.PropertyManager $r2;
        int $i0;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        r1 := @parameter0: androidx.car.app.hardware.common.CarInternalError;

        $r2 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        $i0 = virtualinvoke r1.<androidx.car.app.hardware.common.CarInternalError: int getPropertyId()>();

        virtualinvoke $r2.<androidx.car.app.hardware.common.PropertyManager: void dispatchResponsesWithoutDelay(int)>($i0);

        return;
    }

    private void lambda$onChangeEvent$0(int)
    {
        androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback r0;
        int i0;
        androidx.car.app.hardware.common.PropertyManager $r1;

        r0 := @this: androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.car.app.hardware.common.PropertyManager$PropertyProcessorCallback: androidx.car.app.hardware.common.PropertyManager this$0>;

        virtualinvoke $r1.<androidx.car.app.hardware.common.PropertyManager: void dispatchResponsesWithoutDelay(int)>(i0);

        return;
    }

