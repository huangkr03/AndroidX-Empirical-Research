androidx.media3.test.utils.TestExoPlayerBuilder
<androidx.media3.test.utils.TestExoPlayerBuilder: android.content.Context context>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.LoadControl loadControl>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.RenderersFactory renderersFactory>
<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.source.MediaSource$Factory mediaSourceFactory>
<androidx.media3.test.utils.TestExoPlayerBuilder: boolean useLazyPreparation>
<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper>
<androidx.media3.test.utils.TestExoPlayerBuilder: long seekBackIncrementMs>
<androidx.media3.test.utils.TestExoPlayerBuilder: long seekForwardIncrementMs>
    public void <init>(android.content.Context)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        android.content.Context r1;
        android.os.Looper r2;
        androidx.media3.test.utils.FakeClock $r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r4;
        androidx.media3.exoplayer.DefaultLoadControl $r5;
        androidx.media3.exoplayer.upstream.DefaultBandwidthMeter$Builder $r6;
        androidx.media3.exoplayer.upstream.DefaultBandwidthMeter $r7;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.content.Context context> = r1;

        $r3 = new androidx.media3.test.utils.FakeClock;

        specialinvoke $r3.<androidx.media3.test.utils.FakeClock: void <init>(boolean)>(1);

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock> = $r3;

        $r4 = new androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        specialinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void <init>(android.content.Context)>(r1);

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector> = $r4;

        $r5 = new androidx.media3.exoplayer.DefaultLoadControl;

        specialinvoke $r5.<androidx.media3.exoplayer.DefaultLoadControl: void <init>()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.LoadControl loadControl> = $r5;

        $r6 = new androidx.media3.exoplayer.upstream.DefaultBandwidthMeter$Builder;

        specialinvoke $r6.<androidx.media3.exoplayer.upstream.DefaultBandwidthMeter$Builder: void <init>(android.content.Context)>(r1);

        $r7 = virtualinvoke $r6.<androidx.media3.exoplayer.upstream.DefaultBandwidthMeter$Builder: androidx.media3.exoplayer.upstream.DefaultBandwidthMeter build()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter> = $r7;

        r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r2 == null goto label1;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper> = r2;

     label1:
        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekBackIncrementMs> = 5000L;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekForwardIncrementMs> = 15000L;

        return;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setUseLazyPreparation(boolean)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: boolean useLazyPreparation> = z0;

        return r0;
    }

    public boolean getUseLazyPreparation()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $z0 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: boolean useLazyPreparation>;

        return $z0;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setTrackSelector(androidx.media3.exoplayer.trackselection.DefaultTrackSelector)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.trackselection.DefaultTrackSelector getTrackSelector()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setLoadControl(androidx.media3.exoplayer.LoadControl)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.LoadControl r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.LoadControl;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.LoadControl loadControl> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.LoadControl getLoadControl()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.LoadControl $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.LoadControl loadControl>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setBandwidthMeter(androidx.media3.exoplayer.upstream.BandwidthMeter)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.upstream.BandwidthMeter getBandwidthMeter()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>;

        return $r1;
    }

    public transient androidx.media3.test.utils.TestExoPlayerBuilder setRenderers(androidx.media3.exoplayer.Renderer[])
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.Renderer[] r1;
        androidx.media3.exoplayer.RenderersFactory $r2;
        com.google.common.truth.Subject $r3;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.Renderer[];

        $r2 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.RenderersFactory renderersFactory>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r2);

        virtualinvoke $r3.<com.google.common.truth.Subject: void isNull()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.Renderer[] getRenderers()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.Renderer[] $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setRenderersFactory(androidx.media3.exoplayer.RenderersFactory)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.RenderersFactory r1;
        androidx.media3.exoplayer.Renderer[] $r2;
        com.google.common.truth.ObjectArraySubject $r3;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.RenderersFactory;

        $r2 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ObjectArraySubject assertThat(java.lang.Object[])>($r2);

        virtualinvoke $r3.<com.google.common.truth.ObjectArraySubject: void isNull()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.RenderersFactory renderersFactory> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.RenderersFactory getRenderersFactory()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.RenderersFactory $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.RenderersFactory renderersFactory>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setClock(androidx.media3.common.util.Clock)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.common.util.Clock r1;
        com.google.common.truth.Subject $r2;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.common.util.Clock;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.google.common.truth.Subject: void isNotNull()>();

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock> = r1;

        return r0;
    }

    public androidx.media3.common.util.Clock getClock()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.common.util.Clock $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setLooper(android.os.Looper)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        android.os.Looper r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: android.os.Looper;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper> = r1;

        return r0;
    }

    public android.os.Looper getLooper()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        android.os.Looper $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper>;

        return $r1;
    }

    public androidx.media3.exoplayer.source.MediaSource$Factory getMediaSourceFactory()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.source.MediaSource$Factory $r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.source.MediaSource$Factory mediaSourceFactory>;

        return $r1;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setMediaSourceFactory(androidx.media3.exoplayer.source.MediaSource$Factory)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.source.MediaSource$Factory r1;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$Factory;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.source.MediaSource$Factory mediaSourceFactory> = r1;

        return r0;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setSeekBackIncrementMs(long)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        long l0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        l0 := @parameter0: long;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekBackIncrementMs> = l0;

        return r0;
    }

    public long getSeekBackIncrementMs()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        long $l0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $l0 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekBackIncrementMs>;

        return $l0;
    }

    public androidx.media3.test.utils.TestExoPlayerBuilder setSeekForwardIncrementMs(long)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        long l0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        l0 := @parameter0: long;

        r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekForwardIncrementMs> = l0;

        return r0;
    }

    public long getSeekForwardIncrementMs()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        long $l0;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $l0 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekForwardIncrementMs>;

        return $l0;
    }

    public androidx.media3.exoplayer.ExoPlayer build()
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        androidx.media3.exoplayer.ExoPlayer$Builder r1, $r7, $r9, $r11, $r14, $r16, $r17, $r19, $r20, r26;
        android.os.Looper $r2, $r18;
        android.content.Context $r5;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r6;
        androidx.media3.exoplayer.LoadControl $r8;
        androidx.media3.exoplayer.upstream.BandwidthMeter $r10;
        androidx.media3.common.util.Clock $r13, $r15;
        boolean $z0;
        long $l0, $l1;
        androidx.media3.exoplayer.source.MediaSource$Factory $r21, $r23;
        androidx.media3.exoplayer.ExoPlayer $r22;
        androidx.media3.exoplayer.RenderersFactory r25;
        androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector r27;
        androidx.media3.exoplayer.trackselection.TrackSelector r28;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        $r2 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "TestExoPlayer builder run on a thread without Looper and no Looper specified.");

        r25 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.RenderersFactory renderersFactory>;

        if r25 != null goto label1;

        r25 = dynamicinvoke "createRenderers" <androidx.media3.exoplayer.RenderersFactory (androidx.media3.test.utils.TestExoPlayerBuilder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.exoplayer.Renderer[] __METHODTYPE__(android.os.Handler,androidx.media3.exoplayer.video.VideoRendererEventListener,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.text.TextOutput,androidx.media3.exoplayer.metadata.MetadataOutput), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] lambda$build$0(android.os.Handler,androidx.media3.exoplayer.video.VideoRendererEventListener,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.text.TextOutput,androidx.media3.exoplayer.metadata.MetadataOutput)>, methodtype: androidx.media3.exoplayer.Renderer[] __METHODTYPE__(android.os.Handler,androidx.media3.exoplayer.video.VideoRendererEventListener,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.text.TextOutput,androidx.media3.exoplayer.metadata.MetadataOutput));

     label1:
        r26 = new androidx.media3.exoplayer.ExoPlayer$Builder;

        $r5 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.content.Context context>;

        specialinvoke r26.<androidx.media3.exoplayer.ExoPlayer$Builder: void <init>(android.content.Context,androidx.media3.exoplayer.RenderersFactory)>($r5, r25);

        $r6 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        r28 = (androidx.media3.exoplayer.trackselection.TrackSelector) $r6;

        $r7 = virtualinvoke r26.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setTrackSelector(androidx.media3.exoplayer.trackselection.TrackSelector)>(r28);

        $r8 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.LoadControl loadControl>;

        $r9 = virtualinvoke $r7.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setLoadControl(androidx.media3.exoplayer.LoadControl)>($r8);

        $r10 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>;

        $r11 = virtualinvoke $r9.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setBandwidthMeter(androidx.media3.exoplayer.upstream.BandwidthMeter)>($r10);

        r27 = new androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector;

        $r13 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock>;

        specialinvoke r27.<androidx.media3.exoplayer.analytics.DefaultAnalyticsCollector: void <init>(androidx.media3.common.util.Clock)>($r13);

        $r14 = virtualinvoke $r11.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setAnalyticsCollector(androidx.media3.exoplayer.analytics.AnalyticsCollector)>(r27);

        $r15 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock>;

        $r16 = virtualinvoke $r14.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setClock(androidx.media3.common.util.Clock)>($r15);

        $z0 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: boolean useLazyPreparation>;

        $r17 = virtualinvoke $r16.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setUseLazyPreparation(boolean)>($z0);

        $r18 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: android.os.Looper looper>;

        $r19 = virtualinvoke $r17.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setLooper(android.os.Looper)>($r18);

        $l0 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekBackIncrementMs>;

        $r20 = virtualinvoke $r19.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setSeekBackIncrementMs(long)>($l0);

        $l1 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: long seekForwardIncrementMs>;

        r1 = virtualinvoke $r20.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setSeekForwardIncrementMs(long)>($l1);

        $r21 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.source.MediaSource$Factory mediaSourceFactory>;

        if $r21 == null goto label2;

        $r23 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.source.MediaSource$Factory mediaSourceFactory>;

        virtualinvoke r1.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setMediaSourceFactory(androidx.media3.exoplayer.source.MediaSource$Factory)>($r23);

     label2:
        $r22 = virtualinvoke r1.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer build()>();

        return $r22;
    }

    private androidx.media3.exoplayer.Renderer[] lambda$build$0(android.os.Handler, androidx.media3.exoplayer.video.VideoRendererEventListener, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.text.TextOutput, androidx.media3.exoplayer.metadata.MetadataOutput)
    {
        androidx.media3.test.utils.TestExoPlayerBuilder r0;
        android.os.Handler r1;
        androidx.media3.exoplayer.video.VideoRendererEventListener r2;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r3;
        androidx.media3.exoplayer.text.TextOutput r4;
        androidx.media3.exoplayer.metadata.MetadataOutput r5;
        androidx.media3.common.util.HandlerWrapper r6;
        androidx.media3.common.util.Clock $r7;
        android.os.Looper $r8;
        androidx.media3.exoplayer.Renderer[] $r9, r15;
        java.lang.Object[] $r12;
        androidx.media3.test.utils.FakeVideoRenderer r13;
        androidx.media3.test.utils.FakeAudioRenderer r14;

        r0 := @this: androidx.media3.test.utils.TestExoPlayerBuilder;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: androidx.media3.exoplayer.video.VideoRendererEventListener;

        r3 := @parameter2: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r4 := @parameter3: androidx.media3.exoplayer.text.TextOutput;

        r5 := @parameter4: androidx.media3.exoplayer.metadata.MetadataOutput;

        $r7 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock clock>;

        $r8 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        r6 = interfaceinvoke $r7.<androidx.media3.common.util.Clock: androidx.media3.common.util.HandlerWrapper createHandler(android.os.Looper,android.os.Handler$Callback)>($r8, null);

        $r9 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers>;

        if $r9 == null goto label1;

        $r12 = r0.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.Renderer[] renderers>;

        goto label2;

     label1:
        $r12 = newarray (androidx.media3.exoplayer.Renderer)[2];

        r13 = new androidx.media3.test.utils.FakeVideoRenderer;

        specialinvoke r13.<androidx.media3.test.utils.FakeVideoRenderer: void <init>(androidx.media3.common.util.HandlerWrapper,androidx.media3.exoplayer.video.VideoRendererEventListener)>(r6, r2);

        $r12[0] = r13;

        r14 = new androidx.media3.test.utils.FakeAudioRenderer;

        specialinvoke r14.<androidx.media3.test.utils.FakeAudioRenderer: void <init>(androidx.media3.common.util.HandlerWrapper,androidx.media3.exoplayer.audio.AudioRendererEventListener)>(r6, r3);

        $r12[1] = r14;

     label2:
        r15 = (androidx.media3.exoplayer.Renderer[]) $r12;

        return r15;
    }

