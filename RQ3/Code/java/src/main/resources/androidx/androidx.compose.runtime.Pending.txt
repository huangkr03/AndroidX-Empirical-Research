androidx.compose.runtime.Pending
<androidx.compose.runtime.Pending: java.util.List keyInfos>
<androidx.compose.runtime.Pending: int startIndex>
<androidx.compose.runtime.Pending: int groupIndex>
<androidx.compose.runtime.Pending: java.util.List usedKeys>
<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>
<androidx.compose.runtime.Pending: kotlin.Lazy keyMap$delegate>
    public void <init>(java.util.List, int)
    {
        androidx.compose.runtime.Pending r0, r4, $r21;
        java.util.List r1, $r6, $r8, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.util.HashMap r2, $r7;
        androidx.compose.runtime.KeyInfo r3;
        java.util.ArrayList $r5;
        androidx.compose.runtime.Pending$keyMap$2 $r9;
        kotlin.jvm.functions.Function0 $r10;
        kotlin.Lazy $r11;
        java.lang.Object $r13;
        java.util.Map $r14;
        java.lang.Integer $r15;
        androidx.compose.runtime.GroupInfo $r16;
        java.lang.IllegalArgumentException $r18;
        java.lang.String $r19, $r20;
        boolean $z1;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfos");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.Pending: java.util.List keyInfos> = r1;

        r0.<androidx.compose.runtime.Pending: int startIndex> = i0;

        $i2 = r0.<androidx.compose.runtime.Pending: int startIndex>;

        if $i2 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r20 = "Invalid start index";

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label3:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = (java.util.List) $r5;

        r0.<androidx.compose.runtime.Pending: java.util.List usedKeys> = $r6;

        $r21 = (androidx.compose.runtime.Pending) r0;

        r4 = r0;

        i6 = 0;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r2 = $r7;

        i7 = 0;

        $r8 = $r21.<androidx.compose.runtime.Pending: java.util.List keyInfos>;

        i1 = interfaceinvoke $r8.<java.util.List: int size()>();

     label4:
        if i7 >= i1 goto label5;

        $r12 = $r21.<androidx.compose.runtime.Pending: java.util.List keyInfos>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i7);

        r3 = (androidx.compose.runtime.KeyInfo) $r13;

        $r14 = (java.util.Map) r2;

        $i3 = virtualinvoke r3.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16 = new androidx.compose.runtime.GroupInfo;

        $i4 = virtualinvoke r3.<androidx.compose.runtime.KeyInfo: int getNodes()>();

        specialinvoke $r16.<androidx.compose.runtime.GroupInfo: void <init>(int,int,int)>(i7, i6, $i4);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $i5 = virtualinvoke r3.<androidx.compose.runtime.KeyInfo: int getNodes()>();

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label4;

     label5:
        r4.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos> = r2;

        $r9 = new androidx.compose.runtime.Pending$keyMap$2;

        specialinvoke $r9.<androidx.compose.runtime.Pending$keyMap$2: void <init>(androidx.compose.runtime.Pending)>(r0);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        $r11 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r10);

        r0.<androidx.compose.runtime.Pending: kotlin.Lazy keyMap$delegate> = $r11;

        return;
    }

    public final java.util.List getKeyInfos()
    {
        androidx.compose.runtime.Pending r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.runtime.Pending;

        $r1 = r0.<androidx.compose.runtime.Pending: java.util.List keyInfos>;

        return $r1;
    }

    public final int getStartIndex()
    {
        androidx.compose.runtime.Pending r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.Pending;

        $i0 = r0.<androidx.compose.runtime.Pending: int startIndex>;

        return $i0;
    }

    public final int getGroupIndex()
    {
        androidx.compose.runtime.Pending r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.Pending;

        $i0 = r0.<androidx.compose.runtime.Pending: int groupIndex>;

        return $i0;
    }

    public final void setGroupIndex(int)
    {
        androidx.compose.runtime.Pending r0;
        int i0;

        r0 := @this: androidx.compose.runtime.Pending;

        i0 := @parameter0: int;

        r0.<androidx.compose.runtime.Pending: int groupIndex> = i0;

        return;
    }

    public final java.util.HashMap getKeyMap()
    {
        androidx.compose.runtime.Pending r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 = r0.<androidx.compose.runtime.Pending: kotlin.Lazy keyMap$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.HashMap) $r2;

        return $r3;
    }

    public final androidx.compose.runtime.KeyInfo getNext(int, java.lang.Object)
    {
        androidx.compose.runtime.Pending r0;
        int i0;
        java.lang.Object r1, r2, $r4, $r7;
        java.util.HashMap $r3;
        androidx.compose.runtime.KeyInfo $r5;
        java.lang.Integer $r6;
        androidx.compose.runtime.JoinedKey r8;

        r0 := @this: androidx.compose.runtime.Pending;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        r8 = new androidx.compose.runtime.JoinedKey;

        $r7 = r8;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r8.<androidx.compose.runtime.JoinedKey: void <init>(java.lang.Object,java.lang.Object)>($r6, r1);

        goto label2;

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label2:
        r2 = $r7;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.Pending: java.util.HashMap getKeyMap()>();

        $r4 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object access$pop(java.util.HashMap,java.lang.Object)>($r3, r2);

        $r5 = (androidx.compose.runtime.KeyInfo) $r4;

        return $r5;
    }

    public final boolean recordUsed(androidx.compose.runtime.KeyInfo)
    {
        androidx.compose.runtime.Pending r0;
        androidx.compose.runtime.KeyInfo r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: androidx.compose.runtime.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.runtime.Pending: java.util.List usedKeys>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public final java.util.List getUsed()
    {
        androidx.compose.runtime.Pending r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.runtime.Pending;

        $r1 = r0.<androidx.compose.runtime.Pending: java.util.List usedKeys>;

        return $r1;
    }

    public final void registerMoveSlot(int, int)
    {
        androidx.compose.runtime.Pending r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.util.HashMap $r1, $r3;
        java.util.Collection $r2, $r4;
        boolean $z0, $z1, $z4, $z7;
        java.lang.Iterable $r5, $r9;
        java.util.Iterator r6, r10;
        java.lang.Object r7, r11;
        androidx.compose.runtime.GroupInfo r8, r12;

        r0 := @this: androidx.compose.runtime.Pending;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label08;

        $r3 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "groupInfos.values");

        $r5 = (java.lang.Iterable) $r4;

        r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.compose.runtime.GroupInfo) r7;

        i5 = virtualinvoke r8.<androidx.compose.runtime.GroupInfo: int getSlotIndex()>();

        if i5 != i0 goto label02;

        virtualinvoke r8.<androidx.compose.runtime.GroupInfo: void setSlotIndex(int)>(i1);

        goto label06;

     label02:
        if i1 > i5 goto label04;

        if i5 >= i0 goto label03;

        $z4 = 1;

        goto label05;

     label03:
        $z4 = 0;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        if $z4 == 0 goto label06;

        $i4 = i5 + 1;

        virtualinvoke r8.<androidx.compose.runtime.GroupInfo: void setSlotIndex(int)>($i4);

     label06:
        goto label01;

     label07:
        goto label15;

     label08:
        if i1 <= i0 goto label15;

        $r1 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "groupInfos.values");

        $r9 = (java.lang.Iterable) $r2;

        r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (androidx.compose.runtime.GroupInfo) r11;

        i6 = virtualinvoke r12.<androidx.compose.runtime.GroupInfo: int getSlotIndex()>();

        if i6 != i0 goto label10;

        virtualinvoke r12.<androidx.compose.runtime.GroupInfo: void setSlotIndex(int)>(i1);

        goto label14;

     label10:
        $i2 = i0 + 1;

        if $i2 > i6 goto label12;

        if i6 >= i1 goto label11;

        $z7 = 1;

        goto label13;

     label11:
        $z7 = 0;

        goto label13;

     label12:
        $z7 = 0;

     label13:
        if $z7 == 0 goto label14;

        $i3 = i6 - 1;

        virtualinvoke r12.<androidx.compose.runtime.GroupInfo: void setSlotIndex(int)>($i3);

     label14:
        goto label09;

     label15:
        return;
    }

    public final void registerMoveNode(int, int, int)
    {
        androidx.compose.runtime.Pending r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.util.HashMap $r1, $r3;
        java.util.Collection $r2, $r4;
        boolean $z0, $z1, $z4, $z5, $z8, $z9;
        java.lang.Iterable $r5, $r9;
        java.util.Iterator r6, r10;
        java.lang.Object r7, r11;
        androidx.compose.runtime.GroupInfo r8, r12;

        r0 := @this: androidx.compose.runtime.Pending;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 <= i1 goto label11;

        $r3 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "groupInfos.values");

        $r5 = (java.lang.Iterable) $r4;

        r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.compose.runtime.GroupInfo) r7;

        i12 = virtualinvoke r8.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        if i0 > i12 goto label03;

        $i11 = i0 + i2;

        if i12 >= $i11 goto label02;

        $z4 = 1;

        goto label04;

     label02:
        $z4 = 0;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        if $z4 == 0 goto label05;

        $i9 = i12 - i0;

        $i10 = i1 + $i9;

        virtualinvoke r8.<androidx.compose.runtime.GroupInfo: void setNodeIndex(int)>($i10);

        goto label09;

     label05:
        if i1 > i12 goto label07;

        if i12 >= i0 goto label06;

        $z5 = 1;

        goto label08;

     label06:
        $z5 = 0;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        if $z5 == 0 goto label09;

        $i8 = i12 + i2;

        virtualinvoke r8.<androidx.compose.runtime.GroupInfo: void setNodeIndex(int)>($i8);

     label09:
        goto label01;

     label10:
        goto label21;

     label11:
        if i1 <= i0 goto label21;

        $r1 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "groupInfos.values");

        $r9 = (java.lang.Iterable) $r2;

        r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (androidx.compose.runtime.GroupInfo) r11;

        i13 = virtualinvoke r12.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        if i0 > i13 goto label14;

        $i7 = i0 + i2;

        if i13 >= $i7 goto label13;

        $z8 = 1;

        goto label15;

     label13:
        $z8 = 0;

        goto label15;

     label14:
        $z8 = 0;

     label15:
        if $z8 == 0 goto label16;

        $i5 = i13 - i0;

        $i6 = i1 + $i5;

        virtualinvoke r12.<androidx.compose.runtime.GroupInfo: void setNodeIndex(int)>($i6);

        goto label20;

     label16:
        $i3 = i0 + 1;

        if $i3 > i13 goto label18;

        if i13 >= i1 goto label17;

        $z9 = 1;

        goto label19;

     label17:
        $z9 = 0;

        goto label19;

     label18:
        $z9 = 0;

     label19:
        if $z9 == 0 goto label20;

        $i4 = i13 - i2;

        virtualinvoke r12.<androidx.compose.runtime.GroupInfo: void setNodeIndex(int)>($i4);

     label20:
        goto label12;

     label21:
        return;
    }

    public final void registerInsert(androidx.compose.runtime.KeyInfo, int)
    {
        androidx.compose.runtime.Pending r0;
        androidx.compose.runtime.KeyInfo r1;
        int i0, $i1;
        java.util.HashMap $r2;
        java.util.Map $r3;
        java.lang.Integer $r4;
        androidx.compose.runtime.GroupInfo $r5;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: androidx.compose.runtime.KeyInfo;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r3 = (java.util.Map) $r2;

        $i1 = virtualinvoke r1.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = new androidx.compose.runtime.GroupInfo;

        specialinvoke $r5.<androidx.compose.runtime.GroupInfo: void <init>(int,int,int)>(-1, i0, 0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public final boolean updateNodeCount(int, int)
    {
        androidx.compose.runtime.Pending r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        androidx.compose.runtime.GroupInfo r1, r5;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r8;
        java.util.HashMap $r6, $r9;
        java.lang.Integer $r7;
        java.util.Collection $r10;
        boolean $z2, $z3;

        r0 := @this: androidx.compose.runtime.Pending;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r6 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        r1 = (androidx.compose.runtime.GroupInfo) $r8;

        if r1 == null goto label4;

        i2 = virtualinvoke r1.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        $i5 = virtualinvoke r1.<androidx.compose.runtime.GroupInfo: int getNodeCount()>();

        i3 = i1 - $i5;

        virtualinvoke r1.<androidx.compose.runtime.GroupInfo: void setNodeCount(int)>(i1);

        if i3 == 0 goto label3;

        $r9 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "groupInfos.values");

        $r2 = (java.lang.Iterable) $r10;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.runtime.GroupInfo) r4;

        $i6 = virtualinvoke r5.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        if $i6 < i2 goto label2;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, r1);

        if $z3 != 0 goto label2;

        $i7 = virtualinvoke r5.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        i4 = $i7 + i3;

        if i4 < 0 goto label2;

        virtualinvoke r5.<androidx.compose.runtime.GroupInfo: void setNodeIndex(int)>(i4);

     label2:
        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public final int slotPositionOf(androidx.compose.runtime.KeyInfo)
    {
        androidx.compose.runtime.Pending r0;
        androidx.compose.runtime.KeyInfo r1;
        java.util.HashMap $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        androidx.compose.runtime.GroupInfo $r5;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: androidx.compose.runtime.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $i0 = virtualinvoke r1.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.compose.runtime.GroupInfo) $r4;

        if $r5 == null goto label1;

        $i1 = virtualinvoke $r5.<androidx.compose.runtime.GroupInfo: int getSlotIndex()>();

        goto label2;

     label1:
        $i1 = -1;

     label2:
        return $i1;
    }

    public final int nodePositionOf(androidx.compose.runtime.KeyInfo)
    {
        androidx.compose.runtime.Pending r0;
        androidx.compose.runtime.KeyInfo r1;
        java.util.HashMap $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        androidx.compose.runtime.GroupInfo $r5;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: androidx.compose.runtime.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $i0 = virtualinvoke r1.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.compose.runtime.GroupInfo) $r4;

        if $r5 == null goto label1;

        $i1 = virtualinvoke $r5.<androidx.compose.runtime.GroupInfo: int getNodeIndex()>();

        goto label2;

     label1:
        $i1 = -1;

     label2:
        return $i1;
    }

    public final int updatedNodeCountOf(androidx.compose.runtime.KeyInfo)
    {
        androidx.compose.runtime.Pending r0;
        androidx.compose.runtime.KeyInfo r1;
        java.util.HashMap $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        androidx.compose.runtime.GroupInfo $r5;

        r0 := @this: androidx.compose.runtime.Pending;

        r1 := @parameter0: androidx.compose.runtime.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.runtime.Pending: java.util.HashMap groupInfos>;

        $i0 = virtualinvoke r1.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.compose.runtime.GroupInfo) $r4;

        if $r5 == null goto label1;

        $i1 = virtualinvoke $r5.<androidx.compose.runtime.GroupInfo: int getNodeCount()>();

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<androidx.compose.runtime.KeyInfo: int getNodes()>();

     label2:
        return $i1;
    }

androidx.compose.runtime.Pending$keyMap$2
<androidx.compose.runtime.Pending$keyMap$2: androidx.compose.runtime.Pending this$0>
    void <init>(androidx.compose.runtime.Pending)
    {
        androidx.compose.runtime.Pending$keyMap$2 r0;
        androidx.compose.runtime.Pending $r1;

        r0 := @this: androidx.compose.runtime.Pending$keyMap$2;

        $r1 := @parameter0: androidx.compose.runtime.Pending;

        r0.<androidx.compose.runtime.Pending$keyMap$2: androidx.compose.runtime.Pending this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.HashMap invoke()
    {
        androidx.compose.runtime.Pending$keyMap$2 r0;
        java.util.HashMap r1, r3;
        androidx.compose.runtime.Pending r2;
        int i0, i1;
        androidx.compose.runtime.KeyInfo r4;
        java.util.List $r5, $r6;
        java.lang.Object $r7, $r8;

        r0 := @this: androidx.compose.runtime.Pending$keyMap$2;

        r1 = staticinvoke <androidx.compose.runtime.ComposerKt: java.util.HashMap access$multiMap()>();

        r2 = r0.<androidx.compose.runtime.Pending$keyMap$2: androidx.compose.runtime.Pending this$0>;

        r3 = r1;

        i1 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.Pending: java.util.List getKeyInfos()>();

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label2;

        $r6 = virtualinvoke r2.<androidx.compose.runtime.Pending: java.util.List getKeyInfos()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (androidx.compose.runtime.KeyInfo) $r7;

        $r8 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object access$getJoinedKey(androidx.compose.runtime.KeyInfo)>(r4);

        staticinvoke <androidx.compose.runtime.ComposerKt: boolean access$put(java.util.HashMap,java.lang.Object,java.lang.Object)>(r3, $r8, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.Pending$keyMap$2 r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.compose.runtime.Pending$keyMap$2;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.Pending$keyMap$2: java.util.HashMap invoke()>();

        return $r1;
    }

