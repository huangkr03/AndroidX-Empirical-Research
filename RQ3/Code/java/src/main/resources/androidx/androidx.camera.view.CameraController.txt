androidx.camera.view.CameraController
<androidx.camera.view.CameraController: java.lang.String TAG>
<androidx.camera.view.CameraController: java.lang.String CAMERA_NOT_INITIALIZED>
<androidx.camera.view.CameraController: java.lang.String PREVIEW_VIEW_NOT_ATTACHED>
<androidx.camera.view.CameraController: java.lang.String CAMERA_NOT_ATTACHED>
<androidx.camera.view.CameraController: java.lang.String IMAGE_CAPTURE_DISABLED>
<androidx.camera.view.CameraController: java.lang.String VIDEO_CAPTURE_DISABLED>
<androidx.camera.view.CameraController: float AF_SIZE>
<androidx.camera.view.CameraController: float AE_SIZE>
<androidx.camera.view.CameraController: int COORDINATE_SYSTEM_VIEW_REFERENCED>
<androidx.camera.view.CameraController: int TAP_TO_FOCUS_NOT_STARTED>
<androidx.camera.view.CameraController: int TAP_TO_FOCUS_STARTED>
<androidx.camera.view.CameraController: int TAP_TO_FOCUS_FOCUSED>
<androidx.camera.view.CameraController: int TAP_TO_FOCUS_NOT_FOCUSED>
<androidx.camera.view.CameraController: int TAP_TO_FOCUS_FAILED>
<androidx.camera.view.CameraController: int IMAGE_CAPTURE>
<androidx.camera.view.CameraController: int IMAGE_ANALYSIS>
<androidx.camera.view.CameraController: int VIDEO_CAPTURE>
<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>
<androidx.camera.view.CameraController: int mEnabledUseCases>
<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>
<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mPreviewTargetSize>
<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>
<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageCaptureTargetSize>
<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor>
<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor>
<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor>
<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>
<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>
<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageAnalysisTargetSize>
<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>
<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>
<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mVideoCaptureOutputSize>
<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>
<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>
<androidx.camera.view.CameraController: androidx.camera.core.ViewPort mViewPort>
<androidx.camera.view.CameraController: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>
<androidx.camera.view.CameraController: android.view.Display mPreviewDisplay>
<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider mRotationProvider>
<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider$Listener mDeviceRotationListener>
<androidx.camera.view.CameraController: boolean mPinchToZoomEnabled>
<androidx.camera.view.CameraController: boolean mTapToFocusEnabled>
<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mZoomState>
<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mTorchState>
<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState>
<androidx.camera.view.CameraController: java.util.List mEffects>
<androidx.camera.view.CameraController: android.content.Context mAppContext>
<androidx.camera.view.CameraController: com.google.common.util.concurrent.ListenableFuture mInitializationFuture>
    void <init>(android.content.Context)
    {
        androidx.camera.view.CameraController r0;
        android.content.Context r1, $r9, $r18, $r24;
        androidx.camera.core.CameraSelector $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        androidx.camera.view.ForwardingLiveData $r4, $r5;
        androidx.lifecycle.MutableLiveData $r6;
        java.lang.Integer $r7;
        java.util.List $r8;
        androidx.camera.core.Preview$Builder $r10;
        androidx.camera.core.Preview $r11;
        androidx.camera.core.ImageCapture$Builder $r12;
        androidx.camera.core.ImageCapture $r13;
        androidx.camera.core.ImageAnalysis$Builder $r14;
        androidx.camera.core.ImageAnalysis $r15;
        androidx.camera.core.VideoCapture$Builder $r16;
        androidx.camera.core.VideoCapture $r17;
        com.google.common.util.concurrent.ListenableFuture $r19, $r22;
        androidx.arch.core.util.Function $r20;
        java.util.concurrent.ScheduledExecutorService $r21;
        androidx.camera.view.RotationProvider $r23;
        androidx.camera.view.RotationProvider$Listener $r25;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <androidx.camera.core.CameraSelector: androidx.camera.core.CameraSelector DEFAULT_BACK_CAMERA>;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector> = $r2;

        r0.<androidx.camera.view.CameraController: int mEnabledUseCases> = 3;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording> = $r3;

        r0.<androidx.camera.view.CameraController: boolean mPinchToZoomEnabled> = 1;

        r0.<androidx.camera.view.CameraController: boolean mTapToFocusEnabled> = 1;

        $r4 = new androidx.camera.view.ForwardingLiveData;

        specialinvoke $r4.<androidx.camera.view.ForwardingLiveData: void <init>()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mZoomState> = $r4;

        $r5 = new androidx.camera.view.ForwardingLiveData;

        specialinvoke $r5.<androidx.camera.view.ForwardingLiveData: void <init>()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mTorchState> = $r5;

        $r6 = new androidx.lifecycle.MutableLiveData;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r6.<androidx.lifecycle.MutableLiveData: void <init>(java.lang.Object)>($r7);

        r0.<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState> = $r6;

        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<androidx.camera.view.CameraController: java.util.List mEffects> = $r8;

        $r9 = staticinvoke <androidx.camera.view.CameraController: android.content.Context getApplicationContext(android.content.Context)>(r1);

        r0.<androidx.camera.view.CameraController: android.content.Context mAppContext> = $r9;

        $r10 = new androidx.camera.core.Preview$Builder;

        specialinvoke $r10.<androidx.camera.core.Preview$Builder: void <init>()>();

        $r11 = virtualinvoke $r10.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview> = $r11;

        $r12 = new androidx.camera.core.ImageCapture$Builder;

        specialinvoke $r12.<androidx.camera.core.ImageCapture$Builder: void <init>()>();

        $r13 = virtualinvoke $r12.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture> = $r13;

        $r14 = new androidx.camera.core.ImageAnalysis$Builder;

        specialinvoke $r14.<androidx.camera.core.ImageAnalysis$Builder: void <init>()>();

        $r15 = virtualinvoke $r14.<androidx.camera.core.ImageAnalysis$Builder: androidx.camera.core.ImageAnalysis build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis> = $r15;

        $r16 = new androidx.camera.core.VideoCapture$Builder;

        specialinvoke $r16.<androidx.camera.core.VideoCapture$Builder: void <init>()>();

        $r17 = virtualinvoke $r16.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture> = $r17;

        $r18 = r0.<androidx.camera.view.CameraController: android.content.Context mAppContext>;

        $r19 = staticinvoke <androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture getInstance(android.content.Context)>($r18);

        $r20 = dynamicinvoke "apply" <androidx.arch.core.util.Function (androidx.camera.view.CameraController)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.CameraController: java.lang.Void lambda$new$0(androidx.camera.lifecycle.ProcessCameraProvider)>, methodtype: java.lang.Void __METHODTYPE__(androidx.camera.lifecycle.ProcessCameraProvider));

        $r21 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r22 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r19, $r20, $r21);

        r0.<androidx.camera.view.CameraController: com.google.common.util.concurrent.ListenableFuture mInitializationFuture> = $r22;

        $r23 = new androidx.camera.view.RotationProvider;

        $r24 = r0.<androidx.camera.view.CameraController: android.content.Context mAppContext>;

        specialinvoke $r23.<androidx.camera.view.RotationProvider: void <init>(android.content.Context)>($r24);

        r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider mRotationProvider> = $r23;

        $r25 = dynamicinvoke "onRotationChanged" <androidx.camera.view.RotationProvider$Listener (androidx.camera.view.CameraController)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.CameraController: void lambda$new$1(int)>, methodtype: void __METHODTYPE__(int));

        r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider$Listener mDeviceRotationListener> = $r25;

        return;
    }

    private static android.content.Context getApplicationContext(android.content.Context)
    {
        android.content.Context r0, r1, $r3;
        java.lang.String r2;
        int $i0;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label1;

        r2 = staticinvoke <androidx.camera.view.CameraController$Api30Impl: java.lang.String getAttributionTag(android.content.Context)>(r0);

        if r2 == null goto label1;

        $r3 = staticinvoke <androidx.camera.view.CameraController$Api30Impl: android.content.Context createAttributionContext(android.content.Context,java.lang.String)>(r1, r2);

        return $r3;

     label1:
        return r1;
    }

    public com.google.common.util.concurrent.ListenableFuture getInitializationFuture()
    {
        androidx.camera.view.CameraController r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.view.CameraController;

        $r1 = r0.<androidx.camera.view.CameraController: com.google.common.util.concurrent.ListenableFuture mInitializationFuture>;

        return $r1;
    }

<androidx.camera.view.CameraController: androidx.camera.core.Camera startCamera()>
    private boolean isCameraInitialized()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.lifecycle.ProcessCameraProvider $r1;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isPreviewViewAttached()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Preview$SurfaceProvider $r1;
        androidx.camera.core.ViewPort $r2;
        android.view.Display $r3;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ViewPort mViewPort>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.view.CameraController: android.view.Display mPreviewDisplay>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isCameraAttached()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Camera $r1;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setEnabledUseCases(int)
    {
        androidx.camera.view.CameraController r0;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $i2 = r0.<androidx.camera.view.CameraController: int mEnabledUseCases>;

        if i0 != $i2 goto label1;

        return;

     label1:
        i1 = r0.<androidx.camera.view.CameraController: int mEnabledUseCases>;

        r0.<androidx.camera.view.CameraController: int mEnabledUseCases> = i0;

        $z0 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isVideoCaptureEnabled()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<androidx.camera.view.CameraController: void stopRecording()>();

     label2:
        $r1 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.view.CameraController,int)>(r0, i1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.CameraController: void lambda$setEnabledUseCases$2(int)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates(java.lang.Runnable)>($r1);

        return;
    }

    private boolean isUseCaseEnabled(int)
    {
        androidx.camera.view.CameraController r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.camera.view.CameraController: int mEnabledUseCases>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setTargetOutputSize(androidx.camera.core.impl.ImageOutputConfig$Builder, androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.impl.ImageOutputConfig$Builder r1;
        androidx.camera.view.CameraController$OutputSize r2;
        android.util.Size $r3, $r9;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.impl.ImageOutputConfig$Builder;

        r2 := @parameter1: androidx.camera.view.CameraController$OutputSize;

        if r2 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<androidx.camera.view.CameraController$OutputSize: android.util.Size getResolution()>();

        if $r3 == null goto label2;

        $r9 = virtualinvoke r2.<androidx.camera.view.CameraController$OutputSize: android.util.Size getResolution()>();

        interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig$Builder: java.lang.Object setTargetResolution(android.util.Size)>($r9);

        goto label4;

     label2:
        $i0 = virtualinvoke r2.<androidx.camera.view.CameraController$OutputSize: int getAspectRatio()>();

        if $i0 == -1 goto label3;

        $i1 = virtualinvoke r2.<androidx.camera.view.CameraController$OutputSize: int getAspectRatio()>();

        interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig$Builder: java.lang.Object setTargetAspectRatio(int)>($i1);

        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target surface size. ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CameraController", $r7);

     label4:
        return;
    }

    private boolean isOutputSizeEqual(androidx.camera.view.CameraController$OutputSize, androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize r1, r2;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.CameraController$OutputSize;

        r2 := @parameter1: androidx.camera.view.CameraController$OutputSize;

        if r1 != r2 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    void attachPreviewSurface(androidx.camera.core.Preview$SurfaceProvider, androidx.camera.core.ViewPort, android.view.Display)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Preview$SurfaceProvider r1, $r4;
        androidx.camera.core.ViewPort r2;
        android.view.Display r3;
        androidx.camera.core.Preview $r5;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.Preview$SurfaceProvider;

        r2 := @parameter1: androidx.camera.core.ViewPort;

        r3 := @parameter2: android.view.Display;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider>;

        if $r4 == r1 goto label1;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider> = r1;

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        virtualinvoke $r5.<androidx.camera.core.Preview: void setSurfaceProvider(androidx.camera.core.Preview$SurfaceProvider)>(r1);

     label1:
        r0.<androidx.camera.view.CameraController: androidx.camera.core.ViewPort mViewPort> = r2;

        r0.<androidx.camera.view.CameraController: android.view.Display mPreviewDisplay> = r3;

        specialinvoke r0.<androidx.camera.view.CameraController: void startListeningToRotationEvents()>();

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    void clearPreviewSurface()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.lifecycle.ProcessCameraProvider $r1, $r8;
        androidx.camera.core.Preview $r2, $r4;
        java.lang.Object[] $r3;
        androidx.camera.core.ImageCapture $r5;
        androidx.camera.core.ImageAnalysis $r6;
        androidx.camera.core.VideoCapture $r7;
        androidx.camera.core.UseCase[] r9;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        if $r1 == null goto label1;

        $r8 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r3 = newarray (androidx.camera.core.UseCase)[4];

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        $r3[0] = $r4;

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $r3[1] = $r5;

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $r3[2] = $r6;

        $r7 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        $r3[3] = $r7;

        r9 = (androidx.camera.core.UseCase[]) $r3;

        virtualinvoke $r8.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r9);

     label1:
        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        virtualinvoke $r2.<androidx.camera.core.Preview: void setSurfaceProvider(androidx.camera.core.Preview$SurfaceProvider)>(null);

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera> = null;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview$SurfaceProvider mSurfaceProvider> = null;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ViewPort mViewPort> = null;

        r0.<androidx.camera.view.CameraController: android.view.Display mPreviewDisplay> = null;

        specialinvoke r0.<androidx.camera.view.CameraController: void stopListeningToRotationEvents()>();

        return;
    }

    private void startListeningToRotationEvents()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.RotationProvider $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        androidx.camera.view.RotationProvider$Listener $r3;

        r0 := @this: androidx.camera.view.CameraController;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider mRotationProvider>;

        $r2 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider$Listener mDeviceRotationListener>;

        virtualinvoke $r1.<androidx.camera.view.RotationProvider: boolean addListener(java.util.concurrent.Executor,androidx.camera.view.RotationProvider$Listener)>($r2, $r3);

        return;
    }

    private void stopListeningToRotationEvents()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.RotationProvider$Listener $r1;
        androidx.camera.view.RotationProvider $r2;

        r0 := @this: androidx.camera.view.CameraController;

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider mRotationProvider>;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.RotationProvider$Listener mDeviceRotationListener>;

        virtualinvoke $r2.<androidx.camera.view.RotationProvider: void removeListener(androidx.camera.view.RotationProvider$Listener)>($r1);

        return;
    }

    public void setPreviewTargetSize(androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.CameraController$OutputSize;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mPreviewTargetSize>;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isOutputSizeEqual(androidx.camera.view.CameraController$OutputSize,androidx.camera.view.CameraController$OutputSize)>($r2, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mPreviewTargetSize> = r1;

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindPreviewAndRecreate()>();

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public androidx.camera.view.CameraController$OutputSize getPreviewTargetSize()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mPreviewTargetSize>;

        return $r1;
    }

    private void unbindPreviewAndRecreate()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Preview$Builder r1, r8;
        boolean $z0;
        androidx.camera.view.CameraController$OutputSize $r3;
        androidx.camera.core.Preview $r4, $r6;
        java.lang.Object[] $r5;
        androidx.camera.lifecycle.ProcessCameraProvider $r7;
        androidx.camera.core.UseCase[] r9;

        r0 := @this: androidx.camera.view.CameraController;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r5 = newarray (androidx.camera.core.UseCase)[1];

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        $r5[0] = $r6;

        r9 = (androidx.camera.core.UseCase[]) $r5;

        virtualinvoke $r7.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r9);

     label1:
        r8 = new androidx.camera.core.Preview$Builder;

        specialinvoke r8.<androidx.camera.core.Preview$Builder: void <init>()>();

        r1 = r8;

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mPreviewTargetSize>;

        specialinvoke r0.<androidx.camera.view.CameraController: void setTargetOutputSize(androidx.camera.core.impl.ImageOutputConfig$Builder,androidx.camera.view.CameraController$OutputSize)>(r1, $r3);

        $r4 = virtualinvoke r1.<androidx.camera.core.Preview$Builder: androidx.camera.core.Preview build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview> = $r4;

        return;
    }

    public boolean isImageCaptureEnabled()
    {
        androidx.camera.view.CameraController r0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isUseCaseEnabled(int)>(1);

        return $z0;
    }

    public int getImageCaptureFlashMode()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageCapture $r1;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.ImageCapture: int getFlashMode()>();

        return $i0;
    }

    public void setImageCaptureFlashMode(int)
    {
        androidx.camera.view.CameraController r0;
        int i0;
        androidx.camera.core.ImageCapture $r1;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        virtualinvoke $r1.<androidx.camera.core.ImageCapture: void setFlashMode(int)>(i0);

        return;
    }

    public void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions, java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageCapture$OutputFileOptions r1;
        java.util.concurrent.Executor r2;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r3;
        boolean $z0, $z1;
        androidx.camera.core.ImageCapture $r4;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Camera not initialized.");

        $z1 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isImageCaptureEnabled()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "ImageCapture disabled.");

        virtualinvoke r0.<androidx.camera.view.CameraController: void updateMirroringFlagInOutputFileOptions(androidx.camera.core.ImageCapture$OutputFileOptions)>(r1);

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        virtualinvoke $r4.<androidx.camera.core.ImageCapture: void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r1, r2, r3);

        return;
    }

    void updateMirroringFlagInOutputFileOptions(androidx.camera.core.ImageCapture$OutputFileOptions)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageCapture$OutputFileOptions r1;
        androidx.camera.core.CameraSelector $r2, $r6;
        java.lang.Integer $r3, $r7;
        androidx.camera.core.ImageCapture$Metadata $r4, $r5;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>;

        $r3 = virtualinvoke $r2.<androidx.camera.core.CameraSelector: java.lang.Integer getLensFacing()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke r1.<androidx.camera.core.ImageCapture$OutputFileOptions: androidx.camera.core.ImageCapture$Metadata getMetadata()>();

        $z0 = virtualinvoke $r4.<androidx.camera.core.ImageCapture$Metadata: boolean isReversedHorizontalSet()>();

        if $z0 != 0 goto label3;

        $r5 = virtualinvoke r1.<androidx.camera.core.ImageCapture$OutputFileOptions: androidx.camera.core.ImageCapture$Metadata getMetadata()>();

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>;

        $r7 = virtualinvoke $r6.<androidx.camera.core.CameraSelector: java.lang.Integer getLensFacing()>();

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke $r5.<androidx.camera.core.ImageCapture$Metadata: void setReversedHorizontal(boolean)>($z1);

     label3:
        return;
    }

    public void takePicture(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;
        boolean $z0, $z1;
        androidx.camera.core.ImageCapture $r3;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Camera not initialized.");

        $z1 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isImageCaptureEnabled()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "ImageCapture disabled.");

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        virtualinvoke $r3.<androidx.camera.core.ImageCapture: void takePicture(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>(r1, r2);

        return;
    }

    public void setImageCaptureMode(int)
    {
        androidx.camera.view.CameraController r0;
        int i0, $i1;
        androidx.camera.core.ImageCapture $r1;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $i1 = virtualinvoke $r1.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        if $i1 != i0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageCaptureAndRecreate(int)>(i0);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public int getImageCaptureMode()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageCapture $r1;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        return $i0;
    }

    public void setImageCaptureTargetSize(androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize r1, $r2;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.CameraController$OutputSize;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageCaptureTargetSize>;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isOutputSizeEqual(androidx.camera.view.CameraController$OutputSize,androidx.camera.view.CameraController$OutputSize)>($r2, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageCaptureTargetSize> = r1;

        $i0 = virtualinvoke r0.<androidx.camera.view.CameraController: int getImageCaptureMode()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageCaptureAndRecreate(int)>($i0);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public androidx.camera.view.CameraController$OutputSize getImageCaptureTargetSize()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageCaptureTargetSize>;

        return $r1;
    }

    public void setImageCaptureIoExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor r1, $r2;
        androidx.camera.core.ImageCapture $r3;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor>;

        if $r2 != r1 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor> = r1;

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $i0 = virtualinvoke $r3.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageCaptureAndRecreate(int)>($i0);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public java.util.concurrent.Executor getImageCaptureIoExecutor()
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor>;

        return $r1;
    }

    private void unbindImageCaptureAndRecreate(int)
    {
        androidx.camera.view.CameraController r0;
        int i0;
        androidx.camera.core.ImageCapture$Builder r1, r11;
        boolean $z0;
        androidx.camera.view.CameraController$OutputSize $r3;
        java.util.concurrent.Executor $r4, $r6;
        androidx.camera.core.ImageCapture $r5, $r9;
        java.lang.Object[] $r8;
        androidx.camera.lifecycle.ProcessCameraProvider $r10;
        androidx.camera.core.UseCase[] r12;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r8 = newarray (androidx.camera.core.UseCase)[1];

        $r9 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $r8[0] = $r9;

        r12 = (androidx.camera.core.UseCase[]) $r8;

        virtualinvoke $r10.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r12);

     label1:
        r11 = new androidx.camera.core.ImageCapture$Builder;

        specialinvoke r11.<androidx.camera.core.ImageCapture$Builder: void <init>()>();

        r1 = virtualinvoke r11.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setCaptureMode(int)>(i0);

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageCaptureTargetSize>;

        specialinvoke r0.<androidx.camera.view.CameraController: void setTargetOutputSize(androidx.camera.core.impl.ImageOutputConfig$Builder,androidx.camera.view.CameraController$OutputSize)>(r1, $r3);

        $r4 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor>;

        if $r4 == null goto label2;

        $r6 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mImageCaptureIoExecutor>;

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setIoExecutor(java.util.concurrent.Executor)>($r6);

     label2:
        $r5 = virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture> = $r5;

        return;
    }

    public boolean isImageAnalysisEnabled()
    {
        androidx.camera.view.CameraController r0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isUseCaseEnabled(int)>(2);

        return $z0;
    }

    public void setImageAnalysisAnalyzer(java.util.concurrent.Executor, androidx.camera.core.ImageAnalysis$Analyzer)
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor r1, $r6;
        androidx.camera.core.ImageAnalysis$Analyzer r2, r3, $r4;
        androidx.camera.core.ImageAnalysis $r5;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageAnalysis$Analyzer;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        if $r4 != r2 goto label1;

        $r6 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor>;

        if $r6 != r1 goto label1;

        return;

     label1:
        r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor> = r1;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer> = r2;

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        virtualinvoke $r5.<androidx.camera.core.ImageAnalysis: void setAnalyzer(java.util.concurrent.Executor,androidx.camera.core.ImageAnalysis$Analyzer)>(r1, r2);

        specialinvoke r0.<androidx.camera.view.CameraController: void restartCameraIfAnalyzerResolutionChanged(androidx.camera.core.ImageAnalysis$Analyzer,androidx.camera.core.ImageAnalysis$Analyzer)>(r3, r2);

        return;
    }

    public void clearImageAnalysisAnalyzer()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageAnalysis$Analyzer r1;
        androidx.camera.core.ImageAnalysis $r2;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor> = null;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer> = null;

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        virtualinvoke $r2.<androidx.camera.core.ImageAnalysis: void clearAnalyzer()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void restartCameraIfAnalyzerResolutionChanged(androidx.camera.core.ImageAnalysis$Analyzer,androidx.camera.core.ImageAnalysis$Analyzer)>(r1, null);

        return;
    }

    private void restartCameraIfAnalyzerResolutionChanged(androidx.camera.core.ImageAnalysis$Analyzer, androidx.camera.core.ImageAnalysis$Analyzer)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageAnalysis$Analyzer r1, r2;
        android.util.Size r3, r4, $r7, $r8;
        boolean $z0;
        androidx.camera.core.ImageAnalysis $r5, $r6;
        int $i0, $i1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.ImageAnalysis$Analyzer;

        r2 := @parameter1: androidx.camera.core.ImageAnalysis$Analyzer;

        if r1 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = interfaceinvoke r1.<androidx.camera.core.ImageAnalysis$Analyzer: android.util.Size getDefaultTargetResolution()>();

     label2:
        r3 = $r7;

        if r2 != null goto label3;

        $r8 = null;

        goto label4;

     label3:
        $r8 = interfaceinvoke r2.<androidx.camera.core.ImageAnalysis$Analyzer: android.util.Size getDefaultTargetResolution()>();

     label4:
        r4 = $r8;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r3, r4);

        if $z0 != 0 goto label5;

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i0 = virtualinvoke $r5.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i1 = virtualinvoke $r6.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageAnalysisAndRecreate(int,int)>($i0, $i1);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

     label5:
        return;
    }

    public int getImageAnalysisBackpressureStrategy()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageAnalysis $r1;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        return $i0;
    }

    public void setImageAnalysisBackpressureStrategy(int)
    {
        androidx.camera.view.CameraController r0;
        int i0, $i1, $i2;
        androidx.camera.core.ImageAnalysis $r1, $r2;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i1 = virtualinvoke $r1.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        if $i1 != i0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i2 = virtualinvoke $r2.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageAnalysisAndRecreate(int,int)>(i0, $i2);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public void setImageAnalysisImageQueueDepth(int)
    {
        androidx.camera.view.CameraController r0;
        int i0, $i1, $i2;
        androidx.camera.core.ImageAnalysis $r1, $r2;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i1 = virtualinvoke $r1.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        if $i1 != i0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i2 = virtualinvoke $r2.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageAnalysisAndRecreate(int,int)>($i2, i0);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public int getImageAnalysisImageQueueDepth()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.ImageAnalysis $r1;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        return $i0;
    }

    public void setImageAnalysisTargetSize(androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize r1, $r2;
        boolean $z0;
        androidx.camera.core.ImageAnalysis $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.CameraController$OutputSize;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageAnalysisTargetSize>;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isOutputSizeEqual(androidx.camera.view.CameraController$OutputSize,androidx.camera.view.CameraController$OutputSize)>($r2, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageAnalysisTargetSize> = r1;

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i0 = virtualinvoke $r3.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i1 = virtualinvoke $r4.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageAnalysisAndRecreate(int,int)>($i0, $i1);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public androidx.camera.view.CameraController$OutputSize getImageAnalysisTargetSize()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageAnalysisTargetSize>;

        return $r1;
    }

    public void setImageAnalysisBackgroundExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor r1, $r2;
        androidx.camera.core.ImageAnalysis $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor>;

        if $r2 != r1 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor> = r1;

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i0 = virtualinvoke $r3.<androidx.camera.core.ImageAnalysis: int getBackpressureStrategy()>();

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $i1 = virtualinvoke $r4.<androidx.camera.core.ImageAnalysis: int getImageQueueDepth()>();

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindImageAnalysisAndRecreate(int,int)>($i0, $i1);

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public java.util.concurrent.Executor getImageAnalysisBackgroundExecutor()
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor>;

        return $r1;
    }

    private void unbindImageAnalysisAndRecreate(int, int)
    {
        androidx.camera.view.CameraController r0;
        int i0, i1;
        androidx.camera.core.ImageAnalysis$Builder r1, $r3, r17;
        boolean $z0;
        androidx.camera.view.CameraController$OutputSize $r4;
        java.util.concurrent.Executor $r5, $r7, $r10, $r12;
        androidx.camera.core.ImageAnalysis $r6, $r11, $r15;
        androidx.camera.core.ImageAnalysis$Analyzer $r8, $r9;
        java.lang.Object[] $r14;
        androidx.camera.lifecycle.ProcessCameraProvider $r16;
        androidx.camera.core.UseCase[] r18;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        if $z0 == 0 goto label1;

        $r16 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r14 = newarray (androidx.camera.core.UseCase)[1];

        $r15 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $r14[0] = $r15;

        r18 = (androidx.camera.core.UseCase[]) $r14;

        virtualinvoke $r16.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r18);

     label1:
        r17 = new androidx.camera.core.ImageAnalysis$Builder;

        specialinvoke r17.<androidx.camera.core.ImageAnalysis$Builder: void <init>()>();

        $r3 = virtualinvoke r17.<androidx.camera.core.ImageAnalysis$Builder: androidx.camera.core.ImageAnalysis$Builder setBackpressureStrategy(int)>(i0);

        r1 = virtualinvoke $r3.<androidx.camera.core.ImageAnalysis$Builder: androidx.camera.core.ImageAnalysis$Builder setImageQueueDepth(int)>(i1);

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mImageAnalysisTargetSize>;

        specialinvoke r0.<androidx.camera.view.CameraController: void setTargetOutputSize(androidx.camera.core.impl.ImageOutputConfig$Builder,androidx.camera.view.CameraController$OutputSize)>(r1, $r4);

        $r5 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor>;

        if $r5 == null goto label2;

        $r12 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisBackgroundExecutor>;

        virtualinvoke r1.<androidx.camera.core.ImageAnalysis$Builder: androidx.camera.core.ImageAnalysis$Builder setBackgroundExecutor(java.util.concurrent.Executor)>($r12);

     label2:
        $r6 = virtualinvoke r1.<androidx.camera.core.ImageAnalysis$Builder: androidx.camera.core.ImageAnalysis build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis> = $r6;

        $r7 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor>;

        if $r7 == null goto label3;

        $r8 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        if $r8 == null goto label3;

        $r11 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $r10 = r0.<androidx.camera.view.CameraController: java.util.concurrent.Executor mAnalysisExecutor>;

        $r9 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        virtualinvoke $r11.<androidx.camera.core.ImageAnalysis: void setAnalyzer(java.util.concurrent.Executor,androidx.camera.core.ImageAnalysis$Analyzer)>($r10, $r9);

     label3:
        return;
    }

    void updatePreviewViewTransform(androidx.camera.view.transform.OutputTransform)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.transform.OutputTransform r1;
        androidx.camera.core.ImageAnalysis$Analyzer $r2, $r3, $r4, $r6;
        int $i0;
        android.graphics.Matrix $r5;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.transform.OutputTransform;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        if $r2 != null goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        interfaceinvoke $r6.<androidx.camera.core.ImageAnalysis$Analyzer: void updateTransform(android.graphics.Matrix)>(null);

        goto label3;

     label2:
        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        $i0 = interfaceinvoke $r3.<androidx.camera.core.ImageAnalysis$Analyzer: int getTargetCoordinateSystem()>();

        if $i0 != 1 goto label3;

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis$Analyzer mAnalysisAnalyzer>;

        $r5 = virtualinvoke r1.<androidx.camera.view.transform.OutputTransform: android.graphics.Matrix getMatrix()>();

        interfaceinvoke $r4.<androidx.camera.core.ImageAnalysis$Analyzer: void updateTransform(android.graphics.Matrix)>($r5);

     label3:
        return;
    }

    public boolean isVideoCaptureEnabled()
    {
        androidx.camera.view.CameraController r0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isUseCaseEnabled(int)>(4);

        return $z0;
    }

    public void startRecording(androidx.camera.view.video.OutputFileOptions, java.util.concurrent.Executor, androidx.camera.view.video.OnVideoSavedCallback)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.video.OutputFileOptions r1;
        java.util.concurrent.Executor r2;
        androidx.camera.view.video.OnVideoSavedCallback r3;
        boolean $z0, $z1;
        androidx.camera.core.VideoCapture $r4;
        androidx.camera.core.VideoCapture$OutputFileOptions $r5;
        androidx.camera.view.CameraController$1 $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.video.OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.view.video.OnVideoSavedCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Camera not initialized.");

        $z1 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isVideoCaptureEnabled()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "VideoCapture disabled.");

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        $r5 = virtualinvoke r1.<androidx.camera.view.video.OutputFileOptions: androidx.camera.core.VideoCapture$OutputFileOptions toVideoCaptureOutputFileOptions()>();

        $r6 = new androidx.camera.view.CameraController$1;

        specialinvoke $r6.<androidx.camera.view.CameraController$1: void <init>(androidx.camera.view.CameraController,androidx.camera.view.video.OnVideoSavedCallback)>(r0, r3);

        virtualinvoke $r4.<androidx.camera.core.VideoCapture: void startRecording(androidx.camera.core.VideoCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedCallback)>($r5, r2, $r6);

        $r7 = r0.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public void stopRecording()
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.camera.core.VideoCapture $r2;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        virtualinvoke $r2.<androidx.camera.core.VideoCapture: void stopRecording()>();

     label1:
        return;
    }

    public boolean isRecording()
    {
        androidx.camera.view.CameraController r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void setVideoCaptureTargetSize(androidx.camera.view.CameraController$OutputSize)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.view.CameraController$OutputSize;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mVideoCaptureOutputSize>;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isOutputSizeEqual(androidx.camera.view.CameraController$OutputSize,androidx.camera.view.CameraController$OutputSize)>($r2, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mVideoCaptureOutputSize> = r1;

        specialinvoke r0.<androidx.camera.view.CameraController: void unbindVideoAndRecreate()>();

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    public androidx.camera.view.CameraController$OutputSize getVideoCaptureTargetSize()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.CameraController$OutputSize $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mVideoCaptureOutputSize>;

        return $r1;
    }

    private void unbindVideoAndRecreate()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.VideoCapture$Builder r1, r8;
        boolean $z0;
        androidx.camera.view.CameraController$OutputSize $r3;
        androidx.camera.core.VideoCapture $r4, $r6;
        java.lang.Object[] $r5;
        androidx.camera.lifecycle.ProcessCameraProvider $r7;
        androidx.camera.core.UseCase[] r9;

        r0 := @this: androidx.camera.view.CameraController;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r5 = newarray (androidx.camera.core.UseCase)[1];

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        $r5[0] = $r6;

        r9 = (androidx.camera.core.UseCase[]) $r5;

        virtualinvoke $r7.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r9);

     label1:
        r8 = new androidx.camera.core.VideoCapture$Builder;

        specialinvoke r8.<androidx.camera.core.VideoCapture$Builder: void <init>()>();

        r1 = r8;

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.view.CameraController$OutputSize mVideoCaptureOutputSize>;

        specialinvoke r0.<androidx.camera.view.CameraController: void setTargetOutputSize(androidx.camera.core.impl.ImageOutputConfig$Builder,androidx.camera.view.CameraController$OutputSize)>(r1, $r3);

        $r4 = virtualinvoke r1.<androidx.camera.core.VideoCapture$Builder: androidx.camera.core.VideoCapture build()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture> = $r4;

        return;
    }

    public void setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.CameraSelector r1, r2, $r3;
        androidx.camera.lifecycle.ProcessCameraProvider $r4, $r10;
        java.lang.Object[] $r5;
        androidx.camera.core.Preview $r6;
        androidx.camera.core.ImageCapture $r7;
        androidx.camera.core.ImageAnalysis $r8;
        androidx.camera.core.VideoCapture $r9;
        java.lang.Runnable $r11;
        androidx.camera.core.UseCase[] r12;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>;

        if $r3 != r1 goto label1;

        return;

     label1:
        r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector> = r1;

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        if $r4 != null goto label2;

        return;

     label2:
        $r10 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r5 = newarray (androidx.camera.core.UseCase)[4];

        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        $r5[0] = $r6;

        $r7 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $r5[1] = $r7;

        $r8 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $r5[2] = $r8;

        $r9 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        $r5[3] = $r9;

        r12 = (androidx.camera.core.UseCase[]) $r5;

        virtualinvoke $r10.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r12);

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.view.CameraController,androidx.camera.core.CameraSelector)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.CameraController: void lambda$setCameraSelector$3(androidx.camera.core.CameraSelector)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates(java.lang.Runnable)>($r11);

        return;
    }

    public boolean hasCamera(androidx.camera.core.CameraSelector)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.CameraSelector r1;
        java.lang.Throwable r2, $r7;
        androidx.camera.lifecycle.ProcessCameraProvider $r4, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        if $r4 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camera not initialized. Please wait for the initialization future to finish. See #getInitializationFuture().");

        throw $r6;

     label1:
        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $z0 = virtualinvoke $r5.<androidx.camera.lifecycle.ProcessCameraProvider: boolean hasCamera(androidx.camera.core.CameraSelector)>(r1);

     label2:
        return $z0;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraController", "Failed to check camera availability", r2);

        return 0;

        catch androidx.camera.core.CameraInfoUnavailableException from label1 to label2 with label3;
    }

    public androidx.camera.core.CameraSelector getCameraSelector()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.CameraSelector $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector>;

        return $r1;
    }

    public boolean isPinchToZoomEnabled()
    {
        androidx.camera.view.CameraController r0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.view.CameraController: boolean mPinchToZoomEnabled>;

        return $z0;
    }

    public void setPinchToZoomEnabled(boolean)
    {
        androidx.camera.view.CameraController r0;
        boolean z0;

        r0 := @this: androidx.camera.view.CameraController;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r0.<androidx.camera.view.CameraController: boolean mPinchToZoomEnabled> = z0;

        return;
    }

    void onPinchToZoom(float)
    {
        androidx.camera.view.CameraController r0;
        float f0, $f1, $f2, $f3, $f4, $f5, f6, f7;
        androidx.camera.core.ZoomState r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.lifecycle.LiveData $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.view.CameraController;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        return;

     label1:
        $z1 = r0.<androidx.camera.view.CameraController: boolean mPinchToZoomEnabled>;

        if $z1 != 0 goto label2;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "Pinch to zoom disabled.");

        return;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pinch to zoom with scale: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", $r5);

        $r6 = virtualinvoke r0.<androidx.camera.view.CameraController: androidx.lifecycle.LiveData getZoomState()>();

        $r7 = virtualinvoke $r6.<androidx.lifecycle.LiveData: java.lang.Object getValue()>();

        r1 = (androidx.camera.core.ZoomState) $r7;

        if r1 != null goto label3;

        return;

     label3:
        $f1 = interfaceinvoke r1.<androidx.camera.core.ZoomState: float getZoomRatio()>();

        $f2 = specialinvoke r0.<androidx.camera.view.CameraController: float speedUpZoomBy2X(float)>(f0);

        f6 = $f1 * $f2;

        $f3 = interfaceinvoke r1.<androidx.camera.core.ZoomState: float getMinZoomRatio()>();

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(f6, $f3);

        $f5 = interfaceinvoke r1.<androidx.camera.core.ZoomState: float getMaxZoomRatio()>();

        f7 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f5);

        virtualinvoke r0.<androidx.camera.view.CameraController: com.google.common.util.concurrent.ListenableFuture setZoomRatio(float)>(f7);

        return;
    }

    private float speedUpZoomBy2X(float)
    {
        androidx.camera.view.CameraController r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b0;

        r0 := @this: androidx.camera.view.CameraController;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 1.0F;

        if $b0 <= 0 goto label1;

        $f4 = f0 - 1.0F;

        $f5 = $f4 * 2.0F;

        $f6 = 1.0F + $f5;

        return $f6;

     label1:
        $f1 = 1.0F - f0;

        $f2 = $f1 * 2.0F;

        $f3 = 1.0F - $f2;

        return $f3;
    }

    void onTapToFocus(androidx.camera.core.MeteringPointFactory, float, float)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.MeteringPointFactory r1;
        float f0, f1;
        androidx.camera.core.MeteringPoint r2, r3;
        androidx.camera.core.FocusMeteringAction r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        androidx.lifecycle.MutableLiveData $r11;
        java.lang.Integer $r12;
        androidx.camera.core.FocusMeteringAction$Builder $r13, $r14;
        androidx.camera.core.Camera $r15;
        androidx.camera.core.CameraControl $r16;
        com.google.common.util.concurrent.ListenableFuture $r17;
        androidx.camera.view.CameraController$2 $r18;
        java.util.concurrent.Executor $r19;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.MeteringPointFactory;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        return;

     label1:
        $z1 = r0.<androidx.camera.view.CameraController: boolean mTapToFocusEnabled>;

        if $z1 != 0 goto label2;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "Tap to focus disabled. ");

        return;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tap to focus started: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", $r10);

        $r11 = r0.<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r11.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>($r12);

        r2 = virtualinvoke r1.<androidx.camera.core.MeteringPointFactory: androidx.camera.core.MeteringPoint createPoint(float,float,float)>(f0, f1, 0.16666667F);

        r3 = virtualinvoke r1.<androidx.camera.core.MeteringPointFactory: androidx.camera.core.MeteringPoint createPoint(float,float,float)>(f0, f1, 0.25F);

        $r13 = new androidx.camera.core.FocusMeteringAction$Builder;

        specialinvoke $r13.<androidx.camera.core.FocusMeteringAction$Builder: void <init>(androidx.camera.core.MeteringPoint,int)>(r2, 1);

        $r14 = virtualinvoke $r13.<androidx.camera.core.FocusMeteringAction$Builder: androidx.camera.core.FocusMeteringAction$Builder addPoint(androidx.camera.core.MeteringPoint,int)>(r3, 2);

        r4 = virtualinvoke $r14.<androidx.camera.core.FocusMeteringAction$Builder: androidx.camera.core.FocusMeteringAction build()>();

        $r15 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r16 = interfaceinvoke $r15.<androidx.camera.core.Camera: androidx.camera.core.CameraControl getCameraControl()>();

        $r17 = interfaceinvoke $r16.<androidx.camera.core.CameraControl: com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction)>(r4);

        $r18 = new androidx.camera.view.CameraController$2;

        specialinvoke $r18.<androidx.camera.view.CameraController$2: void <init>(androidx.camera.view.CameraController)>(r0);

        $r19 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r17, $r18, $r19);

        return;
    }

    public boolean isTapToFocusEnabled()
    {
        androidx.camera.view.CameraController r0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.view.CameraController: boolean mTapToFocusEnabled>;

        return $z0;
    }

    public void setTapToFocusEnabled(boolean)
    {
        androidx.camera.view.CameraController r0;
        boolean z0;

        r0 := @this: androidx.camera.view.CameraController;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r0.<androidx.camera.view.CameraController: boolean mTapToFocusEnabled> = z0;

        return;
    }

    public androidx.lifecycle.LiveData getTapToFocusState()
    {
        androidx.camera.view.CameraController r0;
        androidx.lifecycle.MutableLiveData $r1;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState>;

        return $r1;
    }

    public androidx.lifecycle.LiveData getZoomState()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.ForwardingLiveData $r1;
        androidx.lifecycle.LiveData r2;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mZoomState>;

        r2 = (androidx.lifecycle.LiveData) $r1;

        return r2;
    }

    public androidx.camera.core.CameraInfo getCameraInfo()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Camera $r1, $r2;
        androidx.camera.core.CameraInfo $r3;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r3 = interfaceinvoke $r2.<androidx.camera.core.Camera: androidx.camera.core.CameraInfo getCameraInfo()>();

     label2:
        return $r3;
    }

    public androidx.camera.core.CameraControl getCameraControl()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.Camera $r1, $r2;
        androidx.camera.core.CameraControl $r3;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r3 = interfaceinvoke $r2.<androidx.camera.core.Camera: androidx.camera.core.CameraControl getCameraControl()>();

     label2:
        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture setZoomRatio(float)
    {
        androidx.camera.view.CameraController r0;
        float f0;
        boolean $z0;
        androidx.camera.core.Camera $r1;
        androidx.camera.core.CameraControl $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;

        r0 := @this: androidx.camera.view.CameraController;

        f0 := @parameter0: float;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r4;

     label1:
        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r2 = interfaceinvoke $r1.<androidx.camera.core.Camera: androidx.camera.core.CameraControl getCameraControl()>();

        $r3 = interfaceinvoke $r2.<androidx.camera.core.CameraControl: com.google.common.util.concurrent.ListenableFuture setZoomRatio(float)>(f0);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture setLinearZoom(float)
    {
        androidx.camera.view.CameraController r0;
        float f0;
        boolean $z0;
        androidx.camera.core.Camera $r1;
        androidx.camera.core.CameraControl $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;

        r0 := @this: androidx.camera.view.CameraController;

        f0 := @parameter0: float;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r4;

     label1:
        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r2 = interfaceinvoke $r1.<androidx.camera.core.Camera: androidx.camera.core.CameraControl getCameraControl()>();

        $r3 = interfaceinvoke $r2.<androidx.camera.core.CameraControl: com.google.common.util.concurrent.ListenableFuture setLinearZoom(float)>(f0);

        return $r3;
    }

    public androidx.lifecycle.LiveData getTorchState()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.view.ForwardingLiveData $r1;
        androidx.lifecycle.LiveData r2;

        r0 := @this: androidx.camera.view.CameraController;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mTorchState>;

        r2 = (androidx.lifecycle.LiveData) $r1;

        return r2;
    }

    public com.google.common.util.concurrent.ListenableFuture enableTorch(boolean)
    {
        androidx.camera.view.CameraController r0;
        boolean z0, $z1;
        androidx.camera.core.Camera $r1;
        androidx.camera.core.CameraControl $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;

        r0 := @this: androidx.camera.view.CameraController;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z1 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z1 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r4;

     label1:
        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r2 = interfaceinvoke $r1.<androidx.camera.core.Camera: androidx.camera.core.CameraControl getCameraControl()>();

        $r3 = interfaceinvoke $r2.<androidx.camera.core.CameraControl: com.google.common.util.concurrent.ListenableFuture enableTorch(boolean)>(z0);

        return $r3;
    }

    public void setEffects(java.util.List)
    {
        androidx.camera.view.CameraController r0;
        java.util.List r1, $r2;
        boolean $z0;
        androidx.camera.lifecycle.ProcessCameraProvider $r3, $r4;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.camera.view.CameraController: java.util.List mEffects>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        virtualinvoke $r4.<androidx.camera.lifecycle.ProcessCameraProvider: void unbindAll()>();

     label2:
        r0.<androidx.camera.view.CameraController: java.util.List mEffects> = r1;

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return;
    }

    void startCameraAndTrackStates()
    {
        androidx.camera.view.CameraController r0;

        r0 := @this: androidx.camera.view.CameraController;

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates(java.lang.Runnable)>(null);

        return;
    }

    void startCameraAndTrackStates(java.lang.Runnable)
    {
        androidx.camera.view.CameraController r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2, $r13;
        java.lang.String r3;
        androidx.camera.core.Camera $r4, $r5, $r9;
        boolean $z0;
        androidx.camera.view.ForwardingLiveData $r6, $r10;
        androidx.camera.core.CameraInfo $r7, $r11;
        androidx.lifecycle.LiveData $r8, $r12;
        java.lang.IllegalStateException $r14;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: java.lang.Runnable;

     label1:
        $r4 = virtualinvoke r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera startCamera()>();

        r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera> = $r4;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        r2 = $r13;

        if r1 == null goto label4;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label4:
        r3 = "The selected camera does not support the enabled use cases. Please disable use case and/or select a different camera. e.g. #setVideoCaptureEnabled(false)";

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r2);

        throw $r14;

     label5:
        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraAttached()>();

        if $z0 != 0 goto label6;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "Use cases not attached to camera.");

        return;

     label6:
        $r6 = r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mZoomState>;

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r7 = interfaceinvoke $r5.<androidx.camera.core.Camera: androidx.camera.core.CameraInfo getCameraInfo()>();

        $r8 = interfaceinvoke $r7.<androidx.camera.core.CameraInfo: androidx.lifecycle.LiveData getZoomState()>();

        virtualinvoke $r6.<androidx.camera.view.ForwardingLiveData: void setSource(androidx.lifecycle.LiveData)>($r8);

        $r10 = r0.<androidx.camera.view.CameraController: androidx.camera.view.ForwardingLiveData mTorchState>;

        $r9 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Camera mCamera>;

        $r11 = interfaceinvoke $r9.<androidx.camera.core.Camera: androidx.camera.core.CameraInfo getCameraInfo()>();

        $r12 = interfaceinvoke $r11.<androidx.camera.core.CameraInfo: androidx.lifecycle.LiveData getTorchState()>();

        virtualinvoke $r10.<androidx.camera.view.ForwardingLiveData: void setSource(androidx.lifecycle.LiveData)>($r12);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected androidx.camera.core.UseCaseGroup createUseCaseGroup()
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.UseCaseGroup$Builder r1, r27;
        java.util.Iterator r2;
        androidx.camera.core.CameraEffect r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.camera.core.Preview $r5;
        java.lang.Object[] $r6, $r9, $r12;
        androidx.camera.core.ImageCapture $r7, $r25;
        androidx.camera.lifecycle.ProcessCameraProvider $r8, $r11, $r14;
        androidx.camera.core.ImageAnalysis $r10, $r23;
        androidx.camera.core.VideoCapture $r13, $r21;
        androidx.camera.core.ViewPort $r15;
        java.util.List $r17;
        androidx.camera.core.UseCaseGroup $r18;
        java.lang.Object $r19;
        androidx.camera.core.UseCase[] r28, r29, r30;

        r0 := @this: androidx.camera.view.CameraController;

        $z0 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isCameraInitialized()>();

        if $z0 != 0 goto label01;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "Camera not initialized.");

        return null;

     label01:
        $z1 = specialinvoke r0.<androidx.camera.view.CameraController: boolean isPreviewViewAttached()>();

        if $z1 != 0 goto label02;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "PreviewView not attached to CameraController.");

        return null;

     label02:
        r27 = new androidx.camera.core.UseCaseGroup$Builder;

        specialinvoke r27.<androidx.camera.core.UseCaseGroup$Builder: void <init>()>();

        $r5 = r0.<androidx.camera.view.CameraController: androidx.camera.core.Preview mPreview>;

        r1 = virtualinvoke r27.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder addUseCase(androidx.camera.core.UseCase)>($r5);

        $z2 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isImageCaptureEnabled()>();

        if $z2 == 0 goto label03;

        $r25 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder addUseCase(androidx.camera.core.UseCase)>($r25);

        goto label04;

     label03:
        $r8 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r6 = newarray (androidx.camera.core.UseCase)[1];

        $r7 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        $r6[0] = $r7;

        r28 = (androidx.camera.core.UseCase[]) $r6;

        virtualinvoke $r8.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r28);

     label04:
        $z3 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isImageAnalysisEnabled()>();

        if $z3 == 0 goto label05;

        $r23 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder addUseCase(androidx.camera.core.UseCase)>($r23);

        goto label06;

     label05:
        $r11 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r9 = newarray (androidx.camera.core.UseCase)[1];

        $r10 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        $r9[0] = $r10;

        r29 = (androidx.camera.core.UseCase[]) $r9;

        virtualinvoke $r11.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r29);

     label06:
        $z4 = virtualinvoke r0.<androidx.camera.view.CameraController: boolean isVideoCaptureEnabled()>();

        if $z4 == 0 goto label07;

        $r21 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder addUseCase(androidx.camera.core.UseCase)>($r21);

        goto label08;

     label07:
        $r14 = r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider>;

        $r12 = newarray (androidx.camera.core.UseCase)[1];

        $r13 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        $r12[0] = $r13;

        r30 = (androidx.camera.core.UseCase[]) $r12;

        virtualinvoke $r14.<androidx.camera.lifecycle.ProcessCameraProvider: void unbind(androidx.camera.core.UseCase[])>(r30);

     label08:
        $r15 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ViewPort mViewPort>;

        virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder setViewPort(androidx.camera.core.ViewPort)>($r15);

        $r17 = r0.<androidx.camera.view.CameraController: java.util.List mEffects>;

        r2 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r19 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.CameraEffect) $r19;

        virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup$Builder addEffect(androidx.camera.core.CameraEffect)>(r3);

        goto label09;

     label10:
        $r18 = virtualinvoke r1.<androidx.camera.core.UseCaseGroup$Builder: androidx.camera.core.UseCaseGroup build()>();

        return $r18;
    }

    private void lambda$setCameraSelector$3(androidx.camera.core.CameraSelector)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.core.CameraSelector r1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        r0.<androidx.camera.view.CameraController: androidx.camera.core.CameraSelector mCameraSelector> = r1;

        return;
    }

    private void lambda$setEnabledUseCases$2(int)
    {
        androidx.camera.view.CameraController r0;
        int i0;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        r0.<androidx.camera.view.CameraController: int mEnabledUseCases> = i0;

        return;
    }

    private void lambda$new$1(int)
    {
        androidx.camera.view.CameraController r0;
        int i0;
        androidx.camera.core.ImageAnalysis $r1;
        androidx.camera.core.ImageCapture $r2;
        androidx.camera.core.VideoCapture $r3;

        r0 := @this: androidx.camera.view.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageAnalysis mImageAnalysis>;

        virtualinvoke $r1.<androidx.camera.core.ImageAnalysis: void setTargetRotation(int)>(i0);

        $r2 = r0.<androidx.camera.view.CameraController: androidx.camera.core.ImageCapture mImageCapture>;

        virtualinvoke $r2.<androidx.camera.core.ImageCapture: void setTargetRotation(int)>(i0);

        $r3 = r0.<androidx.camera.view.CameraController: androidx.camera.core.VideoCapture mVideoCapture>;

        virtualinvoke $r3.<androidx.camera.core.VideoCapture: void setTargetRotation(int)>(i0);

        return;
    }

    private java.lang.Void lambda$new$0(androidx.camera.lifecycle.ProcessCameraProvider)
    {
        androidx.camera.view.CameraController r0;
        androidx.camera.lifecycle.ProcessCameraProvider r1;

        r0 := @this: androidx.camera.view.CameraController;

        r1 := @parameter0: androidx.camera.lifecycle.ProcessCameraProvider;

        r0.<androidx.camera.view.CameraController: androidx.camera.lifecycle.ProcessCameraProvider mCameraProvider> = r1;

        virtualinvoke r0.<androidx.camera.view.CameraController: void startCameraAndTrackStates()>();

        return null;
    }

androidx.camera.view.CameraController$1
<androidx.camera.view.CameraController$1: androidx.camera.view.video.OnVideoSavedCallback val$callback>
<androidx.camera.view.CameraController$1: androidx.camera.view.CameraController this$0>
    void <init>(androidx.camera.view.CameraController, androidx.camera.view.video.OnVideoSavedCallback)
    {
        androidx.camera.view.CameraController$1 r0;
        androidx.camera.view.CameraController r1;
        androidx.camera.view.video.OnVideoSavedCallback r2;

        r0 := @this: androidx.camera.view.CameraController$1;

        r1 := @parameter0: androidx.camera.view.CameraController;

        r2 := @parameter1: androidx.camera.view.video.OnVideoSavedCallback;

        r0.<androidx.camera.view.CameraController$1: androidx.camera.view.CameraController this$0> = r1;

        r0.<androidx.camera.view.CameraController$1: androidx.camera.view.video.OnVideoSavedCallback val$callback> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onVideoSaved(androidx.camera.core.VideoCapture$OutputFileResults)
    {
        androidx.camera.view.CameraController$1 r0;
        androidx.camera.core.VideoCapture$OutputFileResults r1;
        androidx.camera.view.CameraController $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        androidx.camera.view.video.OnVideoSavedCallback $r4;
        android.net.Uri $r5;
        androidx.camera.view.video.OutputFileResults $r6;

        r0 := @this: androidx.camera.view.CameraController$1;

        r1 := @parameter0: androidx.camera.core.VideoCapture$OutputFileResults;

        $r2 = r0.<androidx.camera.view.CameraController$1: androidx.camera.view.CameraController this$0>;

        $r3 = $r2.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r4 = r0.<androidx.camera.view.CameraController$1: androidx.camera.view.video.OnVideoSavedCallback val$callback>;

        $r5 = virtualinvoke r1.<androidx.camera.core.VideoCapture$OutputFileResults: android.net.Uri getSavedUri()>();

        $r6 = staticinvoke <androidx.camera.view.video.OutputFileResults: androidx.camera.view.video.OutputFileResults create(android.net.Uri)>($r5);

        interfaceinvoke $r4.<androidx.camera.view.video.OnVideoSavedCallback: void onVideoSaved(androidx.camera.view.video.OutputFileResults)>($r6);

        return;
    }

    public void onError(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.view.CameraController$1 r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2;
        androidx.camera.view.CameraController $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        androidx.camera.view.video.OnVideoSavedCallback $r5;

        r0 := @this: androidx.camera.view.CameraController$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r3 = r0.<androidx.camera.view.CameraController$1: androidx.camera.view.CameraController this$0>;

        $r4 = $r3.<androidx.camera.view.CameraController: java.util.concurrent.atomic.AtomicBoolean mVideoIsRecording>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r5 = r0.<androidx.camera.view.CameraController$1: androidx.camera.view.video.OnVideoSavedCallback val$callback>;

        interfaceinvoke $r5.<androidx.camera.view.video.OnVideoSavedCallback: void onError(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        return;
    }

androidx.camera.view.CameraController$2
<androidx.camera.view.CameraController$2: androidx.camera.view.CameraController this$0>
    void <init>(androidx.camera.view.CameraController)
    {
        androidx.camera.view.CameraController$2 r0;
        androidx.camera.view.CameraController r1;

        r0 := @this: androidx.camera.view.CameraController$2;

        r1 := @parameter0: androidx.camera.view.CameraController;

        r0.<androidx.camera.view.CameraController$2: androidx.camera.view.CameraController this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(androidx.camera.core.FocusMeteringResult)
    {
        androidx.camera.view.CameraController$2 r0;
        androidx.camera.core.FocusMeteringResult r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        boolean $z0, $z1;
        java.lang.String $r5;
        androidx.camera.view.CameraController $r6;
        androidx.lifecycle.MutableLiveData $r7;
        java.lang.Integer $r8;
        byte $b0;

        r0 := @this: androidx.camera.view.CameraController$2;

        r1 := @parameter0: androidx.camera.core.FocusMeteringResult;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tap to focus onSuccess: ");

        $z0 = virtualinvoke r1.<androidx.camera.core.FocusMeteringResult: boolean isFocusSuccessful()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", $r5);

        $r6 = r0.<androidx.camera.view.CameraController$2: androidx.camera.view.CameraController this$0>;

        $r7 = $r6.<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState>;

        $z1 = virtualinvoke r1.<androidx.camera.core.FocusMeteringResult: boolean isFocusSuccessful()>();

        if $z1 == 0 goto label2;

        $b0 = 2;

        goto label3;

     label2:
        $b0 = 3;

     label3:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        virtualinvoke $r7.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>($r8);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.view.CameraController$2 r0;
        java.lang.Throwable r1;
        boolean $z0;
        androidx.camera.view.CameraController $r2;
        androidx.lifecycle.MutableLiveData $r3;
        java.lang.Integer $r4;

        r0 := @this: androidx.camera.view.CameraController$2;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof androidx.camera.core.CameraControl$OperationCanceledException;

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraController", "Tap-to-focus is canceled by new action.");

        return;

     label1:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraController", "Tap to focus failed.", r1);

        $r2 = r0.<androidx.camera.view.CameraController$2: androidx.camera.view.CameraController this$0>;

        $r3 = $r2.<androidx.camera.view.CameraController: androidx.lifecycle.MutableLiveData mTapToFocusState>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke $r3.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>($r4);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.view.CameraController$2 r0;
        java.lang.Object r1;
        androidx.camera.core.FocusMeteringResult $r2;

        r0 := @this: androidx.camera.view.CameraController$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.FocusMeteringResult) r1;

        virtualinvoke r0.<androidx.camera.view.CameraController$2: void onSuccess(androidx.camera.core.FocusMeteringResult)>($r2);

        return;
    }

androidx.camera.view.CameraController$Api30Impl
    private void <init>()
    {
        androidx.camera.view.CameraController$Api30Impl r0;

        r0 := @this: androidx.camera.view.CameraController$Api30Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.content.Context createAttributionContext(android.content.Context, java.lang.String)
    {
        android.content.Context r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String getAttributionTag(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.String getAttributionTag()>();

        return $r1;
    }

androidx.camera.view.CameraController$OutputSize$OutputAspectRatio
androidx.camera.view.CameraController$OutputSize
<androidx.camera.view.CameraController$OutputSize: int UNASSIGNED_ASPECT_RATIO>
<androidx.camera.view.CameraController$OutputSize: int mAspectRatio>
<androidx.camera.view.CameraController$OutputSize: android.util.Size mResolution>
    public void <init>(int)
    {
        androidx.camera.view.CameraController$OutputSize r0;
        int i0;
        boolean $z0;

        r0 := @this: androidx.camera.view.CameraController$OutputSize;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z0);

        r0.<androidx.camera.view.CameraController$OutputSize: int mAspectRatio> = i0;

        r0.<androidx.camera.view.CameraController$OutputSize: android.util.Size mResolution> = null;

        return;
    }

    public void <init>(android.util.Size)
    {
        androidx.camera.view.CameraController$OutputSize r0;
        android.util.Size r1;

        r0 := @this: androidx.camera.view.CameraController$OutputSize;

        r1 := @parameter0: android.util.Size;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.camera.view.CameraController$OutputSize: int mAspectRatio> = -1;

        r0.<androidx.camera.view.CameraController$OutputSize: android.util.Size mResolution> = r1;

        return;
    }

    public int getAspectRatio()
    {
        androidx.camera.view.CameraController$OutputSize r0;
        int $i0;

        r0 := @this: androidx.camera.view.CameraController$OutputSize;

        $i0 = r0.<androidx.camera.view.CameraController$OutputSize: int mAspectRatio>;

        return $i0;
    }

    public android.util.Size getResolution()
    {
        androidx.camera.view.CameraController$OutputSize r0;
        android.util.Size $r1;

        r0 := @this: androidx.camera.view.CameraController$OutputSize;

        $r1 = r0.<androidx.camera.view.CameraController$OutputSize: android.util.Size mResolution>;

        return $r1;
    }

    public java.lang.String toString()
    {
        androidx.camera.view.CameraController$OutputSize r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;
        int $i0;
        android.util.Size $r5;
        java.lang.String $r7;

        r0 := @this: androidx.camera.view.CameraController$OutputSize;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aspect ratio: ");

        $i0 = r0.<androidx.camera.view.CameraController$OutputSize: int mAspectRatio>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolution: ");

        $r5 = r0.<androidx.camera.view.CameraController$OutputSize: android.util.Size mResolution>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

androidx.camera.view.CameraController$TapToFocusStates
androidx.camera.view.CameraController$UseCases
