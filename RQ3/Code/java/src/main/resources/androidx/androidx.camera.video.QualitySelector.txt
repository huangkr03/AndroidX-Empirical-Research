androidx.camera.video.QualitySelector
<androidx.camera.video.QualitySelector: java.lang.String TAG>
<androidx.camera.video.QualitySelector: java.util.List mPreferredQualityList>
<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>
    public static java.util.List getSupportedQualities(androidx.camera.core.CameraInfo)
    {
        androidx.camera.core.CameraInfo r0;
        androidx.camera.video.VideoCapabilities $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.camera.core.CameraInfo;

        $r1 = staticinvoke <androidx.camera.video.VideoCapabilities: androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)>(r0);

        $r2 = virtualinvoke $r1.<androidx.camera.video.VideoCapabilities: java.util.List getSupportedQualities()>();

        return $r2;
    }

    public static boolean isQualitySupported(androidx.camera.core.CameraInfo, androidx.camera.video.Quality)
    {
        androidx.camera.core.CameraInfo r0;
        androidx.camera.video.Quality r1;
        androidx.camera.video.VideoCapabilities $r2;
        boolean $z0;

        r0 := @parameter0: androidx.camera.core.CameraInfo;

        r1 := @parameter1: androidx.camera.video.Quality;

        $r2 = staticinvoke <androidx.camera.video.VideoCapabilities: androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)>(r0);

        $z0 = virtualinvoke $r2.<androidx.camera.video.VideoCapabilities: boolean isQualitySupported(androidx.camera.video.Quality)>(r1);

        return $z0;
    }

    public static android.util.Size getResolution(androidx.camera.core.CameraInfo, androidx.camera.video.Quality)
    {
        androidx.camera.core.CameraInfo r0;
        androidx.camera.video.Quality r1;
        androidx.camera.core.impl.CamcorderProfileProxy r2;
        androidx.camera.video.VideoCapabilities $r3;
        int $i0, $i1;
        android.util.Size $r4;

        r0 := @parameter0: androidx.camera.core.CameraInfo;

        r1 := @parameter1: androidx.camera.video.Quality;

        staticinvoke <androidx.camera.video.QualitySelector: void checkQualityConstantsOrThrow(androidx.camera.video.Quality)>(r1);

        $r3 = staticinvoke <androidx.camera.video.VideoCapabilities: androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)>(r0);

        r2 = virtualinvoke $r3.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy getProfile(androidx.camera.video.Quality)>(r1);

        if r2 == null goto label1;

        $r4 = new android.util.Size;

        $i0 = virtualinvoke r2.<androidx.camera.core.impl.CamcorderProfileProxy: int getVideoFrameWidth()>();

        $i1 = virtualinvoke r2.<androidx.camera.core.impl.CamcorderProfileProxy: int getVideoFrameHeight()>();

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>($i0, $i1);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    void <init>(java.util.List, androidx.camera.video.FallbackStrategy)
    {
        androidx.camera.video.QualitySelector r0;
        java.util.List r1, $r4;
        androidx.camera.video.FallbackStrategy r2, $r5;
        boolean $z0, $z1;
        java.util.ArrayList $r3;

        r0 := @this: androidx.camera.video.QualitySelector;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.camera.video.FallbackStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = <androidx.camera.video.FallbackStrategy: androidx.camera.video.FallbackStrategy NONE>;

        if r2 == $r5 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "No preferred quality and fallback strategy.");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<androidx.camera.video.QualitySelector: java.util.List mPreferredQualityList> = $r4;

        r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy> = r2;

        return;
    }

    public static androidx.camera.video.QualitySelector 'from'(androidx.camera.video.Quality)
    {
        androidx.camera.video.Quality r0;
        androidx.camera.video.FallbackStrategy $r1;
        androidx.camera.video.QualitySelector $r2;

        r0 := @parameter0: androidx.camera.video.Quality;

        $r1 = <androidx.camera.video.FallbackStrategy: androidx.camera.video.FallbackStrategy NONE>;

        $r2 = staticinvoke <androidx.camera.video.QualitySelector: androidx.camera.video.QualitySelector 'from'(androidx.camera.video.Quality,androidx.camera.video.FallbackStrategy)>(r0, $r1);

        return $r2;
    }

    public static androidx.camera.video.QualitySelector 'from'(androidx.camera.video.Quality, androidx.camera.video.FallbackStrategy)
    {
        androidx.camera.video.Quality r0;
        androidx.camera.video.FallbackStrategy r1;
        androidx.camera.video.QualitySelector $r4;
        androidx.camera.video.Quality[] $r5;
        java.util.List $r6;

        r0 := @parameter0: androidx.camera.video.Quality;

        r1 := @parameter1: androidx.camera.video.FallbackStrategy;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "quality cannot be null");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "fallbackStrategy cannot be null");

        staticinvoke <androidx.camera.video.QualitySelector: void checkQualityConstantsOrThrow(androidx.camera.video.Quality)>(r0);

        $r4 = new androidx.camera.video.QualitySelector;

        $r5 = newarray (androidx.camera.video.Quality)[1];

        $r5[0] = r0;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r4.<androidx.camera.video.QualitySelector: void <init>(java.util.List,androidx.camera.video.FallbackStrategy)>($r6, r1);

        return $r4;
    }

    public static androidx.camera.video.QualitySelector fromOrderedList(java.util.List)
    {
        java.util.List r0;
        androidx.camera.video.FallbackStrategy $r1;
        androidx.camera.video.QualitySelector $r2;

        r0 := @parameter0: java.util.List;

        $r1 = <androidx.camera.video.FallbackStrategy: androidx.camera.video.FallbackStrategy NONE>;

        $r2 = staticinvoke <androidx.camera.video.QualitySelector: androidx.camera.video.QualitySelector fromOrderedList(java.util.List,androidx.camera.video.FallbackStrategy)>(r0, $r1);

        return $r2;
    }

    public static androidx.camera.video.QualitySelector fromOrderedList(java.util.List, androidx.camera.video.FallbackStrategy)
    {
        java.util.List r0;
        androidx.camera.video.FallbackStrategy r1;
        boolean $z0, $z1;
        androidx.camera.video.QualitySelector $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: androidx.camera.video.FallbackStrategy;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "qualities cannot be null");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "fallbackStrategy cannot be null");

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "qualities cannot be empty");

        staticinvoke <androidx.camera.video.QualitySelector: void checkQualityConstantsOrThrow(java.util.List)>(r0);

        $r4 = new androidx.camera.video.QualitySelector;

        specialinvoke $r4.<androidx.camera.video.QualitySelector: void <init>(java.util.List,androidx.camera.video.FallbackStrategy)>(r0, r1);

        return $r4;
    }

    java.util.List getPrioritizedQualities(androidx.camera.core.CameraInfo)
    {
        androidx.camera.video.QualitySelector r0;
        androidx.camera.core.CameraInfo r1;
        androidx.camera.video.VideoCapabilities r2;
        java.util.List r3, $r13;
        java.util.LinkedHashSet r4, $r12;
        java.util.Iterator r5;
        androidx.camera.video.Quality r6, $r15, $r16;
        java.util.ArrayList r7, $r21, $r22, $r23;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r17, $r18, $r19;
        java.lang.String $r11, $r20;
        java.lang.Object $r14;

        r0 := @this: androidx.camera.video.QualitySelector;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r2 = staticinvoke <androidx.camera.video.VideoCapabilities: androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)>(r1);

        r3 = virtualinvoke r2.<androidx.camera.video.VideoCapabilities: java.util.List getSupportedQualities()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("QualitySelector", "No supported quality on the device.");

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        return $r22;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportedQualities = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("QualitySelector", $r11);

        $r12 = new java.util.LinkedHashSet;

        specialinvoke $r12.<java.util.LinkedHashSet: void <init>()>();

        r4 = $r12;

        $r13 = r0.<androidx.camera.video.QualitySelector: java.util.List mPreferredQualityList>;

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.camera.video.Quality) $r14;

        $r15 = <androidx.camera.video.Quality: androidx.camera.video.Quality HIGHEST>;

        if r6 != $r15 goto label3;

        interfaceinvoke r4.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        goto label7;

     label3:
        $r16 = <androidx.camera.video.Quality: androidx.camera.video.Quality LOWEST>;

        if r6 != $r16 goto label4;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        r7 = $r21;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r7);

        interfaceinvoke r4.<java.util.Set: boolean addAll(java.util.Collection)>(r7);

        goto label7;

     label4:
        $z2 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r6);

        if $z2 == 0 goto label5;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label6;

     label5:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("quality is not supported and will be ignored: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("QualitySelector", $r20);

     label6:
        goto label2;

     label7:
        specialinvoke r0.<androidx.camera.video.QualitySelector: void addByFallbackStrategy(java.util.List,java.util.Set)>(r3, r4);

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>(java.util.Collection)>(r4);

        return $r23;
    }

    public java.lang.String toString()
    {
        androidx.camera.video.QualitySelector r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.util.List $r3;
        androidx.camera.video.FallbackStrategy $r6;
        java.lang.String $r9;

        r0 := @this: androidx.camera.video.QualitySelector;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QualitySelector{preferredQualities=");

        $r3 = r0.<androidx.camera.video.QualitySelector: java.util.List mPreferredQualityList>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fallbackStrategy=");

        $r6 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void addByFallbackStrategy(java.util.List, java.util.Set)
    {
        androidx.camera.video.QualitySelector r0;
        java.util.List r1, r4;
        java.util.Set r2;
        androidx.camera.video.FallbackStrategy$RuleStrategy r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.ArrayList r5, $r20, $r21, r44;
        androidx.camera.video.Quality r6, $r16, $r17, $r18, $r19, r42, r43;
        boolean $z0, $z1, $z2, $z9, $z11, $z13;
        java.lang.StringBuilder $r7, $r8, $r10, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r36;
        androidx.camera.video.FallbackStrategy $r9, $r12, $r13, $r14, $r15, $r35;
        java.lang.String $r11, $r31, $r37;
        java.lang.AssertionError $r32;
        java.lang.Object $r38, $r39, $r40, $r41;

        r0 := @this: androidx.camera.video.QualitySelector;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Set;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        if $z1 == 0 goto label02;

        return;

     label02:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Select quality by fallbackStrategy = ");

        $r9 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("QualitySelector", $r11);

        $r13 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        $r12 = <androidx.camera.video.FallbackStrategy: androidx.camera.video.FallbackStrategy NONE>;

        if $r13 != $r12 goto label03;

        return;

     label03:
        $r14 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        $z2 = $r14 instanceof androidx.camera.video.FallbackStrategy$RuleStrategy;

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, "Currently only support type RuleStrategy");

        $r15 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        r3 = (androidx.camera.video.FallbackStrategy$RuleStrategy) $r15;

        r4 = staticinvoke <androidx.camera.video.Quality: java.util.List getSortedQualities()>();

        $r16 = virtualinvoke r3.<androidx.camera.video.FallbackStrategy$RuleStrategy: androidx.camera.video.Quality getFallbackQuality()>();

        $r17 = <androidx.camera.video.Quality: androidx.camera.video.Quality HIGHEST>;

        if $r16 != $r17 goto label04;

        $r41 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        r42 = (androidx.camera.video.Quality) $r41;

        goto label06;

     label04:
        $r18 = virtualinvoke r3.<androidx.camera.video.FallbackStrategy$RuleStrategy: androidx.camera.video.Quality getFallbackQuality()>();

        $r19 = <androidx.camera.video.Quality: androidx.camera.video.Quality LOWEST>;

        if $r18 != $r19 goto label05;

        $i3 = interfaceinvoke r4.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r40 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i4);

        r42 = (androidx.camera.video.Quality) $r40;

        goto label06;

     label05:
        r42 = virtualinvoke r3.<androidx.camera.video.FallbackStrategy$RuleStrategy: androidx.camera.video.Quality getFallbackQuality()>();

     label06:
        i0 = interfaceinvoke r4.<java.util.List: int indexOf(java.lang.Object)>(r42);

        if i0 == -1 goto label07;

        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z13);

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r5 = $r20;

        i5 = i0 - 1;

     label09:
        if i5 < 0 goto label11;

        $r39 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i5);

        r43 = (androidx.camera.video.Quality) $r39;

        $z11 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r43);

        if $z11 == 0 goto label10;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r43);

     label10:
        i5 = i5 + -1;

        goto label09;

     label11:
        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r44 = $r21;

        i6 = i0 + 1;

     label12:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if i6 >= $i1 goto label14;

        $r38 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i6);

        r6 = (androidx.camera.video.Quality) $r38;

        $z9 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r6);

        if $z9 == 0 goto label13;

        interfaceinvoke r44.<java.util.List: boolean add(java.lang.Object)>(r6);

     label13:
        i6 = i6 + 1;

        goto label12;

     label14:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sizeSortedQualities = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fallback quality = ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", largerQualities = ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", smallerQualities = ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("QualitySelector", $r31);

        $i2 = virtualinvoke r3.<androidx.camera.video.FallbackStrategy$RuleStrategy: int getFallbackRule()>();

        tableswitch($i2)
        {
            case 0: goto label19;
            case 1: goto label15;
            case 2: goto label16;
            case 3: goto label17;
            case 4: goto label18;
            default: goto label20;
        };

     label15:
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r44);

        goto label21;

     label16:
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        goto label21;

     label17:
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r44);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        goto label21;

     label18:
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r44);

        goto label21;

     label19:
        goto label21;

     label20:
        $r32 = new java.lang.AssertionError;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled fallback strategy: ");

        $r35 = r0.<androidx.camera.video.QualitySelector: androidx.camera.video.FallbackStrategy mFallbackStrategy>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>($r37);

        throw $r32;

     label21:
        return;
    }

    private static void checkQualityConstantsOrThrow(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        androidx.camera.video.Quality r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.video.Quality) $r3;

        $z1 = staticinvoke <androidx.camera.video.Quality: boolean containsQuality(androidx.camera.video.Quality)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("qualities contain invalid quality: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r7);

        goto label1;

     label2:
        return;
    }

    private static void checkQualityConstantsOrThrow(androidx.camera.video.Quality)
    {
        androidx.camera.video.Quality r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: androidx.camera.video.Quality;

        $z0 = staticinvoke <androidx.camera.video.Quality: boolean containsQuality(androidx.camera.video.Quality)>(r0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid quality: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r4);

        return;
    }

