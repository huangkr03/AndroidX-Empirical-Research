androidx.camera.core.imagecapture.ImagePipeline
<androidx.camera.core.imagecapture.ImagePipeline: byte JPEG_QUALITY_MAX_QUALITY>
<androidx.camera.core.imagecapture.ImagePipeline: byte JPEG_QUALITY_MIN_LATENCY>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.CaptureConfig mCaptureConfig>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.SingleBundlingNode mBundlingNode>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.ProcessingNode mProcessingNode>
<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>
    public void <init>(androidx.camera.core.impl.ImageCaptureConfig, android.util.Size)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.impl.ImageCaptureConfig r1, $r10, $r15;
        android.util.Size r2;
        androidx.camera.core.imagecapture.CaptureNode$Out r3;
        androidx.camera.core.imagecapture.ProcessingNode$In r4;
        androidx.camera.core.impl.CaptureConfig$Builder $r5;
        androidx.camera.core.impl.CaptureConfig $r6;
        androidx.camera.core.imagecapture.CaptureNode $r7, $r18;
        androidx.camera.core.imagecapture.SingleBundlingNode $r8, $r19;
        androidx.camera.core.imagecapture.ProcessingNode $r9, $r20;
        java.util.concurrent.Executor $r11, $r12, $r14;
        java.lang.Object $r13;
        int $i0;
        androidx.camera.core.imagecapture.CaptureNode$In $r16, $r17;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.impl.ImageCaptureConfig;

        r2 := @parameter1: android.util.Size;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig> = r1;

        $r5 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r1);

        $r6 = virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.CaptureConfig mCaptureConfig> = $r6;

        $r7 = new androidx.camera.core.imagecapture.CaptureNode;

        specialinvoke $r7.<androidx.camera.core.imagecapture.CaptureNode: void <init>()>();

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode> = $r7;

        $r8 = new androidx.camera.core.imagecapture.SingleBundlingNode;

        specialinvoke $r8.<androidx.camera.core.imagecapture.SingleBundlingNode: void <init>()>();

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.SingleBundlingNode mBundlingNode> = $r8;

        $r9 = new androidx.camera.core.imagecapture.ProcessingNode;

        $r10 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig>;

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

        $r12 = virtualinvoke $r10.<androidx.camera.core.impl.ImageCaptureConfig: java.util.concurrent.Executor getIoExecutor(java.util.concurrent.Executor)>($r11);

        $r13 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r12);

        $r14 = (java.util.concurrent.Executor) $r13;

        specialinvoke $r9.<androidx.camera.core.imagecapture.ProcessingNode: void <init>(java.util.concurrent.Executor)>($r14);

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.ProcessingNode mProcessingNode> = $r9;

        $r15 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig>;

        $i0 = virtualinvoke $r15.<androidx.camera.core.impl.ImageCaptureConfig: int getInputFormat()>();

        $r16 = staticinvoke <androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.imagecapture.CaptureNode$In of(android.util.Size,int)>(r2, $i0);

        r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn> = $r16;

        $r18 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>;

        $r17 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        r3 = virtualinvoke $r18.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out transform(androidx.camera.core.imagecapture.CaptureNode$In)>($r17);

        $r19 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.SingleBundlingNode mBundlingNode>;

        r4 = virtualinvoke $r19.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In transform(androidx.camera.core.imagecapture.CaptureNode$Out)>(r3);

        $r20 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.ProcessingNode mProcessingNode>;

        virtualinvoke $r20.<androidx.camera.core.imagecapture.ProcessingNode: java.lang.Void transform(androidx.camera.core.imagecapture.ProcessingNode$In)>(r4);

        return;
    }

    public androidx.camera.core.impl.SessionConfig$Builder createSessionConfigBuilder()
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.impl.SessionConfig$Builder r1;
        androidx.camera.core.impl.ImageCaptureConfig $r2;
        androidx.camera.core.imagecapture.CaptureNode$In $r3;
        androidx.camera.core.impl.DeferrableSurface $r4;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        $r2 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig>;

        r1 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>($r2);

        $r3 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)>($r4);

        return r1;
    }

    public void close()
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.CaptureNode $r1;
        androidx.camera.core.imagecapture.SingleBundlingNode $r2;
        androidx.camera.core.imagecapture.ProcessingNode $r3;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>;

        virtualinvoke $r1.<androidx.camera.core.imagecapture.CaptureNode: void release()>();

        $r2 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.SingleBundlingNode mBundlingNode>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.SingleBundlingNode: void release()>();

        $r3 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.ProcessingNode mProcessingNode>;

        virtualinvoke $r3.<androidx.camera.core.imagecapture.ProcessingNode: void release()>();

        return;
    }

    public int getCapacity()
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.CaptureNode $r1;
        int $i0;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.imagecapture.CaptureNode: int getCapacity()>();

        return $i0;
    }

    public void setOnImageCloseListener(androidx.camera.core.ForwardingImageProxy$OnImageCloseListener)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.ForwardingImageProxy$OnImageCloseListener r1;
        androidx.camera.core.imagecapture.CaptureNode $r2;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.ForwardingImageProxy$OnImageCloseListener;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.CaptureNode: void setOnImageCloseListener(androidx.camera.core.ForwardingImageProxy$OnImageCloseListener)>(r1);

        return;
    }

    androidx.core.util.Pair createRequests(androidx.camera.core.imagecapture.TakePictureRequest, androidx.camera.core.imagecapture.TakePictureCallback)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.TakePictureRequest r1;
        androidx.camera.core.imagecapture.TakePictureCallback r2;
        androidx.camera.core.impl.CaptureBundle r3;
        androidx.core.util.Pair $r4;
        androidx.camera.core.imagecapture.CameraRequest $r5;
        androidx.camera.core.imagecapture.ProcessingRequest $r6;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.imagecapture.TakePictureRequest;

        r2 := @parameter1: androidx.camera.core.imagecapture.TakePictureCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r3 = specialinvoke r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.CaptureBundle createCaptureBundle()>();

        $r4 = new androidx.core.util.Pair;

        $r5 = specialinvoke r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CameraRequest createCameraRequest(androidx.camera.core.impl.CaptureBundle,androidx.camera.core.imagecapture.TakePictureRequest,androidx.camera.core.imagecapture.TakePictureCallback)>(r3, r1, r2);

        $r6 = specialinvoke r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.ProcessingRequest createProcessingRequest(androidx.camera.core.impl.CaptureBundle,androidx.camera.core.imagecapture.TakePictureRequest,androidx.camera.core.imagecapture.TakePictureCallback)>(r3, r1, r2);

        specialinvoke $r4.<androidx.core.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        return $r4;
    }

    void postProcess(androidx.camera.core.imagecapture.ProcessingRequest)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.ProcessingRequest r1;
        androidx.camera.core.imagecapture.CaptureNode$In $r2;
        androidx.camera.core.processing.Edge $r3;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.imagecapture.ProcessingRequest;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $r3 = virtualinvoke $r2.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.processing.Edge getRequestEdge()>();

        virtualinvoke $r3.<androidx.camera.core.processing.Edge: void accept(java.lang.Object)>(r1);

        return;
    }

    private androidx.camera.core.impl.CaptureBundle createCaptureBundle()
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;
        androidx.camera.core.impl.CaptureBundle $r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        $r1 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.ImageCaptureConfig mUseCaseConfig>;

        $r2 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        $r3 = virtualinvoke $r1.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>($r2);

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.camera.core.impl.CaptureBundle) $r4;

        return $r5;
    }

    private androidx.camera.core.imagecapture.ProcessingRequest createProcessingRequest(androidx.camera.core.impl.CaptureBundle, androidx.camera.core.imagecapture.TakePictureRequest, androidx.camera.core.imagecapture.TakePictureCallback)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.impl.CaptureBundle r1;
        androidx.camera.core.imagecapture.TakePictureRequest r2;
        androidx.camera.core.imagecapture.TakePictureCallback r3;
        androidx.camera.core.imagecapture.ProcessingRequest $r4;
        androidx.camera.core.ImageCapture$OutputFileOptions $r5;
        android.graphics.Rect $r6;
        int $i0, $i1;
        android.graphics.Matrix $r7;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureBundle;

        r2 := @parameter1: androidx.camera.core.imagecapture.TakePictureRequest;

        r3 := @parameter2: androidx.camera.core.imagecapture.TakePictureCallback;

        $r4 = new androidx.camera.core.imagecapture.ProcessingRequest;

        $r5 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OutputFileOptions getOutputFileOptions()>();

        $r6 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: android.graphics.Rect getCropRect()>();

        $i0 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: int getRotationDegrees()>();

        $i1 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: int getJpegQuality()>();

        $r7 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: android.graphics.Matrix getSensorToBufferTransform()>();

        specialinvoke $r4.<androidx.camera.core.imagecapture.ProcessingRequest: void <init>(androidx.camera.core.impl.CaptureBundle,androidx.camera.core.ImageCapture$OutputFileOptions,android.graphics.Rect,int,int,android.graphics.Matrix,androidx.camera.core.imagecapture.TakePictureCallback)>(r1, $r5, $r6, $i0, $i1, $r7, r3);

        return $r4;
    }

    private androidx.camera.core.imagecapture.CameraRequest createCameraRequest(androidx.camera.core.impl.CaptureBundle, androidx.camera.core.imagecapture.TakePictureRequest, androidx.camera.core.imagecapture.TakePictureCallback)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.impl.CaptureBundle r1;
        androidx.camera.core.imagecapture.TakePictureRequest r2;
        androidx.camera.core.imagecapture.TakePictureCallback r3;
        java.util.ArrayList r4, $r9;
        java.lang.String r5;
        java.util.Iterator r6;
        androidx.camera.core.impl.CaptureStage r7;
        androidx.camera.core.impl.CaptureConfig$Builder r8, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.List $r10, $r12, $r19;
        java.lang.Object $r11, $r14;
        boolean $z0, $z2;
        androidx.camera.core.imagecapture.CameraRequest $r13;
        androidx.camera.core.impl.CaptureConfig $r16, $r17, $r28, $r33;
        androidx.camera.core.impl.Config $r18, $r29;
        androidx.camera.core.imagecapture.CaptureNode$In $r20, $r22, $r31;
        androidx.camera.core.impl.DeferrableSurface $r21;
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r23;
        androidx.camera.core.impl.Config$Option $r24, $r26;
        java.lang.Integer $r25, $r27, $r30;
        androidx.camera.core.impl.CameraCaptureCallback $r32;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureBundle;

        r2 := @parameter1: androidx.camera.core.imagecapture.TakePictureRequest;

        r3 := @parameter2: androidx.camera.core.imagecapture.TakePictureCallback;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r4 = $r9;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r10 = interfaceinvoke r1.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        $r11 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r10);

        $r12 = (java.util.List) $r11;

        r6 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.camera.core.impl.CaptureStage) $r14;

        $r15 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r15.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r8 = $r15;

        $r16 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.CaptureConfig mCaptureConfig>;

        $i1 = virtualinvoke $r16.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i1);

        $r17 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.CaptureConfig mCaptureConfig>;

        $r18 = virtualinvoke $r17.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r18);

        $r19 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: java.util.List getSessionConfigCameraCaptureCallbacks()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addAllCameraCaptureCallbacks(java.util.Collection)>($r19);

        $r20 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $r21 = virtualinvoke $r20.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>($r21);

        $r22 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $i2 = virtualinvoke $r22.<androidx.camera.core.imagecapture.CaptureNode$In: int getFormat()>();

        if $i2 != 256 goto label3;

        $r23 = <androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>;

        $z2 = virtualinvoke $r23.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: boolean isRotationOptionSupported()>();

        if $z2 == 0 goto label2;

        $r26 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION>;

        $i4 = virtualinvoke r2.<androidx.camera.core.imagecapture.TakePictureRequest: int getRotationDegrees()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r26, $r27);

     label2:
        $r24 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY>;

        $i3 = virtualinvoke r0.<androidx.camera.core.imagecapture.ImagePipeline: int getCameraRequestJpegQuality(androidx.camera.core.imagecapture.TakePictureRequest)>(r2);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r24, $r25);

     label3:
        $r28 = interfaceinvoke r7.<androidx.camera.core.impl.CaptureStage: androidx.camera.core.impl.CaptureConfig getCaptureConfig()>();

        $r29 = virtualinvoke $r28.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r29);

        $i5 = interfaceinvoke r7.<androidx.camera.core.impl.CaptureStage: int getId()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addTag(java.lang.String,java.lang.Object)>(r5, $r30);

        $r31 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $r32 = virtualinvoke $r31.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r32);

        $r33 = virtualinvoke r8.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r33);

        goto label1;

     label4:
        $r13 = new androidx.camera.core.imagecapture.CameraRequest;

        specialinvoke $r13.<androidx.camera.core.imagecapture.CameraRequest: void <init>(java.util.List,androidx.camera.core.imagecapture.TakePictureCallback)>(r4, r3);

        return $r13;
    }

    int getCameraRequestJpegQuality(androidx.camera.core.imagecapture.TakePictureRequest)
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.TakePictureRequest r1;
        boolean z0, z1, $z2;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r2;
        android.graphics.Rect $r3;
        androidx.camera.core.imagecapture.CaptureNode$In $r4;
        android.util.Size $r5;
        int $i0, $i1;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        r1 := @parameter0: androidx.camera.core.imagecapture.TakePictureRequest;

        $r2 = virtualinvoke r1.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageSavedCallback getOnDiskCallback()>();

        if $r2 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r3 = virtualinvoke r1.<androidx.camera.core.imagecapture.TakePictureRequest: android.graphics.Rect getCropRect()>();

        $r4 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode$In mPipelineIn>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.imagecapture.CaptureNode$In: android.util.Size getSize()>();

        z1 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: boolean hasCropping(android.graphics.Rect,android.util.Size)>($r3, $r5);

        if z0 == 0 goto label4;

        if z1 == 0 goto label4;

        $i1 = virtualinvoke r1.<androidx.camera.core.imagecapture.TakePictureRequest: int getCaptureMode()>();

        if $i1 != 0 goto label3;

        return 100;

     label3:
        return 95;

     label4:
        $i0 = virtualinvoke r1.<androidx.camera.core.imagecapture.TakePictureRequest: int getJpegQuality()>();

        return $i0;
    }

    androidx.camera.core.imagecapture.CaptureNode getCaptureNode()
    {
        androidx.camera.core.imagecapture.ImagePipeline r0;
        androidx.camera.core.imagecapture.CaptureNode $r1;

        r0 := @this: androidx.camera.core.imagecapture.ImagePipeline;

        $r1 = r0.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.imagecapture.CaptureNode mCaptureNode>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r0;

        $r0 = new androidx.camera.core.internal.compat.workaround.ExifRotationAvailability;

        specialinvoke $r0.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: void <init>()>();

        <androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY> = $r0;

        return;
    }

