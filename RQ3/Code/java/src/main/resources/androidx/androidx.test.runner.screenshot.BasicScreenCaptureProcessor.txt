androidx.test.runner.screenshot.BasicScreenCaptureProcessor
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion>
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName>
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix>
<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath>
    protected java.lang.String getDefaultFilename()
    {
        androidx.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.lang.String r1, r2, r3, r4, $r11, $r12;
        int i0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: androidx.test.runner.screenshot.BasicScreenCaptureProcessor;

        i0 = <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion>;

        r4 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        r3 = <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName>;

        r2 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        r1 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getFilename(java.lang.String)>($r11);

        return $r12;
    }

    protected java.lang.String getFilename(java.lang.String)
    {
        androidx.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.lang.String r1, r2, r3, r4, $r5, $r11;
        java.util.UUID $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: androidx.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        $r6 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        r3 = $r5;

        r2 = r1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String process(androidx.test.runner.screenshot.ScreenCapture) throws java.io.IOException
    {
        androidx.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        androidx.test.runner.screenshot.ScreenCapture r1;
        java.io.File r2, r3, $r17;
        java.lang.Throwable r4, r5, r6, $r25, $r27, $r29;
        java.lang.String r7, r8, $r9, $r10, $r12, $r24, $r26, $r28, $r30, r31, r32;
        android.graphics.Bitmap$CompressFormat $r11, $r21;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        boolean $z1, $z3;
        java.io.BufferedOutputStream $r18, r33;
        java.io.FileOutputStream $r19;
        android.graphics.Bitmap $r20;
        java.io.IOException $r22;
        java.lang.Object[] $r23;

        r0 := @this: androidx.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: androidx.test.runner.screenshot.ScreenCapture;

        $r9 = virtualinvoke r1.<androidx.test.runner.screenshot.ScreenCapture: java.lang.String getName()>();

        if $r9 != null goto label01;

        $r30 = virtualinvoke r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getDefaultFilename()>();

        goto label02;

     label01:
        $r10 = virtualinvoke r1.<androidx.test.runner.screenshot.ScreenCapture: java.lang.String getName()>();

        $r30 = virtualinvoke r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getFilename(java.lang.String)>($r10);

     label02:
        r31 = $r30;

        $r11 = virtualinvoke r1.<androidx.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap$CompressFormat getFormat()>();

        $r12 = virtualinvoke $r11.<android.graphics.Bitmap$CompressFormat: java.lang.String toString()>();

        r8 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>();

        r7 = r31;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r32 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath>;

        virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label03;

        $z3 = virtualinvoke r2.<java.io.File: boolean canWrite()>();

        if $z3 != 0 goto label03;

        $r22 = new java.io.IOException;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r2;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The directory %s does not exist and could not be created or is not writable.", $r23);

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r22;

     label03:
        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r32);

        r3 = $r17;

        r33 = null;

     label04:
        $r18 = new java.io.BufferedOutputStream;

        $r19 = new java.io.FileOutputStream;

        specialinvoke $r19.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r19);

        r33 = $r18;

        $r20 = virtualinvoke r1.<androidx.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap getBitmap()>();

        $r21 = virtualinvoke r1.<androidx.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap$CompressFormat getFormat()>();

        virtualinvoke $r20.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r21, 100, r33);

        virtualinvoke r33.<java.io.BufferedOutputStream: void flush()>();

     label05:
        if r33 == null goto label06;

        virtualinvoke r33.<java.io.BufferedOutputStream: void close()>();

     label06:
        goto label13;

     label07:
        $r27 := @caughtexception;

        r4 = $r27;

        $r28 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r28, "Could not close output steam.", r4);

        goto label13;

     label08:
        $r29 := @caughtexception;

        r5 = $r29;

     label09:
        if r33 == null goto label10;

        virtualinvoke r33.<java.io.BufferedOutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r25 := @caughtexception;

        r6 = $r25;

        $r26 = r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r26, "Could not close output steam.", r6);

     label12:
        throw r5;

     label13:
        return r32;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static void <clinit>()
    {
        int $i0;
        java.lang.String $r0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion> = $i0;

        $r0 = <android.os.Build: java.lang.String DEVICE>;

        <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName> = $r0;

        return;
    }

    public void <init>()
    {
        androidx.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.io.File $r1, $r3;
        java.lang.String $r2;

        r0 := @this: androidx.test.runner.screenshot.BasicScreenCaptureProcessor;

        $r1 = new java.io.File;

        $r2 = <android.os.Environment: java.lang.String DIRECTORY_PICTURES>;

        $r3 = staticinvoke <android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>($r2);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "screenshots");

        specialinvoke r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: void <init>(java.io.File)>($r1);

        return;
    }

    void <init>(java.io.File)
    {
        androidx.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.io.File r1;

        r0 := @this: androidx.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag> = "BasicScreenCaptureProcessor";

        r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter> = "-";

        r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix> = "screenshot";

        r0.<androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath> = r1;

        return;
    }

    static void setAndroidDeviceName(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName> = r0;

        return;
    }

    static void setAndroidRuntimeVersion(int)
    {
        int i0;

        i0 := @parameter0: int;

        <androidx.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion> = i0;

        return;
    }

