androidx.test.services.events.TimeStamp
<androidx.test.services.events.TimeStamp: android.os.Parcelable$Creator CREATOR>
<androidx.test.services.events.TimeStamp: java.lang.Long seconds>
<androidx.test.services.events.TimeStamp: java.lang.Integer nanos>
    public int describeContents()
    {
        androidx.test.services.events.TimeStamp r0;

        r0 := @this: androidx.test.services.events.TimeStamp;

        return 0;
    }

    public static androidx.test.services.events.TimeStamp now()
    {
        long l0, l1, $l2, $l3;
        java.util.concurrent.TimeUnit $r0, $r3;
        androidx.test.services.events.TimeStamp $r1;
        java.lang.Long $r2;
        int $i4;
        java.lang.Integer $r4;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l1 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toSeconds(long)>(l0);

        $r1 = new androidx.test.services.events.TimeStamp;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        $l3 = l0 - $l2;

        $i4 = (int) $l3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        specialinvoke $r1.<androidx.test.services.events.TimeStamp: void <init>(java.lang.Long,java.lang.Integer)>($r2, $r4);

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.services.events.TimeStamp$1 $r0;

        $r0 = new androidx.test.services.events.TimeStamp$1;

        specialinvoke $r0.<androidx.test.services.events.TimeStamp$1: void <init>()>();

        <androidx.test.services.events.TimeStamp: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        androidx.test.services.events.TimeStamp r0;
        android.os.Parcel r1;
        long $l0;
        java.lang.Long $r3, $r5;
        java.lang.Object $r4, $r7;
        int $i1;
        java.lang.Integer $r6, $r8;

        r0 := @this: androidx.test.services.events.TimeStamp;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "source cannot be null");

        $l0 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "seconds cannot be null");

        $r5 = (java.lang.Long) $r4;

        r0.<androidx.test.services.events.TimeStamp: java.lang.Long seconds> = $r5;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "nanos cannot be null");

        $r8 = (java.lang.Integer) $r7;

        r0.<androidx.test.services.events.TimeStamp: java.lang.Integer nanos> = $r8;

        return;
    }

    public void <init>(java.lang.Long, java.lang.Integer)
    {
        androidx.test.services.events.TimeStamp r0;
        java.lang.Long r1, $r4;
        java.lang.Integer r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: androidx.test.services.events.TimeStamp;

        r1 := @parameter0: java.lang.Long;

        r2 := @parameter1: java.lang.Integer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "seconds cannot be null");

        $r4 = (java.lang.Long) $r3;

        r0.<androidx.test.services.events.TimeStamp: java.lang.Long seconds> = $r4;

        $r5 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "nanos cannot be null");

        $r6 = (java.lang.Integer) $r5;

        r0.<androidx.test.services.events.TimeStamp: java.lang.Integer nanos> = $r6;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.test.services.events.TimeStamp r0;
        android.os.Parcel r1;
        int i0, $i2;
        java.lang.Long $r2;
        long $l1;
        java.lang.Integer $r3;

        r0 := @this: androidx.test.services.events.TimeStamp;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.test.services.events.TimeStamp: java.lang.Long seconds>;

        $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        $r3 = r0.<androidx.test.services.events.TimeStamp: java.lang.Integer nanos>;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        return;
    }

androidx.test.services.events.TimeStamp$1
    public androidx.test.services.events.TimeStamp createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.TimeStamp$1 r0;
        android.os.Parcel r1;
        androidx.test.services.events.TimeStamp $r2;

        r0 := @this: androidx.test.services.events.TimeStamp$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.test.services.events.TimeStamp;

        specialinvoke $r2.<androidx.test.services.events.TimeStamp: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.TimeStamp$1 r0;
        android.os.Parcel r1;
        androidx.test.services.events.TimeStamp $r2;

        r0 := @this: androidx.test.services.events.TimeStamp$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.test.services.events.TimeStamp$1: androidx.test.services.events.TimeStamp createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    void <init>()
    {
        androidx.test.services.events.TimeStamp$1 r0;

        r0 := @this: androidx.test.services.events.TimeStamp$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.test.services.events.TimeStamp[] newArray(int)
    {
        androidx.test.services.events.TimeStamp$1 r0;
        int i0;
        androidx.test.services.events.TimeStamp[] $r1;

        r0 := @this: androidx.test.services.events.TimeStamp$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.test.services.events.TimeStamp)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.test.services.events.TimeStamp$1 r0;
        int i0;
        androidx.test.services.events.TimeStamp[] $r1;

        r0 := @this: androidx.test.services.events.TimeStamp$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.test.services.events.TimeStamp$1: androidx.test.services.events.TimeStamp[] newArray(int)>(i0);

        return $r1;
    }

