androidx.work.impl.model.WorkTypeConverters
<androidx.work.impl.model.WorkTypeConverters: androidx.work.impl.model.WorkTypeConverters INSTANCE>
    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int stateToInt(androidx.work.WorkInfo$State)
    {
        androidx.work.WorkInfo$State r0;
        int[] $r1;
        int $i0, $i1;
        kotlin.NoWhenBranchMatchedException $r2;
        byte $b2;

        r0 := @parameter0: androidx.work.WorkInfo$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "state");

        $r1 = <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r0.<androidx.work.WorkInfo$State: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $b2 = 0;

        goto label8;

     label2:
        $b2 = 1;

        goto label8;

     label3:
        $b2 = 2;

        goto label8;

     label4:
        $b2 = 3;

        goto label8;

     label5:
        $b2 = 4;

        goto label8;

     label6:
        $b2 = 5;

        goto label8;

     label7:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label8:
        return $b2;
    }

    public static final androidx.work.WorkInfo$State intToState(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.work.WorkInfo$State $r6;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label1:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State ENQUEUED>;

        goto label8;

     label2:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State RUNNING>;

        goto label8;

     label3:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State SUCCEEDED>;

        goto label8;

     label4:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State FAILED>;

        goto label8;

     label5:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State BLOCKED>;

        goto label8;

     label6:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        goto label8;

     label7:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to State");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label8:
        return $r6;
    }

    public static final int backoffPolicyToInt(androidx.work.BackoffPolicy)
    {
        androidx.work.BackoffPolicy r0;
        int[] $r1;
        int $i0, $i1;
        kotlin.NoWhenBranchMatchedException $r2;
        byte $b2;

        r0 := @parameter0: androidx.work.BackoffPolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "backoffPolicy");

        $r1 = <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i0 = virtualinvoke r0.<androidx.work.BackoffPolicy: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $b2 = 0;

        goto label4;

     label2:
        $b2 = 1;

        goto label4;

     label3:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label4:
        return $b2;
    }

    public static final androidx.work.BackoffPolicy intToBackoffPolicy(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.work.BackoffPolicy $r6;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r6 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy EXPONENTIAL>;

        goto label4;

     label2:
        $r6 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy LINEAR>;

        goto label4;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to BackoffPolicy");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label4:
        return $r6;
    }

    public static final int networkTypeToInt(androidx.work.NetworkType)
    {
        androidx.work.NetworkType r0, $r8;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        byte $b3;

        r0 := @parameter0: androidx.work.NetworkType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "networkType");

        $r1 = <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$2>;

        $i0 = virtualinvoke r0.<androidx.work.NetworkType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        $b3 = 0;

        goto label8;

     label2:
        $b3 = 1;

        goto label8;

     label3:
        $b3 = 2;

        goto label8;

     label4:
        $b3 = 3;

        goto label8;

     label5:
        $b3 = 4;

        goto label8;

     label6:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 30 goto label7;

        $r8 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        if r0 != $r8 goto label7;

        $b3 = 5;

        goto label8;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label8:
        return $b3;
    }

    public static final androidx.work.NetworkType intToNetworkType(int)
    {
        int i0, $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.work.NetworkType $r6, $r7;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $r7 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        goto label8;

     label2:
        $r7 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        goto label8;

     label3:
        $r7 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        goto label8;

     label4:
        $r7 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_ROAMING>;

        goto label8;

     label5:
        $r7 = <androidx.work.NetworkType: androidx.work.NetworkType METERED>;

        goto label8;

     label6:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 30 goto label7;

        if i0 != 5 goto label7;

        $r6 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        return $r6;

     label7:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to NetworkType");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label8:
        return $r7;
    }

    public static final int outOfQuotaPolicyToInt(androidx.work.OutOfQuotaPolicy)
    {
        androidx.work.OutOfQuotaPolicy r0;
        int[] $r1;
        int $i0, $i1;
        kotlin.NoWhenBranchMatchedException $r2;
        byte $b2;

        r0 := @parameter0: androidx.work.OutOfQuotaPolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "policy");

        $r1 = <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$3>;

        $i0 = virtualinvoke r0.<androidx.work.OutOfQuotaPolicy: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $b2 = 0;

        goto label4;

     label2:
        $b2 = 1;

        goto label4;

     label3:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label4:
        return $b2;
    }

    public static final androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.work.OutOfQuotaPolicy $r6;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r6 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy RUN_AS_NON_EXPEDITED_WORK_REQUEST>;

        goto label4;

     label2:
        $r6 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy DROP_WORK_REQUEST>;

        goto label4;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to OutOfQuotaPolicy");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label4:
        return $r6;
    }

    public static final byte[] setOfTriggersToByteArray(java.util.Set)
    {
        java.util.Set r0;
        java.io.ByteArrayOutputStream r1, $r6, r18;
        java.io.Closeable r2, r3;
        java.util.Iterator r4;
        androidx.work.Constraints$ContentUriTrigger r5;
        boolean $z0, $z1, $z2;
        java.io.ObjectOutputStream $r7, r19;
        java.io.OutputStream $r8;
        int $i0;
        byte[] $r9, $r13;
        java.lang.Object $r10;
        android.net.Uri $r11;
        java.lang.String $r12;
        java.lang.Throwable $r14, $r15, $r16, $r17, r21, r22, r23, r25, r26, r27;
        kotlin.Unit r20, r24;

        r0 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "triggers");

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r13 = newarray (byte)[0];

        return $r13;

     label01:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r6;

        r2 = (java.io.Closeable) r1;

     label02:
        r18 = (java.io.ByteArrayOutputStream) r2;

        $r7 = new java.io.ObjectOutputStream;

        $r8 = (java.io.OutputStream) r1;

        specialinvoke $r7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r8);

        r3 = (java.io.Closeable) $r7;

     label03:
        r19 = (java.io.ObjectOutputStream) r3;

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        virtualinvoke r19.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        r4 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.work.Constraints$ContentUriTrigger) $r10;

        $r11 = virtualinvoke r5.<androidx.work.Constraints$ContentUriTrigger: android.net.Uri getUri()>();

        $r12 = virtualinvoke $r11.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke r19.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r12);

        $z2 = virtualinvoke r5.<androidx.work.Constraints$ContentUriTrigger: boolean isTriggeredForDescendants()>();

        virtualinvoke r19.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z2);

        goto label04;

     label05:
        r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label06:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        goto label10;

     label07:
        $r16 := @caughtexception;

        r21 = $r16;

        r22 = r21;

        throw r21;

     label08:
        $r17 := @caughtexception;

        r23 = $r17;

     label09:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, r22);

        throw r23;

     label10:
        r24 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label11:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, null);

        goto label15;

     label12:
        $r15 := @caughtexception;

        r25 = $r15;

        r26 = r25;

        throw r25;

     label13:
        $r14 := @caughtexception;

        r27 = $r14;

     label14:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r26);

        throw r27;

     label15:
        $r9 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "outputStream.toByteArray()");

        return $r9;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static final java.util.Set byteArrayToSetOfTriggers(byte[])
    {
        byte[] r0;
        java.util.Set r1;
        java.io.ByteArrayInputStream r2, r16, r29;
        java.io.Closeable r3, r17;
        int i0, $i1, i2;
        android.net.Uri r4;
        boolean z0, $z1;
        java.io.InputStream $r8;
        java.lang.String $r9;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, r20, r21, r22, r23, r25, r26, r27;
        java.io.ObjectInputStream r18, r30;
        kotlin.Unit r19, r24;
        java.util.LinkedHashSet r28;
        androidx.work.Constraints$ContentUriTrigger r31;
        java.io.IOException r32;

        r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "bytes");

        r28 = new java.util.LinkedHashSet;

        specialinvoke r28.<java.util.LinkedHashSet: void <init>()>();

        r1 = (java.util.Set) r28;

        $i1 = lengthof r0;

        if $i1 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        return r1;

     label03:
        r29 = new java.io.ByteArrayInputStream;

        specialinvoke r29.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        r2 = r29;

        r3 = (java.io.Closeable) r2;

     label04:
        r16 = (java.io.ByteArrayInputStream) r3;

     label05:
        r30 = new java.io.ObjectInputStream;

        $r8 = (java.io.InputStream) r2;

        specialinvoke r30.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r8);

        r17 = (java.io.Closeable) r30;

     label06:
        r18 = (java.io.ObjectInputStream) r17;

        i0 = virtualinvoke r18.<java.io.ObjectInputStream: int readInt()>();

        i2 = 0;

     label07:
        if i2 >= i0 goto label08;

        $r9 = virtualinvoke r18.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r9);

        z0 = virtualinvoke r18.<java.io.ObjectInputStream: boolean readBoolean()>();

        r31 = new androidx.work.Constraints$ContentUriTrigger;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "uri");

        specialinvoke r31.<androidx.work.Constraints$ContentUriTrigger: void <init>(android.net.Uri,boolean)>(r4, z0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r31);

        i2 = i2 + 1;

        goto label07;

     label08:
        r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r17, null);

        goto label14;

     label10:
        $r15 := @caughtexception;

        r20 = $r15;

        r21 = r20;

        throw r20;

     label11:
        $r14 := @caughtexception;

        r22 = $r14;

     label12:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r17, r21);

        throw r22;

     label13:
        $r13 := @caughtexception;

        r23 = $r13;

        r32 = (java.io.IOException) r23;

        virtualinvoke r32.<java.io.IOException: void printStackTrace()>();

     label14:
        r24 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label15:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        goto label19;

     label16:
        $r12 := @caughtexception;

        r25 = $r12;

        r26 = r25;

        throw r25;

     label17:
        $r11 := @caughtexception;

        r27 = $r11;

     label18:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, r26);

        throw r27;

     label19:
        return r1;

        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.io.IOException from label05 to label13 with label13;
        catch java.lang.Throwable from label04 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    static void <clinit>()
    {
        androidx.work.impl.model.WorkTypeConverters $r0;

        $r0 = new androidx.work.impl.model.WorkTypeConverters;

        specialinvoke $r0.<androidx.work.impl.model.WorkTypeConverters: void <init>()>();

        <androidx.work.impl.model.WorkTypeConverters: androidx.work.impl.model.WorkTypeConverters INSTANCE> = $r0;

        return;
    }

androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds
<androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds: androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds INSTANCE>
<androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds: int EXPONENTIAL>
<androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds: int LINEAR>
    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds $r0;

        $r0 = new androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds;

        specialinvoke $r0.<androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds: void <init>()>();

        <androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds: androidx.work.impl.model.WorkTypeConverters$BackoffPolicyIds INSTANCE> = $r0;

        return;
    }

androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds INSTANCE>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int NOT_REQUIRED>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int CONNECTED>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int UNMETERED>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int NOT_ROAMING>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int METERED>
<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: int TEMPORARILY_UNMETERED>
    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds $r0;

        $r0 = new androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds;

        specialinvoke $r0.<androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: void <init>()>();

        <androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds: androidx.work.impl.model.WorkTypeConverters$NetworkTypeIds INSTANCE> = $r0;

        return;
    }

androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds
<androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds: androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds INSTANCE>
<androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds: int RUN_AS_NON_EXPEDITED_WORK_REQUEST>
<androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds: int DROP_WORK_REQUEST>
    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds $r0;

        $r0 = new androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds;

        specialinvoke $r0.<androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds: void <init>()>();

        <androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds: androidx.work.impl.model.WorkTypeConverters$OutOfPolicyIds INSTANCE> = $r0;

        return;
    }

androidx.work.impl.model.WorkTypeConverters$StateIds
<androidx.work.impl.model.WorkTypeConverters$StateIds: androidx.work.impl.model.WorkTypeConverters$StateIds INSTANCE>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int ENQUEUED>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int RUNNING>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int SUCCEEDED>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int FAILED>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int BLOCKED>
<androidx.work.impl.model.WorkTypeConverters$StateIds: int CANCELLED>
<androidx.work.impl.model.WorkTypeConverters$StateIds: java.lang.String COMPLETED_STATES>
    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters$StateIds r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters$StateIds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.work.impl.model.WorkTypeConverters$StateIds $r0;

        $r0 = new androidx.work.impl.model.WorkTypeConverters$StateIds;

        specialinvoke $r0.<androidx.work.impl.model.WorkTypeConverters$StateIds: void <init>()>();

        <androidx.work.impl.model.WorkTypeConverters$StateIds: androidx.work.impl.model.WorkTypeConverters$StateIds INSTANCE> = $r0;

        return;
    }

androidx.work.impl.model.WorkTypeConverters$WhenMappings
<androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$0>
<androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$1>
<androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$2>
<androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$3>
    static void <clinit>()
    {
        androidx.work.WorkInfo$State[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        androidx.work.WorkInfo$State $r1, $r2, $r3, $r4, $r5, $r6;
        androidx.work.BackoffPolicy[] $r7;
        androidx.work.BackoffPolicy $r8, $r9;
        androidx.work.NetworkType[] $r10;
        androidx.work.NetworkType $r11, $r12, $r13, $r14, $r15;
        androidx.work.OutOfQuotaPolicy[] $r16;
        androidx.work.OutOfQuotaPolicy $r17, $r18;
        java.lang.Throwable $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, r35, r36, r37, r38, r39, r40, r42, r43, r45, r46, r47, r48, r49, r51, r52;
        int[] r34, r41, r44, r50;

        $r0 = staticinvoke <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State[] values()>();

        $i0 = lengthof $r0;

        r34 = newarray (int)[$i0];

     label01:
        $r1 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State ENQUEUED>;

        $i1 = virtualinvoke $r1.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r23 := @caughtexception;

        r35 = $r23;

     label04:
        $r2 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State RUNNING>;

        $i2 = virtualinvoke $r2.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        r36 = $r20;

     label07:
        $r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State SUCCEEDED>;

        $i3 = virtualinvoke $r3.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

        r37 = $r22;

     label10:
        $r4 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State FAILED>;

        $i4 = virtualinvoke $r4.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r28 := @caughtexception;

        r38 = $r28;

     label13:
        $r5 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State BLOCKED>;

        $i5 = virtualinvoke $r5.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r33 := @caughtexception;

        r39 = $r33;

     label16:
        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        $i6 = virtualinvoke $r6.<androidx.work.WorkInfo$State: int ordinal()>();

        r34[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r27 := @caughtexception;

        r40 = $r27;

     label19:
        <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$0> = r34;

        $r7 = staticinvoke <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy[] values()>();

        $i7 = lengthof $r7;

        r41 = newarray (int)[$i7];

     label20:
        $r8 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy EXPONENTIAL>;

        $i8 = virtualinvoke $r8.<androidx.work.BackoffPolicy: int ordinal()>();

        r41[$i8] = 1;

     label21:
        goto label23;

     label22:
        $r21 := @caughtexception;

        r42 = $r21;

     label23:
        $r9 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy LINEAR>;

        $i9 = virtualinvoke $r9.<androidx.work.BackoffPolicy: int ordinal()>();

        r41[$i9] = 2;

     label24:
        goto label26;

     label25:
        $r24 := @caughtexception;

        r43 = $r24;

     label26:
        <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$1> = r41;

        $r10 = staticinvoke <androidx.work.NetworkType: androidx.work.NetworkType[] values()>();

        $i10 = lengthof $r10;

        r44 = newarray (int)[$i10];

     label27:
        $r11 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        $i11 = virtualinvoke $r11.<androidx.work.NetworkType: int ordinal()>();

        r44[$i11] = 1;

     label28:
        goto label30;

     label29:
        $r26 := @caughtexception;

        r45 = $r26;

     label30:
        $r12 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        $i12 = virtualinvoke $r12.<androidx.work.NetworkType: int ordinal()>();

        r44[$i12] = 2;

     label31:
        goto label33;

     label32:
        $r29 := @caughtexception;

        r46 = $r29;

     label33:
        $r13 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        $i13 = virtualinvoke $r13.<androidx.work.NetworkType: int ordinal()>();

        r44[$i13] = 3;

     label34:
        goto label36;

     label35:
        $r30 := @caughtexception;

        r47 = $r30;

     label36:
        $r14 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_ROAMING>;

        $i14 = virtualinvoke $r14.<androidx.work.NetworkType: int ordinal()>();

        r44[$i14] = 4;

     label37:
        goto label39;

     label38:
        $r32 := @caughtexception;

        r48 = $r32;

     label39:
        $r15 = <androidx.work.NetworkType: androidx.work.NetworkType METERED>;

        $i15 = virtualinvoke $r15.<androidx.work.NetworkType: int ordinal()>();

        r44[$i15] = 5;

     label40:
        goto label42;

     label41:
        $r31 := @caughtexception;

        r49 = $r31;

     label42:
        <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$2> = r44;

        $r16 = staticinvoke <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy[] values()>();

        $i16 = lengthof $r16;

        r50 = newarray (int)[$i16];

     label43:
        $r17 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy RUN_AS_NON_EXPEDITED_WORK_REQUEST>;

        $i17 = virtualinvoke $r17.<androidx.work.OutOfQuotaPolicy: int ordinal()>();

        r50[$i17] = 1;

     label44:
        goto label46;

     label45:
        $r25 := @caughtexception;

        r51 = $r25;

     label46:
        $r18 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy DROP_WORK_REQUEST>;

        $i18 = virtualinvoke $r18.<androidx.work.OutOfQuotaPolicy: int ordinal()>();

        r50[$i18] = 2;

     label47:
        goto label49;

     label48:
        $r19 := @caughtexception;

        r52 = $r19;

     label49:
        <androidx.work.impl.model.WorkTypeConverters$WhenMappings: int[] $EnumSwitchMapping$3> = r50;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label27 to label28 with label29;
        catch java.lang.NoSuchFieldError from label30 to label31 with label32;
        catch java.lang.NoSuchFieldError from label33 to label34 with label35;
        catch java.lang.NoSuchFieldError from label36 to label37 with label38;
        catch java.lang.NoSuchFieldError from label39 to label40 with label41;
        catch java.lang.NoSuchFieldError from label43 to label44 with label45;
        catch java.lang.NoSuchFieldError from label46 to label47 with label48;
    }

