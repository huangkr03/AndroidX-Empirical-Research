androidx.compose.Composer
<androidx.compose.Composer: androidx.compose.SlotTable slotTable>
<androidx.compose.Composer: androidx.compose.Applier applier>
<androidx.compose.Composer: androidx.compose.Recomposer recomposer>
<androidx.compose.Composer: java.util.List changes>
<androidx.compose.Composer: java.util.HashMap lifecycleObservers>
<androidx.compose.Composer: androidx.compose.Stack pendingStack>
<androidx.compose.Composer: androidx.compose.Pending pending>
<androidx.compose.Composer: int nodeIndex>
<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>
<androidx.compose.Composer: int groupNodeCount>
<androidx.compose.Composer: androidx.compose.IntStack groupNodeCountStack>
<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>
<androidx.compose.Composer: boolean collectKeySources>
<androidx.compose.Composer: boolean nodeExpected>
<androidx.compose.Composer: java.util.List invalidations>
<androidx.compose.Composer: androidx.compose.IntStack entersStack>
<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider>
<androidx.compose.Composer: java.util.HashMap providerUpdates>
<androidx.compose.Composer: boolean providersInvalid>
<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack>
<androidx.compose.Composer: androidx.compose.Stack invalidateStack>
<androidx.compose.Composer: androidx.compose.CompositionReference parentReference>
<androidx.compose.Composer: boolean isComposing>
<androidx.compose.Composer: java.util.List changesAppliedObservers>
<androidx.compose.Composer: androidx.compose.SlotReader reader>
<androidx.compose.Composer: androidx.compose.SlotTable insertTable>
<androidx.compose.Composer: androidx.compose.SlotWriter writer>
<androidx.compose.Composer: boolean hasProvider>
<androidx.compose.Composer: androidx.compose.Anchor insertAnchor>
<androidx.compose.Composer: java.util.List insertFixups>
<androidx.compose.Composer: boolean inserting>
<androidx.compose.Composer: int currentCompoundKeyHash>
<androidx.compose.Composer: int pendingUps>
<androidx.compose.Composer: androidx.compose.Stack downNodes>
<androidx.compose.Composer: int pendingInsertUps>
<androidx.compose.Composer: int writersReaderDelta>
<androidx.compose.Composer: boolean startedGroup>
<androidx.compose.Composer: androidx.compose.IntStack startedGroups>
<androidx.compose.Composer: int previousRemove>
<androidx.compose.Composer: int previousMoveFrom>
<androidx.compose.Composer: int previousMoveTo>
<androidx.compose.Composer: int previousCount>
    public void <init>(androidx.compose.SlotTable, androidx.compose.Applier, androidx.compose.Recomposer)
    {
        androidx.compose.Composer r0, r25, r27, r29, r32, r36, r39;
        androidx.compose.SlotTable r1, $r17, $r18, $r19, $r20;
        androidx.compose.Applier r2;
        androidx.compose.Recomposer r3;
        java.util.ArrayList $r4, $r10, $r16, $r22;
        java.util.HashMap $r5, $r9, $r13;
        androidx.compose.Stack $r6, $r15, $r23;
        androidx.compose.IntStack $r7, $r8, $r11, $r14, $r24;
        androidx.compose.BuildableMap $r12;
        androidx.compose.Anchor $r21;
        boolean z0, z1, z2, z3, z4, z6, z7, z9;
        java.util.List r26, r28, r30, r40;
        androidx.compose.SlotReader r31, r33, r34;
        androidx.compose.SlotWriter r35, r37, r38;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.SlotTable;

        r2 := @parameter1: androidx.compose.Applier;

        r3 := @parameter2: androidx.compose.Recomposer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotTable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "recomposer");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.SlotTable slotTable> = r1;

        r0.<androidx.compose.Composer: androidx.compose.Applier applier> = r2;

        r0.<androidx.compose.Composer: androidx.compose.Recomposer recomposer> = r3;

        r25 = r0;

        z0 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r26 = (java.util.List) $r4;

        r25.<androidx.compose.Composer: java.util.List changes> = r26;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.Composer: java.util.HashMap lifecycleObservers> = $r5;

        $r6 = new androidx.compose.Stack;

        specialinvoke $r6.<androidx.compose.Stack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack> = $r6;

        $r7 = new androidx.compose.IntStack;

        specialinvoke $r7.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack> = $r7;

        $r8 = new androidx.compose.IntStack;

        specialinvoke $r8.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.IntStack groupNodeCountStack> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides> = $r9;

        r27 = r0;

        z1 = 0;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r28 = (java.util.List) $r10;

        r27.<androidx.compose.Composer: java.util.List invalidations> = r28;

        $r11 = new androidx.compose.IntStack;

        specialinvoke $r11.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.IntStack entersStack> = $r11;

        $r12 = staticinvoke <androidx.compose.ActualJvmKt: androidx.compose.BuildableMap buildableMapOf()>();

        r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.Composer: java.util.HashMap providerUpdates> = $r13;

        $r14 = new androidx.compose.IntStack;

        specialinvoke $r14.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack> = $r14;

        $r15 = new androidx.compose.Stack;

        specialinvoke $r15.<androidx.compose.Stack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack> = $r15;

        r29 = r0;

        z2 = 0;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r30 = (java.util.List) $r16;

        r29.<androidx.compose.Composer: java.util.List changesAppliedObservers> = r30;

        $r17 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        r31 = virtualinvoke $r17.<androidx.compose.SlotTable: androidx.compose.SlotReader openReader()>();

        r32 = r0;

        z3 = 0;

        z4 = 0;

        r33 = r31;

        virtualinvoke r33.<androidx.compose.SlotReader: void close()>();

        r34 = r31;

        r32.<androidx.compose.Composer: androidx.compose.SlotReader reader> = r34;

        $r18 = new androidx.compose.SlotTable;

        specialinvoke $r18.<androidx.compose.SlotTable: void <init>(java.lang.Object[],int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable> = $r18;

        $r19 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        r35 = virtualinvoke $r19.<androidx.compose.SlotTable: androidx.compose.SlotWriter openWriter()>();

        r36 = r0;

        z6 = 0;

        z7 = 0;

        r37 = r35;

        virtualinvoke r37.<androidx.compose.SlotWriter: void close()>();

        r38 = r35;

        r36.<androidx.compose.Composer: androidx.compose.SlotWriter writer> = r38;

        $r20 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        $r21 = virtualinvoke $r20.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>(0);

        r0.<androidx.compose.Composer: androidx.compose.Anchor insertAnchor> = $r21;

        r39 = r0;

        z9 = 0;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r40 = (java.util.List) $r22;

        r39.<androidx.compose.Composer: java.util.List insertFixups> = r40;

        $r23 = new androidx.compose.Stack;

        specialinvoke $r23.<androidx.compose.Stack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.Stack downNodes> = $r23;

        $r24 = new androidx.compose.IntStack;

        specialinvoke $r24.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups> = $r24;

        r0.<androidx.compose.Composer: int previousRemove> = -1;

        r0.<androidx.compose.Composer: int previousMoveFrom> = -1;

        r0.<androidx.compose.Composer: int previousMoveTo> = -1;

        return;
    }

    public final androidx.compose.SlotTable getSlotTable()
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotTable $r1;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotTable slotTable>;

        return $r1;
    }

    public final androidx.compose.Recomposer getRecomposer()
    {
        androidx.compose.Composer r0;
        androidx.compose.Recomposer $r1;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.Recomposer recomposer>;

        return $r1;
    }

    public static void getRecomposer$annotations()
    {
        return;
    }

    public final androidx.compose.CompositionReference getParentReference$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.CompositionReference $r1;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.CompositionReference parentReference>;

        return $r1;
    }

    public final void setParentReference$compose_runtime_release(androidx.compose.CompositionReference)
    {
        androidx.compose.Composer r0;
        androidx.compose.CompositionReference r1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.CompositionReference;

        r0.<androidx.compose.Composer: androidx.compose.CompositionReference parentReference> = r1;

        return;
    }

    public final boolean isComposing$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        boolean $z0;

        r0 := @this: androidx.compose.Composer;

        $z0 = r0.<androidx.compose.Composer: boolean isComposing>;

        return $z0;
    }

    public final void setComposing$compose_runtime_release(boolean)
    {
        androidx.compose.Composer r0;
        boolean z0;

        r0 := @this: androidx.compose.Composer;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.Composer: boolean isComposing> = z0;

        return;
    }

    private final void dispatchChangesAppliedObservers()
    {
        androidx.compose.Composer r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function0[] r2, $r7, r16;
        int i0, i1;
        kotlin.jvm.functions.Function0 r3, r4;
        androidx.compose.Trace $r5, $r10, $r14;
        java.util.List $r6, $r9;
        java.lang.Object[] $r8;
        kotlin.TypeCastException $r12;
        java.lang.Throwable $r13, r18;
        java.util.Collection r15;
        kotlin.Unit r17;

        r0 := @this: androidx.compose.Composer;

        r1 = "Compose:dispatchChangesAppliedObservers";

        $r5 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r5.<androidx.compose.Trace: void beginSection(java.lang.String)>(r1);

     label1:
        $r6 = r0.<androidx.compose.Composer: java.util.List changesAppliedObservers>;

        r15 = (java.util.Collection) $r6;

        $r7 = newarray (kotlin.jvm.functions.Function0)[0];

        $r8 = interfaceinvoke r15.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        if $r8 != null goto label2;

        $r12 = new kotlin.TypeCastException;

        specialinvoke $r12.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r12;

     label2:
        r2 = (kotlin.jvm.functions.Function0[]) $r8;

        $r9 = r0.<androidx.compose.Composer: java.util.List changesAppliedObservers>;

        interfaceinvoke $r9.<java.util.List: void clear()>();

        r16 = r2;

        i0 = lengthof r16;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r3 = r16[i1];

        r4 = r3;

        interfaceinvoke r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        i1 = i1 + 1;

        goto label3;

     label4:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        $r10 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r10.<androidx.compose.Trace: void endSection()>();

        goto label8;

     label6:
        $r13 := @caughtexception;

        r18 = $r13;

     label7:
        $r14 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r14.<androidx.compose.Trace: void endSection()>();

        throw r18;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void addChangesAppliedObserver$compose_runtime_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function0 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "l");

        $r2 = r0.<androidx.compose.Composer: java.util.List changesAppliedObservers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void removeChangesAppliedObserver$compose_runtime_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function0 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "l");

        $r2 = r0.<androidx.compose.Composer: java.util.List changesAppliedObservers>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected final void composeRoot(kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.OpaqueKey $r2;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        virtualinvoke r0.<androidx.compose.Composer: void startRoot$compose_runtime_release()>();

        $r2 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getInvocation()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int,java.lang.Object)>(200, $r2);

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.Composer: void endRoot$compose_runtime_release()>();

        return;
    }

    public final void startReplaceableGroup(int)
    {
        androidx.compose.Composer r0;
        int i0;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        return;
    }

    public final void endReplaceableGroup()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        return;
    }

    public final void startDefaults()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(0, null, 0, null);

        return;
    }

    public final void endDefaults()
    {
        androidx.compose.Composer r0;
        androidx.compose.RecomposeScope r1;
        boolean $z0;

        r0 := @this: androidx.compose.Composer;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        r1 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.RecomposeScope getCurrentRecomposeScope$compose_runtime_release()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getUsed()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.compose.RecomposeScope: void setDefaultsInScope(boolean)>(1);

     label1:
        return;
    }

    public final boolean getDefaultsInvalid()
    {
        androidx.compose.Composer r0;
        androidx.compose.RecomposeScope r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r2, $r3;

        r0 := @this: androidx.compose.Composer;

        $z0 = r0.<androidx.compose.Composer: boolean providersInvalid>;

        if $z0 != 0 goto label3;

        r1 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.RecomposeScope getCurrentRecomposeScope$compose_runtime_release()>();

        if r1 != null goto label1;

        $r3 = (java.lang.Boolean) null;

        goto label2;

     label1:
        $z1 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getDefaultsInvalid()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public static void getDefaultsInvalid$annotations()
    {
        return;
    }

    public final void startMovableGroup(int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, null);

        return;
    }

    public final void endMovableGroup()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        return;
    }

    public final void call(java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 r2;
        kotlin.jvm.functions.Function0 r3;
        java.lang.String r4, $r6;
        boolean z1;
        java.lang.IllegalStateException $r5;
        java.lang.Throwable $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invalid");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "block");

        r4 = "This method should not be executed unless you are using an out of date Compose Compiler Plugin";

        z1 = 0;

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;
    }

    public final void startRoot$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.CompositionReference r1, r2, r3;
        boolean z0, z1, z3, z4, $z6, $z7, $z8;
        java.util.Set r4, r5, r6;
        androidx.compose.SlotTable $r7, $r16;
        androidx.compose.SlotReader $r8;
        androidx.compose.BuildableMap $r9, $r11, $r13;
        androidx.compose.IntStack $r10;
        int $i0, $i1;
        androidx.compose.ProvidableAmbient $r12;
        androidx.compose.Ambient $r14;
        java.lang.Object $r15;

        r0 := @this: androidx.compose.Composer;

        $r7 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $r8 = virtualinvoke $r7.<androidx.compose.SlotTable: androidx.compose.SlotReader openReader()>();

        r0.<androidx.compose.Composer: androidx.compose.SlotReader reader> = $r8;

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int)>(100);

        r1 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if r1 != null goto label1;

        goto label4;

     label1:
        r2 = r1;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r9 = virtualinvoke r3.<androidx.compose.CompositionReference: androidx.compose.BuildableMap getAmbientScope$compose_runtime_release()>();

        r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider> = $r9;

        $r10 = r0.<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack>;

        $z6 = r0.<androidx.compose.Composer: boolean providersInvalid>;

        $i0 = staticinvoke <androidx.compose.ComposerKt: int access$asInt(boolean)>($z6);

        virtualinvoke $r10.<androidx.compose.IntStack: void push(int)>($i0);

        $r11 = r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider>;

        $z7 = virtualinvoke r0.<androidx.compose.Composer: boolean changed(java.lang.Object)>($r11);

        r0.<androidx.compose.Composer: boolean providersInvalid> = $z7;

        $z8 = virtualinvoke r3.<androidx.compose.CompositionReference: boolean getCollectingKeySources$compose_runtime_release()>();

        r0.<androidx.compose.Composer: boolean collectKeySources> = $z8;

        $r12 = staticinvoke <androidx.compose.tooling.InspectionTablesKt: androidx.compose.ProvidableAmbient getInspectionTables()>();

        $r14 = (androidx.compose.Ambient) $r12;

        $r13 = r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider>;

        $r15 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object resolveAmbient(androidx.compose.Ambient,androidx.compose.BuildableMap)>($r14, $r13);

        r4 = (java.util.Set) $r15;

        if r4 != null goto label2;

        goto label3;

     label2:
        r5 = r4;

        z3 = 0;

        z4 = 0;

        r6 = r5;

        $r16 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r16);

        virtualinvoke r3.<androidx.compose.CompositionReference: void recordInspectionTable$compose_runtime_release(java.util.Set)>(r6);

     label3:
        $i1 = virtualinvoke r3.<androidx.compose.CompositionReference: int getCompoundHashKey$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int)>($i1);

     label4:
        return;
    }

    public final void endRoot$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.CompositionReference $r1;
        androidx.compose.SlotReader $r2;

        r0 := @this: androidx.compose.Composer;

        $r1 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if $r1 == null goto label1;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

     label1:
        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        specialinvoke r0.<androidx.compose.Composer: void recordEndRoot()>();

        specialinvoke r0.<androidx.compose.Composer: void finalizeCompose()>();

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r2.<androidx.compose.SlotReader: void close()>();

        return;
    }

    public final void abortRoot$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.Stack $r1, $r6;
        androidx.compose.IntStack $r2, $r3, $r4, $r5;
        androidx.compose.SlotReader $r7;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void cleanUpCompose()>();

        $r1 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        virtualinvoke $r1.<androidx.compose.Stack: void clear()>();

        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        virtualinvoke $r2.<androidx.compose.IntStack: void clear()>();

        $r3 = r0.<androidx.compose.Composer: androidx.compose.IntStack groupNodeCountStack>;

        virtualinvoke $r3.<androidx.compose.IntStack: void clear()>();

        $r4 = r0.<androidx.compose.Composer: androidx.compose.IntStack entersStack>;

        virtualinvoke $r4.<androidx.compose.IntStack: void clear()>();

        $r5 = r0.<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack>;

        virtualinvoke $r5.<androidx.compose.IntStack: void clear()>();

        $r6 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        virtualinvoke $r6.<androidx.compose.Stack: void clear()>();

        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r7.<androidx.compose.SlotReader: void close()>();

        r0.<androidx.compose.Composer: int currentCompoundKeyHash> = 0;

        r0.<androidx.compose.Composer: boolean nodeExpected> = 0;

        return;
    }

    public final boolean getInserting()
    {
        androidx.compose.Composer r0;
        boolean $z0;

        r0 := @this: androidx.compose.Composer;

        $z0 = r0.<androidx.compose.Composer: boolean inserting>;

        return $z0;
    }

    public static void getInserting$annotations()
    {
        return;
    }

    public final boolean getSkipping()
    {
        androidx.compose.Composer r0;
        androidx.compose.RecomposeScope r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Boolean $r2, $r3;

        r0 := @this: androidx.compose.Composer;

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 != 0 goto label3;

        $z1 = r0.<androidx.compose.Composer: boolean providersInvalid>;

        if $z1 != 0 goto label3;

        r1 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.RecomposeScope getCurrentRecomposeScope$compose_runtime_release()>();

        if r1 != null goto label1;

        $r3 = (java.lang.Boolean) null;

        goto label2;

     label1:
        $z2 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getRequiresRecompose()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public static void getSkipping$annotations()
    {
        return;
    }

    public final int getCurrentCompoundKeyHash()
    {
        androidx.compose.Composer r0;
        int $i0;

        r0 := @this: androidx.compose.Composer;

        $i0 = r0.<androidx.compose.Composer: int currentCompoundKeyHash>;

        return $i0;
    }

    public static void getCurrentCompoundKeyHash$annotations()
    {
        return;
    }

    public final void collectKeySourceInformation()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        r0.<androidx.compose.Composer: boolean collectKeySources> = 1;

        return;
    }

    public final void applyChanges()
    {
        androidx.compose.Composer r0;
        java.lang.String r1;
        java.util.Set r2, r40;
        androidx.compose.Invalidation r3, r48;
        java.util.Collection r4, r43, r50, r53;
        kotlin.Pair r5, $r46;
        java.util.List r6, $r12, $r24;
        androidx.compose.Trace $r7, $r19, $r20, $r37, $r39, $r49;
        androidx.compose.Stack $r8;
        java.util.LinkedHashSet $r9, $r10;
        androidx.compose.Composer$applyChanges$1$manager$1 $r11, r41;
        java.util.ArrayList $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z3, $z4, $z5, z7, z8, $z14, $z15, $z16, $z18;
        androidx.compose.SlotTable $r14, $r33, $r34;
        androidx.compose.Composer$applyChanges$1$1 $r15;
        kotlin.jvm.functions.Function1 $r16;
        java.util.HashMap $r18, $r27;
        java.lang.Object $r21, $r25, $r28, $r30, $r31, $r32, r45;
        androidx.compose.CompositionLifecycleObserver $r22, $r26;
        java.lang.Iterable $r23, $r42;
        androidx.compose.CompositionLifecycleObserverHolder $r29, $r52, $r55;
        androidx.compose.Anchor $r35, r47;
        java.lang.Throwable $r36, $r38, r57, r59;
        java.util.Iterator r44, r51, r54;
        kotlin.Unit r56, r58;

        r0 := @this: androidx.compose.Composer;

        r1 = "Compose:applyChanges";

        $r7 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r7.<androidx.compose.Trace: void beginSection(java.lang.String)>(r1);

     label01:
        $r8 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        virtualinvoke $r8.<androidx.compose.Stack: void clear()>();

        z7 = 0;

        $r9 = new java.util.LinkedHashSet;

        specialinvoke $r9.<java.util.LinkedHashSet: void <init>()>();

        r2 = (java.util.Set) $r9;

        z8 = 0;

        $r10 = new java.util.LinkedHashSet;

        specialinvoke $r10.<java.util.LinkedHashSet: void <init>()>();

        r40 = (java.util.Set) $r10;

        $r11 = new androidx.compose.Composer$applyChanges$1$manager$1;

        specialinvoke $r11.<androidx.compose.Composer$applyChanges$1$manager$1: void <init>(androidx.compose.Composer,java.util.Set,java.util.Set)>(r0, r2, r40);

        r41 = $r11;

        $r12 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $r42 = (java.lang.Iterable) $r12;

        $r13 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r42, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i0);

        r43 = (java.util.Collection) $r13;

        r44 = interfaceinvoke $r42.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label03;

        r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.Invalidation) r45;

        r4 = r43;

        $r34 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $i3 = virtualinvoke r3.<androidx.compose.Invalidation: int getLocation()>();

        $r35 = virtualinvoke $r34.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>($i3);

        r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r35, r3);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label02;

     label03:
        r6 = (java.util.List) r43;

        $r14 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $r15 = new androidx.compose.Composer$applyChanges$1$1;

        specialinvoke $r15.<androidx.compose.Composer$applyChanges$1$1: void <init>(androidx.compose.Composer,androidx.compose.Composer$applyChanges$1$manager$1)>(r0, r41);

        $r16 = (kotlin.jvm.functions.Function1) $r15;

        virtualinvoke $r14.<androidx.compose.SlotTable: java.lang.Object write(kotlin.jvm.functions.Function1)>($r16);

        $r18 = r0.<androidx.compose.Composer: java.util.HashMap providerUpdates>;

        virtualinvoke $r18.<java.util.HashMap: void clear()>();

        $i4 = interfaceinvoke r6.<java.util.List: int size()>();

        $i5 = 0;

        $i6 = $i4 + -1;

        if $i4 == -2147483648 goto label05;

        if 0 > $i6 goto label05;

     label04:
        i7 = $i5;

        $i5 = $i5 + 1;

        $r30 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i7);

        $r46 = (kotlin.Pair) $r30;

        $r31 = virtualinvoke $r46.<kotlin.Pair: java.lang.Object component1()>();

        r47 = (androidx.compose.Anchor) $r31;

        $r32 = virtualinvoke $r46.<kotlin.Pair: java.lang.Object component2()>();

        r48 = (androidx.compose.Invalidation) $r32;

        $r33 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $i2 = virtualinvoke $r33.<androidx.compose.SlotTable: int anchorLocation$compose_runtime_release(androidx.compose.Anchor)>(r47);

        virtualinvoke r48.<androidx.compose.Invalidation: void setLocation(int)>($i2);

        if $i5 <= $i6 goto label04;

     label05:
        $r49 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r49.<androidx.compose.Trace: void beginSection(java.lang.String)>("Compose:lifecycles");

     label06:
        r50 = (java.util.Collection) r40;

        $z14 = interfaceinvoke r50.<java.util.Collection: boolean isEmpty()>();

        if $z14 != 0 goto label07;

        $z15 = 1;

        goto label08;

     label07:
        $z15 = 0;

     label08:
        if $z15 == 0 goto label10;

        $r23 = (java.lang.Iterable) r40;

        $r24 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List reversed(java.lang.Iterable)>($r23);

        r51 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z16 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label10;

        $r25 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        $r52 = (androidx.compose.CompositionLifecycleObserverHolder) $r25;

        $i1 = virtualinvoke $r52.<androidx.compose.CompositionLifecycleObserverHolder: int getCount()>();

        if $i1 != 0 goto label09;

        $r26 = virtualinvoke $r52.<androidx.compose.CompositionLifecycleObserverHolder: androidx.compose.CompositionLifecycleObserver getInstance()>();

        interfaceinvoke $r26.<androidx.compose.CompositionLifecycleObserver: void onLeave()>();

        $r27 = r0.<androidx.compose.Composer: java.util.HashMap lifecycleObservers>;

        $r28 = virtualinvoke $r27.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r52);

        $r29 = (androidx.compose.CompositionLifecycleObserverHolder) $r28;

        goto label09;

     label10:
        r53 = (java.util.Collection) r2;

        $z4 = interfaceinvoke r53.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label11;

        $z18 = 1;

        goto label12;

     label11:
        $z18 = 0;

     label12:
        if $z18 == 0 goto label14;

        r54 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r21 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        $r55 = (androidx.compose.CompositionLifecycleObserverHolder) $r21;

        $r22 = virtualinvoke $r55.<androidx.compose.CompositionLifecycleObserverHolder: androidx.compose.CompositionLifecycleObserver getInstance()>();

        interfaceinvoke $r22.<androidx.compose.CompositionLifecycleObserver: void onEnter()>();

        goto label13;

     label14:
        r56 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label15:
        $r19 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r19.<androidx.compose.Trace: void endSection()>();

        goto label18;

     label16:
        $r36 := @caughtexception;

        r57 = $r36;

     label17:
        $r37 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r37.<androidx.compose.Trace: void endSection()>();

        throw r57;

     label18:
        specialinvoke r0.<androidx.compose.Composer: void dispatchChangesAppliedObservers()>();

        r58 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label19:
        $r20 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r20.<androidx.compose.Trace: void endSection()>();

        goto label22;

     label20:
        $r38 := @caughtexception;

        r59 = $r38;

     label21:
        $r39 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r39.<androidx.compose.Trace: void endSection()>();

        throw r59;

     label22:
        return;

        catch java.lang.Throwable from label06 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label01 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public final void startGroup$compose_runtime_release(int)
    {
        androidx.compose.Composer r0;
        int i0;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        return;
    }

    public final void startGroup$compose_runtime_release(int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, null);

        return;
    }

    public final void endGroup$compose_runtime_release()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void end(boolean)>(0);

        return;
    }

    private final void skipGroup()
    {
        androidx.compose.Composer r0, r1;
        androidx.compose.SlotReader $r2;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.Composer;

        r1 = r0;

        $i0 = r1.<androidx.compose.Composer: int groupNodeCount>;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i1 = virtualinvoke $r2.<androidx.compose.SlotReader: int skipGroup()>();

        $i2 = $i0 + $i1;

        r1.<androidx.compose.Composer: int groupNodeCount> = $i2;

        return;
    }

    public final void startNode(java.lang.Object)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(125, r1, 1, null);

        r0.<androidx.compose.Composer: boolean nodeExpected> = 1;

        return;
    }

    public final void emitNode(kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0, r2;
        kotlin.jvm.functions.Function0 r1;
        int i0, i1, $i2;
        boolean $z0;
        androidx.compose.SlotReader $r3;
        java.lang.Object $r4;
        androidx.compose.IntStack $r5;
        androidx.compose.Composer$emitNode$1 $r6;
        kotlin.jvm.functions.Function3 $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        specialinvoke r0.<androidx.compose.Composer: void validateNodeExpected()>();

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        i0 = virtualinvoke $r5.<androidx.compose.IntStack: int peek()>();

        r2 = r0;

        i1 = r2.<androidx.compose.Composer: int groupNodeCount>;

        $i2 = i1 + 1;

        r2.<androidx.compose.Composer: int groupNodeCount> = $i2;

        $r6 = new androidx.compose.Composer$emitNode$1;

        specialinvoke $r6.<androidx.compose.Composer$emitNode$1: void <init>(kotlin.jvm.functions.Function0,androidx.compose.Composer,int)>(r1, r0, i0);

        $r7 = (kotlin.jvm.functions.Function3) $r6;

        specialinvoke r0.<androidx.compose.Composer: void recordFixup(kotlin.jvm.functions.Function3)>($r7);

        goto label2;

     label1:
        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r4 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object getNode(androidx.compose.SlotReader)>($r3);

        specialinvoke r0.<androidx.compose.Composer: void recordDown(java.lang.Object)>($r4);

     label2:
        return;
    }

    public final void createNode(kotlin.jvm.functions.Function0)
    {
        androidx.compose.Composer r0, r11;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.IntStack $r2;
        int $i0, i1, i2;
        androidx.compose.Composer$createNode$2 $r3;
        kotlin.jvm.functions.Function3 $r4;
        androidx.compose.SlotWriter $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8, r10;
        java.lang.Throwable $r9;
        boolean z1, z2, z3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        specialinvoke r0.<androidx.compose.Composer: void validateNodeExpected()>();

        z1 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label1;

        r10 = "createNode() can only be called when inserting";

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        $r9 = (java.lang.Throwable) $r7;

        throw $r9;

     label1:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        i1 = virtualinvoke $r2.<androidx.compose.IntStack: int peek()>();

        r11 = r0;

        i2 = r11.<androidx.compose.Composer: int groupNodeCount>;

        $i0 = i2 + 1;

        r11.<androidx.compose.Composer: int groupNodeCount> = $i0;

        $r3 = new androidx.compose.Composer$createNode$2;

        specialinvoke $r3.<androidx.compose.Composer$createNode$2: void <init>(kotlin.jvm.functions.Function0,androidx.compose.Composer,int)>(r1, r0, i1);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.Composer: void recordFixup(kotlin.jvm.functions.Function3)>($r4);

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r5.<androidx.compose.SlotWriter: java.lang.Object skip()>();

        return;
    }

    public final void emitNode(java.lang.Object)
    {
        androidx.compose.Composer r0, r10;
        java.lang.Object r1;
        androidx.compose.IntStack $r2;
        int $i0, i1, i2;
        androidx.compose.SlotWriter $r3;
        androidx.compose.Composer$emitNode$3 $r4;
        kotlin.jvm.functions.Function3 $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, r9;
        java.lang.Throwable $r8;
        boolean z1, z2, z3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<androidx.compose.Composer: void validateNodeExpected()>();

        z1 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label1;

        r9 = "emitNode() called when not inserting";

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label1:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        i1 = virtualinvoke $r2.<androidx.compose.IntStack: int peek()>();

        r10 = r0;

        i2 = r10.<androidx.compose.Composer: int groupNodeCount>;

        $i0 = i2 + 1;

        r10.<androidx.compose.Composer: int groupNodeCount> = $i0;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        specialinvoke r0.<androidx.compose.Composer: void setNode(androidx.compose.SlotWriter,java.lang.Object)>($r3, r1);

        $r4 = new androidx.compose.Composer$emitNode$3;

        specialinvoke $r4.<androidx.compose.Composer$emitNode$3: void <init>(int,java.lang.Object)>(i1, r1);

        $r5 = (kotlin.jvm.functions.Function3) $r4;

        specialinvoke r0.<androidx.compose.Composer: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r5);

        return;
    }

    public final java.lang.Object useNode()
    {
        androidx.compose.Composer r0;
        boolean z0, $z2, $z3, z4, z5;
        androidx.compose.SlotReader $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, r5;
        java.lang.Throwable $r4;
        java.lang.Object r6;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void validateNodeExpected()>();

        $z2 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z4 = $z3;

        z0 = 0;

        z5 = 0;

        if z4 != 0 goto label3;

        r5 = "useNode() called while inserting";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label3:
        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r6 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object getNode(androidx.compose.SlotReader)>($r1);

        specialinvoke r0.<androidx.compose.Composer: void recordDown(java.lang.Object)>(r6);

        return r6;
    }

    public final void endNode()
    {
        androidx.compose.Composer r0;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void end(boolean)>(1);

        return;
    }

    public final void apply$compose_runtime_release(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.Composer$apply$1 $r3;
        kotlin.jvm.functions.Function3 $r4;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r3 = new androidx.compose.Composer$apply$1;

        specialinvoke $r3.<androidx.compose.Composer$apply$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object)>(r2, r1);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.Composer: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r4);

        return;
    }

    public final java.lang.Object joinKey(java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1, r2, r3, $r5, $r6;
        androidx.compose.SlotReader $r4;
        androidx.compose.JoinedKey r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r5 = virtualinvoke $r4.<androidx.compose.SlotReader: java.lang.Object getGroupDataKey()>();

        r3 = staticinvoke <androidx.compose.ComposerKt: java.lang.Object access$getKey(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r1, r2);

        if r3 != null goto label1;

        r7 = new androidx.compose.JoinedKey;

        $r6 = r7;

        specialinvoke r7.<androidx.compose.JoinedKey: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label2;

     label1:
        $r6 = r3;

     label2:
        return $r6;
    }

    public final java.lang.Object nextSlot()
    {
        androidx.compose.Composer r0;
        boolean $z0;
        androidx.compose.SlotReader $r1;
        androidx.compose.SlotTable$Companion $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.compose.Composer: void validateNodeNotExpected()>();

        $r2 = <androidx.compose.SlotTable: androidx.compose.SlotTable$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.SlotTable$Companion: java.lang.Object getEMPTY()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r3 = virtualinvoke $r1.<androidx.compose.SlotReader: java.lang.Object next()>();

     label2:
        return $r3;
    }

    public final boolean changed(java.lang.Object)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>(r1);

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean changed(char)
    {
        androidx.compose.Composer r0;
        char c0, c1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Character $r2, $r3;

        r0 := @this: androidx.compose.Composer;

        c0 := @parameter0: char;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Character) r1;

        c1 = virtualinvoke $r3.<java.lang.Character: char charValue()>();

        if c0 != c1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(byte)
    {
        androidx.compose.Composer r0;
        byte b0, b1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Byte $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.Composer;

        b0 := @parameter0: byte;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Byte;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        b1 = virtualinvoke $r3.<java.lang.Number: byte byteValue()>();

        if b0 != b1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(short)
    {
        androidx.compose.Composer r0;
        short s0, s1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Short $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.Composer;

        s0 := @parameter0: short;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Short;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        s1 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        if s0 != s1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(boolean)
    {
        androidx.compose.Composer r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: androidx.compose.Composer;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z2 = r1 instanceof java.lang.Boolean;

        if $z2 == 0 goto label1;

        $r3 = (java.lang.Boolean) r1;

        z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if z0 != z1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(float)
    {
        androidx.compose.Composer r0;
        float f0, f1;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Float $r2;
        java.lang.Number $r3;
        byte $b0;

        r0 := @this: androidx.compose.Composer;

        f0 := @parameter0: float;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Number) r1;

        f1 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $b0 = f0 cmpg f1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(long)
    {
        androidx.compose.Composer r0;
        long l0, l1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Long $r2;
        java.lang.Number $r3;
        byte $b2;

        r0 := @this: androidx.compose.Composer;

        l0 := @parameter0: long;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        l1 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        $b2 = l0 cmp l1;

        if $b2 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(double)
    {
        androidx.compose.Composer r0;
        double d0, d1;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Double $r2;
        java.lang.Number $r3;
        byte $b0;

        r0 := @this: androidx.compose.Composer;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Number) r1;

        d1 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        $b0 = d0 cmpg d1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final boolean changed(int)
    {
        androidx.compose.Composer r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Integer $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        i1 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        if i0 != i1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final void updateValue(java.lang.Object)
    {
        androidx.compose.Composer r0, r2;
        java.lang.Object r1;
        int i0, $i1;
        boolean $z0, $z1;
        androidx.compose.Composer$updateValue$2 $r3;
        kotlin.jvm.functions.Function3 $r4, $r8;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Composer$updateValue$1 $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r5.<androidx.compose.SlotWriter: java.lang.Object update(java.lang.Object)>(r1);

        $z1 = r1 instanceof androidx.compose.CompositionLifecycleObserver;

        if $z1 == 0 goto label2;

        $r7 = new androidx.compose.Composer$updateValue$1;

        specialinvoke $r7.<androidx.compose.Composer$updateValue$1: void <init>(java.lang.Object)>(r1);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>($r8);

        goto label2;

     label1:
        $r3 = new androidx.compose.Composer$updateValue$2;

        specialinvoke $r3.<androidx.compose.Composer$updateValue$2: void <init>(java.lang.Object)>(r1);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.Composer: void recordSlotTableOperation(int,kotlin.jvm.functions.Function3)>(-1, $r4);

        r2 = r0;

        i0 = r2.<androidx.compose.Composer: int writersReaderDelta>;

        $i1 = i0 + 1;

        r2.<androidx.compose.Composer: int writersReaderDelta> = $i1;

     label2:
        return;
    }

    private final androidx.compose.BuildableMap currentAmbientScope()
    {
        androidx.compose.Composer r0;
        boolean $z0, $z1;
        androidx.compose.BuildableMap $r1, $r13, r19, $r21, r22;
        androidx.compose.SlotReader $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4, $r7, $r11, r16, r20;
        androidx.compose.OpaqueKey $r5, $r12;
        java.util.HashMap $r6;
        java.lang.NullPointerException $r8, $r14;
        androidx.compose.SlotWriter $r9, $r10;
        androidx.compose.Group r15, r18;
        androidx.compose.SlotTable $r17;

        r0 := @this: androidx.compose.Composer;

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label04;

        $z1 = r0.<androidx.compose.Composer: boolean hasProvider>;

        if $z1 == 0 goto label04;

        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $r9 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $i2 = virtualinvoke $r9.<androidx.compose.SlotWriter: int getParentLocation()>();

        r15 = virtualinvoke $r10.<androidx.compose.SlotWriter: androidx.compose.Group group$compose_runtime_release(int)>($i2);

     label01:
        if r15 == null goto label04;

        $i3 = virtualinvoke r15.<androidx.compose.Group: int getKey()>();

        if $i3 != 202 goto label03;

        $r11 = virtualinvoke r15.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $r12 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getAmbientMap()>();

        if $r11 != $r12 goto label03;

        r16 = virtualinvoke r15.<androidx.compose.Group: java.lang.Object getData()>();

        if r16 != null goto label02;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.BuildableMap<androidx.compose.Ambient<kotlin.Any?>, androidx.compose.State<kotlin.Any?>>{ androidx.compose.ComposerKt.AmbientMap }");

        throw $r14;

     label02:
        $r13 = (androidx.compose.BuildableMap) r16;

        return $r13;

     label03:
        r15 = virtualinvoke r15.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label01;

     label04:
        $r17 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $i4 = virtualinvoke $r17.<androidx.compose.SlotTable: int getSize()>();

        if $i4 <= 0 goto label10;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i0 = virtualinvoke $r2.<androidx.compose.SlotReader: int getParentLocation()>();

        r18 = virtualinvoke $r3.<androidx.compose.SlotReader: androidx.compose.Group group$compose_runtime_release(int)>($i0);

     label05:
        if r18 == null goto label10;

        $i1 = virtualinvoke r18.<androidx.compose.Group: int getKey()>();

        if $i1 != 202 goto label09;

        $r4 = virtualinvoke r18.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $r5 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getAmbientMap()>();

        if $r4 != $r5 goto label09;

        $r6 = r0.<androidx.compose.Composer: java.util.HashMap providerUpdates>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r18);

        r19 = (androidx.compose.BuildableMap) $r7;

        if r19 != null goto label07;

        r20 = virtualinvoke r18.<androidx.compose.Group: java.lang.Object getData()>();

        if r20 != null goto label06;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.BuildableMap<androidx.compose.Ambient<kotlin.Any?>, androidx.compose.State<kotlin.Any?>>{ androidx.compose.ComposerKt.AmbientMap }");

        throw $r8;

     label06:
        $r21 = (androidx.compose.BuildableMap) r20;

        goto label08;

     label07:
        r22 = r19;

        $r21 = r22;

     label08:
        return $r21;

     label09:
        r18 = virtualinvoke r18.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label05;

     label10:
        $r1 = r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider>;

        return $r1;
    }

    private final androidx.compose.BuildableMap ambientScopeAt(int)
    {
        androidx.compose.Composer r0;
        int i0, $i1;
        androidx.compose.BuildableMap r1, $r2, $r12, $r15, r16;
        boolean $z0;
        androidx.compose.SlotTable $r3;
        androidx.compose.Composer$ambientScopeAt$group$1 $r4;
        kotlin.jvm.functions.Function1 $r5;
        java.lang.Object $r6, $r7, $r10, r14;
        androidx.compose.OpaqueKey $r8;
        java.util.HashMap $r9;
        java.lang.NullPointerException $r11;
        androidx.compose.Group r13;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean isComposing$compose_runtime_release()>();

        if $z0 == 0 goto label1;

        $r12 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap currentAmbientScope()>();

        return $r12;

     label1:
        if i0 < 0 goto label7;

        $r3 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $r4 = new androidx.compose.Composer$ambientScopeAt$group$1;

        specialinvoke $r4.<androidx.compose.Composer$ambientScopeAt$group$1: void <init>(int)>(i0);

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        $r6 = virtualinvoke $r3.<androidx.compose.SlotTable: java.lang.Object read(kotlin.jvm.functions.Function1)>($r5);

        r13 = (androidx.compose.Group) $r6;

     label2:
        if r13 == null goto label7;

        $i1 = virtualinvoke r13.<androidx.compose.Group: int getKey()>();

        if $i1 != 202 goto label6;

        $r7 = virtualinvoke r13.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $r8 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getAmbientMap()>();

        if $r7 != $r8 goto label6;

        $r9 = r0.<androidx.compose.Composer: java.util.HashMap providerUpdates>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        r1 = (androidx.compose.BuildableMap) $r10;

        if r1 != null goto label4;

        r14 = virtualinvoke r13.<androidx.compose.Group: java.lang.Object getData()>();

        if r14 != null goto label3;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.BuildableMap<androidx.compose.Ambient<kotlin.Any?>, androidx.compose.State<kotlin.Any?>>{ androidx.compose.ComposerKt.AmbientMap }");

        throw $r11;

     label3:
        $r15 = (androidx.compose.BuildableMap) r14;

        goto label5;

     label4:
        r16 = r1;

        $r15 = r16;

     label5:
        return $r15;

     label6:
        r13 = virtualinvoke r13.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label2;

     label7:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.BuildableMap parentProvider>;

        return $r2;
    }

    private final androidx.compose.BuildableMap updateProviderMapGroup(androidx.compose.BuildableMap, androidx.compose.BuildableMap)
    {
        androidx.compose.Composer r0;
        androidx.compose.BuildableMap r1, r2, r3;
        androidx.compose.BuildableMapBuilder r4;
        boolean z1, z2;
        java.util.Map r5, $r6;
        androidx.compose.OpaqueKey $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.BuildableMap;

        r2 := @parameter1: androidx.compose.BuildableMap;

        r4 = virtualinvoke r1.<androidx.compose.BuildableMap: androidx.compose.BuildableMapBuilder builder$compose_runtime_release()>();

        z1 = 0;

        z2 = 0;

        r5 = (java.util.Map) r4;

        $r6 = (java.util.Map) r2;

        interfaceinvoke r5.<java.util.Map: void putAll(java.util.Map)>($r6);

        r3 = virtualinvoke r4.<androidx.compose.BuildableMapBuilder: androidx.compose.BuildableMap build()>();

        $r7 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getProviderMaps()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int,java.lang.Object)>(204, $r7);

        virtualinvoke r0.<androidx.compose.Composer: boolean changed(java.lang.Object)>(r3);

        virtualinvoke r0.<androidx.compose.Composer: boolean changed(java.lang.Object)>(r2);

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        return r3;
    }

    public final void startProviders$compose_runtime_release(androidx.compose.ProvidedValue[])
    {
        androidx.compose.Composer r0;
        androidx.compose.ProvidedValue[] r1;
        androidx.compose.BuildableMap r2, r3, r18, r20, r21;
        java.lang.Object r4, $r9, r19;
        androidx.compose.OpaqueKey $r5, $r6, $r25;
        androidx.compose.Composer$startProviders$currentProviders$1 $r7;
        kotlin.jvm.functions.Function3 $r8;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, z7, $z8;
        androidx.compose.SlotReader $r10, $r11, $r12, $r14;
        int $i0, $i1, i2, $i3;
        java.util.HashMap $r13;
        java.lang.NullPointerException $r16, $r17;
        java.util.Map r22;
        androidx.compose.Group r23;
        androidx.compose.IntStack $r24;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.ProvidedValue[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap currentAmbientScope()>();

        $r5 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getProvider()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int,java.lang.Object)>(201, $r5);

        $r6 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getProviderValues()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int,java.lang.Object)>(203, $r6);

        $r7 = new androidx.compose.Composer$startProviders$currentProviders$1;

        specialinvoke $r7.<androidx.compose.Composer$startProviders$currentProviders$1: void <init>(androidx.compose.ProvidedValue[])>(r1);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        $r9 = staticinvoke <androidx.compose.ComposerKt: java.lang.Object invokeComposableForResult(androidx.compose.Composer,kotlin.jvm.functions.Function3)>(r0, $r8);

        r3 = (androidx.compose.BuildableMap) $r9;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label1;

        r18 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap updateProviderMapGroup(androidx.compose.BuildableMap,androidx.compose.BuildableMap)>(r2, r3);

        z5 = 0;

        r0.<androidx.compose.Composer: boolean hasProvider> = 1;

        goto label8;

     label1:
        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i2 = virtualinvoke $r10.<androidx.compose.SlotReader: int getCurrent()>();

        $r11 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i0 = i2 + 1;

        r19 = virtualinvoke $r11.<androidx.compose.SlotReader: java.lang.Object get(int)>($i0);

        if r19 != null goto label2;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.BuildableMap<androidx.compose.Ambient<kotlin.Any?>, androidx.compose.State<kotlin.Any?>>{ androidx.compose.ComposerKt.AmbientMap }");

        throw $r17;

     label2:
        r20 = (androidx.compose.BuildableMap) r19;

        $r12 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i1 = i2 + 2;

        r4 = virtualinvoke $r12.<androidx.compose.SlotReader: java.lang.Object get(int)>($i1);

        if r4 != null goto label3;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.BuildableMap<androidx.compose.Ambient<kotlin.Any?>, androidx.compose.State<kotlin.Any?>>{ androidx.compose.ComposerKt.AmbientMap }");

        throw $r16;

     label3:
        r21 = (androidx.compose.BuildableMap) r4;

        $z1 = virtualinvoke r0.<androidx.compose.Composer: boolean getSkipping()>();

        if $z1 == 0 goto label4;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r21, r3);

        if $z4 != 0 goto label7;

     label4:
        r18 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap updateProviderMapGroup(androidx.compose.BuildableMap,androidx.compose.BuildableMap)>(r2, r3);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r18, r20);

        if $z2 != 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        z5 = $z6;

        goto label8;

     label7:
        specialinvoke r0.<androidx.compose.Composer: void skipGroup()>();

        r18 = r20;

        z5 = 0;

     label8:
        if z5 == 0 goto label9;

        $z3 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z3 != 0 goto label9;

        $r13 = r0.<androidx.compose.Composer: java.util.HashMap providerUpdates>;

        r22 = (java.util.Map) $r13;

        $r14 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r23 = virtualinvoke $r14.<androidx.compose.SlotReader: androidx.compose.Group getGroup$compose_runtime_release()>();

        z7 = 0;

        interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r18);

     label9:
        $r24 = r0.<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack>;

        $z8 = r0.<androidx.compose.Composer: boolean providersInvalid>;

        $i3 = staticinvoke <androidx.compose.ComposerKt: int access$asInt(boolean)>($z8);

        virtualinvoke $r24.<androidx.compose.IntStack: void push(int)>($i3);

        r0.<androidx.compose.Composer: boolean providersInvalid> = z5;

        $r25 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getAmbientMap()>();

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(202, $r25, 0, r18);

        return;
    }

    public final void endProviders$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.IntStack $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.Composer;

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        $r1 = r0.<androidx.compose.Composer: androidx.compose.IntStack providersInvalidStack>;

        $i0 = virtualinvoke $r1.<androidx.compose.IntStack: int pop()>();

        $z0 = staticinvoke <androidx.compose.ComposerKt: boolean access$asBool(int)>($i0);

        r0.<androidx.compose.Composer: boolean providersInvalid> = $z0;

        return;
    }

    public final java.lang.Object consume(androidx.compose.Ambient)
    {
        androidx.compose.Composer r0;
        androidx.compose.Ambient r1;
        androidx.compose.BuildableMap $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Ambient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap currentAmbientScope()>();

        $r3 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object resolveAmbient(androidx.compose.Ambient,androidx.compose.BuildableMap)>(r1, $r2);

        return $r3;
    }

    public final androidx.compose.CompositionReference buildReference$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.OpaqueKey $r1;
        boolean $z0, $z1, $z2;
        androidx.compose.Stack $r2;
        java.lang.Object $r3, r5;
        androidx.compose.Composer$CompositionReferenceImpl $r4;
        int $i0;
        androidx.compose.CompositionReference $r6, r7;
        androidx.compose.RecomposeScope r8;

        r0 := @this: androidx.compose.Composer;

        $r1 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.OpaqueKey getReference()>();

        virtualinvoke r0.<androidx.compose.Composer: void startGroup$compose_runtime_release(int,java.lang.Object)>(206, $r1);

        r5 = virtualinvoke r0.<androidx.compose.Composer: java.lang.Object nextSlot()>();

        $z0 = r5 instanceof androidx.compose.CompositionReference;

        if $z0 == 0 goto label1;

        $r6 = (androidx.compose.CompositionReference) r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        r7 = $r6;

        if r7 == null goto label3;

        $z2 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z2 != 0 goto label4;

     label3:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        $r3 = virtualinvoke $r2.<androidx.compose.Stack: java.lang.Object peek()>();

        r8 = (androidx.compose.RecomposeScope) $r3;

        virtualinvoke r8.<androidx.compose.RecomposeScope: void setUsed(boolean)>(1);

        $r4 = new androidx.compose.Composer$CompositionReferenceImpl;

        $i0 = virtualinvoke r0.<androidx.compose.Composer: int getCurrentCompoundKeyHash()>();

        $z1 = r0.<androidx.compose.Composer: boolean collectKeySources>;

        specialinvoke $r4.<androidx.compose.Composer$CompositionReferenceImpl: void <init>(androidx.compose.Composer,androidx.compose.RecomposeScope,int,boolean)>(r0, r8, $i0, $z1);

        r7 = (androidx.compose.CompositionReference) $r4;

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>(r7);

     label4:
        virtualinvoke r0.<androidx.compose.Composer: void endGroup$compose_runtime_release()>();

        return r7;
    }

    private final java.lang.Object resolveAmbient(androidx.compose.Ambient, androidx.compose.BuildableMap)
    {
        androidx.compose.Composer r0;
        androidx.compose.Ambient r1;
        androidx.compose.BuildableMap r2;
        androidx.compose.CompositionReference r3;
        boolean $z0;
        androidx.compose.LazyValueHolder $r4;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Ambient;

        r2 := @parameter1: androidx.compose.BuildableMap;

        $z0 = staticinvoke <androidx.compose.ComposerKt: boolean contains(androidx.compose.BuildableMap,androidx.compose.Ambient)>(r2, r1);

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <androidx.compose.ComposerKt: java.lang.Object getValueOf(androidx.compose.BuildableMap,androidx.compose.Ambient)>(r2, r1);

        return $r7;

     label1:
        r3 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if r3 == null goto label2;

        $r6 = virtualinvoke r3.<androidx.compose.CompositionReference: java.lang.Object getAmbient$compose_runtime_release(androidx.compose.Ambient)>(r1);

        return $r6;

     label2:
        $r4 = virtualinvoke r1.<androidx.compose.Ambient: androidx.compose.LazyValueHolder getDefaultValueHolder$compose_runtime_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.LazyValueHolder: java.lang.Object getValue()>();

        return $r5;
    }

    public final java.lang.Object parentAmbient$compose_runtime_release(androidx.compose.Ambient)
    {
        androidx.compose.Composer r0;
        androidx.compose.Ambient r1;
        androidx.compose.BuildableMap $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Ambient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap currentAmbientScope()>();

        $r3 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object resolveAmbient(androidx.compose.Ambient,androidx.compose.BuildableMap)>(r1, $r2);

        return $r3;
    }

    private final java.lang.Object parentAmbient(androidx.compose.Ambient, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.Ambient r1;
        int i0;
        androidx.compose.BuildableMap $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Ambient;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.BuildableMap ambientScopeAt(int)>(i0);

        $r3 = specialinvoke r0.<androidx.compose.Composer: java.lang.Object resolveAmbient(androidx.compose.Ambient,androidx.compose.BuildableMap)>(r1, $r2);

        return $r3;
    }

    public final int getChangeCount$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: java.util.List changes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public final androidx.compose.RecomposeScope getCurrentRecomposeScope$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        androidx.compose.Stack r1, r2;
        boolean z0, z1, $z3;
        java.lang.Object $r3;
        androidx.compose.RecomposeScope $r4;

        r0 := @this: androidx.compose.Composer;

        r1 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        z0 = 0;

        z1 = 0;

        r2 = r1;

        $z3 = virtualinvoke r2.<androidx.compose.Stack: boolean isNotEmpty()>();

        if $z3 == 0 goto label1;

        $r3 = virtualinvoke r2.<androidx.compose.Stack: java.lang.Object peek()>();

        $r4 = (androidx.compose.RecomposeScope) $r3;

        goto label2;

     label1:
        $r4 = (androidx.compose.RecomposeScope) null;

     label2:
        return $r4;
    }

    private final void ensureWriter()
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1, $r3;
        boolean $z0;
        androidx.compose.SlotTable $r2;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $z0 = virtualinvoke $r1.<androidx.compose.SlotWriter: boolean getClosed()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        $r3 = virtualinvoke $r2.<androidx.compose.SlotTable: androidx.compose.SlotWriter openWriter()>();

        r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer> = $r3;

        r0.<androidx.compose.Composer: boolean hasProvider> = 0;

     label1:
        return;
    }

    private final void startReaderGroup(boolean, java.lang.Object)
    {
        androidx.compose.Composer r0;
        boolean z0;
        java.lang.Object r1, $r5;
        androidx.compose.SlotReader $r2, $r3, $r4, $r8;
        androidx.compose.Composer$startReaderGroup$1 $r6;
        kotlin.jvm.functions.Function3 $r7;

        r0 := @this: androidx.compose.Composer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object;

        if z0 == 0 goto label1;

        $r8 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r8.<androidx.compose.SlotReader: void startNode()>();

        goto label4;

     label1:
        if r1 == null goto label2;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r5 = virtualinvoke $r4.<androidx.compose.SlotReader: java.lang.Object getGroupData()>();

        if $r5 == r1 goto label2;

        $r6 = new androidx.compose.Composer$startReaderGroup$1;

        specialinvoke $r6.<androidx.compose.Composer$startReaderGroup$1: void <init>(java.lang.Object)>(r1);

        $r7 = (kotlin.jvm.functions.Function3) $r6;

        staticinvoke <androidx.compose.Composer: void recordSlotEditingOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r7, 1, null);

     label2:
        if r1 == null goto label3;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r3.<androidx.compose.SlotReader: void startDataGroup()>();

        goto label4;

     label3:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r2.<androidx.compose.SlotReader: void startGroup()>();

     label4:
        return;
    }

    private final void start(int, java.lang.Object, boolean, java.lang.Object)
    {
        androidx.compose.Composer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, i18, $i19;
        java.lang.Object r1, r2, $r30;
        boolean z0, $z1, $z2, $z5, $z6, z8, z9;
        androidx.compose.KeyInfo r3, $r13, $r33, r47, r48;
        java.util.List r4, r5, $r28;
        androidx.compose.Pending $r6, $r18, $r26, $r37, r42, r43, r44, r45, r46;
        androidx.compose.SlotReader $r7, $r22, $r25, $r27, $r29, $r31;
        androidx.compose.SlotWriter $r8, $r9, $r10, $r11, $r15, $r20, $r32, $r35, $r39, $r40;
        androidx.compose.Anchor $r12;
        java.lang.Integer $r14, $r21, $r34, $r41;
        androidx.compose.Group $r16, $r36;
        java.util.ArrayList $r17;
        androidx.compose.Composer$start$2 $r23;
        kotlin.jvm.functions.Function3 $r24;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        specialinvoke r0.<androidx.compose.Composer: void validateNodeNotExpected()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeEnterGroup(int,java.lang.Object)>(i0, r1);

        $z1 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z1 == 0 goto label07;

        $r31 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r31.<androidx.compose.SlotReader: void beginEmpty()>();

        $z6 = r0.<androidx.compose.Composer: boolean collectKeySources>;

        if $z6 == 0 goto label01;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        staticinvoke <androidx.compose.KeySourceInfoKt: void recordSourceKeyInfo(java.lang.Object)>($r41);

     label01:
        if z0 == 0 goto label02;

        $r40 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r40.<androidx.compose.SlotWriter: void startNode(java.lang.Object)>(r1);

        goto label04;

     label02:
        if r2 == null goto label03;

        $r39 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r39.<androidx.compose.SlotWriter: void startData(int,java.lang.Object,java.lang.Object)>(i0, r1, r2);

        goto label04;

     label03:
        $r32 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r32.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object)>(i0, r1);

     label04:
        r42 = r0.<androidx.compose.Composer: androidx.compose.Pending pending>;

        if r42 != null goto label05;

        goto label06;

     label05:
        r43 = r42;

        z8 = 0;

        z9 = 0;

        r44 = r43;

        $r33 = new androidx.compose.KeyInfo;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r35 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $r36 = virtualinvoke $r35.<androidx.compose.SlotWriter: androidx.compose.Group getParentGroup$compose_runtime_release()>();

        specialinvoke $r33.<androidx.compose.KeyInfo: void <init>(int,java.lang.Object,int,int,int,androidx.compose.Group)>(i0, $r34, 0, -1, 0, $r36);

        r3 = $r33;

        $i11 = r0.<androidx.compose.Composer: int nodeIndex>;

        $i12 = virtualinvoke r44.<androidx.compose.Pending: int getStartIndex()>();

        $i13 = $i11 - $i12;

        virtualinvoke r44.<androidx.compose.Pending: void registerInsert(androidx.compose.KeyInfo,int)>(r3, $i13);

        virtualinvoke r44.<androidx.compose.Pending: boolean recordUsed(androidx.compose.KeyInfo)>(r3);

     label06:
        $r37 = (androidx.compose.Pending) null;

        specialinvoke r0.<androidx.compose.Composer: void enterGroup(boolean,androidx.compose.Pending)>(z0, $r37);

        return;

     label07:
        $r6 = r0.<androidx.compose.Composer: androidx.compose.Pending pending>;

        if $r6 != null goto label09;

        $r25 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i14 = virtualinvoke $r25.<androidx.compose.SlotReader: int getGroupKey()>();

        if i14 != i0 goto label08;

        $r29 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r30 = virtualinvoke $r29.<androidx.compose.SlotReader: java.lang.Object getGroupDataKey()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r30);

        if $z5 == 0 goto label08;

        specialinvoke r0.<androidx.compose.Composer: void startReaderGroup(boolean,java.lang.Object)>(z0, r2);

        goto label09;

     label08:
        $r26 = new androidx.compose.Pending;

        $r27 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r28 = virtualinvoke $r27.<androidx.compose.SlotReader: java.util.List extractKeys()>();

        $i10 = r0.<androidx.compose.Composer: int nodeIndex>;

        specialinvoke $r26.<androidx.compose.Pending: void <init>(java.util.List,int)>($r28, $i10);

        r0.<androidx.compose.Composer: androidx.compose.Pending pending> = $r26;

     label09:
        r45 = r0.<androidx.compose.Composer: androidx.compose.Pending pending>;

        r46 = (androidx.compose.Pending) null;

        if r45 == null goto label17;

        r47 = virtualinvoke r45.<androidx.compose.Pending: androidx.compose.KeyInfo getNext(int,java.lang.Object)>(i0, r1);

        if r47 == null goto label11;

        virtualinvoke r45.<androidx.compose.Pending: boolean recordUsed(androidx.compose.KeyInfo)>(r47);

        i15 = virtualinvoke r47.<androidx.compose.KeyInfo: int getLocation()>();

        $i5 = virtualinvoke r45.<androidx.compose.Pending: int nodePositionOf(androidx.compose.KeyInfo)>(r47);

        $i6 = virtualinvoke r45.<androidx.compose.Pending: int getStartIndex()>();

        $i7 = $i5 + $i6;

        r0.<androidx.compose.Composer: int nodeIndex> = $i7;

        i16 = virtualinvoke r45.<androidx.compose.Pending: int slotPositionOf(androidx.compose.KeyInfo)>(r47);

        $i8 = virtualinvoke r45.<androidx.compose.Pending: int getGroupIndex()>();

        $i17 = i16 - $i8;

        $i9 = virtualinvoke r45.<androidx.compose.Pending: int getGroupIndex()>();

        virtualinvoke r45.<androidx.compose.Pending: void registerMoveSlot(int,int)>(i16, $i9);

        specialinvoke r0.<androidx.compose.Composer: void recordReaderMoving(int)>(i15);

        $r22 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r22.<androidx.compose.SlotReader: void reposition(int)>(i15);

        if $i17 <= 0 goto label10;

        $r23 = new androidx.compose.Composer$start$2;

        specialinvoke $r23.<androidx.compose.Composer$start$2: void <init>(int)>($i17);

        $r24 = (kotlin.jvm.functions.Function3) $r23;

        staticinvoke <androidx.compose.Composer: void recordSlotEditingOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r24, 1, null);

     label10:
        specialinvoke r0.<androidx.compose.Composer: void startReaderGroup(boolean,java.lang.Object)>(z0, r2);

        goto label17;

     label11:
        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r7.<androidx.compose.SlotReader: void beginEmpty()>();

        r0.<androidx.compose.Composer: boolean inserting> = 1;

        $z2 = r0.<androidx.compose.Composer: boolean collectKeySources>;

        if $z2 == 0 goto label12;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        staticinvoke <androidx.compose.KeySourceInfoKt: void recordSourceKeyInfo(java.lang.Object)>($r21);

     label12:
        specialinvoke r0.<androidx.compose.Composer: void ensureWriter()>();

        $r8 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r8.<androidx.compose.SlotWriter: void beginInsert()>();

        $r9 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        i18 = virtualinvoke $r9.<androidx.compose.SlotWriter: int getCurrent()>();

        if z0 == 0 goto label13;

        $r20 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r20.<androidx.compose.SlotWriter: void startNode(java.lang.Object)>(r1);

        goto label14;

     label13:
        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r10.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object)>(i0, r1);

     label14:
        $r11 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $r12 = virtualinvoke $r11.<androidx.compose.SlotWriter: androidx.compose.Anchor anchor(int)>(i18);

        r0.<androidx.compose.Composer: androidx.compose.Anchor insertAnchor> = $r12;

        $r13 = new androidx.compose.KeyInfo;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r15 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $r16 = virtualinvoke $r15.<androidx.compose.SlotWriter: androidx.compose.Group getParentGroup$compose_runtime_release()>();

        specialinvoke $r13.<androidx.compose.KeyInfo: void <init>(int,java.lang.Object,int,int,int,androidx.compose.Group)>(i0, $r14, 0, -1, 0, $r16);

        r48 = $r13;

        $i2 = r0.<androidx.compose.Composer: int nodeIndex>;

        $i3 = virtualinvoke r45.<androidx.compose.Pending: int getStartIndex()>();

        $i4 = $i2 - $i3;

        virtualinvoke r45.<androidx.compose.Pending: void registerInsert(androidx.compose.KeyInfo,int)>(r48, $i4);

        virtualinvoke r45.<androidx.compose.Pending: boolean recordUsed(androidx.compose.KeyInfo)>(r48);

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) $r17;

        if z0 == 0 goto label15;

        $i19 = 0;

        goto label16;

     label15:
        $i19 = r0.<androidx.compose.Composer: int nodeIndex>;

     label16:
        i1 = $i19;

        r5 = r4;

        $r18 = new androidx.compose.Pending;

        specialinvoke $r18.<androidx.compose.Pending: void <init>(java.util.List,int)>(r5, i1);

        r46 = $r18;

     label17:
        specialinvoke r0.<androidx.compose.Composer: void enterGroup(boolean,androidx.compose.Pending)>(z0, r46);

        return;
    }

    private final void enterGroup(boolean, androidx.compose.Pending)
    {
        androidx.compose.Composer r0;
        boolean z0;
        androidx.compose.Pending r1, $r2;
        androidx.compose.Stack $r3;
        int $i0, $i1;
        androidx.compose.IntStack $r4, $r5;

        r0 := @this: androidx.compose.Composer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.compose.Pending;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.Pending pending>;

        virtualinvoke $r3.<androidx.compose.Stack: boolean push(java.lang.Object)>($r2);

        r0.<androidx.compose.Composer: androidx.compose.Pending pending> = r1;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        $i0 = r0.<androidx.compose.Composer: int nodeIndex>;

        virtualinvoke $r4.<androidx.compose.IntStack: void push(int)>($i0);

        if z0 == 0 goto label1;

        r0.<androidx.compose.Composer: int nodeIndex> = 0;

     label1:
        $r5 = r0.<androidx.compose.Composer: androidx.compose.IntStack groupNodeCountStack>;

        $i1 = r0.<androidx.compose.Composer: int groupNodeCount>;

        virtualinvoke $r5.<androidx.compose.IntStack: void push(int)>($i1);

        r0.<androidx.compose.Composer: int groupNodeCount> = 0;

        return;
    }

    private final void exitGroup(int, boolean)
    {
        androidx.compose.Composer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        androidx.compose.Pending r1, r2;
        androidx.compose.Stack $r3;
        java.lang.Object $r4;
        androidx.compose.IntStack $r5, $r6;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        $r4 = virtualinvoke $r3.<androidx.compose.Stack: java.lang.Object pop()>();

        r1 = (androidx.compose.Pending) $r4;

        if r1 == null goto label1;

        if z0 != 0 goto label1;

        r2 = r1;

        i1 = virtualinvoke r2.<androidx.compose.Pending: int getGroupIndex()>();

        $i2 = i1 + 1;

        virtualinvoke r2.<androidx.compose.Pending: void setGroupIndex(int)>($i2);

     label1:
        r0.<androidx.compose.Composer: androidx.compose.Pending pending> = r1;

        $r5 = r0.<androidx.compose.Composer: androidx.compose.IntStack nodeIndexStack>;

        $i3 = virtualinvoke $r5.<androidx.compose.IntStack: int pop()>();

        $i4 = $i3 + i0;

        r0.<androidx.compose.Composer: int nodeIndex> = $i4;

        $r6 = r0.<androidx.compose.Composer: androidx.compose.IntStack groupNodeCountStack>;

        $i5 = virtualinvoke $r6.<androidx.compose.IntStack: int pop()>();

        $i6 = $i5 + i0;

        r0.<androidx.compose.Composer: int groupNodeCount> = $i6;

        return;
    }

    private final void end(boolean)
    {
        androidx.compose.Composer r0;
        boolean z0, $z1, $z2, $z3, $z4, z7, $z8, z9, z10;
        androidx.compose.Group r1, $r30, $r37, r44, r47;
        androidx.compose.Pending r2;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, $i37, i38, i39, i40;
        androidx.compose.KeyInfo r3, r42;
        androidx.compose.SlotReader $r4, $r5, $r7, $r8, $r9, $r10, $r13, $r19, $r20, $r21, $r26, $r27, $r31, $r32, $r34, $r43;
        java.lang.Object $r6, $r28, $r29;
        androidx.compose.SlotWriter $r11, $r12, $r14, $r15, $r35, $r36;
        androidx.compose.Anchor $r16;
        java.util.HashMap $r17;
        java.util.List $r22, $r23, $r33, r38, r39;
        java.lang.Iterable $r24;
        java.util.LinkedHashSet $r25;
        java.util.Set r40, r41;
        java.util.Map r45;
        java.lang.Integer r46;

        r0 := @this: androidx.compose.Composer;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z1 == 0 goto label01;

        $r36 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $r35 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $i25 = virtualinvoke $r35.<androidx.compose.SlotWriter: int getParentLocation()>();

        $r37 = virtualinvoke $r36.<androidx.compose.SlotWriter: androidx.compose.Group group$compose_runtime_release(int)>($i25);

        goto label02;

     label01:
        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i2 = virtualinvoke $r4.<androidx.compose.SlotReader: int getParentLocation()>();

        $r37 = virtualinvoke $r5.<androidx.compose.SlotReader: androidx.compose.Group group$compose_runtime_release(int)>($i2);

     label02:
        r1 = $r37;

        $i3 = virtualinvoke r1.<androidx.compose.Group: int getKey()>();

        $r6 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getDataKey()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeExitGroup(int,java.lang.Object)>($i3, $r6);

        i26 = r0.<androidx.compose.Composer: int groupNodeCount>;

        r2 = r0.<androidx.compose.Composer: androidx.compose.Pending pending>;

        if r2 == null goto label09;

        $r23 = virtualinvoke r2.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        $i7 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i7 <= 0 goto label09;

        r38 = virtualinvoke r2.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        r39 = virtualinvoke r2.<androidx.compose.Pending: java.util.List getUsed()>();

        $r24 = (java.lang.Iterable) r39;

        r40 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r24);

        z7 = 0;

        $r25 = new java.util.LinkedHashSet;

        specialinvoke $r25.<java.util.LinkedHashSet: void <init>()>();

        r41 = (java.util.Set) $r25;

        i27 = 0;

        i28 = interfaceinvoke r39.<java.util.List: int size()>();

        i29 = 0;

        i0 = interfaceinvoke r38.<java.util.List: int size()>();

        i30 = 0;

     label03:
        if i29 >= i0 goto label08;

        $r28 = interfaceinvoke r38.<java.util.List: java.lang.Object get(int)>(i29);

        r3 = (androidx.compose.KeyInfo) $r28;

        $z3 = interfaceinvoke r40.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z3 != 0 goto label04;

        i31 = virtualinvoke r2.<androidx.compose.Pending: int nodePositionOf(androidx.compose.KeyInfo)>(r3);

        $i14 = virtualinvoke r2.<androidx.compose.Pending: int getStartIndex()>();

        $i15 = i31 + $i14;

        $i16 = virtualinvoke r3.<androidx.compose.KeyInfo: int getNodes()>();

        specialinvoke r0.<androidx.compose.Composer: void recordRemoveNode(int,int)>($i15, $i16);

        $r30 = virtualinvoke r3.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        virtualinvoke r2.<androidx.compose.Pending: boolean updateNodeCount(androidx.compose.Group,int)>($r30, 0);

        $i17 = virtualinvoke r3.<androidx.compose.KeyInfo: int getLocation()>();

        specialinvoke r0.<androidx.compose.Composer: void recordReaderMoving(int)>($i17);

        $r31 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i18 = virtualinvoke r3.<androidx.compose.KeyInfo: int getLocation()>();

        virtualinvoke $r31.<androidx.compose.SlotReader: void reposition(int)>($i18);

        specialinvoke r0.<androidx.compose.Composer: void recordDelete()>();

        $r32 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r32.<androidx.compose.SlotReader: int skipGroup()>();

        $r33 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $i20 = virtualinvoke r3.<androidx.compose.KeyInfo: int getLocation()>();

        $i21 = virtualinvoke r3.<androidx.compose.KeyInfo: int getLocation()>();

        $r34 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i22 = virtualinvoke r3.<androidx.compose.KeyInfo: int getLocation()>();

        $i23 = virtualinvoke $r34.<androidx.compose.SlotReader: int groupSize(int)>($i22);

        $i24 = $i21 + $i23;

        staticinvoke <androidx.compose.ComposerKt: void access$removeRange(java.util.List,int,int)>($r33, $i20, $i24);

        i32 = i29;

        i29 = i32 + 1;

        goto label03;

     label04:
        $z4 = interfaceinvoke r41.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z4 == 0 goto label05;

        i33 = i29;

        i29 = i33 + 1;

        goto label03;

     label05:
        if i27 >= i28 goto label03;

        $r29 = interfaceinvoke r39.<java.util.List: java.lang.Object get(int)>(i27);

        r42 = (androidx.compose.KeyInfo) $r29;

        if r42 == r3 goto label06;

        i34 = virtualinvoke r2.<androidx.compose.Pending: int nodePositionOf(androidx.compose.KeyInfo)>(r42);

        interfaceinvoke r41.<java.util.Set: boolean add(java.lang.Object)>(r42);

        if i34 == i30 goto label07;

        i1 = virtualinvoke r2.<androidx.compose.Pending: int updatedNodeCountOf(androidx.compose.KeyInfo)>(r42);

        $i10 = virtualinvoke r2.<androidx.compose.Pending: int getStartIndex()>();

        $i11 = i34 + $i10;

        $i12 = virtualinvoke r2.<androidx.compose.Pending: int getStartIndex()>();

        $i13 = i30 + $i12;

        specialinvoke r0.<androidx.compose.Composer: void recordMoveNode(int,int,int)>($i11, $i13, i1);

        virtualinvoke r2.<androidx.compose.Pending: void registerMoveNode(int,int,int)>(i34, i30, i1);

        goto label07;

     label06:
        i35 = i29;

        i29 = i35 + 1;

     label07:
        i36 = i27;

        i27 = i36 + 1;

        $i37 = virtualinvoke r2.<androidx.compose.Pending: int updatedNodeCountOf(androidx.compose.KeyInfo)>(r42);

        i30 = i30 + $i37;

        goto label03;

     label08:
        specialinvoke r0.<androidx.compose.Composer: void realizeMovement()>();

        $i8 = interfaceinvoke r38.<java.util.List: int size()>();

        if $i8 <= 0 goto label09;

        $r26 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i9 = virtualinvoke $r26.<androidx.compose.SlotReader: int getGroupEnd()>();

        specialinvoke r0.<androidx.compose.Composer: void recordReaderMoving(int)>($i9);

        $r27 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r27.<androidx.compose.SlotReader: void skipToGroupEnd()>();

     label09:
        i38 = r0.<androidx.compose.Composer: int nodeIndex>;

     label10:
        $r43 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $z8 = virtualinvoke $r43.<androidx.compose.SlotReader: boolean isGroupEnd()>();

        if $z8 != 0 goto label11;

        $r19 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i39 = virtualinvoke $r19.<androidx.compose.SlotReader: int getCurrent()>();

        specialinvoke r0.<androidx.compose.Composer: void recordDelete()>();

        $r20 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i40 = virtualinvoke $r20.<androidx.compose.SlotReader: int skipGroup()>();

        specialinvoke r0.<androidx.compose.Composer: void recordRemoveNode(int,int)>(i38, i40);

        $r22 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $r21 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i6 = virtualinvoke $r21.<androidx.compose.SlotReader: int getCurrent()>();

        staticinvoke <androidx.compose.ComposerKt: void access$removeRange(java.util.List,int,int)>($r22, i39, $i6);

        goto label10;

     label11:
        z9 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if z9 == 0 goto label13;

        if z0 == 0 goto label12;

        specialinvoke r0.<androidx.compose.Composer: void recordInsertUp()>();

        i26 = 1;

     label12:
        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r10.<androidx.compose.SlotReader: void endEmpty()>();

        $r11 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        r44 = virtualinvoke $r11.<androidx.compose.SlotWriter: androidx.compose.Group getParentGroup$compose_runtime_release()>();

        $r12 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r12.<androidx.compose.SlotWriter: int endGroup()>();

        $r13 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $z2 = virtualinvoke $r13.<androidx.compose.SlotReader: boolean getInEmpty()>();

        if $z2 != 0 goto label18;

        $r14 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r14.<androidx.compose.SlotWriter: void endInsert()>();

        $r15 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        virtualinvoke $r15.<androidx.compose.SlotWriter: void close()>();

        $r16 = r0.<androidx.compose.Composer: androidx.compose.Anchor insertAnchor>;

        specialinvoke r0.<androidx.compose.Composer: void recordInsert(androidx.compose.Anchor)>($r16);

        r0.<androidx.compose.Composer: boolean inserting> = 0;

        $r17 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        r45 = (java.util.Map) $r17;

        r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        z10 = 0;

        interfaceinvoke r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, r46);

        specialinvoke r0.<androidx.compose.Composer: void updateNodeCountOverrides(androidx.compose.Group,int)>(r44, i26);

        goto label18;

     label13:
        if z0 == 0 goto label14;

        specialinvoke r0.<androidx.compose.Composer: void recordUp()>();

     label14:
        specialinvoke r0.<androidx.compose.Composer: void recordEndGroup()>();

        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r47 = virtualinvoke $r7.<androidx.compose.SlotReader: androidx.compose.Group getParentGroup$compose_runtime_release()>();

        $i4 = virtualinvoke r47.<androidx.compose.Group: int getNodes()>();

        if i26 == $i4 goto label15;

        specialinvoke r0.<androidx.compose.Composer: void updateNodeCountOverrides(androidx.compose.Group,int)>(r47, i26);

     label15:
        if z0 == 0 goto label16;

        i26 = 1;

        $r9 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r9.<androidx.compose.SlotReader: void endNode()>();

        goto label17;

     label16:
        $r8 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r8.<androidx.compose.SlotReader: void endGroup()>();

     label17:
        specialinvoke r0.<androidx.compose.Composer: void realizeMovement()>();

     label18:
        specialinvoke r0.<androidx.compose.Composer: void exitGroup(int,boolean)>(i26, z9);

        return;
    }

    private final void recomposeToGroupEnd()
    {
        androidx.compose.Composer r0;
        boolean z0, z1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, i16;
        androidx.compose.Group r1, $r17, r21, r23, r24;
        java.lang.Integer r2, r3;
        androidx.compose.SlotReader $r4, $r5, $r6, $r7, $r9, $r10, $r15, $r16, $r19;
        java.util.List $r8, $r13, $r20;
        java.util.HashMap $r11;
        java.lang.Object $r12;
        androidx.compose.RecomposeScope $r18;
        androidx.compose.Invalidation r22;

        r0 := @this: androidx.compose.Composer;

        z0 = virtualinvoke r0.<androidx.compose.Composer: boolean isComposing$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.Composer: void setComposing$compose_runtime_release(boolean)>(1);

        z1 = 0;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i0 = virtualinvoke $r4.<androidx.compose.SlotReader: int getParentLocation()>();

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i7 = virtualinvoke $r5.<androidx.compose.SlotReader: int groupSize(int)>(i0);

        i1 = i0 + $i7;

        $r6 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r1 = virtualinvoke $r6.<androidx.compose.SlotReader: androidx.compose.Group group$compose_runtime_release(int)>(i0);

        i2 = r0.<androidx.compose.Composer: int nodeIndex>;

        i3 = virtualinvoke r0.<androidx.compose.Composer: int getCurrentCompoundKeyHash()>();

        i4 = r0.<androidx.compose.Composer: int groupNodeCount>;

        r21 = r1;

        $r8 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i8 = virtualinvoke $r7.<androidx.compose.SlotReader: int getCurrent()>();

        r22 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.Invalidation access$firstInRange(java.util.List,int,int)>($r8, $i8, i1);

     label1:
        if r22 == null goto label2;

        i14 = virtualinvoke r22.<androidx.compose.Invalidation: int getLocation()>();

        $r13 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        staticinvoke <androidx.compose.ComposerKt: androidx.compose.Invalidation access$removeLocation(java.util.List,int)>($r13, i14);

        z1 = 1;

        $r15 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r15.<androidx.compose.SlotReader: void reposition(int)>(i14);

        $r16 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r23 = virtualinvoke $r16.<androidx.compose.SlotReader: androidx.compose.Group getGroup$compose_runtime_release()>();

        specialinvoke r0.<androidx.compose.Composer: void recordUpsAndDowns(androidx.compose.Group,androidx.compose.Group,androidx.compose.Group)>(r21, r23, r1);

        r21 = r23;

        $i11 = specialinvoke r0.<androidx.compose.Composer: int nodeIndexOf(int,androidx.compose.Group,int,androidx.compose.Group,int)>(i14, r23, i0, r1, i2);

        r0.<androidx.compose.Composer: int nodeIndex> = $i11;

        $r17 = virtualinvoke r23.<androidx.compose.Group: androidx.compose.Group getParent()>();

        $i12 = specialinvoke r0.<androidx.compose.Composer: int compoundKeyOf(androidx.compose.Group,androidx.compose.Group,int)>($r17, r1, i3);

        r0.<androidx.compose.Composer: int currentCompoundKeyHash> = $i12;

        $r18 = virtualinvoke r22.<androidx.compose.Invalidation: androidx.compose.RecomposeScope getScope()>();

        virtualinvoke $r18.<androidx.compose.RecomposeScope: void compose(androidx.compose.Composer)>(r0);

        $r20 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $r19 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i13 = virtualinvoke $r19.<androidx.compose.SlotReader: int getCurrent()>();

        r22 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.Invalidation access$firstInRange(java.util.List,int,int)>($r20, $i13, i1);

        goto label1;

     label2:
        if z1 == 0 goto label5;

        specialinvoke r0.<androidx.compose.Composer: void recordUpsAndDowns(androidx.compose.Group,androidx.compose.Group,androidx.compose.Group)>(r21, r1, r1);

        $r9 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r24 = virtualinvoke $r9.<androidx.compose.SlotReader: androidx.compose.Group getParentGroup$compose_runtime_release()>();

        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r10.<androidx.compose.SlotReader: void skipToGroupEnd()>();

        $r11 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r24);

        r2 = (java.lang.Integer) $r12;

        if r2 != null goto label3;

        $i15 = virtualinvoke r24.<androidx.compose.Group: int getNodes()>();

        goto label4;

     label3:
        r3 = r2;

        $i15 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

     label4:
        i6 = $i15;

        i5 = i6;

        i16 = i5;

        $i9 = i2 + i16;

        r0.<androidx.compose.Composer: int nodeIndex> = $i9;

        $i10 = i4 + i16;

        r0.<androidx.compose.Composer: int groupNodeCount> = $i10;

        goto label6;

     label5:
        specialinvoke r0.<androidx.compose.Composer: void skipReaderToGroupEnd()>();

     label6:
        r0.<androidx.compose.Composer: int currentCompoundKeyHash> = i3;

        virtualinvoke r0.<androidx.compose.Composer: void setComposing$compose_runtime_release(boolean)>(z0);

        return;
    }

    private final void updateNodeCountOverrides(androidx.compose.Group, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.Group r1, r13;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, $i8, i9, i10, i11, i12;
        java.util.HashMap $r2, $r5, $r7;
        java.lang.Object $r3, $r6, $r10;
        androidx.compose.Stack $r4, $r9;
        boolean $z0, z1, $z2;
        java.lang.Integer r11, r12, r14, r15, r17;
        java.util.Map r16;
        androidx.compose.Pending r18;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Group;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (java.lang.Integer) $r3;

        if r11 != null goto label01;

        $i3 = virtualinvoke r1.<androidx.compose.Group: int getNodes()>();

        goto label02;

     label01:
        r12 = r11;

        $i3 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

     label02:
        i4 = $i3;

        i5 = i4;

        i1 = i5;

        if i1 == i0 goto label10;

        i6 = i0 - i1;

        r13 = r1;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        $i2 = virtualinvoke $r4.<androidx.compose.Stack: int getSize()>();

        i7 = $i2 - 1;

     label03:
        if r13 == null goto label10;

        $r5 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (java.lang.Integer) $r6;

        if r14 != null goto label04;

        $i8 = virtualinvoke r13.<androidx.compose.Group: int getNodes()>();

        goto label05;

     label04:
        r15 = r14;

        $i8 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

     label05:
        i9 = $i8;

        i10 = i9 + i6;

        $r7 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        r16 = (java.util.Map) $r7;

        r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        z1 = 0;

        interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r17);

        i11 = i7;

        if 0 > i11 goto label08;

     label06:
        i12 = i11;

        i11 = i11 + -1;

        $r9 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        $r10 = virtualinvoke $r9.<androidx.compose.Stack: java.lang.Object peek(int)>(i12);

        r18 = (androidx.compose.Pending) $r10;

        if r18 == null goto label07;

        $z0 = virtualinvoke r18.<androidx.compose.Pending: boolean updateNodeCount(androidx.compose.Group,int)>(r13, i10);

        if $z0 == 0 goto label07;

        i7 = i12 - 1;

        goto label08;

     label07:
        if 0 <= i11 goto label06;

     label08:
        $z2 = virtualinvoke r13.<androidx.compose.Group: boolean isNode()>();

        if $z2 == 0 goto label09;

        goto label10;

     label09:
        r13 = virtualinvoke r13.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label03;

     label10:
        return;
    }

    private final int nodeIndexOf(int, androidx.compose.Group, int, androidx.compose.Group, int)
    {
        androidx.compose.Composer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, i19, i20, i21, i22, i23, $i24, i25, i26, i27, i28, i29, $i30, i31;
        androidx.compose.Group r1, r2, r17, r19, r20, r26;
        java.lang.Integer r3, r4, r24, r25;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        java.util.HashMap $r5, $r9;
        java.lang.Object $r6, $r10, $r23;
        androidx.compose.SlotReader $r7, $r8, $r22;
        java.lang.IllegalStateException $r11, $r14;
        java.lang.String $r12, $r15, r18, r21;
        java.lang.Throwable $r13, $r16;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.Group;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.compose.Group;

        i2 := @parameter4: int;

        r17 = virtualinvoke r1.<androidx.compose.Group: androidx.compose.Group getParent()>();

        if r17 != null goto label01;

        r18 = "Invalid group";

        z5 = 0;

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        $r16 = (java.lang.Throwable) $r14;

        throw $r16;

     label01:
        r19 = r17;

     label02:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r19, r2);

        if $z0 != 0 goto label05;

        $z4 = virtualinvoke r19.<androidx.compose.Group: boolean isNode()>();

        if $z4 == 0 goto label03;

        goto label05;

     label03:
        r20 = virtualinvoke r19.<androidx.compose.Group: androidx.compose.Group getParent()>();

        if r20 != null goto label04;

        r21 = "group not contained in recompose group";

        z6 = 0;

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label04:
        r19 = r20;

        goto label02;

     label05:
        $z1 = virtualinvoke r19.<androidx.compose.Group: boolean isNode()>();

        if $z1 == 0 goto label06;

        $i16 = 0;

        goto label07;

     label06:
        $i16 = i2;

     label07:
        i17 = $i16;

        $i4 = virtualinvoke r19.<androidx.compose.Group: int getSlots()>();

        $i5 = virtualinvoke r1.<androidx.compose.Group: int getSlots()>();

        if $i4 != $i5 goto label08;

        return i17;

     label08:
        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r19, r2);

        if $z2 == 0 goto label09;

        $i18 = i1;

        goto label12;

     label09:
        i19 = i1;

        $i6 = virtualinvoke r19.<androidx.compose.Group: int getSlots()>();

        $i7 = virtualinvoke r1.<androidx.compose.Group: int getSlots()>();

        $i8 = $i6 - $i7;

        $i9 = $i8 + 1;

        i20 = i0 - $i9;

        if i19 >= i20 goto label10;

        i19 = i20;

     label10:
        $r22 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $r23 = virtualinvoke $r22.<androidx.compose.SlotReader: java.lang.Object get(int)>(i19);

        if $r23 == r19 goto label11;

        i21 = i19;

        i19 = i21 + 1;

        goto label10;

     label11:
        $i18 = i19;

     label12:
        i22 = $i18;

        i23 = i22;

        $i15 = i17;

        $r5 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r19);

        r24 = (java.lang.Integer) $r6;

        if r24 != null goto label13;

        $i24 = virtualinvoke r19.<androidx.compose.Group: int getNodes()>();

        goto label14;

     label13:
        r25 = r24;

        $i24 = virtualinvoke r25.<java.lang.Integer: int intValue()>();

     label14:
        i25 = $i24;

        $i10 = virtualinvoke r1.<androidx.compose.Group: int getNodes()>();

        $i11 = i25 - $i10;

        i26 = $i15 + $i11;

     label15:
        if i17 >= i26 goto label22;

        if i23 != i0 goto label16;

        goto label22;

     label16:
        i27 = i23;

        i23 = i27 + 1;

     label17:
        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $z3 = virtualinvoke $r7.<androidx.compose.SlotReader: boolean isGroup(int)>(i23);

        if $z3 != 0 goto label18;

        i28 = i23;

        i23 = i28 + 1;

        goto label17;

     label18:
        if i23 >= i0 goto label22;

        $r8 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r26 = virtualinvoke $r8.<androidx.compose.SlotReader: androidx.compose.Group group$compose_runtime_release(int)>(i23);

        $i12 = virtualinvoke r26.<androidx.compose.Group: int getSlots()>();

        $i13 = $i12 + i23;

        i29 = $i13 + 1;

        if i0 >= i29 goto label19;

        goto label15;

     label19:
        $i14 = i17;

        $r9 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r26);

        r3 = (java.lang.Integer) $r10;

        if r3 != null goto label20;

        $i30 = virtualinvoke r26.<androidx.compose.Group: int getNodes()>();

        goto label21;

     label20:
        r4 = r3;

        $i30 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

     label21:
        i3 = $i30;

        i31 = i3;

        i17 = $i14 + i31;

        i23 = i29;

        goto label18;

     label22:
        return i17;
    }

    private final void recordUpsAndDowns(androidx.compose.Group, androidx.compose.Group, androidx.compose.Group)
    {
        androidx.compose.Composer r0;
        androidx.compose.Group r1, r2, r3, r4, r5, $r6, r7;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Group;

        r2 := @parameter1: androidx.compose.Group;

        r3 := @parameter2: androidx.compose.Group;

        r5 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.Group access$nearestCommonRootOf(androidx.compose.Group,androidx.compose.Group,androidx.compose.Group)>(r1, r2, r3);

        if r5 != null goto label1;

        $r6 = r3;

        goto label2;

     label1:
        $r6 = r5;

     label2:
        r4 = $r6;

        r7 = r1;

     label3:
        if r7 == null goto label5;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r7, r4);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r7.<androidx.compose.Group: boolean isNode()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<androidx.compose.Composer: void recordUp()>();

     label4:
        r7 = virtualinvoke r7.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label3;

     label5:
        specialinvoke r0.<androidx.compose.Composer: void doRecordDownsFor(androidx.compose.Group,androidx.compose.Group)>(r2, r4);

        return;
    }

    private final void doRecordDownsFor(androidx.compose.Group, androidx.compose.Group)
    {
        androidx.compose.Composer r0;
        androidx.compose.Group r1, r2, $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Group;

        r2 := @parameter1: androidx.compose.Group;

        if r1 == null goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r1.<androidx.compose.Group: androidx.compose.Group getParent()>();

        specialinvoke r0.<androidx.compose.Composer: void doRecordDownsFor(androidx.compose.Group,androidx.compose.Group)>($r3, r2);

        $z1 = virtualinvoke r1.<androidx.compose.Group: boolean isNode()>();

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getNode()>();

        specialinvoke r0.<androidx.compose.Composer: void recordDown(java.lang.Object)>($r4);

     label1:
        return;
    }

    private final int compoundKeyOf(androidx.compose.Group, androidx.compose.Group, int)
    {
        androidx.compose.Composer r0, r10;
        androidx.compose.Group r1, r2, $r3;
        int i0, i1, i2, $i3, $i5, i6, $i7, $i8;
        boolean z0, $z1, z4;
        java.lang.Object $r4, $r11;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, r9;
        java.lang.Throwable $r7;
        byte b4;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Group;

        r2 := @parameter1: androidx.compose.Group;

        i0 := @parameter2: int;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label1;

        $i3 = i0;

        goto label7;

     label1:
        if r1 != null goto label2;

        r9 = "Detached group";

        r10 = r0;

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;

     label2:
        $r3 = virtualinvoke r1.<androidx.compose.Group: androidx.compose.Group getParent()>();

        b4 = 3;

        i1 = specialinvoke r0.<androidx.compose.Composer: int compoundKeyOf(androidx.compose.Group,androidx.compose.Group,int)>($r3, r2, i0);

        z0 = 0;

        $i5 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(i1, b4);

        $r4 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getDataKey()>();

        if $r4 == null goto label5;

        $r11 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getDataKey()>();

        i6 = $i5;

        z4 = 0;

        if $r11 == null goto label3;

        $i7 = virtualinvoke $r11.<java.lang.Object: int hashCode()>();

        goto label4;

     label3:
        $i7 = 0;

     label4:
        i2 = $i7;

        $i5 = i6;

        $i8 = i2;

        goto label6;

     label5:
        $i8 = virtualinvoke r1.<androidx.compose.Group: int getKey()>();

     label6:
        $i3 = $i5 ^ $i8;

     label7:
        return $i3;
    }

    public final androidx.compose.InvalidationResult invalidate$compose_runtime_release(androidx.compose.RecomposeScope)
    {
        androidx.compose.Composer r0;
        androidx.compose.RecomposeScope r1;
        androidx.compose.Anchor r2;
        int i0, $i1;
        androidx.compose.CompositionReference r3, $r8;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.InvalidationResult $r4, $r11, $r12, $r13;
        androidx.compose.SlotTable $r5, $r6;
        java.util.List $r7;
        androidx.compose.Recomposer $r9;
        androidx.compose.SlotReader $r10;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.RecomposeScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $z0 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getDefaultsInScope()>();

        if $z0 == 0 goto label01;

        virtualinvoke r1.<androidx.compose.RecomposeScope: void setDefaultsInvalid(boolean)>(1);

     label01:
        r2 = virtualinvoke r1.<androidx.compose.RecomposeScope: androidx.compose.Anchor getAnchor()>();

        if r2 == null goto label02;

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        $z1 = virtualinvoke $r5.<androidx.compose.SlotTable: boolean ownsAnchor$compose_runtime_release(androidx.compose.Anchor)>(r2);

        if $z1 == 0 goto label03;

     label02:
        $r4 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult IGNORED>;

        return $r4;

     label03:
        $r6 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        i0 = virtualinvoke r2.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r6);

        if i0 >= 0 goto label04;

        $r12 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult IGNORED>;

        return $r12;

     label04:
        $r7 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        staticinvoke <androidx.compose.ComposerKt: void access$insertIfMissing(java.util.List,int,androidx.compose.RecomposeScope)>($r7, i0, r1);

        $z2 = virtualinvoke r0.<androidx.compose.Composer: boolean isComposing$compose_runtime_release()>();

        if $z2 == 0 goto label05;

        $r10 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i1 = virtualinvoke $r10.<androidx.compose.SlotReader: int getCurrent()>();

        if i0 < $i1 goto label05;

        $r11 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult IMMINENT>;

        return $r11;

     label05:
        $r8 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if $r8 == null goto label07;

        r3 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if r3 != null goto label06;

        goto label08;

     label06:
        virtualinvoke r3.<androidx.compose.CompositionReference: void invalidate$compose_runtime_release()>();

        goto label08;

     label07:
        $r9 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.Recomposer getRecomposer()>();

        virtualinvoke $r9.<androidx.compose.Recomposer: void scheduleRecompose$compose_runtime_release(androidx.compose.Composer)>(r0);

     label08:
        $z3 = virtualinvoke r0.<androidx.compose.Composer: boolean isComposing$compose_runtime_release()>();

        if $z3 == 0 goto label09;

        $r13 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult DEFERRED>;

        goto label10;

     label09:
        $r13 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult SCHEDULED>;

     label10:
        return $r13;
    }

    public final void skipCurrentGroup()
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotReader r1;
        int i0;
        java.lang.Object r2, $r4;
        java.util.List $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.Composer;

        $r3 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.compose.Composer: void skipGroup()>();

        goto label2;

     label1:
        r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i0 = virtualinvoke r1.<androidx.compose.SlotReader: int getGroupKey()>();

        r2 = virtualinvoke r1.<androidx.compose.SlotReader: java.lang.Object getGroupDataKey()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeEnterGroup(int,java.lang.Object)>(i0, r2);

        $z1 = virtualinvoke r1.<androidx.compose.SlotReader: boolean isNode()>();

        $r4 = virtualinvoke r1.<androidx.compose.SlotReader: java.lang.Object getGroupData()>();

        specialinvoke r0.<androidx.compose.Composer: void startReaderGroup(boolean,java.lang.Object)>($z1, $r4);

        specialinvoke r0.<androidx.compose.Composer: void recomposeToGroupEnd()>();

        virtualinvoke r1.<androidx.compose.SlotReader: void endGroup()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeExitGroup(int,java.lang.Object)>(i0, r2);

     label2:
        return;
    }

    private final void skipReaderToGroupEnd()
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotReader $r1, $r2;
        int $i0;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i0 = virtualinvoke $r1.<androidx.compose.SlotReader: int getParentNodes()>();

        r0.<androidx.compose.Composer: int groupNodeCount> = $i0;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        virtualinvoke $r2.<androidx.compose.SlotReader: void skipToGroupEnd()>();

        return;
    }

    public final void skipToGroupEnd()
    {
        androidx.compose.Composer r0;
        boolean z0, z1, $z3, $z4, z5;
        int $i0;
        java.util.List $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: androidx.compose.Composer;

        $i0 = r0.<androidx.compose.Composer: int groupNodeCount>;

        if $i0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        z1 = 0;

        z5 = 0;

        if z0 != 0 goto label3;

        r5 = "No nodes can be emitted before calling skipAndEndGroup";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label3:
        $r1 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $z3 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label4;

        specialinvoke r0.<androidx.compose.Composer: void skipReaderToGroupEnd()>();

        goto label5;

     label4:
        specialinvoke r0.<androidx.compose.Composer: void recomposeToGroupEnd()>();

     label5:
        return;
    }

    public final void startRestartGroup(int)
    {
        androidx.compose.Composer r0;
        int i0, $i1;
        androidx.compose.RecomposeScope r1, $r9, r11;
        java.lang.Object r2;
        boolean $z0, $z3;
        androidx.compose.SlotReader $r3, $r5;
        java.util.List $r4;
        androidx.compose.Stack $r6, $r10;
        java.lang.NullPointerException $r8;
        androidx.compose.Invalidation r12;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.Composer: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        $z0 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r9 = new androidx.compose.RecomposeScope;

        specialinvoke $r9.<androidx.compose.RecomposeScope: void <init>(androidx.compose.Composer,int)>(r0, i0);

        r11 = $r9;

        $r10 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        virtualinvoke $r10.<androidx.compose.Stack: boolean push(java.lang.Object)>(r11);

        virtualinvoke r0.<androidx.compose.Composer: void updateValue(java.lang.Object)>(r11);

        goto label5;

     label1:
        $r4 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i1 = virtualinvoke $r3.<androidx.compose.SlotReader: int getParentLocation()>();

        r12 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.Invalidation access$removeLocation(java.util.List,int)>($r4, $i1);

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        r2 = virtualinvoke $r5.<androidx.compose.SlotReader: java.lang.Object next()>();

        if r2 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.RecomposeScope");

        throw $r8;

     label2:
        r1 = (androidx.compose.RecomposeScope) r2;

        if r12 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        virtualinvoke r1.<androidx.compose.RecomposeScope: void setRequiresRecompose(boolean)>($z3);

        $r6 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        virtualinvoke $r6.<androidx.compose.Stack: boolean push(java.lang.Object)>(r1);

     label5:
        return;
    }

    public final androidx.compose.ScopeUpdateScope endRestartGroup()
    {
        androidx.compose.Composer r0;
        androidx.compose.RecomposeScope r1, $r11, r12, $r14, r15;
        androidx.compose.Stack $r2, $r9;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.Anchor $r3, $r13;
        androidx.compose.SlotTable $r4, $r7;
        androidx.compose.SlotReader $r5;
        int $i0, $i1;
        androidx.compose.SlotWriter $r6;
        java.lang.Object $r10;
        androidx.compose.ScopeUpdateScope $r16;

        r0 := @this: androidx.compose.Composer;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        $z0 = virtualinvoke $r2.<androidx.compose.Stack: boolean isNotEmpty()>();

        if $z0 == 0 goto label01;

        $r9 = r0.<androidx.compose.Composer: androidx.compose.Stack invalidateStack>;

        $r10 = virtualinvoke $r9.<androidx.compose.Stack: java.lang.Object pop()>();

        $r11 = (androidx.compose.RecomposeScope) $r10;

        goto label02;

     label01:
        $r11 = (androidx.compose.RecomposeScope) null;

     label02:
        r1 = $r11;

        r12 = r1;

        if r12 != null goto label03;

        goto label04;

     label03:
        virtualinvoke r12.<androidx.compose.RecomposeScope: void setRequiresRecompose(boolean)>(0);

     label04:
        if r1 == null goto label09;

        $z1 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getUsed()>();

        if $z1 != 0 goto label05;

        $z3 = r0.<androidx.compose.Composer: boolean collectKeySources>;

        if $z3 == 0 goto label09;

     label05:
        $r3 = virtualinvoke r1.<androidx.compose.RecomposeScope: androidx.compose.Anchor getAnchor()>();

        if $r3 != null goto label08;

        $z2 = virtualinvoke r0.<androidx.compose.Composer: boolean getInserting()>();

        if $z2 == 0 goto label06;

        $r7 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        $r6 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $i1 = virtualinvoke $r6.<androidx.compose.SlotWriter: int getParentLocation()>();

        $r13 = virtualinvoke $r7.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>($i1);

        goto label07;

     label06:
        $r4 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $r5 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i0 = virtualinvoke $r5.<androidx.compose.SlotReader: int getParentLocation()>();

        $r13 = virtualinvoke $r4.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>($i0);

     label07:
        virtualinvoke r1.<androidx.compose.RecomposeScope: void setAnchor(androidx.compose.Anchor)>($r13);

     label08:
        virtualinvoke r1.<androidx.compose.RecomposeScope: void setDefaultsInvalid(boolean)>(0);

        $r14 = r1;

        goto label10;

     label09:
        $r14 = (androidx.compose.RecomposeScope) null;

     label10:
        r15 = $r14;

        specialinvoke r0.<androidx.compose.Composer: void end(boolean)>(0);

        $r16 = (androidx.compose.ScopeUpdateScope) r15;

        return $r16;
    }

    public final boolean recompose()
    {
        androidx.compose.Composer r0;
        java.lang.Throwable r1, $r5, $r7, r11;
        java.util.List $r2;
        boolean $z1, $z3, z5, z6;
        androidx.compose.Trace $r3, $r4, $r6;
        java.util.Collection r8;
        java.lang.String r9;
        kotlin.Unit r10;

        r0 := @this: androidx.compose.Composer;

        $r2 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        r8 = (java.util.Collection) $r2;

        $z1 = interfaceinvoke r8.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        if $z3 == 0 goto label14;

        r9 = "Compose:recompose";

        $r3 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r3.<androidx.compose.Trace: void beginSection(java.lang.String)>(r9);

     label03:
        r0.<androidx.compose.Composer: int nodeIndex> = 0;

        z5 = 0;

     label04:
        virtualinvoke r0.<androidx.compose.Composer: void startRoot$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.Composer: void skipCurrentGroup()>();

        virtualinvoke r0.<androidx.compose.Composer: void endRoot$compose_runtime_release()>();

        z6 = 1;

     label05:
        goto label09;

     label06:
        $r7 := @caughtexception;

        r1 = $r7;

     label07:
        if z5 != 0 goto label08;

        virtualinvoke r0.<androidx.compose.Composer: void abortRoot$compose_runtime_release()>();

     label08:
        throw r1;

     label09:
        specialinvoke r0.<androidx.compose.Composer: void finalizeCompose()>();

        r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label10:
        $r4 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r4.<androidx.compose.Trace: void endSection()>();

        goto label13;

     label11:
        $r5 := @caughtexception;

        r11 = $r5;

     label12:
        $r6 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r6.<androidx.compose.Trace: void endSection()>();

        throw r11;

     label13:
        return 1;

     label14:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public final boolean hasInvalidations$compose_runtime_release()
    {
        androidx.compose.Composer r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.List $r2;

        r0 := @this: androidx.compose.Composer;

        $r2 = r0.<androidx.compose.Composer: java.util.List invalidations>;

        r1 = (java.util.Collection) $r2;

        z0 = 0;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private final java.lang.Object getNode(androidx.compose.SlotWriter)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1;
        androidx.compose.NodeGroup $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotWriter;

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.NodeGroup getNodeGroup(androidx.compose.SlotWriter)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.NodeGroup: java.lang.Object getNode()>();

        return $r3;
    }

    private final void setNode(androidx.compose.SlotWriter, java.lang.Object)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1;
        java.lang.Object r2;
        androidx.compose.NodeGroup $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotWriter;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.NodeGroup getNodeGroup(androidx.compose.SlotWriter)>($r1);

        virtualinvoke $r3.<androidx.compose.NodeGroup: void setNode(java.lang.Object)>(r2);

        return;
    }

    private static void getNode$annotations(androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter $r0;

        $r0 := @parameter0: androidx.compose.SlotWriter;

        return;
    }

    private final androidx.compose.NodeGroup getNodeGroup(androidx.compose.SlotWriter)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1;
        java.lang.Object r2;
        int $i0, $i1;
        androidx.compose.NodeGroup $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotWriter;

        $i0 = virtualinvoke $r1.<androidx.compose.SlotWriter: int getCurrent()>();

        $i1 = $i0 - 1;

        r2 = virtualinvoke $r1.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i1);

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.NodeGroup");

        throw $r4;

     label1:
        $r3 = (androidx.compose.NodeGroup) r2;

        return $r3;
    }

    private final androidx.compose.NodeGroup nodeGroupAt(androidx.compose.SlotWriter, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1;
        int i0;
        java.lang.Object r2;
        androidx.compose.NodeGroup $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotWriter;

        i0 := @parameter1: int;

        r2 = virtualinvoke $r1.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i0);

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.NodeGroup");

        throw $r4;

     label1:
        $r3 = (androidx.compose.NodeGroup) r2;

        return $r3;
    }

    private final java.lang.Object nodeAt(androidx.compose.SlotWriter, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotWriter $r1;
        int i0;
        androidx.compose.NodeGroup $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotWriter;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.NodeGroup nodeGroupAt(androidx.compose.SlotWriter,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<androidx.compose.NodeGroup: java.lang.Object getNode()>();

        return $r3;
    }

    private final java.lang.Object getNode(androidx.compose.SlotReader)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotReader $r1;
        int $i0, $i1;
        androidx.compose.NodeGroup $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotReader;

        $i0 = virtualinvoke $r1.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = $i0 - 1;

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.NodeGroup nodeGroupAt(androidx.compose.SlotReader,int)>($r1, $i1);

        $r3 = virtualinvoke $r2.<androidx.compose.NodeGroup: java.lang.Object getNode()>();

        return $r3;
    }

    private static void getNode$annotations(androidx.compose.SlotReader)
    {
        androidx.compose.SlotReader $r0;

        $r0 := @parameter0: androidx.compose.SlotReader;

        return;
    }

    private final androidx.compose.NodeGroup nodeGroupAt(androidx.compose.SlotReader, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotReader $r1;
        int i0;
        java.lang.Object r2;
        androidx.compose.NodeGroup $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotReader;

        i0 := @parameter1: int;

        r2 = virtualinvoke $r1.<androidx.compose.SlotReader: java.lang.Object get(int)>(i0);

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.compose.NodeGroup");

        throw $r4;

     label1:
        $r3 = (androidx.compose.NodeGroup) r2;

        return $r3;
    }

    private final java.lang.Object nodeAt(androidx.compose.SlotReader, int)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotReader $r1;
        int i0;
        androidx.compose.NodeGroup $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 := @parameter0: androidx.compose.SlotReader;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<androidx.compose.Composer: androidx.compose.NodeGroup nodeGroupAt(androidx.compose.SlotReader,int)>($r1, i0);

        $r3 = virtualinvoke $r2.<androidx.compose.NodeGroup: java.lang.Object getNode()>();

        return $r3;
    }

    private final void validateNodeExpected()
    {
        androidx.compose.Composer r0;
        boolean z0, z1, z3;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.compose.Composer;

        z0 = r0.<androidx.compose.Composer: boolean nodeExpected>;

        z1 = 0;

        z3 = 0;

        if z0 != 0 goto label1;

        r4 = "A call to createNode(), emitNode() or useNode() expected was not expected";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label1:
        r0.<androidx.compose.Composer: boolean nodeExpected> = 0;

        return;
    }

    private final void validateNodeNotExpected()
    {
        androidx.compose.Composer r0;
        boolean z0, z1, $z3, $z4, z5;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.compose.Composer;

        $z3 = r0.<androidx.compose.Composer: boolean nodeExpected>;

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        z1 = 0;

        z5 = 0;

        if z0 != 0 goto label3;

        r4 = "A call to createNode(), emitNode() or useNode() expected";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        return;
    }

    private final void record(kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 = r0.<androidx.compose.Composer: java.util.List changes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final void recordOperation(kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.Composer: void realizeInsertUps()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeUps()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeDowns()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeOperationLocation(int)>(0);

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    private final void recordApplierOperation(kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.Composer: void realizeInsertUps()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeUps()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeDowns()>();

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    private final void recordSlotEditingOperation(int, kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        int i0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.Composer: void realizeOperationLocation(int)>(i0);

        specialinvoke r0.<androidx.compose.Composer: void recordSlotEditing()>();

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    static void recordSlotEditingOperation$default(androidx.compose.Composer, int, kotlin.jvm.functions.Function3, int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;
        int i0, $i1, i2;
        java.lang.Object r2;

        r0 := @parameter0: androidx.compose.Composer;

        i2 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.functions.Function3;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        specialinvoke r0.<androidx.compose.Composer: void recordSlotEditingOperation(int,kotlin.jvm.functions.Function3)>(i2, r1);

        return;
    }

    private final void recordSlotTableOperation(int, kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        int i0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.Composer: void realizeOperationLocation(int)>(i0);

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    static void recordSlotTableOperation$default(androidx.compose.Composer, int, kotlin.jvm.functions.Function3, int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;
        int i0, $i1, i2;
        java.lang.Object r2;

        r0 := @parameter0: androidx.compose.Composer;

        i2 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.functions.Function3;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        specialinvoke r0.<androidx.compose.Composer: void recordSlotTableOperation(int,kotlin.jvm.functions.Function3)>(i2, r1);

        return;
    }

    private final void realizeUps()
    {
        androidx.compose.Composer r0;
        int i0;
        androidx.compose.Composer$realizeUps$1 $r1;
        kotlin.jvm.functions.Function3 $r2;

        r0 := @this: androidx.compose.Composer;

        i0 = r0.<androidx.compose.Composer: int pendingUps>;

        if i0 <= 0 goto label1;

        r0.<androidx.compose.Composer: int pendingUps> = 0;

        $r1 = new androidx.compose.Composer$realizeUps$1;

        specialinvoke $r1.<androidx.compose.Composer$realizeUps$1: void <init>(int)>(i0);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>($r2);

     label1:
        return;
    }

    private final void realizeDowns(java.lang.Object[])
    {
        androidx.compose.Composer r0;
        java.lang.Object[] r1;
        androidx.compose.Composer$realizeDowns$1 $r2;
        kotlin.jvm.functions.Function3 $r3;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new androidx.compose.Composer$realizeDowns$1;

        specialinvoke $r2.<androidx.compose.Composer$realizeDowns$1: void <init>(java.lang.Object[])>(r1);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>($r3);

        return;
    }

    private final void realizeDowns()
    {
        androidx.compose.Composer r0;
        androidx.compose.Stack $r1, $r2, $r4;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        $z0 = virtualinvoke $r1.<androidx.compose.Stack: boolean isNotEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        $r3 = virtualinvoke $r2.<androidx.compose.Stack: java.lang.Object[] toArray()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeDowns(java.lang.Object[])>($r3);

        $r4 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        virtualinvoke $r4.<androidx.compose.Stack: void clear()>();

     label1:
        return;
    }

    private final void recordDown(java.lang.Object)
    {
        androidx.compose.Composer r0;
        java.lang.Object r1;
        androidx.compose.Stack $r2;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        virtualinvoke $r2.<androidx.compose.Stack: boolean push(java.lang.Object)>(r1);

        return;
    }

    private final void recordUp()
    {
        androidx.compose.Composer r0, r1;
        int i0, $i1;
        androidx.compose.Stack $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.compose.Composer;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        $z0 = virtualinvoke $r2.<androidx.compose.Stack: boolean isNotEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.Stack downNodes>;

        virtualinvoke $r3.<androidx.compose.Stack: java.lang.Object pop()>();

        goto label2;

     label1:
        r1 = r0;

        i0 = r1.<androidx.compose.Composer: int pendingUps>;

        $i1 = i0 + 1;

        r1.<androidx.compose.Composer: int pendingUps> = $i1;

     label2:
        return;
    }

    private final void recordInsertUp()
    {
        androidx.compose.Composer r0, r1;
        int i0, $i1;

        r0 := @this: androidx.compose.Composer;

        r1 = r0;

        i0 = r1.<androidx.compose.Composer: int pendingInsertUps>;

        $i1 = i0 + 1;

        r1.<androidx.compose.Composer: int pendingInsertUps> = $i1;

        return;
    }

    private final void realizeInsertUps()
    {
        androidx.compose.Composer r0;
        int i0, $i1;
        androidx.compose.Composer$realizeInsertUps$1 $r1;
        kotlin.jvm.functions.Function3 $r2;

        r0 := @this: androidx.compose.Composer;

        $i1 = r0.<androidx.compose.Composer: int pendingInsertUps>;

        if $i1 <= 0 goto label1;

        i0 = r0.<androidx.compose.Composer: int pendingInsertUps>;

        $r1 = new androidx.compose.Composer$realizeInsertUps$1;

        specialinvoke $r1.<androidx.compose.Composer$realizeInsertUps$1: void <init>(int)>(i0);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>($r2);

        r0.<androidx.compose.Composer: int pendingInsertUps> = 0;

     label1:
        return;
    }

    private final void realizeOperationLocation(int)
    {
        androidx.compose.Composer r0;
        int i0, i1, i2, $i3, $i4;
        boolean z0, z1, $z3, z4;
        androidx.compose.SlotReader $r1;
        androidx.compose.Composer$realizeOperationLocation$2 $r2;
        kotlin.jvm.functions.Function3 $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i3 = virtualinvoke $r1.<androidx.compose.SlotReader: int getCurrent()>();

        i1 = $i3 + i0;

        $i4 = r0.<androidx.compose.Composer: int writersReaderDelta>;

        i2 = i1 - $i4;

        if i2 < 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r7 = "Tried to seek backward";

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label3:
        if i2 <= 0 goto label4;

        $r2 = new androidx.compose.Composer$realizeOperationLocation$2;

        specialinvoke $r2.<androidx.compose.Composer$realizeOperationLocation$2: void <init>(int)>(i2);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        specialinvoke r0.<androidx.compose.Composer: void record(kotlin.jvm.functions.Function3)>($r3);

        r0.<androidx.compose.Composer: int writersReaderDelta> = i1;

     label4:
        return;
    }

    private final void recordInsert(androidx.compose.Anchor)
    {
        androidx.compose.Composer r0;
        androidx.compose.Anchor r1;
        java.util.List r2, $r3, $r4, $r6;
        boolean $z0;
        java.util.Collection $r5;
        androidx.compose.Composer$recordInsert$2 $r7;
        kotlin.jvm.functions.Function3 $r8, $r10;
        androidx.compose.Composer$recordInsert$1 $r9;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: androidx.compose.Anchor;

        $r3 = r0.<androidx.compose.Composer: java.util.List insertFixups>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r9 = new androidx.compose.Composer$recordInsert$1;

        specialinvoke $r9.<androidx.compose.Composer$recordInsert$1: void <init>(androidx.compose.Composer,androidx.compose.Anchor)>(r0, r1);

        $r10 = (kotlin.jvm.functions.Function3) $r9;

        staticinvoke <androidx.compose.Composer: void recordSlotEditingOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r10, 1, null);

        goto label2;

     label1:
        $r4 = r0.<androidx.compose.Composer: java.util.List insertFixups>;

        $r5 = (java.util.Collection) $r4;

        r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r5);

        $r6 = r0.<androidx.compose.Composer: java.util.List insertFixups>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        specialinvoke r0.<androidx.compose.Composer: void recordSlotEditing()>();

        $r7 = new androidx.compose.Composer$recordInsert$2;

        specialinvoke $r7.<androidx.compose.Composer$recordInsert$2: void <init>(androidx.compose.Composer,androidx.compose.Anchor,java.util.List)>(r0, r1, r2);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        specialinvoke r0.<androidx.compose.Composer: void recordOperation(kotlin.jvm.functions.Function3)>($r8);

     label2:
        return;
    }

    private final void recordFixup(kotlin.jvm.functions.Function3)
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 r1;
        androidx.compose.Anchor r2;
        int i0, i1, $i2;
        androidx.compose.SlotTable $r3;
        androidx.compose.SlotWriter $r4;
        androidx.compose.Composer$recordFixup$1 $r5;
        java.util.List $r6, $r7;

        r0 := @this: androidx.compose.Composer;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.Composer: void realizeInsertUps()>();

        r2 = r0.<androidx.compose.Composer: androidx.compose.Anchor insertAnchor>;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        i0 = virtualinvoke $r3.<androidx.compose.SlotTable: int anchorLocation$compose_runtime_release(androidx.compose.Anchor)>(r2);

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotWriter writer>;

        $i2 = virtualinvoke $r4.<androidx.compose.SlotWriter: int getCurrent()>();

        i1 = $i2 - i0;

        $r6 = r0.<androidx.compose.Composer: java.util.List insertFixups>;

        $r5 = new androidx.compose.Composer$recordFixup$1;

        specialinvoke $r5.<androidx.compose.Composer$recordFixup$1: void <init>(int,androidx.compose.Composer,androidx.compose.Anchor)>(i1, r0, r2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r7 = r0.<androidx.compose.Composer: java.util.List insertFixups>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final void recordDelete()
    {
        androidx.compose.Composer r0, r1;
        kotlin.jvm.functions.Function3 $r2;
        androidx.compose.SlotReader $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.Composer;

        $r2 = staticinvoke <androidx.compose.ComposerKt: kotlin.jvm.functions.Function3 access$getRemoveCurrentGroupInstance$cp$s1550638793()>();

        staticinvoke <androidx.compose.Composer: void recordSlotEditingOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r2, 1, null);

        r1 = r0;

        $i0 = r1.<androidx.compose.Composer: int writersReaderDelta>;

        $r3 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i1 = virtualinvoke $r3.<androidx.compose.SlotReader: int getGroupSize()>();

        $i2 = $i1 + 1;

        $i3 = $i0 + $i2;

        r1.<androidx.compose.Composer: int writersReaderDelta> = $i3;

        return;
    }

    private final void recordReaderMoving(int)
    {
        androidx.compose.Composer r0;
        int i0, i1, $i2, $i3, $i4;
        androidx.compose.SlotReader $r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i2 = virtualinvoke $r1.<androidx.compose.SlotReader: int getCurrent()>();

        $i3 = r0.<androidx.compose.Composer: int writersReaderDelta>;

        i1 = $i2 - $i3;

        $i4 = i0 - i1;

        r0.<androidx.compose.Composer: int writersReaderDelta> = $i4;

        return;
    }

    private final void recordSlotEditing()
    {
        androidx.compose.Composer r0;
        int i0, $i1, $i2;
        androidx.compose.Anchor r1;
        androidx.compose.SlotReader $r2, $r4;
        androidx.compose.IntStack $r3, $r6;
        androidx.compose.SlotTable $r5;
        androidx.compose.Composer$recordSlotEditing$1 $r7;
        kotlin.jvm.functions.Function3 $r8;

        r0 := @this: androidx.compose.Composer;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i0 = virtualinvoke $r2.<androidx.compose.SlotReader: int getParentLocation()>();

        $r3 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        $i1 = virtualinvoke $r3.<androidx.compose.IntStack: int peekOr(int)>(-1);

        if $i1 == i0 goto label1;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i2 = virtualinvoke $r4.<androidx.compose.SlotReader: int getCurrent()>();

        if $i2 == 0 goto label1;

        $r5 = virtualinvoke r0.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        r1 = virtualinvoke $r5.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>(i0);

        $r6 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        virtualinvoke $r6.<androidx.compose.IntStack: void push(int)>(i0);

        r0.<androidx.compose.Composer: boolean startedGroup> = 1;

        $r7 = new androidx.compose.Composer$recordSlotEditing$1;

        specialinvoke $r7.<androidx.compose.Composer$recordSlotEditing$1: void <init>(androidx.compose.Anchor)>(r1);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        staticinvoke <androidx.compose.Composer: void recordSlotTableOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r8, 1, null);

     label1:
        return;
    }

    private final void recordSkipToGroupEnd()
    {
        androidx.compose.Composer r0;
        kotlin.jvm.functions.Function3 $r1;
        androidx.compose.SlotReader $r2;
        int $i0;

        r0 := @this: androidx.compose.Composer;

        $r1 = staticinvoke <androidx.compose.ComposerKt: kotlin.jvm.functions.Function3 access$getSkipToEndGroupInstance$cp$s1550638793()>();

        staticinvoke <androidx.compose.Composer: void recordSlotTableOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r1, 1, null);

        $r2 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        $i0 = virtualinvoke $r2.<androidx.compose.SlotReader: int getCurrent()>();

        r0.<androidx.compose.Composer: int writersReaderDelta> = $i0;

        return;
    }

    private final void recordEndGroup()
    {
        androidx.compose.Composer r0;
        int i0, i1, $i2;
        boolean z0, z1, $z3, z4;
        androidx.compose.SlotReader $r1;
        androidx.compose.IntStack $r2, $r3, $r4;
        kotlin.jvm.functions.Function3 $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, r9;
        java.lang.Throwable $r8;

        r0 := @this: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotReader reader>;

        i0 = virtualinvoke $r1.<androidx.compose.SlotReader: int getParentLocation()>();

        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        i1 = virtualinvoke $r2.<androidx.compose.IntStack: int peekOr(int)>(-1);

        if i1 > i0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r9 = "Missed recording an endGroup";

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label3:
        $r3 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        $i2 = virtualinvoke $r3.<androidx.compose.IntStack: int peekOr(int)>(-1);

        if $i2 != i0 goto label4;

        $r4 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        virtualinvoke $r4.<androidx.compose.IntStack: int pop()>();

        $r5 = staticinvoke <androidx.compose.ComposerKt: kotlin.jvm.functions.Function3 access$getEndGroupInstance$cp$s1550638793()>();

        staticinvoke <androidx.compose.Composer: void recordSlotTableOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r5, 1, null);

     label4:
        return;
    }

    private final void recordEndRoot()
    {
        androidx.compose.Composer r0;
        boolean $z0;
        kotlin.jvm.functions.Function3 $r1;

        r0 := @this: androidx.compose.Composer;

        $z0 = r0.<androidx.compose.Composer: boolean startedGroup>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <androidx.compose.ComposerKt: kotlin.jvm.functions.Function3 access$getEndGroupInstance$cp$s1550638793()>();

        staticinvoke <androidx.compose.Composer: void recordSlotTableOperation$default(androidx.compose.Composer,int,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r1, 1, null);

        r0.<androidx.compose.Composer: boolean startedGroup> = 0;

     label1:
        return;
    }

    private final void finalizeCompose()
    {
        androidx.compose.Composer r0;
        androidx.compose.Stack $r1;
        androidx.compose.IntStack $r2;
        java.lang.IllegalArgumentException $r3, $r6;
        java.lang.String $r4, $r7, r9, r10;
        java.lang.Throwable $r5, $r8;
        boolean z0, z1, z2, z4, z5, z6;

        r0 := @this: androidx.compose.Composer;

        specialinvoke r0.<androidx.compose.Composer: void realizeInsertUps()>();

        specialinvoke r0.<androidx.compose.Composer: void realizeUps()>();

        $r1 = r0.<androidx.compose.Composer: androidx.compose.Stack pendingStack>;

        z0 = virtualinvoke $r1.<androidx.compose.Stack: boolean isEmpty()>();

        z1 = 0;

        z2 = 0;

        if z0 != 0 goto label1;

        r9 = "Start/end imbalance";

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label1:
        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        z4 = virtualinvoke $r2.<androidx.compose.IntStack: boolean isEmpty()>();

        z5 = 0;

        z6 = 0;

        if z4 != 0 goto label2;

        r10 = "Missed recording an endGroup()";

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r5 = (java.lang.Throwable) $r3;

        throw $r5;

     label2:
        specialinvoke r0.<androidx.compose.Composer: void cleanUpCompose()>();

        return;
    }

    private final void cleanUpCompose()
    {
        androidx.compose.Composer r0;
        androidx.compose.Pending $r1;
        androidx.compose.IntStack $r2;
        java.util.HashMap $r3;

        r0 := @this: androidx.compose.Composer;

        $r1 = (androidx.compose.Pending) null;

        r0.<androidx.compose.Composer: androidx.compose.Pending pending> = $r1;

        r0.<androidx.compose.Composer: int nodeIndex> = 0;

        r0.<androidx.compose.Composer: int groupNodeCount> = 0;

        r0.<androidx.compose.Composer: int writersReaderDelta> = 0;

        r0.<androidx.compose.Composer: int currentCompoundKeyHash> = 0;

        r0.<androidx.compose.Composer: boolean nodeExpected> = 0;

        r0.<androidx.compose.Composer: boolean startedGroup> = 0;

        $r2 = r0.<androidx.compose.Composer: androidx.compose.IntStack startedGroups>;

        virtualinvoke $r2.<androidx.compose.IntStack: void clear()>();

        $r3 = r0.<androidx.compose.Composer: java.util.HashMap nodeCountOverrides>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        return;
    }

    private final void recordRemoveNode(int, int)
    {
        androidx.compose.Composer r0, r6;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z2, z3, z4;
        java.lang.Integer $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label5;

        if i0 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;

        z0 = 0;

        z4 = 0;

        if z3 != 0 goto label3;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Invalid remove index ", $r1);

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label3:
        $i2 = r0.<androidx.compose.Composer: int previousRemove>;

        if $i2 != i0 goto label4;

        r6 = r0;

        $i3 = r6.<androidx.compose.Composer: int previousCount>;

        $i4 = $i3 + i1;

        r6.<androidx.compose.Composer: int previousCount> = $i4;

        goto label5;

     label4:
        specialinvoke r0.<androidx.compose.Composer: void realizeMovement()>();

        r0.<androidx.compose.Composer: int previousRemove> = i0;

        r0.<androidx.compose.Composer: int previousCount> = i1;

     label5:
        return;
    }

    private final void recordMoveNode(int, int, int)
    {
        androidx.compose.Composer r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 <= 0 goto label2;

        $i3 = r0.<androidx.compose.Composer: int previousCount>;

        if $i3 <= 0 goto label1;

        $i6 = r0.<androidx.compose.Composer: int previousMoveFrom>;

        $i4 = r0.<androidx.compose.Composer: int previousCount>;

        $i5 = i0 - $i4;

        if $i6 != $i5 goto label1;

        $i9 = r0.<androidx.compose.Composer: int previousMoveTo>;

        $i7 = r0.<androidx.compose.Composer: int previousCount>;

        $i8 = i1 - $i7;

        if $i9 != $i8 goto label1;

        r1 = r0;

        $i10 = r1.<androidx.compose.Composer: int previousCount>;

        $i11 = $i10 + i2;

        r1.<androidx.compose.Composer: int previousCount> = $i11;

        goto label2;

     label1:
        specialinvoke r0.<androidx.compose.Composer: void realizeMovement()>();

        r0.<androidx.compose.Composer: int previousMoveFrom> = i0;

        r0.<androidx.compose.Composer: int previousMoveTo> = i1;

        r0.<androidx.compose.Composer: int previousCount> = i2;

     label2:
        return;
    }

    private final void realizeMovement()
    {
        androidx.compose.Composer r0;
        int i0, i1, $i2, i3, i4;
        androidx.compose.Composer$realizeMovement$2 $r1;
        kotlin.jvm.functions.Function3 $r2, $r4;
        androidx.compose.Composer$realizeMovement$1 $r3;

        r0 := @this: androidx.compose.Composer;

        i0 = r0.<androidx.compose.Composer: int previousCount>;

        r0.<androidx.compose.Composer: int previousCount> = 0;

        if i0 <= 0 goto label2;

        $i2 = r0.<androidx.compose.Composer: int previousRemove>;

        if $i2 < 0 goto label1;

        i3 = r0.<androidx.compose.Composer: int previousRemove>;

        r0.<androidx.compose.Composer: int previousRemove> = -1;

        $r3 = new androidx.compose.Composer$realizeMovement$1;

        specialinvoke $r3.<androidx.compose.Composer$realizeMovement$1: void <init>(int,int)>(i3, i0);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.Composer: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r4);

        goto label2;

     label1:
        i4 = r0.<androidx.compose.Composer: int previousMoveFrom>;

        r0.<androidx.compose.Composer: int previousMoveFrom> = -1;

        i1 = r0.<androidx.compose.Composer: int previousMoveTo>;

        r0.<androidx.compose.Composer: int previousMoveTo> = -1;

        $r1 = new androidx.compose.Composer$realizeMovement$2;

        specialinvoke $r1.<androidx.compose.Composer$realizeMovement$2: void <init>(int,int,int)>(i4, i1, i0);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        specialinvoke r0.<androidx.compose.Composer: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r2);

     label2:
        return;
    }

    private final void updateCompoundKeyWhenWeEnterGroup(int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>(i0);

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>($i1);

     label2:
        return;
    }

    private final void updateCompoundKeyWhenWeEnterGroupKeyHash(int)
    {
        androidx.compose.Composer r0, r1;
        int i0, i2, i3, $i4;
        byte b1;
        boolean z1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        b1 = 3;

        r1 = r0;

        i2 = virtualinvoke r0.<androidx.compose.Composer: int getCurrentCompoundKeyHash()>();

        z1 = 0;

        i3 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(i2, b1);

        $i4 = i3 ^ i0;

        r1.<androidx.compose.Composer: int currentCompoundKeyHash> = $i4;

        return;
    }

    private final void updateCompoundKeyWhenWeExitGroup(int, java.lang.Object)
    {
        androidx.compose.Composer r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>(i0);

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.Composer: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>($i1);

     label2:
        return;
    }

    private final void updateCompoundKeyWhenWeExitGroupKeyHash(int)
    {
        androidx.compose.Composer r0, r1;
        int i0, i2, i3, $i4, $i5;
        byte b1;
        boolean z1;

        r0 := @this: androidx.compose.Composer;

        i0 := @parameter0: int;

        $i4 = virtualinvoke r0.<androidx.compose.Composer: int getCurrentCompoundKeyHash()>();

        $i5 = staticinvoke <java.lang.Integer: int hashCode(int)>(i0);

        b1 = 3;

        r1 = r0;

        i2 = $i4 ^ $i5;

        z1 = 0;

        i3 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>(i2, b1);

        r1.<androidx.compose.Composer: int currentCompoundKeyHash> = i3;

        return;
    }

    public static final void access$setNode(androidx.compose.Composer, androidx.compose.SlotWriter, java.lang.Object)
    {
        androidx.compose.Composer $r0;
        androidx.compose.SlotWriter $r1;
        java.lang.Object r2;

        $r0 := @parameter0: androidx.compose.Composer;

        $r1 := @parameter1: androidx.compose.SlotWriter;

        r2 := @parameter2: java.lang.Object;

        specialinvoke $r0.<androidx.compose.Composer: void setNode(androidx.compose.SlotWriter,java.lang.Object)>($r1, r2);

        return;
    }

    public static final androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)
    {
        androidx.compose.Composer r0;
        androidx.compose.SlotTable $r1;

        r0 := @parameter0: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.SlotTable insertTable>;

        return $r1;
    }

    public static final java.lang.Object access$parentAmbient(androidx.compose.Composer, androidx.compose.Ambient, int)
    {
        androidx.compose.Composer $r0;
        androidx.compose.Ambient r1;
        int i0;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.compose.Composer;

        r1 := @parameter1: androidx.compose.Ambient;

        i0 := @parameter2: int;

        $r2 = specialinvoke $r0.<androidx.compose.Composer: java.lang.Object parentAmbient(androidx.compose.Ambient,int)>(r1, i0);

        return $r2;
    }

    public static final androidx.compose.BuildableMap access$ambientScopeAt(androidx.compose.Composer, int)
    {
        androidx.compose.Composer $r0;
        int i0;
        androidx.compose.BuildableMap $r1;

        $r0 := @parameter0: androidx.compose.Composer;

        i0 := @parameter1: int;

        $r1 = specialinvoke $r0.<androidx.compose.Composer: androidx.compose.BuildableMap ambientScopeAt(int)>(i0);

        return $r1;
    }

    public static final java.util.HashMap access$getLifecycleObservers$p(androidx.compose.Composer)
    {
        androidx.compose.Composer r0;
        java.util.HashMap $r1;

        r0 := @parameter0: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: java.util.HashMap lifecycleObservers>;

        return $r1;
    }

    public static final java.util.List access$getChanges$p(androidx.compose.Composer)
    {
        androidx.compose.Composer r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: java.util.List changes>;

        return $r1;
    }

    public static final androidx.compose.Applier access$getApplier$p(androidx.compose.Composer)
    {
        androidx.compose.Composer r0;
        androidx.compose.Applier $r1;

        r0 := @parameter0: androidx.compose.Composer;

        $r1 = r0.<androidx.compose.Composer: androidx.compose.Applier applier>;

        return $r1;
    }

androidx.compose.Composer$ambientScopeAt$group$1
<androidx.compose.Composer$ambientScopeAt$group$1: int $location>
    void <init>(int)
    {
        androidx.compose.Composer$ambientScopeAt$group$1 r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$ambientScopeAt$group$1;

        $i0 := @parameter0: int;

        r0.<androidx.compose.Composer$ambientScopeAt$group$1: int $location> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.Group invoke(androidx.compose.SlotReader)
    {
        androidx.compose.Composer$ambientScopeAt$group$1 r0;
        androidx.compose.SlotReader r1;
        int $i0;
        androidx.compose.Group $r2;

        r0 := @this: androidx.compose.Composer$ambientScopeAt$group$1;

        r1 := @parameter0: androidx.compose.SlotReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $i0 = r0.<androidx.compose.Composer$ambientScopeAt$group$1: int $location>;

        $r2 = virtualinvoke r1.<androidx.compose.SlotReader: androidx.compose.Group group$compose_runtime_release(int)>($i0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.Composer$ambientScopeAt$group$1 r0;
        java.lang.Object r1;
        androidx.compose.SlotReader $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.Composer$ambientScopeAt$group$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.SlotReader) r1;

        $r3 = virtualinvoke r0.<androidx.compose.Composer$ambientScopeAt$group$1: androidx.compose.Group invoke(androidx.compose.SlotReader)>($r2);

        return $r3;
    }

androidx.compose.Composer$apply$1
<androidx.compose.Composer$apply$1: kotlin.jvm.functions.Function2 $block>
<androidx.compose.Composer$apply$1: java.lang.Object $value>
    void <init>(kotlin.jvm.functions.Function2, java.lang.Object)
    {
        androidx.compose.Composer$apply$1 r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.Composer$apply$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: java.lang.Object;

        r0.<androidx.compose.Composer$apply$1: kotlin.jvm.functions.Function2 $block> = $r1;

        r0.<androidx.compose.Composer$apply$1: java.lang.Object $value> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$apply$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: androidx.compose.Composer$apply$1;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $r4 = r0.<androidx.compose.Composer$apply$1: kotlin.jvm.functions.Function2 $block>;

        $r5 = virtualinvoke r1.<androidx.compose.Applier: java.lang.Object getCurrent()>();

        $r6 = r0.<androidx.compose.Composer$apply$1: java.lang.Object $value>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$apply$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$apply$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$apply$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$applyChanges$1$1
<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer $this>
<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer$applyChanges$1$manager$1 $manager>
    void <init>(androidx.compose.Composer, androidx.compose.Composer$applyChanges$1$manager$1)
    {
        androidx.compose.Composer$applyChanges$1$1 r0;
        androidx.compose.Composer $r1;
        androidx.compose.Composer$applyChanges$1$manager$1 $r2;

        r0 := @this: androidx.compose.Composer$applyChanges$1$1;

        $r1 := @parameter0: androidx.compose.Composer;

        $r2 := @parameter1: androidx.compose.Composer$applyChanges$1$manager$1;

        r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer $this> = $r1;

        r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer$applyChanges$1$manager$1 $manager> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.SlotWriter)
    {
        androidx.compose.Composer$applyChanges$1$1 r0;
        androidx.compose.SlotWriter r1;
        java.lang.Iterable $r2;
        androidx.compose.Composer r3, $r8, $r10;
        androidx.compose.Composer$applyChanges$1$manager$1 r4;
        java.util.Iterator r5;
        java.lang.Object r6;
        kotlin.jvm.functions.Function3 r7;
        java.util.List $r9, $r11;
        boolean $z2;
        androidx.compose.Applier $r12;

        r0 := @this: androidx.compose.Composer$applyChanges$1$1;

        r1 := @parameter0: androidx.compose.SlotWriter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slots");

        $r8 = r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer $this>;

        $r9 = staticinvoke <androidx.compose.Composer: java.util.List access$getChanges$p(androidx.compose.Composer)>($r8);

        $r2 = (java.lang.Iterable) $r9;

        r3 = r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer $this>;

        r4 = r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer$applyChanges$1$manager$1 $manager>;

        r5 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kotlin.jvm.functions.Function3) r6;

        $r12 = staticinvoke <androidx.compose.Composer: androidx.compose.Applier access$getApplier$p(androidx.compose.Composer)>(r3);

        interfaceinvoke r7.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r12, r1, r4);

        goto label1;

     label2:
        $r10 = r0.<androidx.compose.Composer$applyChanges$1$1: androidx.compose.Composer $this>;

        $r11 = staticinvoke <androidx.compose.Composer: java.util.List access$getChanges$p(androidx.compose.Composer)>($r10);

        interfaceinvoke $r11.<java.util.List: void clear()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.Composer$applyChanges$1$1 r0;
        java.lang.Object r1;
        androidx.compose.SlotWriter $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.Composer$applyChanges$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.SlotWriter) r1;

        virtualinvoke r0.<androidx.compose.Composer$applyChanges$1$1: void invoke(androidx.compose.SlotWriter)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.Composer$applyChanges$1$manager$1
<androidx.compose.Composer$applyChanges$1$manager$1: androidx.compose.Composer $this>
<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $enters>
<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $leaves>
    void <init>(androidx.compose.Composer, java.util.Set, java.util.Set)
    {
        androidx.compose.Composer$applyChanges$1$manager$1 r0;
        androidx.compose.Composer $r1;
        java.util.Set $r2, $r3;

        r0 := @this: androidx.compose.Composer$applyChanges$1$manager$1;

        $r1 := @parameter0: androidx.compose.Composer;

        $r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: java.util.Set;

        r0.<androidx.compose.Composer$applyChanges$1$manager$1: androidx.compose.Composer $this> = $r1;

        r0.<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $enters> = $r2;

        r0.<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $leaves> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void entering(androidx.compose.CompositionLifecycleObserver)
    {
        androidx.compose.Composer$applyChanges$1$manager$1 r0;
        androidx.compose.CompositionLifecycleObserver r1;
        androidx.compose.CompositionLifecycleObserverHolder r2, $r3, r10, r12, r13;
        int i0, $i1;
        androidx.compose.Composer $r4;
        java.util.HashMap $r5;
        java.util.Map $r7;
        java.util.Set r8;
        java.lang.Object r9, $r11;
        boolean z3;

        r0 := @this: androidx.compose.Composer$applyChanges$1$manager$1;

        r1 := @parameter0: androidx.compose.CompositionLifecycleObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        $r3 = new androidx.compose.CompositionLifecycleObserverHolder;

        specialinvoke $r3.<androidx.compose.CompositionLifecycleObserverHolder: void <init>(androidx.compose.CompositionLifecycleObserver)>(r1);

        r2 = $r3;

        $r4 = r0.<androidx.compose.Composer$applyChanges$1$manager$1: androidx.compose.Composer $this>;

        $r5 = staticinvoke <androidx.compose.Composer: java.util.HashMap access$getLifecycleObservers$p(androidx.compose.Composer)>($r4);

        $r7 = (java.util.Map) $r5;

        r8 = r0.<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $enters>;

        r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if r9 != null goto label1;

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r2);

        r10 = r2;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r10);

        $r11 = r10;

        goto label2;

     label1:
        $r11 = r9;

     label2:
        z3 = 0;

        r12 = (androidx.compose.CompositionLifecycleObserverHolder) $r11;

        r13 = r12;

        i0 = virtualinvoke r13.<androidx.compose.CompositionLifecycleObserverHolder: int getCount()>();

        $i1 = i0 + 1;

        virtualinvoke r13.<androidx.compose.CompositionLifecycleObserverHolder: void setCount(int)>($i1);

        return;
    }

    public void leaving(androidx.compose.CompositionLifecycleObserver)
    {
        androidx.compose.Composer$applyChanges$1$manager$1 r0;
        androidx.compose.CompositionLifecycleObserver r1;
        androidx.compose.CompositionLifecycleObserverHolder r2, r3, r4, r6, r7, $r8, $r15, $r16, r17, r18, r19, r20, r21;
        java.util.Set r5;
        boolean z0, z1;
        androidx.compose.Composer $r9, $r12;
        java.util.HashMap $r10, $r13;
        java.lang.Object $r11, $r14;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.Composer$applyChanges$1$manager$1;

        r1 := @parameter0: androidx.compose.CompositionLifecycleObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        $r8 = new androidx.compose.CompositionLifecycleObserverHolder;

        specialinvoke $r8.<androidx.compose.CompositionLifecycleObserverHolder: void <init>(androidx.compose.CompositionLifecycleObserver)>(r1);

        r2 = $r8;

        $r9 = r0.<androidx.compose.Composer$applyChanges$1$manager$1: androidx.compose.Composer $this>;

        $r10 = staticinvoke <androidx.compose.Composer: java.util.HashMap access$getLifecycleObservers$p(androidx.compose.Composer)>($r9);

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (androidx.compose.CompositionLifecycleObserverHolder) $r11;

        if r4 != null goto label1;

        $r16 = (androidx.compose.CompositionLifecycleObserverHolder) null;

        goto label3;

     label1:
        r17 = r4;

        r18 = r17;

        r5 = r0.<androidx.compose.Composer$applyChanges$1$manager$1: java.util.Set $leaves>;

        z0 = 0;

        z1 = 0;

        r6 = r18;

        r7 = r6;

        r19 = r7;

        $i0 = virtualinvoke r19.<androidx.compose.CompositionLifecycleObserverHolder: int getCount()>();

        $i1 = $i0 + -1;

        virtualinvoke r19.<androidx.compose.CompositionLifecycleObserverHolder: void setCount(int)>($i1);

        $i2 = virtualinvoke r19.<androidx.compose.CompositionLifecycleObserverHolder: int getCount()>();

        if $i2 != 0 goto label2;

        r20 = r6;

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>(r20);

        r21 = r6;

        $r16 = r21;

        goto label3;

     label2:
        $r16 = (androidx.compose.CompositionLifecycleObserverHolder) null;

     label3:
        r3 = $r16;

        if r3 == null goto label4;

        $r12 = r0.<androidx.compose.Composer$applyChanges$1$manager$1: androidx.compose.Composer $this>;

        $r13 = staticinvoke <androidx.compose.Composer: java.util.HashMap access$getLifecycleObservers$p(androidx.compose.Composer)>($r12);

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        $r15 = (androidx.compose.CompositionLifecycleObserverHolder) $r14;

     label4:
        return;
    }

androidx.compose.Composer$CompositionReferenceImpl
<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope scope>
<androidx.compose.Composer$CompositionReferenceImpl: int compoundHashKey>
<androidx.compose.Composer$CompositionReferenceImpl: boolean collectingKeySources>
<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set inspectionTables>
<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set composers>
<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>
    public void <init>(androidx.compose.Composer, androidx.compose.RecomposeScope, int, boolean)
    {
        androidx.compose.Composer$CompositionReferenceImpl r0, r3;
        androidx.compose.Composer r1;
        androidx.compose.RecomposeScope r2;
        int i0;
        boolean z0, z1;
        java.util.Set r4;
        java.util.LinkedHashSet $r5;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        r1 := @parameter0: androidx.compose.Composer;

        r2 := @parameter1: androidx.compose.RecomposeScope;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0> = r1;

        specialinvoke r0.<androidx.compose.CompositionReference: void <init>()>();

        r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope scope> = r2;

        r0.<androidx.compose.Composer$CompositionReferenceImpl: int compoundHashKey> = i0;

        r0.<androidx.compose.Composer$CompositionReferenceImpl: boolean collectingKeySources> = z0;

        r3 = r0;

        z1 = 0;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r4 = (java.util.Set) $r5;

        r3.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set composers> = r4;

        return;
    }

    public final androidx.compose.RecomposeScope getScope()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        androidx.compose.RecomposeScope $r1;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r1 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope scope>;

        return $r1;
    }

    public int getCompoundHashKey$compose_runtime_release()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $i0 = r0.<androidx.compose.Composer$CompositionReferenceImpl: int compoundHashKey>;

        return $i0;
    }

    public boolean getCollectingKeySources$compose_runtime_release()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $z0 = r0.<androidx.compose.Composer$CompositionReferenceImpl: boolean collectingKeySources>;

        return $z0;
    }

    public final java.util.Set getInspectionTables()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r1 = r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set inspectionTables>;

        return $r1;
    }

    public final void setInspectionTables(java.util.Set)
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        r1 := @parameter0: java.util.Set;

        r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set inspectionTables> = r1;

        return;
    }

    public final java.util.Set getComposers()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r1 = r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set composers>;

        return $r1;
    }

    public void onEnter()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        return;
    }

    public void onLeave()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        boolean z0, z1, $z3, $z4, $z5, z7, $z8;
        java.util.Set r1, r5, $r6, $r7, $r8, r13, r14;
        java.util.Iterator r2, r4;
        androidx.compose.Composer r3;
        java.lang.Object $r9, $r10;
        androidx.compose.SlotTable $r11;
        java.util.Collection r12;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r6 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getComposers()>();

        r12 = (java.util.Collection) $r6;

        z7 = 0;

        $z3 = interfaceinvoke r12.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        if $z8 == 0 goto label7;

        r13 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getInspectionTables()>();

        if r13 != null goto label3;

        goto label6;

     label3:
        r14 = r13;

        z0 = 0;

        z1 = 0;

        r1 = r14;

        $r7 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getComposers()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.Composer) $r9;

        r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Set) $r10;

        $r11 = virtualinvoke r3.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>($r11);

        goto label5;

     label6:
        $r8 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getComposers()>();

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label7:
        return;
    }

    public void registerComposer$compose_runtime_release(androidx.compose.Composer)
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        androidx.compose.Composer r1;
        java.util.Set $r2;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        r1 := @parameter0: androidx.compose.Composer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composer");

        $r2 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getComposers()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void invalidate$compose_runtime_release()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        androidx.compose.CompositionReference r1;
        androidx.compose.Composer $r2, $r3;
        androidx.compose.RecomposeScope $r4;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r2 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        r1 = virtualinvoke $r2.<androidx.compose.Composer: androidx.compose.CompositionReference getParentReference$compose_runtime_release()>();

        if r1 != null goto label1;

        goto label2;

     label1:
        virtualinvoke r1.<androidx.compose.CompositionReference: void invalidate$compose_runtime_release()>();

     label2:
        $r3 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r4 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope getScope()>();

        virtualinvoke $r3.<androidx.compose.Composer: androidx.compose.InvalidationResult invalidate$compose_runtime_release(androidx.compose.RecomposeScope)>($r4);

        return;
    }

    public java.lang.Object getAmbient$compose_runtime_release(androidx.compose.Ambient)
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        androidx.compose.Ambient r1;
        androidx.compose.Anchor r2;
        androidx.compose.RecomposeScope $r3;
        androidx.compose.Composer $r4, $r5, $r6;
        boolean $z0;
        androidx.compose.SlotTable $r7;
        int $i0;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        r1 := @parameter0: androidx.compose.Ambient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r3 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope getScope()>();

        r2 = virtualinvoke $r3.<androidx.compose.RecomposeScope: androidx.compose.Anchor getAnchor()>();

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<androidx.compose.Anchor: boolean getValid()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r5 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r7 = virtualinvoke $r5.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $i0 = virtualinvoke r2.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r7);

        $r8 = staticinvoke <androidx.compose.Composer: java.lang.Object access$parentAmbient(androidx.compose.Composer,androidx.compose.Ambient,int)>($r6, r1, $i0);

        goto label2;

     label1:
        $r4 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r8 = virtualinvoke $r4.<androidx.compose.Composer: java.lang.Object parentAmbient$compose_runtime_release(androidx.compose.Ambient)>(r1);

     label2:
        return $r8;
    }

    public androidx.compose.BuildableMap getAmbientScope$compose_runtime_release()
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        java.lang.Integer r1, $r8;
        androidx.compose.Anchor r2;
        androidx.compose.Composer $r3, $r5;
        androidx.compose.RecomposeScope $r4;
        androidx.compose.SlotTable $r6;
        int $i0, $i1;
        androidx.compose.BuildableMap $r7;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        $r3 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r4 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.RecomposeScope getScope()>();

        r2 = virtualinvoke $r4.<androidx.compose.RecomposeScope: androidx.compose.Anchor getAnchor()>();

        if r2 != null goto label1;

        $r8 = (java.lang.Integer) null;

        goto label2;

     label1:
        $r5 = r0.<androidx.compose.Composer$CompositionReferenceImpl: androidx.compose.Composer this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.Composer: androidx.compose.SlotTable getSlotTable()>();

        $i0 = virtualinvoke r2.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r6);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        r1 = $r8;

        if r1 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

     label4:
        $r7 = staticinvoke <androidx.compose.Composer: androidx.compose.BuildableMap access$ambientScopeAt(androidx.compose.Composer,int)>($r3, $i1);

        return $r7;
    }

    public void recordInspectionTable$compose_runtime_release(java.util.Set)
    {
        androidx.compose.Composer$CompositionReferenceImpl r0;
        java.util.Set r1, r2, $r6, $r7;
        java.util.HashSet r3, r4, $r5;
        boolean z0, z1;

        r0 := @this: androidx.compose.Composer$CompositionReferenceImpl;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        r2 = virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: java.util.Set getInspectionTables()>();

        if r2 != null goto label1;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r3 = $r5;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r6 = (java.util.Set) r4;

        virtualinvoke r0.<androidx.compose.Composer$CompositionReferenceImpl: void setInspectionTables(java.util.Set)>($r6);

        $r7 = (java.util.Set) r3;

        goto label2;

     label1:
        $r7 = r2;

     label2:
        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

androidx.compose.Composer$createNode$2
<androidx.compose.Composer$createNode$2: kotlin.jvm.functions.Function0 $factory>
<androidx.compose.Composer$createNode$2: androidx.compose.Composer $this>
<androidx.compose.Composer$createNode$2: int $insertIndex>
    void <init>(kotlin.jvm.functions.Function0, androidx.compose.Composer, int)
    {
        androidx.compose.Composer$createNode$2 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.Composer $r2;
        int $i0;

        r0 := @this: androidx.compose.Composer$createNode$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: androidx.compose.Composer;

        $i0 := @parameter2: int;

        r0.<androidx.compose.Composer$createNode$2: kotlin.jvm.functions.Function0 $factory> = $r1;

        r0.<androidx.compose.Composer$createNode$2: androidx.compose.Composer $this> = $r2;

        r0.<androidx.compose.Composer$createNode$2: int $insertIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$createNode$2 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        java.lang.Object r4;
        kotlin.jvm.functions.Function0 $r5;
        androidx.compose.Composer $r6;
        int $i0;

        r0 := @this: androidx.compose.Composer$createNode$2;

        r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $r5 = r0.<androidx.compose.Composer$createNode$2: kotlin.jvm.functions.Function0 $factory>;

        r4 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r6 = r0.<androidx.compose.Composer$createNode$2: androidx.compose.Composer $this>;

        staticinvoke <androidx.compose.Composer: void access$setNode(androidx.compose.Composer,androidx.compose.SlotWriter,java.lang.Object)>($r6, r2, r4);

        $i0 = r0.<androidx.compose.Composer$createNode$2: int $insertIndex>;

        virtualinvoke r1.<androidx.compose.Applier: void insert(int,java.lang.Object)>($i0, r4);

        virtualinvoke r1.<androidx.compose.Applier: void down(java.lang.Object)>(r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$createNode$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$createNode$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$createNode$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$emitNode$1
<androidx.compose.Composer$emitNode$1: kotlin.jvm.functions.Function0 $factory>
<androidx.compose.Composer$emitNode$1: androidx.compose.Composer $this>
<androidx.compose.Composer$emitNode$1: int $insertIndex>
    void <init>(kotlin.jvm.functions.Function0, androidx.compose.Composer, int)
    {
        androidx.compose.Composer$emitNode$1 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.Composer $r2;
        int $i0;

        r0 := @this: androidx.compose.Composer$emitNode$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: androidx.compose.Composer;

        $i0 := @parameter2: int;

        r0.<androidx.compose.Composer$emitNode$1: kotlin.jvm.functions.Function0 $factory> = $r1;

        r0.<androidx.compose.Composer$emitNode$1: androidx.compose.Composer $this> = $r2;

        r0.<androidx.compose.Composer$emitNode$1: int $insertIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$emitNode$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        java.lang.Object r4;
        kotlin.jvm.functions.Function0 $r5;
        androidx.compose.Composer $r6;
        int $i0;

        r0 := @this: androidx.compose.Composer$emitNode$1;

        r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $r5 = r0.<androidx.compose.Composer$emitNode$1: kotlin.jvm.functions.Function0 $factory>;

        r4 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r6 = r0.<androidx.compose.Composer$emitNode$1: androidx.compose.Composer $this>;

        staticinvoke <androidx.compose.Composer: void access$setNode(androidx.compose.Composer,androidx.compose.SlotWriter,java.lang.Object)>($r6, r2, r4);

        $i0 = r0.<androidx.compose.Composer$emitNode$1: int $insertIndex>;

        virtualinvoke r1.<androidx.compose.Applier: void insert(int,java.lang.Object)>($i0, r4);

        virtualinvoke r1.<androidx.compose.Applier: void down(java.lang.Object)>(r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$emitNode$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$emitNode$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$emitNode$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$emitNode$3
<androidx.compose.Composer$emitNode$3: int $insertIndex>
<androidx.compose.Composer$emitNode$3: java.lang.Object $node>
    void <init>(int, java.lang.Object)
    {
        androidx.compose.Composer$emitNode$3 r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.Composer$emitNode$3;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        r0.<androidx.compose.Composer$emitNode$3: int $insertIndex> = $i0;

        r0.<androidx.compose.Composer$emitNode$3: java.lang.Object $node> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$emitNode$3 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        java.lang.Object $r4, $r5;
        int $i0;

        r0 := @this: androidx.compose.Composer$emitNode$3;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i0 = r0.<androidx.compose.Composer$emitNode$3: int $insertIndex>;

        $r4 = r0.<androidx.compose.Composer$emitNode$3: java.lang.Object $node>;

        virtualinvoke r1.<androidx.compose.Applier: void insert(int,java.lang.Object)>($i0, $r4);

        $r5 = r0.<androidx.compose.Composer$emitNode$3: java.lang.Object $node>;

        virtualinvoke r1.<androidx.compose.Applier: void down(java.lang.Object)>($r5);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$emitNode$3 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$emitNode$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$emitNode$3: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeDowns$1
<androidx.compose.Composer$realizeDowns$1: java.lang.Object[] $nodes>
    void <init>(java.lang.Object[])
    {
        androidx.compose.Composer$realizeDowns$1 r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.Composer$realizeDowns$1;

        $r1 := @parameter0: java.lang.Object[];

        r0.<androidx.compose.Composer$realizeDowns$1: java.lang.Object[] $nodes> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeDowns$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.Composer$realizeDowns$1;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        i3 = 0;

        $r4 = r0.<androidx.compose.Composer$realizeDowns$1: java.lang.Object[] $nodes>;

        $i2 = lengthof $r4;

        i0 = $i2 + -1;

        if i3 > i0 goto label2;

     label1:
        i1 = i3;

        i3 = i3 + 1;

        $r5 = r0.<androidx.compose.Composer$realizeDowns$1: java.lang.Object[] $nodes>;

        $r6 = $r5[i1];

        virtualinvoke r1.<androidx.compose.Applier: void down(java.lang.Object)>($r6);

        if i3 <= i0 goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeDowns$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeDowns$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeDowns$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeInsertUps$1
<androidx.compose.Composer$realizeInsertUps$1: int $count>
    void <init>(int)
    {
        androidx.compose.Composer$realizeInsertUps$1 r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$realizeInsertUps$1;

        $i0 := @parameter0: int;

        r0.<androidx.compose.Composer$realizeInsertUps$1: int $count> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeInsertUps$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        int i0, i1, i2, i3;
        boolean z0, z2;

        r0 := @this: androidx.compose.Composer$realizeInsertUps$1;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        i0 = r0.<androidx.compose.Composer$realizeInsertUps$1: int $count>;

        z0 = 0;

        z2 = 0;

        i3 = 0;

        i1 = i0;

     label1:
        if i3 >= i1 goto label2;

        i2 = i3;

        virtualinvoke r1.<androidx.compose.Applier: void up()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeInsertUps$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeInsertUps$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeInsertUps$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeMovement$1
<androidx.compose.Composer$realizeMovement$1: int $removeIndex>
<androidx.compose.Composer$realizeMovement$1: int $count>
    void <init>(int, int)
    {
        androidx.compose.Composer$realizeMovement$1 r0;
        int $i0, $i1;

        r0 := @this: androidx.compose.Composer$realizeMovement$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<androidx.compose.Composer$realizeMovement$1: int $removeIndex> = $i0;

        r0.<androidx.compose.Composer$realizeMovement$1: int $count> = $i1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeMovement$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        int $i0, $i1;

        r0 := @this: androidx.compose.Composer$realizeMovement$1;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i1 = r0.<androidx.compose.Composer$realizeMovement$1: int $removeIndex>;

        $i0 = r0.<androidx.compose.Composer$realizeMovement$1: int $count>;

        virtualinvoke r1.<androidx.compose.Applier: void remove(int,int)>($i1, $i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeMovement$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeMovement$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeMovement$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeMovement$2
<androidx.compose.Composer$realizeMovement$2: int $from>
<androidx.compose.Composer$realizeMovement$2: int $to>
<androidx.compose.Composer$realizeMovement$2: int $count>
    void <init>(int, int, int)
    {
        androidx.compose.Composer$realizeMovement$2 r0;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.Composer$realizeMovement$2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        r0.<androidx.compose.Composer$realizeMovement$2: int $from> = $i0;

        r0.<androidx.compose.Composer$realizeMovement$2: int $to> = $i1;

        r0.<androidx.compose.Composer$realizeMovement$2: int $count> = $i2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeMovement$2 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.Composer$realizeMovement$2;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i2 = r0.<androidx.compose.Composer$realizeMovement$2: int $from>;

        $i1 = r0.<androidx.compose.Composer$realizeMovement$2: int $to>;

        $i0 = r0.<androidx.compose.Composer$realizeMovement$2: int $count>;

        virtualinvoke r1.<androidx.compose.Applier: void move(int,int,int)>($i2, $i1, $i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeMovement$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeMovement$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeMovement$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeOperationLocation$2
<androidx.compose.Composer$realizeOperationLocation$2: int $distance>
    void <init>(int)
    {
        androidx.compose.Composer$realizeOperationLocation$2 r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$realizeOperationLocation$2;

        $i0 := @parameter0: int;

        r0.<androidx.compose.Composer$realizeOperationLocation$2: int $distance> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeOperationLocation$2 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        int $i0;

        r0 := @this: androidx.compose.Composer$realizeOperationLocation$2;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i0 = r0.<androidx.compose.Composer$realizeOperationLocation$2: int $distance>;

        virtualinvoke r2.<androidx.compose.SlotWriter: void skip(int)>($i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeOperationLocation$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeOperationLocation$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeOperationLocation$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$realizeUps$1
<androidx.compose.Composer$realizeUps$1: int $count>
    void <init>(int)
    {
        androidx.compose.Composer$realizeUps$1 r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$realizeUps$1;

        $i0 := @parameter0: int;

        r0.<androidx.compose.Composer$realizeUps$1: int $count> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$realizeUps$1 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager $r3;
        int i0, i1, i2, i3;
        boolean z0, z2;

        r0 := @this: androidx.compose.Composer$realizeUps$1;

        r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        i0 = r0.<androidx.compose.Composer$realizeUps$1: int $count>;

        z0 = 0;

        z2 = 0;

        i3 = 0;

        i1 = i0;

     label1:
        if i3 >= i1 goto label2;

        i2 = i3;

        virtualinvoke r1.<androidx.compose.Applier: void up()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$realizeUps$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$realizeUps$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$realizeUps$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$recordFixup$1
<androidx.compose.Composer$recordFixup$1: int $location>
<androidx.compose.Composer$recordFixup$1: androidx.compose.Composer $this>
<androidx.compose.Composer$recordFixup$1: androidx.compose.Anchor $anchor>
    void <init>(int, androidx.compose.Composer, androidx.compose.Anchor)
    {
        androidx.compose.Composer$recordFixup$1 r0;
        int $i0;
        androidx.compose.Composer $r1;
        androidx.compose.Anchor $r2;

        r0 := @this: androidx.compose.Composer$recordFixup$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: androidx.compose.Composer;

        $r2 := @parameter2: androidx.compose.Anchor;

        r0.<androidx.compose.Composer$recordFixup$1: int $location> = $i0;

        r0.<androidx.compose.Composer$recordFixup$1: androidx.compose.Composer $this> = $r1;

        r0.<androidx.compose.Composer$recordFixup$1: androidx.compose.Anchor $anchor> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$recordFixup$1 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        androidx.compose.Composer $r4;
        int $i0, $i1, $i2;
        androidx.compose.SlotTable $r5;
        androidx.compose.Anchor $r6;

        r0 := @this: androidx.compose.Composer$recordFixup$1;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i0 = r0.<androidx.compose.Composer$recordFixup$1: int $location>;

        $r4 = r0.<androidx.compose.Composer$recordFixup$1: androidx.compose.Composer $this>;

        $r5 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r4);

        $r6 = r0.<androidx.compose.Composer$recordFixup$1: androidx.compose.Anchor $anchor>;

        $i1 = virtualinvoke $r5.<androidx.compose.SlotTable: int anchorLocation$compose_runtime_release(androidx.compose.Anchor)>($r6);

        $i2 = $i0 + $i1;

        virtualinvoke r2.<androidx.compose.SlotWriter: void setCurrent(int)>($i2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$recordFixup$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$recordFixup$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$recordFixup$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$recordInsert$1
<androidx.compose.Composer$recordInsert$1: androidx.compose.Composer $this>
<androidx.compose.Composer$recordInsert$1: androidx.compose.Anchor $anchor>
    void <init>(androidx.compose.Composer, androidx.compose.Anchor)
    {
        androidx.compose.Composer$recordInsert$1 r0;
        androidx.compose.Composer $r1;
        androidx.compose.Anchor $r2;

        r0 := @this: androidx.compose.Composer$recordInsert$1;

        $r1 := @parameter0: androidx.compose.Composer;

        $r2 := @parameter1: androidx.compose.Anchor;

        r0.<androidx.compose.Composer$recordInsert$1: androidx.compose.Composer $this> = $r1;

        r0.<androidx.compose.Composer$recordInsert$1: androidx.compose.Anchor $anchor> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$recordInsert$1 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        androidx.compose.Composer $r4, $r6;
        androidx.compose.SlotTable $r5, $r8;
        androidx.compose.Anchor $r7;
        int $i0;

        r0 := @this: androidx.compose.Composer$recordInsert$1;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        virtualinvoke r2.<androidx.compose.SlotWriter: void beginInsert()>();

        $r4 = r0.<androidx.compose.Composer$recordInsert$1: androidx.compose.Composer $this>;

        $r5 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r4);

        $r7 = r0.<androidx.compose.Composer$recordInsert$1: androidx.compose.Anchor $anchor>;

        $r6 = r0.<androidx.compose.Composer$recordInsert$1: androidx.compose.Composer $this>;

        $r8 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r6);

        $i0 = virtualinvoke $r7.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r8);

        virtualinvoke r2.<androidx.compose.SlotWriter: java.util.List moveFrom(androidx.compose.SlotTable,int)>($r5, $i0);

        virtualinvoke r2.<androidx.compose.SlotWriter: void endInsert()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$recordInsert$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$recordInsert$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$recordInsert$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$recordInsert$2$1
<androidx.compose.Composer$recordInsert$2$1: java.util.List $fixups>
<androidx.compose.Composer$recordInsert$2$1: androidx.compose.Applier $applier>
<androidx.compose.Composer$recordInsert$2$1: androidx.compose.LifeCycleManager $lifecycleManager>
    void <init>(java.util.List, androidx.compose.Applier, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$recordInsert$2$1 r0;
        java.util.List $r1;
        androidx.compose.Applier $r2;
        androidx.compose.LifeCycleManager $r3;

        r0 := @this: androidx.compose.Composer$recordInsert$2$1;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: androidx.compose.Applier;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        r0.<androidx.compose.Composer$recordInsert$2$1: java.util.List $fixups> = $r1;

        r0.<androidx.compose.Composer$recordInsert$2$1: androidx.compose.Applier $applier> = $r2;

        r0.<androidx.compose.Composer$recordInsert$2$1: androidx.compose.LifeCycleManager $lifecycleManager> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.SlotWriter)
    {
        androidx.compose.Composer$recordInsert$2$1 r0;
        androidx.compose.SlotWriter r1;
        java.util.Iterator r2;
        kotlin.jvm.functions.Function3 r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        androidx.compose.LifeCycleManager $r6;
        androidx.compose.Applier $r7;

        r0 := @this: androidx.compose.Composer$recordInsert$2$1;

        r1 := @parameter0: androidx.compose.SlotWriter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "writer");

        $r4 = r0.<androidx.compose.Composer$recordInsert$2$1: java.util.List $fixups>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (kotlin.jvm.functions.Function3) $r5;

        $r7 = r0.<androidx.compose.Composer$recordInsert$2$1: androidx.compose.Applier $applier>;

        $r6 = r0.<androidx.compose.Composer$recordInsert$2$1: androidx.compose.LifeCycleManager $lifecycleManager>;

        interfaceinvoke r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, r1, $r6);

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.Composer$recordInsert$2$1 r0;
        java.lang.Object r1;
        androidx.compose.SlotWriter $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.Composer$recordInsert$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.SlotWriter) r1;

        virtualinvoke r0.<androidx.compose.Composer$recordInsert$2$1: void invoke(androidx.compose.SlotWriter)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.Composer$recordInsert$2
<androidx.compose.Composer$recordInsert$2: androidx.compose.Composer $this>
<androidx.compose.Composer$recordInsert$2: androidx.compose.Anchor $anchor>
<androidx.compose.Composer$recordInsert$2: java.util.List $fixups>
    void <init>(androidx.compose.Composer, androidx.compose.Anchor, java.util.List)
    {
        androidx.compose.Composer$recordInsert$2 r0;
        androidx.compose.Composer $r1;
        androidx.compose.Anchor $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.Composer$recordInsert$2;

        $r1 := @parameter0: androidx.compose.Composer;

        $r2 := @parameter1: androidx.compose.Anchor;

        $r3 := @parameter2: java.util.List;

        r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Composer $this> = $r1;

        r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Anchor $anchor> = $r2;

        r0.<androidx.compose.Composer$recordInsert$2: java.util.List $fixups> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$recordInsert$2 r0;
        androidx.compose.Applier r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager r3;
        androidx.compose.Composer $r4, $r10, $r12;
        androidx.compose.SlotTable $r5, $r11, $r14;
        androidx.compose.Composer$recordInsert$2$1 $r6;
        java.util.List $r7;
        kotlin.jvm.functions.Function1 $r8;
        androidx.compose.Anchor $r13;
        int $i0;

        r0 := @this: androidx.compose.Composer$recordInsert$2;

        r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "lifecycleManager");

        $r4 = r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Composer $this>;

        $r5 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r4);

        $r6 = new androidx.compose.Composer$recordInsert$2$1;

        $r7 = r0.<androidx.compose.Composer$recordInsert$2: java.util.List $fixups>;

        specialinvoke $r6.<androidx.compose.Composer$recordInsert$2$1: void <init>(java.util.List,androidx.compose.Applier,androidx.compose.LifeCycleManager)>($r7, r1, r3);

        $r8 = (kotlin.jvm.functions.Function1) $r6;

        virtualinvoke $r5.<androidx.compose.SlotTable: java.lang.Object write(kotlin.jvm.functions.Function1)>($r8);

        virtualinvoke r2.<androidx.compose.SlotWriter: void beginInsert()>();

        $r10 = r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Composer $this>;

        $r11 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r10);

        $r13 = r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Anchor $anchor>;

        $r12 = r0.<androidx.compose.Composer$recordInsert$2: androidx.compose.Composer $this>;

        $r14 = staticinvoke <androidx.compose.Composer: androidx.compose.SlotTable access$getInsertTable$p(androidx.compose.Composer)>($r12);

        $i0 = virtualinvoke $r13.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r14);

        virtualinvoke r2.<androidx.compose.SlotWriter: java.util.List moveFrom(androidx.compose.SlotTable,int)>($r11, $i0);

        virtualinvoke r2.<androidx.compose.SlotWriter: void endInsert()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$recordInsert$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$recordInsert$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$recordInsert$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$recordSlotEditing$1
<androidx.compose.Composer$recordSlotEditing$1: androidx.compose.Anchor $anchor>
    void <init>(androidx.compose.Anchor)
    {
        androidx.compose.Composer$recordSlotEditing$1 r0;
        androidx.compose.Anchor $r1;

        r0 := @this: androidx.compose.Composer$recordSlotEditing$1;

        $r1 := @parameter0: androidx.compose.Anchor;

        r0.<androidx.compose.Composer$recordSlotEditing$1: androidx.compose.Anchor $anchor> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$recordSlotEditing$1 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        androidx.compose.Anchor $r4;

        r0 := @this: androidx.compose.Composer$recordSlotEditing$1;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $r4 = r0.<androidx.compose.Composer$recordSlotEditing$1: androidx.compose.Anchor $anchor>;

        virtualinvoke r2.<androidx.compose.SlotWriter: void ensureStarted(androidx.compose.Anchor)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$recordSlotEditing$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$recordSlotEditing$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$recordSlotEditing$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$start$2
<androidx.compose.Composer$start$2: int $currentRelativePosition>
    void <init>(int)
    {
        androidx.compose.Composer$start$2 r0;
        int $i0;

        r0 := @this: androidx.compose.Composer$start$2;

        $i0 := @parameter0: int;

        r0.<androidx.compose.Composer$start$2: int $currentRelativePosition> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$start$2 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        int $i0;

        r0 := @this: androidx.compose.Composer$start$2;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $i0 = r0.<androidx.compose.Composer$start$2: int $currentRelativePosition>;

        virtualinvoke r2.<androidx.compose.SlotWriter: void moveGroup(int)>($i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$start$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$start$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$start$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$startProviders$currentProviders$1
<androidx.compose.Composer$startProviders$currentProviders$1: androidx.compose.ProvidedValue[] $values>
    void <init>(androidx.compose.ProvidedValue[])
    {
        androidx.compose.Composer$startProviders$currentProviders$1 r0;
        androidx.compose.ProvidedValue[] $r1;

        r0 := @this: androidx.compose.Composer$startProviders$currentProviders$1;

        $r1 := @parameter0: androidx.compose.ProvidedValue[];

        r0.<androidx.compose.Composer$startProviders$currentProviders$1: androidx.compose.ProvidedValue[] $values> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final androidx.compose.BuildableMap invoke(androidx.compose.Composer, int, int)
    {
        androidx.compose.Composer$startProviders$currentProviders$1 r0;
        androidx.compose.Composer $r1;
        int $i0, $i1;
        androidx.compose.BuildableMap r2;
        androidx.compose.ProvidedValue[] $r3;

        r0 := @this: androidx.compose.Composer$startProviders$currentProviders$1;

        $r1 := @parameter0: androidx.compose.Composer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<androidx.compose.Composer$startProviders$currentProviders$1: androidx.compose.ProvidedValue[] $values>;

        r2 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.BuildableMap access$ambientMapOf(androidx.compose.ProvidedValue[],androidx.compose.Composer,int,int)>($r3, $r1, -84750478, 0);

        return r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$startProviders$currentProviders$1 r0;
        java.lang.Object r1, r2, r3;
        java.lang.Number $r4, $r6;
        androidx.compose.Composer $r5;
        int $i0, $i1;
        androidx.compose.BuildableMap $r7;

        r0 := @this: androidx.compose.Composer$startProviders$currentProviders$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (androidx.compose.Composer) r1;

        $r4 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $r6 = (java.lang.Number) r3;

        $i1 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $r7 = virtualinvoke r0.<androidx.compose.Composer$startProviders$currentProviders$1: androidx.compose.BuildableMap invoke(androidx.compose.Composer,int,int)>($r5, $i0, $i1);

        return $r7;
    }

androidx.compose.Composer$startReaderGroup$1
<androidx.compose.Composer$startReaderGroup$1: java.lang.Object $data>
    void <init>(java.lang.Object)
    {
        androidx.compose.Composer$startReaderGroup$1 r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.Composer$startReaderGroup$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.Composer$startReaderGroup$1: java.lang.Object $data> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$startReaderGroup$1 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.Composer$startReaderGroup$1;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        $r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$noName_2");

        $r4 = r0.<androidx.compose.Composer$startReaderGroup$1: java.lang.Object $data>;

        virtualinvoke r2.<androidx.compose.SlotWriter: void updateData(java.lang.Object)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$startReaderGroup$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$startReaderGroup$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$startReaderGroup$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$updateValue$1
<androidx.compose.Composer$updateValue$1: java.lang.Object $value>
    void <init>(java.lang.Object)
    {
        androidx.compose.Composer$updateValue$1 r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.Composer$updateValue$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.Composer$updateValue$1: java.lang.Object $value> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$updateValue$1 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter $r2;
        androidx.compose.LifeCycleManager r3;
        java.lang.Object $r4;
        androidx.compose.CompositionLifecycleObserver $r5;

        r0 := @this: androidx.compose.Composer$updateValue$1;

        $r1 := @parameter0: androidx.compose.Applier;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$noName_1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "lifecycleManager");

        $r4 = r0.<androidx.compose.Composer$updateValue$1: java.lang.Object $value>;

        $r5 = (androidx.compose.CompositionLifecycleObserver) $r4;

        interfaceinvoke r3.<androidx.compose.LifeCycleManager: void entering(androidx.compose.CompositionLifecycleObserver)>($r5);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$updateValue$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$updateValue$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$updateValue$1: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.Composer$updateValue$2
<androidx.compose.Composer$updateValue$2: java.lang.Object $value>
    void <init>(java.lang.Object)
    {
        androidx.compose.Composer$updateValue$2 r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.Composer$updateValue$2;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.Composer$updateValue$2: java.lang.Object $value> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.Applier, androidx.compose.SlotWriter, androidx.compose.LifeCycleManager)
    {
        androidx.compose.Composer$updateValue$2 r0;
        androidx.compose.Applier $r1;
        androidx.compose.SlotWriter r2;
        androidx.compose.LifeCycleManager r3;
        java.lang.Object r4, $r5, $r6, $r9;
        boolean $z0, $z1, $z2;
        androidx.compose.RecomposeScope $r7;
        androidx.compose.CompositionLifecycleObserver $r8, $r10;

        r0 := @this: androidx.compose.Composer$updateValue$2;

        $r1 := @parameter0: androidx.compose.Applier;

        r2 := @parameter1: androidx.compose.SlotWriter;

        r3 := @parameter2: androidx.compose.LifeCycleManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$noName_0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "lifecycleManager");

        $r5 = r0.<androidx.compose.Composer$updateValue$2: java.lang.Object $value>;

        $z0 = $r5 instanceof androidx.compose.CompositionLifecycleObserver;

        if $z0 == 0 goto label1;

        $r9 = r0.<androidx.compose.Composer$updateValue$2: java.lang.Object $value>;

        $r10 = (androidx.compose.CompositionLifecycleObserver) $r9;

        interfaceinvoke r3.<androidx.compose.LifeCycleManager: void entering(androidx.compose.CompositionLifecycleObserver)>($r10);

     label1:
        $r6 = r0.<androidx.compose.Composer$updateValue$2: java.lang.Object $value>;

        r4 = virtualinvoke r2.<androidx.compose.SlotWriter: java.lang.Object update(java.lang.Object)>($r6);

        $z1 = r4 instanceof androidx.compose.CompositionLifecycleObserver;

        if $z1 == 0 goto label2;

        $r8 = (androidx.compose.CompositionLifecycleObserver) r4;

        interfaceinvoke r3.<androidx.compose.LifeCycleManager: void leaving(androidx.compose.CompositionLifecycleObserver)>($r8);

        goto label3;

     label2:
        $z2 = r4 instanceof androidx.compose.RecomposeScope;

        if $z2 == 0 goto label3;

        $r7 = (androidx.compose.RecomposeScope) r4;

        virtualinvoke $r7.<androidx.compose.RecomposeScope: void setInTable(boolean)>(0);

     label3:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.Composer$updateValue$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.LifeCycleManager $r4;
        androidx.compose.SlotWriter $r5;
        androidx.compose.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.Composer$updateValue$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.Applier) r1;

        $r5 = (androidx.compose.SlotWriter) r2;

        $r4 = (androidx.compose.LifeCycleManager) r3;

        virtualinvoke r0.<androidx.compose.Composer$updateValue$2: void invoke(androidx.compose.Applier,androidx.compose.SlotWriter,androidx.compose.LifeCycleManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

