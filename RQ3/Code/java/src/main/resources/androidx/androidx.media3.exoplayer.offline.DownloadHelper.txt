androidx.media3.exoplayer.offline.DownloadHelper
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>
<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>
<androidx.media3.exoplayer.offline.DownloadHelper: android.os.Handler callbackHandler>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.Timeline$Window window>
<androidx.media3.exoplayer.offline.DownloadHelper: boolean isPreparedWithMedia>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$Callback callback>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays>
<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>
<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>
<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] immutableTrackSelectionsByPeriodAndRenderer>
    public static androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)
    {
        android.content.Context r0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r1, $r5;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder $r2, $r3, $r4;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaults(android.content.Context)>(r0);

        $r2 = virtualinvoke $r1.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUpon()>();

        $r3 = virtualinvoke $r2.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setForceHighestSupportedBitrate(boolean)>(1);

        $r4 = virtualinvoke $r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setConstrainAudioChannelCountToDeviceCapabilities(boolean)>(0);

        $r5 = virtualinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters build()>();

        return $r5;
    }

    public static androidx.media3.exoplayer.RendererCapabilities[] getRendererCapabilities(androidx.media3.exoplayer.RenderersFactory)
    {
        androidx.media3.exoplayer.RenderersFactory r0;
        androidx.media3.exoplayer.Renderer[] r1;
        androidx.media3.exoplayer.RendererCapabilities[] r2;
        android.os.Handler $r3;
        androidx.media3.exoplayer.offline.DownloadHelper$1 $r4;
        androidx.media3.exoplayer.offline.DownloadHelper$2 $r5;
        androidx.media3.exoplayer.text.TextOutput $r6;
        androidx.media3.exoplayer.metadata.MetadataOutput $r7;
        int $i0, $i1, i2;
        androidx.media3.exoplayer.Renderer $r8;
        androidx.media3.exoplayer.RendererCapabilities $r9;

        r0 := @parameter0: androidx.media3.exoplayer.RenderersFactory;

        $r3 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentOrMainLooper()>();

        $r4 = new androidx.media3.exoplayer.offline.DownloadHelper$1;

        specialinvoke $r4.<androidx.media3.exoplayer.offline.DownloadHelper$1: void <init>()>();

        $r5 = new androidx.media3.exoplayer.offline.DownloadHelper$2;

        specialinvoke $r5.<androidx.media3.exoplayer.offline.DownloadHelper$2: void <init>()>();

        $r6 = dynamicinvoke "onCues" <androidx.media3.exoplayer.text.TextOutput ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.media3.common.text.CueGroup), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$getRendererCapabilities$0(androidx.media3.common.text.CueGroup)>, methodtype: void __METHODTYPE__(androidx.media3.common.text.CueGroup));

        $r7 = dynamicinvoke "onMetadata" <androidx.media3.exoplayer.metadata.MetadataOutput ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.media3.common.Metadata), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$getRendererCapabilities$1(androidx.media3.common.Metadata)>, methodtype: void __METHODTYPE__(androidx.media3.common.Metadata));

        r1 = interfaceinvoke r0.<androidx.media3.exoplayer.RenderersFactory: androidx.media3.exoplayer.Renderer[] createRenderers(android.os.Handler,androidx.media3.exoplayer.video.VideoRendererEventListener,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.text.TextOutput,androidx.media3.exoplayer.metadata.MetadataOutput)>($r3, $r4, $r5, $r6, $r7);

        $i0 = lengthof r1;

        r2 = newarray (androidx.media3.exoplayer.RendererCapabilities)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r8 = r1[i2];

        $r9 = interfaceinvoke $r8.<androidx.media3.exoplayer.Renderer: androidx.media3.exoplayer.RendererCapabilities getCapabilities()>();

        r2[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forProgressive(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        androidx.media3.common.MediaItem$Builder $r2, $r3;
        androidx.media3.common.MediaItem $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r2 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r2.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>(r1);

        $r4 = virtualinvoke $r3.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(android.content.Context,androidx.media3.common.MediaItem)>(r0, $r4);

        return $r5;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forProgressive(android.content.Context, android.net.Uri, java.lang.String)
    {
        android.content.Context r0;
        android.net.Uri r1;
        java.lang.String r2;
        androidx.media3.common.MediaItem$Builder $r3, $r4, $r5;
        androidx.media3.common.MediaItem $r6;
        androidx.media3.exoplayer.offline.DownloadHelper $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        $r3 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r3.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>(r1);

        $r5 = virtualinvoke $r4.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setCustomCacheKey(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r7 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(android.content.Context,androidx.media3.common.MediaItem)>(r0, $r6);

        return $r7;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forDash(android.content.Context, android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory)
    {
        android.content.Context r0;
        android.net.Uri r1;
        androidx.media3.datasource.DataSource$Factory r2;
        androidx.media3.exoplayer.RenderersFactory r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: androidx.media3.datasource.DataSource$Factory;

        r3 := @parameter3: androidx.media3.exoplayer.RenderersFactory;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)>(r0);

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forDash(android.net.Uri,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.RenderersFactory,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.TrackSelectionParameters)>(r1, r2, r3, null, $r4);

        return $r5;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forDash(android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.common.TrackSelectionParameters)
    {
        android.net.Uri r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.exoplayer.drm.DrmSessionManager r3;
        androidx.media3.common.TrackSelectionParameters r4;
        androidx.media3.common.MediaItem$Builder $r5, $r6, $r7;
        androidx.media3.common.MediaItem $r8;
        androidx.media3.exoplayer.offline.DownloadHelper $r9;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.exoplayer.drm.DrmSessionManager;

        r4 := @parameter4: androidx.media3.common.TrackSelectionParameters;

        $r5 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r5.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>(r0);

        $r7 = virtualinvoke $r6.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setMimeType(java.lang.String)>("application/dash+xml");

        $r8 = virtualinvoke $r7.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r9 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>($r8, r4, r2, r1, r3);

        return $r9;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forHls(android.content.Context, android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory)
    {
        android.content.Context r0;
        android.net.Uri r1;
        androidx.media3.datasource.DataSource$Factory r2;
        androidx.media3.exoplayer.RenderersFactory r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: androidx.media3.datasource.DataSource$Factory;

        r3 := @parameter3: androidx.media3.exoplayer.RenderersFactory;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)>(r0);

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forHls(android.net.Uri,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.RenderersFactory,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.TrackSelectionParameters)>(r1, r2, r3, null, $r4);

        return $r5;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forHls(android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.common.TrackSelectionParameters)
    {
        android.net.Uri r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.exoplayer.drm.DrmSessionManager r3;
        androidx.media3.common.TrackSelectionParameters r4;
        androidx.media3.common.MediaItem$Builder $r5, $r6, $r7;
        androidx.media3.common.MediaItem $r8;
        androidx.media3.exoplayer.offline.DownloadHelper $r9;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.exoplayer.drm.DrmSessionManager;

        r4 := @parameter4: androidx.media3.common.TrackSelectionParameters;

        $r5 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r5.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>(r0);

        $r7 = virtualinvoke $r6.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setMimeType(java.lang.String)>("application/x-mpegURL");

        $r8 = virtualinvoke $r7.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r9 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>($r8, r4, r2, r1, r3);

        return $r9;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forSmoothStreaming(android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory)
    {
        android.net.Uri r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r3;
        androidx.media3.exoplayer.offline.DownloadHelper $r4;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        $r3 = <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT>;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forSmoothStreaming(android.net.Uri,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.RenderersFactory,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.TrackSelectionParameters)>(r0, r1, r2, null, $r3);

        return $r4;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forSmoothStreaming(android.content.Context, android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory)
    {
        android.content.Context r0;
        android.net.Uri r1;
        androidx.media3.datasource.DataSource$Factory r2;
        androidx.media3.exoplayer.RenderersFactory r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: androidx.media3.datasource.DataSource$Factory;

        r3 := @parameter3: androidx.media3.exoplayer.RenderersFactory;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)>(r0);

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forSmoothStreaming(android.net.Uri,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.RenderersFactory,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.TrackSelectionParameters)>(r1, r2, r3, null, $r4);

        return $r5;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forSmoothStreaming(android.net.Uri, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.RenderersFactory, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.common.TrackSelectionParameters)
    {
        android.net.Uri r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.exoplayer.drm.DrmSessionManager r3;
        androidx.media3.common.TrackSelectionParameters r4;
        androidx.media3.common.MediaItem$Builder $r5, $r6, $r7;
        androidx.media3.common.MediaItem $r8;
        androidx.media3.exoplayer.offline.DownloadHelper $r9;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.exoplayer.drm.DrmSessionManager;

        r4 := @parameter4: androidx.media3.common.TrackSelectionParameters;

        $r5 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r5.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>(r0);

        $r7 = virtualinvoke $r6.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setMimeType(java.lang.String)>("application/vnd.ms-sstr+xml");

        $r8 = virtualinvoke $r7.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r9 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>($r8, r4, r2, r1, r3);

        return $r9;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(android.content.Context, androidx.media3.common.MediaItem)
    {
        android.content.Context r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.common.MediaItem$LocalConfiguration $r2, $r4;
        java.lang.Object $r3;
        boolean $z0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r5;
        androidx.media3.exoplayer.offline.DownloadHelper $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.media3.common.MediaItem;

        $r2 = r1.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.common.MediaItem$LocalConfiguration) $r3;

        $z0 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: boolean isProgressive(androidx.media3.common.MediaItem$LocalConfiguration)>($r4);

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)>(r0);

        $r6 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>(r1, $r5, null, null, null);

        return $r6;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(android.content.Context, androidx.media3.common.MediaItem, androidx.media3.exoplayer.RenderersFactory, androidx.media3.datasource.DataSource$Factory)
    {
        android.content.Context r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.datasource.DataSource$Factory r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.media3.common.MediaItem;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.datasource.DataSource$Factory;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters getDefaultTrackSelectorParameters(android.content.Context)>(r0);

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>(r1, $r4, r2, r3, null);

        return $r5;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem, androidx.media3.common.TrackSelectionParameters, androidx.media3.exoplayer.RenderersFactory, androidx.media3.datasource.DataSource$Factory)
    {
        androidx.media3.common.MediaItem r0;
        androidx.media3.common.TrackSelectionParameters r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.datasource.DataSource$Factory r3;
        androidx.media3.exoplayer.offline.DownloadHelper $r4;

        r0 := @parameter0: androidx.media3.common.MediaItem;

        r1 := @parameter1: androidx.media3.common.TrackSelectionParameters;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.datasource.DataSource$Factory;

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RenderersFactory,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>(r0, r1, r2, r3, null);

        return $r4;
    }

    public static androidx.media3.exoplayer.offline.DownloadHelper forMediaItem(androidx.media3.common.MediaItem, androidx.media3.common.TrackSelectionParameters, androidx.media3.exoplayer.RenderersFactory, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.drm.DrmSessionManager)
    {
        androidx.media3.common.MediaItem r0;
        androidx.media3.common.TrackSelectionParameters r1;
        androidx.media3.exoplayer.RenderersFactory r2;
        androidx.media3.datasource.DataSource$Factory r3, $r9;
        androidx.media3.exoplayer.drm.DrmSessionManager r4;
        boolean z0, $z1;
        androidx.media3.common.MediaItem$LocalConfiguration $r5, $r7;
        java.lang.Object $r6, $r8;
        androidx.media3.exoplayer.offline.DownloadHelper $r10;
        androidx.media3.exoplayer.source.MediaSource $r12;
        androidx.media3.exoplayer.RendererCapabilities[] $r14;

        r0 := @parameter0: androidx.media3.common.MediaItem;

        r1 := @parameter1: androidx.media3.common.TrackSelectionParameters;

        r2 := @parameter2: androidx.media3.exoplayer.RenderersFactory;

        r3 := @parameter3: androidx.media3.datasource.DataSource$Factory;

        r4 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionManager;

        $r5 = r0.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (androidx.media3.common.MediaItem$LocalConfiguration) $r6;

        z0 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: boolean isProgressive(androidx.media3.common.MediaItem$LocalConfiguration)>($r7);

        if z0 != 0 goto label1;

        if r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z1);

        $r10 = new androidx.media3.exoplayer.offline.DownloadHelper;

        if z0 == 0 goto label4;

        $r12 = null;

        goto label5;

     label4:
        $r8 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>(r3);

        $r9 = (androidx.media3.datasource.DataSource$Factory) $r8;

        $r12 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource createMediaSourceInternal(androidx.media3.common.MediaItem,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>(r0, $r9, r4);

     label5:
        if r2 == null goto label6;

        $r14 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] getRendererCapabilities(androidx.media3.exoplayer.RenderersFactory)>(r2);

        goto label7;

     label6:
        $r14 = newarray (androidx.media3.exoplayer.RendererCapabilities)[0];

     label7:
        specialinvoke $r10.<androidx.media3.exoplayer.offline.DownloadHelper: void <init>(androidx.media3.common.MediaItem,androidx.media3.exoplayer.source.MediaSource,androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.RendererCapabilities[])>(r0, $r12, r1, $r14);

        return $r10;
    }

    public static androidx.media3.exoplayer.source.MediaSource createMediaSource(androidx.media3.exoplayer.offline.DownloadRequest, androidx.media3.datasource.DataSource$Factory)
    {
        androidx.media3.exoplayer.offline.DownloadRequest r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.source.MediaSource $r2;

        r0 := @parameter0: androidx.media3.exoplayer.offline.DownloadRequest;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        $r2 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource createMediaSource(androidx.media3.exoplayer.offline.DownloadRequest,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>(r0, r1, null);

        return $r2;
    }

    public static androidx.media3.exoplayer.source.MediaSource createMediaSource(androidx.media3.exoplayer.offline.DownloadRequest, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.drm.DrmSessionManager)
    {
        androidx.media3.exoplayer.offline.DownloadRequest r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.common.MediaItem $r3;
        androidx.media3.exoplayer.source.MediaSource $r4;

        r0 := @parameter0: androidx.media3.exoplayer.offline.DownloadRequest;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionManager;

        $r3 = virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadRequest: androidx.media3.common.MediaItem toMediaItem()>();

        $r4 = staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource createMediaSourceInternal(androidx.media3.common.MediaItem,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionManager)>($r3, r1, r2);

        return $r4;
    }

    public void <init>(androidx.media3.common.MediaItem, androidx.media3.exoplayer.source.MediaSource, androidx.media3.common.TrackSelectionParameters, androidx.media3.exoplayer.RendererCapabilities[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.common.MediaItem r1;
        androidx.media3.exoplayer.source.MediaSource r2;
        androidx.media3.common.TrackSelectionParameters r3;
        androidx.media3.exoplayer.RendererCapabilities[] r4;
        androidx.media3.common.MediaItem$LocalConfiguration $r5, $r7;
        java.lang.Object $r6;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r8, $r11;
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory $r9;
        android.util.SparseIntArray $r10;
        androidx.media3.exoplayer.trackselection.TrackSelector$InvalidationListener $r12;
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter $r13;
        android.os.Handler $r14;
        androidx.media3.common.Timeline$Window $r15;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        r2 := @parameter1: androidx.media3.exoplayer.source.MediaSource;

        r3 := @parameter2: androidx.media3.common.TrackSelectionParameters;

        r4 := @parameter3: androidx.media3.exoplayer.RendererCapabilities[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = r1.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (androidx.media3.common.MediaItem$LocalConfiguration) $r6;

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration> = $r7;

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource> = r2;

        $r8 = new androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        $r9 = new androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory;

        specialinvoke $r9.<androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory: void <init>(androidx.media3.exoplayer.offline.DownloadHelper$1)>(null);

        specialinvoke $r8.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void <init>(androidx.media3.common.TrackSelectionParameters,androidx.media3.exoplayer.trackselection.ExoTrackSelection$Factory)>(r3, $r9);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector> = $r8;

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities> = r4;

        $r10 = new android.util.SparseIntArray;

        specialinvoke $r10.<android.util.SparseIntArray: void <init>()>();

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet> = $r10;

        $r11 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r12 = dynamicinvoke "onTrackSelectionsInvalidated" <androidx.media3.exoplayer.trackselection.TrackSelector$InvalidationListener ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$new$2()>, methodtype: void __METHODTYPE__());

        $r13 = new androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        specialinvoke $r13.<androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter: void <init>(androidx.media3.exoplayer.offline.DownloadHelper$1)>(null);

        virtualinvoke $r11.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void init(androidx.media3.exoplayer.trackselection.TrackSelector$InvalidationListener,androidx.media3.exoplayer.upstream.BandwidthMeter)>($r12, $r13);

        $r14 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentOrMainLooper()>();

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.os.Handler callbackHandler> = $r14;

        $r15 = new androidx.media3.common.Timeline$Window;

        specialinvoke $r15.<androidx.media3.common.Timeline$Window: void <init>()>();

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.Timeline$Window window> = $r15;

        return;
    }

    public void prepare(androidx.media3.exoplayer.offline.DownloadHelper$Callback)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.offline.DownloadHelper$Callback r1, $r2;
        androidx.media3.exoplayer.source.MediaSource $r3, $r7;
        android.os.Handler $r4;
        java.lang.Runnable $r5;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r6;
        boolean $z1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper$Callback;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$Callback callback>;

        if $r2 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$Callback callback> = r1;

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        if $r3 == null goto label3;

        $r6 = new androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        $r7 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        specialinvoke $r6.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: void <init>(androidx.media3.exoplayer.source.MediaSource,androidx.media3.exoplayer.offline.DownloadHelper)>($r7, r0);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer> = $r6;

        goto label4;

     label3:
        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.os.Handler callbackHandler>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.offline.DownloadHelper,androidx.media3.exoplayer.offline.DownloadHelper$Callback)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$prepare$3(androidx.media3.exoplayer.offline.DownloadHelper$Callback)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

     label4:
        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r1, $r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        virtualinvoke $r3.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: void release()>();

     label1:
        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        virtualinvoke $r2.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void release()>();

        return;
    }

    public java.lang.Object getManifest()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.source.MediaSource $r1;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r2, $r4;
        androidx.media3.common.Timeline $r3, $r6;
        int $i0;
        androidx.media3.common.Timeline$Window $r5, $r7;
        java.lang.Object $r8;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        if $r1 != null goto label1;

        return null;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r3 = $r2.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        $i0 = virtualinvoke $r3.<androidx.media3.common.Timeline: int getWindowCount()>();

        if $i0 <= 0 goto label2;

        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r6 = $r4.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        $r5 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.Timeline$Window window>;

        $r7 = virtualinvoke $r6.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Window getWindow(int,androidx.media3.common.Timeline$Window)>(0, $r5);

        $r8 = $r7.<androidx.media3.common.Timeline$Window: java.lang.Object manifest>;

        goto label3;

     label2:
        $r8 = null;

     label3:
        return $r8;
    }

    public int getPeriodCount()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.source.MediaSource $r1;
        androidx.media3.exoplayer.source.TrackGroupArray[] $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        if $r1 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays>;

        $i0 = lengthof $r2;

        return $i0;
    }

    public androidx.media3.common.Tracks getTracks(int)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] $r1;
        java.util.List[][] $r2;
        java.util.List[] $r3;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo $r4;
        androidx.media3.common.Tracks $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>;

        $r4 = $r1[i0];

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] immutableTrackSelectionsByPeriodAndRenderer>;

        $r3 = $r2[i0];

        $r5 = staticinvoke <androidx.media3.exoplayer.trackselection.TrackSelectionUtil: androidx.media3.common.Tracks buildTracks(androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo,java.util.List[])>($r4, $r3);

        return $r5;
    }

    public androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups(int)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.exoplayer.source.TrackGroupArray[] $r1;
        androidx.media3.exoplayer.source.TrackGroupArray $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays>;

        $r2 = $r1[i0];

        return $r2;
    }

    public androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo getMappedTrackInfo(int)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] $r1;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.util.List getTrackSelections(int, int)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0, i1;
        java.util.List[][] $r1;
        java.util.List[] $r2;
        java.util.List $r3;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] immutableTrackSelectionsByPeriodAndRenderer>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public void clearTrackSelections(int)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0, $i1, i2;
        androidx.media3.exoplayer.RendererCapabilities[] $r1;
        java.util.List[][] $r2;
        java.util.List[] $r3;
        java.util.List $r4;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        i2 = 0;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>;

        $i1 = lengthof $r1;

        if i2 >= $i1 goto label2;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r3 = $r2[i0];

        $r4 = $r3[i2];

        interfaceinvoke $r4.<java.util.List: void clear()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void replaceTrackSelections(int, androidx.media3.common.TrackSelectionParameters)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.common.TrackSelectionParameters r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.TrackSelectionParameters;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void clearTrackSelections(int)>(i0);

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i0, r1);

        goto label1;

     label1:
        return;
    }

    public void addTrackSelection(int, androidx.media3.common.TrackSelectionParameters)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.common.TrackSelectionParameters r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.TrackSelectionParameters;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i0, r1);

        goto label1;

     label1:
        return;
    }

    public transient void addAudioLanguagesToSelection(java.lang.String[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        java.lang.String[] r1, r11;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder r2;
        androidx.media3.common.TrackSelectionParameters r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.common.TrackSelectionParameters$Builder $r6;
        androidx.media3.exoplayer.RendererCapabilities[] r9;
        int i1, i2, i3, i4, i5, i6, i7;
        androidx.media3.exoplayer.RendererCapabilities r10;
        boolean $z0;
        java.lang.String r12;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r4 = <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT>;

        r2 = virtualinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUpon()>();

        virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setForceHighestSupportedBitrate(boolean)>(1);

        r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>;

        i1 = lengthof r9;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r10 = r9[i2];

        i3 = interfaceinvoke r10.<androidx.media3.exoplayer.RendererCapabilities: int getTrackType()>();

        if i3 == 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setTrackTypeDisabled(int,boolean)>(i3, $z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        i4 = virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: int getPeriodCount()>();

        r11 = r1;

        i5 = lengthof r11;

        i6 = 0;

     label5:
        if i6 >= i5 goto label8;

        r12 = r11[i6];

        $r6 = virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setPreferredAudioLanguage(java.lang.String)>(r12);

        r3 = virtualinvoke $r6.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters build()>();

        i7 = 0;

     label6:
        if i7 >= i4 goto label7;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i7, r3);

        i7 = i7 + 1;

        goto label6;

     label7:
        i6 = i6 + 1;

        goto label5;

     label8:
        goto label9;

     label9:
        return;
    }

    public transient void addTextLanguagesToSelection(boolean, java.lang.String[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        boolean z0, $z1;
        java.lang.String[] r1, r12;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder r2;
        androidx.media3.common.TrackSelectionParameters r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r4;
        androidx.media3.common.TrackSelectionParameters$Builder $r7;
        androidx.media3.exoplayer.RendererCapabilities[] r10;
        int i1, i2, i3, i4, i5, i6, i7;
        androidx.media3.exoplayer.RendererCapabilities r11;
        java.lang.String r13;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r4 = <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT>;

        r2 = virtualinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUpon()>();

        virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setSelectUndeterminedTextLanguage(boolean)>(z0);

        virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setForceHighestSupportedBitrate(boolean)>(1);

        r10 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>;

        i1 = lengthof r10;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r11 = r10[i2];

        i3 = interfaceinvoke r11.<androidx.media3.exoplayer.RendererCapabilities: int getTrackType()>();

        if i3 == 3 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setTrackTypeDisabled(int,boolean)>(i3, $z1);

        i2 = i2 + 1;

        goto label1;

     label4:
        i4 = virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: int getPeriodCount()>();

        r12 = r1;

        i5 = lengthof r12;

        i6 = 0;

     label5:
        if i6 >= i5 goto label8;

        r13 = r12[i6];

        $r7 = virtualinvoke r2.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setPreferredTextLanguage(java.lang.String)>(r13);

        r3 = virtualinvoke $r7.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters build()>();

        i7 = 0;

     label6:
        if i7 >= i4 goto label7;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i7, r3);

        i7 = i7 + 1;

        goto label6;

     label7:
        i6 = i6 + 1;

        goto label5;

     label8:
        goto label9;

     label9:
        return;
    }

    public void addTrackSelectionForSingleRenderer(int, int, androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters, java.util.List)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters r1, $r11, $r12;
        java.util.List r2;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder r3;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] $r4, $r6;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo $r5, $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$SelectionOverride $r9;
        androidx.media3.exoplayer.source.TrackGroupArray r15;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters;

        r2 := @parameter3: java.util.List;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        r3 = virtualinvoke r1.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUpon()>();

        i5 = 0;

     label1:
        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>;

        $r5 = $r4[i0];

        $i2 = virtualinvoke $r5.<androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo: int getRendererCount()>();

        if i5 >= $i2 goto label4;

        $i4 = i5;

        if i5 == i1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setRendererDisabled(int,boolean)>($i4, $z1);

        i5 = i5 + 1;

        goto label1;

     label4:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r12 = virtualinvoke r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters build()>();

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i0, $r12);

        goto label7;

     label5:
        $r6 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>;

        $r7 = $r6[i0];

        r15 = virtualinvoke $r7.<androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo: androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups(int)>(i1);

        i6 = 0;

     label6:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i6 >= $i3 goto label7;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        $r9 = (androidx.media3.exoplayer.trackselection.DefaultTrackSelector$SelectionOverride) $r8;

        virtualinvoke r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setSelectionOverride(int,androidx.media3.exoplayer.source.TrackGroupArray,androidx.media3.exoplayer.trackselection.DefaultTrackSelector$SelectionOverride)>(i1, r15, $r9);

        $r11 = virtualinvoke r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters build()>();

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void addTrackSelectionInternal(int,androidx.media3.common.TrackSelectionParameters)>(i0, $r11);

        i6 = i6 + 1;

        goto label6;

     label7:
        goto label8;

     label8:
        return;
    }

    public androidx.media3.exoplayer.offline.DownloadRequest getDownloadRequest(byte[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        byte[] r1;
        androidx.media3.common.MediaItem$LocalConfiguration $r2;
        android.net.Uri $r3;
        java.lang.String $r4;
        androidx.media3.exoplayer.offline.DownloadRequest $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: byte[];

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r3 = $r2.<androidx.media3.common.MediaItem$LocalConfiguration: android.net.Uri uri>;

        $r4 = virtualinvoke $r3.<android.net.Uri: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadRequest getDownloadRequest(java.lang.String,byte[])>($r4, r1);

        return $r5;
    }

    public androidx.media3.exoplayer.offline.DownloadRequest getDownloadRequest(java.lang.String, byte[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        java.lang.String r1, $r10, $r16;
        byte[] r2, $r36;
        androidx.media3.exoplayer.offline.DownloadRequest$Builder r3, $r6, $r11, $r14, $r17, $r22;
        java.util.ArrayList r4, r5, $r19, $r20;
        int i0, i1, i2, i3;
        androidx.media3.common.MediaItem$LocalConfiguration $r7, $r9, $r12, $r15, $r34;
        android.net.Uri $r8;
        androidx.media3.common.MediaItem$DrmConfiguration $r13, $r35;
        androidx.media3.exoplayer.source.MediaSource $r18;
        java.util.List[][] $r21, $r24, $r30;
        androidx.media3.exoplayer.offline.DownloadRequest $r23, $r33;
        java.util.List[] $r25, $r31;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r26;
        androidx.media3.exoplayer.source.MediaPeriod[] $r27;
        androidx.media3.exoplayer.source.MediaPeriod $r28;
        java.util.List $r29, $r32;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r6 = new androidx.media3.exoplayer.offline.DownloadRequest$Builder;

        $r7 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r8 = $r7.<androidx.media3.common.MediaItem$LocalConfiguration: android.net.Uri uri>;

        specialinvoke $r6.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: void <init>(java.lang.String,android.net.Uri)>(r1, $r8);

        $r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r10 = $r9.<androidx.media3.common.MediaItem$LocalConfiguration: java.lang.String mimeType>;

        $r11 = virtualinvoke $r6.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest$Builder setMimeType(java.lang.String)>($r10);

        $r12 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r13 = $r12.<androidx.media3.common.MediaItem$LocalConfiguration: androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration>;

        if $r13 == null goto label1;

        $r34 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r35 = $r34.<androidx.media3.common.MediaItem$LocalConfiguration: androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration>;

        $r36 = virtualinvoke $r35.<androidx.media3.common.MediaItem$DrmConfiguration: byte[] getKeySetId()>();

        goto label2;

     label1:
        $r36 = null;

     label2:
        $r14 = virtualinvoke $r11.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest$Builder setKeySetId(byte[])>($r36);

        $r15 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r16 = $r15.<androidx.media3.common.MediaItem$LocalConfiguration: java.lang.String customCacheKey>;

        $r17 = virtualinvoke $r14.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest$Builder setCustomCacheKey(java.lang.String)>($r16);

        r3 = virtualinvoke $r17.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest$Builder setData(byte[])>(r2);

        $r18 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        if $r18 != null goto label3;

        $r33 = virtualinvoke r3.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest build()>();

        return $r33;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void assertPreparedWithMedia()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r4 = $r19;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r5 = $r20;

        $r21 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        i0 = lengthof $r21;

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        interfaceinvoke r5.<java.util.List: void clear()>();

        $r24 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r25 = $r24[i2];

        i1 = lengthof $r25;

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        $r30 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r31 = $r30[i2];

        $r32 = $r31[i3];

        interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>($r32);

        i3 = i3 + 1;

        goto label5;

     label6:
        $r26 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r27 = $r26.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        $r28 = $r27[i2];

        $r29 = interfaceinvoke $r28.<androidx.media3.exoplayer.source.MediaPeriod: java.util.List getStreamKeys(java.util.List)>(r5);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r29);

        i2 = i2 + 1;

        goto label4;

     label7:
        $r22 = virtualinvoke r3.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest$Builder setStreamKeys(java.util.List)>(r4);

        $r23 = virtualinvoke $r22.<androidx.media3.exoplayer.offline.DownloadRequest$Builder: androidx.media3.exoplayer.offline.DownloadRequest build()>();

        return $r23;
    }

    private void addTrackSelectionInternal(int, androidx.media3.common.TrackSelectionParameters) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0;
        androidx.media3.common.TrackSelectionParameters r1, $r12;
        com.google.common.collect.UnmodifiableIterator r2;
        androidx.media3.common.TrackSelectionOverride r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r4, $r9;
        com.google.common.collect.ImmutableMap $r6;
        com.google.common.collect.ImmutableCollection $r7;
        boolean $z0;
        java.lang.Object $r8;
        androidx.media3.common.TrackSelectionParameters$Builder $r10, $r11;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.TrackSelectionParameters;

        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        virtualinvoke $r4.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void setParameters(androidx.media3.common.TrackSelectionParameters)>(r1);

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.TrackSelectorResult runTrackSelection(int)>(i0);

        $r6 = r1.<androidx.media3.common.TrackSelectionParameters: com.google.common.collect.ImmutableMap overrides>;

        $r7 = virtualinvoke $r6.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        r2 = virtualinvoke $r7.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.media3.common.TrackSelectionOverride) $r8;

        $r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r10 = virtualinvoke r1.<androidx.media3.common.TrackSelectionParameters: androidx.media3.common.TrackSelectionParameters$Builder buildUpon()>();

        $r11 = virtualinvoke $r10.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters$Builder setOverrideForType(androidx.media3.common.TrackSelectionOverride)>(r3);

        $r12 = virtualinvoke $r11.<androidx.media3.common.TrackSelectionParameters$Builder: androidx.media3.common.TrackSelectionParameters build()>();

        virtualinvoke $r9.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void setParameters(androidx.media3.common.TrackSelectionParameters)>($r12);

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.TrackSelectorResult runTrackSelection(int)>(i0);

        goto label1;

     label2:
        return;
    }

    private void onMediaPrepared() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0, i1, i2, i3, i4;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r1, $r3, $r6, $r9, $r20;
        androidx.media3.exoplayer.source.MediaPeriod[] $r4, $r10, $r21;
        androidx.media3.common.Timeline $r7;
        androidx.media3.exoplayer.RendererCapabilities[] $r11;
        java.util.List[][] $r12, $r13, $r32, $r35, $r36;
        androidx.media3.exoplayer.source.TrackGroupArray[] $r14, $r23;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] $r15, $r28;
        android.os.Handler $r16, $r18;
        java.lang.Object $r17, $r25, $r30;
        java.lang.Runnable $r19;
        androidx.media3.exoplayer.source.MediaPeriod $r22;
        androidx.media3.exoplayer.source.TrackGroupArray $r24;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r26, $r27;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo $r29, $r31;
        java.util.ArrayList $r33;
        java.lang.Object[] $r34;
        java.util.List[] $r37, $r39;
        java.util.List $r38, $r40;
        androidx.media3.exoplayer.trackselection.TrackSelectorResult r41;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r4 = $r3.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r7 = $r6.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r10 = $r9.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        i0 = lengthof $r10;

        $r11 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>;

        i1 = lengthof $r11;

        $r12 = newmultiarray (java.util.List)[i0][i1];

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer> = $r12;

        $r13 = newmultiarray (java.util.List)[i0][i1];

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] immutableTrackSelectionsByPeriodAndRenderer> = $r13;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r32 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r34 = $r32[i2];

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        $r34[i3] = $r33;

        $r35 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] immutableTrackSelectionsByPeriodAndRenderer>;

        $r39 = $r35[i2];

        $r36 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r37 = $r36[i2];

        $r38 = $r37[i3];

        $r40 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r38);

        $r39[i3] = $r40;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r14 = newarray (androidx.media3.exoplayer.source.TrackGroupArray)[i0];

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays> = $r14;

        $r15 = newarray (androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo)[i0];

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos> = $r15;

        i4 = 0;

     label5:
        if i4 >= i0 goto label6;

        $r23 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays>;

        $r20 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r21 = $r20.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        $r22 = $r21[i4];

        $r24 = interfaceinvoke $r22.<androidx.media3.exoplayer.source.MediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups()>();

        $r23[i4] = $r24;

        r41 = specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.TrackSelectorResult runTrackSelection(int)>(i4);

        $r26 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r25 = r41.<androidx.media3.exoplayer.trackselection.TrackSelectorResult: java.lang.Object info>;

        virtualinvoke $r26.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void onSelectionActivated(java.lang.Object)>($r25);

        $r28 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo[] mappedTrackInfos>;

        $r27 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r29 = virtualinvoke $r27.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo getCurrentMappedTrackInfo()>();

        $r30 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r29);

        $r31 = (androidx.media3.exoplayer.trackselection.MappingTrackSelector$MappedTrackInfo) $r30;

        $r28[i4] = $r31;

        i4 = i4 + 1;

        goto label5;

     label6:
        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void setPreparedWithMedia()>();

        $r16 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.os.Handler callbackHandler>;

        $r17 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        $r18 = (android.os.Handler) $r17;

        $r19 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.offline.DownloadHelper)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$onMediaPrepared$4()>, methodtype: void __METHODTYPE__());

        virtualinvoke $r18.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

        return;
    }

    private void onMediaPreparationFailed(java.io.IOException)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        java.io.IOException r1;
        android.os.Handler $r2, $r4;
        java.lang.Object $r3;
        java.lang.Runnable $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: java.io.IOException;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.os.Handler callbackHandler>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (android.os.Handler) $r3;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.offline.DownloadHelper,java.io.IOException)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.exoplayer.offline.DownloadHelper: void lambda$onMediaPreparationFailed$5(java.io.IOException)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    private void setPreparedWithMedia()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r0.<androidx.media3.exoplayer.offline.DownloadHelper: boolean isPreparedWithMedia> = 1;

        return;
    }

    private void assertPreparedWithMedia()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $z0 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: boolean isPreparedWithMedia>;

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    private androidx.media3.exoplayer.trackselection.TrackSelectorResult runTrackSelection(int) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        androidx.media3.exoplayer.trackselection.TrackSelectorResult r1;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r2, r4;
        java.util.List r3;
        androidx.media3.exoplayer.source.TrackGroupArray[] $r5;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId $r6;
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer $r7, $r13;
        androidx.media3.common.Timeline $r8, $r14;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r9;
        androidx.media3.exoplayer.RendererCapabilities[] $r10;
        androidx.media3.exoplayer.source.TrackGroupArray $r11;
        java.lang.Object $r12, $r18;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] $r15;
        java.util.List[][] $r16;
        java.util.List[] $r17;
        androidx.media3.common.TrackGroup $r19, $r20, $r25;
        boolean $z1, z2;
        android.util.SparseIntArray $r21, $r22, $r23, $r27, $r28, $r29;
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection $r24;
        int[] r30;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        i0 := @parameter0: int;

        $r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r10 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.RendererCapabilities[] rendererCapabilities>;

        $r5 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.source.TrackGroupArray[] trackGroupArrays>;

        $r11 = $r5[i0];

        $r6 = new androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r7 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r8 = $r7.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        $r12 = virtualinvoke $r8.<androidx.media3.common.Timeline: java.lang.Object getUidOfPeriod(int)>(i0);

        specialinvoke $r6.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: void <init>(java.lang.Object)>($r12);

        $r13 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer mediaPreparer>;

        $r14 = $r13.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        r1 = virtualinvoke $r9.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: androidx.media3.exoplayer.trackselection.TrackSelectorResult selectTracks(androidx.media3.exoplayer.RendererCapabilities[],androidx.media3.exoplayer.source.TrackGroupArray,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.common.Timeline)>($r10, $r11, $r6, $r14);

        i10 = 0;

     label01:
        $i1 = r1.<androidx.media3.exoplayer.trackselection.TrackSelectorResult: int length>;

        if i10 >= $i1 goto label13;

        $r15 = r1.<androidx.media3.exoplayer.trackselection.TrackSelectorResult: androidx.media3.exoplayer.trackselection.ExoTrackSelection[] selections>;

        r2 = $r15[i10];

        if r2 != null goto label02;

        goto label12;

     label02:
        $r16 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: java.util.List[][] trackSelectionsByPeriodAndRenderer>;

        $r17 = $r16[i0];

        r3 = $r17[i10];

        z2 = 0;

        i11 = 0;

     label03:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i11 >= $i2 goto label11;

        $r18 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11);

        r4 = (androidx.media3.exoplayer.trackselection.ExoTrackSelection) $r18;

        $r19 = interfaceinvoke r4.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        $r20 = interfaceinvoke r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        $z1 = virtualinvoke $r19.<androidx.media3.common.TrackGroup: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label10;

        $r21 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        virtualinvoke $r21.<android.util.SparseIntArray: void clear()>();

        i12 = 0;

     label04:
        $i3 = interfaceinvoke r4.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int length()>();

        if i12 >= $i3 goto label05;

        $r29 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        $i9 = interfaceinvoke r4.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>(i12);

        virtualinvoke $r29.<android.util.SparseIntArray: void put(int,int)>($i9, 0);

        i12 = i12 + 1;

        goto label04;

     label05:
        i13 = 0;

     label06:
        $i4 = interfaceinvoke r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int length()>();

        if i13 >= $i4 goto label07;

        $r28 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        $i8 = interfaceinvoke r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>(i13);

        virtualinvoke $r28.<android.util.SparseIntArray: void put(int,int)>($i8, 0);

        i13 = i13 + 1;

        goto label06;

     label07:
        $r22 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        $i5 = virtualinvoke $r22.<android.util.SparseIntArray: int size()>();

        r30 = newarray (int)[$i5];

        i14 = 0;

     label08:
        $r23 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        $i6 = virtualinvoke $r23.<android.util.SparseIntArray: int size()>();

        if i14 >= $i6 goto label09;

        $r27 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: android.util.SparseIntArray scratchSet>;

        $i7 = virtualinvoke $r27.<android.util.SparseIntArray: int keyAt(int)>(i14);

        r30[i14] = $i7;

        i14 = i14 + 1;

        goto label08;

     label09:
        $r24 = new androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        $r25 = interfaceinvoke r4.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        specialinvoke $r24.<androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[])>($r25, r30);

        interfaceinvoke r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i11, $r24);

        z2 = 1;

        goto label11;

     label10:
        i11 = i11 + 1;

        goto label03;

     label11:
        if z2 != 0 goto label12;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label12:
        i10 = i10 + 1;

        goto label01;

     label13:
        return r1;
    }

    private static androidx.media3.exoplayer.source.MediaSource createMediaSourceInternal(androidx.media3.common.MediaItem, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.drm.DrmSessionManager)
    {
        androidx.media3.common.MediaItem r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.exoplayer.source.DefaultMediaSourceFactory r3, $r4;
        androidx.media3.extractor.ExtractorsFactory $r5;
        androidx.media3.exoplayer.source.MediaSource $r6;
        androidx.media3.exoplayer.drm.DrmSessionManagerProvider $r7;

        r0 := @parameter0: androidx.media3.common.MediaItem;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionManager;

        $r4 = new androidx.media3.exoplayer.source.DefaultMediaSourceFactory;

        $r5 = <androidx.media3.extractor.ExtractorsFactory: androidx.media3.extractor.ExtractorsFactory EMPTY>;

        specialinvoke $r4.<androidx.media3.exoplayer.source.DefaultMediaSourceFactory: void <init>(androidx.media3.datasource.DataSource$Factory,androidx.media3.extractor.ExtractorsFactory)>(r1, $r5);

        r3 = $r4;

        if r2 == null goto label1;

        $r7 = dynamicinvoke "get" <androidx.media3.exoplayer.drm.DrmSessionManagerProvider (androidx.media3.exoplayer.drm.DrmSessionManager)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.exoplayer.drm.DrmSessionManager __METHODTYPE__(androidx.media3.common.MediaItem), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.drm.DrmSessionManager lambda$createMediaSourceInternal$6(androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.MediaItem)>, methodtype: androidx.media3.exoplayer.drm.DrmSessionManager __METHODTYPE__(androidx.media3.common.MediaItem));

        virtualinvoke r3.<androidx.media3.exoplayer.source.DefaultMediaSourceFactory: androidx.media3.exoplayer.source.DefaultMediaSourceFactory setDrmSessionManagerProvider(androidx.media3.exoplayer.drm.DrmSessionManagerProvider)>($r7);

     label1:
        $r6 = virtualinvoke r3.<androidx.media3.exoplayer.source.DefaultMediaSourceFactory: androidx.media3.exoplayer.source.MediaSource createMediaSource(androidx.media3.common.MediaItem)>(r0);

        return $r6;
    }

    private static boolean isProgressive(androidx.media3.common.MediaItem$LocalConfiguration)
    {
        androidx.media3.common.MediaItem$LocalConfiguration r0;
        java.lang.String $r1;
        android.net.Uri $r2;
        int $i0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.MediaItem$LocalConfiguration;

        $r2 = r0.<androidx.media3.common.MediaItem$LocalConfiguration: android.net.Uri uri>;

        $r1 = r0.<androidx.media3.common.MediaItem$LocalConfiguration: java.lang.String mimeType>;

        $i0 = staticinvoke <androidx.media3.common.util.Util: int inferContentTypeForUriAndMimeType(android.net.Uri,java.lang.String)>($r2, $r1);

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static androidx.media3.exoplayer.drm.DrmSessionManager lambda$createMediaSourceInternal$6(androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.common.MediaItem)
    {
        androidx.media3.exoplayer.drm.DrmSessionManager r0;
        androidx.media3.common.MediaItem r1;

        r0 := @parameter0: androidx.media3.exoplayer.drm.DrmSessionManager;

        r1 := @parameter1: androidx.media3.common.MediaItem;

        return r0;
    }

    private void lambda$onMediaPreparationFailed$5(java.io.IOException)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        java.io.IOException r1;
        androidx.media3.exoplayer.offline.DownloadHelper$Callback $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: java.io.IOException;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$Callback callback>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.exoplayer.offline.DownloadHelper$Callback) $r3;

        interfaceinvoke $r4.<androidx.media3.exoplayer.offline.DownloadHelper$Callback: void onPrepareError(androidx.media3.exoplayer.offline.DownloadHelper,java.io.IOException)>(r0, r1);

        return;
    }

    private void lambda$onMediaPrepared$4()
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.offline.DownloadHelper$Callback $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.offline.DownloadHelper$Callback callback>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.exoplayer.offline.DownloadHelper$Callback) $r2;

        interfaceinvoke $r3.<androidx.media3.exoplayer.offline.DownloadHelper$Callback: void onPrepared(androidx.media3.exoplayer.offline.DownloadHelper)>(r0);

        return;
    }

    private void lambda$prepare$3(androidx.media3.exoplayer.offline.DownloadHelper$Callback)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        androidx.media3.exoplayer.offline.DownloadHelper$Callback r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper$Callback;

        interfaceinvoke r1.<androidx.media3.exoplayer.offline.DownloadHelper$Callback: void onPrepared(androidx.media3.exoplayer.offline.DownloadHelper)>(r0);

        return;
    }

    private static void lambda$new$2()
    {
        return;
    }

    private static void lambda$getRendererCapabilities$1(androidx.media3.common.Metadata)
    {
        androidx.media3.common.Metadata r0;

        r0 := @parameter0: androidx.media3.common.Metadata;

        return;
    }

    private static void lambda$getRendererCapabilities$0(androidx.media3.common.text.CueGroup)
    {
        androidx.media3.common.text.CueGroup r0;

        r0 := @parameter0: androidx.media3.common.text.CueGroup;

        return;
    }

    static void access$200(androidx.media3.exoplayer.offline.DownloadHelper) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;

        r0 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void onMediaPrepared()>();

        return;
    }

    static void access$300(androidx.media3.exoplayer.offline.DownloadHelper, java.io.IOException)
    {
        androidx.media3.exoplayer.offline.DownloadHelper r0;
        java.io.IOException r1;

        r0 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper;

        r1 := @parameter1: java.io.IOException;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper: void onMediaPreparationFailed(java.io.IOException)>(r1);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters $r0, $r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder $r1, $r2, $r3;

        $r0 = <androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_WITHOUT_CONTEXT>;

        $r1 = virtualinvoke $r0.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder buildUpon()>();

        $r2 = virtualinvoke $r1.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setForceHighestSupportedBitrate(boolean)>(1);

        $r3 = virtualinvoke $r2.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder setConstrainAudioChannelCountToDeviceCapabilities(boolean)>(0);

        $r4 = virtualinvoke $r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters$Builder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters build()>();

        <androidx.media3.exoplayer.offline.DownloadHelper: androidx.media3.exoplayer.trackselection.DefaultTrackSelector$Parameters DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT> = $r4;

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$1
    void <init>()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$1 r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$2
    void <init>()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$2 r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$Callback
<androidx.media3.exoplayer.offline.DownloadHelper$Callback: void onPrepared(androidx.media3.exoplayer.offline.DownloadHelper)>
<androidx.media3.exoplayer.offline.DownloadHelper$Callback: void onPrepareError(androidx.media3.exoplayer.offline.DownloadHelper,java.io.IOException)>
androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory
    private void <init>()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.exoplayer.trackselection.ExoTrackSelection[] createTrackSelections(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[], androidx.media3.exoplayer.upstream.BandwidthMeter, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.common.Timeline)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[] r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter r2;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r3;
        androidx.media3.common.Timeline r4;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r5;
        int $i0, $i1, $i2, i3;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition $r6, $r7, $r8;
        int[] $r9;
        androidx.media3.common.TrackGroup $r10;
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection $r12;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[];

        r2 := @parameter1: androidx.media3.exoplayer.upstream.BandwidthMeter;

        r3 := @parameter2: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r4 := @parameter3: androidx.media3.common.Timeline;

        $i0 = lengthof r1;

        r5 = newarray (androidx.media3.exoplayer.trackselection.ExoTrackSelection)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $i2 = i3;

        $r6 = r1[i3];

        if $r6 != null goto label2;

        $r12 = null;

        goto label3;

     label2:
        $r12 = new androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        $r7 = r1[i3];

        $r10 = $r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group>;

        $r8 = r1[i3];

        $r9 = $r8.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        specialinvoke $r12.<androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[])>($r10, $r9);

     label3:
        r5[$i2] = $r12;

        i3 = i3 + 1;

        goto label1;

     label4:
        return r5;
    }

    void <init>(androidx.media3.exoplayer.offline.DownloadHelper$1)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory r0;
        androidx.media3.exoplayer.offline.DownloadHelper$1 r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper$1;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection$Factory: void <init>()>();

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection
    public void <init>(androidx.media3.common.TrackGroup, int[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.BaseTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[])>(r1, r2);

        return;
    }

    public int getSelectedIndex()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        return 0;
    }

    public int getSelectionReason()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        return 0;
    }

    public java.lang.Object getSelectionData()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        return null;
    }

    public void updateSelectedTrack(long, long, long, java.util.List, androidx.media3.exoplayer.source.chunk.MediaChunkIterator[])
    {
        androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection r0;
        long l0, l1, l2;
        java.util.List r1;
        androidx.media3.exoplayer.source.chunk.MediaChunkIterator[] r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$DownloadTrackSelection;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.List;

        r2 := @parameter4: androidx.media3.exoplayer.source.chunk.MediaChunkIterator[];

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter
    private void <init>()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long getBitrateEstimate()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        return 0L;
    }

    public androidx.media3.datasource.TransferListener getTransferListener()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        return null;
    }

    public void addEventListener(android.os.Handler, androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;
        android.os.Handler r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener;

        return;
    }

    public void removeEventListener(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener;

        return;
    }

    void <init>(androidx.media3.exoplayer.offline.DownloadHelper$1)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter r0;
        androidx.media3.exoplayer.offline.DownloadHelper$1 r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadHelper$1;

        specialinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper$FakeBandwidthMeter: void <init>()>();

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException
    public void <init>()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException r0;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException;

        specialinvoke r0.<java.io.IOException: void <init>()>();

        return;
    }

androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int MESSAGE_PREPARE_SOURCE>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int MESSAGE_CHECK_FOR_FAILURE>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int MESSAGE_CONTINUE_LOADING>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int MESSAGE_RELEASE>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int DOWNLOAD_HELPER_CALLBACK_MESSAGE_PREPARED>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: int DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.offline.DownloadHelper downloadHelper>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.upstream.Allocator allocator>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler downloadHelperHandler>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.HandlerThread mediaSourceThread>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>
<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: boolean released>
    public void <init>(androidx.media3.exoplayer.source.MediaSource, androidx.media3.exoplayer.offline.DownloadHelper)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        androidx.media3.exoplayer.source.MediaSource r1;
        androidx.media3.exoplayer.offline.DownloadHelper r2;
        android.os.Handler r3, $r11, $r12;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r4;
        java.util.ArrayList $r5;
        android.os.Handler$Callback $r6;
        android.os.HandlerThread $r7, $r8, $r9;
        android.os.Looper $r10;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource;

        r2 := @parameter1: androidx.media3.exoplayer.offline.DownloadHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource> = r1;

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.offline.DownloadHelper downloadHelper> = r2;

        $r4 = new androidx.media3.exoplayer.upstream.DefaultAllocator;

        specialinvoke $r4.<androidx.media3.exoplayer.upstream.DefaultAllocator: void <init>(boolean,int)>(1, 65536);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.upstream.Allocator allocator> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods> = $r5;

        $r6 = dynamicinvoke "handleMessage" <android.os.Handler$Callback (androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.os.Message), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: boolean handleDownloadHelperCallbackMessage(android.os.Message)>, methodtype: boolean __METHODTYPE__(android.os.Message));

        r3 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentOrMainLooper(android.os.Handler$Callback)>($r6);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler downloadHelperHandler> = r3;

        $r7 = new android.os.HandlerThread;

        specialinvoke $r7.<android.os.HandlerThread: void <init>(java.lang.String)>("ExoPlayer:DownloadHelper");

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.HandlerThread mediaSourceThread> = $r7;

        $r8 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.HandlerThread mediaSourceThread>;

        virtualinvoke $r8.<android.os.HandlerThread: void start()>();

        $r9 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.HandlerThread mediaSourceThread>;

        $r10 = virtualinvoke $r9.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r11 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandler(android.os.Looper,android.os.Handler$Callback)>($r10, r0);

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler> = $r11;

        $r12 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r12.<android.os.Handler: boolean sendEmptyMessage(int)>(0);

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        boolean $z0;
        android.os.Handler $r1;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        $z0 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: boolean released>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: boolean released> = 1;

        $r1 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(3);

        return;
    }

    public boolean handleMessage(android.os.Message)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        android.os.Message r1, $r23;
        androidx.media3.exoplayer.source.MediaPeriod[] r2, $r4, $r11;
        int i0, $i1, $i2, i3, i4;
        androidx.media3.exoplayer.source.MediaPeriod r3, $r16, r25;
        androidx.media3.exoplayer.source.MediaSource $r5, $r8, $r17, $r19;
        android.os.Handler $r6, $r13, $r20, $r22;
        android.os.HandlerThread $r7;
        java.lang.Object $r9, $r15;
        java.util.ArrayList $r10, $r12, $r14;
        boolean $z1;
        androidx.media3.exoplayer.analytics.PlayerId $r18;
        java.lang.Throwable $r21, r24;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: android.os.Message;

        $i1 = r1.<android.os.Message: int what>;

        tableswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label09;
            case 3: goto label11;
            default: goto label14;
        };

     label01:
        $r19 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r18 = <androidx.media3.exoplayer.analytics.PlayerId: androidx.media3.exoplayer.analytics.PlayerId UNSET>;

        interfaceinvoke $r19.<androidx.media3.exoplayer.source.MediaSource: void prepareSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller,androidx.media3.datasource.TransferListener,androidx.media3.exoplayer.analytics.PlayerId)>(r0, null, $r18);

        $r20 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r20.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

        return 1;

     label02:
        $r11 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        if $r11 != null goto label03;

        $r17 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        interfaceinvoke $r17.<androidx.media3.exoplayer.source.MediaSource: void maybeThrowSourceInfoRefreshError()>();

        goto label05;

     label03:
        i3 = 0;

     label04:
        $r12 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        $i2 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if i3 >= $i2 goto label05;

        $r14 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r16 = (androidx.media3.exoplayer.source.MediaPeriod) $r15;

        interfaceinvoke $r16.<androidx.media3.exoplayer.source.MediaPeriod: void maybeThrowPrepareError()>();

        i3 = i3 + 1;

        goto label04;

     label05:
        $r13 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r13.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, 100L);

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        r24 = $r21;

        $r22 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler downloadHelperHandler>;

        $r23 = virtualinvoke $r22.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r24);

        virtualinvoke $r23.<android.os.Message: void sendToTarget()>();

     label08:
        return 1;

     label09:
        $r9 = r1.<android.os.Message: java.lang.Object obj>;

        r25 = (androidx.media3.exoplayer.source.MediaPeriod) $r9;

        $r10 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        $z1 = virtualinvoke $r10.<java.util.ArrayList: boolean contains(java.lang.Object)>(r25);

        if $z1 == 0 goto label10;

        interfaceinvoke r25.<androidx.media3.exoplayer.source.MediaPeriod: boolean continueLoading(long)>(0L);

     label10:
        return 1;

     label11:
        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        if $r4 == null goto label13;

        r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        i0 = lengthof r2;

        i4 = 0;

     label12:
        if i4 >= i0 goto label13;

        r3 = r2[i4];

        $r8 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        interfaceinvoke $r8.<androidx.media3.exoplayer.source.MediaSource: void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r3);

        i4 = i4 + 1;

        goto label12;

     label13:
        $r5 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        interfaceinvoke $r5.<androidx.media3.exoplayer.source.MediaSource: void releaseSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>(r0);

        $r6 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r7 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.HandlerThread mediaSourceThread>;

        virtualinvoke $r7.<android.os.HandlerThread: boolean quit()>();

        return 1;

     label14:
        return 0;

        catch java.io.IOException from label02 to label06 with label07;
    }

    public void onSourceInfoRefreshed(androidx.media3.exoplayer.source.MediaSource, androidx.media3.common.Timeline)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        androidx.media3.exoplayer.source.MediaSource r1, $r10;
        androidx.media3.common.Timeline r2, $r4;
        androidx.media3.exoplayer.source.MediaPeriod r3, r18;
        androidx.media3.common.Timeline$Window $r5, $r6;
        boolean $z0;
        int $i0, $i1, i2, i3, i4;
        androidx.media3.exoplayer.source.MediaPeriod[] $r7, $r8, $r13, r19;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId $r9;
        java.lang.Object $r11;
        androidx.media3.exoplayer.upstream.Allocator $r12;
        java.util.ArrayList $r14;
        androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException $r15;
        android.os.Handler $r16;
        android.os.Message $r17;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource;

        r2 := @parameter1: androidx.media3.common.Timeline;

        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline>;

        if $r4 == null goto label1;

        return;

     label1:
        $r5 = new androidx.media3.common.Timeline$Window;

        specialinvoke $r5.<androidx.media3.common.Timeline$Window: void <init>()>();

        $r6 = virtualinvoke r2.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Window getWindow(int,androidx.media3.common.Timeline$Window)>(0, $r5);

        $z0 = virtualinvoke $r6.<androidx.media3.common.Timeline$Window: boolean isLive()>();

        if $z0 == 0 goto label2;

        $r16 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler downloadHelperHandler>;

        $r15 = new androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException;

        specialinvoke $r15.<androidx.media3.exoplayer.offline.DownloadHelper$LiveContentUnsupportedException: void <init>()>();

        $r17 = virtualinvoke $r16.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r15);

        virtualinvoke $r17.<android.os.Message: void sendToTarget()>();

        return;

     label2:
        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.common.Timeline timeline> = r2;

        $i0 = virtualinvoke r2.<androidx.media3.common.Timeline: int getPeriodCount()>();

        $r7 = newarray (androidx.media3.exoplayer.source.MediaPeriod)[$i0];

        r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods> = $r7;

        i2 = 0;

     label3:
        $r8 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        $i1 = lengthof $r8;

        if i2 >= $i1 goto label4;

        $r10 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r9 = new androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r11 = virtualinvoke r2.<androidx.media3.common.Timeline: java.lang.Object getUidOfPeriod(int)>(i2);

        specialinvoke $r9.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: void <init>(java.lang.Object)>($r11);

        $r12 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.upstream.Allocator allocator>;

        r18 = interfaceinvoke $r10.<androidx.media3.exoplayer.source.MediaSource: androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.exoplayer.upstream.Allocator,long)>($r9, $r12, 0L);

        $r13 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        $r13[i2] = r18;

        $r14 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r18);

        i2 = i2 + 1;

        goto label3;

     label4:
        r19 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.source.MediaPeriod[] mediaPeriods>;

        i3 = lengthof r19;

        i4 = 0;

     label5:
        if i4 >= i3 goto label6;

        r3 = r19[i4];

        interfaceinvoke r3.<androidx.media3.exoplayer.source.MediaPeriod: void prepare(androidx.media3.exoplayer.source.MediaPeriod$Callback,long)>(r0, 0L);

        i4 = i4 + 1;

        goto label5;

     label6:
        return;
    }

    public void onPrepared(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        java.util.ArrayList $r2, $r3;
        boolean $z1;
        android.os.Handler $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(1);

        $r5 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler downloadHelperHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendEmptyMessage(int)>(0);

     label1:
        return;
    }

    public void onContinueLoadingRequested(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        java.util.ArrayList $r2;
        boolean $z0;
        android.os.Handler $r3;
        android.os.Message $r4;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: java.util.ArrayList pendingMediaPeriods>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: android.os.Handler mediaSourceHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    private boolean handleDownloadHelperCallbackMessage(android.os.Message)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        android.os.Message r1;
        boolean $z0;
        int $i0;
        java.lang.Object $r2, $r4;
        androidx.media3.exoplayer.offline.DownloadHelper $r3, $r6;
        java.io.IOException $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: android.os.Message;

        $z0 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: boolean released>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = r1.<android.os.Message: int what>;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            default: goto label5;
        };

     label2:
        $r6 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.offline.DownloadHelper downloadHelper>;

        staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: void access$200(androidx.media3.exoplayer.offline.DownloadHelper)>($r6);

        goto label3;

     label3:
        return 1;

     label4:
        virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: void release()>();

        $r3 = r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: androidx.media3.exoplayer.offline.DownloadHelper downloadHelper>;

        $r2 = r1.<android.os.Message: java.lang.Object obj>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r2);

        $r5 = (java.io.IOException) $r4;

        staticinvoke <androidx.media3.exoplayer.offline.DownloadHelper: void access$300(androidx.media3.exoplayer.offline.DownloadHelper,java.io.IOException)>($r3, $r5);

        return 1;

     label5:
        return 0;
    }

    public volatile void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)
    {
        androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer r0;
        androidx.media3.exoplayer.source.SequenceableLoader r1;
        androidx.media3.exoplayer.source.MediaPeriod $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer;

        r1 := @parameter0: androidx.media3.exoplayer.source.SequenceableLoader;

        $r2 = (androidx.media3.exoplayer.source.MediaPeriod) r1;

        virtualinvoke r0.<androidx.media3.exoplayer.offline.DownloadHelper$MediaPreparer: void onContinueLoadingRequested(androidx.media3.exoplayer.source.MediaPeriod)>($r2);

        return;
    }

