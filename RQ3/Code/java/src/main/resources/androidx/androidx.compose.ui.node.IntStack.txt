androidx.compose.ui.node.IntStack
<androidx.compose.ui.node.IntStack: int[] stack>
<androidx.compose.ui.node.IntStack: int lastIndex>
    public void <init>(int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0;
        int[] $r1;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[i0];

        r0.<androidx.compose.ui.node.IntStack: int[] stack> = $r1;

        return;
    }

    public final void pushRange(int, int, int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        $i6 = i4 + 4;

        $r2 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i5 = lengthof $r2;

        if $i6 < $i5 goto label1;

        $r4 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $r3 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i12 = lengthof $r3;

        $i13 = $i12 * 2;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i13);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "copyOf(this, newSize)");

        r0.<androidx.compose.ui.node.IntStack: int[] stack> = $r5;

     label1:
        r1 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i7 = i4 + 0;

        r1[$i7] = i0;

        $i8 = i4 + 1;

        r1[$i8] = i1;

        $i9 = i4 + 2;

        r1[$i9] = i2;

        $i10 = i4 + 3;

        r1[$i10] = i3;

        $i11 = i4 + 4;

        r0.<androidx.compose.ui.node.IntStack: int lastIndex> = $i11;

        return;
    }

    public final void pushDiagonal(int, int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        $i5 = i3 + 3;

        $r2 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i4 = lengthof $r2;

        if $i5 < $i4 goto label1;

        $r4 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $r3 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i12 = lengthof $r3;

        $i13 = $i12 * 2;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i13);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "copyOf(this, newSize)");

        r0.<androidx.compose.ui.node.IntStack: int[] stack> = $r5;

     label1:
        r1 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i7 = i3 + 0;

        $i6 = i0 + i2;

        r1[$i7] = $i6;

        $i9 = i3 + 1;

        $i8 = i1 + i2;

        r1[$i9] = $i8;

        $i10 = i3 + 2;

        r1[$i10] = i2;

        $i11 = i3 + 3;

        r0.<androidx.compose.ui.node.IntStack: int lastIndex> = $i11;

        return;
    }

    public final int pop()
    {
        androidx.compose.ui.node.IntStack r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: androidx.compose.ui.node.IntStack;

        $r1 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        $i0 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        $i1 = $i0 + -1;

        r0.<androidx.compose.ui.node.IntStack: int lastIndex> = $i1;

        $i2 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        $i3 = $r1[$i2];

        return $i3;
    }

    public final boolean isNotEmpty()
    {
        androidx.compose.ui.node.IntStack r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.IntStack;

        $i0 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void sortDiagonals()
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r3;
        java.lang.IllegalStateException $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 = r0.<androidx.compose.ui.node.IntStack: int lastIndex>;

        $i1 = i0 % 3;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r1 = "Check failed.";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        if i0 <= 3 goto label4;

        $i2 = i0 - 3;

        specialinvoke r0.<androidx.compose.ui.node.IntStack: void quickSort(int,int,int)>(0, $i2, 3);

     label4:
        return;
    }

    private final void quickSort(int, int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 >= i1 goto label1;

        i3 = specialinvoke r0.<androidx.compose.ui.node.IntStack: int partition(int,int,int)>(i0, i1, i2);

        $i4 = i3 - i2;

        specialinvoke r0.<androidx.compose.ui.node.IntStack: void quickSort(int,int,int)>(i0, $i4, i2);

        $i5 = i3 + i2;

        specialinvoke r0.<androidx.compose.ui.node.IntStack: void quickSort(int,int,int)>($i5, i1, i2);

     label1:
        return;
    }

    private final int partition(int, int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, i2, $i3, $i4, i5, i6;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i5 = i0 - i2;

        i6 = i0;

     label1:
        if i6 >= i1 goto label3;

        $z0 = specialinvoke r0.<androidx.compose.ui.node.IntStack: boolean compareDiagonal(int,int)>(i6, i1);

        if $z0 == 0 goto label2;

        i5 = i5 + i2;

        specialinvoke r0.<androidx.compose.ui.node.IntStack: void swapDiagonal(int,int)>(i5, i6);

     label2:
        i6 = i6 + i2;

        goto label1;

     label3:
        $i3 = i5 + i2;

        specialinvoke r0.<androidx.compose.ui.node.IntStack: void swapDiagonal(int,int)>($i3, i1);

        $i4 = i5 + i2;

        return $i4;
    }

    private final void swapDiagonal(int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] r1;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void access$swap(int[],int,int)>(r1, i0, i1);

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void access$swap(int[],int,int)>(r1, $i3, $i2);

        $i5 = i0 + 2;

        $i4 = i1 + 2;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void access$swap(int[],int,int)>(r1, $i5, $i4);

        return;
    }

    private final boolean compareDiagonal(int, int)
    {
        androidx.compose.ui.node.IntStack r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.IntStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<androidx.compose.ui.node.IntStack: int[] stack>;

        i2 = r1[i0];

        i3 = r1[i1];

        if i2 < i3 goto label1;

        if i2 != i3 goto label2;

        $i4 = i0 + 1;

        $i7 = r1[$i4];

        $i5 = i1 + 1;

        $i6 = r1[$i5];

        if $i7 > $i6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

