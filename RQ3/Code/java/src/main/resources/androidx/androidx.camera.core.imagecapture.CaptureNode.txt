androidx.camera.core.imagecapture.CaptureNode
<androidx.camera.core.imagecapture.CaptureNode: int MAX_IMAGES>
<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>
<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingImages>
<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest>
<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>
<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out mOutputEdge>
<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$In mInputEdge>
    void <init>()
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        java.util.HashSet $r1, $r2;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingImages> = $r2;

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest> = null;

        return;
    }

    public androidx.camera.core.imagecapture.CaptureNode$Out transform(androidx.camera.core.imagecapture.CaptureNode$In)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.imagecapture.CaptureNode$In r1;
        android.util.Size r2;
        int i0, $i1, $i2, $i3;
        androidx.camera.core.MetadataImageReader r3, r16;
        androidx.camera.core.impl.CameraCaptureCallback $r6;
        android.view.Surface $r7, $r9;
        java.lang.Object $r8;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r10;
        java.util.concurrent.ScheduledExecutorService $r11;
        androidx.camera.core.processing.Edge $r12;
        androidx.core.util.Consumer $r13;
        androidx.camera.core.imagecapture.CaptureNode$Out $r14, $r15;
        androidx.camera.core.SafeCloseImageReaderProxy r17;
        java.util.concurrent.Executor r18;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.imagecapture.CaptureNode$In;

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$In mInputEdge> = r1;

        r2 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: android.util.Size getSize()>();

        i0 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: int getFormat()>();

        r16 = new androidx.camera.core.MetadataImageReader;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke r16.<androidx.camera.core.MetadataImageReader: void <init>(int,int,int,int)>($i1, $i2, i0, 4);

        r3 = r16;

        r17 = new androidx.camera.core.SafeCloseImageReaderProxy;

        specialinvoke r17.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>(r3);

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy> = r17;

        $r6 = virtualinvoke r3.<androidx.camera.core.MetadataImageReader: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: void setCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r6);

        $r7 = virtualinvoke r3.<androidx.camera.core.MetadataImageReader: android.view.Surface getSurface()>();

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r9 = (android.view.Surface) $r8;

        virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: void setSurface(android.view.Surface)>($r9);

        $r10 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener (androidx.camera.core.imagecapture.CaptureNode)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.CaptureNode: void lambda$transform$0(androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r18 = (java.util.concurrent.Executor) $r11;

        virtualinvoke r3.<androidx.camera.core.MetadataImageReader: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r10, r18);

        $r12 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.processing.Edge getRequestEdge()>();

        $r13 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.core.imagecapture.CaptureNode)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.imagecapture.CaptureNode: void onRequestAvailable(androidx.camera.core.imagecapture.ProcessingRequest)>, methodtype: void __METHODTYPE__(androidx.camera.core.imagecapture.ProcessingRequest));

        virtualinvoke $r12.<androidx.camera.core.processing.Edge: void setListener(androidx.core.util.Consumer)>($r13);

        $i3 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$In: int getFormat()>();

        $r14 = staticinvoke <androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.imagecapture.CaptureNode$Out of(int)>($i3);

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out mOutputEdge> = $r14;

        $r15 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out mOutputEdge>;

        return $r15;
    }

    void onImageProxyAvailable(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.ImageProxy r1;
        androidx.camera.core.imagecapture.ProcessingRequest $r2;
        java.util.Set $r3;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest>;

        if $r2 != null goto label1;

        $r3 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingImages>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<androidx.camera.core.imagecapture.CaptureNode: void matchAndPropagateImage(androidx.camera.core.ImageProxy)>(r1);

     label2:
        return;
    }

    private void matchAndPropagateImage(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.ImageProxy r1;
        int i0;
        androidx.camera.core.ImageInfo $r2;
        androidx.camera.core.impl.TagBundle $r3;
        androidx.camera.core.imagecapture.ProcessingRequest $r4, $r20;
        java.lang.String $r5, $r14;
        java.lang.Object $r6, $r7;
        java.lang.Integer $r8, $r10, $r16;
        java.util.Set $r9, $r15, $r17;
        boolean $z0, $z2;
        java.lang.StringBuilder $r11, $r12, $r13;
        androidx.camera.core.imagecapture.CaptureNode$Out $r18;
        androidx.camera.core.processing.Edge $r19;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $r3 = interfaceinvoke $r2.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r4 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.imagecapture.ProcessingRequest: java.lang.String getTagBundleKey()>();

        $r6 = virtualinvoke $r3.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>($r5);

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received an unexpected stage id");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, $r14);

        $r15 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r15.<java.util.Set: boolean remove(java.lang.Object)>($r16);

        $r17 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>;

        $z2 = interfaceinvoke $r17.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r20 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest>;

        virtualinvoke $r20.<androidx.camera.core.imagecapture.ProcessingRequest: void onImageCaptured()>();

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest> = null;

     label1:
        $r18 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out mOutputEdge>;

        $r19 = virtualinvoke $r18.<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getImageEdge()>();

        virtualinvoke $r19.<androidx.camera.core.processing.Edge: void accept(java.lang.Object)>(r1);

        return;
    }

    void onRequestAvailable(androidx.camera.core.imagecapture.ProcessingRequest)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.imagecapture.ProcessingRequest r1, $r4;
        java.util.Iterator r2;
        androidx.camera.core.ImageProxy r3;
        int $i0;
        java.util.Set $r5, $r9, $r10, $r12;
        java.util.List $r6;
        androidx.camera.core.imagecapture.CaptureNode$Out $r7;
        androidx.camera.core.processing.Edge $r8;
        java.lang.Object $r11;
        boolean $z1, $z2, $z3, $z4;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.imagecapture.ProcessingRequest;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $i0 = virtualinvoke r0.<androidx.camera.core.imagecapture.CaptureNode: int getCapacity()>();

        if $i0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, "Too many acquire images. Close image to be able to process next.");

        $r4 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest>;

        if $r4 == null goto label3;

        $r12 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>;

        $z1 = interfaceinvoke $r12.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z3, "The previous request is not complete");

        r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.ProcessingRequest mCurrentRequest> = r1;

        $r5 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingStageIds>;

        $r6 = virtualinvoke r1.<androidx.camera.core.imagecapture.ProcessingRequest: java.util.List getStageIds()>();

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out mOutputEdge>;

        $r8 = virtualinvoke $r7.<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getRequestEdge()>();

        virtualinvoke $r8.<androidx.camera.core.processing.Edge: void accept(java.lang.Object)>(r1);

        $r9 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingImages>;

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.ImageProxy) $r11;

        specialinvoke r0.<androidx.camera.core.imagecapture.CaptureNode: void matchAndPropagateImage(androidx.camera.core.ImageProxy)>(r3);

        goto label6;

     label7:
        $r10 = r0.<androidx.camera.core.imagecapture.CaptureNode: java.util.Set mPendingImages>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        return;
    }

    public void release()
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.SafeCloseImageReaderProxy $r1, $r4;
        androidx.camera.core.imagecapture.CaptureNode$In $r2, $r3;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        virtualinvoke $r4.<androidx.camera.core.SafeCloseImageReaderProxy: void safeClose()>();

     label1:
        $r2 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$In mInputEdge>;

        if $r2 == null goto label2;

        $r3 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$In mInputEdge>;

        virtualinvoke $r3.<androidx.camera.core.imagecapture.CaptureNode$In: void closeSurface()>();

     label2:
        return;
    }

    androidx.camera.core.imagecapture.CaptureNode$In getInputEdge()
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.imagecapture.CaptureNode$In $r1;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$In mInputEdge>;

        return $r1;
    }

    public int getCapacity()
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.SafeCloseImageReaderProxy $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The ImageReader is not initialized.");

        $r2 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        $i0 = virtualinvoke $r2.<androidx.camera.core.SafeCloseImageReaderProxy: int getCapacity()>();

        return $i0;
    }

    public void setOnImageCloseListener(androidx.camera.core.ForwardingImageProxy$OnImageCloseListener)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.ForwardingImageProxy$OnImageCloseListener r1;
        androidx.camera.core.SafeCloseImageReaderProxy $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.ForwardingImageProxy$OnImageCloseListener;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The ImageReader is not initialized.");

        $r3 = r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.SafeCloseImageReaderProxy mSafeCloseImageReaderProxy>;

        virtualinvoke $r3.<androidx.camera.core.SafeCloseImageReaderProxy: void setOnImageCloseListener(androidx.camera.core.ForwardingImageProxy$OnImageCloseListener)>(r1);

        return;
    }

    public volatile java.lang.Object transform(java.lang.Object)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        java.lang.Object r1;
        androidx.camera.core.imagecapture.CaptureNode$In $r2;
        androidx.camera.core.imagecapture.CaptureNode$Out $r3;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.imagecapture.CaptureNode$In) r1;

        $r3 = virtualinvoke r0.<androidx.camera.core.imagecapture.CaptureNode: androidx.camera.core.imagecapture.CaptureNode$Out transform(androidx.camera.core.imagecapture.CaptureNode$In)>($r2);

        return $r3;
    }

    private void lambda$transform$0(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.core.imagecapture.CaptureNode r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        androidx.camera.core.ImageProxy $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode;

        r1 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

        $r2 = interfaceinvoke r1.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireNextImage()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = (androidx.camera.core.ImageProxy) $r3;

        virtualinvoke r0.<androidx.camera.core.imagecapture.CaptureNode: void onImageProxyAvailable(androidx.camera.core.ImageProxy)>($r4);

        return;
    }

androidx.camera.core.imagecapture.CaptureNode$In
<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback>
<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface mSurface>
    void <init>()
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.camera.core.imagecapture.CaptureNode$In: android.util.Size getSize()>
<androidx.camera.core.imagecapture.CaptureNode$In: int getFormat()>
<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.processing.Edge getRequestEdge()>
    androidx.camera.core.impl.DeferrableSurface getSurface()
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;
        androidx.camera.core.impl.DeferrableSurface $r1;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface mSurface>;

        return $r1;
    }

    void setSurface(android.view.Surface)
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;
        android.view.Surface r1;
        androidx.camera.core.impl.DeferrableSurface $r2;
        androidx.camera.core.impl.ImmediateSurface $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface mSurface>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The surface is already set.");

        $r3 = new androidx.camera.core.impl.ImmediateSurface;

        specialinvoke $r3.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface)>(r1);

        r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface mSurface> = $r3;

        return;
    }

    void closeSurface()
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;
        androidx.camera.core.impl.DeferrableSurface $r1;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.DeferrableSurface mSurface>;

        virtualinvoke $r1.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        return;
    }

    androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;
        androidx.camera.core.impl.CameraCaptureCallback $r1;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        $r1 = r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback>;

        return $r1;
    }

    void setCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.imagecapture.CaptureNode$In r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$In;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        r0.<androidx.camera.core.imagecapture.CaptureNode$In: androidx.camera.core.impl.CameraCaptureCallback mCameraCaptureCallback> = r1;

        return;
    }

    static androidx.camera.core.imagecapture.CaptureNode$In of(android.util.Size, int)
    {
        android.util.Size r0;
        int i0;
        androidx.camera.core.imagecapture.AutoValue_CaptureNode_In $r1;
        androidx.camera.core.processing.Edge $r2;

        r0 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        $r1 = new androidx.camera.core.imagecapture.AutoValue_CaptureNode_In;

        $r2 = new androidx.camera.core.processing.Edge;

        specialinvoke $r2.<androidx.camera.core.processing.Edge: void <init>()>();

        specialinvoke $r1.<androidx.camera.core.imagecapture.AutoValue_CaptureNode_In: void <init>(android.util.Size,int,androidx.camera.core.processing.Edge)>(r0, i0, $r2);

        return $r1;
    }

androidx.camera.core.imagecapture.CaptureNode$Out
    void <init>()
    {
        androidx.camera.core.imagecapture.CaptureNode$Out r0;

        r0 := @this: androidx.camera.core.imagecapture.CaptureNode$Out;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getImageEdge()>
<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getRequestEdge()>
<androidx.camera.core.imagecapture.CaptureNode$Out: int getFormat()>
    static androidx.camera.core.imagecapture.CaptureNode$Out of(int)
    {
        int i0;
        androidx.camera.core.imagecapture.AutoValue_CaptureNode_Out $r0;
        androidx.camera.core.processing.Edge $r1, $r2;

        i0 := @parameter0: int;

        $r0 = new androidx.camera.core.imagecapture.AutoValue_CaptureNode_Out;

        $r1 = new androidx.camera.core.processing.Edge;

        specialinvoke $r1.<androidx.camera.core.processing.Edge: void <init>()>();

        $r2 = new androidx.camera.core.processing.Edge;

        specialinvoke $r2.<androidx.camera.core.processing.Edge: void <init>()>();

        specialinvoke $r0.<androidx.camera.core.imagecapture.AutoValue_CaptureNode_Out: void <init>(androidx.camera.core.processing.Edge,androidx.camera.core.processing.Edge,int)>($r1, $r2, i0);

        return $r0;
    }

