androidx.benchmark.macro.IterationResult
<androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult$Companion Companion>
<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>
<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>
<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>
<androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult EMPTY>
    public void <init>(java.util.Map, java.util.Map, kotlin.ranges.LongRange)
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map r1, r2;
        kotlin.ranges.LongRange r3;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "singleMetrics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sampledMetrics");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics> = r1;

        r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics> = r2;

        r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs> = r3;

        return;
    }

    public void <init>(java.util.Map, java.util.Map, kotlin.ranges.LongRange, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map r1, r2;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        kotlin.ranges.LongRange r4;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r4 := @parameter2: kotlin.ranges.LongRange;

        i0 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        specialinvoke r0.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>(r1, r2, r4);

        return;
    }

    public final java.util.Map getSingleMetrics()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        return $r1;
    }

    public final java.util.Map getSampledMetrics()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        return $r1;
    }

    public final kotlin.ranges.LongRange getTimelineRangeNs()
    {
        androidx.benchmark.macro.IterationResult r0;
        kotlin.ranges.LongRange $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        return $r1;
    }

    public final androidx.benchmark.macro.IterationResult plus(androidx.benchmark.macro.IterationResult)
    {
        androidx.benchmark.macro.IterationResult r0, r1, $r3;
        kotlin.ranges.LongRange[] r2;
        java.util.Map $r4, $r5, $r6, $r7, $r8, $r9;
        kotlin.ranges.LongRange $r10, $r11, $r13;
        java.util.List $r12;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        r1 := @parameter0: androidx.benchmark.macro.IterationResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r3 = new androidx.benchmark.macro.IterationResult;

        $r5 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        $r4 = r1.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        $r6 = staticinvoke <kotlin.collections.MapsKt: java.util.Map plus(java.util.Map,java.util.Map)>($r5, $r4);

        $r8 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $r7 = r1.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $r9 = staticinvoke <kotlin.collections.MapsKt: java.util.Map plus(java.util.Map,java.util.Map)>($r8, $r7);

        r2 = newarray (kotlin.ranges.LongRange)[2];

        $r10 = r1.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        r2[0] = $r10;

        $r11 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        r2[1] = $r11;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r2);

        $r13 = specialinvoke r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange mergeTimelineRangeNs(java.util.List)>($r12);

        specialinvoke $r3.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>($r6, $r9, $r13);

        return $r3;
    }

    private final kotlin.ranges.LongRange mergeTimelineRangeNs(java.util.List)
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.List $r1, $r2;
        java.lang.Iterable r3, $r4, $r6;
        long l0, l1, l2, l3, l6, $l7, l8, $l9;
        java.util.Collection $r5;
        boolean $z1, $z2, $z3, $z4, $z6, $z9;
        java.lang.Object $r7, $r8, $r9, $r11;
        byte $b4, $b5;
        java.util.NoSuchElementException $r10, $r12;
        java.util.Iterator r13, r16;
        kotlin.ranges.LongRange r14, $r15, r17, $r18, $r19;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 := @parameter0: java.util.List;

        $r4 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List filterNotNull(java.lang.Iterable)>($r4);

        $r5 = (java.util.Collection) $r2;

        $z1 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        if $z4 == 0 goto label09;

        $r6 = (java.lang.Iterable) $r2;

        r13 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label03;

        $r12 = new java.util.NoSuchElementException;

        specialinvoke $r12.<java.util.NoSuchElementException: void <init>()>();

        throw $r12;

     label03:
        $r7 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kotlin.ranges.LongRange) $r7;

        l6 = virtualinvoke r14.<kotlin.ranges.LongRange: long getFirst()>();

     label04:
        $z6 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (kotlin.ranges.LongRange) $r11;

        $l7 = virtualinvoke $r15.<kotlin.ranges.LongRange: long getFirst()>();

        $b5 = l6 cmp $l7;

        if $b5 <= 0 goto label04;

        l6 = $l7;

        goto label04;

     label05:
        r3 = (java.lang.Iterable) $r2;

        l0 = l6;

        r16 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label06;

        $r10 = new java.util.NoSuchElementException;

        specialinvoke $r10.<java.util.NoSuchElementException: void <init>()>();

        throw $r10;

     label06:
        $r8 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (kotlin.ranges.LongRange) $r8;

        l8 = virtualinvoke r17.<kotlin.ranges.LongRange: long getLast()>();

     label07:
        $z9 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label08;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (kotlin.ranges.LongRange) $r9;

        $l9 = virtualinvoke $r18.<kotlin.ranges.LongRange: long getLast()>();

        $b4 = l8 cmp $l9;

        if $b4 >= 0 goto label07;

        l8 = $l9;

        goto label07;

     label08:
        l1 = l8;

        l2 = l1;

        l3 = l0;

        $r19 = new kotlin.ranges.LongRange;

        specialinvoke $r19.<kotlin.ranges.LongRange: void <init>(long,long)>(l3, l2);

        goto label10;

     label09:
        $r19 = (kotlin.ranges.LongRange) null;

     label10:
        return $r19;
    }

    public final java.util.Map component1()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        return $r1;
    }

    public final java.util.Map component2()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        return $r1;
    }

    public final kotlin.ranges.LongRange component3()
    {
        androidx.benchmark.macro.IterationResult r0;
        kotlin.ranges.LongRange $r1;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        return $r1;
    }

    public final androidx.benchmark.macro.IterationResult copy(java.util.Map, java.util.Map, kotlin.ranges.LongRange)
    {
        androidx.benchmark.macro.IterationResult r0, $r4;
        java.util.Map r1, r2;
        kotlin.ranges.LongRange r3;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "singleMetrics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sampledMetrics");

        $r4 = new androidx.benchmark.macro.IterationResult;

        specialinvoke $r4.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>(r1, r2, r3);

        return $r4;
    }

    public static androidx.benchmark.macro.IterationResult copy$default(androidx.benchmark.macro.IterationResult, java.util.Map, java.util.Map, kotlin.ranges.LongRange, int, java.lang.Object)
    {
        androidx.benchmark.macro.IterationResult r0, $r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        java.util.Map r3, r4;
        kotlin.ranges.LongRange r5;

        r0 := @parameter0: androidx.benchmark.macro.IterationResult;

        r3 := @parameter1: java.util.Map;

        r4 := @parameter2: java.util.Map;

        r5 := @parameter3: kotlin.ranges.LongRange;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r5 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

     label3:
        $r2 = virtualinvoke r0.<androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult copy(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>(r3, r4, r5);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11;
        java.util.Map $r3, $r6;
        kotlin.ranges.LongRange $r9;
        java.lang.String $r12;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IterationResult(singleMetrics=");

        $r3 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sampledMetrics=");

        $r6 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timelineRangeNs=");

        $r9 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public int hashCode()
    {
        androidx.benchmark.macro.IterationResult r0;
        java.util.Map $r1, $r2;
        int $i0, $i1, $i2, i3, i4, $i5, i6;
        kotlin.ranges.LongRange $r3, $r4;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        $r1 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = i3 * 31;

        $r2 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i4 = $i0 + $i1;

        $i2 = i4 * 31;

        $r3 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        if $r3 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r4 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        $i5 = virtualinvoke $r4.<kotlin.ranges.LongRange: int hashCode()>();

     label2:
        i6 = $i2 + $i5;

        return i6;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.macro.IterationResult r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r3, $r4, $r5, $r6;
        kotlin.ranges.LongRange $r7, $r8;

        r0 := @this: androidx.benchmark.macro.IterationResult;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.benchmark.macro.IterationResult;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.benchmark.macro.IterationResult) r1;

        $r4 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        $r3 = r2.<androidx.benchmark.macro.IterationResult: java.util.Map singleMetrics>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $r5 = r2.<androidx.benchmark.macro.IterationResult: java.util.Map sampledMetrics>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        $r7 = r2.<androidx.benchmark.macro.IterationResult: kotlin.ranges.LongRange timelineRangeNs>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public static final androidx.benchmark.macro.IterationResult access$getEMPTY$cp()
    {
        androidx.benchmark.macro.IterationResult $r0;

        $r0 = <androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult EMPTY>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.IterationResult$Companion $r0;
        androidx.benchmark.macro.IterationResult $r1;
        java.util.Map $r2, $r3;

        $r0 = new androidx.benchmark.macro.IterationResult$Companion;

        specialinvoke $r0.<androidx.benchmark.macro.IterationResult$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult$Companion Companion> = $r0;

        $r1 = new androidx.benchmark.macro.IterationResult;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        specialinvoke $r1.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>($r2, $r3, null);

        <androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult EMPTY> = $r1;

        return;
    }

