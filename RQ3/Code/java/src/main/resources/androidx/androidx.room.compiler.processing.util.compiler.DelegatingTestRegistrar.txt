androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion Companion>
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.String REGISTRAR_CLASSPATH>
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: kotlin.Lazy resourcePathForSelfClassLoader$delegate>
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal delegates>
    public void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void registerProjectComponents(org.jetbrains.kotlin.com.intellij.mock.MockProject, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar r0;
        org.jetbrains.kotlin.com.intellij.mock.MockProject r1;
        org.jetbrains.kotlin.config.CompilerConfiguration r2;
        java.util.List r3, $r10;
        java.lang.Iterable $r4;
        java.util.Iterator r5;
        java.lang.Object r6, $r9;
        org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar r7;
        java.lang.ThreadLocal $r8;
        boolean $z3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.mock.MockProject;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "configuration");

        $r8 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal delegates>;

        $r9 = virtualinvoke $r8.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r10 = (java.util.List) $r9;

        if $r10 == null goto label3;

        r3 = $r10;

        $r4 = (java.lang.Iterable) r3;

        r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar) r6;

        interfaceinvoke r7.<org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar: void registerProjectComponents(org.jetbrains.kotlin.com.intellij.mock.MockProject,org.jetbrains.kotlin.config.CompilerConfiguration)>(r1, r2);

        goto label1;

     label2:
        goto label3;

     label3:
        return;
    }

    public static final kotlin.Lazy access$getResourcePathForSelfClassLoader$delegate$cp()
    {
        kotlin.Lazy $r0;

        $r0 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: kotlin.Lazy resourcePathForSelfClassLoader$delegate>;

        return $r0;
    }

    public static final java.lang.ThreadLocal access$getDelegates$cp()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal delegates>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion $r0;
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Lazy $r3;
        java.lang.ThreadLocal $r4;

        $r0 = new androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion Companion> = $r0;

        $r1 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: kotlin.Lazy resourcePathForSelfClassLoader$delegate> = $r3;

        $r4 = new java.lang.ThreadLocal;

        specialinvoke $r4.<java.lang.ThreadLocal: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal delegates> = $r4;

        return;
    }

androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.nio.file.Path invoke(java.net.URL)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 r0;
        java.net.URL r1;
        java.net.URI r2, $r11;
        java.lang.String r3, $r4, $r6, $r8, $r10;
        java.lang.CharSequence $r5, $r9;
        boolean $z0, $z1;
        java.nio.file.Path $r7, $r12;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1;

        r1 := @parameter0: java.net.URL;

        $r4 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "url.toString()");

        $r5 = (java.lang.CharSequence) "/META-INF/services/org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar";

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)>($r4, $r5);

        r2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r6);

        r3 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, "jar");

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "uri.schemeSpecificPart");

        $r9 = (java.lang.CharSequence) "!";

        $r10 = staticinvoke <kotlin.text.StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)>($r8, $r9);

        $r11 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r10);

        $r12 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>($r11);

        goto label3;

     label1:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, "file");

        if $z1 == 0 goto label2;

        $r12 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>(r2);

        goto label3;

     label2:
        return null;

     label3:
        $r7 = interfaceinvoke $r12.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        return $r7;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 r0;
        java.lang.Object r1;
        java.net.URL $r2;
        java.nio.file.Path $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.net.URL) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1: java.nio.file.Path invoke(java.net.URL)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2
<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.String invoke()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 r0;
        java.nio.file.Path r1, r6;
        java.lang.String r2, r10, $r23, $r26, $r27, $r33;
        kotlin.sequences.Sequence r3, $r16;
        java.util.Iterator r4, r8, $r15;
        java.lang.Object r5, r9, $r35;
        java.lang.Iterable $r7;
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion $r11;
        java.lang.Class $r12, $r32;
        java.lang.ClassLoader $r13;
        java.util.Enumeration $r14;
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 $r17;
        kotlin.jvm.functions.Function1 $r18;
        boolean $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r21, $r24, $r25, r36;
        kotlin.reflect.KClass $r22;
        org.jetbrains.kotlin.cli.jvm.plugins.ServiceLoaderLite $r28;
        java.io.File $r29;
        java.util.List $r30;
        java.util.Set $r31;
        java.util.Collection $r34;
        java.lang.AssertionError r37;
        java.lang.Throwable r38;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2;

        $r11 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion Companion>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r14 = virtualinvoke $r13.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("META-INF/services/org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "this::class.java.classLo\u2026rces(REGISTRAR_CLASSPATH)");

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Iterator iterator(java.util.Enumeration)>($r14);

        $r16 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)>($r15);

        $r17 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2$1 INSTANCE>;

        $r18 = (kotlin.jvm.functions.Function1) $r17;

        r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r16, $r18);

        r4 = interfaceinvoke r3.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.nio.file.Path) r5;

        $r28 = <org.jetbrains.kotlin.cli.jvm.plugins.ServiceLoaderLite: org.jetbrains.kotlin.cli.jvm.plugins.ServiceLoaderLite INSTANCE>;

        $r29 = interfaceinvoke r6.<java.nio.file.Path: java.io.File toFile()>();

        $r30 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r28.<org.jetbrains.kotlin.cli.jvm.plugins.ServiceLoaderLite: java.util.Set findImplementations(java.lang.Class,java.util.List)>(class "Lorg/jetbrains/kotlin/compiler/plugin/ComponentRegistrar;", $r30);

        $r7 = (java.lang.Iterable) $r31;

        $z4 = $r7 instanceof java.util.Collection;

        if $z4 == 0 goto label2;

        $r34 = (java.util.Collection) $r7;

        $z6 = interfaceinvoke $r34.<java.util.Collection: boolean isEmpty()>();

        if $z6 == 0 goto label2;

        $z7 = 0;

        goto label5;

     label2:
        r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z8 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label4;

        r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) r9;

        $r32 = class "Landroidx/room/compiler/processing/util/compiler/DelegatingTestRegistrar;";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r10, $r33);

        if $z5 == 0 goto label3;

        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        if $z7 == 0 goto label1;

        $r35 = r5;

        goto label7;

     label6:
        $r35 = null;

     label7:
        r1 = (java.nio.file.Path) $r35;

        if r1 == null goto label8;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        if r2 == null goto label8;

        goto label9;

     label8:
        r37 = new java.lang.AssertionError;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    Could not find the ComponentRegistrar class loader that should load\n                    ");

        $r22 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/room/compiler/processing/util/compiler/DelegatingTestRegistrar;");

        $r23 = interfaceinvoke $r22.<kotlin.reflect.KClass: java.lang.String getQualifiedName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r26);

        specialinvoke r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r27);

        r38 = (java.lang.Throwable) r37;

        throw r38;

     label9:
        return r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2: java.lang.String invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion$resourcePathForSelfClassLoader$2 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.lang.String getResourcePathForSelfClassLoader()
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        r1 = staticinvoke <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: kotlin.Lazy access$getResourcePathForSelfClassLoader$delegate$cp()>();

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public final org.jetbrains.kotlin.cli.common.ExitCode runCompilation(org.jetbrains.kotlin.cli.jvm.K2JVMCompiler, org.jetbrains.kotlin.cli.common.messages.MessageCollector, org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments, java.util.List)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion r0;
        org.jetbrains.kotlin.cli.jvm.K2JVMCompiler r1;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector r2;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments r3;
        java.util.List r4;
        java.lang.ThreadLocal $r5, $r8, $r10;
        org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments $r6;
        org.jetbrains.kotlin.config.Services $r7;
        java.lang.Throwable $r9, r12;
        org.jetbrains.kotlin.cli.common.ExitCode r11;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        r1 := @parameter0: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler;

        r2 := @parameter1: org.jetbrains.kotlin.cli.common.messages.MessageCollector;

        r3 := @parameter2: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments;

        r4 := @parameter3: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "compiler");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "messageCollector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "arguments");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "pluginRegistrars");

     label1:
        specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion: void addDelegatingTestRegistrar(org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)>(r3);

        $r5 = staticinvoke <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal access$getDelegates$cp()>();

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>(r4);

        $r7 = <org.jetbrains.kotlin.config.Services: org.jetbrains.kotlin.config.Services EMPTY>;

        $r6 = (org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments) r3;

        r11 = virtualinvoke r1.<org.jetbrains.kotlin.cli.jvm.K2JVMCompiler: org.jetbrains.kotlin.cli.common.ExitCode exec(org.jetbrains.kotlin.cli.common.messages.MessageCollector,org.jetbrains.kotlin.config.Services,org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments)>(r2, $r7, $r6);

     label2:
        $r8 = staticinvoke <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal access$getDelegates$cp()>();

        virtualinvoke $r8.<java.lang.ThreadLocal: void remove()>();

        return r11;

     label3:
        $r9 := @caughtexception;

        r12 = $r9;

     label4:
        $r10 = staticinvoke <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: java.lang.ThreadLocal access$getDelegates$cp()>();

        virtualinvoke $r10.<java.lang.ThreadLocal: void remove()>();

        throw r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void addDelegatingTestRegistrar(org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion r0;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.lang.String[] $r4, $r6;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        $r1 := @parameter0: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments;

        $r6 = virtualinvoke $r1.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: java.lang.String[] getPluginClasspaths()>();

        if $r6 != null goto label1;

        $r6 = newarray (java.lang.String)[0];

     label1:
        $r2 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion: java.lang.String getResourcePathForSelfClassLoader()>();

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] plus(java.lang.Object[],java.lang.Object)>($r6, $r2);

        $r4 = (java.lang.String[]) $r3;

        virtualinvoke $r1.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setPluginClasspaths(java.lang.String[])>($r4);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion: void <init>()>();

        return;
    }

