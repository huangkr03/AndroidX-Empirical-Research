androidx.compose.ui.node.NodeCoordinator
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$Companion Companion>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode layoutNode>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>
<androidx.compose.ui.node.NodeCoordinator: boolean isClipping>
<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.Density layerDensity>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.LayoutDirection layerLayoutDirection>
<androidx.compose.ui.node.NodeCoordinator: float lastLayerAlpha>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate>
<androidx.compose.ui.node.NodeCoordinator: java.util.Map oldAlignmentLines>
<androidx.compose.ui.node.NodeCoordinator: long position>
<androidx.compose.ui.node.NodeCoordinator: float zIndex>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.MutableRect _rectCache>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties layerPositionalProperties>
<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function0 invalidateParentLayer>
<androidx.compose.ui.node.NodeCoordinator: boolean lastLayerDrawingWasSkipped>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>
<androidx.compose.ui.node.NodeCoordinator: java.lang.String ExpectAttachedLayoutCoordinates>
<androidx.compose.ui.node.NodeCoordinator: java.lang.String UnmeasuredError>
<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayerParams>
<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayer>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties tmpLayerPositionalProperties>
<androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource PointerInputSource>
<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource SemanticsSource>
    public void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode r1, $r2, $r4;
        androidx.compose.ui.unit.Density $r3;
        androidx.compose.ui.unit.LayoutDirection $r5;
        androidx.compose.ui.unit.IntOffset$Companion $r6;
        long $l0;
        androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1 $r7;
        kotlin.jvm.functions.Function0 $r8;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        specialinvoke r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: void <init>()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode layoutNode> = r1;

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.Density layerDensity> = $r3;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.LayoutDirection layerLayoutDirection> = $r5;

        r0.<androidx.compose.ui.node.NodeCoordinator: float lastLayerAlpha> = 0.8F;

        $r6 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l0 = virtualinvoke $r6.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: long position> = $l0;

        $r7 = new androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1;

        specialinvoke $r7.<androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1: void <init>(androidx.compose.ui.node.NodeCoordinator)>(r0);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function0 invalidateParentLayer> = $r8;

        return;
    }

    public androidx.compose.ui.node.LayoutNode getLayoutNode()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode layoutNode>;

        return $r1;
    }

<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>
    public final androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>;

        return $r1;
    }

    public final void setWrapped$ui_release(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped> = r1;

        return;
    }

    public final androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        return $r1;
    }

    public final void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy> = r1;

        return;
    }

    public androidx.compose.ui.unit.LayoutDirection getLayoutDirection()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.unit.LayoutDirection $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        return $r2;
    }

    public float getDensity()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.unit.Density $r2;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        $f0 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float getDensity()>();

        return $f0;
    }

    public float getFontScale()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.unit.Density $r2;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        $f0 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float getFontScale()>();

        return $f0;
    }

    public androidx.compose.ui.node.LookaheadCapablePlaceable getParent()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r1;
        androidx.compose.ui.node.LookaheadCapablePlaceable $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        $r2 = (androidx.compose.ui.node.LookaheadCapablePlaceable) $r1;

        return $r2;
    }

    public androidx.compose.ui.layout.LayoutCoordinates getCoordinates()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.layout.LayoutCoordinates $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = (androidx.compose.ui.layout.LayoutCoordinates) r0;

        return $r1;
    }

    private final androidx.compose.ui.Modifier$Node headNode(boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r2, $r3, $r4;
        boolean z0;
        androidx.compose.ui.node.LayoutNode $r1, $r6;
        androidx.compose.ui.Modifier$Node $r5, $r8;
        androidx.compose.ui.node.NodeChain $r7;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        if $r2 != r0 goto label1;

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain getNodes$ui_release()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

        goto label5;

     label1:
        if z0 == 0 goto label3;

        $r4 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        if $r5 == null goto label2;

        $r8 = virtualinvoke $r5.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label5;

     label2:
        $r8 = null;

        goto label5;

     label3:
        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r3 == null goto label4;

        $r8 = virtualinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label5;

     label4:
        $r8 = null;

     label5:
        return $r8;
    }

    public final void visitNodes(int, boolean, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r2, $r3, $r5, r6;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        if z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r5 = virtualinvoke $r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r5 != null goto label2;

        return;

     label2:
        r2 = $r5;

        r6 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r0, z0);

     label3:
        if r6 == null goto label6;

        $i1 = virtualinvoke r6.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i2 = $i1 & i0;

        if $i2 != 0 goto label4;

        return;

     label4:
        $i3 = virtualinvoke r6.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i4 = $i3 & i0;

        if $i4 == 0 goto label5;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r6);

     label5:
        if r6 == r2 goto label6;

        r6 = virtualinvoke r6.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label6:
        return;
    }

    public final void visitNodes-aLcG6gQ(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        kotlin.jvm.functions.Function1 r1;
        boolean z1, $z4;
        androidx.compose.ui.Modifier$Node r3, r4, $r5, $r7, r8;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = r0;

        i1 = i0;

        z1 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z1 == 0 goto label1;

        $r7 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r7 = virtualinvoke $r5.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r7 != null goto label2;

        goto label5;

     label2:
        r3 = $r7;

        r8 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r2, z1);

     label3:
        if r8 == null goto label5;

        $i2 = virtualinvoke r8.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i3 = $i2 & i1;

        if $i3 == 0 goto label5;

        $i4 = virtualinvoke r8.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label4;

        r4 = (androidx.compose.ui.Modifier$Node) r8;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z4 = r4 instanceof java.lang.Object;

        if $z4 == 0 goto label4;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

     label4:
        if r8 == r3 goto label5;

        r8 = virtualinvoke r8.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label5:
        return;
    }

    public final boolean hasNode-H91voCI(int)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        int i0;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.Modifier$Node $r1;
        androidx.compose.ui.node.DelegatableNode $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        $z0 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        $r1 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node headNode(boolean)>($z0);

        if $r1 == null goto label2;

        $r2 = (androidx.compose.ui.node.DelegatableNode) $r1;

        $z1 = staticinvoke <androidx.compose.ui.node.DelegatableNodeKt: boolean has-64DMado(androidx.compose.ui.node.DelegatableNode,int)>($r2, i0);

        if $z1 != 1 goto label1;

        $z2 = 1;

        goto label3;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final java.lang.Object head-H91voCI(int)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z1;
        androidx.compose.ui.Modifier$Node r2, r3, $r4, $r6, r7;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        r1 = r0;

        i1 = i0;

        z1 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z1 == 0 goto label1;

        $r6 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r6 = virtualinvoke $r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r6 != null goto label2;

        goto label5;

     label2:
        r2 = $r6;

        r7 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r1, z1);

     label3:
        if r7 == null goto label5;

        $i2 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i3 = $i2 & i1;

        if $i3 == 0 goto label5;

        $i4 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label4;

        r3 = (androidx.compose.ui.Modifier$Node) r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(2, "T");

        $r5 = (java.lang.Object) r3;

        return $r5;

     label4:
        if r7 == r2 goto label5;

        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label5:
        return null;
    }

    public final java.lang.Object headUnchecked-H91voCI(int)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;
        androidx.compose.ui.Modifier$Node r2, r3, $r4, $r6, r7;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        r1 = r0;

        i1 = i0;

        z0 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r6 = virtualinvoke $r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r6 != null goto label2;

        goto label5;

     label2:
        r2 = $r6;

        r7 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r1, z0);

     label3:
        if r7 == null goto label5;

        $i2 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i3 = $i2 & i1;

        if $i3 == 0 goto label5;

        $i4 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label4;

        r3 = r7;

        $r5 = (java.lang.Object) r3;

        return $r5;

     label4:
        if r7 == r2 goto label5;

        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label5:
        return null;
    }

    public final long getSize-YbymL2g()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long $l0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        return $l0;
    }

    protected final kotlin.jvm.functions.Function1 getLayerBlock()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        return $r1;
    }

    public final boolean isTransparent()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r2;
        androidx.compose.ui.node.OwnedLayer $r1;
        boolean $z0;
        float $f0;
        byte $b0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r1 == null goto label1;

        $f0 = r0.<androidx.compose.ui.node.NodeCoordinator: float lastLayerAlpha>;

        $b0 = $f0 cmpg 0.0F;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: boolean isTransparent()>();

        goto label3;

     label2:
        return 0;

     label3:
        return $z0;
    }

    public androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.AlignmentLinesOwner $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        return $r3;
    }

    public androidx.compose.ui.node.LookaheadCapablePlaceable getChild()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r1;
        androidx.compose.ui.node.LookaheadCapablePlaceable $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>;

        $r2 = (androidx.compose.ui.node.LookaheadCapablePlaceable) $r1;

        return $r2;
    }

    public void replace$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $f0 = r0.<androidx.compose.ui.node.NodeCoordinator: float zIndex>;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void placeAt-f8xVGno(long,float,kotlin.jvm.functions.Function1)>($l0, $f0, $r1);

        return;
    }

    public boolean getHasMeasureResult()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAttached()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.Modifier$Node $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        return $z0;
    }

    public androidx.compose.ui.layout.MeasureResult getMeasureResult$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.layout.MeasureResult $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = "Asking for measurement result of unmeasured layout modifier";

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return $r1;
    }

    public void setMeasureResult$ui_release(androidx.compose.ui.layout.MeasureResult)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.layout.MeasureResult r1, r2;
        java.util.Map r3, r4, $r5, $r6, $r9, $r11, r12, $r13, r14;
        boolean $z1, $z2, $z3, $z4, $z5;
        androidx.compose.ui.node.AlignmentLinesOwner $r7;
        androidx.compose.ui.node.AlignmentLines $r8;
        java.util.LinkedHashMap $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.MeasureResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult>;

        if r1 == r2 goto label10;

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult> = r1;

        if r2 == null goto label01;

        $i0 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: int getWidth()>();

        $i1 = interfaceinvoke r2.<androidx.compose.ui.layout.MeasureResult: int getWidth()>();

        if $i0 != $i1 goto label01;

        $i2 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: int getHeight()>();

        $i3 = interfaceinvoke r2.<androidx.compose.ui.layout.MeasureResult: int getHeight()>();

        if $i2 == $i3 goto label02;

     label01:
        $i4 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: int getWidth()>();

        $i5 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: int getHeight()>();

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void onMeasureResultChanged(int,int)>($i4, $i5);

     label02:
        r12 = r0.<androidx.compose.ui.node.NodeCoordinator: java.util.Map oldAlignmentLines>;

        if r12 == null goto label03;

        $z3 = interfaceinvoke r12.<java.util.Map: boolean isEmpty()>();

        if $z3 == 0 goto label04;

     label03:
        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        if $z4 == 0 goto label08;

        $r11 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: java.util.Map getAlignmentLines()>();

        $z2 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        if $z5 == 0 goto label10;

     label08:
        $r5 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: java.util.Map getAlignmentLines()>();

        $r6 = r0.<androidx.compose.ui.node.NodeCoordinator: java.util.Map oldAlignmentLines>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 != 0 goto label10;

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r8 = interfaceinvoke $r7.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r8.<androidx.compose.ui.node.AlignmentLines: void onAlignmentsChanged()>();

        $r13 = r0.<androidx.compose.ui.node.NodeCoordinator: java.util.Map oldAlignmentLines>;

        if $r13 != null goto label09;

        $r10 = new java.util.LinkedHashMap;

        specialinvoke $r10.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) $r10;

        r4 = r3;

        r0.<androidx.compose.ui.node.NodeCoordinator: java.util.Map oldAlignmentLines> = r4;

        $r13 = r3;

     label09:
        r14 = $r13;

        interfaceinvoke r14.<java.util.Map: void clear()>();

        $r9 = interfaceinvoke r1.<androidx.compose.ui.layout.MeasureResult: java.util.Map getAlignmentLines()>();

        interfaceinvoke r14.<java.util.Map: void putAll(java.util.Map)>($r9);

     label10:
        return;
    }

    public final androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LookaheadDelegate $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate>;

        return $r1;
    }

    public final void updateLookaheadScope$ui_release(androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r3, $r6;
        androidx.compose.ui.layout.LookaheadScope r1, r2, $r7;
        androidx.compose.ui.node.LookaheadDelegate $r4, $r8;
        boolean $z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.LookaheadScope;

        $r6 = r0;

        if r1 == null goto label5;

        r2 = r1;

        r3 = r0;

        $r4 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate>;

        if $r4 == null goto label1;

        $r7 = virtualinvoke $r4.<androidx.compose.ui.node.LookaheadDelegate: androidx.compose.ui.layout.LookaheadScope getLookaheadScope()>();

        goto label2;

     label1:
        $r7 = null;

     label2:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $z1 != 0 goto label3;

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate createLookaheadDelegate(androidx.compose.ui.layout.LookaheadScope)>(r2);

        goto label4;

     label3:
        $r8 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate>;

     label4:
        $r6 = r3;

        goto label6;

     label5:
        $r8 = null;

     label6:
        $r6.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate> = $r8;

        return;
    }

    protected final void updateLookaheadDelegate(androidx.compose.ui.node.LookaheadDelegate)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LookaheadDelegate r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.LookaheadDelegate;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lookaheadDelegate");

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate> = r1;

        return;
    }

<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate createLookaheadDelegate(androidx.compose.ui.layout.LookaheadScope)>
    public java.util.Set getProvidedAlignmentLines()
    {
        androidx.compose.ui.node.NodeCoordinator r0, r8;
        java.util.Map r1, $r9;
        androidx.compose.ui.layout.MeasureResult $r2;
        java.util.Set $r3, r7, $r10;
        java.util.Collection $r4;
        java.util.LinkedHashSet $r5;
        boolean $z1, $z2, $z3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r7 = null;

        r8 = r0;

     label01:
        if r8 == null goto label11;

        $r2 = r8.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.layout.MeasureResult _measureResult>;

        if $r2 == null goto label02;

        $r9 = interfaceinvoke $r2.<androidx.compose.ui.layout.MeasureResult: java.util.Map getAlignmentLines()>();

        goto label03;

     label02:
        $r9 = null;

     label03:
        r1 = $r9;

        if r1 == null goto label07;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        if $z2 != 1 goto label06;

        $z3 = 1;

        goto label08;

     label06:
        $z3 = 0;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        if $z3 == 0 goto label10;

        if r7 != null goto label09;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r7 = (java.util.Set) $r5;

     label09:
        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r4 = (java.util.Collection) $r3;

        interfaceinvoke r7.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label10:
        r8 = r8.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>;

        goto label01;

     label11:
        $r10 = r7;

        if r7 != null goto label12;

        $r10 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

     label12:
        return $r10;
    }

    protected void onMeasureResultChanged(int, int)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r2, r3, $r7;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8;
        androidx.compose.ui.node.OwnedLayer r1;
        boolean z1, $z5;
        androidx.compose.ui.Modifier$Node r4, r5, $r9, $r13, r14;
        androidx.compose.ui.node.DrawModifierNode r6;
        long $l4, $l9;
        androidx.compose.ui.node.Nodes $r8;
        androidx.compose.ui.node.LayoutNode $r10, $r11;
        androidx.compose.ui.node.Owner $r12;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label1;

        $l9 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>(i0, i1);

        interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: void resize-ozmzZPI(long)>($l9);

        goto label2;

     label1:
        $r7 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r7 == null goto label2;

        virtualinvoke $r7.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

        goto label2;

     label2:
        $r11 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r12 = virtualinvoke $r11.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        if $r12 == null goto label3;

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        interfaceinvoke $r12.<androidx.compose.ui.node.Owner: void onLayoutChange(androidx.compose.ui.node.LayoutNode)>($r10);

        goto label3;

     label3:
        $l4 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>(i0, i1);

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void setMeasuredSize-ozmzZPI(long)>($l4);

        r2 = r0;

        $r8 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i2 = virtualinvoke $r8.<androidx.compose.ui.node.Nodes: int getDraw-OLwlOKw()>();

        r3 = r2;

        i3 = i2;

        z1 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i2);

        if z1 == 0 goto label4;

        $r13 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label5;

     label4:
        $r9 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r13 = virtualinvoke $r9.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r13 != null goto label5;

        goto label8;

     label5:
        r4 = $r13;

        r14 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r3, z1);

     label6:
        if r14 == null goto label8;

        $i5 = virtualinvoke r14.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i6 = $i5 & i3;

        if $i6 == 0 goto label8;

        $i7 = virtualinvoke r14.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i8 = $i7 & i3;

        if $i8 == 0 goto label7;

        r5 = r14;

        $z5 = r5 instanceof androidx.compose.ui.node.DrawModifierNode;

        if $z5 == 0 goto label7;

        r6 = (androidx.compose.ui.node.DrawModifierNode) r5;

        interfaceinvoke r6.<androidx.compose.ui.node.DrawModifierNode: void onMeasureResultChanged()>();

     label7:
        if r14 == r4 goto label8;

        r14 = virtualinvoke r14.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label6;

     label8:
        return;
    }

    public long getPosition-nOcc-ac()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long $l0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $l0 = r0.<androidx.compose.ui.node.NodeCoordinator: long position>;

        return $l0;
    }

    protected void setPosition--gyyYBs(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        r0.<androidx.compose.ui.node.NodeCoordinator: long position> = l0;

        return;
    }

    public final float getZIndex()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $f0 = r0.<androidx.compose.ui.node.NodeCoordinator: float zIndex>;

        return $f0;
    }

    protected final void setZIndex(float)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        float f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        f0 := @parameter0: float;

        r0.<androidx.compose.ui.node.NodeCoordinator: float zIndex> = f0;

        return;
    }

    public java.lang.Object getParentData()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        kotlin.jvm.internal.Ref$ObjectRef r1, r6, $r7;
        androidx.compose.ui.Modifier$Node r2, r5, r15, r16;
        androidx.compose.ui.unit.Density $r3;
        androidx.compose.ui.node.NodeChain r4;
        androidx.compose.ui.node.LayoutNode $r8, $r9;
        java.lang.Object $r10, $r12, $r14;
        androidx.compose.ui.node.Nodes $r11;
        int $i0, $i1, i2;
        boolean $z4, $z5, z6;
        androidx.compose.ui.node.ParentDataModifierNode $r13;
        androidx.compose.ui.node.DelegatableNode r17;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r7 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r7.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r1 = $r7;

        r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r3 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r4 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeChain getNodes$ui_release()>();

        r15 = virtualinvoke r4.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label1:
        if r15 == null goto label5;

        r5 = r15;

        if r5 == r2 goto label4;

        r16 = r5;

        $r11 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i2 = virtualinvoke $r11.<androidx.compose.ui.node.Nodes: int getParentData-OLwlOKw()>();

        $i0 = virtualinvoke r16.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i1 = $i0 & i2;

        if $i1 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        if $z5 == 0 goto label4;

        $z4 = r5 instanceof androidx.compose.ui.node.ParentDataModifierNode;

        if $z4 == 0 goto label4;

        r17 = (androidx.compose.ui.node.DelegatableNode) r5;

        r6 = r1;

        z6 = 0;

        $r13 = (androidx.compose.ui.node.ParentDataModifierNode) r17;

        $r12 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r14 = interfaceinvoke $r13.<androidx.compose.ui.node.ParentDataModifierNode: java.lang.Object modifyParentData(androidx.compose.ui.unit.Density,java.lang.Object)>($r3, $r12);

        r6.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r14;

     label4:
        r15 = virtualinvoke r15.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label5:
        $r10 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        return $r10;
    }

    public final androidx.compose.ui.layout.LayoutCoordinates getParentLayoutCoordinates()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r2, $r3;
        boolean $z0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.layout.LayoutCoordinates $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r7 = "LayoutCoordinate operations are only valid when isAttached is true";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $r3 = $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        $r4 = (androidx.compose.ui.layout.LayoutCoordinates) $r3;

        return $r4;
    }

    public final androidx.compose.ui.layout.LayoutCoordinates getParentCoordinates()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r1;
        boolean $z0;
        androidx.compose.ui.layout.LayoutCoordinates $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r5 = "LayoutCoordinate operations are only valid when isAttached is true";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        $r2 = (androidx.compose.ui.layout.LayoutCoordinates) $r1;

        return $r2;
    }

    protected final androidx.compose.ui.geometry.MutableRect getRectCache()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.geometry.MutableRect r1, r2, $r3, $r4;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r4 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.MutableRect _rectCache>;

        if $r4 != null goto label1;

        $r3 = new androidx.compose.ui.geometry.MutableRect;

        specialinvoke $r3.<androidx.compose.ui.geometry.MutableRect: void <init>(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        r1 = $r3;

        r2 = r1;

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.MutableRect _rectCache> = r2;

        $r4 = r1;

     label1:
        return $r4;
    }

    private final androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.Owner $r2;
        androidx.compose.ui.node.OwnerSnapshotObserver $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r1);

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        return $r3;
    }

    protected final androidx.compose.ui.layout.Placeable performingMeasure-K40F9xA(long, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, $l1;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.layout.Placeable r2;
        java.lang.Object $r3;
        androidx.compose.ui.node.OwnedLayer $r4;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$setMeasurementConstraints-BRTryo0(androidx.compose.ui.node.NodeCoordinator,long)>(r0, l0);

        $r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r2 = (androidx.compose.ui.layout.Placeable) $r3;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r4 == null goto label1;

        $l1 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: long access$getMeasuredSize-YbymL2g(androidx.compose.ui.node.NodeCoordinator)>(r0);

        interfaceinvoke $r4.<androidx.compose.ui.node.OwnedLayer: void resize-ozmzZPI(long)>($l1);

        goto label1;

     label1:
        return r2;
    }

    public final void onMeasured()
    {
        androidx.compose.ui.node.NodeCoordinator r0, r4, r5;
        androidx.compose.runtime.snapshots.Snapshot$Companion r1;
        androidx.compose.runtime.snapshots.Snapshot r2, r3, r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z3, $z7, $z8;
        androidx.compose.ui.Modifier$Node r6, r7, $r11, $r15, r16;
        androidx.compose.ui.node.LayoutAwareModifierNode r8;
        androidx.compose.ui.node.Nodes $r9, $r10;
        long $l7;
        java.lang.Throwable $r12, $r13, r20;
        kotlin.Unit $r17, r19;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r9 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i2 = virtualinvoke $r9.<androidx.compose.ui.node.Nodes: int getLayoutAware-OLwlOKw()>();

        $z7 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean hasNode-H91voCI(int)>($i2);

        if $z7 == 0 goto label15;

        r1 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        r2 = virtualinvoke r1.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.Snapshot createNonObservableSnapshot()>();

     label01:
        r14 = r2;

        r3 = virtualinvoke r14.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot makeCurrent()>();

     label02:
        r4 = r0;

        $r10 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r10.<androidx.compose.ui.node.Nodes: int getLayoutAware-OLwlOKw()>();

        r5 = r4;

        i1 = i0;

        z3 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z3 == 0 goto label03;

        $r15 = virtualinvoke r5.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label04;

     label03:
        $r11 = virtualinvoke r5.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r15 = virtualinvoke $r11.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r15 != null goto label04;

        goto label07;

     label04:
        r6 = $r15;

        r16 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r5, z3);

     label05:
        if r16 == null goto label07;

        $i3 = virtualinvoke r16.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i4 = $i3 & i1;

        if $i4 == 0 goto label07;

        $i5 = virtualinvoke r16.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i6 = $i5 & i1;

        if $i6 == 0 goto label06;

        r7 = r16;

        $z8 = r7 instanceof androidx.compose.ui.node.LayoutAwareModifierNode;

        if $z8 == 0 goto label06;

        r8 = (androidx.compose.ui.node.LayoutAwareModifierNode) r7;

        $l7 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        interfaceinvoke r8.<androidx.compose.ui.node.LayoutAwareModifierNode: void onRemeasured-ozmzZPI(long)>($l7);

     label06:
        if r16 == r6 goto label07;

        r16 = virtualinvoke r16.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label05;

     label07:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        virtualinvoke r14.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r3);

        goto label11;

     label09:
        $r12 := @caughtexception;

     label10:
        virtualinvoke r14.<androidx.compose.runtime.snapshots.Snapshot: void restoreCurrent(androidx.compose.runtime.snapshots.Snapshot)>(r3);

        throw $r12;

     label11:
        r19 = $r17;

     label12:
        virtualinvoke r2.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

        goto label15;

     label13:
        $r13 := @caughtexception;

        r20 = $r13;

     label14:
        virtualinvoke r2.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

        throw r20;

     label15:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public final void onInitialize()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.OwnedLayer $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label1;

     label1:
        return;
    }

    protected void placeAt-f8xVGno(long, float, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r6;
        long l0, $l1;
        float f0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.node.OwnedLayer r2;
        boolean $z0;
        androidx.compose.ui.node.LayoutNode $r3, $r7, $r8;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r5;
        androidx.compose.ui.node.Owner $r9;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void onLayerBlockUpdated(kotlin.jvm.functions.Function1)>(r1);

        $l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $z0 = staticinvoke <androidx.compose.ui.unit.IntOffset: boolean equals-impl0(long,long)>($l1, l0);

        if $z0 != 0 goto label3;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void setPosition--gyyYBs(long)>(l0);

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        virtualinvoke $r5.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r2 == null goto label1;

        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void move--gyyYBs(long)>(l0);

        goto label2;

     label1:
        $r6 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r6 == null goto label2;

        virtualinvoke $r6.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

        goto label2;

     label2:
        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void invalidateAlignmentLinesFromPositionChange(androidx.compose.ui.node.NodeCoordinator)>(r0);

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        if $r9 == null goto label3;

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        interfaceinvoke $r9.<androidx.compose.ui.node.Owner: void onLayoutChange(androidx.compose.ui.node.LayoutNode)>($r7);

        goto label3;

     label3:
        r0.<androidx.compose.ui.node.NodeCoordinator: float zIndex> = f0;

        return;
    }

    public final void draw(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.node.OwnedLayer r2;
        float f0, f1, $f2, $f3;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r2 == null goto label1;

        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void drawLayer(androidx.compose.ui.graphics.Canvas)>(r1);

        goto label2;

     label1:
        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i1 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l0);

        f0 = (float) $i1;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l2);

        f1 = (float) $i3;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void translate(float,float)>(f0, f1);

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void drawContainedDrawModifiers(androidx.compose.ui.graphics.Canvas)>(r1);

        $f3 = neg f0;

        $f2 = neg f1;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void translate(float,float)>($f3, $f2);

     label2:
        return;
    }

    private final void drawContainedDrawModifiers(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r3, r9;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.node.DrawModifierNode r2, $r13;
        int i0, i1, $i4, $i5, $i6, $i7;
        boolean z1, $z4;
        androidx.compose.ui.Modifier$Node r4, r5, $r7, $r10, r11, $r12;
        androidx.compose.ui.node.Nodes $r6;
        androidx.compose.ui.node.LayoutNode $r8;
        long $l2, $l3;
        androidx.compose.ui.node.LayoutNodeDrawScope r14;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        r9 = r0;

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getDraw-OLwlOKw()>();

        r3 = r9;

        i1 = i0;

        z1 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i0);

        if z1 == 0 goto label1;

        $r10 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r10 = virtualinvoke $r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r10 != null goto label2;

        goto label6;

     label2:
        r4 = $r10;

        r11 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r3, z1);

     label3:
        if r11 == null goto label6;

        $i4 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label6;

        $i6 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i7 = $i6 & i1;

        if $i7 == 0 goto label5;

        r5 = r11;

        $r12 = r5;

        $z4 = r5 instanceof androidx.compose.ui.node.DrawModifierNode;

        if $z4 != 0 goto label4;

        $r12 = null;

     label4:
        $r13 = (androidx.compose.ui.node.DrawModifierNode) $r12;

        goto label7;

     label5:
        if r11 == r4 goto label6;

        r11 = virtualinvoke r11.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label6:
        $r13 = null;

     label7:
        r2 = $r13;

        if r2 != null goto label8;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void performDraw(androidx.compose.ui.graphics.Canvas)>(r1);

        goto label9;

     label8:
        $r8 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r14 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeDrawScope getMDrawScope$ui_release()>();

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $l3 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long toSize-ozmzZPI(long)>($l2);

        virtualinvoke r14.<androidx.compose.ui.node.LayoutNodeDrawScope: void draw-x_KDEd0$ui_release(androidx.compose.ui.graphics.Canvas,long,androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DrawModifierNode)>(r1, $l3, r0, r2);

     label9:
        return;
    }

    public void performDraw(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r2;
        androidx.compose.ui.graphics.Canvas r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: void draw(androidx.compose.ui.graphics.Canvas)>(r1);

        goto label1;

     label1:
        return;
    }

    public final void onPlaced()
    {
        androidx.compose.ui.node.NodeCoordinator r0, r8, r9, r15, r17;
        androidx.compose.ui.node.LookaheadDelegate r1;
        androidx.compose.ui.Modifier$Node $r2, $r5, $r10, r11, r12, r13, $r18, r19, r20, r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        boolean $z0, $z1, z3, z8;
        androidx.compose.ui.layout.LayoutCoordinates $r3;
        androidx.compose.ui.node.Nodes $r4, $r16;
        androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl $r6;
        androidx.compose.ui.layout.LookaheadLayoutCoordinates $r7;
        androidx.compose.ui.node.LayoutAwareModifierNode r14, r22;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LookaheadDelegate lookaheadDelegate>;

        if r1 == null goto label05;

        r8 = r0;

        $r4 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i8 = virtualinvoke $r4.<androidx.compose.ui.node.Nodes: int getLayoutAware-OLwlOKw()>();

        r9 = r8;

        i9 = i8;

        z3 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i8);

        if z3 == 0 goto label01;

        $r10 = virtualinvoke r9.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label02;

     label01:
        $r5 = virtualinvoke r9.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r10 = virtualinvoke $r5.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r10 != null goto label02;

        goto label05;

     label02:
        r11 = $r10;

        r12 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r9, z3);

     label03:
        if r12 == null goto label05;

        $i4 = virtualinvoke r12.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i5 = $i4 & i9;

        if $i5 == 0 goto label05;

        $i6 = virtualinvoke r12.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i7 = $i6 & i9;

        if $i7 == 0 goto label04;

        r13 = r12;

        $z1 = r13 instanceof androidx.compose.ui.node.LayoutAwareModifierNode;

        if $z1 == 0 goto label04;

        r14 = (androidx.compose.ui.node.LayoutAwareModifierNode) r13;

        $r6 = virtualinvoke r1.<androidx.compose.ui.node.LookaheadDelegate: androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl getLookaheadLayoutCoordinates()>();

        $r7 = (androidx.compose.ui.layout.LookaheadLayoutCoordinates) $r6;

        interfaceinvoke r14.<androidx.compose.ui.node.LayoutAwareModifierNode: void onLookaheadPlaced(androidx.compose.ui.layout.LookaheadLayoutCoordinates)>($r7);

     label04:
        if r12 == r11 goto label05;

        r12 = virtualinvoke r12.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label03;

     label05:
        r15 = r0;

        $r16 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i10 = virtualinvoke $r16.<androidx.compose.ui.node.Nodes: int getLayoutAware-OLwlOKw()>();

        r17 = r15;

        i11 = i10;

        z8 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>(i10);

        if z8 == 0 goto label06;

        $r18 = virtualinvoke r17.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        goto label07;

     label06:
        $r2 = virtualinvoke r17.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r18 = virtualinvoke $r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if $r18 != null goto label07;

        goto label10;

     label07:
        r19 = $r18;

        r20 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator,boolean)>(r17, z8);

     label08:
        if r20 == null goto label10;

        $i0 = virtualinvoke r20.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i1 = $i0 & i11;

        if $i1 == 0 goto label10;

        $i2 = virtualinvoke r20.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i3 = $i2 & i11;

        if $i3 == 0 goto label09;

        r21 = r20;

        $z0 = r21 instanceof androidx.compose.ui.node.LayoutAwareModifierNode;

        if $z0 == 0 goto label09;

        r22 = (androidx.compose.ui.node.LayoutAwareModifierNode) r21;

        $r3 = (androidx.compose.ui.layout.LayoutCoordinates) r0;

        interfaceinvoke r22.<androidx.compose.ui.node.LayoutAwareModifierNode: void onPlaced(androidx.compose.ui.layout.LayoutCoordinates)>($r3);

     label09:
        if r20 == r19 goto label10;

        r20 = virtualinvoke r20.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label08;

     label10:
        return;
    }

    public void invoke(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.node.LayoutNode $r2;
        boolean $z0;
        androidx.compose.ui.node.OwnerSnapshotObserver $r3;
        androidx.compose.ui.node.NodeCoordinator$invoke$1 $r4;
        androidx.compose.ui.node.OwnerScope $r5;
        kotlin.jvm.functions.Function1 $r6;
        kotlin.jvm.functions.Function0 $r7;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $z0 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r5 = (androidx.compose.ui.node.OwnerScope) r0;

        $r6 = <androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayer>;

        $r4 = new androidx.compose.ui.node.NodeCoordinator$invoke$1;

        specialinvoke $r4.<androidx.compose.ui.node.NodeCoordinator$invoke$1: void <init>(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.graphics.Canvas)>(r0, r1);

        $r7 = (kotlin.jvm.functions.Function0) $r4;

        virtualinvoke $r3.<androidx.compose.ui.node.OwnerSnapshotObserver: void observeReads$ui_release(androidx.compose.ui.node.OwnerScope,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r5, $r6, $r7);

        r0.<androidx.compose.ui.node.NodeCoordinator: boolean lastLayerDrawingWasSkipped> = 0;

        goto label2;

     label1:
        r0.<androidx.compose.ui.node.NodeCoordinator: boolean lastLayerDrawingWasSkipped> = 1;

     label2:
        return;
    }

    public final void onLayerBlockUpdated(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r4;
        kotlin.jvm.functions.Function1 r1, $r5, $r21;
        boolean z0, $z2, $z3, $z4, $z5;
        androidx.compose.ui.node.OwnedLayer r2, $r10, $r17;
        androidx.compose.ui.node.LayoutNode $r6, $r8, $r11, $r14, $r16, $r18, $r22, $r26, $r29;
        androidx.compose.ui.unit.Density $r7, $r25, $r27;
        androidx.compose.ui.unit.LayoutDirection $r9, $r28, $r30;
        kotlin.jvm.functions.Function0 $r12, $r20, $r23;
        androidx.compose.ui.node.Owner $r15, $r19;
        long $l0, $l1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r5 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        if $r5 != r1 goto label1;

        $r25 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.Density layerDensity>;

        $r26 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r27 = virtualinvoke $r26.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r25, $r27);

        if $z4 == 0 goto label1;

        $r28 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.LayoutDirection layerLayoutDirection>;

        $r29 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r30 = virtualinvoke $r29.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        if $r28 == $r30 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        z0 = $z5;

        r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock> = r1;

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.Density layerDensity> = $r7;

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.LayoutDirection layerLayoutDirection> = $r9;

        $z2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z2 == 0 goto label5;

        if r1 == null goto label5;

        $r17 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r17 != null goto label4;

        $r18 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r19 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r18);

        $r21 = (kotlin.jvm.functions.Function1) r0;

        $r20 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function0 invalidateParentLayer>;

        r2 = interfaceinvoke $r19.<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnedLayer createLayer(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r21, $r20);

        r4 = r0;

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void resize-ozmzZPI(long)>($l0);

        $l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void move--gyyYBs(long)>($l1);

        r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer> = r2;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void updateLayerParameters()>();

        $r22 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        virtualinvoke $r22.<androidx.compose.ui.node.LayoutNode: void setInnerLayerCoordinatorIsDirty$ui_release(boolean)>(1);

        $r23 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function0 invalidateParentLayer>;

        interfaceinvoke $r23.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label8;

     label4:
        if z0 == 0 goto label8;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void updateLayerParameters()>();

        goto label8;

     label5:
        $r10 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r10 == null goto label7;

        interfaceinvoke $r10.<androidx.compose.ui.node.OwnedLayer: void destroy()>();

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        virtualinvoke $r11.<androidx.compose.ui.node.LayoutNode: void setInnerLayerCoordinatorIsDirty$ui_release(boolean)>(1);

        $r12 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function0 invalidateParentLayer>;

        interfaceinvoke $r12.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $z3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z3 == 0 goto label6;

        $r14 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r15 = virtualinvoke $r14.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        if $r15 == null goto label6;

        $r16 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        interfaceinvoke $r15.<androidx.compose.ui.node.Owner: void onLayoutChange(androidx.compose.ui.node.LayoutNode)>($r16);

        goto label6;

     label6:
        goto label7;

     label7:
        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer> = null;

        r0.<androidx.compose.ui.node.NodeCoordinator: boolean lastLayerDrawingWasSkipped> = 0;

     label8:
        return;
    }

    private final void updateLayerParameters()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.OwnedLayer r1;
        kotlin.jvm.functions.Function1 r2, $r7, $r14, $r22;
        float f0, f1, f2, f3, f4, f5, $f6, f7, f8, f9, $f10;
        long l0, l1, l2;
        androidx.compose.ui.graphics.Shape r3;
        boolean z0, $z1, $z3;
        androidx.compose.ui.graphics.RenderEffect r4;
        androidx.compose.ui.unit.LayoutDirection r5;
        androidx.compose.ui.unit.Density r6, $r18;
        androidx.compose.ui.graphics.ReusableGraphicsLayerScope $r8, $r15, $r16, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r44;
        androidx.compose.ui.node.LayoutNode $r9, $r11, $r17, $r42, $r43;
        androidx.compose.ui.node.Owner $r10;
        java.lang.IllegalArgumentException $r12, $r46;
        java.lang.String $r13, $r47, r48, r53;
        androidx.compose.ui.node.OwnerSnapshotObserver $r19;
        androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1 $r20;
        androidx.compose.ui.node.OwnerScope $r21;
        kotlin.jvm.functions.Function0 $r23;
        androidx.compose.ui.graphics.GraphicsLayerScope $r25;
        androidx.compose.ui.node.LayerPositionalProperties $r45, $r49, r50, r51, r52;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label3;

        $r14 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        if $r14 != null goto label1;

        r48 = "Required value was null.";

        $r46 = new java.lang.IllegalArgumentException;

        $r47 = virtualinvoke r48.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r46;

     label1:
        r2 = $r14;

        $r15 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        virtualinvoke $r15.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: void reset()>();

        $r16 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        $r17 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r18 = virtualinvoke $r17.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        virtualinvoke $r16.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: void setGraphicsDensity$ui_release(androidx.compose.ui.unit.Density)>($r18);

        $r19 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>();

        $r21 = (androidx.compose.ui.node.OwnerScope) r0;

        $r22 = <androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayerParams>;

        $r20 = new androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1;

        specialinvoke $r20.<androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1: void <init>(kotlin.jvm.functions.Function1)>(r2);

        $r23 = (kotlin.jvm.functions.Function0) $r20;

        virtualinvoke $r19.<androidx.compose.ui.node.OwnerSnapshotObserver: void observeReads$ui_release(androidx.compose.ui.node.OwnerScope,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r21, $r22, $r23);

        $r49 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties layerPositionalProperties>;

        if $r49 != null goto label2;

        $r45 = new androidx.compose.ui.node.LayerPositionalProperties;

        specialinvoke $r45.<androidx.compose.ui.node.LayerPositionalProperties: void <init>()>();

        r50 = $r45;

        r51 = r50;

        r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties layerPositionalProperties> = r51;

        $r49 = r50;

     label2:
        r52 = $r49;

        $r24 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        $r25 = (androidx.compose.ui.graphics.GraphicsLayerScope) $r24;

        virtualinvoke r52.<androidx.compose.ui.node.LayerPositionalProperties: void copyFrom(androidx.compose.ui.graphics.GraphicsLayerScope)>($r25);

        $r26 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f7 = virtualinvoke $r26.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getScaleX()>();

        $r27 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f8 = virtualinvoke $r27.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getScaleY()>();

        $r28 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f9 = virtualinvoke $r28.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getAlpha()>();

        $r29 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        $f10 = virtualinvoke $r29.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getTranslationX()>();

        $r30 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f0 = virtualinvoke $r30.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getTranslationY()>();

        $r31 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f1 = virtualinvoke $r31.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getShadowElevation()>();

        $r32 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        l0 = virtualinvoke $r32.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: long getAmbientShadowColor-0d7_KjU()>();

        $r33 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        l1 = virtualinvoke $r33.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: long getSpotShadowColor-0d7_KjU()>();

        $r34 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f2 = virtualinvoke $r34.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getRotationX()>();

        $r35 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f3 = virtualinvoke $r35.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getRotationY()>();

        $r36 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f4 = virtualinvoke $r36.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getRotationZ()>();

        $r37 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        f5 = virtualinvoke $r37.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getCameraDistance()>();

        $r38 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        l2 = virtualinvoke $r38.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: long getTransformOrigin-SzJe1aQ()>();

        $r39 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        r3 = virtualinvoke $r39.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: androidx.compose.ui.graphics.Shape getShape()>();

        $r40 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        z0 = virtualinvoke $r40.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: boolean getClip()>();

        $r41 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        r4 = virtualinvoke $r41.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: androidx.compose.ui.graphics.RenderEffect getRenderEffect()>();

        $r42 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r5 = virtualinvoke $r42.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        $r43 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r6 = virtualinvoke $r43.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.Density getDensity()>();

        interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: void updateLayerProperties-NHXXZp8(float,float,float,float,float,float,float,float,float,float,long,androidx.compose.ui.graphics.Shape,boolean,androidx.compose.ui.graphics.RenderEffect,long,long,androidx.compose.ui.unit.LayoutDirection,androidx.compose.ui.unit.Density)>(f7, f8, f9, $f10, f0, f1, f2, f3, f4, f5, l2, r3, z0, r4, l0, l1, r5, r6);

        $r44 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        $z1 = virtualinvoke $r44.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: boolean getClip()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: boolean isClipping> = $z1;

        goto label6;

     label3:
        $r7 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        if $r7 != null goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        r53 = "Failed requirement.";

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke r53.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        $r8 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        $f6 = virtualinvoke $r8.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: float getAlpha()>();

        r0.<androidx.compose.ui.node.NodeCoordinator: float lastLayerAlpha> = $f6;

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r10 = virtualinvoke $r9.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        if $r10 == null goto label7;

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        interfaceinvoke $r10.<androidx.compose.ui.node.Owner: void onLayoutChange(androidx.compose.ui.node.LayoutNode)>($r11);

        goto label7;

     label7:
        return;
    }

    public final boolean getLastLayerDrawingWasSkipped$ui_release()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $z0 = r0.<androidx.compose.ui.node.NodeCoordinator: boolean lastLayerDrawingWasSkipped>;

        return $z0;
    }

    public final androidx.compose.ui.node.OwnedLayer getLayer()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.OwnedLayer $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        return $r1;
    }

    public boolean isValid()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.OwnedLayer $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final long getMinimumTouchTargetSize-NH-jbRc()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.unit.Density $r1;
        androidx.compose.ui.node.LayoutNode $r2;
        androidx.compose.ui.platform.ViewConfiguration $r3;
        long $l0, $l1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.unit.Density layerDensity>;

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()>();

        $l0 = interfaceinvoke $r3.<androidx.compose.ui.platform.ViewConfiguration: long getMinimumTouchTargetSize-MYxV2XQ()>();

        $l1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toSize-XkaWNTQ(long)>($l0);

        return $l1;
    }

    public final void hitTest-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r1;
        long l0, $l2, $l3;
        androidx.compose.ui.node.HitTestResult r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        androidx.compose.ui.node.DelegatableNode r3;
        int $i1;
        java.lang.Object $r4;
        float f0, f1, $f2, f3, f4;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hitTestSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hitTestResult");

        $i1 = interfaceinvoke r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>();

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: java.lang.Object headUnchecked-H91voCI(int)>($i1);

        r3 = (androidx.compose.ui.node.DelegatableNode) $r4;

        $z2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean withinLayerBounds-k-4lQ0M(long)>(l0);

        if $z2 != 0 goto label03;

        if z0 == 0 goto label11;

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMinimumTouchTargetSize-NH-jbRc()>();

        f0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: float distanceInMinimumTouchTarget-tz77jQw(long,long)>(l0, $l3);

        f1 = f0;

        $z7 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f1);

        if $z7 != 0 goto label01;

        $z9 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z9 != 0 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        if $z10 == 0 goto label11;

        $z8 = virtualinvoke r2.<androidx.compose.ui.node.HitTestResult: boolean isHitInMinimumTouchTargetBetter(float,boolean)>(f0, 0);

        if $z8 == 0 goto label11;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitNear-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>(r3, r1, l0, r2, z0, 0, f0);

        goto label11;

     label03:
        if r3 != null goto label04;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r1, l0, r2, z0, z1);

        goto label11;

     label04:
        $z3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isPointerInBounds-k-4lQ0M(long)>(l0);

        if $z3 == 0 goto label05;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hit-1hIXUjU(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r3, r1, l0, r2, z0, z1);

        goto label11;

     label05:
        if z0 != 0 goto label06;

        $f2 = #InfinityF;

        goto label07;

     label06:
        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMinimumTouchTargetSize-NH-jbRc()>();

        $f2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: float distanceInMinimumTouchTarget-tz77jQw(long,long)>(l0, $l2);

     label07:
        f3 = $f2;

        f4 = f3;

        $z4 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f4);

        if $z4 != 0 goto label08;

        $z6 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f4);

        if $z6 != 0 goto label08;

        $z11 = 1;

        goto label09;

     label08:
        $z11 = 0;

     label09:
        if $z11 == 0 goto label10;

        $z5 = virtualinvoke r2.<androidx.compose.ui.node.HitTestResult: boolean isHitInMinimumTouchTargetBetter(float,boolean)>(f3, z1);

        if $z5 == 0 goto label10;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitNear-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>(r3, r1, l0, r2, z0, z1, f3);

        goto label11;

     label10:
        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void speculativeHit-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>(r3, r1, l0, r2, z0, z1, f3);

     label11:
        return;
    }

    private final void hit-1hIXUjU(androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1;
        androidx.compose.ui.node.NodeCoordinator$hit$1 $r4;
        kotlin.jvm.functions.Function0 $r5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter0: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter1: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter2: long;

        r3 := @parameter3: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        if $r1 != null goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r2, l0, r3, z0, z1);

        goto label2;

     label1:
        $r4 = new androidx.compose.ui.node.NodeCoordinator$hit$1;

        specialinvoke $r4.<androidx.compose.ui.node.NodeCoordinator$hit$1: void <init>(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r0, $r1, r2, l0, r3, z0, z1);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        virtualinvoke r3.<androidx.compose.ui.node.HitTestResult: void hit(java.lang.Object,boolean,kotlin.jvm.functions.Function0)>($r1, z1, $r5);

     label2:
        return;
    }

    private final void hitNear-JHbHoSQ(androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1;
        float f0;
        androidx.compose.ui.node.NodeCoordinator$hitNear$1 $r4;
        kotlin.jvm.functions.Function0 $r5;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter0: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter1: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter2: long;

        r3 := @parameter3: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        f0 := @parameter6: float;

        if $r1 != null goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r2, l0, r3, z0, z1);

        goto label2;

     label1:
        $r4 = new androidx.compose.ui.node.NodeCoordinator$hitNear$1;

        specialinvoke $r4.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: void <init>(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>(r0, $r1, r2, l0, r3, z0, z1, f0);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        virtualinvoke r3.<androidx.compose.ui.node.HitTestResult: void hitInMinimumTouchTarget(java.lang.Object,float,boolean,kotlin.jvm.functions.Function0)>($r1, f0, z1, $r5);

     label2:
        return;
    }

    private final void speculativeHit-JHbHoSQ(androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.DelegatableNode $r1, $r6;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1, $z2;
        float f0;
        int $i1, $i2;
        androidx.compose.ui.node.Nodes $r4;
        java.lang.Object $r5;
        androidx.compose.ui.node.NodeCoordinator$speculativeHit$1 $r7;
        kotlin.jvm.functions.Function0 $r8;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter0: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter1: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter2: long;

        r3 := @parameter3: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        f0 := @parameter6: float;

        if $r1 != null goto label1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r2, l0, r3, z0, z1);

        goto label3;

     label1:
        $z2 = interfaceinvoke r2.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.DelegatableNode)>($r1);

        if $z2 == 0 goto label2;

        $r7 = new androidx.compose.ui.node.NodeCoordinator$speculativeHit$1;

        specialinvoke $r7.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: void <init>(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>(r0, $r1, r2, l0, r3, z0, z1, f0);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        virtualinvoke r3.<androidx.compose.ui.node.HitTestResult: void speculativeHit(java.lang.Object,float,boolean,kotlin.jvm.functions.Function0)>($r1, f0, z1, $r8);

        goto label3;

     label2:
        $i1 = interfaceinvoke r2.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>();

        $r4 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i2 = virtualinvoke $r4.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r5 = staticinvoke <androidx.compose.ui.node.NodeCoordinatorKt: java.lang.Object access$nextUncheckedUntil-hw7D004(androidx.compose.ui.node.DelegatableNode,int,int)>($r1, $i1, $i2);

        $r6 = (androidx.compose.ui.node.DelegatableNode) $r5;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void speculativeHit-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>($r6, r2, l0, r3, z0, z1, f0);

     label3:
        return;
    }

    public void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r3;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r1;
        long l0, l1;
        androidx.compose.ui.node.HitTestResult r2;
        boolean z0, z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hitTestSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hitTestResult");

        r3 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrapped>;

        if r3 == null goto label1;

        l1 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: long fromParentPosition-MK-Hz9U(long)>(l0);

        virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: void hitTest-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r1, l1, r2, z0, z1);

     label1:
        return;
    }

    public final androidx.compose.ui.geometry.Rect touchBoundsInRoot()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r5, r10;
        androidx.compose.ui.layout.LayoutCoordinates r1, $r3;
        androidx.compose.ui.geometry.MutableRect r2;
        long l0, $l1;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int $i2, $i3;
        androidx.compose.ui.geometry.Rect $r4, $r7, $r9;
        androidx.compose.ui.geometry.Rect$Companion $r6, $r8;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r8 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r9 = virtualinvoke $r8.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r9;

     label1:
        $r3 = (androidx.compose.ui.layout.LayoutCoordinates) r0;

        r1 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.layout.LayoutCoordinates findRootCoordinates(androidx.compose.ui.layout.LayoutCoordinates)>($r3);

        r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.MutableRect getRectCache()>();

        $l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMinimumTouchTargetSize-NH-jbRc()>();

        l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long calculateMinimumTouchTargetPadding-E7KxVPU(long)>($l1);

        $f0 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l0);

        $f1 = neg $f0;

        virtualinvoke r2.<androidx.compose.ui.geometry.MutableRect: void setLeft(float)>($f1);

        $f2 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l0);

        $f3 = neg $f2;

        virtualinvoke r2.<androidx.compose.ui.geometry.MutableRect: void setTop(float)>($f3);

        $i2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        $f4 = (float) $i2;

        $f5 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l0);

        $f6 = $f4 + $f5;

        virtualinvoke r2.<androidx.compose.ui.geometry.MutableRect: void setRight(float)>($f6);

        $i3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        $f7 = (float) $i3;

        $f8 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l0);

        $f9 = $f7 + $f8;

        virtualinvoke r2.<androidx.compose.ui.geometry.MutableRect: void setBottom(float)>($f9);

        r10 = r0;

     label2:
        if r10 == r1 goto label4;

        virtualinvoke r10.<androidx.compose.ui.node.NodeCoordinator: void rectInParent$ui_release(androidx.compose.ui.geometry.MutableRect,boolean,boolean)>(r2, 0, 1);

        $z1 = virtualinvoke r2.<androidx.compose.ui.geometry.MutableRect: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r6 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r7;

     label3:
        $r5 = r10.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        r10 = $r5;

        goto label2;

     label4:
        $r4 = staticinvoke <androidx.compose.ui.geometry.MutableRectKt: androidx.compose.ui.geometry.Rect toRect(androidx.compose.ui.geometry.MutableRect)>(r2);

        return $r4;
    }

    public long windowToLocal-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, $l1, $l2, $l3, $l4;
        androidx.compose.ui.layout.LayoutCoordinates r1, $r2;
        boolean $z0;
        androidx.compose.ui.node.LayoutNode $r3;
        androidx.compose.ui.node.Owner $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r7 = "LayoutCoordinate operations are only valid when isAttached is true";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r2 = (androidx.compose.ui.layout.LayoutCoordinates) r0;

        r1 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.layout.LayoutCoordinates findRootCoordinates(androidx.compose.ui.layout.LayoutCoordinates)>($r2);

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r4 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r3);

        $l1 = interfaceinvoke $r4.<androidx.compose.ui.node.Owner: long calculateLocalPosition-MK-Hz9U(long)>(l0);

        $l2 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: long positionInRoot(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        $l4 = staticinvoke <androidx.compose.ui.geometry.Offset: long minus-MK-Hz9U(long,long)>($l1, $l2);

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r1, $l4);

        return $l3;
    }

    public long localToWindow-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, l1, $l2;
        androidx.compose.ui.node.Owner r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long localToRoot-MK-Hz9U(long)>(l0);

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r1 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r2);

        $l2 = interfaceinvoke r1.<androidx.compose.ui.node.Owner: long calculatePositionInWindow-MK-Hz9U(long)>(l1);

        return $l2;
    }

    private final androidx.compose.ui.node.NodeCoordinator toCoordinator(androidx.compose.ui.layout.LayoutCoordinates)
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r3;
        androidx.compose.ui.layout.LayoutCoordinates $r1;
        boolean $z0;
        androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        $z0 = $r1 instanceof androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl;

        if $z0 == 0 goto label1;

        $r2 = (androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.layout.LookaheadLayoutCoordinatesImpl: androidx.compose.ui.node.NodeCoordinator getCoordinator()>();

        if $r3 != null goto label4;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type androidx.compose.ui.node.NodeCoordinator");

        $r3 = (androidx.compose.ui.node.NodeCoordinator) $r1;

     label4:
        return $r3;
    }

    public long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates, long)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r2, r3, $r4, r5;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        long l0, $l1, l2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceCoordinates");

        r2 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator toCoordinator(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator findCommonAncestor$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r2);

        l2 = l0;

        r5 = r2;

     label1:
        if r5 == r3 goto label2;

        l2 = virtualinvoke r5.<androidx.compose.ui.node.NodeCoordinator: long toParentPosition-MK-Hz9U(long)>(l2);

        $r4 = r5.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        r5 = $r4;

        goto label1;

     label2:
        $l1 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long ancestorToLocal-R5De75A(androidx.compose.ui.node.NodeCoordinator,long)>(r3, l2);

        return $l1;
    }

    public void transformFrom-EL8BTi8(androidx.compose.ui.layout.LayoutCoordinates, float[])
    {
        androidx.compose.ui.node.NodeCoordinator r0, r3, r4;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        float[] r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        r2 := @parameter1: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceCoordinates");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "matrix");

        r3 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator toCoordinator(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator findCommonAncestor$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r3);

        staticinvoke <androidx.compose.ui.graphics.Matrix: void reset-impl(float[])>(r2);

        specialinvoke r3.<androidx.compose.ui.node.NodeCoordinator: void transformToAncestor-EL8BTi8(androidx.compose.ui.node.NodeCoordinator,float[])>(r4, r2);

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void transformFromAncestor-EL8BTi8(androidx.compose.ui.node.NodeCoordinator,float[])>(r4, r2);

        return;
    }

    private final void transformToAncestor-EL8BTi8(androidx.compose.ui.node.NodeCoordinator, float[])
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1, $r5, r9;
        float[] r2, $r6, $r7, $r8;
        long l0, $l1;
        boolean $z0, $z1;
        androidx.compose.ui.node.OwnedLayer $r3;
        androidx.compose.ui.unit.IntOffset$Companion $r4;
        int $i2, $i3;
        float $f0, $f1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r2 := @parameter1: float[];

        r9 = r0;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r9, r1);

        if $z0 != 0 goto label4;

        $r3 = r9.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r3 == null goto label2;

        interfaceinvoke $r3.<androidx.compose.ui.node.OwnedLayer: void transform-58bKbWc(float[])>(r2);

        goto label2;

     label2:
        l0 = virtualinvoke r9.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $r4 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l1 = virtualinvoke $r4.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        $z1 = staticinvoke <androidx.compose.ui.unit.IntOffset: boolean equals-impl0(long,long)>(l0, $l1);

        if $z1 != 0 goto label3;

        $r6 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void reset-impl(float[])>($r6);

        $r7 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        $i2 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>(l0);

        $f0 = (float) $i2;

        $i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>(l0);

        $f1 = (float) $i3;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void translate-impl$default(float[],float,float,float,int,java.lang.Object)>($r7, $f0, $f1, 0.0F, 4, null);

        $r8 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r2, $r8);

     label3:
        $r5 = r9.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        r9 = $r5;

        goto label1;

     label4:
        return;
    }

    private final void transformFromAncestor-EL8BTi8(androidx.compose.ui.node.NodeCoordinator, float[])
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1, $r3;
        float[] r2, $r6, $r7, $r8;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l4;
        androidx.compose.ui.unit.IntOffset$Companion $r4;
        androidx.compose.ui.node.OwnedLayer $r5;
        int $i3, $i5;
        float $f0, $f1, $f2, $f3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r2 := @parameter1: float[];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r0);

        if $z0 != 0 goto label2;

        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        specialinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: void transformFromAncestor-EL8BTi8(androidx.compose.ui.node.NodeCoordinator,float[])>(r1, r2);

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $r4 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l1 = virtualinvoke $r4.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        $z1 = staticinvoke <androidx.compose.ui.unit.IntOffset: boolean equals-impl0(long,long)>($l0, $l1);

        if $z1 != 0 goto label1;

        $r6 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void reset-impl(float[])>($r6);

        $r7 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l2);

        $f0 = (float) $i3;

        $f1 = neg $f0;

        $l4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i5 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l4);

        $f2 = (float) $i5;

        $f3 = neg $f2;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void translate-impl$default(float[],float,float,float,int,java.lang.Object)>($r7, $f1, $f3, 0.0F, 4, null);

        $r8 = <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix>;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r2, $r8);

     label1:
        $r5 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r5 == null goto label2;

        interfaceinvoke $r5.<androidx.compose.ui.node.OwnedLayer: void inverseTransform-58bKbWc(float[])>(r2);

        goto label2;

     label2:
        return;
    }

    public androidx.compose.ui.geometry.Rect localBoundingBoxOf(androidx.compose.ui.layout.LayoutCoordinates, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r2, $r5, $r18, r19;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        boolean z0, $z1, $z2, $z3;
        androidx.compose.ui.geometry.MutableRect r3;
        long $l0, $l2;
        int $i1, $i3;
        float $f0, $f1;
        androidx.compose.ui.geometry.Rect $r4, $r7;
        androidx.compose.ui.geometry.Rect$Companion $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.IllegalStateException $r12, $r14;
        java.lang.String $r13, $r15, $r16, $r17;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceCoordinates");

        $z1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z1 != 0 goto label1;

        $r16 = "LayoutCoordinate operations are only valid when isAttached is true";

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label1:
        $z2 = interfaceinvoke r1.<androidx.compose.ui.layout.LayoutCoordinates: boolean isAttached()>();

        if $z2 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LayoutCoordinates ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not attached!");

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        r2 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator toCoordinator(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        $r18 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator findCommonAncestor$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r2);

        r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.MutableRect getRectCache()>();

        virtualinvoke r3.<androidx.compose.ui.geometry.MutableRect: void setLeft(float)>(0.0F);

        virtualinvoke r3.<androidx.compose.ui.geometry.MutableRect: void setTop(float)>(0.0F);

        $l0 = interfaceinvoke r1.<androidx.compose.ui.layout.LayoutCoordinates: long getSize-YbymL2g()>();

        $i1 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>($l0);

        $f0 = (float) $i1;

        virtualinvoke r3.<androidx.compose.ui.geometry.MutableRect: void setRight(float)>($f0);

        $l2 = interfaceinvoke r1.<androidx.compose.ui.layout.LayoutCoordinates: long getSize-YbymL2g()>();

        $i3 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>($l2);

        $f1 = (float) $i3;

        virtualinvoke r3.<androidx.compose.ui.geometry.MutableRect: void setBottom(float)>($f1);

        r19 = r2;

     label3:
        if r19 == $r18 goto label5;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void rectInParent$ui_release$default(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.geometry.MutableRect,boolean,boolean,int,java.lang.Object)>(r19, r3, z0, 0, 4, null);

        $z3 = virtualinvoke r3.<androidx.compose.ui.geometry.MutableRect: boolean isEmpty()>();

        if $z3 == 0 goto label4;

        $r6 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r7;

     label4:
        $r5 = r19.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        r19 = $r5;

        goto label3;

     label5:
        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void ancestorToLocal(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.geometry.MutableRect,boolean)>($r18, r3, z0);

        $r4 = staticinvoke <androidx.compose.ui.geometry.MutableRectKt: androidx.compose.ui.geometry.Rect toRect(androidx.compose.ui.geometry.MutableRect)>(r3);

        return $r4;
    }

    private final long ancestorToLocal-R5De75A(androidx.compose.ui.node.NodeCoordinator, long)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1, r2;
        long l0, $l1, $l2, $l3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter1: long;

        if r1 != r0 goto label1;

        return l0;

     label1:
        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if r2 == null goto label2;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label3;

     label2:
        $l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long fromParentPosition-MK-Hz9U(long)>(l0);

        return $l1;

     label3:
        $l2 = specialinvoke r2.<androidx.compose.ui.node.NodeCoordinator: long ancestorToLocal-R5De75A(androidx.compose.ui.node.NodeCoordinator,long)>(r1, l0);

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long fromParentPosition-MK-Hz9U(long)>($l2);

        return $l3;
    }

    private final void ancestorToLocal(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.geometry.MutableRect, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1, $r3;
        androidx.compose.ui.geometry.MutableRect r2;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r2 := @parameter1: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter2: boolean;

        if r1 != r0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r3 == null goto label2;

        specialinvoke $r3.<androidx.compose.ui.node.NodeCoordinator: void ancestorToLocal(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.geometry.MutableRect,boolean)>(r1, r2, z0);

        goto label2;

     label2:
        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void fromParentRect(androidx.compose.ui.geometry.MutableRect,boolean)>(r2, z0);

        return;
    }

    public long localToRoot-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r4;
        long l0, $l1;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r3 = "LayoutCoordinate operations are only valid when isAttached is true";

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        r4 = r0;

        $l1 = l0;

     label2:
        if r4 == null goto label3;

        $l1 = virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: long toParentPosition-MK-Hz9U(long)>($l1);

        r4 = r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        goto label2;

     label3:
        return $l1;
    }

    protected final void withPositionTranslation(androidx.compose.ui.graphics.Canvas, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.graphics.Canvas r1;
        kotlin.jvm.functions.Function1 r2;
        float f0, f1, $f2, $f3;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i1 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l0);

        f0 = (float) $i1;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l2);

        f1 = (float) $i3;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void translate(float,float)>(f0, f1);

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        $f3 = neg f0;

        $f2 = neg f1;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void translate(float,float)>($f3, $f2);

        return;
    }

    public long toParentPosition-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, l1, $l2, $l3, $l4;
        androidx.compose.ui.node.OwnedLayer r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label1;

        $l4 = interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: long mapOffset-8S9VItk(long,boolean)>(l0, 0);

        goto label2;

     label1:
        $l4 = l0;

     label2:
        l1 = $l4;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        $l3 = staticinvoke <androidx.compose.ui.unit.IntOffsetKt: long plus-Nv-tHpc(long,long)>(l1, $l2);

        return $l3;
    }

    public long fromParentPosition-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, l1, $l2, $l3;
        androidx.compose.ui.node.OwnedLayer r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        l1 = staticinvoke <androidx.compose.ui.unit.IntOffsetKt: long minus-Nv-tHpc(long,long)>(l0, $l2);

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label1;

        $l3 = interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: long mapOffset-8S9VItk(long,boolean)>(l1, 1);

        goto label2;

     label1:
        $l3 = l1;

     label2:
        return $l3;
    }

    protected final void drawBorder(androidx.compose.ui.graphics.Canvas, androidx.compose.ui.graphics.Paint)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.graphics.Paint r2;
        androidx.compose.ui.geometry.Rect r3, $r4;
        long $l0, $l2;
        int $i1, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        r2 := @parameter1: androidx.compose.ui.graphics.Paint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "paint");

        $r4 = new androidx.compose.ui.geometry.Rect;

        $l0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        $i1 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>($l0);

        $f0 = (float) $i1;

        $f1 = $f0 - 0.5F;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        $i3 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>($l2);

        $f2 = (float) $i3;

        $f3 = $f2 - 0.5F;

        specialinvoke $r4.<androidx.compose.ui.geometry.Rect: void <init>(float,float,float,float)>(0.5F, 0.5F, $f1, $f3);

        r3 = $r4;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void drawRect(androidx.compose.ui.geometry.Rect,androidx.compose.ui.graphics.Paint)>(r3, r2);

        return;
    }

    public void attach()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void onLayerBlockUpdated(kotlin.jvm.functions.Function1)>($r1);

        return;
    }

    public void detach()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        kotlin.jvm.functions.Function1 $r1;
        androidx.compose.ui.node.LayoutNode $r2, $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 layerBlock>;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void onLayerBlockUpdated(kotlin.jvm.functions.Function1)>($r1);

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r3 == null goto label1;

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        goto label1;

     label1:
        return;
    }

    public final void rectInParent$ui_release(androidx.compose.ui.geometry.MutableRect, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.geometry.MutableRect r1;
        boolean z0, z1, $z2, $z3;
        androidx.compose.ui.node.OwnedLayer r2;
        int i0, $i2, $i4, $i6, $i8, i11;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        long $l1, $l3, $l5, $l7, l9, $l10, $l12;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bounds");

        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r2 == null goto label4;

        $z2 = r0.<androidx.compose.ui.node.NodeCoordinator: boolean isClipping>;

        if $z2 == 0 goto label3;

        if z1 == 0 goto label1;

        l9 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getMinimumTouchTargetSize-NH-jbRc()>();

        $f4 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l9);

        f0 = $f4 / 2.0F;

        $f5 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l9);

        f1 = $f5 / 2.0F;

        $f6 = neg f0;

        $f7 = neg f1;

        $l5 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i6 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>($l5);

        $f8 = (float) $i6;

        $f9 = $f8 + f0;

        $l7 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i8 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>($l7);

        $f10 = (float) $i8;

        $f11 = $f10 + f1;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void intersect(float,float,float,float)>($f6, $f7, $f9, $f11);

        goto label2;

     label1:
        if z0 == 0 goto label2;

        $l1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i2 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>($l1);

        $f2 = (float) $i2;

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i4 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>($l3);

        $f3 = (float) $i4;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void intersect(float,float,float,float)>(0.0F, 0.0F, $f2, $f3);

     label2:
        $z3 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: boolean isEmpty()>();

        if $z3 == 0 goto label3;

        return;

     label3:
        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void mapBounds(androidx.compose.ui.geometry.MutableRect,boolean)>(r1, 0);

     label4:
        $l10 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        i11 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l10);

        $f12 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getLeft()>();

        $f13 = (float) i11;

        $f14 = $f12 + $f13;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setLeft(float)>($f14);

        $f15 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getRight()>();

        $f16 = (float) i11;

        $f17 = $f15 + $f16;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setRight(float)>($f17);

        $l12 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        i0 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l12);

        $f18 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getTop()>();

        $f19 = (float) i0;

        $f20 = $f18 + $f19;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setTop(float)>($f20);

        $f21 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getBottom()>();

        $f22 = (float) i0;

        $f23 = $f21 + $f22;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setBottom(float)>($f23);

        return;
    }

    public static void rectInParent$ui_release$default(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.geometry.MutableRect, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.geometry.MutableRect r1;
        boolean z0, z1;
        int i0, $i1;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter1: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: rectInParent");

        throw $r3;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        z1 = 0;

     label2:
        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void rectInParent$ui_release(androidx.compose.ui.geometry.MutableRect,boolean,boolean)>(r1, z0, z1);

        return;
    }

    private final void fromParentRect(androidx.compose.ui.geometry.MutableRect, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.geometry.MutableRect r1;
        boolean z0, $z1, $z2;
        int i0, i1, $i5, $i7;
        androidx.compose.ui.node.OwnedLayer r2;
        long $l2, $l3, $l4, $l6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter1: boolean;

        $l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        i0 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l2);

        $f0 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getLeft()>();

        $f1 = (float) i0;

        $f2 = $f0 - $f1;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setLeft(float)>($f2);

        $f3 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getRight()>();

        $f4 = (float) i0;

        $f5 = $f3 - $f4;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setRight(float)>($f5);

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getPosition-nOcc-ac()>();

        i1 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l3);

        $f6 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getTop()>();

        $f7 = (float) i1;

        $f8 = $f6 - $f7;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setTop(float)>($f8);

        $f9 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: float getBottom()>();

        $f10 = (float) i1;

        $f11 = $f9 - $f10;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void setBottom(float)>($f11);

        r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r2 == null goto label1;

        interfaceinvoke r2.<androidx.compose.ui.node.OwnedLayer: void mapBounds(androidx.compose.ui.geometry.MutableRect,boolean)>(r1, 1);

        $z1 = r0.<androidx.compose.ui.node.NodeCoordinator: boolean isClipping>;

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $l4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i5 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>($l4);

        $f12 = (float) $i5;

        $l6 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long getSize-YbymL2g()>();

        $i7 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>($l6);

        $f13 = (float) $i7;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void intersect(float,float,float,float)>(0.0F, 0.0F, $f12, $f13);

        $z2 = virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        return;
    }

    protected final boolean withinLayerBounds-k-4lQ0M(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0;
        androidx.compose.ui.node.OwnedLayer r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        $z0 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: boolean isFinite-k-4lQ0M(long)>(l0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label2;

        $z1 = r0.<androidx.compose.ui.node.NodeCoordinator: boolean isClipping>;

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: boolean isInLayer-k-4lQ0M(long)>(l0);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    protected final boolean isPointerInBounds-k-4lQ0M(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0;
        float f0, f1, $f2, $f3;
        byte $b1, $b2, $b4, $b6;
        int $i3, $i5;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        f1 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $b1 = f0 cmpl 0.0F;

        if $b1 < 0 goto label1;

        $b2 = f1 cmpl 0.0F;

        if $b2 < 0 goto label1;

        $i3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        $f2 = (float) $i3;

        $b4 = f0 cmpg $f2;

        if $b4 >= 0 goto label1;

        $i5 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        $f3 = (float) $i5;

        $b6 = f1 cmpg $f3;

        if $b6 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void invalidateLayer()
    {
        androidx.compose.ui.node.NodeCoordinator r0, $r2;
        androidx.compose.ui.node.OwnedLayer r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if r1 == null goto label1;

        interfaceinvoke r1.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r2 == null goto label2;

        virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

        goto label2;

     label2:
        return;
    }

    public java.lang.Object propagateRelocationRequest(androidx.compose.ui.geometry.Rect, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.geometry.Rect r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.geometry.Rect;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: java.lang.Object propagateRelocationRequest$suspendImpl(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.geometry.Rect,kotlin.coroutines.Continuation)>(r0, r1, $r2);

        return $r3;
    }

    static java.lang.Object propagateRelocationRequest$suspendImpl(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.geometry.Rect, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.node.NodeCoordinator $r0, r3, $r6;
        androidx.compose.ui.geometry.Rect r1, r4, r5;
        kotlin.coroutines.Continuation $r2;
        androidx.compose.ui.layout.LayoutCoordinates $r7;
        long $l0;
        java.lang.Object $r8, $r9;
        kotlin.Unit $r10, $r11;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter1: androidx.compose.ui.geometry.Rect;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r6 = $r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator wrappedBy>;

        if $r6 != null goto label1;

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r11;

     label1:
        r3 = $r6;

        $r7 = (androidx.compose.ui.layout.LayoutCoordinates) $r0;

        r4 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.geometry.Rect localBoundingBoxOf(androidx.compose.ui.layout.LayoutCoordinates,boolean)>($r7, 0);

        $l0 = virtualinvoke r4.<androidx.compose.ui.geometry.Rect: long getTopLeft-F1C5BW0()>();

        r5 = virtualinvoke r1.<androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect translate-k-4lQ0M(long)>($l0);

        $r8 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: java.lang.Object propagateRelocationRequest(androidx.compose.ui.geometry.Rect,kotlin.coroutines.Continuation)>(r5, $r2);

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label2;

        return $r8;

     label2:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;
    }

    public void onLayoutModifierNodeChanged()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.node.OwnedLayer $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer layer>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label1;

     label1:
        return;
    }

    public final androidx.compose.ui.node.NodeCoordinator findCommonAncestor$ui_release(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator r0, r1, $r22;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2, $r14;
        androidx.compose.ui.Modifier$Node r3, $r9, $r11, $r12, r17, r19;
        androidx.compose.ui.node.LayoutNode $r4, $r5, $r7, $r8, r15, r16, r20, $r21;
        java.lang.IllegalArgumentException $r6;
        androidx.compose.ui.node.Nodes $r10;
        boolean $z2;
        java.lang.IllegalStateException $r13;
        androidx.compose.ui.node.DelegatableNode $r18;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        r15 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r16 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        if r15 != r16 goto label05;

        r17 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r9 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r18 = (androidx.compose.ui.node.DelegatableNode) $r9;

        $r10 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r10.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r11 = interfaceinvoke $r18.<androidx.compose.ui.node.DelegatableNode: androidx.compose.ui.Modifier$Node getNode()>();

        $z2 = virtualinvoke $r11.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z2 != 0 goto label01;

        r2 = "Check failed.";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label01:
        $r12 = interfaceinvoke $r18.<androidx.compose.ui.node.DelegatableNode: androidx.compose.ui.Modifier$Node getNode()>();

        r19 = virtualinvoke $r12.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

     label02:
        if r19 == null goto label04;

        $i5 = virtualinvoke r19.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i6 = $i5 & i0;

        if $i6 == 0 goto label03;

        r3 = r19;

        if r3 != r17 goto label03;

        return r1;

     label03:
        r19 = virtualinvoke r19.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label02;

     label04:
        return r0;

     label05:
        $i1 = virtualinvoke r15.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        $i2 = virtualinvoke r16.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        if $i1 <= $i2 goto label06;

        $r8 = virtualinvoke r15.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        r15 = $r8;

        goto label05;

     label06:
        $i3 = virtualinvoke r16.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        $i4 = virtualinvoke r15.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        if $i3 <= $i4 goto label07;

        $r7 = virtualinvoke r16.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        r16 = $r7;

        goto label06;

     label07:
        if r15 == r16 goto label10;

        r20 = virtualinvoke r15.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        $r21 = virtualinvoke r16.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r20 == null goto label08;

        if $r21 != null goto label09;

     label08:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("layouts are not part of the same hierarchy");

        throw $r6;

     label09:
        r15 = r20;

        r16 = $r21;

        goto label07;

     label10:
        $r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        if r16 != $r4 goto label11;

        $r22 = r0;

        goto label13;

     label11:
        $r5 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        if r15 != $r5 goto label12;

        $r22 = r1;

        goto label13;

     label12:
        $r22 = virtualinvoke r15.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

     label13:
        return $r22;
    }

    public final boolean shouldSharePointerInputWithSiblings()
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        androidx.compose.ui.Modifier$Node r1, r3, r4, $r7, $r9, r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        androidx.compose.ui.node.DelegatableNode $r2;
        androidx.compose.ui.node.PointerInputModifierNode r5;
        androidx.compose.ui.node.Nodes $r6, $r8;
        boolean $z4, $z5, $z6, $z7;
        java.lang.IllegalStateException $r10;
        java.lang.String $r11, r12;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i2 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getPointerInput-OLwlOKw()>();

        $z4 = staticinvoke <androidx.compose.ui.node.NodeKindKt: boolean getIncludeSelfInTraversal-H91voCI(int)>($i2);

        $r7 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node headNode(boolean)>($z4);

        if $r7 != null goto label1;

        return 0;

     label1:
        r1 = $r7;

        $r8 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i0 = virtualinvoke $r8.<androidx.compose.ui.node.Nodes: int getPointerInput-OLwlOKw()>();

        $r2 = (androidx.compose.ui.node.DelegatableNode) r1;

        i1 = i0;

        $r9 = interfaceinvoke $r2.<androidx.compose.ui.node.DelegatableNode: androidx.compose.ui.Modifier$Node getNode()>();

        $z5 = virtualinvoke $r9.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z5 != 0 goto label2;

        r12 = "Check failed.";

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        r3 = interfaceinvoke $r2.<androidx.compose.ui.node.DelegatableNode: androidx.compose.ui.Modifier$Node getNode()>();

        $i3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i4 = $i3 & i1;

        if $i4 == 0 goto label5;

        r13 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

     label3:
        if r13 == null goto label5;

        $i5 = virtualinvoke r13.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i6 = $i5 & i1;

        if $i6 == 0 goto label4;

        r4 = r13;

        $z6 = r4 instanceof androidx.compose.ui.node.PointerInputModifierNode;

        if $z6 == 0 goto label4;

        r5 = (androidx.compose.ui.node.PointerInputModifierNode) r4;

        $z7 = interfaceinvoke r5.<androidx.compose.ui.node.PointerInputModifierNode: boolean sharePointerInputWithSiblings()>();

        if $z7 == 0 goto label4;

        return 1;

     label4:
        r13 = virtualinvoke r13.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label3;

     label5:
        return 0;
    }

    private final long offsetFromEdge-MK-Hz9U(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, $l5;
        float f0, f1, f2, f3, $f5, $f7, $f8, $f9;
        byte $b1, $b3;
        int $i2, $i4;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        $b1 = f0 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        $f8 = neg f0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        $f5 = (float) $i2;

        $f8 = f0 - $f5;

     label2:
        f1 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f8);

        f2 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $b3 = f2 cmpg 0.0F;

        if $b3 >= 0 goto label3;

        $f9 = neg f2;

        goto label4;

     label3:
        $i4 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        $f7 = (float) $i4;

        $f9 = f2 - $f7;

     label4:
        f3 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f9);

        $l5 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>(f1, f3);

        return $l5;
    }

    protected final long calculateMinimumTouchTargetPadding-E7KxVPU(long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, $l3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int $i1, $i2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        $f2 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l0);

        $i1 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        $f3 = (float) $i1;

        f0 = $f2 - $f3;

        $f4 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l0);

        $i2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        $f5 = (float) $i2;

        f1 = $f4 - $f5;

        $f6 = f0 / 2.0F;

        $f7 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f6);

        $f8 = f1 / 2.0F;

        $f9 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f8);

        $l3 = staticinvoke <androidx.compose.ui.geometry.SizeKt: long Size(float,float)>($f7, $f9);

        return $l3;
    }

    protected final float distanceInMinimumTouchTarget-tz77jQw(long, long)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        long l0, l1, l2, $l11;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int $i3, $i9;
        byte $b4, $b5, $b6, $b7, $b8, $b10;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $i3 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredWidth()>();

        $f1 = (float) $i3;

        $f2 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l1);

        $b4 = $f1 cmpl $f2;

        if $b4 < 0 goto label1;

        $i9 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: int getMeasuredHeight()>();

        $f5 = (float) $i9;

        $f6 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l1);

        $b10 = $f5 cmpl $f6;

        if $b10 < 0 goto label1;

        return #InfinityF;

     label1:
        l2 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long calculateMinimumTouchTargetPadding-E7KxVPU(long)>(l1);

        f0 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l2);

        $f7 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l2);

        $l11 = specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: long offsetFromEdge-MK-Hz9U(long)>(l0);

        $b5 = f0 cmpl 0.0F;

        if $b5 > 0 goto label2;

        $b8 = $f7 cmpl 0.0F;

        if $b8 <= 0 goto label3;

     label2:
        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>($l11);

        $b6 = $f3 cmpg f0;

        if $b6 > 0 goto label3;

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>($l11);

        $b7 = $f4 cmpg $f7;

        if $b7 > 0 goto label3;

        $f8 = staticinvoke <androidx.compose.ui.geometry.Offset: float getDistanceSquared-impl(long)>($l11);

        goto label4;

     label3:
        $f8 = #InfinityF;

     label4:
        return $f8;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.NodeCoordinator r0;
        java.lang.Object r1;
        androidx.compose.ui.graphics.Canvas $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.graphics.Canvas) r1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void invoke(androidx.compose.ui.graphics.Canvas)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    public static final androidx.compose.ui.Modifier$Node access$headNode(androidx.compose.ui.node.NodeCoordinator, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        boolean z0;
        androidx.compose.ui.Modifier$Node $r1;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        z0 := @parameter1: boolean;

        $r1 = specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.Modifier$Node headNode(boolean)>(z0);

        return $r1;
    }

    public static final void access$setMeasurementConstraints-BRTryo0(androidx.compose.ui.node.NodeCoordinator, long)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        l0 := @parameter1: long;

        virtualinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void setMeasurementConstraints-BRTryo0(long)>(l0);

        return;
    }

    public static final long access$getMeasuredSize-YbymL2g(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $l0 = virtualinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: long getMeasuredSize-YbymL2g()>();

        return $l0;
    }

    public static final void access$drawContainedDrawModifiers(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        androidx.compose.ui.graphics.Canvas r1;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r1 := @parameter1: androidx.compose.ui.graphics.Canvas;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void drawContainedDrawModifiers(androidx.compose.ui.graphics.Canvas)>(r1);

        return;
    }

    public static final androidx.compose.ui.graphics.ReusableGraphicsLayerScope access$getGraphicsLayerScope$cp()
    {
        androidx.compose.ui.graphics.ReusableGraphicsLayerScope $r0;

        $r0 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope>;

        return $r0;
    }

    public static final void access$hit-1hIXUjU(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter3: long;

        r3 := @parameter4: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void hit-1hIXUjU(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>($r1, r2, l0, r3, z0, z1);

        return;
    }

    public static final void access$hitNear-JHbHoSQ(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1;
        float f0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter3: long;

        r3 := @parameter4: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        f0 := @parameter7: float;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void hitNear-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>($r1, r2, l0, r3, z0, z1, f0);

        return;
    }

    public static final void access$speculativeHit-JHbHoSQ(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        androidx.compose.ui.node.DelegatableNode $r1;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r2;
        long l0;
        androidx.compose.ui.node.HitTestResult r3;
        boolean z0, z1;
        float f0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r1 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        r2 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter3: long;

        r3 := @parameter4: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        f0 := @parameter7: float;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void speculativeHit-JHbHoSQ(androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>($r1, r2, l0, r3, z0, z1, f0);

        return;
    }

    public static final androidx.compose.ui.node.NodeCoordinator$HitTestSource access$getPointerInputSource$cp()
    {
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r0;

        $r0 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource PointerInputSource>;

        return $r0;
    }

    public static final androidx.compose.ui.node.NodeCoordinator$HitTestSource access$getSemanticsSource$cp()
    {
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r0;

        $r0 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource SemanticsSource>;

        return $r0;
    }

    public static final androidx.compose.ui.node.LayerPositionalProperties access$getLayerPositionalProperties$p(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;
        androidx.compose.ui.node.LayerPositionalProperties $r1;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r1 = $r0.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties layerPositionalProperties>;

        return $r1;
    }

    public static final void access$updateLayerParameters(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator $r0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator: void updateLayerParameters()>();

        return;
    }

    public static final androidx.compose.ui.node.LayerPositionalProperties access$getTmpLayerPositionalProperties$cp()
    {
        androidx.compose.ui.node.LayerPositionalProperties $r0;

        $r0 = <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties tmpLayerPositionalProperties>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion $r0;
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 $r1;
        kotlin.jvm.functions.Function1 $r2, $r4;
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 $r3;
        androidx.compose.ui.graphics.ReusableGraphicsLayerScope $r5;
        androidx.compose.ui.node.LayerPositionalProperties $r6;
        float[] $r7;
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 $r8;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r9, $r11;
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 $r10;

        $r0 = new androidx.compose.ui.node.NodeCoordinator$Companion;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$Companion Companion> = $r0;

        $r1 = <androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        <androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayerParams> = $r2;

        $r3 = <androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        <androidx.compose.ui.node.NodeCoordinator: kotlin.jvm.functions.Function1 onCommitAffectingLayer> = $r4;

        $r5 = new androidx.compose.ui.graphics.ReusableGraphicsLayerScope;

        specialinvoke $r5.<androidx.compose.ui.graphics.ReusableGraphicsLayerScope: void <init>()>();

        <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope graphicsLayerScope> = $r5;

        $r6 = new androidx.compose.ui.node.LayerPositionalProperties;

        specialinvoke $r6.<androidx.compose.ui.node.LayerPositionalProperties: void <init>()>();

        <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties tmpLayerPositionalProperties> = $r6;

        $r7 = staticinvoke <androidx.compose.ui.graphics.Matrix: float[] constructor-impl$default(float[],int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        <androidx.compose.ui.node.NodeCoordinator: float[] tmpMatrix> = $r7;

        $r8 = new androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        specialinvoke $r8.<androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1: void <init>()>();

        $r9 = (androidx.compose.ui.node.NodeCoordinator$HitTestSource) $r8;

        <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource PointerInputSource> = $r9;

        $r10 = new androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        specialinvoke $r10.<androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1: void <init>()>();

        $r11 = (androidx.compose.ui.node.NodeCoordinator$HitTestSource) $r10;

        <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource SemanticsSource> = $r11;

        return;
    }

androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1
<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 r0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 r0;
        androidx.compose.ui.node.NodeCoordinator r1;
        androidx.compose.ui.node.OwnedLayer $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coordinator");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<androidx.compose.ui.node.OwnedLayer: void invalidate()>();

        goto label1;

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.NodeCoordinator) r1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1: void invoke(androidx.compose.ui.node.NodeCoordinator)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 $r0;

        $r0 = new androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1: void <init>()>();

        <androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayer$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1
<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 r0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 r0;
        androidx.compose.ui.node.NodeCoordinator r1;
        androidx.compose.ui.node.LayerPositionalProperties r2, $r5, $r6;
        androidx.compose.ui.node.LayoutNode r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate r4;
        boolean $z0, $z1, $z2;
        int $i0;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate $r7;
        androidx.compose.ui.node.Owner $r8;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coordinator");

        $z0 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: boolean isValid()>();

        if $z0 == 0 goto label4;

        r2 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties access$getLayerPositionalProperties$p(androidx.compose.ui.node.NodeCoordinator)>(r1);

        if r2 != null goto label1;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$updateLayerParameters(androidx.compose.ui.node.NodeCoordinator)>(r1);

        goto label4;

     label1:
        $r5 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties access$getTmpLayerPositionalProperties$cp()>();

        virtualinvoke $r5.<androidx.compose.ui.node.LayerPositionalProperties: void copyFrom(androidx.compose.ui.node.LayerPositionalProperties)>(r2);

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$updateLayerParameters(androidx.compose.ui.node.NodeCoordinator)>(r1);

        $r6 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayerPositionalProperties access$getTmpLayerPositionalProperties$cp()>();

        $z1 = virtualinvoke $r6.<androidx.compose.ui.node.LayerPositionalProperties: boolean hasSameValuesAs(androidx.compose.ui.node.LayerPositionalProperties)>(r2);

        if $z1 != 0 goto label4;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r4 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $i0 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: int getChildrenAccessingCoordinatesDuringPlacement()>();

        if $i0 <= 0 goto label3;

        $z2 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: boolean getCoordinatesAccessedDuringPlacement()>();

        if $z2 == 0 goto label2;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRelayout$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r3, 0, 1, null);

     label2:
        $r7 = virtualinvoke r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate getMeasurePassDelegate$ui_release()>();

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$MeasurePassDelegate: void notifyChildrenUsingCoordinatesWhilePlacing()>();

     label3:
        $r8 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        if $r8 == null goto label4;

        interfaceinvoke $r8.<androidx.compose.ui.node.Owner: void requestOnPositionedCallback(androidx.compose.ui.node.LayoutNode)>(r3);

        goto label4;

     label4:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.NodeCoordinator $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.NodeCoordinator) r1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1: void invoke(androidx.compose.ui.node.NodeCoordinator)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 $r0;

        $r0 = new androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1;

        specialinvoke $r0.<androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1: void <init>()>();

        <androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1: androidx.compose.ui.node.NodeCoordinator$Companion$onCommitAffectingLayerParams$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1
    void <init>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int entityType-OLwlOKw()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;
        androidx.compose.ui.node.Nodes $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        $r1 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.Nodes: int getPointerInput-OLwlOKw()>();

        return $i0;
    }

    public boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.PointerInputModifierNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;
        androidx.compose.ui.node.PointerInputModifierNode r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        r1 := @parameter0: androidx.compose.ui.node.PointerInputModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        $z0 = interfaceinvoke r1.<androidx.compose.ui.node.PointerInputModifierNode: boolean interceptOutOfBoundsChildEvents()>();

        return $z0;
    }

    public boolean shouldHitTestChildren(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;
        androidx.compose.ui.node.LayoutNode r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "parentLayoutNode");

        return 1;
    }

    public void childHitTest-YqVAtuI(androidx.compose.ui.node.LayoutNode, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        long l0;
        androidx.compose.ui.node.HitTestResult r2;
        boolean z0, z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hitTestResult");

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void hitTest-M_7yMNQ$ui_release(long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(l0, r2, z0, z1);

        return;
    }

    public volatile boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.DelegatableNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1 r0;
        androidx.compose.ui.node.DelegatableNode r1;
        androidx.compose.ui.node.PointerInputModifierNode $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1;

        r1 := @parameter0: androidx.compose.ui.node.DelegatableNode;

        $r2 = (androidx.compose.ui.node.PointerInputModifierNode) r1;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$Companion$PointerInputSource$1: boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.PointerInputModifierNode)>($r2);

        return $z0;
    }

androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1
    void <init>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int entityType-OLwlOKw()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;
        androidx.compose.ui.node.Nodes $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        $r1 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.Nodes: int getSemantics-OLwlOKw()>();

        return $i0;
    }

    public boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.SemanticsModifierNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;
        androidx.compose.ui.node.SemanticsModifierNode r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        r1 := @parameter0: androidx.compose.ui.node.SemanticsModifierNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        return 0;
    }

    public boolean shouldHitTestChildren(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.SemanticsModifierNode r2;
        androidx.compose.ui.semantics.SemanticsConfiguration r3;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "parentLayoutNode");

        r2 = staticinvoke <androidx.compose.ui.semantics.SemanticsNodeKt: androidx.compose.ui.node.SemanticsModifierNode getOuterSemantics(androidx.compose.ui.node.LayoutNode)>(r1);

        if r2 == null goto label2;

        r3 = staticinvoke <androidx.compose.ui.node.SemanticsModifierNodeKt: androidx.compose.ui.semantics.SemanticsConfiguration collapsedSemanticsConfiguration(androidx.compose.ui.node.SemanticsModifierNode)>(r2);

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean isClearingSemantics()>();

        if $z0 != 1 goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public void childHitTest-YqVAtuI(androidx.compose.ui.node.LayoutNode, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        long l0;
        androidx.compose.ui.node.HitTestResult r2;
        boolean z0, z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hitTestResult");

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void hitTestSemantics-M_7yMNQ$ui_release(long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(l0, r2, z0, z1);

        return;
    }

    public volatile boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.DelegatableNode)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1 r0;
        androidx.compose.ui.node.DelegatableNode r1;
        androidx.compose.ui.node.SemanticsModifierNode $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1;

        r1 := @parameter0: androidx.compose.ui.node.DelegatableNode;

        $r2 = (androidx.compose.ui.node.SemanticsModifierNode) r1;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$Companion$SemanticsSource$1: boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.SemanticsModifierNode)>($r2);

        return $z0;
    }

androidx.compose.ui.node.NodeCoordinator$Companion
    private void <init>()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion r0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.node.NodeCoordinator$HitTestSource getPointerInputSource()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource access$getPointerInputSource$cp()>();

        return $r1;
    }

    public static void getPointerInputSource$annotations()
    {
        return;
    }

    public final androidx.compose.ui.node.NodeCoordinator$HitTestSource getSemanticsSource()
    {
        androidx.compose.ui.node.NodeCoordinator$Companion r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator$HitTestSource access$getSemanticsSource$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.NodeCoordinator$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.node.NodeCoordinator$hit$1
<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator this$0>
<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.DelegatableNode $this_hit>
<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>
<androidx.compose.ui.node.NodeCoordinator$hit$1: long $pointerPosition>
<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.HitTestResult $hitTestResult>
<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isTouchEvent>
<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isInLayer>
    void <init>(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.NodeCoordinator$hit$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1;
        androidx.compose.ui.node.DelegatableNode $r2;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r3;
        long $l0;
        androidx.compose.ui.node.HitTestResult $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hit$1;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r2 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        $r3 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        $l0 := @parameter3: long;

        $r4 := @parameter4: androidx.compose.ui.node.HitTestResult;

        $z0 := @parameter5: boolean;

        $z1 := @parameter6: boolean;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator this$0> = $r1;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.DelegatableNode $this_hit> = $r2;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource> = $r3;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: long $pointerPosition> = $l0;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.HitTestResult $hitTestResult> = $r4;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isTouchEvent> = $z0;

        r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isInLayer> = $z1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$hit$1 r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r1, $r7;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.DelegatableNode $r3, $r8;
        int $i0, $i1;
        androidx.compose.ui.node.Nodes $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        androidx.compose.ui.node.HitTestResult $r6;
        long $l2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hit$1;

        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator this$0>;

        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.DelegatableNode $this_hit>;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>();

        $r4 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i1 = virtualinvoke $r4.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r5 = staticinvoke <androidx.compose.ui.node.NodeCoordinatorKt: java.lang.Object access$nextUncheckedUntil-hw7D004(androidx.compose.ui.node.DelegatableNode,int,int)>($r3, $i0, $i1);

        $r8 = (androidx.compose.ui.node.DelegatableNode) $r5;

        $r7 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $l2 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: long $pointerPosition>;

        $r6 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: androidx.compose.ui.node.HitTestResult $hitTestResult>;

        $z1 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isTouchEvent>;

        $z0 = r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: boolean $isInLayer>;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$hit-1hIXUjU(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>($r2, $r8, $r7, $l2, $r6, $z1, $z0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$hit$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hit$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$hit$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.NodeCoordinator$hitNear$1
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator this$0>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.DelegatableNode $this_hitNear>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: long $pointerPosition>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.HitTestResult $hitTestResult>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isTouchEvent>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isInLayer>
<androidx.compose.ui.node.NodeCoordinator$hitNear$1: float $distanceFromEdge>
    void <init>(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator$hitNear$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1;
        androidx.compose.ui.node.DelegatableNode $r2;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r3;
        long $l0;
        androidx.compose.ui.node.HitTestResult $r4;
        boolean $z0, $z1;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hitNear$1;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r2 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        $r3 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        $l0 := @parameter3: long;

        $r4 := @parameter4: androidx.compose.ui.node.HitTestResult;

        $z0 := @parameter5: boolean;

        $z1 := @parameter6: boolean;

        $f0 := @parameter7: float;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator this$0> = $r1;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.DelegatableNode $this_hitNear> = $r2;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource> = $r3;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: long $pointerPosition> = $l0;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.HitTestResult $hitTestResult> = $r4;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isTouchEvent> = $z0;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isInLayer> = $z1;

        r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: float $distanceFromEdge> = $f0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$hitNear$1 r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r1, $r7;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.DelegatableNode $r3, $r8;
        int $i0, $i1;
        androidx.compose.ui.node.Nodes $r4;
        java.lang.Object $r5;
        float $f0;
        boolean $z0, $z1;
        androidx.compose.ui.node.HitTestResult $r6;
        long $l2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hitNear$1;

        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator this$0>;

        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.DelegatableNode $this_hitNear>;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>();

        $r4 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i1 = virtualinvoke $r4.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r5 = staticinvoke <androidx.compose.ui.node.NodeCoordinatorKt: java.lang.Object access$nextUncheckedUntil-hw7D004(androidx.compose.ui.node.DelegatableNode,int,int)>($r3, $i0, $i1);

        $r8 = (androidx.compose.ui.node.DelegatableNode) $r5;

        $r7 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $l2 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: long $pointerPosition>;

        $r6 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: androidx.compose.ui.node.HitTestResult $hitTestResult>;

        $z1 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isTouchEvent>;

        $z0 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: boolean $isInLayer>;

        $f0 = r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: float $distanceFromEdge>;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$hitNear-JHbHoSQ(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>($r2, $r8, $r7, $l2, $r6, $z1, $z0, $f0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$hitNear$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$hitNear$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$hitNear$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.NodeCoordinator$HitTestSource
<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>
<androidx.compose.ui.node.NodeCoordinator$HitTestSource: boolean interceptOutOfBoundsChildEvents(androidx.compose.ui.node.DelegatableNode)>
<androidx.compose.ui.node.NodeCoordinator$HitTestSource: boolean shouldHitTestChildren(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.NodeCoordinator$HitTestSource: void childHitTest-YqVAtuI(androidx.compose.ui.node.LayoutNode,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>
androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1
<androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1: androidx.compose.ui.node.NodeCoordinator this$0>
    void <init>(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        r0.<androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1: androidx.compose.ui.node.NodeCoordinator this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1, $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1: androidx.compose.ui.node.NodeCoordinator this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: void invalidateLayer()>();

        goto label1;

     label1:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$invalidateParentLayer$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.NodeCoordinator$invoke$1
<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.node.NodeCoordinator this$0>
<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.graphics.Canvas $canvas>
    void <init>(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.NodeCoordinator$invoke$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1;
        androidx.compose.ui.graphics.Canvas $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invoke$1;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r2 := @parameter1: androidx.compose.ui.graphics.Canvas;

        r0.<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.node.NodeCoordinator this$0> = $r1;

        r0.<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.graphics.Canvas $canvas> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$invoke$1 r0;
        androidx.compose.ui.graphics.Canvas $r1;
        androidx.compose.ui.node.NodeCoordinator $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invoke$1;

        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.node.NodeCoordinator this$0>;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$invoke$1: androidx.compose.ui.graphics.Canvas $canvas>;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$drawContainedDrawModifiers(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.graphics.Canvas)>($r2, $r1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$invoke$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$invoke$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$invoke$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.NodeCoordinator$speculativeHit$1
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator this$0>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.DelegatableNode $this_speculativeHit>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: long $pointerPosition>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.HitTestResult $hitTestResult>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isTouchEvent>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isInLayer>
<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: float $distanceFromEdge>
    void <init>(androidx.compose.ui.node.NodeCoordinator, androidx.compose.ui.node.DelegatableNode, androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean, float)
    {
        androidx.compose.ui.node.NodeCoordinator$speculativeHit$1 r0;
        androidx.compose.ui.node.NodeCoordinator $r1;
        androidx.compose.ui.node.DelegatableNode $r2;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r3;
        long $l0;
        androidx.compose.ui.node.HitTestResult $r4;
        boolean $z0, $z1;
        float $f0;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$speculativeHit$1;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        $r2 := @parameter1: androidx.compose.ui.node.DelegatableNode;

        $r3 := @parameter2: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        $l0 := @parameter3: long;

        $r4 := @parameter4: androidx.compose.ui.node.HitTestResult;

        $z0 := @parameter5: boolean;

        $z1 := @parameter6: boolean;

        $f0 := @parameter7: float;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator this$0> = $r1;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.DelegatableNode $this_speculativeHit> = $r2;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource> = $r3;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: long $pointerPosition> = $l0;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.HitTestResult $hitTestResult> = $r4;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isTouchEvent> = $z0;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isInLayer> = $z1;

        r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: float $distanceFromEdge> = $f0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$speculativeHit$1 r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource $r1, $r7;
        androidx.compose.ui.node.NodeCoordinator $r2;
        androidx.compose.ui.node.DelegatableNode $r3, $r8;
        int $i0, $i1;
        androidx.compose.ui.node.Nodes $r4;
        java.lang.Object $r5;
        float $f0;
        boolean $z0, $z1;
        androidx.compose.ui.node.HitTestResult $r6;
        long $l2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$speculativeHit$1;

        $r2 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator this$0>;

        $r3 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.DelegatableNode $this_speculativeHit>;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: int entityType-OLwlOKw()>();

        $r4 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        $i1 = virtualinvoke $r4.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $r5 = staticinvoke <androidx.compose.ui.node.NodeCoordinatorKt: java.lang.Object access$nextUncheckedUntil-hw7D004(androidx.compose.ui.node.DelegatableNode,int,int)>($r3, $i0, $i1);

        $r8 = (androidx.compose.ui.node.DelegatableNode) $r5;

        $r7 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.NodeCoordinator$HitTestSource $hitTestSource>;

        $l2 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: long $pointerPosition>;

        $r6 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: androidx.compose.ui.node.HitTestResult $hitTestResult>;

        $z1 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isTouchEvent>;

        $z0 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: boolean $isInLayer>;

        $f0 = r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: float $distanceFromEdge>;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$speculativeHit-JHbHoSQ(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.node.DelegatableNode,androidx.compose.ui.node.NodeCoordinator$HitTestSource,long,androidx.compose.ui.node.HitTestResult,boolean,boolean,float)>($r2, $r8, $r7, $l2, $r6, $z1, $z0, $f0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$speculativeHit$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$speculativeHit$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$speculativeHit$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1
<androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1: kotlin.jvm.functions.Function1 $layerBlock>
    void <init>(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1 r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1: kotlin.jvm.functions.Function1 $layerBlock> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1 r0;
        kotlin.jvm.functions.Function1 $r1;
        androidx.compose.ui.graphics.ReusableGraphicsLayerScope $r2;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1;

        $r1 = r0.<androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1: kotlin.jvm.functions.Function1 $layerBlock>;

        $r2 = staticinvoke <androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.graphics.ReusableGraphicsLayerScope access$getGraphicsLayerScope$cp()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1;

        virtualinvoke r0.<androidx.compose.ui.node.NodeCoordinator$updateLayerParameters$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

