androidx.room.compiler.codegen.XTypeSpec
<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XTypeSpec$Companion Companion>
<androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XClassName getClassName()>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XTypeSpec$Companion: androidx.room.compiler.codegen.XTypeSpec$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XTypeSpec: androidx.room.compiler.codegen.XTypeSpec$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XTypeSpec$Builder$Companion$WhenMappings
<androidx.room.compiler.codegen.XTypeSpec$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.codegen.CodeLanguage[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage JAVA>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.codegen.XTypeSpec$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.codegen.XTypeSpec$Builder$Companion
<androidx.room.compiler.codegen.XTypeSpec$Builder$Companion: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Builder$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.codegen.XTypeSpec$Builder apply(androidx.room.compiler.codegen.XTypeSpec$Builder, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.room.compiler.codegen.XTypeSpec$Builder$Companion r0;
        androidx.room.compiler.codegen.XTypeSpec$Builder $r1, r4;
        kotlin.jvm.functions.Function1 r2, r3;
        androidx.room.compiler.codegen.CodeLanguage $r6;
        int[] $r7;
        int $i0, $i1;
        boolean $z1, $z2;
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder $r8;
        com.squareup.kotlinpoet.TypeSpec$Builder $r9;
        java.lang.IllegalStateException $r11, $r16;
        java.lang.String $r12, $r17, r18, r19;
        androidx.room.compiler.codegen.java.JavaTypeSpec$Builder $r13;
        com.squareup.javapoet.TypeSpec$Builder $r14;

        r0 := @this: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion;

        $r1 := @parameter0: androidx.room.compiler.codegen.XTypeSpec$Builder;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "javaTypeBuilder");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "kotlinTypeBuilder");

        r4 = $r1;

        $r6 = interfaceinvoke r4.<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.CodeLanguage getLanguage()>();

        $r7 = <androidx.room.compiler.codegen.XTypeSpec$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r6.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label5;
        };

     label1:
        $z2 = r4 instanceof androidx.room.compiler.codegen.java.JavaTypeSpec$Builder;

        if $z2 != 0 goto label2;

        r18 = "Check failed.";

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        $r13 = (androidx.room.compiler.codegen.java.JavaTypeSpec$Builder) r4;

        $r14 = virtualinvoke $r13.<androidx.room.compiler.codegen.java.JavaTypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder getActual$room_compiler_processing()>();

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r14);

        goto label5;

     label3:
        $z1 = r4 instanceof androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        if $z1 != 0 goto label4;

        r19 = "Check failed.";

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r8 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r4;

        $r9 = virtualinvoke $r8.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder getActual$room_compiler_processing()>();

        interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r9);

     label5:
        return r4;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Builder$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XTypeSpec$Builder$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec$Builder$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XTypeSpec$Builder$Companion: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.codegen.XTypeSpec$Builder
<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion Companion>
<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder superclass(androidx.room.compiler.codegen.XTypeName)>
<androidx.room.compiler.codegen.XTypeSpec$Builder: void addAnnotation(androidx.room.compiler.codegen.XAnnotationSpec)>
<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder addProperty(androidx.room.compiler.codegen.XTypeName,java.lang.String,androidx.room.compiler.codegen.VisibilityModifier,boolean,androidx.room.compiler.codegen.XCodeBlock,java.util.List)>
    public static androidx.room.compiler.codegen.XTypeSpec$Builder addProperty$default(androidx.room.compiler.codegen.XTypeSpec$Builder, androidx.room.compiler.codegen.XTypeName, java.lang.String, androidx.room.compiler.codegen.VisibilityModifier, boolean, androidx.room.compiler.codegen.XCodeBlock, java.util.List, int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XTypeSpec$Builder r0, $r5;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2;
        androidx.room.compiler.codegen.VisibilityModifier r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object r4;
        java.lang.UnsupportedOperationException $r6;
        boolean z0;
        androidx.room.compiler.codegen.XCodeBlock r7;
        java.util.List r8;

        r0 := @parameter0: androidx.room.compiler.codegen.XTypeSpec$Builder;

        r1 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: androidx.room.compiler.codegen.VisibilityModifier;

        z0 := @parameter4: boolean;

        r7 := @parameter5: androidx.room.compiler.codegen.XCodeBlock;

        r8 := @parameter6: java.util.List;

        i0 := @parameter7: int;

        r4 := @parameter8: java.lang.Object;

        if r4 == null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: addProperty");

        throw $r6;

     label1:
        $i1 = i0 & 8;

        if $i1 == 0 goto label2;

        z0 = 0;

     label2:
        $i2 = i0 & 16;

        if $i2 == 0 goto label3;

        r7 = null;

     label3:
        $i3 = i0 & 32;

        if $i3 == 0 goto label4;

        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label4:
        $r5 = interfaceinvoke r0.<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder addProperty(androidx.room.compiler.codegen.XTypeName,java.lang.String,androidx.room.compiler.codegen.VisibilityModifier,boolean,androidx.room.compiler.codegen.XCodeBlock,java.util.List)>(r1, r2, r3, z0, r7, r8);

        return $r5;
    }

<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder addFunction(androidx.room.compiler.codegen.XFunSpec)>
<androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec build()>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Builder$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XTypeSpec$Builder$Companion: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XTypeSpec$Builder: androidx.room.compiler.codegen.XTypeSpec$Builder$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XTypeSpec$Companion$WhenMappings
<androidx.room.compiler.codegen.XTypeSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.codegen.CodeLanguage[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage JAVA>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.codegen.XTypeSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.codegen.XTypeSpec$Companion
<androidx.room.compiler.codegen.XTypeSpec$Companion: androidx.room.compiler.codegen.XTypeSpec$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XTypeSpec$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.codegen.XTypeSpec$Builder classBuilder(androidx.room.compiler.codegen.CodeLanguage, androidx.room.compiler.codegen.XClassName)
    {
        androidx.room.compiler.codegen.XTypeSpec$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        androidx.room.compiler.codegen.XClassName r2;
        int[] $r3;
        int $i0, $i1;
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder $r4;
        com.squareup.kotlinpoet.TypeSpec$Companion $r5;
        com.squareup.kotlinpoet.ClassName $r6;
        com.squareup.kotlinpoet.TypeSpec$Builder $r7;
        androidx.room.compiler.codegen.java.JavaTypeSpec$Builder $r8;
        com.squareup.javapoet.ClassName $r9;
        com.squareup.javapoet.TypeSpec$Builder $r10;
        kotlin.NoWhenBranchMatchedException $r11;
        androidx.room.compiler.codegen.XTypeSpec$Builder $r12;

        r0 := @this: androidx.room.compiler.codegen.XTypeSpec$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: androidx.room.compiler.codegen.XClassName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "className");

        $r3 = <androidx.room.compiler.codegen.XTypeSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r8 = new androidx.room.compiler.codegen.java.JavaTypeSpec$Builder;

        $r9 = virtualinvoke r2.<androidx.room.compiler.codegen.XClassName: com.squareup.javapoet.ClassName getJava$room_compiler_processing()>();

        $r10 = staticinvoke <com.squareup.javapoet.TypeSpec: com.squareup.javapoet.TypeSpec$Builder classBuilder(com.squareup.javapoet.ClassName)>($r9);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "classBuilder(className.java)");

        specialinvoke $r8.<androidx.room.compiler.codegen.java.JavaTypeSpec$Builder: void <init>(androidx.room.compiler.codegen.XClassName,com.squareup.javapoet.TypeSpec$Builder)>(r2, $r10);

        $r12 = (androidx.room.compiler.codegen.XTypeSpec$Builder) $r8;

        goto label4;

     label2:
        $r4 = new androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        $r5 = <com.squareup.kotlinpoet.TypeSpec: com.squareup.kotlinpoet.TypeSpec$Companion Companion>;

        $r6 = virtualinvoke r2.<androidx.room.compiler.codegen.XClassName: com.squareup.kotlinpoet.ClassName getKotlin$room_compiler_processing()>();

        $r7 = virtualinvoke $r5.<com.squareup.kotlinpoet.TypeSpec$Companion: com.squareup.kotlinpoet.TypeSpec$Builder classBuilder(com.squareup.kotlinpoet.ClassName)>($r6);

        specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: void <init>(androidx.room.compiler.codegen.XClassName,com.squareup.kotlinpoet.TypeSpec$Builder)>(r2, $r7);

        $r12 = (androidx.room.compiler.codegen.XTypeSpec$Builder) $r4;

        goto label4;

     label3:
        $r11 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r11.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r11;

     label4:
        return $r12;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XTypeSpec$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XTypeSpec$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XTypeSpec$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XTypeSpec$Companion: androidx.room.compiler.codegen.XTypeSpec$Companion $$INSTANCE> = $r0;

        return;
    }

