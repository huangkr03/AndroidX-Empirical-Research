androidx.test.espresso.GraphHolder
<androidx.test.espresso.GraphHolder: java.lang.String TAG>
<androidx.test.espresso.GraphHolder: java.util.concurrent.atomic.AtomicReference instance>
<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component>
    static androidx.test.espresso.BaseLayerComponent baseLayer()
    {
        java.util.HashMap r0, r17;
        java.util.concurrent.atomic.AtomicReference $r1, $r5, $r6;
        java.lang.Object $r2, $r7;
        androidx.test.espresso.BaseLayerComponent $r3, $r4, $r9, $r11, $r13;
        boolean $z0;
        androidx.test.espresso.GraphHolder $r8, r14, r15, r16;
        androidx.test.platform.io.PlatformTestStorage $r12;
        java.util.Map r18, r19;

        $r1 = <androidx.test.espresso.GraphHolder: java.util.concurrent.atomic.AtomicReference instance>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r14 = (androidx.test.espresso.GraphHolder) $r2;

        if r14 != null goto label2;

        r16 = new androidx.test.espresso.GraphHolder;

        r15 = r16;

        $r4 = staticinvoke <androidx.test.espresso.DaggerBaseLayerComponent: androidx.test.espresso.BaseLayerComponent create()>();

        specialinvoke r16.<androidx.test.espresso.GraphHolder: void <init>(androidx.test.espresso.BaseLayerComponent)>($r4);

        $r5 = <androidx.test.espresso.GraphHolder: java.util.concurrent.atomic.AtomicReference instance>;

        $z0 = staticinvoke <androidx.test.espresso.GraphHolder$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r5, null, r15);

        if $z0 == 0 goto label1;

        r17 = new java.util.HashMap;

        r0 = r17;

        specialinvoke r17.<java.util.HashMap: void <init>()>();

        r18 = (java.util.Map) r0;

        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Espresso", "1");

        $r11 = r15.<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component>;

        $r12 = interfaceinvoke $r11.<androidx.test.espresso.BaseLayerComponent: androidx.test.platform.io.PlatformTestStorage testStorage()>();

        r19 = (java.util.Map) r0;

        staticinvoke <androidx.test.espresso.GraphHolder: void addUsageToOutputProperties(java.util.Map,androidx.test.platform.io.PlatformTestStorage)>(r19, $r12);

        $r13 = r15.<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component>;

        return $r13;

     label1:
        $r6 = <androidx.test.espresso.GraphHolder: java.util.concurrent.atomic.AtomicReference instance>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r8 = (androidx.test.espresso.GraphHolder) $r7;

        $r9 = $r8.<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component>;

        return $r9;

     label2:
        $r3 = r14.<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component>;

        return $r3;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r1 = class "Landroidx/test/espresso/GraphHolder;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.espresso.GraphHolder: java.lang.String TAG> = $r2;

        r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <androidx.test.espresso.GraphHolder: java.util.concurrent.atomic.AtomicReference instance> = r0;

        return;
    }

    private void <init>(androidx.test.espresso.BaseLayerComponent)
    {
        androidx.test.espresso.GraphHolder r0;
        androidx.test.espresso.BaseLayerComponent r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.test.espresso.GraphHolder;

        r1 := @parameter0: androidx.test.espresso.BaseLayerComponent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (androidx.test.espresso.BaseLayerComponent) $r2;

        r0.<androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent component> = $r3;

        return;
    }

    private static void addUsageToOutputProperties(java.util.Map, androidx.test.platform.io.PlatformTestStorage)
    {
        java.util.Map r0;
        androidx.test.platform.io.PlatformTestStorage r1;
        java.lang.Throwable $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: androidx.test.platform.io.PlatformTestStorage;

     label1:
        interfaceinvoke r1.<androidx.test.platform.io.PlatformTestStorage: void addOutputProperties(java.util.Map)>(r0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = <androidx.test.espresso.GraphHolder: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "Failed to add the output properties. This could happen when running on Robolectric or an automotive emulator with API 30. Ignore for now.");

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

androidx.test.espresso.GraphHolder$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReference, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r3 == r1 goto label1;

        return 0;
    }

