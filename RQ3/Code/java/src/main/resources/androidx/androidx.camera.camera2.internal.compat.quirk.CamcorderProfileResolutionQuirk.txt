androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk
<androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk: java.lang.String TAG>
<androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk: java.util.List mSupportedResolutions>
    static boolean load(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r0;
        java.lang.Integer r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r3;
        int $i0;
        boolean $z0;

        r0 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r3 = virtualinvoke r0.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (java.lang.Integer) $r3;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        android.hardware.camera2.params.StreamConfigurationMap r2;
        android.hardware.camera2.CameraCharacteristics$Key $r3;
        java.lang.Object $r4, $r10;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.util.List $r7, $r16;
        java.lang.String $r9;
        android.util.Size[] $r11, $r13, r14, $r15;

        r0 := @this: androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r4 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r3);

        r2 = (android.hardware.camera2.params.StreamConfigurationMap) $r4;

        if r2 != null goto label1;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CamcorderProfileResolutionQuirk", "StreamConfigurationMap is null");

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 23 goto label4;

        if r2 == null goto label2;

        $r13 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>(class "Landroid/graphics/SurfaceTexture;");

        goto label3;

     label2:
        $r13 = null;

     label3:
        r14 = $r13;

        goto label7;

     label4:
        if r2 == null goto label5;

        $r15 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(34);

        goto label6;

     label5:
        $r15 = null;

     label6:
        r14 = $r15;

     label7:
        if r14 == null goto label8;

        $r10 = virtualinvoke r14.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (android.util.Size[]) $r10;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        goto label9;

     label8:
        $r16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label9:
        r0.<androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk: java.util.List mSupportedResolutions> = $r16;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSupportedResolutions = ");

        $r7 = r0.<androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk: java.util.List mSupportedResolutions>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CamcorderProfileResolutionQuirk", $r9);

        return;
    }

    public java.util.List getSupportedResolutions()
    {
        androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<androidx.camera.camera2.internal.compat.quirk.CamcorderProfileResolutionQuirk: java.util.List mSupportedResolutions>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

