androidx.work.impl.utils.WakeLocks
<androidx.work.impl.utils.WakeLocks: java.lang.String TAG>
    public static final android.os.PowerManager$WakeLock newWakeLock(android.content.Context, java.lang.String)
    {
        android.content.Context r0, $r5;
        java.lang.String r1, r14, $r15;
        android.os.PowerManager r2;
        android.os.PowerManager$WakeLock r3;
        androidx.work.impl.utils.WakeLocksHolder r4, $r9;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.util.WeakHashMap $r10;
        java.lang.Object $r11, r13;
        java.lang.Throwable $r12;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tag");

        $r5 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        r13 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r13, "null cannot be cast to non-null type android.os.PowerManager");

        r2 = (android.os.PowerManager) r13;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkManager: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke r2.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, r14);

        r4 = <androidx.work.impl.utils.WakeLocksHolder: androidx.work.impl.utils.WakeLocksHolder INSTANCE>;

        entermonitor r4;

     label1:
        $r9 = <androidx.work.impl.utils.WakeLocksHolder: androidx.work.impl.utils.WakeLocksHolder INSTANCE>;

        $r10 = virtualinvoke $r9.<androidx.work.impl.utils.WakeLocksHolder: java.util.WeakHashMap getWakeLocks()>();

        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r14);

        $r15 = (java.lang.String) $r11;

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r4;

        throw $r12;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "wakeLock");

        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final void checkWakeLocks()
    {
        java.util.Map r0, $r8;
        java.util.Map$Entry r1, r2;
        android.os.PowerManager$WakeLock r3;
        java.lang.String r4, $r15, $r18;
        java.util.LinkedHashMap $r5;
        androidx.work.impl.utils.WakeLocksHolder $r6, $r20;
        java.util.WeakHashMap $r7;
        java.util.Set $r9;
        boolean $z1, $z2, $z5;
        java.lang.Object $r10, $r11, $r12;
        androidx.work.Logger $r13;
        java.lang.StringBuilder $r14, $r16, $r17;
        java.lang.Throwable $r19;
        kotlin.Unit $r21;
        java.util.Iterator $r23;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0 = (java.util.Map) $r5;

        $r20 = <androidx.work.impl.utils.WakeLocksHolder: androidx.work.impl.utils.WakeLocksHolder INSTANCE>;

        entermonitor $r20;

     label01:
        $r6 = <androidx.work.impl.utils.WakeLocksHolder: androidx.work.impl.utils.WakeLocksHolder INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.utils.WakeLocksHolder: java.util.WeakHashMap getWakeLocks()>();

        $r8 = (java.util.Map) $r7;

        interfaceinvoke r0.<java.util.Map: void putAll(java.util.Map)>($r8);

        $r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label02:
        exitmonitor $r20;

        goto label05;

     label03:
        $r19 := @caughtexception;

     label04:
        exitmonitor $r20;

        throw $r19;

     label05:
        $r9 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r23 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r10 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r10;

        r2 = r1;

        $r11 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = (android.os.PowerManager$WakeLock) $r11;

        $r12 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.lang.String) $r12;

        if r3 == null goto label08;

        $z2 = virtualinvoke r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 != 1 goto label07;

        $z5 = 1;

        goto label09;

     label07:
        $z5 = 0;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        if $z5 == 0 goto label10;

        $r13 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r15 = <androidx.work.impl.utils.WakeLocks: java.lang.String TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WakeLock held for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<androidx.work.Logger: void warning(java.lang.String,java.lang.String)>($r15, $r18);

     label10:
        goto label06;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("WakeLocks");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "tagWithPrefix(\"WakeLocks\")");

        <androidx.work.impl.utils.WakeLocks: java.lang.String TAG> = $r0;

        return;
    }

