androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: java.lang.String PARAMETER_MP4A_CONFIG>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int numberOfSubframes>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int previousSequenceNumber>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long startTimeOffsetUs>
<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long fragmentedSampleTimeUs>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;
        java.lang.Throwable r2, $r4;
        com.google.common.collect.ImmutableMap $r3;
        int $i0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

     label1:
        $r3 = r1.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: com.google.common.collect.ImmutableMap fmtpParameters>;

        $i0 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int getNumOfSubframesFromMpeg4AudioConfig(com.google.common.collect.ImmutableMap)>($r3);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int numberOfSubframes> = $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

     label4:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int previousSequenceNumber> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes> = 0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long startTimeOffsetUs> = 0L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long fragmentedSampleTimeUs> = -9223372036854775807L;

        return;

        catch androidx.media3.common.ParserException from label1 to label2 with label3;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r3, $r7;
        java.lang.Object $r4;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r5;
        androidx.media3.common.Format $r6;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 2);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r3);

        $r7 = (androidx.media3.extractor.TrackOutput) $r4;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r6 = $r5.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r7.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r6);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        long l0, $l2;
        int i1;
        byte $b3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp>;

        $b3 = $l2 cmp -9223372036854775807L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp> = l0;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, $l7, $l8, $l9;
        int i1, i2, i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, i14, $i15, i16;
        boolean z0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r2);

        $i4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int previousSequenceNumber>;

        i2 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPacket: int getNextSequenceNumber(int)>($i4);

        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes>;

        if $i5 <= 0 goto label1;

        if i2 >= i1 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: void outputSampleMetadataForFragmentedPackets()>();

     label1:
        i14 = 0;

     label2:
        $i15 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int numberOfSubframes>;

        if i14 >= $i15 goto label6;

        i16 = 0;

     label3:
        $i10 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int getPosition()>();

        $i11 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        if $i10 >= $i11 goto label5;

        i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i16 = i16 + i3;

        if i3 == 255 goto label4;

        goto label5;

     label4:
        goto label3;

     label5:
        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i16);

        $i12 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes>;

        $i13 = $i12 + i16;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes> = $i13;

        i14 = i14 + 1;

        goto label2;

     label6:
        $l8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long startTimeOffsetUs>;

        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp>;

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $i6 = $r4.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int clockRate>;

        $l9 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l8, l0, $l7, $i6);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long fragmentedSampleTimeUs> = $l9;

        if z0 == 0 goto label7;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: void outputSampleMetadataForFragmentedPackets()>();

     label7:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int previousSequenceNumber> = i1;

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes> = 0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long startTimeOffsetUs> = l1;

        return;
    }

    private static int getNumOfSubframesFromMpeg4AudioConfig(com.google.common.collect.ImmutableMap) throws androidx.media3.common.ParserException
    {
        com.google.common.collect.ImmutableMap r0;
        java.lang.String r1, $r9;
        byte[] r2;
        androidx.media3.common.util.ParsableBitArray r3, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        androidx.media3.common.ParserException $r10;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.google.common.collect.ImmutableMap;

        $r4 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("config");

        r1 = (java.lang.String) $r4;

        i6 = 0;

        if r1 == null goto label8;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 % 2;

        if $i2 != 0 goto label8;

        r2 = staticinvoke <androidx.media3.common.util.Util: byte[] getBytesFromHexString(java.lang.String)>(r1);

        $r5 = new androidx.media3.common.util.ParsableBitArray;

        specialinvoke $r5.<androidx.media3.common.util.ParsableBitArray: void <init>(byte[])>(r2);

        r3 = $r5;

        i0 = virtualinvoke r3.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(1);

        if i0 != 0 goto label7;

        $i3 = virtualinvoke r3.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(1);

        if $i3 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "Only supports allStreamsSameTimeFraming.");

        i6 = virtualinvoke r3.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(6);

        $i4 = virtualinvoke r3.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(4);

        if $i4 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Only suppors one program.");

        $i5 = virtualinvoke r3.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(3);

        if $i5 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Only suppors one layer.");

        goto label8;

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported audio mux version: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedDataOfUnknownType(java.lang.String,java.lang.Throwable)>($r9, null);

        throw $r10;

     label8:
        $i7 = i6 + 1;

        return $i7;
    }

    private void outputSampleMetadataForFragmentedPackets()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader r0;
        androidx.media3.extractor.TrackOutput $r1, $r3;
        java.lang.Object $r2;
        int $i0;
        long $l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.extractor.TrackOutput) $r2;

        $l1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long fragmentedSampleTimeUs>;

        $i0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes>;

        interfaceinvoke $r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($l1, 1, $i0, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: int fragmentedSampleSizeBytes> = 0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpMp4aReader: long fragmentedSampleTimeUs> = -9223372036854775807L;

        return;
    }

