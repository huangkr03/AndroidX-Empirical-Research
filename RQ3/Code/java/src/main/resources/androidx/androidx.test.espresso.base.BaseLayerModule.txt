androidx.test.espresso.base.BaseLayerModule
    public android.content.Context provideTargetContext()
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        android.app.Instrumentation $r1;
        android.content.Context $r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r2 = virtualinvoke $r1.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        return $r2;
    }

    public android.os.Looper provideMainLooper()
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        android.os.Looper $r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        return $r1;
    }

    androidx.test.espresso.FailureHandler provideFailureHander(androidx.test.espresso.base.DefaultFailureHandler)
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.espresso.base.DefaultFailureHandler r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: androidx.test.espresso.base.DefaultFailureHandler;

        return r1;
    }

    androidx.test.espresso.FailureHandler provideFailureHandler(androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder)
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder r1;
        androidx.test.espresso.FailureHandler $r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        $r2 = virtualinvoke r1.<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: androidx.test.espresso.FailureHandler get()>();

        return $r2;
    }

    public androidx.test.espresso.base.ActiveRootLister provideActiveRootLister(androidx.test.espresso.base.RootsOracle)
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.espresso.base.RootsOracle r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: androidx.test.espresso.base.RootsOracle;

        return r1;
    }

    androidx.test.espresso.base.DefaultFailureHandler provideDefaultFailureHander(android.content.Context, androidx.test.platform.io.PlatformTestStorage)
    {
        android.content.Context r0;
        androidx.test.platform.io.PlatformTestStorage r1;
        androidx.test.espresso.base.BaseLayerModule r2;
        androidx.test.espresso.base.DefaultFailureHandler r3;

        r2 := @this: androidx.test.espresso.base.BaseLayerModule;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.test.platform.io.PlatformTestStorage;

        r3 = new androidx.test.espresso.base.DefaultFailureHandler;

        specialinvoke r3.<androidx.test.espresso.base.DefaultFailureHandler: void <init>(android.content.Context,androidx.test.platform.io.PlatformTestStorage)>(r0, r1);

        return r3;
    }

    public androidx.test.espresso.base.EventInjector provideEventInjector()
    {
        java.lang.StringBuilder r0, $r1, $r2, r10;
        java.lang.String $r3;
        androidx.test.espresso.base.BaseLayerModule r4;
        int i0;
        androidx.test.espresso.base.EventInjectionStrategy r5;
        androidx.test.espresso.base.EventInjector r6, r9;
        java.lang.RuntimeException r7, r11;
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r8, r13;
        androidx.test.espresso.base.WindowManagerEventInjectionStrategy r12, r15;
        java.lang.Throwable r14;

        r4 := @this: androidx.test.espresso.base.BaseLayerModule;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 16 goto label2;

        r8 = new androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        r5 = r8;

        specialinvoke r8.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: void <init>()>();

        r13 = (androidx.test.espresso.base.InputManagerEventInjectionStrategy) r5;

        virtualinvoke r13.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: void initialize()>();

     label1:
        r9 = new androidx.test.espresso.base.EventInjector;

        r6 = r9;

        specialinvoke r9.<androidx.test.espresso.base.EventInjector: void <init>(androidx.test.espresso.base.EventInjectionStrategy)>(r5);

        return r6;

     label2:
        if i0 >= 7 goto label3;

        r11 = new java.lang.RuntimeException;

        r7 = r11;

        r10 = new java.lang.StringBuilder;

        r0 = r10;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("API Level 6 and below is not supported. You are running: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        r14 = (java.lang.Throwable) r7;

        throw r14;

     label3:
        r12 = new androidx.test.espresso.base.WindowManagerEventInjectionStrategy;

        r5 = r12;

        specialinvoke r12.<androidx.test.espresso.base.WindowManagerEventInjectionStrategy: void <init>()>();

        r15 = (androidx.test.espresso.base.WindowManagerEventInjectionStrategy) r5;

        virtualinvoke r15.<androidx.test.espresso.base.WindowManagerEventInjectionStrategy: void initialize()>();

        goto label1;
    }

    public androidx.test.espresso.base.IdleNotifier provideCompatAsyncTaskMonitor(androidx.test.espresso.base.ThreadPoolExecutorExtractor)
    {
        boolean $z0;
        java.lang.Object $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        androidx.test.espresso.base.IdleNotifier $r2;
        androidx.test.espresso.base.BaseLayerModule r3;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r4;
        androidx.test.espresso.core.internal.deps.guava.base.Optional r5;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r6;
        androidx.test.espresso.base.NoopRunnableIdleNotifier r7;

        r3 := @this: androidx.test.espresso.base.BaseLayerModule;

        r4 := @parameter0: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        r5 = virtualinvoke r4.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: androidx.test.espresso.core.internal.deps.guava.base.Optional getCompatAsyncTaskThreadPool()>();

        $z0 = virtualinvoke r5.<androidx.test.espresso.core.internal.deps.guava.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        r6 = new androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r0 = virtualinvoke r5.<androidx.test.espresso.core.internal.deps.guava.base.Optional: java.lang.Object get()>();

        $r1 = (java.util.concurrent.ThreadPoolExecutor) $r0;

        specialinvoke r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: void <init>(java.util.concurrent.ThreadPoolExecutor)>($r1);

        $r2 = virtualinvoke r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: androidx.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r2;

     label1:
        r7 = new androidx.test.espresso.base.NoopRunnableIdleNotifier;

        specialinvoke r7.<androidx.test.espresso.base.NoopRunnableIdleNotifier: void <init>()>();

        return r7;
    }

    public androidx.test.espresso.base.IdleNotifier provideDynamicNotifer(androidx.test.espresso.base.IdlingResourceRegistry)
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.espresso.base.IdlingResourceRegistry r1;
        androidx.test.espresso.IdlingRegistry $r2, $r4;
        java.util.Collection $r3, $r5;
        androidx.test.espresso.base.IdleNotifier $r6;
        java.lang.Iterable r7, r8;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: androidx.test.espresso.base.IdlingResourceRegistry;

        $r2 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<androidx.test.espresso.IdlingRegistry: java.util.Collection getResources()>();

        $r4 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r5 = virtualinvoke $r4.<androidx.test.espresso.IdlingRegistry: java.util.Collection getLoopers()>();

        r7 = (java.lang.Iterable) $r3;

        r8 = (java.lang.Iterable) $r5;

        virtualinvoke r1.<androidx.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>(r7, r8);

        $r6 = virtualinvoke r1.<androidx.test.espresso.base.IdlingResourceRegistry: androidx.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r6;
    }

    public androidx.test.espresso.base.IdleNotifier provideSdkAsyncTaskMonitor(androidx.test.espresso.base.ThreadPoolExecutorExtractor)
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        androidx.test.espresso.base.IdleNotifier $r2;
        androidx.test.espresso.base.BaseLayerModule r3;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r4;

        r3 := @this: androidx.test.espresso.base.BaseLayerModule;

        r0 := @parameter0: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        r4 = new androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.ThreadPoolExecutor getAsyncTaskThreadPool()>();

        specialinvoke r4.<androidx.test.espresso.base.AsyncTaskPoolMonitor: void <init>(java.util.concurrent.ThreadPoolExecutor)>($r1);

        $r2 = virtualinvoke r4.<androidx.test.espresso.base.AsyncTaskPoolMonitor: androidx.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r2;
    }

    static androidx.test.internal.platform.os.ControlledLooper lambda$provideControlledLooper$0()
    {
        androidx.test.internal.platform.os.ControlledLooper $r0;

        $r0 = <androidx.test.internal.platform.os.ControlledLooper: androidx.test.internal.platform.os.ControlledLooper NO_OP_CONTROLLED_LOOPER>;

        return $r0;
    }

    public androidx.test.internal.platform.os.ControlledLooper provideControlledLooper()
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 $r1;
        java.lang.Object $r2;
        androidx.test.internal.platform.os.ControlledLooper $r3;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        $r1 = <androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0: androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 INSTANCE>;

        $r2 = staticinvoke <androidx.test.internal.platform.ServiceLoaderWrapper: java.lang.Object loadSingleService(java.lang.Class,androidx.test.internal.platform.ServiceLoaderWrapper$Factory)>(class "Landroidx/test/internal/platform/os/ControlledLooper;", $r1);

        $r3 = (androidx.test.internal.platform.os.ControlledLooper) $r2;

        return $r3;
    }

    androidx.test.platform.tracing.Tracing providesTracing()
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.platform.tracing.Tracing $r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracing getInstance()>();

        return $r1;
    }

    public androidx.test.runner.lifecycle.ActivityLifecycleMonitor provideLifecycleMonitor()
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: androidx.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        return $r1;
    }

    public androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService provideRemoteExecutor()
    {
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.LinkedBlockingQueue r1, r8;
        androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder r2, $r3, r9;
        java.util.concurrent.ThreadFactory $r4;
        androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService $r5;
        androidx.test.espresso.base.BaseLayerModule r6;
        java.util.concurrent.ThreadPoolExecutor r7, r10;
        java.util.concurrent.ExecutorService r11;

        r6 := @this: androidx.test.espresso.base.BaseLayerModule;

        r10 = new java.util.concurrent.ThreadPoolExecutor;

        r7 = r10;

        r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        r8 = new java.util.concurrent.LinkedBlockingQueue;

        r1 = r8;

        specialinvoke r8.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r9 = new androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder;

        r2 = r9;

        specialinvoke r9.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("Espresso Remote #%d");

        $r4 = virtualinvoke $r3.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        specialinvoke r10.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 5, 10L, r0, r1, $r4);

        r11 = (java.util.concurrent.ExecutorService) r7;

        $r5 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.util.concurrent.MoreExecutors: androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>(r11);

        return $r5;
    }

    public java.util.concurrent.Executor provideMainThreadExecutor(android.os.Looper)
    {
        androidx.test.espresso.base.BaseLayerModule r0;
        android.os.Handler r1;
        android.os.Looper r2;
        androidx.test.espresso.base.BaseLayerModule$1 r3;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        r2 := @parameter0: android.os.Looper;

        r1 = new android.os.Handler;

        specialinvoke r1.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        r3 = new androidx.test.espresso.base.BaseLayerModule$1;

        specialinvoke r3.<androidx.test.espresso.base.BaseLayerModule$1: void <init>(androidx.test.espresso.base.BaseLayerModule,android.os.Handler)>(r0, r1);

        return r3;
    }

    public void <init>()
    {
        androidx.test.espresso.base.BaseLayerModule r0;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0
<androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0: androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 INSTANCE>
    public final java.lang.Object create()
    {
        androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 r0;
        androidx.test.internal.platform.os.ControlledLooper $r1;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0;

        $r1 = staticinvoke <androidx.test.espresso.base.BaseLayerModule: androidx.test.internal.platform.os.ControlledLooper lambda$provideControlledLooper$0()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 r0;

        r0 = new androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0;

        specialinvoke r0.<androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0: void <init>()>();

        <androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0: androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 INSTANCE> = r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0 r0;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$$ExternalSyntheticLambda0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.BaseLayerModule$1
<androidx.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler>
    void <init>(androidx.test.espresso.base.BaseLayerModule, android.os.Handler)
    {
        androidx.test.espresso.base.BaseLayerModule$1 r0;
        androidx.test.espresso.base.BaseLayerModule r1;
        android.os.Handler r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$1;

        r1 := @parameter0: androidx.test.espresso.base.BaseLayerModule;

        r2 := @parameter1: android.os.Handler;

        r0.<androidx.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        androidx.test.espresso.base.BaseLayerModule$1 r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$1;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder
<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>
    public androidx.test.espresso.FailureHandler get()
    {
        androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        androidx.test.espresso.FailureHandler $r3;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        $r1 = r0.<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (androidx.test.espresso.FailureHandler) $r2;

        return $r3;
    }

    public void <init>(androidx.test.espresso.FailureHandler)
    {
        androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        androidx.test.espresso.FailureHandler r1;
        java.util.concurrent.atomic.AtomicReference r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        r1 := @parameter0: androidx.test.espresso.FailureHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);

        r0.<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder> = r2;

        return;
    }

    public void update(androidx.test.espresso.FailureHandler)
    {
        androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        androidx.test.espresso.FailureHandler r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        r1 := @parameter0: androidx.test.espresso.FailureHandler;

        $r2 = r0.<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

