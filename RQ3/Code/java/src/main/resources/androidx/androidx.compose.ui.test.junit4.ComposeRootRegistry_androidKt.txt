androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt
    private static final boolean getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)
    {
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r0;
        java.util.Set $r1;
        java.util.Collection $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: java.util.Set getRegisteredComposeRoots()>();

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static final void ensureComposeRootRegistryIsSetUp(androidx.compose.ui.test.junit4.ComposeRootRegistry)
    {
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $z0 = virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: boolean isSetUp()>();

        if $z0 != 0 goto label1;

        $r3 = "Test not setup properly. Use a ComposeTestRule in your test to be able to interact with composables";

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }

    public static final void waitForComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry, boolean)
    {
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r0;
        boolean z0, $z1, $z2;
        java.util.concurrent.CountDownLatch r1, $r4;
        androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$waitForComposeRoots$listener$1 r2, $r5;
        java.lang.Throwable r3, $r9;
        androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener $r6, $r10, $r11;
        java.util.concurrent.TimeUnit $r7, $r8;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: void ensureComposeRootRegistryIsSetUp(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        $z1 = staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: boolean getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        if $z1 != 0 goto label6;

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r1 = $r4;

        $r5 = new androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$waitForComposeRoots$listener$1;

        specialinvoke $r5.<androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$waitForComposeRoots$listener$1: void <init>(androidx.compose.ui.test.junit4.ComposeRootRegistry,java.util.concurrent.CountDownLatch)>($r0, r1);

        r2 = $r5;

     label1:
        $r6 = (androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener) r2;

        virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: void addOnRegistrationChangedListener(androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>($r6);

        $z2 = staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: boolean getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        if $z2 != 0 goto label3;

        if z0 == 0 goto label2;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(2L, $r8);

        goto label3;

     label2:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(500L, $r7);

     label3:
        $r11 = (androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener) r2;

        virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: void removeOnRegistrationChangedListener(androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>($r11);

        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

     label5:
        $r10 = (androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener) r2;

        virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: void removeOnRegistrationChangedListener(androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>($r10);

        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static final java.lang.Object awaitComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r0;
        kotlin.coroutines.Continuation $r1, r2, $r9;
        kotlinx.coroutines.CancellableContinuationImpl r3, $r8;
        kotlinx.coroutines.CancellableContinuation r4;
        java.util.concurrent.atomic.AtomicBoolean r5, $r10;
        androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$listener$1 r6, $r11;
        boolean $z3, $z4;
        kotlin.Unit $r7, $r18;
        androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener $r12, $r19;
        androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$1 $r13;
        kotlin.jvm.functions.Function1 $r14;
        java.lang.Object $r15, $r16, $r17;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: void ensureComposeRootRegistryIsSetUp(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        $z3 = staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: boolean getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        if $z3 != 0 goto label4;

        r2 = $r1;

        $r8 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>(r2);

        specialinvoke $r8.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r9, 1);

        r3 = $r8;

        virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r4 = (kotlinx.coroutines.CancellableContinuation) r3;

        $r10 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r5 = $r10;

        $r11 = new androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$listener$1;

        specialinvoke $r11.<androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$listener$1: void <init>(androidx.compose.ui.test.junit4.ComposeRootRegistry,java.util.concurrent.atomic.AtomicBoolean,kotlinx.coroutines.CancellableContinuation)>($r0, r5, r4);

        r6 = $r11;

        $r12 = (androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener) r6;

        virtualinvoke $r0.<androidx.compose.ui.test.junit4.ComposeRootRegistry: void addOnRegistrationChangedListener(androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>($r12);

        $r13 = new androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$1;

        specialinvoke $r13.<androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$1: void <init>(androidx.compose.ui.test.junit4.ComposeRootRegistry,androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt$awaitComposeRoots$2$listener$1)>($r0, r6);

        $r14 = (kotlin.jvm.functions.Function1) $r13;

        interfaceinvoke r4.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r14);

        $z4 = staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: boolean access$getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        if $z4 == 0 goto label1;

        $r19 = (androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener) r6;

        staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: void access$awaitComposeRoots$lambda-1$resume(java.util.concurrent.atomic.AtomicBoolean,androidx.compose.ui.test.junit4.ComposeRootRegistry,kotlinx.coroutines.CancellableContinuation,androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>(r5, $r0, r4, $r19);

     label1:
        $r15 = virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r16 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r15 != $r16 goto label2;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label2:
        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r15 != $r17 goto label3;

        return $r15;

     label3:
        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r18;

     label4:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

    private static final void awaitComposeRoots$lambda-1$resume(java.util.concurrent.atomic.AtomicBoolean, androidx.compose.ui.test.junit4.ComposeRootRegistry, kotlinx.coroutines.CancellableContinuation, androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r1;
        kotlinx.coroutines.CancellableContinuation $r2;
        androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener r3;
        boolean $z0;
        kotlin.Result$Companion $r4;
        kotlin.Unit $r5;
        kotlin.coroutines.Continuation $r6;
        java.lang.Object $r7;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        $r1 := @parameter1: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $r2 := @parameter2: kotlinx.coroutines.CancellableContinuation;

        r3 := @parameter3: androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<androidx.compose.ui.test.junit4.ComposeRootRegistry: void removeOnRegistrationChangedListener(androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>(r3);

        $r6 = (kotlin.coroutines.Continuation) $r2;

        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

     label1:
        return;
    }

    public static final boolean access$getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)
    {
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $z0 = staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: boolean getHasComposeRoots(androidx.compose.ui.test.junit4.ComposeRootRegistry)>($r0);

        return $z0;
    }

    public static final void access$awaitComposeRoots$lambda-1$resume(java.util.concurrent.atomic.AtomicBoolean, androidx.compose.ui.test.junit4.ComposeRootRegistry, kotlinx.coroutines.CancellableContinuation, androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.compose.ui.test.junit4.ComposeRootRegistry $r1;
        kotlinx.coroutines.CancellableContinuation $r2;
        androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        $r1 := @parameter1: androidx.compose.ui.test.junit4.ComposeRootRegistry;

        $r2 := @parameter2: kotlinx.coroutines.CancellableContinuation;

        r3 := @parameter3: androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener;

        staticinvoke <androidx.compose.ui.test.junit4.ComposeRootRegistry_androidKt: void awaitComposeRoots$lambda-1$resume(java.util.concurrent.atomic.AtomicBoolean,androidx.compose.ui.test.junit4.ComposeRootRegistry,kotlinx.coroutines.CancellableContinuation,androidx.compose.ui.test.junit4.ComposeRootRegistry$OnRegistrationChangedListener)>(r0, $r1, $r2, r3);

        return;
    }

