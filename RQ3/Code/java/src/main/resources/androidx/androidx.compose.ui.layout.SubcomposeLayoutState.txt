androidx.compose.ui.layout.SubcomposeLayoutState
<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>
<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState _state>
<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setRoot>
<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setCompositionContext>
<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setMeasurePolicy>
<androidx.compose.ui.layout.SubcomposeLayoutState: int $stable>
    public void <init>(androidx.compose.ui.layout.SubcomposeSlotReusePolicy)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy r1;
        androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1 $r2;
        kotlin.jvm.functions.Function2 $r3, $r5, $r7;
        androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1 $r4;
        androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1 $r6;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        r1 := @parameter0: androidx.compose.ui.layout.SubcomposeSlotReusePolicy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotReusePolicy");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy> = r1;

        $r2 = new androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1;

        specialinvoke $r2.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)>(r0);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setRoot> = $r3;

        $r4 = new androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1;

        specialinvoke $r4.<androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1: void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)>(r0);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setCompositionContext> = $r5;

        $r6 = new androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1;

        specialinvoke $r6.<androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1: void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)>(r0);

        $r7 = (kotlin.jvm.functions.Function2) $r6;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setMeasurePolicy> = $r7;

        return;
    }

    public void <init>()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy $r1;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r2;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = <androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy INSTANCE>;

        $r2 = (androidx.compose.ui.layout.SubcomposeSlotReusePolicy) $r1;

        specialinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState: void <init>(androidx.compose.ui.layout.SubcomposeSlotReusePolicy)>($r2);

        return;
    }

    public void <init>(int)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        int i0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        i0 := @parameter0: int;

        $r1 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutKt: androidx.compose.ui.layout.SubcomposeSlotReusePolicy SubcomposeSlotReusePolicy(int)>(i0);

        specialinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState: void <init>(androidx.compose.ui.layout.SubcomposeSlotReusePolicy)>($r1);

        return;
    }

    private final androidx.compose.ui.layout.LayoutNodeSubcompositionsState getState()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState _state>;

        if $r1 != null goto label1;

        $r4 = "SubcomposeLayoutState is not attached to SubcomposeLayout";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return $r1;
    }

    public final kotlin.jvm.functions.Function2 getSetRoot$ui_release()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setRoot>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function2 getSetCompositionContext$ui_release()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setCompositionContext>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function2 getSetMeasurePolicy$ui_release()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState: kotlin.jvm.functions.Function2 setMeasurePolicy>;

        return $r1;
    }

    public final androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle precompose(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r3;
        androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle $r4;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        $r3 = specialinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState getState()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle precompose(java.lang.Object,kotlin.jvm.functions.Function2)>(r1, r2);

        return $r4;
    }

    public final void forceRecomposeChildren$ui_release()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = specialinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState getState()>();

        virtualinvoke $r1.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void forceRecomposeChildren()>();

        return;
    }

    public final void disposeCurrentNodes$ui_release()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = specialinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState getState()>();

        virtualinvoke $r1.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void disposeCurrentNodes()>();

        return;
    }

    public static final void access$set_state$p(androidx.compose.ui.layout.SubcomposeLayoutState, androidx.compose.ui.layout.LayoutNodeSubcompositionsState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState $r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r1;

        $r0 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        r1 := @parameter1: androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState _state> = r1;

        return;
    }

    public static final androidx.compose.ui.layout.SubcomposeSlotReusePolicy access$getSlotReusePolicy$p(androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState $r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r1;

        $r0 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = $r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy slotReusePolicy>;

        return $r1;
    }

    public static final androidx.compose.ui.layout.LayoutNodeSubcompositionsState access$getState(androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState $r0;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r1;

        $r0 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        $r1 = specialinvoke $r0.<androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState getState()>();

        return $r1;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.layout.SubcomposeLayoutState: int $stable> = 8;

        return;
    }

androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle
<androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle: void dispose()>
    public int getPlaceablesCount()
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle r0;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle;

        return 0;
    }

    public void premeasure-0kLqBqw(int, long)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle r0;
        int i0;
        long l1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$PrecomposedSlotHandle;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        return;
    }

androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1
<androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>
    void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1 r0;
        androidx.compose.ui.layout.SubcomposeLayoutState $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1;

        $r1 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.ui.node.LayoutNode, androidx.compose.runtime.CompositionContext)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.runtime.CompositionContext r2;
        androidx.compose.ui.layout.SubcomposeLayoutState $r3;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r4;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.runtime.CompositionContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$null");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "it");

        $r3 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r4 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState access$getState(androidx.compose.ui.layout.SubcomposeLayoutState)>($r3);

        virtualinvoke $r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void setCompositionContext(androidx.compose.runtime.CompositionContext)>(r2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1 r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.CompositionContext $r3;
        androidx.compose.ui.node.LayoutNode $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = (androidx.compose.runtime.CompositionContext) r2;

        virtualinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setCompositionContext$1: void invoke(androidx.compose.ui.node.LayoutNode,androidx.compose.runtime.CompositionContext)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1
<androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>
    void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1 r0;
        androidx.compose.ui.layout.SubcomposeLayoutState $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.ui.node.LayoutNode, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.layout.SubcomposeLayoutState $r3;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState $r4;
        androidx.compose.ui.layout.MeasurePolicy $r5;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$null");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "it");

        $r3 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r4 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState access$getState(androidx.compose.ui.layout.SubcomposeLayoutState)>($r3);

        $r5 = virtualinvoke $r4.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: androidx.compose.ui.layout.MeasurePolicy createMeasurePolicy(kotlin.jvm.functions.Function2)>(r2);

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setMeasurePolicy(androidx.compose.ui.layout.MeasurePolicy)>($r5);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1 r0;
        java.lang.Object r1, r2;
        kotlin.jvm.functions.Function2 $r3;
        androidx.compose.ui.node.LayoutNode $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = (kotlin.jvm.functions.Function2) r2;

        virtualinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setMeasurePolicy$1: void invoke(androidx.compose.ui.node.LayoutNode,kotlin.jvm.functions.Function2)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1
<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>
    void <init>(androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1 r0;
        androidx.compose.ui.layout.SubcomposeLayoutState $r1;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1;

        $r1 := @parameter0: androidx.compose.ui.layout.SubcomposeLayoutState;

        r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.layout.SubcomposeLayoutState)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.layout.SubcomposeLayoutState r2, r5, $r6, $r8, $r10, $r13, $r15;
        androidx.compose.ui.layout.LayoutNodeSubcompositionsState r3, r4, $r7, $r9, $r12, $r16;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy $r11, $r14;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.layout.SubcomposeLayoutState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$null");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "it");

        $r15 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r16 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LayoutNodeSubcompositionsState getSubcompositionsState$ui_release()>();

        if $r16 != null goto label1;

        $r12 = new androidx.compose.ui.layout.LayoutNodeSubcompositionsState;

        $r13 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r14 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy access$getSlotReusePolicy$p(androidx.compose.ui.layout.SubcomposeLayoutState)>($r13);

        specialinvoke $r12.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.layout.SubcomposeSlotReusePolicy)>($r1, $r14);

        r3 = $r12;

        r4 = r3;

        r5 = $r15;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void setSubcompositionsState$ui_release(androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>(r4);

        $r15 = r5;

        $r16 = r3;

     label1:
        staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: void access$set_state$p(androidx.compose.ui.layout.SubcomposeLayoutState,androidx.compose.ui.layout.LayoutNodeSubcompositionsState)>($r15, $r16);

        $r6 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r7 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState access$getState(androidx.compose.ui.layout.SubcomposeLayoutState)>($r6);

        virtualinvoke $r7.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void makeSureStateIsConsistent()>();

        $r8 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r9 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.LayoutNodeSubcompositionsState access$getState(androidx.compose.ui.layout.SubcomposeLayoutState)>($r8);

        $r10 = r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: androidx.compose.ui.layout.SubcomposeLayoutState this$0>;

        $r11 = staticinvoke <androidx.compose.ui.layout.SubcomposeLayoutState: androidx.compose.ui.layout.SubcomposeSlotReusePolicy access$getSlotReusePolicy$p(androidx.compose.ui.layout.SubcomposeLayoutState)>($r10);

        virtualinvoke $r9.<androidx.compose.ui.layout.LayoutNodeSubcompositionsState: void setSlotReusePolicy(androidx.compose.ui.layout.SubcomposeSlotReusePolicy)>($r11);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1 r0;
        java.lang.Object r1, r2;
        androidx.compose.ui.layout.SubcomposeLayoutState $r3;
        androidx.compose.ui.node.LayoutNode $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = (androidx.compose.ui.layout.SubcomposeLayoutState) r2;

        virtualinvoke r0.<androidx.compose.ui.layout.SubcomposeLayoutState$setRoot$1: void invoke(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.layout.SubcomposeLayoutState)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

