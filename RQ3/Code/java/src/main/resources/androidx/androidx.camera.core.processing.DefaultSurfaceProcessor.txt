androidx.camera.core.processing.DefaultSurfaceProcessor
<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>
<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.HandlerThread mGlThread>
<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>
<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.Handler mGlHandler>
<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>
<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mTextureMatrix>
<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mSurfaceOutputMatrix>
<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>
<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount>
    public void <init>()
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.processing.ShaderProvider $r1;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        $r1 = <androidx.camera.core.processing.ShaderProvider: androidx.camera.core.processing.ShaderProvider DEFAULT>;

        specialinvoke r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: void <init>(androidx.camera.core.processing.ShaderProvider)>($r1);

        return;
    }

    public void <init>(androidx.camera.core.processing.ShaderProvider)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.processing.ShaderProvider r1;
        java.lang.Throwable r2, $r15;
        float[] $r4, $r5;
        android.os.HandlerThread $r8, $r10, r18;
        android.os.Looper $r11;
        android.os.Handler $r12, r19;
        java.util.concurrent.ScheduledExecutorService $r13;
        java.util.concurrent.atomic.AtomicBoolean r16;
        java.util.LinkedHashMap r17;
        androidx.camera.core.processing.OpenGlRenderer r20;
        java.util.concurrent.Executor r21;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.processing.ShaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r16 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r16.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased> = r16;

        $r4 = newarray (float)[16];

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mTextureMatrix> = $r4;

        $r5 = newarray (float)[16];

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mSurfaceOutputMatrix> = $r5;

        r17 = new java.util.LinkedHashMap;

        specialinvoke r17.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces> = r17;

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount> = 0;

        r18 = new android.os.HandlerThread;

        specialinvoke r18.<android.os.HandlerThread: void <init>(java.lang.String)>("GL Thread");

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.HandlerThread mGlThread> = r18;

        $r8 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.HandlerThread mGlThread>;

        virtualinvoke $r8.<android.os.HandlerThread: void start()>();

        r19 = new android.os.Handler;

        $r10 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.HandlerThread mGlThread>;

        $r11 = virtualinvoke $r10.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r19.<android.os.Handler: void <init>(android.os.Looper)>($r11);

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.Handler mGlHandler> = r19;

        $r12 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.Handler mGlHandler>;

        $r13 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService newHandlerExecutor(android.os.Handler)>($r12);

        r21 = (java.util.concurrent.Executor) $r13;

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor> = r21;

        r20 = new androidx.camera.core.processing.OpenGlRenderer;

        specialinvoke r20.<androidx.camera.core.processing.OpenGlRenderer: void <init>()>();

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer> = r20;

     label1:
        specialinvoke r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: void initGlRenderer(androidx.camera.core.processing.ShaderProvider)>(r1);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r2 = $r15;

        virtualinvoke r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: void release()>();

        throw r2;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void onInputSurface(androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.SurfaceRequest r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        $r2 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.camera.core.SurfaceRequest: boolean willNotProvideSurface()>();

        return;

     label1:
        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.DefaultSurfaceProcessor,androidx.camera.core.SurfaceRequest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void lambda$onInputSurface$1(androidx.camera.core.SurfaceRequest)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void onOutputSurface(androidx.camera.core.SurfaceOutput)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.SurfaceOutput r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.SurfaceOutput;

        $r2 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<androidx.camera.core.SurfaceOutput: void close()>();

        return;

     label1:
        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.DefaultSurfaceProcessor,androidx.camera.core.SurfaceOutput)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void lambda$onOutputSurface$3(androidx.camera.core.SurfaceOutput)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void release()
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        $r1 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.DefaultSurfaceProcessor)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void checkReadyToRelease()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public void onFrameAvailable(android.graphics.SurfaceTexture)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        android.graphics.SurfaceTexture r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        android.view.Surface r4;
        androidx.camera.core.SurfaceOutput r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        boolean $z0, $z1;
        float[] $r7, $r14, $r15, $r17;
        java.util.Map $r8;
        java.util.Set $r9;
        java.lang.Object $r10, $r11, $r12;
        androidx.camera.core.processing.OpenGlRenderer $r13, $r16;
        long $l0;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        $r6 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<android.graphics.SurfaceTexture: void updateTexImage()>();

        $r7 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mTextureMatrix>;

        virtualinvoke r1.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>($r7);

        $r8 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (android.view.Surface) $r11;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (androidx.camera.core.SurfaceOutput) $r12;

        $r13 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>;

        virtualinvoke $r13.<androidx.camera.core.processing.OpenGlRenderer: void setOutputSurface(android.view.Surface)>(r4);

        $r15 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mSurfaceOutputMatrix>;

        $r14 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mTextureMatrix>;

        interfaceinvoke r5.<androidx.camera.core.SurfaceOutput: void updateTransformMatrix(float[],float[])>($r15, $r14);

        $r16 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>;

        $l0 = virtualinvoke r1.<android.graphics.SurfaceTexture: long getTimestamp()>();

        $r17 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: float[] mSurfaceOutputMatrix>;

        virtualinvoke $r16.<androidx.camera.core.processing.OpenGlRenderer: void render(long,float[])>($l0, $r17);

        goto label2;

     label3:
        return;
    }

    private void checkReadyToRelease()
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        java.util.Iterator r1;
        androidx.camera.core.SurfaceOutput r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0, $z1;
        int $i0;
        java.util.Map $r4, $r6;
        java.util.Set $r5;
        androidx.camera.core.processing.OpenGlRenderer $r7;
        android.os.HandlerThread $r8;
        java.lang.Object $r9;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.atomic.AtomicBoolean mIsReleased>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label3;

        $i0 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount>;

        if $i0 != 0 goto label3;

        $r4 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.SurfaceOutput) $r9;

        interfaceinvoke r2.<androidx.camera.core.SurfaceOutput: void close()>();

        goto label1;

     label2:
        $r6 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>;

        virtualinvoke $r7.<androidx.camera.core.processing.OpenGlRenderer: void release()>();

        $r8 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.HandlerThread mGlThread>;

        virtualinvoke $r8.<android.os.HandlerThread: boolean quit()>();

     label3:
        return;
    }

    private void initGlRenderer(androidx.camera.core.processing.ShaderProvider)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.processing.ShaderProvider r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        java.lang.Throwable r3, r4, $r7, $r10, r12;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r5;
        boolean $z0, $z1;
        java.lang.RuntimeException $r9;
        java.lang.IllegalStateException r11;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.processing.ShaderProvider;

        $r5 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.processing.DefaultSurfaceProcessor,androidx.camera.core.processing.ShaderProvider)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: java.lang.Object lambda$initGlRenderer$5(androidx.camera.core.processing.ShaderProvider,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r5);

     label1:
        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

     label2:
        goto label7;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $z0 = r3 instanceof java.util.concurrent.ExecutionException;

        if $z0 == 0 goto label4;

        $r10 = virtualinvoke r3.<java.lang.Exception: java.lang.Throwable getCause()>();

        goto label5;

     label4:
        $r10 = r3;

     label5:
        r4 = $r10;

        $z1 = r4 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label6;

        $r9 = (java.lang.RuntimeException) r4;

        r12 = (java.lang.Throwable) $r9;

        throw r12;

     label6:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create DefaultSurfaceProcessor", r4);

        throw r11;

     label7:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private java.lang.Object lambda$initGlRenderer$5(androidx.camera.core.processing.ShaderProvider, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.processing.ShaderProvider r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.processing.ShaderProvider;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.DefaultSurfaceProcessor,androidx.camera.core.processing.ShaderProvider,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void lambda$initGlRenderer$4(androidx.camera.core.processing.ShaderProvider,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return "Init GlRenderer";
    }

    private void lambda$initGlRenderer$4(androidx.camera.core.processing.ShaderProvider, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.processing.ShaderProvider r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.Throwable r3, $r5;
        androidx.camera.core.processing.OpenGlRenderer $r4;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.processing.ShaderProvider;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

     label1:
        $r4 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>;

        virtualinvoke $r4.<androidx.camera.core.processing.OpenGlRenderer: void init(androidx.camera.core.processing.ShaderProvider)>(r1);

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r3);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void lambda$onOutputSurface$3(androidx.camera.core.SurfaceOutput)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.SurfaceOutput r1;
        java.util.Map $r2;
        java.util.concurrent.Executor $r3;
        androidx.core.util.Consumer $r4;
        android.view.Surface $r5;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.SurfaceOutput;

        $r2 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>;

        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r4 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.core.processing.DefaultSurfaceProcessor,androidx.camera.core.SurfaceOutput)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void lambda$onOutputSurface$2(androidx.camera.core.SurfaceOutput,androidx.camera.core.SurfaceOutput$Event)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceOutput$Event));

        $r5 = interfaceinvoke r1.<androidx.camera.core.SurfaceOutput: android.view.Surface getSurface(java.util.concurrent.Executor,androidx.core.util.Consumer)>($r3, $r4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    private void lambda$onOutputSurface$2(androidx.camera.core.SurfaceOutput, androidx.camera.core.SurfaceOutput$Event)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.SurfaceOutput r1;
        androidx.camera.core.SurfaceOutput$Event r2;
        java.util.Map $r3;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.SurfaceOutput;

        r2 := @parameter1: androidx.camera.core.SurfaceOutput$Event;

        interfaceinvoke r1.<androidx.camera.core.SurfaceOutput: void close()>();

        $r3 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.Map mOutputSurfaces>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    private void lambda$onInputSurface$1(androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        androidx.camera.core.SurfaceRequest r1;
        android.graphics.SurfaceTexture r2, $r4;
        android.view.Surface r3, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.camera.core.processing.OpenGlRenderer $r5;
        android.util.Size $r6, $r7;
        java.util.concurrent.Executor $r9;
        androidx.core.util.Consumer $r10;
        android.os.Handler $r11;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        $i0 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount>;

        $i1 = $i0 + 1;

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount> = $i1;

        $r4 = new android.graphics.SurfaceTexture;

        $r5 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: androidx.camera.core.processing.OpenGlRenderer mGlRenderer>;

        $i2 = virtualinvoke $r5.<androidx.camera.core.processing.OpenGlRenderer: int getTextureName()>();

        specialinvoke $r4.<android.graphics.SurfaceTexture: void <init>(int)>($i2);

        r2 = $r4;

        $r6 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()>();

        $i3 = virtualinvoke $r6.<android.util.Size: int getWidth()>();

        $r7 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()>();

        $i4 = virtualinvoke $r7.<android.util.Size: int getHeight()>();

        virtualinvoke r2.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i3, $i4);

        $r8 = new android.view.Surface;

        specialinvoke $r8.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r2);

        r3 = $r8;

        $r9 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: java.util.concurrent.Executor mGlExecutor>;

        $r10 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.core.processing.DefaultSurfaceProcessor,android.graphics.SurfaceTexture,android.view.Surface)>(r0, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.DefaultSurfaceProcessor: void lambda$onInputSurface$0(android.graphics.SurfaceTexture,android.view.Surface,androidx.camera.core.SurfaceRequest$Result)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$Result));

        virtualinvoke r1.<androidx.camera.core.SurfaceRequest: void provideSurface(android.view.Surface,java.util.concurrent.Executor,androidx.core.util.Consumer)>(r3, $r9, $r10);

        $r11 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: android.os.Handler mGlHandler>;

        virtualinvoke r2.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>(r0, $r11);

        return;
    }

    private void lambda$onInputSurface$0(android.graphics.SurfaceTexture, android.view.Surface, androidx.camera.core.SurfaceRequest$Result)
    {
        androidx.camera.core.processing.DefaultSurfaceProcessor r0;
        android.graphics.SurfaceTexture r1;
        android.view.Surface r2;
        androidx.camera.core.SurfaceRequest$Result r3;
        int $i0, $i1;

        r0 := @this: androidx.camera.core.processing.DefaultSurfaceProcessor;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: androidx.camera.core.SurfaceRequest$Result;

        virtualinvoke r1.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>(null);

        virtualinvoke r1.<android.graphics.SurfaceTexture: void release()>();

        virtualinvoke r2.<android.view.Surface: void release()>();

        $i0 = r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount>;

        $i1 = $i0 - 1;

        r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: int mInputSurfaceCount> = $i1;

        specialinvoke r0.<androidx.camera.core.processing.DefaultSurfaceProcessor: void checkReadyToRelease()>();

        return;
    }

