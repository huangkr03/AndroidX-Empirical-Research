androidx.benchmark.StackSamplingSimpleperf
<androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.StackSamplingSimpleperf INSTANCE>
<androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session>
<androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.PropOverride securityPerfHarden>
<androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath>
<androidx.benchmark.StackSamplingSimpleperf: boolean requiresLibraryOutputDir>
    private void <init>()
    {
        androidx.benchmark.StackSamplingSimpleperf r0;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        specialinvoke r0.<androidx.benchmark.Profiler: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public final java.lang.String getOutputRelativePath()
    {
        androidx.benchmark.StackSamplingSimpleperf r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        $r1 = <androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath>;

        return $r1;
    }

    public final void setOutputRelativePath(java.lang.String)
    {
        androidx.benchmark.StackSamplingSimpleperf r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        r1 := @parameter0: java.lang.String;

        <androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath> = r1;

        return;
    }

    public androidx.benchmark.Profiler$ResultFile start(java.lang.String)
    {
        androidx.benchmark.StackSamplingSimpleperf r0;
        java.lang.String r1, r7, r9, $r21, $r24, $r25, $r34, $r43, $r48, $r52, $r56, $r58, $r59, $r67;
        androidx.benchmark.simpleperf.ProfileSession r2, r3, r6, $r12, $r22;
        androidx.benchmark.simpleperf.RecordOptions r4, $r27, $r29, $r30, $r31, $r32;
        java.lang.Object r8, r66;
        java.util.Collection r10, $r53, r62;
        java.util.List r11, $r38, $r40;
        androidx.benchmark.PropOverride $r13;
        androidx.benchmark.Shell $r14, $r16, $r18, $r23, $r33;
        androidx.benchmark.Profiler$Companion $r20;
        androidx.benchmark.Arguments $r28;
        int $i0, $i1;
        java.lang.CharSequence $r35, $r36, $r37, $r50, $r51, $r54, $r55;
        boolean $z3, $z4, $z5, $z6, $z7, $z12, $z13;
        java.lang.Iterable $r39, $r61, $r64;
        java.util.ArrayList $r41;
        androidx.benchmark.Profiler$ResultFile $r42;
        java.lang.StringBuilder $r44, $r45, $r46, $r47;
        java.lang.IllegalStateException $r57;
        java.lang.String[] $r60;
        java.util.Iterator $r63, $r65;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "traceUniqueName");

        $r12 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session>;

        if $r12 != null goto label01;

        goto label02;

     label01:
        virtualinvoke $r12.<androidx.benchmark.simpleperf.ProfileSession: void stopRecording()>();

     label02:
        $r13 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.PropOverride securityPerfHarden>;

        virtualinvoke $r13.<androidx.benchmark.PropOverride: void forceValue()>();

        $r14 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        virtualinvoke $r14.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("setprop debug.perf_event_max_sample_rate 10000");

        $r16 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        virtualinvoke $r16.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("setprop debug.perf_cpu_time_max_percent 25");

        $r18 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        virtualinvoke $r18.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("setprop debug.perf_event_mlock_kb 32800");

        $r20 = <androidx.benchmark.Profiler: androidx.benchmark.Profiler$Companion Companion>;

        $r21 = virtualinvoke $r20.<androidx.benchmark.Profiler$Companion: java.lang.String traceName(java.lang.String,java.lang.String)>(r1, "stackSampling");

        <androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath> = $r21;

        $r22 = new androidx.benchmark.simpleperf.ProfileSession;

        specialinvoke $r22.<androidx.benchmark.simpleperf.ProfileSession: void <init>()>();

        r2 = $r22;

        r3 = r2;

        $r23 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r24 = virtualinvoke r3.<androidx.benchmark.simpleperf.ProfileSession: java.lang.String findSimpleperf()>();

        $r25 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r24, " api-prepare");

        virtualinvoke $r23.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r25);

        $r27 = new androidx.benchmark.simpleperf.RecordOptions;

        specialinvoke $r27.<androidx.benchmark.simpleperf.RecordOptions: void <init>()>();

        $r28 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $i0 = virtualinvoke $r28.<androidx.benchmark.Arguments: int getProfilerSampleFrequency$benchmark_common_release()>();

        $r29 = virtualinvoke $r27.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions setSampleFrequency(int)>($i0);

        $r30 = virtualinvoke $r29.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions recordDwarfCallGraph()>();

        $r31 = virtualinvoke $r30.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions traceOffCpu()>();

        $r32 = virtualinvoke $r31.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions setSampleCurrentThread()>();

        r4 = virtualinvoke $r32.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions setOutputFilename(java.lang.String)>("simpleperf.data");

        r6 = r3;

        $r33 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r34 = virtualinvoke $r33.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("simpleperf list hw");

        $r35 = (java.lang.CharSequence) $r34;

        $r36 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r35);

        r7 = virtualinvoke $r36.<java.lang.Object: java.lang.String toString()>();

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r7, "List of hardware events:", 0, 2, null);

        if $z3 != 0 goto label03;

        $r59 = "Check failed.";

        $r57 = new java.lang.IllegalStateException;

        $r58 = virtualinvoke $r59.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r57.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r58);

        throw $r57;

     label03:
        $r37 = (java.lang.CharSequence) r7;

        $r60 = newarray (java.lang.String)[1];

        $r60[0] = "\n";

        $r38 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r37, $r60, 0, 0, 6, null);

        $r39 = (java.lang.Iterable) $r38;

        $r40 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List drop(java.lang.Iterable,int)>($r39, 1);

        $r61 = (java.lang.Iterable) $r40;

        $r41 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r61, 10);

        specialinvoke $r41.<java.util.ArrayList: void <init>(int)>($i1);

        r62 = (java.util.Collection) $r41;

        $r63 = interfaceinvoke $r61.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r63.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        r8 = interfaceinvoke $r63.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) r8;

        r10 = r62;

        $r54 = (java.lang.CharSequence) r9;

        $r55 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r56);

        goto label04;

     label05:
        r11 = (java.util.List) r62;

        $r64 = (java.lang.Iterable) r11;

        $z5 = $r64 instanceof java.util.Collection;

        if $z5 == 0 goto label06;

        $r53 = (java.util.Collection) $r64;

        $z7 = interfaceinvoke $r53.<java.util.Collection: boolean isEmpty()>();

        if $z7 == 0 goto label06;

        $z12 = 0;

        goto label09;

     label06:
        $r65 = interfaceinvoke $r64.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z13 = interfaceinvoke $r65.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label08;

        r66 = interfaceinvoke $r65.<java.util.Iterator: java.lang.Object next()>();

        $r67 = (java.lang.String) r66;

        $r50 = (java.lang.CharSequence) $r67;

        $r51 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.Object: java.lang.String toString()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r52, "cpu-cycles");

        if $z6 == 0 goto label07;

        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        if $z12 != 0 goto label10;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cpu-cycles not found - using cpu-clock (events = ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r48);

        virtualinvoke r4.<androidx.benchmark.simpleperf.RecordOptions: androidx.benchmark.simpleperf.RecordOptions setEvent(java.lang.String)>("cpu-clock");

     label10:
        virtualinvoke r6.<androidx.benchmark.simpleperf.ProfileSession: void startRecording(androidx.benchmark.simpleperf.RecordOptions)>(r4);

        <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session> = r2;

        $r42 = new androidx.benchmark.Profiler$ResultFile;

        $r43 = <androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r43);

        specialinvoke $r42.<androidx.benchmark.Profiler$ResultFile: void <init>(java.lang.String,java.lang.String)>("Stack Sampling Trace", $r43);

        return $r42;
    }

    public void stop()
    {
        androidx.benchmark.StackSamplingSimpleperf r0;
        androidx.benchmark.simpleperf.ProfileSession $r1;
        java.lang.String $r2;
        androidx.benchmark.Outputs $r3;
        androidx.benchmark.StackSamplingSimpleperf$stop$1 $r4;
        kotlin.jvm.functions.Function1 $r5;
        androidx.benchmark.PropOverride $r7;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        $r1 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        virtualinvoke $r1.<androidx.benchmark.simpleperf.ProfileSession: void stopRecording()>();

        $r3 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r2 = <androidx.benchmark.StackSamplingSimpleperf: java.lang.String outputRelativePath>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r4 = <androidx.benchmark.StackSamplingSimpleperf$stop$1: androidx.benchmark.StackSamplingSimpleperf$stop$1 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        staticinvoke <androidx.benchmark.Outputs: java.lang.String writeFile$default(androidx.benchmark.Outputs,java.lang.String,java.lang.String,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, $r2, "simpleperf_trace", 0, $r5, 4, null);

        <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session> = null;

        $r7 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.PropOverride securityPerfHarden>;

        virtualinvoke $r7.<androidx.benchmark.PropOverride: void resetIfOverridden()>();

        return;
    }

    public boolean getRequiresLibraryOutputDir()
    {
        androidx.benchmark.StackSamplingSimpleperf r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf;

        $z0 = <androidx.benchmark.StackSamplingSimpleperf: boolean requiresLibraryOutputDir>;

        return $z0;
    }

    public static final androidx.benchmark.simpleperf.ProfileSession access$getSession$p()
    {
        androidx.benchmark.simpleperf.ProfileSession $r0;

        $r0 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession session>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.StackSamplingSimpleperf $r0;
        androidx.benchmark.PropOverride $r1;

        $r0 = new androidx.benchmark.StackSamplingSimpleperf;

        specialinvoke $r0.<androidx.benchmark.StackSamplingSimpleperf: void <init>()>();

        <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.StackSamplingSimpleperf INSTANCE> = $r0;

        $r1 = new androidx.benchmark.PropOverride;

        specialinvoke $r1.<androidx.benchmark.PropOverride: void <init>(java.lang.String,java.lang.String)>("security.perf_harden", "0");

        <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.PropOverride securityPerfHarden> = $r1;

        return;
    }

androidx.benchmark.StackSamplingSimpleperf$stop$1
<androidx.benchmark.StackSamplingSimpleperf$stop$1: androidx.benchmark.StackSamplingSimpleperf$stop$1 INSTANCE>
    void <init>()
    {
        androidx.benchmark.StackSamplingSimpleperf$stop$1 r0;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf$stop$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.io.File)
    {
        androidx.benchmark.StackSamplingSimpleperf$stop$1 r0;
        java.io.File r1;
        androidx.benchmark.simpleperf.ProfileSession $r2;
        java.lang.String $r3;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf$stop$1;

        r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = staticinvoke <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.simpleperf.ProfileSession access$getSession$p()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r2.<androidx.benchmark.simpleperf.ProfileSession: void convertSimpleperfOutputToProto(java.lang.String,java.lang.String)>("simpleperf.data", $r3);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.StackSamplingSimpleperf$stop$1 r0;
        java.lang.Object r1;
        java.io.File $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.benchmark.StackSamplingSimpleperf$stop$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.io.File) r1;

        virtualinvoke r0.<androidx.benchmark.StackSamplingSimpleperf$stop$1: void invoke(java.io.File)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.StackSamplingSimpleperf$stop$1 $r0;

        $r0 = new androidx.benchmark.StackSamplingSimpleperf$stop$1;

        specialinvoke $r0.<androidx.benchmark.StackSamplingSimpleperf$stop$1: void <init>()>();

        <androidx.benchmark.StackSamplingSimpleperf$stop$1: androidx.benchmark.StackSamplingSimpleperf$stop$1 INSTANCE> = $r0;

        return;
    }

