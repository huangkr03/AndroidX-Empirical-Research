androidx.compose.animation.core.VectorizedKeyframesSpec
<androidx.compose.animation.core.VectorizedKeyframesSpec: java.util.Map keyframes>
<androidx.compose.animation.core.VectorizedKeyframesSpec: int durationMillis>
<androidx.compose.animation.core.VectorizedKeyframesSpec: int delayMillis>
<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector valueVector>
<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector velocityVector>
<androidx.compose.animation.core.VectorizedKeyframesSpec: int $stable>
    public void <init>(java.util.Map, int, int)
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        java.util.Map r1;
        int i0, i1;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyframes");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: java.util.Map keyframes> = r1;

        r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int durationMillis> = i0;

        r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int delayMillis> = i1;

        return;
    }

    public void <init>(java.util.Map, int, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        java.util.Map r1;
        int i0, i1, $i2, i3;
        kotlin.jvm.internal.DefaultConstructorMarker r2;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = i1 & 4;

        if $i2 == 0 goto label1;

        i3 = 0;

     label1:
        specialinvoke r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: void <init>(java.util.Map,int,int)>(r1, i0, i3);

        return;
    }

    public int getDurationMillis()
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        int $i0;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        $i0 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int durationMillis>;

        return $i0;
    }

    public int getDelayMillis()
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        int $i0;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        $i0 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int delayMillis>;

        return $i0;
    }

    public androidx.compose.animation.core.AnimationVector getValueFromNanos(long, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        long l0, l1, $l3;
        androidx.compose.animation.core.AnimationVector r1, r2, r3, $r22, r23, r24, $r28, $r29;
        int i2, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        kotlin.Pair r4, $r20;
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r5;
        java.util.Map $r6, $r8, $r17;
        java.lang.Integer $r7, $r18;
        boolean $z0, $z1;
        java.util.Set $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6;
        java.lang.Object $r10, $r11, $r13, $r14, $r15, $r16, $r19, $r21;
        java.lang.Number $r12;
        androidx.compose.animation.core.Easing r25;
        java.util.Iterator r26;
        java.util.Map$Entry r27;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        l1 = l0 / 1000000L;

        $r5 = (androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec) r0;

        $l3 = staticinvoke <androidx.compose.animation.core.VectorizedAnimationSpecKt: long access$clampPlayTime(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec,long)>($r5, l1);

        i2 = (int) $l3;

        $r6 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: java.util.Map keyframes>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label01;

        $r17 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: java.util.Map keyframes>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r19 = staticinvoke <kotlin.collections.MapsKt: java.lang.Object getValue(java.util.Map,java.lang.Object)>($r17, $r18);

        $r20 = (kotlin.Pair) $r19;

        $r21 = virtualinvoke $r20.<kotlin.Pair: java.lang.Object getFirst()>();

        $r22 = (androidx.compose.animation.core.AnimationVector) $r21;

        return $r22;

     label01:
        $i4 = virtualinvoke r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int getDurationMillis()>();

        if i2 < $i4 goto label02;

        return r2;

     label02:
        if i2 > 0 goto label03;

        return r1;

     label03:
        i7 = 0;

        r23 = r1;

        r24 = r2;

        i8 = virtualinvoke r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: int getDurationMillis()>();

        r25 = staticinvoke <androidx.compose.animation.core.EasingKt: androidx.compose.animation.core.Easing getLinearEasing()>();

        $r8 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: java.util.Map keyframes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r26 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r10 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Number) $r11;

        i9 = virtualinvoke $r12.<java.lang.Number: int intValue()>();

        $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (kotlin.Pair) $r13;

        if i2 <= i9 goto label05;

        if i9 < i7 goto label05;

        i7 = i9;

        $r15 = virtualinvoke r4.<kotlin.Pair: java.lang.Object getFirst()>();

        r23 = (androidx.compose.animation.core.AnimationVector) $r15;

        $r16 = virtualinvoke r4.<kotlin.Pair: java.lang.Object getSecond()>();

        r25 = (androidx.compose.animation.core.Easing) $r16;

        goto label04;

     label05:
        if i2 >= i9 goto label04;

        if i9 > i8 goto label04;

        i8 = i9;

        $r14 = virtualinvoke r4.<kotlin.Pair: java.lang.Object getFirst()>();

        r24 = (androidx.compose.animation.core.AnimationVector) $r14;

        goto label04;

     label06:
        $i5 = i2 - i7;

        $f1 = (float) $i5;

        $i6 = i8 - i7;

        $f0 = (float) $i6;

        $f2 = $f1 / $f0;

        f6 = interfaceinvoke r25.<androidx.compose.animation.core.Easing: float transform(float)>($f2);

        specialinvoke r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: void init(androidx.compose.animation.core.AnimationVector)>(r1);

        i10 = 0;

        i11 = virtualinvoke r23.<androidx.compose.animation.core.AnimationVector: int getSize$animation_core_release()>();

     label07:
        if i10 >= i11 goto label09;

        $r28 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector valueVector>;

        if $r28 != null goto label08;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("valueVector");

        $r28 = null;

     label08:
        $f3 = virtualinvoke r23.<androidx.compose.animation.core.AnimationVector: float get$animation_core_release(int)>(i10);

        $f4 = virtualinvoke r24.<androidx.compose.animation.core.AnimationVector: float get$animation_core_release(int)>(i10);

        $f5 = staticinvoke <androidx.compose.animation.core.VectorConvertersKt: float lerp(float,float,float)>($f3, $f4, f6);

        virtualinvoke $r28.<androidx.compose.animation.core.AnimationVector: void set$animation_core_release(int,float)>(i10, $f5);

        i10 = i10 + 1;

        goto label07;

     label09:
        $r29 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector valueVector>;

        if $r29 != null goto label10;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("valueVector");

        $r29 = null;

     label10:
        return $r29;
    }

    private final void init(androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        androidx.compose.animation.core.AnimationVector r1, $r2, $r3, $r4;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        r1 := @parameter0: androidx.compose.animation.core.AnimationVector;

        $r2 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector valueVector>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <androidx.compose.animation.core.AnimationVectorsKt: androidx.compose.animation.core.AnimationVector newInstance(androidx.compose.animation.core.AnimationVector)>(r1);

        r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector valueVector> = $r3;

        $r4 = staticinvoke <androidx.compose.animation.core.AnimationVectorsKt: androidx.compose.animation.core.AnimationVector newInstance(androidx.compose.animation.core.AnimationVector)>(r1);

        r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector velocityVector> = $r4;

     label1:
        return;
    }

    public androidx.compose.animation.core.AnimationVector getVelocityFromNanos(long, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedKeyframesSpec r0;
        long l0, l1, l2, $l5;
        androidx.compose.animation.core.AnimationVector r1, r2, r3, r4, r5, $r9, $r10;
        int i3, i6;
        androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec $r6;
        byte $b4;
        androidx.compose.animation.core.VectorizedAnimationSpec $r7, $r8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: androidx.compose.animation.core.VectorizedKeyframesSpec;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        l1 = l0 / 1000000L;

        $r6 = (androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec) r0;

        l2 = staticinvoke <androidx.compose.animation.core.VectorizedAnimationSpecKt: long access$clampPlayTime(androidx.compose.animation.core.VectorizedDurationBasedAnimationSpec,long)>($r6, l1);

        $b4 = l2 cmp 0L;

        if $b4 > 0 goto label1;

        return r3;

     label1:
        $r7 = (androidx.compose.animation.core.VectorizedAnimationSpec) r0;

        $l5 = l2 - 1L;

        r4 = staticinvoke <androidx.compose.animation.core.VectorizedAnimationSpecKt: androidx.compose.animation.core.AnimationVector getValueFromMillis(androidx.compose.animation.core.VectorizedAnimationSpec,long,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>($r7, $l5, r1, r2, r3);

        $r8 = (androidx.compose.animation.core.VectorizedAnimationSpec) r0;

        r5 = staticinvoke <androidx.compose.animation.core.VectorizedAnimationSpecKt: androidx.compose.animation.core.AnimationVector getValueFromMillis(androidx.compose.animation.core.VectorizedAnimationSpec,long,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector,androidx.compose.animation.core.AnimationVector)>($r8, l2, r1, r2, r3);

        specialinvoke r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: void init(androidx.compose.animation.core.AnimationVector)>(r1);

        i6 = 0;

        i3 = virtualinvoke r4.<androidx.compose.animation.core.AnimationVector: int getSize$animation_core_release()>();

     label2:
        if i6 >= i3 goto label4;

        $r9 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector velocityVector>;

        if $r9 != null goto label3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("velocityVector");

        $r9 = null;

     label3:
        $f0 = virtualinvoke r4.<androidx.compose.animation.core.AnimationVector: float get$animation_core_release(int)>(i6);

        $f1 = virtualinvoke r5.<androidx.compose.animation.core.AnimationVector: float get$animation_core_release(int)>(i6);

        $f2 = $f0 - $f1;

        $f3 = $f2 * 1000.0F;

        virtualinvoke $r9.<androidx.compose.animation.core.AnimationVector: void set$animation_core_release(int,float)>(i6, $f3);

        i6 = i6 + 1;

        goto label2;

     label4:
        $r10 = r0.<androidx.compose.animation.core.VectorizedKeyframesSpec: androidx.compose.animation.core.AnimationVector velocityVector>;

        if $r10 != null goto label5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("velocityVector");

        $r10 = null;

     label5:
        return $r10;
    }

    static void <clinit>()
    {
        <androidx.compose.animation.core.VectorizedKeyframesSpec: int $stable> = 8;

        return;
    }

