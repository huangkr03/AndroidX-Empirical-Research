androidx.room.compiler.processing.ksp.ReferenceStack
<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque _queue>
    public void <init>()
    {
        androidx.room.compiler.processing.ksp.ReferenceStack r0;
        kotlin.collections.ArrayDeque $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.ReferenceStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new kotlin.collections.ArrayDeque;

        specialinvoke $r1.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque _queue> = $r1;

        return;
    }

    public final kotlin.collections.ArrayDeque get_queue()
    {
        androidx.room.compiler.processing.ksp.ReferenceStack r0;
        kotlin.collections.ArrayDeque $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.ReferenceStack;

        $r1 = r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque _queue>;

        return $r1;
    }

    public static void get_queue$annotations()
    {
        return;
    }

    public final boolean contains(com.google.devtools.ksp.symbol.KSType)
    {
        androidx.room.compiler.processing.ksp.ReferenceStack r0;
        com.google.devtools.ksp.symbol.KSType r1;
        kotlin.collections.ArrayDeque $r2;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.ReferenceStack;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ksType");

        $r2 = r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque _queue>;

        $z0 = virtualinvoke $r2.<kotlin.collections.ArrayDeque: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public final java.lang.Object withReference(com.google.devtools.ksp.symbol.KSType, kotlin.jvm.functions.Function0)
    {
        androidx.room.compiler.processing.ksp.ReferenceStack r0;
        com.google.devtools.ksp.symbol.KSType r1;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        kotlin.collections.ArrayDeque $r5, $r6, $r9;

        r0 := @this: androidx.room.compiler.processing.ksp.ReferenceStack;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ksType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

     label1:
        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque get_queue()>();

        virtualinvoke $r5.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>(r1);

        r3 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque get_queue()>();

        virtualinvoke $r6.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        $r9 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.ReferenceStack: kotlin.collections.ArrayDeque get_queue()>();

        virtualinvoke $r9.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r4;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

