androidx.slice.widget.SliceViewUtil
    public static int getColorAccent(android.content.Context)
    {
        android.content.Context r0;
        int $i0;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <androidx.slice.widget.SliceViewUtil: int getColorAttr(android.content.Context,int)>(r0, 16843829);

        return $i0;
    }

    public static int getColorError(android.content.Context)
    {
        android.content.Context r0;
        int $i0;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <androidx.slice.widget.SliceViewUtil: int getColorAttr(android.content.Context,int)>(r0, 16844099);

        return $i0;
    }

    public static int getDefaultColor(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;
        android.content.res.ColorStateList r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.support.v4.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>(r0, i0);

        $i1 = virtualinvoke r1.<android.content.res.ColorStateList: int getDefaultColor()>();

        return $i1;
    }

    public static int getDisabled(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.slice.widget.SliceViewUtil: int applyAlphaAttr(android.content.Context,int,int)>(r0, 16842803, i0);

        return $i1;
    }

    public static int applyAlphaAttr(android.content.Context, int, int)
    {
        android.content.Context r0;
        int i0, i1, $i2;
        android.content.res.TypedArray r1;
        float f0;
        int[] $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2);

        f0 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.0F);

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        $i2 = staticinvoke <androidx.slice.widget.SliceViewUtil: int applyAlpha(float,int)>(f0, i1);

        return $i2;
    }

    public static int applyAlpha(float, int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, f1, f2;

        f1 := @parameter0: float;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        $f0 = (float) $i1;

        f2 = f1 * $f0;

        $i2 = (int) f2;

        $i3 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        $i4 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        $i5 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        $i6 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($i2, $i3, $i4, $i5);

        return $i6;
    }

    public static int getColorAttr(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, i1;
        android.content.res.TypedArray r1;
        int[] $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2);

        i1 = virtualinvoke r1.<android.content.res.TypedArray: int getColor(int,int)>(0, 0);

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        return i1;
    }

    public static int getThemeAttr(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, i1;
        android.content.res.TypedArray r1;
        int[] $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2);

        i1 = virtualinvoke r1.<android.content.res.TypedArray: int getResourceId(int,int)>(0, 0);

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        return i1;
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable r2;
        int[] $r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r3 = newarray (int)[1];

        $r3[0] = i0;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r3);

        r2 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        return r2;
    }

    public static android.support.v4.graphics.drawable.IconCompat createIconFromDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Bitmap r1, $r7;
        android.graphics.Canvas r2, $r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap$Config $r3;
        android.support.v4.graphics.drawable.IconCompat $r5, $r8;
        android.graphics.drawable.BitmapDrawable $r6;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = r0 instanceof android.graphics.drawable.BitmapDrawable;

        if $z0 == 0 goto label1;

        $r6 = (android.graphics.drawable.BitmapDrawable) r0;

        $r7 = virtualinvoke $r6.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        $r8 = staticinvoke <android.support.v4.graphics.drawable.IconCompat: android.support.v4.graphics.drawable.IconCompat createWithBitmap(android.graphics.Bitmap)>($r7);

        return $r8;

     label1:
        $i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r3);

        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        r2 = $r4;

        $i2 = virtualinvoke r2.<android.graphics.Canvas: int getWidth()>();

        $i3 = virtualinvoke r2.<android.graphics.Canvas: int getHeight()>();

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i2, $i3);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r2);

        $r5 = staticinvoke <android.support.v4.graphics.drawable.IconCompat: android.support.v4.graphics.drawable.IconCompat createWithBitmap(android.graphics.Bitmap)>(r1);

        return $r5;
    }

    public static void createCircledIcon(android.content.Context, int, android.support.v4.graphics.drawable.IconCompat, boolean, android.view.ViewGroup)
    {
        android.content.Context r0;
        int i0;
        android.support.v4.graphics.drawable.IconCompat r1;
        boolean z0;
        android.view.ViewGroup r2;
        android.widget.ImageView r3, r15;
        android.widget.FrameLayout$LayoutParams r4;
        android.graphics.Bitmap r5, $r12;
        android.graphics.Canvas r6, r16;
        android.graphics.drawable.Drawable $r8;
        android.view.ViewGroup$LayoutParams $r9;
        android.graphics.Bitmap$Config $r10;
        android.widget.ImageView$ScaleType $r14;
        android.view.View r17;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.support.v4.graphics.drawable.IconCompat;

        z0 := @parameter3: boolean;

        r2 := @parameter4: android.view.ViewGroup;

        r15 = new android.widget.ImageView;

        specialinvoke r15.<android.widget.ImageView: void <init>(android.content.Context)>(r0);

        r3 = r15;

        $r8 = virtualinvoke r1.<android.support.v4.graphics.drawable.IconCompat: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>(r0);

        virtualinvoke r3.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>($r8);

        if z0 == 0 goto label1;

        $r14 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_CROP>;

        goto label2;

     label1:
        $r14 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_INSIDE>;

     label2:
        virtualinvoke r3.<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>($r14);

        r17 = (android.view.View) r3;

        virtualinvoke r2.<android.view.ViewGroup: void addView(android.view.View)>(r17);

        $r9 = virtualinvoke r3.<android.widget.ImageView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r4 = (android.widget.FrameLayout$LayoutParams) $r9;

        if z0 == 0 goto label3;

        $r10 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i0, $r10);

        r16 = new android.graphics.Canvas;

        specialinvoke r16.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r5);

        r6 = r16;

        virtualinvoke r3.<android.widget.ImageView: void layout(int,int,int,int)>(0, 0, i0, i0);

        virtualinvoke r3.<android.widget.ImageView: void draw(android.graphics.Canvas)>(r6);

        $r12 = staticinvoke <androidx.slice.widget.SliceViewUtil: android.graphics.Bitmap getCircularBitmap(android.graphics.Bitmap)>(r5);

        virtualinvoke r3.<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>($r12);

        goto label4;

     label3:
        virtualinvoke r3.<android.widget.ImageView: void setColorFilter(int)>(-1);

     label4:
        r4.<android.widget.FrameLayout$LayoutParams: int width> = i0;

        r4.<android.widget.FrameLayout$LayoutParams: int height> = i0;

        r4.<android.widget.FrameLayout$LayoutParams: int gravity> = 17;

        return;
    }

    public static android.graphics.Bitmap getCircularBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        android.graphics.Canvas r2, $r6;
        android.graphics.Paint r3, $r7;
        android.graphics.Rect r4, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Bitmap$Config $r5;
        float $f0, $f1, $f2;
        android.graphics.PorterDuffXfermode $r9;
        android.graphics.PorterDuff$Mode $r10;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r5);

        $r6 = new android.graphics.Canvas;

        specialinvoke $r6.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        r2 = $r6;

        $r7 = new android.graphics.Paint;

        specialinvoke $r7.<android.graphics.Paint: void <init>()>();

        r3 = $r7;

        $r8 = new android.graphics.Rect;

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i2, $i3);

        r4 = $r8;

        virtualinvoke r3.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        virtualinvoke r2.<android.graphics.Canvas: void drawARGB(int,int,int,int)>(0, 0, 0, 0);

        $i4 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i5 = $i4 / 2;

        $f0 = (float) $i5;

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i7 = $i6 / 2;

        $f1 = (float) $i7;

        $i8 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i9 = $i8 / 2;

        $f2 = (float) $i9;

        virtualinvoke r2.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, r3);

        $r9 = new android.graphics.PorterDuffXfermode;

        $r10 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        specialinvoke $r9.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r10);

        virtualinvoke r3.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>($r9);

        virtualinvoke r2.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r0, r4, r4, r3);

        return r1;
    }

    public static java.lang.CharSequence getTimestampString(android.content.Context, long)
    {
        android.content.Context r0;
        long l0, l1, $l3;
        byte $b2;
        java.util.Calendar $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $z0 = staticinvoke <android.text.format.DateUtils: boolean isToday(long)>(l0);

        if $z0 == 0 goto label2;

     label1:
        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l3 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        $r2 = staticinvoke <android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)>(l0, $l3, 60000L, 262144);

        return $r2;

     label2:
        $r3 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>(r0, l0, 8);

        return $r3;
    }

    public static int resolveLayoutDirection(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        if i0 == 1 goto label1;

        if i0 != 0 goto label2;

     label1:
        return i0;

     label2:
        return -1;
    }

    public static void tintIndeterminateProgressBar(android.content.Context, android.widget.ProgressBar)
    {
        android.content.Context r0;
        android.widget.ProgressBar r1;
        int i0, $i1;
        android.graphics.drawable.Drawable r2, $r3;
        android.graphics.PorterDuff$Mode $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.widget.ProgressBar;

        $i1 = <androidx.slice.view.R$attr: int colorControlHighlight>;

        i0 = staticinvoke <androidx.slice.widget.SliceViewUtil: int getColorAttr(android.content.Context,int)>(r0, $i1);

        $r3 = virtualinvoke r1.<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>();

        r2 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>($r3);

        if r2 == null goto label1;

        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>(i0, $r4);

        virtualinvoke r1.<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>(r2);

     label1:
        return;
    }

    private void <init>()
    {
        androidx.slice.widget.SliceViewUtil r0;

        r0 := @this: androidx.slice.widget.SliceViewUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

