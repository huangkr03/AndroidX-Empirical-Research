androidx.appsearch.app.SearchSpec
<androidx.appsearch.app.SearchSpec: java.lang.String PROJECTION_SCHEMA_TYPE_WILDCARD>
<androidx.appsearch.app.SearchSpec: java.lang.String TERM_MATCH_TYPE_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String SCHEMA_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String NAMESPACE_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String PACKAGE_NAME_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String NUM_PER_PAGE_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String RANKING_STRATEGY_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String ORDER_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String SNIPPET_COUNT_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String SNIPPET_COUNT_PER_PROPERTY_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String MAX_SNIPPET_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String PROJECTION_TYPE_PROPERTY_PATHS_FIELD>
<androidx.appsearch.app.SearchSpec: java.lang.String RESULT_GROUPING_TYPE_FLAGS>
<androidx.appsearch.app.SearchSpec: java.lang.String RESULT_GROUPING_LIMIT>
<androidx.appsearch.app.SearchSpec: int DEFAULT_NUM_PER_PAGE>
<androidx.appsearch.app.SearchSpec: int MAX_NUM_PER_PAGE>
<androidx.appsearch.app.SearchSpec: int MAX_SNIPPET_COUNT>
<androidx.appsearch.app.SearchSpec: int MAX_SNIPPET_PER_PROPERTY_COUNT>
<androidx.appsearch.app.SearchSpec: int MAX_SNIPPET_SIZE_LIMIT>
<androidx.appsearch.app.SearchSpec: int TERM_MATCH_EXACT_ONLY>
<androidx.appsearch.app.SearchSpec: int TERM_MATCH_PREFIX>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_NONE>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_DOCUMENT_SCORE>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_CREATION_TIMESTAMP>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_RELEVANCE_SCORE>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_USAGE_COUNT>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_USAGE_LAST_USED_TIMESTAMP>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_SYSTEM_USAGE_COUNT>
<androidx.appsearch.app.SearchSpec: int RANKING_STRATEGY_SYSTEM_USAGE_LAST_USED_TIMESTAMP>
<androidx.appsearch.app.SearchSpec: int ORDER_DESCENDING>
<androidx.appsearch.app.SearchSpec: int ORDER_ASCENDING>
<androidx.appsearch.app.SearchSpec: int GROUPING_TYPE_PER_PACKAGE>
<androidx.appsearch.app.SearchSpec: int GROUPING_TYPE_PER_NAMESPACE>
<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>
    public void <init>(android.os.Bundle)
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle r1;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle> = r1;

        return;
    }

    public android.os.Bundle getBundle()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        return $r1;
    }

    public int getTermMatch()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("termMatchType", -1);

        return $i0;
    }

    public java.util.List getFilterSchemas()
    {
        androidx.appsearch.app.SearchSpec r0;
        java.util.ArrayList r1;
        android.os.Bundle $r2;
        java.util.List $r3, $r4;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r2 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        r1 = virtualinvoke $r2.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("schema");

        if r1 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r3;
    }

    public java.util.List getFilterNamespaces()
    {
        androidx.appsearch.app.SearchSpec r0;
        java.util.ArrayList r1;
        android.os.Bundle $r2;
        java.util.List $r3, $r4;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r2 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        r1 = virtualinvoke $r2.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("namespace");

        if r1 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r3;
    }

    public java.util.List getFilterPackageNames()
    {
        androidx.appsearch.app.SearchSpec r0;
        java.util.ArrayList r1;
        android.os.Bundle $r2;
        java.util.List $r3, $r4;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r2 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        r1 = virtualinvoke $r2.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("packageName");

        if r1 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r3;
    }

    public int getResultCountPerPage()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("numPerPage", 10);

        return $i0;
    }

    public int getRankingStrategy()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("rankingStrategy");

        return $i0;
    }

    public int getOrder()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("order");

        return $i0;
    }

    public int getSnippetCount()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("snippetCount");

        return $i0;
    }

    public int getSnippetCountPerProperty()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("snippetCountPerProperty");

        return $i0;
    }

    public int getMaxSnippetSize()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("maxSnippet");

        return $i0;
    }

    public java.util.Map getProjections()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle r1, $r6, $r7;
        java.util.Set r2;
        androidx.collection.ArrayMap r3, $r9;
        java.util.Iterator r4;
        java.lang.String r5;
        java.lang.Object $r8, $r10, $r12;
        int $i0;
        boolean $z0;
        java.util.ArrayList $r11;
        java.util.List $r13;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r6 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $r7 = virtualinvoke $r6.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("projectionTypeFieldMasks");

        $r8 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        r1 = (android.os.Bundle) $r8;

        r2 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        $r9 = new androidx.collection.ArrayMap;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        specialinvoke $r9.<androidx.collection.ArrayMap: void <init>(int)>($i0);

        r3 = $r9;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        $r11 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>(r5);

        $r12 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        $r13 = (java.util.List) $r12;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r13);

        goto label1;

     label2:
        return r3;
    }

    public java.util.Map getProjectionPaths()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle r1, $r10;
        java.util.Set r2;
        androidx.collection.ArrayMap r3, $r11;
        java.util.Iterator r4, r8;
        java.lang.String r5, r9;
        java.util.ArrayList r6, r7, $r13;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.Object $r12, $r15;
        androidx.appsearch.app.PropertyPath $r16;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r10 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        r1 = virtualinvoke $r10.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("projectionTypeFieldMasks");

        r2 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        $r11 = new androidx.collection.ArrayMap;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        specialinvoke $r11.<androidx.collection.ArrayMap: void <init>(int)>($i0);

        r3 = $r11;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

        r6 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>(r5);

        $r13 = new java.util.ArrayList;

        $i1 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i1);

        r7 = $r13;

        r8 = virtualinvoke r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r15;

        $r16 = new androidx.appsearch.app.PropertyPath;

        specialinvoke $r16.<androidx.appsearch.app.PropertyPath: void <init>(java.lang.String)>(r9);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label2;

     label3:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r7);

        goto label1;

     label4:
        return r3;
    }

    public int getResultGroupingTypeFlags()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("resultGroupingTypeFlags");

        return $i0;
    }

    public int getResultGroupingLimit()
    {
        androidx.appsearch.app.SearchSpec r0;
        android.os.Bundle $r1;
        int $i0;

        r0 := @this: androidx.appsearch.app.SearchSpec;

        $r1 = r0.<androidx.appsearch.app.SearchSpec: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("resultGroupingLimit", 2147483647);

        return $i0;
    }

androidx.appsearch.app.SearchSpec$Builder
<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas>
<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces>
<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames>
<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks>
<androidx.appsearch.app.SearchSpec$Builder: int mResultCountPerPage>
<androidx.appsearch.app.SearchSpec$Builder: int mTermMatchType>
<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCount>
<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCountPerProperty>
<androidx.appsearch.app.SearchSpec$Builder: int mMaxSnippetSize>
<androidx.appsearch.app.SearchSpec$Builder: int mRankingStrategy>
<androidx.appsearch.app.SearchSpec$Builder: int mOrder>
<androidx.appsearch.app.SearchSpec$Builder: int mGroupingTypeFlags>
<androidx.appsearch.app.SearchSpec$Builder: int mGroupingLimit>
<androidx.appsearch.app.SearchSpec$Builder: boolean mBuilt>
    public void <init>()
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.util.ArrayList $r1, $r2, $r3;
        android.os.Bundle $r4;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames> = $r3;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks> = $r4;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mResultCountPerPage> = 10;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mTermMatchType> = 2;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCount> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCountPerProperty> = 10000;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mMaxSnippetSize> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mRankingStrategy> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mOrder> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingTypeFlags> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingLimit> = 0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: boolean mBuilt> = 0;

        return;
    }

    public androidx.appsearch.app.SearchSpec$Builder setTermMatch(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 1, 2, "Term match type");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mTermMatchType> = i0;

        return r0;
    }

    public transient androidx.appsearch.app.SearchSpec$Builder addFilterSchemas(java.lang.String[])
    {
        androidx.appsearch.app.SearchSpec$Builder r0, $r4;
        java.lang.String[] r1;
        java.util.List $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addFilterSchemas(java.util.Collection)>($r3);

        return $r4;
    }

    public androidx.appsearch.app.SearchSpec$Builder addFilterSchemas(java.util.Collection)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.util.Collection r1;
        java.util.ArrayList $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder addFilterDocumentClasses(java.util.Collection) throws androidx.appsearch.exceptions.AppSearchException
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r8;
        androidx.appsearch.app.DocumentClassFactoryRegistry r3;
        java.util.Iterator r4;
        java.lang.Class r5;
        androidx.appsearch.app.DocumentClassFactory r6;
        int $i0;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.String $r11;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r8;

        r3 = staticinvoke <androidx.appsearch.app.DocumentClassFactoryRegistry: androidx.appsearch.app.DocumentClassFactoryRegistry getInstance()>();

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r10;

        r6 = virtualinvoke r3.<androidx.appsearch.app.DocumentClassFactoryRegistry: androidx.appsearch.app.DocumentClassFactory getOrCreateFactory(java.lang.Class)>(r5);

        $r11 = interfaceinvoke r6.<androidx.appsearch.app.DocumentClassFactory: java.lang.String getSchemaName()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addFilterSchemas(java.util.Collection)>(r2);

        return r0;
    }

    public transient androidx.appsearch.app.SearchSpec$Builder addFilterDocumentClasses(java.lang.Class[]) throws androidx.appsearch.exceptions.AppSearchException
    {
        androidx.appsearch.app.SearchSpec$Builder r0, $r4;
        java.lang.Class[] r1;
        java.util.List $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.Class[];

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addFilterDocumentClasses(java.util.Collection)>($r3);

        return $r4;
    }

    public transient androidx.appsearch.app.SearchSpec$Builder addFilterNamespaces(java.lang.String[])
    {
        androidx.appsearch.app.SearchSpec$Builder r0, $r4;
        java.lang.String[] r1;
        java.util.List $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addFilterNamespaces(java.util.Collection)>($r3);

        return $r4;
    }

    public androidx.appsearch.app.SearchSpec$Builder addFilterNamespaces(java.util.Collection)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.util.Collection r1;
        java.util.ArrayList $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public transient androidx.appsearch.app.SearchSpec$Builder addFilterPackageNames(java.lang.String[])
    {
        androidx.appsearch.app.SearchSpec$Builder r0, $r4;
        java.lang.String[] r1;
        java.util.List $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addFilterPackageNames(java.util.Collection)>($r3);

        return $r4;
    }

    public androidx.appsearch.app.SearchSpec$Builder addFilterPackageNames(java.util.Collection)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.util.Collection r1;
        java.util.ArrayList $r3;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r3 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setResultCountPerPage(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 10000, "resultCountPerPage");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mResultCountPerPage> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setRankingStrategy(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 7, "Result ranking strategy");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mRankingStrategy> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setOrder(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 1, "Result ranking order");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mOrder> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setSnippetCount(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 10000, "snippetCount");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCount> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setSnippetCountPerProperty(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 10000, "snippetCountPerProperty");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCountPerProperty> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder setMaxSnippetSize(int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 10000, "maxSnippetSize");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mMaxSnippetSize> = i0;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder addProjection(java.lang.String, java.util.Collection)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        java.lang.String r1, r5;
        java.util.Collection r2;
        java.util.ArrayList r3, $r8;
        java.util.Iterator r4;
        int $i0;
        boolean $z0;
        android.os.Bundle $r9;
        java.lang.Object $r10;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = $r8;

        r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        $r9 = r0.<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks>;

        virtualinvoke $r9.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>(r1, r3);

        return r0;
    }

    public androidx.appsearch.app.SearchSpec$Builder addProjectionPaths(java.lang.String, java.util.Collection)
    {
        androidx.appsearch.app.SearchSpec$Builder r0, $r9;
        java.lang.String r1, $r11;
        java.util.Collection r2;
        java.util.ArrayList r3, $r8;
        java.util.Iterator r4;
        androidx.appsearch.app.PropertyPath r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r10;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Collection;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = $r8;

        r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.appsearch.app.PropertyPath) $r10;

        $r11 = virtualinvoke r5.<androidx.appsearch.app.PropertyPath: java.lang.String toString()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r9 = virtualinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: androidx.appsearch.app.SearchSpec$Builder addProjection(java.lang.String,java.util.Collection)>(r1, r3);

        return $r9;
    }

    public androidx.appsearch.app.SearchSpec$Builder setResultGrouping(int, int)
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Result grouping type cannot be zero.");

        specialinvoke r0.<androidx.appsearch.app.SearchSpec$Builder: void resetIfBuilt()>();

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingTypeFlags> = i0;

        r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingLimit> = i1;

        return r0;
    }

    public androidx.appsearch.app.SearchSpec build()
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        android.os.Bundle r1, $r2, $r6;
        java.util.ArrayList $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.appsearch.app.SearchSpec $r7;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        $r3 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas>;

        virtualinvoke r1.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("schema", $r3);

        $r4 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces>;

        virtualinvoke r1.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("namespace", $r4);

        $r5 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames>;

        virtualinvoke r1.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("packageName", $r5);

        $r6 = r0.<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks>;

        virtualinvoke r1.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("projectionTypeFieldMasks", $r6);

        $i0 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mResultCountPerPage>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("numPerPage", $i0);

        $i1 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mTermMatchType>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("termMatchType", $i1);

        $i2 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCount>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("snippetCount", $i2);

        $i3 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mSnippetCountPerProperty>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("snippetCountPerProperty", $i3);

        $i4 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mMaxSnippetSize>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("maxSnippet", $i4);

        $i5 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mRankingStrategy>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("rankingStrategy", $i5);

        $i6 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mOrder>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("order", $i6);

        $i7 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingTypeFlags>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("resultGroupingTypeFlags", $i7);

        $i8 = r0.<androidx.appsearch.app.SearchSpec$Builder: int mGroupingLimit>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("resultGroupingLimit", $i8);

        r0.<androidx.appsearch.app.SearchSpec$Builder: boolean mBuilt> = 1;

        $r7 = new androidx.appsearch.app.SearchSpec;

        specialinvoke $r7.<androidx.appsearch.app.SearchSpec: void <init>(android.os.Bundle)>(r1);

        return $r7;
    }

    private void resetIfBuilt()
    {
        androidx.appsearch.app.SearchSpec$Builder r0;
        boolean $z0;
        java.util.ArrayList $r1, $r2, $r3, $r4, $r5, $r6;
        android.os.Bundle $r7, $r8;

        r0 := @this: androidx.appsearch.app.SearchSpec$Builder;

        $z0 = r0.<androidx.appsearch.app.SearchSpec$Builder: boolean mBuilt>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mSchemas> = $r1;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mNamespaces> = $r3;

        $r5 = new java.util.ArrayList;

        $r6 = r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames>;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r0.<androidx.appsearch.app.SearchSpec$Builder: java.util.ArrayList mPackageNames> = $r5;

        $r7 = r0.<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks>;

        $r8 = staticinvoke <androidx.appsearch.util.BundleUtil: android.os.Bundle deepCopy(android.os.Bundle)>($r7);

        r0.<androidx.appsearch.app.SearchSpec$Builder: android.os.Bundle mProjectionTypePropertyMasks> = $r8;

        r0.<androidx.appsearch.app.SearchSpec$Builder: boolean mBuilt> = 0;

     label1:
        return;
    }

androidx.appsearch.app.SearchSpec$GroupingType
androidx.appsearch.app.SearchSpec$Order
androidx.appsearch.app.SearchSpec$RankingStrategy
androidx.appsearch.app.SearchSpec$TermMatch
