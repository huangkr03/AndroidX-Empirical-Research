androidx.media3.effect.SingleColorLut
<androidx.media3.effect.SingleColorLut: android.graphics.Bitmap lut>
<androidx.media3.effect.SingleColorLut: int lutTextureId>
    public static androidx.media3.effect.SingleColorLut createFromCube(int[][][])
    {
        int[][][] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[][] $r1, $r3, $r4, $r6, $r9, $r11;
        int[] $r2, $r5, $r12;
        boolean $z0, $z1;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r10, $r13;
        java.lang.String $r14;
        androidx.media3.effect.SingleColorLut $r15;
        android.graphics.Bitmap $r16;

        r0 := @parameter0: int[][][];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $r3 = r0[0];

        $i3 = lengthof $r3;

        if $i3 <= 0 goto label1;

        $r4 = r0[0];

        $r5 = $r4[0];

        $i4 = lengthof $r5;

        if $i4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "LUT must have three dimensions.");

        $i5 = lengthof r0;

        $r6 = r0[0];

        $i6 = lengthof $r6;

        if $i5 != $i6 goto label3;

        $i2 = lengthof r0;

        $r1 = r0[0];

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        if $i2 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r7 = newarray (java.lang.Object)[3];

        $i7 = lengthof r0;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r7[0] = $r8;

        $r9 = r0[0];

        $i8 = lengthof $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r7[1] = $r10;

        $r11 = r0[0];

        $r12 = $r11[0];

        $i9 = lengthof $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r7[2] = $r13;

        $r14 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("All three dimensions of a LUT must match, received %d x %d x %d.", $r7);

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, $r14);

        $r15 = new androidx.media3.effect.SingleColorLut;

        $r16 = staticinvoke <androidx.media3.effect.SingleColorLut: android.graphics.Bitmap transformCubeIntoBitmap(int[][][])>(r0);

        specialinvoke $r15.<androidx.media3.effect.SingleColorLut: void <init>(android.graphics.Bitmap)>($r16);

        return $r15;
    }

    public static androidx.media3.effect.SingleColorLut createFromBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;
        android.graphics.Bitmap$Config $r5, $r6;
        androidx.media3.effect.SingleColorLut $r7;
        boolean $z0, $z1;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = $i0 * $i1;

        $i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $i4 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[0] = $r2;

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[1] = $r3;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("LUT needs to be in a N x N^2 format, received %d x %d.", $r1);

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, $r4);

        $r5 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if $r5 != $r6 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Color representation needs to be ARGB_8888.");

        $r7 = new androidx.media3.effect.SingleColorLut;

        specialinvoke $r7.<androidx.media3.effect.SingleColorLut: void <init>(android.graphics.Bitmap)>(r0);

        return $r7;
    }

    private void <init>(android.graphics.Bitmap)
    {
        androidx.media3.effect.SingleColorLut r0;
        android.graphics.Bitmap r1;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.effect.SingleColorLut: android.graphics.Bitmap lut> = r1;

        r0.<androidx.media3.effect.SingleColorLut: int lutTextureId> = -1;

        return;
    }

    private static android.graphics.Bitmap transformCubeIntoBitmap(int[][][])
    {
        int[][][] r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        int[] r1, $r5;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        int[][] $r4;

        r0 := @parameter0: int[][][];

        i0 = lengthof r0;

        $i3 = i0 * i0;

        $i4 = $i3 * i0;

        r1 = newarray (int)[$i4];

        i9 = 0;

     label1:
        if i9 >= i0 goto label6;

        i10 = 0;

     label2:
        if i10 >= i0 goto label5;

        i11 = 0;

     label3:
        if i11 >= i0 goto label4;

        $r4 = r0[i9];

        $r5 = $r4[i10];

        i1 = $r5[i11];

        $i6 = i0 * i9;

        $i7 = i10 + $i6;

        $i8 = i0 * $i7;

        i2 = i11 + $i8;

        r1[i2] = i1;

        i11 = i11 + 1;

        goto label3;

     label4:
        i10 = i10 + 1;

        goto label2;

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $i5 = i0 * i0;

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>(r1, i0, $i5, $r2);

        return $r3;
    }

    public int getLutTextureId(long)
    {
        androidx.media3.effect.SingleColorLut r0;
        long l0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        l0 := @parameter0: long;

        $i1 = r0.<androidx.media3.effect.SingleColorLut: int lutTextureId>;

        if $i1 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z0, "The LUT has not been stored as a texture in OpenGL yet. You must to call #toGlTextureProcessor() first.");

        $i2 = r0.<androidx.media3.effect.SingleColorLut: int lutTextureId>;

        return $i2;
    }

    public int getLength(long)
    {
        androidx.media3.effect.SingleColorLut r0;
        long l0;
        android.graphics.Bitmap $r1;
        int $i1;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.effect.SingleColorLut: android.graphics.Bitmap lut>;

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        return $i1;
    }

    public void release() throws androidx.media3.common.util.GlUtil$GlException
    {
        androidx.media3.effect.SingleColorLut r0;
        int $i0;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        $i0 = r0.<androidx.media3.effect.SingleColorLut: int lutTextureId>;

        staticinvoke <androidx.media3.common.util.GlUtil: void deleteTexture(int)>($i0);

        return;
    }

    public androidx.media3.effect.SingleFrameGlTextureProcessor toGlTextureProcessor(android.content.Context, boolean) throws androidx.media3.common.FrameProcessingException
    {
        androidx.media3.effect.SingleColorLut r0;
        android.content.Context r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r5;
        android.graphics.Bitmap $r3;
        int $i0;
        androidx.media3.effect.ColorLutProcessor $r4;
        androidx.media3.common.FrameProcessingException $r6;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z1, "HDR is currently not supported.");

     label3:
        $r3 = r0.<androidx.media3.effect.SingleColorLut: android.graphics.Bitmap lut>;

        $i0 = staticinvoke <androidx.media3.effect.SingleColorLut: int storeLutAsTexture(android.graphics.Bitmap)>($r3);

        r0.<androidx.media3.effect.SingleColorLut: int lutTextureId> = $i0;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new androidx.media3.common.FrameProcessingException;

        specialinvoke $r6.<androidx.media3.common.FrameProcessingException: void <init>(java.lang.String,java.lang.Throwable)>("Could not store the LUT as a texture.", r2);

        throw $r6;

     label6:
        $r4 = new androidx.media3.effect.ColorLutProcessor;

        specialinvoke $r4.<androidx.media3.effect.ColorLutProcessor: void <init>(android.content.Context,androidx.media3.effect.ColorLut,boolean)>(r1, r0, z0);

        return $r4;

        catch androidx.media3.common.util.GlUtil$GlException from label3 to label4 with label5;
    }

    private static int storeLutAsTexture(android.graphics.Bitmap) throws androidx.media3.common.util.GlUtil$GlException
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2;

        r0 := @parameter0: android.graphics.Bitmap;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        i0 = staticinvoke <androidx.media3.common.util.GlUtil: int createTexture(int,int,boolean)>($i1, $i2, 0);

        staticinvoke <android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>(3553, 0, r0, 0);

        staticinvoke <androidx.media3.common.util.GlUtil: void checkGlError()>();

        return i0;
    }

    public volatile androidx.media3.effect.GlTextureProcessor toGlTextureProcessor(android.content.Context, boolean) throws androidx.media3.common.FrameProcessingException
    {
        androidx.media3.effect.SingleColorLut r0;
        android.content.Context r1;
        boolean z0;
        androidx.media3.effect.SingleFrameGlTextureProcessor $r2;

        r0 := @this: androidx.media3.effect.SingleColorLut;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<androidx.media3.effect.SingleColorLut: androidx.media3.effect.SingleFrameGlTextureProcessor toGlTextureProcessor(android.content.Context,boolean)>(r1, z0);

        return $r2;
    }

