androidx.compose.compiler.plugins.kotlin.VersionChecker
<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.util.Map versionTable>
<androidx.compose.compiler.plugins.kotlin.VersionChecker: int minimumRuntimeVersionInt>
<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String compilerVersion>
<androidx.compose.compiler.plugins.kotlin.VersionChecker: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>
    private final java.lang.String getMinimumRuntimeVersion()
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        int $i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.util.Map versionTable>;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: int minimumRuntimeVersionInt>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        if $r4 == null goto label1;

        goto label2;

     label1:
        $r4 = "unknown";

     label2:
        return $r4;
    }

    public final void check()
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r1, r43;
        java.util.Iterator r2, $r48;
        java.lang.Object r3, r4, $r21, $r25, r49, $r51;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration r5, $r46;
        org.jetbrains.kotlin.ir.declarations.IrProperty r6, r7, $r16, $r35, $r50;
        boolean z3, z4, $z6, $z7, $z8, $z9, $z10, $z11, $z17;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r8, $r36;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r9, $r37;
        org.jetbrains.kotlin.name.FqName $r10, $r38;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r11;
        org.jetbrains.kotlin.ir.declarations.IrClass $r12;
        java.util.List $r13, $r15;
        java.util.ArrayList $r14;
        kotlin.KotlinNothingValueException $r18, $r27, $r40, $r42;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r19;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Int $r20;
        java.lang.Integer $r22, $r24;
        int $i0, $i1;
        java.util.Map $r23;
        java.lang.NullPointerException $r29;
        org.jetbrains.kotlin.ir.declarations.IrField $r30;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r31;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r32, $r53;
        org.jetbrains.kotlin.name.Name $r33;
        java.lang.String $r34, $r55;
        java.util.Collection r44;
        java.lang.Iterable $r45, $r47;
        org.jetbrains.kotlin.ir.expressions.IrConst r54;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r8 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r10 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposeVersion()>();

        r1 = interfaceinvoke $r9.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.symbols.IrClassSymbol referenceClass(org.jetbrains.kotlin.name.FqName)>($r10);

        if r1 != null goto label02;

        $r37 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r36 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r38 = virtualinvoke $r36.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposer()>();

        r43 = interfaceinvoke $r37.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.symbols.IrClassSymbol referenceClass(org.jetbrains.kotlin.name.FqName)>($r38);

        if r43 != null goto label01;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.Void outdatedRuntimeWithUnknownVersionNumber()>();

        $r42 = new kotlin.KotlinNothingValueException;

        specialinvoke $r42.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r42;

     label01:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.Void noRuntimeOnClasspathError()>();

        $r40 = new kotlin.KotlinNothingValueException;

        specialinvoke $r40.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r40;

     label02:
        $r11 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r12 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r11;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.ir.declarations.IrClass: java.util.List getDeclarations()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r44 = (java.util.Collection) $r14;

        $r45 = (java.lang.Iterable) $r13;

        r2 = interfaceinvoke $r45.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = r3;

        r5 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) r4;

        $r46 = r5;

        $z11 = r5 instanceof org.jetbrains.kotlin.ir.declarations.IrProperty;

        if $z11 != 0 goto label04;

        $r46 = null;

     label04:
        $r35 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r46;

        if $r35 == null goto label05;

        r6 = $r35;

        z3 = 0;

        z4 = 0;

        r7 = r6;

        interfaceinvoke r44.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label05;

     label05:
        goto label03;

     label06:
        $r15 = (java.util.List) r44;

        $r47 = (java.lang.Iterable) $r15;

        $r48 = interfaceinvoke $r47.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        $r50 = (org.jetbrains.kotlin.ir.declarations.IrProperty) r49;

        $r33 = interfaceinvoke $r50.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.name.Name getName()>();

        $r34 = virtualinvoke $r33.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r34, "version");

        if $z10 == 0 goto label07;

        $r51 = r49;

        goto label09;

     label08:
        $r51 = null;

     label09:
        $r16 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r51;

        if $r16 == null goto label10;

        $r30 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.declarations.IrField getBackingField()>();

        if $r30 == null goto label10;

        $r31 = interfaceinvoke $r30.<org.jetbrains.kotlin.ir.declarations.IrField: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getInitializer()>();

        if $r31 == null goto label10;

        $r32 = interfaceinvoke $r31.<org.jetbrains.kotlin.ir.expressions.IrExpressionBody: org.jetbrains.kotlin.ir.expressions.IrExpression getExpression()>();

        $r53 = $r32;

        goto label11;

     label10:
        $r53 = null;

     label11:
        $z17 = $r53 instanceof org.jetbrains.kotlin.ir.expressions.IrConst;

        if $z17 != 0 goto label12;

        $r53 = null;

     label12:
        r54 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r53;

        if r54 == null goto label13;

        $r19 = interfaceinvoke r54.<org.jetbrains.kotlin.ir.expressions.IrConst: org.jetbrains.kotlin.ir.expressions.IrConstKind getKind()>();

        $r20 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Int: org.jetbrains.kotlin.ir.expressions.IrConstKind$Int INSTANCE>;

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r20);

        $z9 = $z8 ^ 1;

        if $z9 == 0 goto label14;

     label13:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.Void outdatedRuntimeWithUnknownVersionNumber()>();

        $r18 = new kotlin.KotlinNothingValueException;

        specialinvoke $r18.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r18;

     label14:
        $r21 = interfaceinvoke r54.<org.jetbrains.kotlin.ir.expressions.IrConst: java.lang.Object getValue()>();

        if $r21 != null goto label15;

        $r29 = new java.lang.NullPointerException;

        specialinvoke $r29.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Int");

        throw $r29;

     label15:
        $r22 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: int minimumRuntimeVersionInt>;

        if $i1 >= $i0 goto label18;

        $r23 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.util.Map versionTable>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r25 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r55 = (java.lang.String) $r25;

        if $r55 == null goto label16;

        goto label17;

     label16:
        $r55 = "<unknown>";

     label17:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.Void outdatedRuntime(java.lang.String)>($r55);

        $r27 = new kotlin.KotlinNothingValueException;

        specialinvoke $r27.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r27;

     label18:
        return;
    }

    private final java.lang.Void noRuntimeOnClasspathError()
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r7, $r10, $r11, $r12;
        java.lang.Throwable $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        $r1 = new androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                The Compose Compiler requires the Compose Runtime to be on the class path, but\n                none could be found. The compose compiler plugin you are using (version\n                ");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String compilerVersion>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") expects a minimum runtime version of ");

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String getMinimumRuntimeVersion()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n            ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r10);

        $r12 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r11, 10, 32, 0, 4, null);

        specialinvoke $r1.<androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r1;

        throw $r13;
    }

    private final java.lang.Void outdatedRuntimeWithUnknownVersionNumber()
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r7, $r10, $r11, $r12;
        java.lang.Throwable $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        $r1 = new androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                You are using an outdated version of Compose Runtime that is not compatible with\n                the version of the Compose Compiler plugin you have installed. The compose\n                compiler plugin you are using (version ");

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String compilerVersion>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") expects a minimum runtime\n                version of ");

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String getMinimumRuntimeVersion()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n            ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r10);

        $r12 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r11, 10, 32, 0, 4, null);

        specialinvoke $r1.<androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r1;

        throw $r13;
    }

    private final java.lang.Void outdatedRuntime(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        java.lang.String r1, $r5, $r8, $r13, $r14, $r15;
        androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12;
        java.lang.Throwable $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        r1 := @parameter0: java.lang.String;

        $r2 = new androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                You are using an outdated version of Compose Runtime that is not compatible with\n                the version of the Compose Compiler plugin you have installed. The compose\n                compiler plugin you are using (version ");

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String compilerVersion>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") expects a minimum runtime\n                version of ");

        $r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String getMinimumRuntimeVersion()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". The version of the runtime on the classpath\n                currently is ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n            ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r13);

        $r15 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r14, 10, 32, 0, 4, null);

        specialinvoke $r2.<androidx.compose.compiler.plugins.kotlin.IncompatibleComposeRuntimeVersionException: void <init>(java.lang.String)>($r15);

        $r16 = (java.lang.Throwable) $r2;

        throw $r16;
    }

    public final org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)
    {
        androidx.compose.compiler.plugins.kotlin.VersionChecker r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        java.lang.Integer $r2;
        kotlin.Pair $r3;
        java.util.Map $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.VersionChecker;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context> = r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1600);

        $r3 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r2, "0.1.0-dev16");

        $r4 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair)>($r3);

        r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.util.Map versionTable> = $r4;

        r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: int minimumRuntimeVersionInt> = 1600;

        r0.<androidx.compose.compiler.plugins.kotlin.VersionChecker: java.lang.String compilerVersion> = "0.1.0-dev16";

        return;
    }

