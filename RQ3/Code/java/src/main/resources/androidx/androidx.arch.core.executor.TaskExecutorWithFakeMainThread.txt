androidx.arch.core.executor.TaskExecutorWithFakeMainThread
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.List mCaughtExceptions>
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mIOService>
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.atomic.AtomicReference mMainThread>
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: int mIOThreadCount>
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mMainThreadService>
    public void <init>(int)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        int i0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.util.concurrent.ThreadFactory $r4, $r6;
        java.util.concurrent.ExecutorService $r5, $r7;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.List mCaughtExceptions> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.atomic.AtomicReference mMainThread> = $r3;

        $r4 = dynamicinvoke "newThread" <java.util.concurrent.ThreadFactory (androidx.arch.core.executor.TaskExecutorWithFakeMainThread)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Thread __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_SPECIAL" <androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.lang.Thread lambda$new$0(java.lang.Runnable)>, methodtype: java.lang.Thread __METHODTYPE__(java.lang.Runnable));

        $r5 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>($r4);

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mMainThreadService> = $r5;

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: int mIOThreadCount> = i0;

        $r6 = dynamicinvoke "newThread" <java.util.concurrent.ThreadFactory (androidx.arch.core.executor.TaskExecutorWithFakeMainThread)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Thread __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_SPECIAL" <androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.lang.Thread lambda$new$1(java.lang.Runnable)>, methodtype: java.lang.Thread __METHODTYPE__(java.lang.Runnable));

        $r7 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(i0, $r6);

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mIOService> = $r7;

        return;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mIOService>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mMainThreadService>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.lang.Thread $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.atomic.AtomicReference mMainThread>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r1 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    java.util.List getErrors()
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.util.List $r1;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        $r1 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.List mCaughtExceptions>;

        return $r1;
    }

    void shutdown(int) throws java.lang.InterruptedException
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        int i0;
        java.util.concurrent.ExecutorService $r1, $r2, $r4, $r6;
        java.util.concurrent.TimeUnit $r3, $r5;
        long $l1, $l2;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mMainThreadService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r2 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mIOService>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r4 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mMainThreadService>;

        $l1 = (long) i0;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l1, $r3);

        $r6 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.ExecutorService mIOService>;

        $l2 = (long) i0;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l2, $r5);

        return;
    }

    public void drainTasks(int) throws java.lang.InterruptedException
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        int i0, $i1, $i2, i5;
        java.util.concurrent.CountDownLatch r1, r2, $r3, $r4, $r5, r24;
        boolean $z0, $z1, $z2;
        java.lang.Runnable $r7, $r22;
        java.util.concurrent.TimeUnit $r8, $r9;
        long $l3, $l4;
        java.lang.AssertionError $r10, $r16;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;
        java.lang.String $r15, $r21;
        java.lang.IllegalStateException $r23;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: boolean isMainThread()>();

        if $z0 == 0 goto label1;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>()>();

        throw $r23;

     label1:
        $r3 = new java.util.concurrent.CountDownLatch;

        $i1 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: int mIOThreadCount>;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>($i1);

        r1 = $r3;

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = $r4;

        i5 = 0;

     label2:
        $i2 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: int mIOThreadCount>;

        if i5 >= $i2 goto label3;

        $r22 = dynamicinvoke "run" <java.lang.Runnable (java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void lambda$drainTasks$2(java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void executeOnDiskIO(java.lang.Runnable)>($r22);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r24 = $r5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r24);

        $r7 = dynamicinvoke "run" <java.lang.Runnable (java.util.concurrent.CountDownLatch)>(r24) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <java.util.concurrent.CountDownLatch: void countDown()>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void postToMainThread(java.lang.Runnable)>($r7);

        $l3 = (long) i0;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z1 = virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l3, $r8);

        if $z1 != 0 goto label4;

        $r16 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not drain IO tasks in ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r16;

     label4:
        virtualinvoke r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        $l4 = (long) i0;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z2 = virtualinvoke r24.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l4, $r9);

        if $z2 != 0 goto label5;

        $r10 = new java.lang.AssertionError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not drain UI tasks in ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r10;

     label5:
        return;
    }

    private static void lambda$drainTasks$2(java.util.concurrent.CountDownLatch, java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch r0, r1;
        java.lang.Throwable r2, $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        r1 := @parameter1: java.util.concurrent.CountDownLatch;

        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void countDown()>();

     label1:
        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private java.lang.Thread lambda$new$1(java.lang.Runnable)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.lang.Runnable r1;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread $r2;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread;

        specialinvoke $r2.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread: void <init>(androidx.arch.core.executor.TaskExecutorWithFakeMainThread,java.lang.Runnable)>(r0, r1);

        return $r2;
    }

    private java.lang.Thread lambda$new$0(java.lang.Runnable)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r0;
        java.lang.Runnable r1;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread $r2;
        java.util.concurrent.atomic.AtomicReference $r3, $r4;
        java.lang.Object $r5;
        java.lang.Thread $r6;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.atomic.AtomicReference mMainThread>;

        $r2 = new androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread;

        specialinvoke $r2.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread: void <init>(androidx.arch.core.executor.TaskExecutorWithFakeMainThread,java.lang.Runnable)>(r0, r1);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r2);

        $r4 = r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.concurrent.atomic.AtomicReference mMainThread>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r6 = (java.lang.Thread) $r5;

        return $r6;
    }

androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread
<androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread: androidx.arch.core.executor.TaskExecutorWithFakeMainThread this$0>
    void <init>(androidx.arch.core.executor.TaskExecutorWithFakeMainThread, java.lang.Runnable)
    {
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread r0;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r1;
        java.lang.Runnable r2, $r3;

        r0 := @this: androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread;

        r1 := @parameter0: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        r2 := @parameter1: java.lang.Runnable;

        r0.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread: androidx.arch.core.executor.TaskExecutorWithFakeMainThread this$0> = r1;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (java.lang.Runnable,androidx.arch.core.executor.TaskExecutorWithFakeMainThread)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.arch.core.executor.TaskExecutorWithFakeMainThread$LoggingThread: void lambda$new$0(java.lang.Runnable,androidx.arch.core.executor.TaskExecutorWithFakeMainThread)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        return;
    }

    private static void lambda$new$0(java.lang.Runnable, androidx.arch.core.executor.TaskExecutorWithFakeMainThread)
    {
        java.lang.Runnable r0;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread r1;
        java.lang.Throwable r2, $r3;
        java.util.List $r4;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

     label1:
        interfaceinvoke r0.<java.lang.Runnable: void run()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = r1.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.List mCaughtExceptions>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

