kotlin.jvm.internal.PropertyReference
    public void <init>()
    {
        kotlin.jvm.internal.PropertyReference $r0;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        specialinvoke $r0.<kotlin.jvm.internal.CallableReference: void <init>()>();

        return;
    }

    public void <init>(java.lang.Object)
    {
        kotlin.jvm.internal.PropertyReference $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(java.lang.Object, java.lang.Class, java.lang.String, java.lang.String, int)
    {
        kotlin.jvm.internal.PropertyReference $r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;
        int $i0;
        boolean $z0;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r0.<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>($r1, $r2, $r3, $r4, $z0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.jvm.internal.PropertyReference $r0, $r2;
        java.lang.Object $r1, $r7;
        boolean $z0;
        kotlin.reflect.KDeclarationContainer $r3, $r4;
        java.lang.String $r5, $r6;
        kotlin.reflect.KCallable $r8;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof kotlin.jvm.internal.PropertyReference;

        if $z0 == 0 goto label3;

        $r2 = (kotlin.jvm.internal.PropertyReference) $r1;

        $r3 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KDeclarationContainer getOwner()>();

        $r4 = virtualinvoke $r2.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KDeclarationContainer getOwner()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<kotlin.jvm.internal.PropertyReference: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.String getSignature()>();

        $r6 = virtualinvoke $r2.<kotlin.jvm.internal.PropertyReference: java.lang.String getSignature()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.Object getBoundReceiver()>();

        $r7 = virtualinvoke $r2.<kotlin.jvm.internal.PropertyReference: java.lang.Object getBoundReceiver()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r7);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $z0 = $r1 instanceof kotlin.reflect.KProperty;

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KCallable compute()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        return $z0;

     label4:
        return 0;
    }

    protected volatile kotlin.reflect.KCallable getReflected()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KProperty $r1;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KProperty getReflected()>();

        return $r1;
    }

    protected kotlin.reflect.KProperty getReflected()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KCallable $r1;
        kotlin.reflect.KProperty $r2;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = specialinvoke $r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = (kotlin.reflect.KProperty) $r1;

        return $r2;
    }

    public int hashCode()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KDeclarationContainer $r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KDeclarationContainer getOwner()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 * 31;

        $r2 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.String getName()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r2 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.String getSignature()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isConst()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KProperty $r1;
        boolean $z0;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KProperty getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KProperty: boolean isConst()>();

        return $z0;
    }

    public boolean isLateinit()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KProperty $r1;
        boolean $z0;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KProperty getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KProperty: boolean isLateinit()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        kotlin.jvm.internal.PropertyReference $r0;
        kotlin.reflect.KCallable $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: kotlin.jvm.internal.PropertyReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KCallable compute()>();

        if $r1 == $r0 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("property ");

        $r2 = virtualinvoke $r0.<kotlin.jvm.internal.PropertyReference: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Kotlin reflection is not available)");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

