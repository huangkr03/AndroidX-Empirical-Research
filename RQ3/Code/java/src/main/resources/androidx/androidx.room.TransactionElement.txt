androidx.room.TransactionElement
<androidx.room.TransactionElement: androidx.room.TransactionElement$Key Key>
<androidx.room.TransactionElement: kotlinx.coroutines.Job transactionThreadControlJob>
<androidx.room.TransactionElement: kotlin.coroutines.ContinuationInterceptor transactionDispatcher>
<androidx.room.TransactionElement: java.util.concurrent.atomic.AtomicInteger referenceCount>
    public void <init>(kotlinx.coroutines.Job, kotlin.coroutines.ContinuationInterceptor)
    {
        androidx.room.TransactionElement r0;
        kotlinx.coroutines.Job r1;
        kotlin.coroutines.ContinuationInterceptor r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: androidx.room.TransactionElement;

        r1 := @parameter0: kotlinx.coroutines.Job;

        r2 := @parameter1: kotlin.coroutines.ContinuationInterceptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionThreadControlJob");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "transactionDispatcher");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.TransactionElement: kotlinx.coroutines.Job transactionThreadControlJob> = r1;

        r0.<androidx.room.TransactionElement: kotlin.coroutines.ContinuationInterceptor transactionDispatcher> = r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.room.TransactionElement: java.util.concurrent.atomic.AtomicInteger referenceCount> = $r3;

        return;
    }

    public final kotlin.coroutines.ContinuationInterceptor getTransactionDispatcher$room_ktx_release()
    {
        androidx.room.TransactionElement r0;
        kotlin.coroutines.ContinuationInterceptor $r1;

        r0 := @this: androidx.room.TransactionElement;

        $r1 = r0.<androidx.room.TransactionElement: kotlin.coroutines.ContinuationInterceptor transactionDispatcher>;

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        androidx.room.TransactionElement r0;
        androidx.room.TransactionElement$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        r0 := @this: androidx.room.TransactionElement;

        $r1 = <androidx.room.TransactionElement: androidx.room.TransactionElement$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        return $r2;
    }

    public final void acquire()
    {
        androidx.room.TransactionElement r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: androidx.room.TransactionElement;

        $r1 = r0.<androidx.room.TransactionElement: java.util.concurrent.atomic.AtomicInteger referenceCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public final void release()
    {
        androidx.room.TransactionElement r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        kotlinx.coroutines.Job $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.room.TransactionElement;

        $r1 = r0.<androidx.room.TransactionElement: java.util.concurrent.atomic.AtomicInteger referenceCount>;

        i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Transaction was never started or was already released.");

        throw $r3;

     label1:
        if i0 != 0 goto label2;

        $r2 = r0.<androidx.room.TransactionElement: kotlinx.coroutines.Job transactionThreadControlJob>;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r2, null, 1, null);

     label2:
        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.room.TransactionElement r0;
        java.lang.Object r1, $r3;
        kotlin.jvm.functions.Function2 r2;

        r0 := @this: androidx.room.TransactionElement;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>(r0, r1, r2);

        return $r3;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.room.TransactionElement r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext$Element $r2;

        r0 := @this: androidx.room.TransactionElement;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.room.TransactionElement r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.room.TransactionElement;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>(r0, r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        androidx.room.TransactionElement r0;
        kotlin.coroutines.CoroutineContext r1, $r2;

        r0 := @this: androidx.room.TransactionElement;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.room.TransactionElement$Key $r0;

        $r0 = new androidx.room.TransactionElement$Key;

        specialinvoke $r0.<androidx.room.TransactionElement$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.TransactionElement: androidx.room.TransactionElement$Key Key> = $r0;

        return;
    }

