androidx.ui.core.MeasureAndLayoutDelegate
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>
<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.OnPositionedDispatcher onPositionedDispatcher>
<androidx.ui.core.MeasureAndLayoutDelegate: long measureIteration>
<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests>
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints>
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutDirection rootLayoutDirection>
<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker>
    public void <init>(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0, r2;
        androidx.ui.core.LayoutNode r1, $r14;
        boolean z0, $z1, $z2;
        java.util.List r3, $r12;
        androidx.ui.core.DepthSortedSet $r4, $r13;
        androidx.ui.core.Owner$Companion $r5, $r11;
        androidx.ui.core.OnPositionedDispatcher $r6;
        java.util.ArrayList $r7;
        androidx.ui.core.Constraints$Companion $r8;
        androidx.ui.core.Constraints $r9;
        androidx.ui.core.LayoutDirection $r10;
        androidx.ui.core.LayoutTreeConsistencyChecker $r16;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "root");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root> = r1;

        $r4 = new androidx.ui.core.DepthSortedSet;

        $r5 = <androidx.ui.core.Owner: androidx.ui.core.Owner$Companion Companion>;

        $z1 = virtualinvoke $r5.<androidx.ui.core.Owner$Companion: boolean getEnableExtraAssertions()>();

        specialinvoke $r4.<androidx.ui.core.DepthSortedSet: void <init>(boolean)>($z1);

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes> = $r4;

        $r6 = new androidx.ui.core.OnPositionedDispatcher;

        specialinvoke $r6.<androidx.ui.core.OnPositionedDispatcher: void <init>()>();

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.OnPositionedDispatcher onPositionedDispatcher> = $r6;

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: long measureIteration> = 1L;

        r2 = r0;

        z0 = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) $r7;

        r2.<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests> = r3;

        $r8 = <androidx.ui.core.Constraints: androidx.ui.core.Constraints$Companion Companion>;

        $r9 = virtualinvoke $r8.<androidx.ui.core.Constraints$Companion: androidx.ui.core.Constraints fixed(int,int)>(0, 0);

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints> = $r9;

        $r10 = <androidx.ui.core.LayoutDirection: androidx.ui.core.LayoutDirection Ltr>;

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutDirection rootLayoutDirection> = $r10;

        $r11 = <androidx.ui.core.Owner: androidx.ui.core.Owner$Companion Companion>;

        $z2 = virtualinvoke $r11.<androidx.ui.core.Owner$Companion: boolean getEnableExtraAssertions()>();

        if $z2 == 0 goto label1;

        $r16 = new androidx.ui.core.LayoutTreeConsistencyChecker;

        $r14 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>;

        $r13 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $r12 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests>;

        specialinvoke $r16.<androidx.ui.core.LayoutTreeConsistencyChecker: void <init>(androidx.ui.core.LayoutNode,androidx.ui.core.DepthSortedSet,java.util.List)>($r14, $r13, $r12);

        goto label2;

     label1:
        $r16 = (androidx.ui.core.LayoutTreeConsistencyChecker) null;

     label2:
        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker> = $r16;

        return;
    }

    public final long getMeasureIteration()
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        boolean z0, z1, z3;
        long $l0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        z0 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        z1 = 0;

        z3 = 0;

        if z0 != 0 goto label1;

        r4 = "measureIteration should be only used during the measure/layout pass";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label1:
        $l0 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: long measureIteration>;

        return $l0;
    }

    public final void updateRootParams(androidx.ui.core.Constraints, androidx.ui.core.LayoutDirection)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.Constraints r1, $r3;
        androidx.ui.core.LayoutDirection r2, $r11;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        androidx.ui.core.LayoutNode$LayoutState $r4;
        androidx.ui.core.LayoutNode $r5, $r6;
        androidx.ui.core.DepthSortedSet $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9, r12;
        java.lang.Throwable $r10;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.Constraints;

        r2 := @parameter1: androidx.ui.core.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "constraints");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "layoutDirection");

        $r3 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z3 == 0 goto label1;

        $r11 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutDirection rootLayoutDirection>;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, r2);

        if $z5 != 0 goto label5;

     label1:
        $z4 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z4 != 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        z0 = $z6;

        z1 = 0;

        z7 = 0;

        z8 = 0;

        z9 = 0;

        if z0 != 0 goto label4;

        z2 = 0;

        r12 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label4:
        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints> = r1;

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutDirection rootLayoutDirection> = r2;

        $r5 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>;

        $r4 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        virtualinvoke $r5.<androidx.ui.core.LayoutNode: void setLayoutState$ui_core_release(androidx.ui.core.LayoutNode$LayoutState)>($r4);

        $r7 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $r6 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>;

        virtualinvoke $r7.<androidx.ui.core.DepthSortedSet: void add(androidx.ui.core.LayoutNode)>($r6);

     label5:
        return;
    }

    public final boolean requestRemeasure(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode r1;
        androidx.ui.core.LayoutNode$LayoutState r2, $r5;
        int i0, $i1;
        androidx.ui.core.LayoutTreeConsistencyChecker r3;
        int[] $r4;
        boolean $z0, $z1, $z2, $z3, $z6, $z7;
        androidx.ui.core.DepthSortedSet $r6;
        java.util.List $r7, $r8;
        kotlin.NoWhenBranchMatchedException $r9;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        r2 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r4 = <androidx.ui.core.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        i0 = $r4[$i1];

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label02;
            case 4: goto label05;
            case 5: goto label05;
            default: goto label10;
        };

     label01:
        $z6 = 0;

        goto label11;

     label02:
        $r8 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        r3 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker>;

        if r3 != null goto label03;

        goto label04;

     label03:
        virtualinvoke r3.<androidx.ui.core.LayoutTreeConsistencyChecker: void assertConsistent()>();

     label04:
        $z6 = 0;

        goto label11;

     label05:
        $z0 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z0 == 0 goto label06;

        $z3 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean getWasMeasuredDuringThisIteration$ui_core_release()>();

        if $z3 == 0 goto label06;

        $r7 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label08;

     label06:
        $r5 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        virtualinvoke r1.<androidx.ui.core.LayoutNode: void setLayoutState$ui_core_release(androidx.ui.core.LayoutNode$LayoutState)>($r5);

        $z1 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z1 != 0 goto label07;

        $z2 = specialinvoke r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean getCanAffectPlacedParent(androidx.ui.core.LayoutNode)>(r1);

        if $z2 == 0 goto label08;

     label07:
        $r6 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        virtualinvoke $r6.<androidx.ui.core.DepthSortedSet: void add(androidx.ui.core.LayoutNode)>(r1);

     label08:
        $z7 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z7 != 0 goto label09;

        $z6 = 1;

        goto label11;

     label09:
        $z6 = 0;

        goto label11;

     label10:
        $r9 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r9.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r9;

     label11:
        return $z6;
    }

    public final boolean requestRelayout(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode r1;
        androidx.ui.core.LayoutNode$LayoutState r2, $r5;
        int i0, $i1;
        androidx.ui.core.LayoutTreeConsistencyChecker r3;
        int[] $r4;
        boolean $z0, $z1, $z2;
        androidx.ui.core.DepthSortedSet $r6;
        kotlin.NoWhenBranchMatchedException $r7;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        r2 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r4 = <androidx.ui.core.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        i0 = $r4[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label4;
            default: goto label7;
        };

     label1:
        r3 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker>;

        if r3 != null goto label2;

        goto label3;

     label2:
        virtualinvoke r3.<androidx.ui.core.LayoutTreeConsistencyChecker: void assertConsistent()>();

     label3:
        $z2 = 0;

        goto label8;

     label4:
        $r5 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRelayout>;

        virtualinvoke r1.<androidx.ui.core.LayoutNode: void setLayoutState$ui_core_release(androidx.ui.core.LayoutNode$LayoutState)>($r5);

        $z0 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z0 == 0 goto label5;

        $r6 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        virtualinvoke $r6.<androidx.ui.core.DepthSortedSet: void add(androidx.ui.core.LayoutNode)>(r1);

     label5:
        $z1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z1 != 0 goto label6;

        $z2 = 1;

        goto label8;

     label6:
        $z2 = 0;

        goto label8;

     label7:
        $r7 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r7.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r7;

     label8:
        return $z2;
    }

    private final boolean doRemeasure(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode r1, r2, $r3;
        boolean z0, z1, z2, z3, $z4, $z7, z8, z9, z10;
        androidx.ui.core.LayoutNode$UsageByParent $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9, r13;
        java.lang.Throwable $r10;
        androidx.ui.core.LayoutDirection $r11;
        androidx.ui.core.Constraints $r12;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        $r3 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>;

        if r1 != $r3 goto label1;

        $r12 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints>;

        $r11 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutDirection rootLayoutDirection>;

        $z7 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean remeasure$ui_core_release(androidx.ui.core.Constraints,androidx.ui.core.LayoutDirection)>($r12, $r11);

        goto label2;

     label1:
        $z7 = staticinvoke <androidx.ui.core.LayoutNode: boolean remeasure$default(androidx.ui.core.LayoutNode,androidx.ui.core.Constraints,androidx.ui.core.LayoutDirection,int,java.lang.Object)>(r1, null, null, 3, null);

     label2:
        z0 = $z7;

        r2 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getParent()>();

        if z0 == 0 goto label6;

        if r2 != null goto label3;

        return 1;

     label3:
        $r4 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$UsageByParent getMeasuredByParent$ui_core_release()>();

        $r5 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent InMeasureBlock>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z4 == 0 goto label4;

        virtualinvoke r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean requestRemeasure(androidx.ui.core.LayoutNode)>(r2);

        goto label6;

     label4:
        $r6 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$UsageByParent getMeasuredByParent$ui_core_release()>();

        $r7 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent InLayoutBlock>;

        z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        z2 = 0;

        z8 = 0;

        z9 = 0;

        z10 = 0;

        if z1 != 0 goto label5;

        z3 = 0;

        r13 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label5:
        virtualinvoke r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean requestRelayout(androidx.ui.core.LayoutNode)>(r2);

     label6:
        return 0;
    }

    public final boolean measureAndLayout()
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode r1, r2, r4, $r10, r24;
        long l0, $l4;
        int i1, i2, $i3, i5;
        java.lang.Object r3;
        boolean $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15, z16, z17, z21, $z25, $z27, $z28, $z29, $z31, $z32, $z34;
        androidx.ui.core.Constraints $r5;
        kotlin.jvm.internal.Ref$BooleanRef $r6, r19;
        java.util.Collection $r7, $r32;
        java.util.List $r8, $r31, $r33;
        androidx.ui.core.Owner $r9;
        androidx.ui.core.OnPositionedDispatcher $r11;
        androidx.ui.core.LayoutNode$UsageByParent $r12, $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.String $r15, $r18, r20;
        java.lang.Throwable $r16, $r17, r36;
        androidx.ui.core.DepthSortedSet r21, r22, r23;
        androidx.ui.core.LayoutNode$LayoutState $r25, $r26, $r27, $r28;
        androidx.ui.core.LayoutTreeConsistencyChecker $r29, r34;
        kotlin.Unit r35;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        $z4 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z4 != 0 goto label01;

        $z15 = 1;

        goto label02;

     label01:
        $z15 = 0;

     label02:
        z16 = $z15;

        z17 = 0;

        if z16 != 0 goto label03;

        z21 = 0;

        $r18 = "Failed requirement.";

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        $r16 = (java.lang.Throwable) $r14;

        throw $r16;

     label03:
        $r5 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.Constraints rootConstraints>;

        $z5 = staticinvoke <androidx.ui.core.ConstraintsKt: boolean isZero(androidx.ui.core.Constraints)>($r5);

        if $z5 == 0 goto label04;

        return 0;

     label04:
        $r6 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r6.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r19 = $r6;

        r19.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 0;

        r20 = "AndroidOwner:measureAndLayout";

        staticinvoke <android.os.Trace: void beginSection(java.lang.String)>(r20);

     label05:
        r21 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $z6 = virtualinvoke r21.<androidx.ui.core.DepthSortedSet: boolean isEmpty()>();

        if $z6 != 0 goto label06;

        $z25 = 1;

        goto label07;

     label06:
        $z25 = 0;

     label07:
        if $z25 == 0 goto label27;

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 1;

        r22 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

     label08:
        r23 = r22;

        $z8 = virtualinvoke r23.<androidx.ui.core.DepthSortedSet: boolean isEmpty()>();

        if $z8 != 0 goto label09;

        $z27 = 1;

        goto label10;

     label09:
        $z27 = 0;

     label10:
        if $z27 == 0 goto label25;

        r24 = virtualinvoke r22.<androidx.ui.core.DepthSortedSet: androidx.ui.core.LayoutNode pop()>();

        r1 = r24;

        r2 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getAlignmentLinesQueryOwner$ui_core_release()>();

        $z9 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z9 != 0 goto label11;

        $z13 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: boolean access$getCanAffectPlacedParent(androidx.ui.core.MeasureAndLayoutDelegate,androidx.ui.core.LayoutNode)>(r0, r1);

        if $z13 != 0 goto label11;

        if r2 == null goto label24;

        $r12 = virtualinvoke r2.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$UsageByParent getAlignmentUsageByParent$ui_core_release()>();

        $r13 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent NotUsed>;

        $z14 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z14 != 0 goto label24;

     label11:
        $r25 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r26 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        $z28 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r25, $r26);

        if $z28 == 0 goto label12;

        $z12 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: boolean access$doRemeasure(androidx.ui.core.MeasureAndLayoutDelegate,androidx.ui.core.LayoutNode)>(r0, r1);

        if $z12 == 0 goto label12;

        r19.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

     label12:
        $r27 = virtualinvoke r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r28 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRelayout>;

        $z29 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r27, $r28);

        if $z29 == 0 goto label16;

        $z11 = virtualinvoke r1.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z11 == 0 goto label16;

        $r10 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode access$getRoot$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        if r1 != $r10 goto label13;

        virtualinvoke r1.<androidx.ui.core.LayoutNode: void place(int,int)>(0, 0);

        goto label14;

     label13:
        virtualinvoke r1.<androidx.ui.core.LayoutNode: void replace$ui_core_release()>();

     label14:
        $r11 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.OnPositionedDispatcher access$getOnPositionedDispatcher$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        virtualinvoke $r11.<androidx.ui.core.OnPositionedDispatcher: void onNodePositioned(androidx.ui.core.LayoutNode)>(r1);

        $r29 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker access$getConsistencyChecker$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        if $r29 != null goto label15;

        goto label16;

     label15:
        virtualinvoke $r29.<androidx.ui.core.LayoutTreeConsistencyChecker: void assertConsistent()>();

     label16:
        l0 = virtualinvoke r0.<androidx.ui.core.MeasureAndLayoutDelegate: long getMeasureIteration()>();

        $l4 = l0 + 1L;

        staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: void access$setMeasureIteration$p(androidx.ui.core.MeasureAndLayoutDelegate,long)>(r0, $l4);

        $r31 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: java.util.List access$getPostponedMeasureRequests$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        $r32 = (java.util.Collection) $r31;

        $z31 = interfaceinvoke $r32.<java.util.Collection: boolean isEmpty()>();

        if $z31 != 0 goto label17;

        $z32 = 1;

        goto label18;

     label17:
        $z32 = 0;

     label18:
        if $z32 == 0 goto label24;

        $r33 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: java.util.List access$getPostponedMeasureRequests$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        i5 = 0;

        $r7 = (java.util.Collection) $r33;

        $i3 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        i1 = $i3 + -1;

        if i5 > i1 goto label23;

     label19:
        i2 = i5;

        i5 = i5 + 1;

        r3 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (androidx.ui.core.LayoutNode) r3;

        $r9 = virtualinvoke r4.<androidx.ui.core.LayoutNode: androidx.ui.core.Owner getOwner()>();

        if $r9 == null goto label20;

        $z34 = 1;

        goto label21;

     label20:
        $z34 = 0;

     label21:
        if $z34 == 0 goto label22;

        virtualinvoke r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean requestRemeasure(androidx.ui.core.LayoutNode)>(r4);

     label22:
        if i5 <= i1 goto label19;

     label23:
        $r8 = staticinvoke <androidx.ui.core.MeasureAndLayoutDelegate: java.util.List access$getPostponedMeasureRequests$p(androidx.ui.core.MeasureAndLayoutDelegate)>(r0);

        interfaceinvoke $r8.<java.util.List: void clear()>();

     label24:
        goto label08;

     label25:
        r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        r34 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker>;

        if r34 != null goto label26;

        goto label27;

     label26:
        virtualinvoke r34.<androidx.ui.core.LayoutTreeConsistencyChecker: void assertConsistent()>();

     label27:
        r35 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label28:
        staticinvoke <android.os.Trace: void endSection()>();

        goto label31;

     label29:
        $r17 := @caughtexception;

        r36 = $r17;

     label30:
        staticinvoke <android.os.Trace: void endSection()>();

        throw r36;

     label31:
        $z7 = r19.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        return $z7;

        catch java.lang.Throwable from label05 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    public final void dispatchOnPositionedCallbacks()
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.OnPositionedDispatcher $r1;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.OnPositionedDispatcher onPositionedDispatcher>;

        virtualinvoke $r1.<androidx.ui.core.OnPositionedDispatcher: void dispatch()>();

        return;
    }

    public final void onNodeDetached(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode r1;
        androidx.ui.core.DepthSortedSet $r2;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        $r2 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.DepthSortedSet relayoutNodes>;

        virtualinvoke $r2.<androidx.ui.core.DepthSortedSet: void remove(androidx.ui.core.LayoutNode)>(r1);

        return;
    }

    private final boolean getCanAffectPlacedParent(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode $r1, r2, $r8;
        androidx.ui.core.LayoutNode$LayoutState $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Boolean $r5, $r9;
        androidx.ui.core.LayoutNode$UsageByParent $r6, $r7;

        r0 := @this: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 := @parameter0: androidx.ui.core.LayoutNode;

        $r3 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$LayoutState getLayoutState()>();

        $r4 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label4;

        r2 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getParent()>();

        if r2 != null goto label1;

        $r9 = (java.lang.Boolean) null;

        goto label2;

     label1:
        $z1 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label2:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r5);

        if $z2 == 0 goto label4;

        $r6 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode$UsageByParent getMeasuredByParent$ui_core_release()>();

        $r7 = <androidx.ui.core.LayoutNode$UsageByParent: androidx.ui.core.LayoutNode$UsageByParent InMeasureBlock>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z3 != 0 goto label3;

        $r8 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getAlignmentLinesQueryOwner$ui_core_release()>();

        if $r8 == null goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public static final boolean access$getCanAffectPlacedParent(androidx.ui.core.MeasureAndLayoutDelegate, androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate $r0;
        androidx.ui.core.LayoutNode $r1;
        boolean $z0;

        $r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 := @parameter1: androidx.ui.core.LayoutNode;

        $z0 = specialinvoke $r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean getCanAffectPlacedParent(androidx.ui.core.LayoutNode)>($r1);

        return $z0;
    }

    public static final boolean access$doRemeasure(androidx.ui.core.MeasureAndLayoutDelegate, androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.MeasureAndLayoutDelegate $r0;
        androidx.ui.core.LayoutNode r1;
        boolean $z0;

        $r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.ui.core.LayoutNode;

        $z0 = specialinvoke $r0.<androidx.ui.core.MeasureAndLayoutDelegate: boolean doRemeasure(androidx.ui.core.LayoutNode)>(r1);

        return $z0;
    }

    public static final androidx.ui.core.LayoutNode access$getRoot$p(androidx.ui.core.MeasureAndLayoutDelegate)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutNode $r1;

        r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutNode root>;

        return $r1;
    }

    public static final androidx.ui.core.OnPositionedDispatcher access$getOnPositionedDispatcher$p(androidx.ui.core.MeasureAndLayoutDelegate)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.OnPositionedDispatcher $r1;

        r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.OnPositionedDispatcher onPositionedDispatcher>;

        return $r1;
    }

    public static final androidx.ui.core.LayoutTreeConsistencyChecker access$getConsistencyChecker$p(androidx.ui.core.MeasureAndLayoutDelegate)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        androidx.ui.core.LayoutTreeConsistencyChecker $r1;

        r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: androidx.ui.core.LayoutTreeConsistencyChecker consistencyChecker>;

        return $r1;
    }

    public static final void access$setMeasureIteration$p(androidx.ui.core.MeasureAndLayoutDelegate, long)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        long l0;

        r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        l0 := @parameter1: long;

        r0.<androidx.ui.core.MeasureAndLayoutDelegate: long measureIteration> = l0;

        return;
    }

    public static final java.util.List access$getPostponedMeasureRequests$p(androidx.ui.core.MeasureAndLayoutDelegate)
    {
        androidx.ui.core.MeasureAndLayoutDelegate r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.ui.core.MeasureAndLayoutDelegate;

        $r1 = r0.<androidx.ui.core.MeasureAndLayoutDelegate: java.util.List postponedMeasureRequests>;

        return $r1;
    }

androidx.ui.core.MeasureAndLayoutDelegate$WhenMappings
<androidx.ui.core.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>
    public static final void <clinit>()
    {
        int[] r0;
        androidx.ui.core.LayoutNode$LayoutState[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.ui.core.LayoutNode$LayoutState $r2, $r3, $r4, $r5, $r6;

        $r1 = staticinvoke <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState Measuring>;

        $i1 = virtualinvoke $r2.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRemeasure>;

        $i2 = virtualinvoke $r3.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState LayingOut>;

        $i3 = virtualinvoke $r4.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i3] = 3;

        $r5 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState NeedsRelayout>;

        $i4 = virtualinvoke $r5.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i4] = 4;

        $r6 = <androidx.ui.core.LayoutNode$LayoutState: androidx.ui.core.LayoutNode$LayoutState Ready>;

        $i5 = virtualinvoke $r6.<androidx.ui.core.LayoutNode$LayoutState: int ordinal()>();

        r0[$i5] = 5;

        <androidx.ui.core.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

